{
    "funcInfo": [
        {
            "funcName": "sub_406e00",
            "funcStartAddr": "0x406e00",
            "funcEndAddr": "0x406e2e",
            "decompiledFuncCode": "int sub_406e00()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_406e80(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409290",
            "funcStartAddr": "0x409290",
            "funcEndAddr": "0x40aca9",
            "decompiledFuncCode": "int sub_409290() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406122",
            "funcStartAddr": "0x406122",
            "funcEndAddr": "0x40614b",
            "decompiledFuncCode": "int sub_406122()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_402680",
            "funcStartAddr": "0x402680",
            "funcEndAddr": "0x4026cf",
            "decompiledFuncCode": "extern int512_t g_40c3c8;\nextern unsigned long long g_40c3d8;\n\nint sub_402680()\n{\n    char *v1;  // rsi\n    unsigned long long v2;  // rbx\n    char *v3;  // rdi\n    unsigned long long v4;  // rax\n\n    v1 = \"0\";\n    v2 = &g_40c3d8;\n    while (true)\n    {\n        v4 = strcmp(v3, v1);\n        if (v4 != 0)\n        {\n            v2 += 24;\n            v1 = *((long long *)(v2 - 24));\n            return -18446744069414584321;\n        }\n        return *((int *)(0x18 * stack_base + (char *)&g_40c3c8));\n    }\n}\n"
        },
        {
            "funcName": "sub_4026e0",
            "funcStartAddr": "0x4026e0",
            "funcEndAddr": "0x40274b",
            "decompiledFuncCode": "int sub_4026e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    char v1;  // [bp-0x10]\n    unsigned short v2;  // [bp-0xe]\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n\n    v4 = ioctl(0x1, 0x5413, (unsigned int)&v1);\n    if (v4 == 0)\n    {\n        v5 = v2;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v6 = getenv(\"COLUMNS\");\n        if (v6 != 0)\n        {\n            v7 = sub_406fc0();\n            if (v7 == 0)\n            {\n                v5 = v0;\n            }\n        }\n        if (v6 == 0 || v0 - 1 > 2147483646 || v7 != 0)\n        {\n            v5 = 80;\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_407d70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x40836e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_2 *field_20;\n} struct_1;\n\nextern unsigned int g_410f10;\nextern unsigned int g_410f30;\nextern unsigned int g_410f60;\nextern unsigned int g_410f80;\nextern unsigned int g_410fb0;\nextern unsigned long long stderr;\n\nint sub_407d70()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_1 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_2 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x410f10, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x410f30, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (*(v18) == 0 || v22 == v16) && (v22 == v16 || v4 == 0) && (v22 == v16 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x410fb0, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x410f80, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v17) != 0 || v34 != 0))\n        {\n            return v42;\n        }\n    }\n    if (*((long long *)v17) == 0 && v28 == 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0 || v34 == 0 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x410f60, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_406e80",
            "funcStartAddr": "0x406e80",
            "funcEndAddr": "0x406eac",
            "decompiledFuncCode": "extern unsigned int g_41084f;\nextern unsigned int g_613240;\n\nint sub_406e80()\n{\n    dcgettext(0x0, 0x41084f, 0x5);\n    error(g_613240, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_406e30",
            "funcStartAddr": "0x406e30",
            "funcEndAddr": "0x406e58",
            "decompiledFuncCode": "int sub_406e30()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406c30();\n}\n"
        },
        {
            "funcName": "sub_4089e0",
            "funcStartAddr": "0x4089e0",
            "funcEndAddr": "0x4089f3",
            "decompiledFuncCode": "int sub_4089e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408960();\n}\n"
        },
        {
            "funcName": "sub_406340",
            "funcStartAddr": "0x406340",
            "funcEndAddr": "0x4063ad",
            "decompiledFuncCode": "int sub_406340()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405e20();\n}\n"
        },
        {
            "funcName": "sub_409230",
            "funcStartAddr": "0x409230",
            "funcEndAddr": "0x409286",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_409230()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_408b40",
            "funcStartAddr": "0x408b40",
            "funcEndAddr": "0x408b9c",
            "decompiledFuncCode": "int sub_408b40()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_409170();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404a50",
            "funcStartAddr": "0x404a50",
            "funcEndAddr": "0x404ae9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_6133f8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_404a50()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_6133f8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406020",
            "funcStartAddr": "0x406020",
            "funcEndAddr": "0x406053",
            "decompiledFuncCode": "extern int512_t g_613500;\n\nint sub_406020()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_613500 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_613500 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_4089c0",
            "funcStartAddr": "0x4089c0",
            "funcEndAddr": "0x4089d8",
            "decompiledFuncCode": "int sub_4089c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_408960();\n}\n"
        },
        {
            "funcName": "sub_406a90",
            "funcStartAddr": "0x406a90",
            "funcEndAddr": "0x406ae9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_406a90()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_406690();\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401aa0",
            "funcEndAddr": "0x402578",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    char padding_8[8];\n    struct struct_3 *field_10;\n} struct_4;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    char field_8;\n    char padding_9[7];\n    struct struct_3 *field_10;\n} struct_2;\n\ntypedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    char field_c;\n    char padding_d[3];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nextern unsigned int g_40bf34;\nextern unsigned int g_40c060;\nextern unsigned long long g_40c7e0;\nextern unsigned long long g_40c9c0;\nextern unsigned int g_40f590;\nextern unsigned int g_40f600;\nextern unsigned int g_40f628;\nextern unsigned int g_40f678;\nextern unsigned int g_40f6b0;\nextern unsigned int g_40f6d8;\nextern unsigned int g_411037;\nextern unsigned int g_613230;\nextern unsigned int g_6132b8;\nextern unsigned int g_6132bc;\nextern char g_613320;\nextern unsigned int g_613328;\nextern unsigned int g_613360;\nextern unsigned int g_613364;\nextern unsigned int g_613368;\nextern char g_61336c;\nextern int512_t g_613370;\nextern char g_613371;\nextern unsigned int g_6133dc;\nextern unsigned int g_6133e0;\nextern unsigned long long g_613580;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long|unsigned int * v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x60]\n    unsigned long|unsigned long long v3;  // [bp-0x58]\n    char v4;  // [bp-0x4b]\n    char v5;  // [bp-0x4a]\n    char v6;  // [bp-0x49]\n    char v7;  // [bp-0x3a]\n    char v8;  // [bp-0x39]\n    unsigned long long v10;  // r15\n    unsigned long long|unsigned int v11;  // r13\n    unsigned long long v12;  // rsi\n    struct_1 *v13;  // rbx\n    char *v17;  // rdi\n    unsigned long long v18;  // rcx\n    unsigned long long v19;  // rbp\n    char *v21;  // rsi\n    unsigned long long v22;  // rsi\n    unsigned long long v23;  // cc_dep1\n    unsigned long long v24;  // cc_dep2\n    unsigned long v25;  // d\n    unsigned long long *v26;  // rax\n    unsigned long long v27;  // rdx\n    unsigned long long v31;  // rax\n    unsigned long v33;  // r9\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rbx\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rbp\n    unsigned long long v42;  // rbx\n    unsigned long long v47;  // rbx\n    unsigned long long v51;  // rdx\n    char *v55;  // rax\n    char *v56;  // rax\n    char *v57;  // rax\n    unsigned long long v58;  // rbx\n    unsigned long long v60;  // rbx\n    unsigned long long v61;  // r13\n    char *v62;  // rbp\n    unsigned long long v63;  // rax\n    struct_4 *v67;  // rbx\n    char *v68;  // rbp\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // r12\n    struct_2 *v74;  // rbx\n    char *v78;  // rax\n    char *v79;  // rax\n    unsigned long long v80;  // rbx\n    struct_0 *v81;  // rbx\n    unsigned long long|unsigned int v82;  // r12\n    struct_0 *v83;  // rbx\n    unsigned long long v84;  // rbp\n    unsigned long long v85;  // r12\n    unsigned int v86;  // ebp\n    char *v87;  // rax\n    unsigned int *v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rdx\n    char *v93;  // rax\n    unsigned int *v94;  // rax\n    unsigned long long v95;  // rdx\n    unsigned long long v96;  // rcx\n    unsigned long long v97;  // rdx\n    char *v101;  // rax\n\n    v10 = 1;\n    v11 = 0;\n    v19 = 0;\n    v13 = v12;\n    sub_404a50();\n    setlocale(0x6, 0x411037);\n    bindtextdomain(0x40bf34, 0x40f590);\n    textdomain(0x40bf34);\n    sub_40bd50();\n    v6 = 1;\n    g_6132b8 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v2 = v12 + 8;\n    while (true)\n    {\n        if ((unsigned int)v1 != -1)\n        {\n            if ((unsigned int)v1 != 70)\n            {\n                if (v1 > 70)\n                {\n                    if ((unsigned int)v1 == 97)\n                    {\n                        v5 = 1;\n                        v11 = 1;\n                    }\n                    if ((unsigned int)v1 == 103)\n                    {\n                        v4 = 1;\n                        v11 = 2;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v1 == -131)\n                    {\n                        sub_406af0();\n                        exit(0x0); /* do not return */\n                    }\n                    if ((unsigned int)v1 == -130)\n                    {\n                        sub_402d90(); /* do not return */\n                    }\n                }\n                if ((v1 <= 70 || (unsigned int)v1 != 103) && (v1 <= 70 || (unsigned int)v1 != 97) && ((unsigned int)v1 != -131 || v1 > 70) && (v1 > 70 || (unsigned int)v1 != -130))\n                {\n                    v17 = \"-\";\n                    v18 = 7;\n                    v19 = 1;\n                    v21 = v13->field_8;\n                    while (v18 != 0)\n                    {\n                        v18 -= 1;\n                        v23 = *(v21);\n                        v24 = *(v17);\n                        v17 = &v17[v25];\n                        v21 = &v21[v25];\n                        break;\n                    }\n                    if ((v23 > v24) - 0 - (v23 < v24) != 0)\n                    {\n                        v6 = (strcmp(v13->field_8, \"drain\") != 0? 0 : (unsigned int)(char)(char)(stack_base)[-73]);\n                    }\n                    g_6132bc = 0;\n                    v10 = 1;\n                }\n            }\n            else if (v3 == 0)\n            {\n                v3 = g_613580;\n            }\n            else\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40f600, 0x5));\n            }\n            if ((v3 == 0 || (unsigned int)v1 != 70) && ((unsigned int)v1 == 70 || v1 > 70) && ((unsigned int)v1 == 103 || (unsigned int)v1 == 97 || (unsigned int)v1 == 70))\n            {\n                v22 = g_6132bc;\n                if (g_6132bc > (unsigned int)v10)\n                {\n                    v26 = &(&v13->padding_0)[v19 + 8 * v10];\n                    v27 = v2 + ((unsigned long long)g_6132bc - 1 - v10 + v10 + v19) * 8;\n                    do\n                    {\n                        *(v26) = 0;\n                        v26 = &v26[1];\n                    }\n                    while (v26 != v27);\n                }\n                else\n                {\n                    v22 = v10;\n                }\n                v10 = v22;\n            }\n        }\n        else if ((v4 & v5) == 0)\n        {\n            if (v6 == 0)\n            {\n                if (v5 == 0 && v4 == 0)\n                {\n                    if (v3 != 0)\n                    {\n                        *((int *)&v1) = sub_4089e0();\n                        v0 = stack_base + -58;\n                        sub_403bd0();\n                    }\n                    else\n                    {\n                        v3 = dcgettext(0x0, 0x40c060, 0x5);\n                        v1 = v33;\n                        v0 = stack_base + -58;\n                        sub_403bd0();\n                        v36 = tcgetattr(0x0, 0x613360);\n                    }\n                }\n                if (v5 != 0 || v4 != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40f678, 0x5));\n                }\n            }\n            else if (v3 == 0)\n            {\n                v3 = dcgettext(0x0, 0x40c060, 0x5);\n                v31 = tcgetattr(0x0, 0x613360);\n            }\n            if (v3 != 0 && (v5 == 0 || v6 != 0) && (v4 == 0 || v6 != 0))\n            {\n                v35 = sub_4049e0();\n                if (v35 >= 0)\n                {\n                    v37 = sub_407b50();\n                    if (v37 != -1)\n                    {\n                        v39 = sub_407b50();\n                        if (v39 >= 0)\n                        {\n                            v40 = tcgetattr(0x0, 0x613360);\n                        }\n                    }\n                }\n                else\n                {\n                    v38 = (unsigned int)sub_4064f0();\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            if ((v6 == 0 || v35 >= 0) && (v6 == 0 || v3 != 0) && (v6 == 0 || v39 < 0 || v37 == -1) && (v35 >= 0 || v5 != 0 || v4 != 0) && (v5 != 0 || v4 != 0 || v3 != 0) && (v39 < 0 || v37 == -1 || v5 != 0 || v4 != 0))\n            {\n                v41 = (unsigned int)sub_4064f0();\n                error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40f6b0, 0x5));\n            }\n            if (v5 == 0 && v6 == 0 && v4 == 0 && v3 == 0 && v36 != 0 || v35 >= 0 && v3 != 0 && v39 >= 0 && v37 != -1 && (v5 == 0 || v6 != 0) && (v4 == 0 || v6 != 0) && v40 != 0 || v3 == 0 && v6 != 0 && v31 != 0)\n            {\n                v42 = (unsigned int)sub_4064f0();\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n            if (v5 == 0 && v6 == 0 && v4 == 0 && v40 == 0 && v35 >= 0 && v3 != 0 && v39 >= 0 && v37 != -1 && v5 != 0 || v40 == 0 && v35 >= 0 && v3 != 0 && v39 >= 0 && v37 != -1 && (v5 == 0 || v6 != 0) && (v4 == 0 || v6 != 0) && !(v4 == 0 && v6 == 0) || v3 == 0 && v6 != 0 && v31 == 0)\n            {\n                g_6133dc = 0;\n                g_6133e0 = sub_4026e0();\n                if (v11 == 1)\n                {\n                    sub_402930();\n                    sub_402ca0();\n                    sub_4027c0();\n                    v55 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v55) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                    g_6133dc = 0;\n                    v67 = &g_40c7e0;\n                    while (true)\n                    {\n                        v62 = v67->field_0;\n                        v63 = strcmp(v67->field_0, \"min\");\n                        if (v63 == 0)\n                        {\n                            break;\n                        }\n                        if (strcmp(v62, \"flush\") != 0)\n                        {\n                            if (*((char *)(v67->field_10 + &g_613371)) != 0)\n                            {\n                                sub_402b00();\n                            }\n                            sub_4027c0();\n                        }\n                        v67 = &v67[1];\n                    }\n                    sub_4027c0();\n                    if (g_6133dc != 0)\n                    {\n                        v78 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *(v78) = 10;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                    }\n                    g_6133dc = 0;\n                    v81 = &g_40c9c0;\n                    for (v82 = 0; v81->field_0 != 0; v81 = &v81[1])\n                    {\n                        if ((v81->field_c & 8) == 0)\n                        {\n                            v86 = v81->field_8;\n                            if (v81->field_8 != v82)\n                            {\n                                v87 = stdout[5];\n                                if (stdout[5] < stdout[6])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v87) = 10;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                                g_6133dc = 0;\n                                v82 = v86;\n                            }\n                            v88 = sub_402750();\n                            v89 = v81->field_18;\n                            if (v81->field_18 == 0)\n                            {\n                                v89 = v81->field_10;\n                            }\n                            if (v88 != 0)\n                            {\n                                v90 = v89 & *(v88);\n                                if (v90 == v81->field_10)\n                                {\n                                    sub_4027c0();\n                                }\n                                else if ((v81->field_c & 4) != 0)\n                                {\n                                    sub_4027c0();\n                                }\n                            }\n                            else\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                        }\n                    }\n                }\n                else if (v11 != 2)\n                {\n                    sub_402930();\n                    sub_4027c0();\n                    v57 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v57) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                    g_6133dc = 0;\n                    v74 = &g_40c7e0;\n                    v61 = 1;\n                    while (true)\n                    {\n                        v68 = v74->field_0;\n                        v69 = strcmp(v74->field_0, \"min\");\n                        if (v69 == 0)\n                        {\n                            break;\n                        }\n                        v70 = (char)*((char *)(v74->field_10 + &g_613371));\n                        if (*((char *)(v74->field_10 + &g_613371)) != v74->field_8 && strcmp(v68, \"flush\") != 0)\n                        {\n                            if (v70 != 0)\n                            {\n                                sub_402b00();\n                            }\n                            sub_4027c0();\n                            v61 = 0;\n                        }\n                        v74 = &v74[1];\n                    }\n                    if ((g_61336c & 2) == 0)\n                    {\n                        sub_4027c0();\n                    }\n                    else if (v61 == 0)\n                    {\n                        v79 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *(v79) = 10;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                    }\n                    v83 = &g_40c9c0;\n                    v84 = 0;\n                    v85 = 1;\n                    g_6133dc = 0;\n                    while (true)\n                    {\n                        if (v83->field_0 != 0)\n                        {\n                            if ((v83->field_c & 8) == 0)\n                            {\n                                if (v83->field_8 != (unsigned int)v84)\n                                {\n                                    if (v85 == 0)\n                                    {\n                                        v93 = stdout[5];\n                                        if (stdout[5] < stdout[6])\n                                        {\n                                            stdout[5] = stdout[5] + 1;\n                                            *(v93) = 10;\n                                        }\n                                        else\n                                        {\n                                            __overflow();\n                                        }\n                                        g_6133dc = 0;\n                                    }\n                                    v85 = 1;\n                                    v84 = v83->field_8;\n                                }\n                                v94 = sub_402750();\n                                v95 = v83->field_18;\n                                if (v83->field_18 == 0)\n                                {\n                                    v95 = v83->field_10;\n                                }\n                                if (v94 != 0)\n                                {\n                                    v96 = v83->field_c;\n                                    v97 = v95 & *(v94);\n                                    if (v97 != v83->field_10)\n                                    {\n                                        if ((unsigned long long)((unsigned int)v96 & 5) == 5)\n                                        {\n                                            v85 = 0;\n                                            sub_4027c0();\n                                        }\n                                    }\n                                    else if ((v96 & 2) != 0)\n                                    {\n                                        v85 = 0;\n                                        sub_4027c0();\n                                    }\n                                }\n                                else\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                            if (v94 != 0 || (v83->field_c & 8) != 0)\n                            {\n                                v83 = &v83[1];\n                            }\n                        }\n                        else\n                        {\n                            break;\n                        }\n                    }\n                    if (v83->field_0 == 0)\n                    {\n                        v101 = stdout[5];\n                    }\n                    else if (v83->field_0 == 0)\n                    {\n                        g_6133dc = 0;\n                    }\n                }\n                if (v11 == 2)\n                {\n                    v47 = 0;\n                    __printf_chk(0x1, \"%lx:%lx:%lx\", g_613360, g_613364, g_613368, *((int *)&g_61336c));\n                    while (true)\n                    {\n                        v47 += 1;\n                        v51 = (char)*(&((char *)&g_613370)[v47]);\n                        __printf_chk(0x1, \":%lx\", v51);\n                        if (v47 == 32)\n                        {\n                            break;\n                        }\n                    }\n                    v56 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v56) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                }\n                if (v11 == 1 || stdout[5] >= stdout[6] && v11 != 2)\n                {\n                    v101 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v101) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                    g_6133dc = 0;\n                }\n            }\n            if (v5 == 0 && v6 == 0 && v4 == 0 && v3 == 0 && v36 == 0 || v5 == 0 && v6 == 0 && v4 == 0 && v40 == 0 && v35 >= 0 && v3 != 0 && v39 >= 0 && v37 != -1)\n            {\n                v8 = 0;\n                v7 = 0;\n                v1 = &g_613360;\n                v0 = stack_base + -58;\n                sub_403bd0();\n                if (v7 == 0)\n                {\n                    break;\n                }\n                if (!(tcsetattr(0x0, g_613230, 0x613360) == 0))\n                {\n                    v58 = (unsigned int)sub_4064f0();\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n                else if (tcgetattr(0x0, 0x613320) == 0)\n                {\n                    if (memcmp(&g_613360, &g_613320, 0x3c) == 0)\n                    {\n                        break;\n                    }\n                    g_613328 = g_613328 & 4025548799;\n                    if (v8 == 0)\n                    {\n                        if (memcmp(&g_613360, &g_613320, 0x3c) == 0)\n                        {\n                            break;\n                        }\n                    }\n                    v80 = (unsigned int)sub_4064f0();\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40f6d8, 0x5));\n                }\n                else\n                {\n                    v60 = (unsigned int)sub_4064f0();\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n        }\n        else\n        {\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40f628, 0x5));\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_403bd0",
            "funcStartAddr": "0x403bd0",
            "funcEndAddr": "0x4048ee",
            "decompiledFuncCode": "typedef struct struct_15 {\n    char padding_0[12];\n    char field_c;\n    char padding_d[3];\n    char field_10;\n    char padding_11[7];\n    unsigned int field_18;\n} struct_15;\n\ntypedef struct struct_13 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_13;\n\ntypedef struct struct_9 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_9;\n\ntypedef struct struct_7 {\n    char field_0;\n    char padding_1[3];\n    unsigned int field_4;\n} struct_7;\n\ntypedef struct struct_10 {\n    char padding_0[19];\n    unsigned short field_13;\n} struct_10;\n\ntypedef struct struct_14 {\n    unsigned long long field_0;\n    char padding_8[4];\n    char field_c;\n    char padding_d[3];\n    char field_10;\n    char padding_11[7];\n    unsigned int field_18;\n} struct_14;\n\ntypedef struct struct_4 {\n    char padding_0[12];\n    unsigned int field_c;\n} struct_4;\n\ntypedef struct struct_0 {\n    char padding_0[16];\n    char field_10;\n} struct_0;\n\ntypedef struct struct_11 {\n    unsigned long long field_0;\n    unsigned int field_8;\n} struct_11;\n\ntypedef struct struct_3 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[4];\n    unsigned int field_c;\n    char padding_10[6];\n    unsigned short field_16;\n} struct_3;\n\ntypedef struct struct_8 {\n    unsigned long long field_0;\n    char padding_8[4];\n    unsigned int field_c;\n} struct_8;\n\ntypedef struct struct_1 {\n    char padding_0[4];\n    unsigned int field_4;\n} struct_1;\n\ntypedef struct struct_6 {\n    unsigned int field_0;\n    char padding_4[8];\n    unsigned int field_c;\n    char padding_10[1];\n    char field_11;\n    char padding_12[1];\n    unsigned short field_13;\n} struct_6;\n\nextern unsigned int g_40c007;\nextern unsigned long long g_40c7e0;\nextern unsigned long long g_40c7f8;\nextern unsigned long long g_40c9c0;\nextern unsigned int g_613230;\nextern unsigned int g_6133dc;\nextern unsigned int g_6133e0;\n\nint sub_403bd0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long|unsigned int v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x60]\n    char *v3;  // [bp-0x50]\n    unsigned int v4;  // [bp-0x48]\n    unsigned long v5;  // [bp-0x40]\n    char *v6;  // [bp+0x8]\n    unsigned long|struct_0 *|unsigned long long|unsigned int v7;  // ecx\n    unsigned long|unsigned long long|unsigned int v8;  // rbp\n    unsigned long v9;  // rdx\n    unsigned long v10;  // rsi\n    char *v11;  // rbx\n    unsigned long long v12;  // r13\n    char *v13;  // rdi\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    unsigned long long v18;  // r15\n    char *v19;  // r14\n    unsigned int v20;  // r13d\n    unsigned long long v21;  // r12\n    unsigned long long v22;  // rax\n    struct_15 *v23;  // r12\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // cc_dep1\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r12\n    char *v28;  // r13\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rax\n    char *v31;  // rdi\n    unsigned long long v32;  // rcx\n    unsigned int *v33;  // rax\n    unsigned long long v34;  // cc_dep1\n    unsigned long long v35;  // cc_dep2\n    char v36[2];  // r15\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // cc_dep1\n    char *v39;  // rdi\n    char *v40;  // rsi\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep2\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // cc_dep1\n    unsigned long long v47;  // cc_dep2\n    char *v48;  // rsi\n    char *v49;  // rdi\n    unsigned long|char *|unsigned long long|char v50;  // rax\n    unsigned long long v51;  // rdi\n    struct_13 *v52;  // rbx\n    unsigned long long v53;  // cc_dep1\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // cc_dep1\n    char *v56;  // rdi\n    char *v57;  // rsi\n    unsigned long long v58;  // rax\n    char *v60;  // rdi\n    unsigned long long v61;  // rcx\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep2\n    unsigned long long v64;  // rax\n    unsigned long long v65;  // cc_dep1\n    unsigned long long v66;  // cc_dep2\n    unsigned long long v67;  // rdi\n    unsigned long long v69;  // cc_dep1\n    unsigned long long v71;  // cc_dep1\n    char *v72;  // r9\n    unsigned long long v73;  // r13\n    char *v75;  // rdi\n    unsigned long long v76;  // r14\n    unsigned long long v77;  // rax\n    unsigned long long v78;  // cc_dep1\n    unsigned long long v79;  // cc_dep2\n    unsigned long long v80;  // rdi\n    unsigned long long v81;  // rsi\n    unsigned long long v82;  // r12\n    unsigned long long v83;  // rax\n    unsigned long long v84;  // cc_dep1\n    unsigned long long v85;  // rax\n    struct_7 *v87;  // rsi\n    unsigned long long v88;  // rax\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rdx\n    char v92;  // dh\n    unsigned long long v93;  // rax\n    unsigned long long v95;  // rdi\n    unsigned long long v96;  // rax\n    unsigned long long v97;  // rax\n    unsigned long long v98;  // rax\n    unsigned long v101;  // r8\n    struct_14 *v102;  // rbx\n    unsigned long long v103;  // rax\n    unsigned long long v104;  // rax\n    unsigned int *v105;  // rax\n    unsigned int *v106;  // rax\n    unsigned long long v109;  // rax\n    unsigned int v111;  // edx\n    unsigned long long v112;  // rax\n    unsigned long long v114;  // rax\n    struct_11 *v116;  // rsi\n    unsigned int v117;  // eax\n    char *v119;  // r12\n    unsigned long long v120;  // r13\n    unsigned int *v121;  // r14\n    unsigned long long v122;  // rbx\n    unsigned long long v123;  // rax\n    unsigned long long v125;  // rcx\n    unsigned long long v126;  // r13\n    unsigned long long v127;  // r15\n    unsigned long long v129;  // rax\n    unsigned long long v130;  // rax\n    unsigned long long v132;  // rax\n    char *v133;  // rdx\n    char v134;  // r15b\n    unsigned long long v135;  // rax\n    unsigned long long v140;  // rax\n    unsigned long long v143;  // rax\n    unsigned long long v144;  // rax\n    struct_8 *v146;  // rsi\n    unsigned long long v147;  // rdx\n    unsigned int v148;  // eax\n    unsigned long long v149;  // rax\n    unsigned long long v152;  // rbx\n    unsigned long long v153;  // rbx\n    unsigned long long v154;  // rbx\n\n    if (v7 > 1)\n    {\n        v8 = 1;\n        v0 = v9;\n        v2 = v10;\n        while (true)\n        {\n            v50 = v8;\n            v1 = v8 * 8;\n            v11 = *((long long *)(v0 + v8 * 8));\n            if (*((long long *)(v0 + (v8 << 3))) != 0)\n            {\n                v12 = 0;\n                if (*(v11) == 45)\n                {\n                    v11 = &v11[1];\n                    v12 = 1;\n                }\n                v13 = \"drain\";\n                v7 = 6;\n                v48 = v11;\n                while (v7 != 0)\n                {\n                    v7 -= 1;\n                    v14 = *(v48);\n                    v15 = *(v13);\n                    v13 = &v13[v16];\n                    v48 = &v48[v16];\n                    break;\n                }\n                v50 = (v14 > v15) - 0 - (v14 < v15);\n                if ((v14 > v15) - 0 - (v14 < v15) == 0)\n                {\n                    v20 = (unsigned int)v12 ^ 1;\n                    g_613230 = v20;\n                }\n                else\n                {\n                    v18 = 0;\n                    v19 = \"parenb\";\n                    while (true)\n                    {\n                        v21 = v18;\n                        v22 = strcmp(v11, v19);\n                        if (v22 != 0)\n                        {\n                            v18 += 1;\n                            v19 = (&g_40c9c0)[4 * v18];\n                            if ((&g_40c9c0)[4 * v18] == 0 && v12 == 0)\n                            {\n                                v26 = &g_40c7f8;\n                                v27 = 0;\n                                v28 = \"intr\";\n                                while (true)\n                                {\n                                    v29 = strcmp(v11, v28);\n                                    if (v29 != 0)\n                                    {\n                                        v26 += 24;\n                                        v28 = *((long long *)(v26 - 24));\n                                        v27 = (unsigned int)v27 + 1;\n                                        if (*((long long *)(v26 - 24)) == 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        if (v7 - 1 == 1)\n                                        {\n                                            break;\n                                        }\n                                        v36 = *((long long *)(v0 + v1 + 8));\n                                        if (*((long long *)(v0 + v1 + 8)) == 0)\n                                        {\n                                            break;\n                                        }\n                                        v39 = \"min\";\n                                        v7 = 4;\n                                        v40 = v28;\n                                        v8 = 2;\n                                        while (v7 != 0)\n                                        {\n                                            v7 -= 1;\n                                            v43 = *(v40);\n                                            v44 = *(v39);\n                                            v39 = &v39[v16];\n                                            v40 = &v40[v16];\n                                            break;\n                                        }\n                                        v52 = &(&g_40c7e0)[3 * v27];\n                                        v53 = (v43 > v44) - 0 - (v43 < v44);\n                                        if ((char)v53 != 0)\n                                        {\n                                            v56 = \"time\";\n                                            v7 = 5;\n                                            v57 = v28;\n                                            while (v7 != 0)\n                                            {\n                                                v7 -= 1;\n                                                v62 = *(v57);\n                                                v63 = *(v56);\n                                                v56 = &v56[v16];\n                                                v57 = &v57[v16];\n                                                break;\n                                            }\n                                            v69 = (v62 > v63) - 0 - (v62 < v63);\n                                            if ((char)v69 != 0)\n                                            {\n                                                v73 = v36[0];\n                                                if (v36[0] != 0)\n                                                {\n                                                    v76 = v36[1];\n                                                    if (v36[1] != 0)\n                                                    {\n                                                        v82 = 0;\n                                                        v83 = strcmp(v36, \"^-\");\n                                                        if (v83 != 0)\n                                                        {\n                                                            v90 = strcmp(v36, \"undef\");\n                                                            if (v73 == 94 && v90 != 0)\n                                                            {\n                                                                if (v76 != 63)\n                                                                {\n                                                                    v82 = (unsigned int)v76 & 159;\n                                                                }\n                                                                else\n                                                                {\n                                                                    v82 = 127;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                if (v36[0] == 0 || v36[1] == 0)\n                                                {\n                                                    v82 = v73;\n                                                }\n                                            }\n                                        }\n                                        if ((char)v69 == 0 || (char)v53 == 0 || v73 != 94 && v36[0] != 0 && v90 != 0 && v36[1] != 0 && v83 != 0)\n                                        {\n                                            v82 = (unsigned int)sub_402ab0();\n                                        }\n                                        *((unsigned long long *)(v101 + v52->field_10 + 17)) = v82;\n                                        v50 = v6;\n                                        *(v6) = 1;\n                                    }\n                                }\n                                if (v29 != 0)\n                                {\n                                    v31 = \"i\";\n                                    v32 = 7;\n                                    v48 = v11;\n                                }\n                                else if (v29 == 0)\n                                {\n                                    v152 = (unsigned int)sub_406670();\n                                }\n                                else if (...)\n                                {\n                                    v8 = (unsigned long long)v8 + 1;\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v23 = &(&g_40c9c0)[4 * v21];\n                            v24 = v23->field_c;\n                            v25 = v23->field_c & 16;\n                            if ((char)v25 == 0)\n                            {\n                                if (v12 == 0)\n                                {\n                                    v30 = sub_402750();\n                                    if (v30 != 0)\n                                    {\n                                        *(v30) = !(v23->field_18) & *(v30) | *((int *)&v23->field_10);\n                                        v50 = v6;\n                                        *(v6) = 1;\n                                    }\n                                    else\n                                    {\n                                        v37 = strcmp(v19, \"evenp\");\n                                        if (v37 != 0)\n                                        {\n                                            v45 = strcmp(v19, \"parity\");\n                                            if (v45 != 0)\n                                            {\n                                                v58 = strcmp(v19, \"oddp\");\n                                                if (v58 == 0)\n                                                {\n                                                    v1 = *((int *)(v101 + 8));\n                                                    *((int *)(v101 + 8)) = *((int *)(v101 + 8)) & -817 | 800;\n                                                }\n                                            }\n                                        }\n                                        if (v37 == 0 || v45 == 0)\n                                        {\n                                            v1 = *((int *)(v101 + 8));\n                                            *((int *)(v101 + 8)) = *((int *)(v101 + 8)) & -817 | 288;\n                                            v50 = v6;\n                                            *(v6) = 1;\n                                        }\n                                    }\n                                }\n                                else if ((v24 & 4) != 0)\n                                {\n                                    v33 = sub_402750();\n                                    if (v33 != 0)\n                                    {\n                                        *(v33) = *(v33) & !((unsigned int)*((long long *)(r12<8> + 16)) | *((int *)(r12<8> + 24)));\n                                        v50 = v6;\n                                        *(v6) = 1;\n                                    }\n                                    else\n                                    {\n                                        v41 = strcmp(v19, \"evenp\");\n                                        if (v41 != 0)\n                                        {\n                                            v54 = strcmp(v19, \"parity\");\n                                            if (v54 != 0)\n                                            {\n                                                v64 = strcmp(v19, \"oddp\");\n                                            }\n                                        }\n                                        if (v64 == 0 || v54 == 0 || v41 == 0)\n                                        {\n                                            v1 = *((int *)(v101 + 8));\n                                            *((int *)(v101 + 8)) = *((int *)(v101 + 8)) & -305 | 48;\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    *(v6) = 1;\n                                }\n                            }\n                        }\n                        if ((&g_40c9c0)[4 * v18] == 0 || v22 == 0)\n                        {\n                            if (v12 == 0 && v22 != 0 || v22 == 0 && (char)v25 != 0)\n                            {\n                                v31 = \"i\";\n                                v32 = 7;\n                                v48 = v11;\n                                while (v32 != 0)\n                                {\n                                    v32 -= 1;\n                                    v34 = *(v48);\n                                    v35 = *(v31);\n                                    v31 = &v31[v16];\n                                    v48 = &v48[v16];\n                                    break;\n                                }\n                                v38 = (v34 > v35) - 0 - (v34 < v35);\n                                if ((char)v38 != 0)\n                                {\n                                    v49 = \"ospeed\";\n                                    v42 = 7;\n                                    v48 = v11;\n                                    while (v42 != 0)\n                                    {\n                                        v42 -= 1;\n                                        v46 = *(v48);\n                                        v47 = *(v49);\n                                        v49 = &v49[v16];\n                                        v48 = &v48[v16];\n                                        break;\n                                    }\n                                    v55 = (v46 > v47) - 0 - (v46 < v47);\n                                    if ((char)v55 != 0)\n                                    {\n                                        v60 = \"rows\";\n                                        v61 = 5;\n                                        v48 = v11;\n                                        while (v61 != 0)\n                                        {\n                                            v61 -= 1;\n                                            v65 = *(v48);\n                                            v66 = *(v60);\n                                            v60 = &v60[v16];\n                                            v48 = &v48[v16];\n                                            break;\n                                        }\n                                        v71 = (v65 > v66) - 0 - (v65 < v66);\n                                        if ((char)v71 != 0)\n                                        {\n                                            v75 = \"cols\";\n                                            v7 = 5;\n                                            v48 = v11;\n                                            while (v7 != 0)\n                                            {\n                                                v7 -= 1;\n                                                v78 = *(v48);\n                                                v79 = *(v75);\n                                                v75 = &v75[v16];\n                                                v48 = &v48[v16];\n                                                break;\n                                            }\n                                            v84 = (v78 > v79) - 0 - (v78 < v79);\n                                            if ((char)v84 != 0)\n                                            {\n                                                v88 = strcmp(v11, \"columns\");\n                                                if (v88 != 0)\n                                                {\n                                                    v50 = strcmp(v11, \"size\");\n                                                    if ((unsigned int)v50 != 0)\n                                                    {\n                                                        v98 = strcmp(v11, \"line\");\n                                                        if (v98 != 0)\n                                                        {\n                                                            v50 = strcmp(v11, \"speed\");\n                                                            if ((unsigned int)v50 != 0)\n                                                            {\n                                                                v50 = sub_402680();\n                                                                if ((unsigned int)v50 != -1)\n                                                                {\n                                                                    if (v75 != 0)\n                                                                    {\n                                                                        break;\n                                                                    }\n                                                                    cfsetispeed(v101, v50);\n                                                                }\n                                                                else\n                                                                {\n                                                                    v119 = v11;\n                                                                    v120 = 0;\n                                                                    v121 = __errno_location();\n                                                                    while (true)\n                                                                    {\n                                                                        *(v121) = 0;\n                                                                        if (*(v3) == 58 && *(v121) == 0 && v3 != v119)\n                                                                        {\n                                                                            v125 = strtoul();\n                                                                            v4 = v125;\n                                                                            v120 += 1;\n                                                                            v119 = &v3[1];\n                                                                            v126 = 0;\n                                                                            v127 = 58;\n                                                                            *((long long *)v101) = *((long long *)&v4);\n                                                                            *((unsigned long *)(v101 + 8)) = v5;\n                                                                            while (true)\n                                                                            {\n                                                                                *(v121) = 0;\n                                                                                v132 = strtoul();\n                                                                                if (*(v121) != 0)\n                                                                                {\n                                                                                    break;\n                                                                                }\n                                                                                v133 = v3;\n                                                                                v134 = v119 == v133;\n                                                                                if ((v132 & -0x100) != 0)\n                                                                                {\n                                                                                    break;\n                                                                                }\n                                                                                v119 = &v133[1];\n                                                                                *((unsigned long long *)(v101 + v126 + 17)) = v132;\n                                                                                v126 += 1;\n                                                                                v7 = 58;\n                                                                                if (v119 == v133 || v126 == 32 || *(v3) != v127)\n                                                                                {\n                                                                                    break;\n                                                                                }\n                                                                                v127 = (unsigned int)(v126 != 31? 58 : (unsigned int)r15<8>);\n                                                                            }\n                                                                            if (*(v3) == v127 && (v132 & -0x100) == 0 && *(v121) == 0 && v119 != v133)\n                                                                            {\n                                                                                v50 = v6;\n                                                                                *(v6) = 1;\n                                                                            }\n                                                                            else\n                                                                            {\n                                                                                v153 = (unsigned int)sub_406670();\n                                                                            }\n                                                                        }\n                                                                        v153 = (unsigned int)sub_406670();\n                                                                    }\n                                                                    if (v120 == 4)\n                                                                    {\n                                                                        v50 = v6;\n                                                                        *(v6) = 1;\n                                                                    }\n                                                                    else if (v3 == v119 || v120 == 4 || *(v3) != 58 || *(v121) != 0)\n                                                                    {\n                                                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v48, 0x5));\n                                                                        sub_402d90(); /* do not return */\n                                                                    }\n                                                                }\n                                                            }\n                                                            else\n                                                            {\n                                                                if (v75 != 0)\n                                                                {\n                                                                    break;\n                                                                }\n                                                                g_6133e0 = sub_4026e0();\n                                                                v50 = sub_402930();\n                                                            }\n                                                        }\n                                                        else if (v7 - 1 != 1)\n                                                        {\n                                                            if (*((long long *)(v0 + v1 + 8)) != 0)\n                                                            {\n                                                                v8 = 2;\n                                                                v112 = sub_402ab0();\n                                                                v7 = v101;\n                                                                *((unsigned long long *)(v101 + 16)) = v112;\n                                                                if ((v112 & -0x100) != 0)\n                                                                {\n                                                                    v122 = (unsigned int)sub_406670();\n                                                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40c007, 0x5));\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                    else\n                                                    {\n                                                        if (v75 != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        g_6133dc = 0;\n                                                        g_6133e0 = sub_4026e0();\n                                                        v50 = sub_402ca0();\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else if (v7 - 1 != 1)\n                                        {\n                                            v50 = v0;\n                                            v7 = v1;\n                                            v80 = *((long long *)(v0 + v1 + 8));\n                                            if (*((long long *)(v0 + v1 + 8)) != 0)\n                                            {\n                                                v8 = 2;\n                                                if (v75 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                sub_402ab0();\n                                                v50 = sub_402bd0();\n                                            }\n                                        }\n                                    }\n                                    else if (v7 - 1 != 1)\n                                    {\n                                        v50 = v0;\n                                        v7 = v1;\n                                        v67 = *((long long *)(v0 + v1 + 8));\n                                        if (*((long long *)(v0 + v1 + 8)) != 0)\n                                        {\n                                            v8 = 2;\n                                            if (v75 != 0)\n                                            {\n                                                break;\n                                            }\n                                            v81 = (unsigned int)sub_402680();\n                                        }\n                                    }\n                                }\n                                else if (v7 - 1 != 1)\n                                {\n                                    v50 = v0;\n                                    v7 = v1;\n                                    v51 = *((long long *)(v0 + v1 + 8));\n                                    if (*((long long *)(v0 + v1 + 8)) != 0)\n                                    {\n                                        v8 = 2;\n                                        if (v75 != 0)\n                                        {\n                                            break;\n                                        }\n                                        v8 = (unsigned int)(2 + 1);\n                                        cfsetispeed(v101, sub_402680());\n                                        *(v72) = 1;\n                                        v50 = v6;\n                                        *(v6) = 1;\n                                        break;\n                                    }\n                                }\n                            }\n                            if (v12 != 0 && ((char)v25 == 0 || v22 != 0) && ((v24 & 4) == 0 || v22 != 0))\n                            {\n                                v154 = (unsigned int)sub_406670();\n                            }\n                        }\n                        if ((char)v25 == 0 && v33 == 0 && v22 == 0 && v64 != 0 && v54 != 0 && v12 != 0 && (v24 & 4) != 0 && v41 != 0 || (char)v25 == 0 && v30 == 0 && v12 == 0 && v22 == 0 && v37 != 0 && v45 != 0 && v58 != 0)\n                        {\n                            v77 = strcmp(v19, \"nl\");\n                            if (v77 == 0)\n                            {\n                                v87 = v101;\n                                v7 = -17179869441 & *((long long *)v101);\n                                if (v12 != 0)\n                                {\n                                    v91 = (unsigned int)(*((int *)v101) & -449);\n                                    v92 = (char)((*((int *)v101) & -449) >> 8) | 1;\n                                    v87->field_4 = *((int *)(v101 + 4)) & -45 | 4;\n                                    v50 = v6;\n                                    *((unsigned int *)&v87->field_0) = rdx<8>;\n                                    *(v6) = 1;\n                                }\n                                else\n                                {\n                                    *((long long *)v101) = -17179869441 & *((long long *)v101);\n                                    v50 = v6;\n                                    *(v6) = 1;\n                                }\n                            }\n                            else\n                            {\n                                v85 = strcmp(v19, \"ek\");\n                                if (v85 == 0)\n                                {\n                                    *((short *)(v101 + 19)) = 5503;\n                                    v50 = v6;\n                                    *(v6) = 1;\n                                }\n                                else\n                                {\n                                    v93 = strcmp(v19, \"sane\");\n                                    if (v93 != 0)\n                                    {\n                                        v97 = strcmp(v19, \"cbreak\");\n                                        if (v97 != 0)\n                                        {\n                                            v103 = strcmp(v19, \"pass8\");\n                                            if (v103 == 0)\n                                            {\n                                                v7 = v101;\n                                                v111 = *((int *)v101);\n                                                v1 = *((int *)(v101 + 8));\n                                                if (v12 != 0)\n                                                {\n                                                    *((int *)(v7 + 8)) = *((int *)(v101 + 8)) & -305 | 288;\n                                                    v50 = v6;\n                                                    *((unsigned int *)v7) = v111 | 32;\n                                                    *(v6) = 1;\n                                                }\n                                                else\n                                                {\n                                                    *((int *)(v101 + 8)) = *((int *)(v101 + 8)) & -305 | 48;\n                                                    v50 = v6;\n                                                    *((unsigned int *)v101) = v111 & -33;\n                                                    *(v6) = 1;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v109 = strcmp(v19, \"litout\");\n                                                if (v109 == 0)\n                                                {\n                                                    v116 = v101;\n                                                    v7 = -4294967329 & *((long long *)v101);\n                                                    v1 = *((int *)(v101 + 8));\n                                                    v117 = *((int *)(v101 + 8)) & -305;\n                                                    if (v12 != 0)\n                                                    {\n                                                        v116->field_0 = 4294967328 | *((long long *)v101);\n                                                        v116->field_8 = v117 | 288;\n                                                        v50 = v6;\n                                                        *(v6) = 1;\n                                                    }\n                                                    else\n                                                    {\n                                                        *((int *)(v101 + 8)) = *((int *)(v101 + 8)) & -305 | 48;\n                                                        v50 = v6;\n                                                        *((unsigned long *)v101) = v7;\n                                                        *(v6) = 1;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v114 = strcmp(v19, \"raw\");\n                                                    if (v114 != 0)\n                                                    {\n                                                        v123 = strcmp(v19, \"cooked\");\n                                                        if (v123 != 0)\n                                                        {\n                                                            v130 = strcmp(v19, \"decctlq\");\n                                                            if (v130 != 0)\n                                                            {\n                                                                v135 = strcmp(v19, \"tabs\");\n                                                                if (v135 != 0)\n                                                                {\n                                                                    v140 = strcmp(v19, \"lcase\");\n                                                                    if (v140 != 0)\n                                                                    {\n                                                                        v143 = strcmp(v19, \"LCASE\");\n                                                                        if (v143 != 0)\n                                                                        {\n                                                                            v144 = strcmp(v19, \"crt\");\n                                                                            if (v144 == 0)\n                                                                            {\n                                                                                *((int *)(v101 + 12)) = *((int *)(v101 + 12)) | 2576;\n                                                                                v50 = v6;\n                                                                                *(v6) = 1;\n                                                                            }\n                                                                            else\n                                                                            {\n                                                                                v149 = strcmp(v19, \"dec\");\n                                                                                if (v149 == 0)\n                                                                                {\n                                                                                    *((int *)v101) = *((int *)v101) & -2049;\n                                                                                    *((char *)(v101 + 17)) = 3;\n                                                                                    *((short *)(v101 + 19)) = 5503;\n                                                                                    *((int *)(v101 + 12)) = *((int *)(v101 + 12)) | 2576;\n                                                                                    v50 = v6;\n                                                                                    *(v6) = 1;\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                                else if (v12 != 0)\n                                                                {\n                                                                    *((int *)(v101 + 4)) = *((int *)(v101 + 4));\n                                                                    v50 = v6;\n                                                                    *(v6) = 1;\n                                                                }\n                                                                else\n                                                                {\n                                                                    *((int *)(v101 + 4)) = *((int *)(v101 + 4));\n                                                                    v50 = v6;\n                                                                    *(v6) = 1;\n                                                                }\n                                                            }\n                                                            else if (v12 != 0)\n                                                            {\n                                                                *((int *)v101) = *((int *)v101);\n                                                                v50 = v6;\n                                                                *(v6) = 1;\n                                                            }\n                                                            else\n                                                            {\n                                                                *((int *)v101) = *((int *)v101);\n                                                                v50 = v6;\n                                                                *(v6) = 1;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else if (v12 != 0)\n                                        {\n                                            *((int *)(v101 + 12)) = *((int *)(v101 + 12)) | 2;\n                                            v50 = v6;\n                                            *(v6) = 1;\n                                        }\n                                        else\n                                        {\n                                            *((int *)(v101 + 12)) = *((int *)(v101 + 12)) & -3;\n                                            v50 = v6;\n                                            *(v6) = 1;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v96 = &g_40c7e0;\n                                        while (true)\n                                        {\n                                            v96 += 24;\n                                            if (*((long long *)(v96 - 24)) == 0)\n                                            {\n                                                break;\n                                            }\n                                            v7 = (char)*((char *)(v96 - 16));\n                                            *((char *)(v101 + *((long long *)(v96 - 8)) + 17)) = *((char *)(v96 - 16));\n                                        }\n                                        for (v102 = &g_40c9c0; v102->field_0 != 0; v102 = (char *)&v102[1].field_0 + 4)\n                                        {\n                                            v104 = v102->field_c;\n                                            if ((v102->field_c & 16) == 0)\n                                            {\n                                                if ((v104 & 1) != 0)\n                                                {\n                                                    v105 = sub_402750();\n                                                    if (v105 != 0)\n                                                    {\n                                                        *(v105) = !(v102->field_18) & *(v105) | *((int *)&v102->field_10);\n                                                    }\n                                                    else\n                                                    {\n                                                        __assert_fail(); /* do not return */\n                                                    }\n                                                }\n                                                else if ((v104 & 2) != 0)\n                                                {\n                                                    v106 = sub_402750();\n                                                    if (v106 != 0)\n                                                    {\n                                                        *(v106) = *(v106) & !((unsigned int)*((long long *)(rbx<8> + 16)) | *((int *)(rbx<8> + 24)));\n                                                    }\n                                                    else\n                                                    {\n                                                        __assert_fail(); /* do not return */\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (((char)v71 != 0 && (char)v55 != 0 && (char)v84 != 0 && (char)v38 != 0 && ((&g_40c9c0)[4 * v18] == 0 || v22 == 0) && (v12 == 0 || v22 == 0) && ((char)v25 != 0 || v22 != 0) && v88 == 0 || (char)v71 != 0 && (char)v55 != 0 && (char)v38 != 0 && ((&g_40c9c0)[4 * v18] == 0 || v22 == 0) && (v12 == 0 || v22 == 0) && ((char)v25 != 0 || v22 != 0) && (char)v84 == 0) && v7 - 1 != 1)\n                        {\n                            v50 = v0;\n                            v7 = v1;\n                            v95 = *((long long *)(v0 + v1 + 8));\n                            if (*((long long *)(v0 + v1 + 8)) != 0)\n                            {\n                                v8 = 2;\n                                if (v75 != 0)\n                                {\n                                    break;\n                                }\n                                sub_402ab0();\n                                v50 = sub_402bd0();\n                            }\n                        }\n                        if (...)\n                        {\n                            v129 = *(v19);\n                            if (*(v19) == 114 && v12 == 0 || v129 != 99 && *(v19) != 114 || *(v19) != 114 && v12 != 0)\n                            {\n                                *((int *)v101) = 0;\n                                *((int *)(v101 + 4)) = *((int *)(v101 + 4)) & -2;\n                                *((int *)(v101 + 12)) = *((int *)(v101 + 12)) & -8;\n                                *((short *)(v101 + 22)) = 0x100;\n                                v50 = v6;\n                                *(v6) = 1;\n                            }\n                            else\n                            {\n                                *((int *)(v101 + 12)) = *((int *)(v101 + 12)) | 3;\n                                *((long long *)v101) = *((long long *)v101) | 4294968614;\n                                v50 = v6;\n                                *(v6) = 1;\n                            }\n                        }\n                        if (...)\n                        {\n                            v152 = (unsigned int)sub_406670();\n                        }\n                        if ((char)v71 != 0 && (char)v55 != 0 && (char)v84 != 0 && (char)v38 != 0 && ((&g_40c9c0)[4 * v18] == 0 || v22 == 0) && (v12 == 0 || v22 == 0) && ((char)v25 != 0 || v22 != 0) && v88 != 0 && (unsigned int)v50 != 0 && v98 != 0 && (unsigned int)v50 != 0 && (unsigned int)v50 != -1 || (char)v55 == 0 && v7 - 1 != 1 && *((long long *)(v0 + v1 + 8)) != 0 && (char)v38 != 0 && ((&g_40c9c0)[4 * v18] == 0 || v22 == 0) && (v12 == 0 || v22 == 0) && ((char)v25 != 0 || v22 != 0))\n                        {\n                            cfsetospeed();\n                            *(v72) = 1;\n                        }\n                        if (...)\n                        {\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v48, 0x5));\n                            sub_402d90(); /* do not return */\n                        }\n                        if (...)\n                        {\n                            v146 = v101;\n                            v7 = -8589935105 & *((long long *)v101);\n                            v147 = 0x200000200 | *((long long *)v101);\n                            v148 = *((int *)(v101 + 12));\n                            if (v12 != 0)\n                            {\n                                v146->field_0 = -8589935105 & *((long long *)v101);\n                                v146->field_c = v148 & -5;\n                                v50 = v6;\n                                *(v6) = 1;\n                            }\n                            else\n                            {\n                                *((int *)(v101 + 12)) = *((int *)(v101 + 12)) | 4;\n                                v50 = v6;\n                                *((unsigned long long *)v101) = v147;\n                                *(v6) = 1;\n                            }\n                        }\n                        if (...)\n                        {\n                            v50 = v6;\n                            *(v6) = 1;\n                        }\n                    }\n                    if (...)\n                    {\n                        v8 = (unsigned long long)v8 + 1;\n                    }\n                    else if (v75 == 0 && (char)v38 == 0 && v7 - 1 != 1 && *((long long *)(v0 + v1 + 8)) != 0 && ((&g_40c9c0)[4 * v18] == 0 || v22 == 0) && (v12 == 0 || v22 == 0) && ((char)v25 != 0 || v22 != 0))\n                    {\n                        return v50;\n                    }\n                    else if (v75 == 0 && (char)v38 == 0 && v7 - 1 != 1 && *((long long *)(v0 + v1 + 8)) != 0 && ((&g_40c9c0)[4 * v18] == 0 || v22 == 0) && (v12 == 0 || v22 == 0) && ((char)v25 != 0 || v22 != 0))\n                    {\n                        v50 = v8;\n                        v1 = v8 * 8;\n                        v11 = *((long long *)(v0 + v8 * 8));\n                    }\n                }\n            }\n            v8 = (unsigned long long)v8 + 1;\n        }\n    }\n    return v50;\n}\n"
        },
        {
            "funcName": "sub_404bf0",
            "funcStartAddr": "0x404bf0",
            "funcEndAddr": "0x405d28",
            "decompiledFuncCode": "int sub_404bf0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long|unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_404af0();\n            v27 = (unsigned int)sub_404af0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                    if (v25 != 0)\n                                    {\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v89 = (unsigned int)v39 == 2;\n                                    }\n                                    else\n                                    {\n                                        v89 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        v87 = v89;\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                        if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                        *((unsigned long long *)&v4) = v4 & v87;\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_404bf0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_408a60();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v46 != 1 && v17 != 0)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && (unsigned int)v46 != 0 && v46 != -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v63 == 0 || v89 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v25 == 0 || v78 == 0) && (v25 == 0 || v76 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_404bf0();\n            }\n            if ((v25 == 0 || v46 == 0) && (v25 == 0 || v89 != 0) && (v17 == 0 || v46 == 0 || v5 == 0) && (v17 == 0 || v5 == 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && v6 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v25 == 0 || v78 == 0) && (v25 == 0 || v76 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_406d00",
            "funcStartAddr": "0x406d00",
            "funcEndAddr": "0x406d78",
            "decompiledFuncCode": "int sub_406d00() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406690",
            "funcStartAddr": "0x406690",
            "funcEndAddr": "0x406a39",
            "decompiledFuncCode": "extern unsigned int g_4104cb;\nextern unsigned int g_4104cf;\nextern unsigned int g_4104df;\nextern unsigned int g_4104f6;\nextern unsigned int g_410558;\nextern unsigned int g_410628;\nextern unsigned int g_410648;\nextern unsigned int g_410670;\nextern unsigned int g_410698;\nextern unsigned int g_4106c8;\n\nint sub_406690()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x4104cb, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x410558, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4104cf, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4104df, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x4104f6, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x410628, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x410648, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x410670, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x410698, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x4106c8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_4027c0",
            "funcStartAddr": "0x4027c0",
            "funcEndAddr": "0x402913",
            "decompiledFuncCode": "extern unsigned int g_6133dc;\nextern unsigned int g_6133e0;\nextern unsigned long long stdout[7];\n\nint sub_4027c0()\n{\n    char v0;  // [bp-0xd8]\n    unsigned int v1;  // [bp-0xd0]\n    unsigned int v2;  // [bp-0xcc]\n    unsigned long v3;  // [bp-0xc8]\n    unsigned long v4;  // [bp-0xc0]\n    unsigned long v5;  // [bp-0xb0]\n    unsigned long v6;  // [bp-0xa8]\n    unsigned long v7;  // [bp-0xa0]\n    unsigned long v8;  // [bp-0x98]\n    unsigned long v9;  // [bp-0x90]\n    void v10;  // [bp-0x88]\n    void v11;  // [bp-0x78]\n    void v12;  // [bp-0x68]\n    void v13;  // [bp-0x58]\n    void v14;  // [bp-0x48]\n    void v15;  // [bp-0x38]\n    void v16;  // [bp-0x28]\n    void v17;  // [bp-0x18]\n    unsigned long v19;  // rsi\n    unsigned long v20;  // rdx\n    unsigned long v21;  // rcx\n    unsigned long v22;  // r8\n    unsigned long v23;  // r9\n    char v24;  // al\n    void v25;  // xmm0\n    void v26;  // xmm1\n    void v27;  // xmm2\n    void v28;  // xmm3\n    void v29;  // xmm4\n    void v30;  // xmm5\n    void v31;  // xmm6\n    void v32;  // xmm7\n    unsigned int v33;  // ebx\n    unsigned long|unsigned int v34;  // rax\n    unsigned long long v35[7];  // rdi\n    char *v37;  // rcx\n    unsigned int v38;  // eax\n\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    v9 = v23;\n    if (v24 != 0)\n    {\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n        v17 = v32;\n    }\n    v3 = stack_base + 8;\n    v1 = 8;\n    v2 = 48;\n    v4 = stack_base + -184;\n    v33 = sub_408ae0();\n    if (v33 >= 0)\n    {\n        v34 = g_6133dc;\n        v35 = stdout;\n        if (g_6133dc > 0)\n        {\n            v37 = stdout[5];\n            if (g_6133e0 - g_6133dc < v33)\n            {\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v37) = 10;\n                }\n                else\n                {\n                    __overflow();\n                }\n                g_6133dc = 0;\n                v35 = stdout;\n            }\n            else\n            {\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v37) = 32;\n                }\n                else\n                {\n                    __overflow();\n                    v34 = g_6133dc;\n                }\n                v38 = v34 + 1;\n                v35 = stdout;\n                g_6133dc = v38;\n            }\n        }\n        fputs_unlocked(*((long long *)&v0), v35);\n        g_6133dc = g_6133dc + v33;\n        return (unsigned long long)free(*((long long *)&v0));\n    }\n    sub_406e80(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40bd50",
            "funcStartAddr": "0x40bd50",
            "funcEndAddr": "0x40bd68",
            "decompiledFuncCode": "extern int512_t g_613228;\n\nint sub_40bd50()\n{\n}\n"
        },
        {
            "funcName": "sub_406e60",
            "funcStartAddr": "0x406e60",
            "funcEndAddr": "0x406e73",
            "decompiledFuncCode": "int sub_406e60()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_404920",
            "funcStartAddr": "0x404920",
            "funcEndAddr": "0x404928",
            "decompiledFuncCode": "extern unsigned long long g_6133f0;\n\nint sub_404920()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6133f0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4065e0",
            "funcStartAddr": "0x4065e0",
            "funcEndAddr": "0x4065f7",
            "decompiledFuncCode": "int sub_4065e0()\n{\n}\n"
        },
        {
            "funcName": "sub_406bb0",
            "funcStartAddr": "0x406bb0",
            "funcEndAddr": "0x406c24",
            "decompiledFuncCode": "extern unsigned int g_410512;\nextern unsigned int g_41053d;\nextern unsigned int g_410770;\n\nint sub_406bb0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x410512, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41053d, 0x5));\n    dcgettext(0x0, 0x410770, 0x5);\n}\n"
        },
        {
            "funcName": "sub_406430",
            "funcStartAddr": "0x406430",
            "funcEndAddr": "0x40643f",
            "decompiledFuncCode": "int sub_406430()\n{\n}\n"
        },
        {
            "funcName": "sub_4065d0",
            "funcStartAddr": "0x4065d0",
            "funcEndAddr": "0x4065d9",
            "decompiledFuncCode": "int sub_4065d0()\n{\n}\n"
        },
        {
            "funcName": "sub_406000",
            "funcStartAddr": "0x406000",
            "funcEndAddr": "0x40600f",
            "decompiledFuncCode": "extern int512_t g_613500;\n\nint sub_406000()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_613500 : v1));\n}\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a15",
            "decompiledFuncCode": "int sub_408a00()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408390();\n}\n"
        },
        {
            "funcName": "sub_404940",
            "funcStartAddr": "0x404940",
            "funcEndAddr": "0x4049de",
            "decompiledFuncCode": "extern unsigned int g_40f70c;\nextern unsigned int g_613240;\nextern char g_6133e8;\nextern unsigned long long g_6133f0;\n\nint sub_404940()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_408b40();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_6133e8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40f70c, 0x5);\n            if (g_6133f0 != 0)\n            {\n                sub_4064c0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_6133e8 != 0)\n    {\n        v3 = sub_408b40();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_6133e8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_613240);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_406010",
            "funcStartAddr": "0x406010",
            "funcEndAddr": "0x40601f",
            "decompiledFuncCode": "extern int512_t g_613500;\n\nint sub_406010()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_613500 : v1)) = v2;\n    return &g_613500;\n}\n"
        },
        {
            "funcName": "sub_406220",
            "funcStartAddr": "0x406220",
            "funcEndAddr": "0x40622a",
            "decompiledFuncCode": "int sub_406220()\n{\n}\n"
        },
        {
            "funcName": "sub_402ab0",
            "funcStartAddr": "0x402ab0",
            "funcEndAddr": "0x402af2",
            "decompiledFuncCode": "extern unsigned int g_40bdc5;\n\nint sub_402ab0()\n{\n    unsigned long long v0;  // [bp-0x28]\n\n    dcgettext(0x0, 0x40bdc5, 0x5);\n    v0 = 0;\n    return sub_406ec0();\n}\n"
        },
        {
            "funcName": "sub_406320",
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x406332",
            "decompiledFuncCode": "int sub_406320()\n{\n}\n"
        },
        {
            "funcName": "sub_408a40",
            "funcStartAddr": "0x408a40",
            "funcEndAddr": "0x408a58",
            "decompiledFuncCode": "int sub_408a40()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408390();\n}\n"
        },
        {
            "funcName": "sub_4064e0",
            "funcStartAddr": "0x4064e0",
            "funcEndAddr": "0x4064ea",
            "decompiledFuncCode": "int sub_4064e0()\n{\n}\n"
        },
        {
            "funcName": "sub_407b50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407c7c",
            "decompiledFuncCode": "extern unsigned int g_613538;\n\nint sub_407b50()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_613538 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_407b50();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_613538 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_613538 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_407b50();\n        }\n        if ((*(v12) == 22 || g_613538 < 0) && (g_613538 < 0 || (unsigned int)v15 < 0) && (g_613538 == -1 || g_613538 >= 0) && (g_613538 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_613538 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_406cd0",
            "funcStartAddr": "0x406cd0",
            "funcEndAddr": "0x406cf1",
            "decompiledFuncCode": "int sub_406cd0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_406e80(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40afd0",
            "funcStartAddr": "0x40afd0",
            "funcEndAddr": "0x40bc86",
            "decompiledFuncCode": "int sub_40afd0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408ae0",
            "funcStartAddr": "0x408ae0",
            "funcEndAddr": "0x408b39",
            "decompiledFuncCode": "int sub_408ae0()\n{\n    unsigned long long v0;  // [bp-0x10]\n    void *v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long *v4;  // rdi\n\n    v2 = sub_409290();\n    if (!(v2 != 0))\n    {\n        v3 = -18446744069414584321;\n    }\n    else if (v0 <= 2147483647)\n    {\n        *(v4) = v2;\n        v3 = v0;\n    }\n    else\n    {\n        free(v2);\n        *(__errno_location()) = 75;\n        v3 = -18446744069414584321;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_402750",
            "funcStartAddr": "0x402750",
            "funcEndAddr": "0x402795",
            "decompiledFuncCode": "int sub_402750()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rsi\n\n    switch ((unsigned int)v1)\n    {\n    case 0:\n        return v4 + 8;\n    case 1:\n        return v3;\n    case 2:\n        return v5 + 4;\n    case 3:\n        return v2 + 12;\n    case 4:\n        return 0;\n    default:\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404930",
            "funcStartAddr": "0x404930",
            "funcEndAddr": "0x404938",
            "decompiledFuncCode": "extern char g_6133e8;\n\nint sub_404930()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_6133e8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40643f",
            "funcStartAddr": "0x40643f",
            "funcEndAddr": "0x4064b0",
            "decompiledFuncCode": "extern uint128_t g_613500;\nextern uint128_t g_613510;\nextern uint128_t g_613520;\nextern unsigned long long g_613530;\n\nint sub_40643f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_613530;\n    *((uint128_t *)&v0) = g_613500;\n    *((uint128_t *)&v1) = g_613510;\n    *((uint128_t *)&v2) = g_613520;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_405e20();\n}\n"
        },
        {
            "funcName": "sub_407c90",
            "funcStartAddr": "0x407c90",
            "funcEndAddr": "0x407d65",
            "decompiledFuncCode": "int sub_407c90()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40614b",
            "funcStartAddr": "0x40614b",
            "funcEndAddr": "0x406211",
            "decompiledFuncCode": "int sub_40614b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_404bf0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_406c30();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_404bf0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4064f0",
            "funcStartAddr": "0x4064f0",
            "funcEndAddr": "0x406563",
            "decompiledFuncCode": "int sub_4064f0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405e20();\n}\n"
        },
        {
            "funcName": "sub_409170",
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091e8",
            "decompiledFuncCode": "int sub_409170()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4091f0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_402621",
            "funcStartAddr": "0x402621",
            "funcEndAddr": "0x402678",
            "decompiledFuncCode": "extern char g_6132e8;\nextern unsigned long long g_6132f0;\n\nint sub_402621()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_6132e8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_6132f0 >= 0)\n            {\n                break;\n            }\n            g_6132f0 = g_6132f0 + 1;\n            *((long long *)(6368832 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_6132e8 = 1;\n        return sub_4025cb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406620",
            "funcStartAddr": "0x406620",
            "funcEndAddr": "0x40662a",
            "decompiledFuncCode": "int sub_406620()\n{\n}\n"
        },
        {
            "funcName": "sub_406af0",
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406ba8",
            "decompiledFuncCode": "int sub_406af0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_406690();\n    }\n}\n"
        },
        {
            "funcName": "sub_406de0",
            "funcStartAddr": "0x406de0",
            "funcEndAddr": "0x406df7",
            "decompiledFuncCode": "int sub_406de0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406c30();\n}\n"
        },
        {
            "funcName": "sub_406c30",
            "funcStartAddr": "0x406c30",
            "funcEndAddr": "0x406c4a",
            "decompiledFuncCode": "int sub_406c30()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_406e80(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4062f0",
            "funcStartAddr": "0x4062f0",
            "funcEndAddr": "0x4062fa",
            "decompiledFuncCode": "int sub_4062f0()\n{\n}\n"
        },
        {
            "funcName": "sub_407710",
            "funcStartAddr": "0x407710",
            "funcEndAddr": "0x407b1d",
            "decompiledFuncCode": "int sub_407710()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4262864)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v34 = v30;\n                v35 = 6;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v36 = v30;\n                v37 = 5;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 18: case 50:\n                v38 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n                break;\n            case 23:\n                v40 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 24:\n                v39 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406230",
            "funcStartAddr": "0x406230",
            "funcEndAddr": "0x4062c5",
            "decompiledFuncCode": "extern unsigned long long *g_613298;\nextern unsigned long long g_6132a0;\nextern unsigned long long g_6132a8;\nextern unsigned int g_6132b0;\nextern unsigned long long g_613400;\n\nint sub_406230()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_6132b0;\n    if (g_6132b0 > 1)\n    {\n        v2 = &g_613298[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_613298[2 * (unsigned long long)(g_6132b0 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_613298[1] != 0x613400)\n    {\n        v1 = free(g_613298[1]);\n        g_6132a0 = 0x100;\n        g_6132a8 = &g_613400;\n    }\n    if (g_613298 != 6369952)\n    {\n        v1 = free(g_613298);\n        g_613298 = &g_6132a0;\n    }\n    g_6132b0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405fc0",
            "funcStartAddr": "0x405fc0",
            "funcEndAddr": "0x405ff4",
            "decompiledFuncCode": "int sub_405fc0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_406e30();\n}\n"
        },
        {
            "funcName": "sub_4060b0",
            "funcStartAddr": "0x4060b0",
            "funcEndAddr": "0x406122",
            "decompiledFuncCode": "extern int512_t g_613500;\n\nint sub_4060b0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_613500 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_404bf0();\n}\n"
        },
        {
            "funcName": "sub_406600",
            "funcStartAddr": "0x406600",
            "funcEndAddr": "0x406613",
            "decompiledFuncCode": "int sub_406600()\n{\n}\n"
        },
        {
            "funcName": "sub_4064b0",
            "funcStartAddr": "0x4064b0",
            "funcEndAddr": "0x4064bd",
            "decompiledFuncCode": "int sub_4064b0()\n{\n}\n"
        },
        {
            "funcName": "sub_406eac",
            "funcStartAddr": "0x406eac",
            "funcEndAddr": "0x406eb1",
            "decompiledFuncCode": "int sub_406eac()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406ec0",
            "funcStartAddr": "0x406ec0",
            "funcEndAddr": "0x406f83",
            "decompiledFuncCode": "int sub_406ec0()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    if (rbp<4> == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            *(v6) = (0 - (unsigned int)(char)(v0 < 0x40000000) & -41) + 75;\n        }\n    }\n    else\n    {\n        rbp<4> = sub_407710();\n        v6 = __errno_location();\n        if (!(v4 != 1))\n        {\n            *(v6) = 75;\n        }\n        else if (v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || v0 > v5 || rbp<4> != 0)\n    {\n        sub_406670();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: \");\n    }\n}\n"
        },
        {
            "funcName": "sub_4025cb",
            "funcStartAddr": "0x4025cb",
            "funcEndAddr": "0x4025ea",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4025cb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406630",
            "funcStartAddr": "0x406630",
            "funcEndAddr": "0x406642",
            "decompiledFuncCode": "int sub_406630()\n{\n}\n"
        },
        {
            "funcName": "sub_406fc0",
            "funcStartAddr": "0x406fc0",
            "funcEndAddr": "0x407684",
            "decompiledFuncCode": "int sub_406fc0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x58]\n    char v2;  // [bp-0x49]\n    char v3;  // [bp-0x40]\n    unsigned long v5;  // rcx\n    unsigned int v6;  // edx\n    char **v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned int *v9;  // r13\n    unsigned int *v10;  // r13\n    char v11[3];  // r15\n    unsigned int v12;  // eax\n    unsigned long long v13;  // r13\n    unsigned long|unsigned long long|unsigned int v14;  // r12\n    unsigned long long v15;  // rbp\n    unsigned long long v16;  // rax\n    char *v17;  // r8\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    char v23;  // sil\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // r13\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // r9\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r9\n    unsigned long long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // r9\n    unsigned long long|unsigned int v41;  // rdi\n    unsigned long|unsigned long long|unsigned int v42;  // r10\n    unsigned long long v43;  // rcx\n    unsigned long long v44;  // r9\n    unsigned long long|unsigned int v45;  // rdi\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // rdi\n    unsigned long long v49;  // rcx\n    unsigned long long v50;  // r9\n    unsigned long long|unsigned int v51;  // edi\n    unsigned long long v52;  // rcx\n    unsigned long long v53;  // r9\n    unsigned long long v54;  // cc_dep1\n    unsigned long long v55;  // cc_dep1\n    unsigned long v56;  // rax\n    unsigned int v57;  // cc_dep1\n    unsigned int v58;  // cc_dep1\n    unsigned int v59;  // cc_dep1\n    unsigned int v60;  // cc_dep1\n    char *v61;  // rsi\n    unsigned long long v62;  // rax\n\n    v1 = v5;\n    if (v6 <= 36)\n    {\n        v8 = (v7 == 0? &v3 : v7);\n        *(v9) = 0;\n        v9 = __errno_location();\n        v11 = *(v8);\n        v15 = strtol(v51, v7, v6);\n        if (*(v8) != v51)\n        {\n            v12 = *(v10);\n            if (*(v10) == 0)\n            {\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 4;\n                if (v12 == 34)\n                {\n                    v14 = 1;\n                }\n            }\n            if ((v12 == 34 || *(v10) == 0) && v17 != 0)\n            {\n                v13 = v11[0];\n                if (v11[0] != 0)\n                {\n                    v18 = strchr(v17, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n        }\n        else\n        {\n            if (v17 != 0)\n            {\n                v13 = v11[0];\n                v14 = 4;\n                if (v11[0] != 0)\n                {\n                    v15 = 1;\n                    v14 = 0;\n                    v16 = strchr(v17, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n            if ((v16 == 0 || v17 == 0) && (v17 == 0 || v11[0] != 0))\n            {\n                v14 = 4;\n            }\n        }\n        if (*(v8) == v51 && v11[0] != 0 && v17 != 0 && v16 != 0 || *(v8) != v51 && v11[0] != 0 && v17 != 0 && (v12 == 34 || *(v10) == 0) && v18 != 0)\n        {\n            v19 = v13 - 69;\n            if ((v13 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v2) = v19;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0)\n                {\n                    v20 = strchr(v17, 0x30);\n                    if (v20 != 0 && v11[1] != 68)\n                    {\n                        if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 105)\n                        {\n                            v24 = v2;\n                            if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 66)\n                            {\n                                /* goto *((long long *)(rdx<8> * 8 + 4262472)); */\n                            }\n                        }\n                        else\n                        {\n                            v22 = 0;\n                            v21 = 0x400;\n                            v23 = v11[2] == 66;\n                            v38 = rsi<8> * 2 + 1;\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v8) == v51 && v11[0] != 0 && v17 != 0 && v16 != 0 || *(v8) != v51 && v11[0] != 0 && v17 != 0 && (v12 == 34 || *(v10) == 0) && v18 != 0) && (v13 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0 && v20 == 0 || (*(v8) == v51 && v11[0] != 0 && v17 != 0 && v16 != 0 || *(v8) != v51 && v11[0] != 0 && v17 != 0 && (v12 == 34 || *(v10) == 0) && v18 != 0) && (v13 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) == 0 || (*(v8) == v51 && v11[0] != 0 && v17 != 0 && v16 != 0 || *(v8) != v51 && v11[0] != 0 && v17 != 0 && (v12 == 34 || *(v10) == 0) && v18 != 0) && (v13 - 69 & 255) > 47)\n        {\n            v38 = 1;\n            v21 = 0x400;\n        }\n        if (...)\n        {\n            v38 = 2;\n            v21 = 1000;\n        }\n        if (...)\n        {\n            v25 = (unsigned int)v13 - 66;\n            switch (v25)\n            {\n            case 0:\n                if (v15 >= -0x20000000000000 && v15 <= 9007199254740991)\n                {\n                    v15 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v21;\n                v27 = (-1 CONCAT 0x8000000000000000) % v21;\n                v40 = v27;\n            case 5: case 37:\n                v43 = v21;\n                v28 = (-1 CONCAT 0x8000000000000000) % v21;\n                v44 = v28;\n                v45 = 3;\n                v42 = 0;\n                do\n                {\n                    if (v15 < v44)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v43 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v55 = v45;\n                    v45 -= 1;\n                }\n                while (v55 != 1);\n            case 9: case 41:\n                v47 = v21;\n                v46 = (-1 CONCAT 0x8000000000000000) % v21;\n            case 11: case 43:\n                v47 = v21;\n                v29 = (-1 CONCAT 0x8000000000000000) % v21;\n                v48 = v29;\n                if (v15 >= v48)\n                {\n                    v56 = (0 CONCAT 9223372036854775807) % v47;\n                    if (v15 <= (0 CONCAT 9223372036854775807) % v47)\n                    {\n                        v15 = v47 * v15;\n                        if (v15 >= v48 && v56 >= v15)\n                        {\n                            v15 = v47 * v15;\n                            break;\n                        }\n                    }\n                }\n            case 14:\n                v49 = v21;\n                v30 = (-1 CONCAT 0x8000000000000000) % v21;\n                v50 = v30;\n                v51 = 5;\n                v42 = 0;\n                do\n                {\n                    if (v50 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v49 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v57 = v51;\n                    v51 = (unsigned long long)v51 - 1;\n                }\n                while (v57 != 1);\n            case 18: case 50:\n                v52 = v21;\n                v31 = (-1 CONCAT 0x8000000000000000) % v21;\n                v53 = v31;\n                v51 = 4;\n                v42 = 0;\n                do\n                {\n                    if (v53 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v52 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v58 = v51;\n                    v51 = (unsigned long long)v51 - 1;\n                }\n                while (v58 != 1);\n                v14 = (unsigned int)v14 | v42;\n                break;\n            case 23:\n                v32 = v21;\n                v33 = (-1 CONCAT 0x8000000000000000) % v21;\n                v34 = v33;\n                v51 = 8;\n                v42 = 0;\n                do\n                {\n                    if (v34 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v32 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v59 = v51;\n                    v51 = (unsigned long long)v51 - 1;\n                }\n                while (v59 != 1);\n            case 24:\n                v35 = v21;\n                v36 = (-1 CONCAT 0x8000000000000000) % v21;\n                v37 = v36;\n                v51 = 7;\n                v42 = 0;\n                do\n                {\n                    if (v37 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v35 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v60 = v51;\n                    v51 = (unsigned long long)v51 - 1;\n                }\n                while (v60 != 1);\n            case 33:\n                break;\n            case 53:\n                if (!(v15 >= 0xc000000000000000))\n                {\n                    v15 = 0x8000000000000000;\n                    v14 = 1;\n                    break;\n                    v61 = &v11[v38];\n                    *(v8) = v61;\n                    v14 = (unsigned int)(*(v61) != 0? v14 | 2 : (unsigned int)r12<8>);\n                }\n                else if (v15 <= 4611686018427387903)\n                {\n                    v15 *= 2;\n                    break;\n                }\n                else\n                {\n                    v15 = 9223372036854775807;\n                    v14 = 1;\n                    break;\n                }\n            default:\n                v14 = (unsigned int)v14 | 2;\n                *(v1) = v15;\n            }\n            if (v25 <= 53)\n            {\n                v26 = v25;\n            }\n        }\n        v38 = 1;\n        if (v15 >= -0x40000000000000 && v15 <= 18014398509481983)\n        {\n            v15 *= 0x200;\n        }\n        v38 = 1;\n        v47 = 0x400;\n        v46 = -0x20000000000000;\n        if (v15 >= v46)\n        {\n            v56 = (0 CONCAT 9223372036854775807) % v47;\n        }\n        v38 = 1;\n        v35 = 0x400;\n        v37 = -0x20000000000000;\n        v38 = 1;\n        v47 = 0x400;\n        v48 = -0x20000000000000;\n        v38 = 1;\n        v38 = 1;\n        v49 = 0x400;\n        v50 = -0x20000000000000;\n        v38 = 1;\n        v39 = 0x400;\n        v40 = -0x20000000000000;\n        v41 = 6;\n        v42 = 0;\n        do\n        {\n            if (v15 < v40)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v39 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v54 = v41;\n            v41 -= 1;\n        }\n        while (v54 != 1);\n        v38 = 1;\n        v52 = 0x400;\n        v53 = -0x20000000000000;\n        v38 = 1;\n        v43 = 0x400;\n        v44 = -0x20000000000000;\n        v38 = 1;\n        v32 = 0x400;\n        v34 = -0x20000000000000;\n        if ((v15 < 0xc000000000000000 || *(v8) != v51) && (v11[0] == 0 || v15 < 0xc000000000000000 || v17 == 0) && (v12 == 34 || v15 < 0xc000000000000000 || *(v10) == 0))\n        {\n            *(v1) = v15;\n        }\n        v62 = v14;\n        return v62;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402d90",
            "funcStartAddr": "0x402d90",
            "funcEndAddr": "0x403bc1",
            "decompiledFuncCode": "extern unsigned int g_40be02;\nextern unsigned int g_40be18;\nextern unsigned int g_40be46;\nextern unsigned int g_40be5e;\nextern unsigned int g_40bf19;\nextern unsigned int g_40c195;\nextern unsigned int g_40c256;\nextern unsigned int g_40d550;\nextern unsigned int g_40d578;\nextern unsigned int g_40d610;\nextern unsigned int g_40d640;\nextern unsigned int g_40d690;\nextern unsigned int g_40d768;\nextern unsigned int g_40d798;\nextern unsigned int g_40d7d0;\nextern unsigned int g_40d860;\nextern unsigned int g_40d898;\nextern unsigned int g_40d908;\nextern unsigned int g_40d940;\nextern unsigned int g_40d9e8;\nextern unsigned int g_40da28;\nextern unsigned int g_40da58;\nextern unsigned int g_40da90;\nextern unsigned int g_40db38;\nextern unsigned int g_40db78;\nextern unsigned int g_40dbb0;\nextern unsigned int g_40dc00;\nextern unsigned int g_40dc68;\nextern unsigned int g_40dcc0;\nextern unsigned int g_40dcf0;\nextern unsigned int g_40dd18;\nextern unsigned int g_40dd98;\nextern unsigned int g_40de28;\nextern unsigned int g_40dea0;\nextern unsigned int g_40df10;\nextern unsigned int g_40df40;\nextern unsigned int g_40df80;\nextern unsigned int g_40e0b8;\nextern unsigned int g_40e0f0;\nextern unsigned int g_40e1f8;\nextern unsigned int g_40e248;\nextern unsigned int g_40e2e8;\nextern unsigned int g_40e328;\nextern unsigned int g_40e368;\nextern unsigned int g_40e3b8;\nextern unsigned int g_40e488;\nextern unsigned int g_40e4c0;\nextern unsigned int g_40e500;\nextern unsigned int g_40e538;\nextern unsigned int g_40e570;\nextern unsigned int g_40e5a8;\nextern unsigned int g_40e5f8;\nextern unsigned int g_40e648;\nextern unsigned int g_40e688;\nextern unsigned int g_40e6c8;\nextern unsigned int g_40e700;\nextern unsigned int g_40e748;\nextern unsigned int g_40e770;\nextern unsigned int g_40e7e8;\nextern unsigned int g_40e820;\nextern unsigned int g_40e878;\nextern unsigned int g_40e910;\nextern unsigned int g_40e958;\nextern unsigned int g_40e980;\nextern unsigned int g_40e9a8;\nextern unsigned int g_40ea08;\nextern unsigned int g_40ea30;\nextern unsigned int g_40ea78;\nextern unsigned int g_40eac0;\nextern unsigned int g_40eb08;\nextern unsigned int g_40eb30;\nextern unsigned int g_40eb98;\nextern unsigned int g_40ec30;\nextern unsigned int g_40ec58;\nextern unsigned int g_40eca8;\nextern unsigned int g_40ecf0;\nextern unsigned int g_40ed18;\nextern unsigned int g_40ed60;\nextern unsigned int g_40ee10;\nextern unsigned int g_40ee60;\nextern unsigned int g_40ee88;\nextern unsigned int g_40ef20;\nextern unsigned int g_40ef50;\nextern unsigned int g_40efb8;\nextern unsigned int g_40f028;\nextern unsigned int g_40f0f8;\nextern unsigned int g_40f1f0;\nextern unsigned int g_40f3b0;\nextern unsigned int g_40f4f0;\nextern unsigned int g_40f538;\nextern unsigned int g_40f558;\nextern unsigned int g_613230;\nextern unsigned long long stdout;\n\nint sub_402d90()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v41;  // rbp\n    unsigned long long v42;  // rbp\n    unsigned long long v107;  // cc_dep1\n    unsigned long long v108;  // cc_dep2\n    unsigned long v109;  // d\n    char *v110;  // rdi\n    char *v111;  // rsi\n    unsigned long long v112;  // rcx\n    unsigned long long *v114;  // rax\n    char *v117;  // rax\n    char *v118;  // rax\n    unsigned long long v119;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x40d550, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d578, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d610, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d640, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d690, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d768, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d798, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d7d0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40be02, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d860, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d898, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d908, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d940, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d9e8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40da28, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40da58, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40da90, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40db38, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40db78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dbb0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dc00, 0x5), stdout);\n        if (g_613230 != 1)\n        {\n            v42 = dcgettext(0x0, 0x40c256, 0x5);\n        }\n        else\n        {\n            v41 = dcgettext(0x0, 0x40c195, 0x5);\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40dc68, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dcc0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dcf0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dd18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dd98, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40de28, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40dea0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40df10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40df40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40df80, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e0b8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e0f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e1f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e248, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e2e8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e328, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e368, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e3b8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40be18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e488, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e4c0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e500, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e538, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e570, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e5a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e5f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e648, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e688, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e6c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e700, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e748, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e770, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e7e8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e820, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e878, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e910, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e958, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e980, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e9a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ea08, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ea30, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ea78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40eac0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40eb08, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40eb30, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40eb98, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ec30, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ec58, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40eca8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40be46, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ecf0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ed18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ed60, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40be5e, 0x5));\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ee10, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ee60, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ee88, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ef20, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ef50, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40efb8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40f028, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f0f8, 0x5));\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f1f0, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40f3b0, 0x5), stdout);\n        v0 = \"[\";\n        v114 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v114 = &v2;\n            v110 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v111 = \"stty\";\n            v112 = 5;\n            if ((v107 > v108) - 0 - (v107 < v108) == 0)\n            {\n                break;\n            }\n            while (v112 != 0)\n            {\n                v112 -= 1;\n                v107 = *(v111);\n                v108 = *(v110);\n                v110 = &v110[v109];\n                v111 = &v111[v109];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bf19, 0x5));\n            v118 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bf19, 0x5));\n            v117 = setlocale(0x5, 0x0);\n            if (v117 != 0)\n            {\n                v119 = strncmp(v117, \"en_\", 0x3);\n            }\n            if (v117 == 0 || v119 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f538, 0x5));\n            }\n        }\n        if ((v3 == 0 || v118 != 0) && (v3 == 0 || strncmp(v118, \"en_\", 0x3) != 0) && (v117 != 0 || v3 != 0) && (v119 != 0 || v3 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f4f0, 0x5));\n        }\n        if (v3 != 0 || v117 != 0 && v119 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f538, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40f558, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402930",
            "funcStartAddr": "0x402930",
            "funcEndAddr": "0x402a81",
            "decompiledFuncCode": "extern unsigned long long g_40c3e0;\nextern unsigned int g_6133dc;\n\nint sub_402930()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // ebp\n    unsigned long long v3;  // rsi\n    unsigned long long v5;  // rax\n    unsigned int v6;  // r12d\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // rsi\n    unsigned long long v12;  // rdx\n    unsigned long long v13;  // rsi\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rcx\n    unsigned long long v17;  // rdi\n\n    v2 = v1;\n    v5 = cfgetispeed();\n    if (v5 != 0)\n    {\n        v6 = cfgetispeed();\n        v7 = cfgetospeed(v2);\n        if (v6 != v7)\n        {\n            v8 = cfgetospeed(v2);\n            if (v8 != 0)\n            {\n                v10 = &g_40c3e0;\n                for (v11 = \"50\"; v11 != 0; v11 = *((long long *)(v10 - 8)))\n                {\n                    v10 += 24;\n                }\n                if (false)\n                {\n                    v14 = cfgetispeed();\n                }\n            }\n            v14 = cfgetispeed();\n            if (v14 != 0)\n            {\n                v16 = &g_40c3e0;\n                for (v17 = \"50\"; v17 != 0; v17 = *((long long *)(v16 - 8)))\n                {\n                    v16 += 24;\n                }\n                if (false)\n                {\n                    v15 = sub_4027c0();\n                }\n            }\n            v15 = sub_4027c0();\n        }\n    }\n    if (v6 == v7 || v5 == 0)\n    {\n        v9 = cfgetospeed(v1);\n        if (v9 != 0)\n        {\n            v12 = &g_40c3e0;\n            for (v13 = \"50\"; v13 != 0; v13 = *((long long *)(v12 - 8)))\n            {\n                v12 += 24;\n            }\n        }\n        v15 = sub_4027c0();\n    }\n    if (v3 == 0)\n    {\n        g_6133dc = 0;\n    }\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_402678",
            "funcStartAddr": "0x402678",
            "funcEndAddr": "0x4026b4",
            "decompiledFuncCode": "int sub_402678() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40adb0",
            "funcStartAddr": "0x40adb0",
            "funcEndAddr": "0x40af6c",
            "decompiledFuncCode": "int sub_40adb0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406060",
            "funcStartAddr": "0x406060",
            "funcEndAddr": "0x406073",
            "decompiledFuncCode": "extern int512_t g_613500;\n\nint sub_406060()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_613500 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_613500 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406f4d",
            "funcStartAddr": "0x406f4d",
            "funcEndAddr": "0x406f52",
            "decompiledFuncCode": "int sub_406f4d()\n{\n}\n"
        },
        {
            "funcName": "sub_4062d0",
            "funcStartAddr": "0x4062d0",
            "funcEndAddr": "0x4062e1",
            "decompiledFuncCode": "int sub_4062d0()\n{\n}\n"
        },
        {
            "funcName": "sub_406c80",
            "funcStartAddr": "0x406c80",
            "funcEndAddr": "0x406c82",
            "decompiledFuncCode": "int sub_406c80()\n{\n}\n"
        },
        {
            "funcName": "sub_406080",
            "funcStartAddr": "0x406080",
            "funcEndAddr": "0x4060ab",
            "decompiledFuncCode": "extern char g_613500;\n\nint sub_406080()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_613500 : v2);\n    *((int *)(tmp_11? &g_613500 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_613500;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_613500;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40bd68",
            "funcStartAddr": "0x40bd68",
            "funcEndAddr": "0x40bd88",
            "decompiledFuncCode": "extern unsigned long long g_612e30;\n\nint sub_40bd68()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_612e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406c90",
            "funcStartAddr": "0x406c90",
            "funcEndAddr": "0x406cc0",
            "decompiledFuncCode": "int sub_406c90()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_406e80(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_406c50",
            "funcStartAddr": "0x406c50",
            "funcEndAddr": "0x406c71",
            "decompiledFuncCode": "int sub_406c50()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_406e80(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408960",
            "funcStartAddr": "0x408960",
            "funcEndAddr": "0x4089b6",
            "decompiledFuncCode": "extern unsigned int g_6132b4;\nextern unsigned int g_6132b8;\nextern unsigned int g_6132bc;\nextern unsigned int g_613540;\nextern unsigned int g_613544;\nextern unsigned int g_613548;\nextern unsigned long long g_613550;\nextern unsigned long long g_613580;\n\nint sub_408960()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_613540 = g_6132bc;\n    g_613544 = g_6132b8;\n    v1 = (unsigned int)v2;\n    v0 = &g_613540;\n    g_6132bc = g_613540;\n    g_613580 = g_613550;\n    g_6132b4 = g_613548;\n    return sub_408390();\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x406316",
            "decompiledFuncCode": "int sub_406300()\n{\n}\n"
        },
        {
            "funcName": "sub_408a20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a36",
            "decompiledFuncCode": "int sub_408a20()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408960();\n}\n"
        },
        {
            "funcName": "sub_406420",
            "funcStartAddr": "0x406420",
            "funcEndAddr": "0x40642c",
            "decompiledFuncCode": "int sub_406420()\n{\n}\n"
        },
        {
            "funcName": "sub_408a60",
            "funcStartAddr": "0x408a60",
            "funcEndAddr": "0x408acf",
            "decompiledFuncCode": "extern unsigned long long g_411037;\n\nint sub_408a60()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_411037;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_408ba0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4091f0",
            "funcStartAddr": "0x4091f0",
            "funcEndAddr": "0x40922b",
            "decompiledFuncCode": "int sub_4091f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_409230();\n    }\n}\n"
        },
        {
            "funcName": "sub_406d90",
            "funcStartAddr": "0x406d90",
            "funcEndAddr": "0x406dda",
            "decompiledFuncCode": "int sub_406d90() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406560",
            "funcStartAddr": "0x406560",
            "funcEndAddr": "0x4065cc",
            "decompiledFuncCode": "extern uint128_t g_613500;\nextern uint128_t g_613510;\nextern uint128_t g_613520;\nextern unsigned long long g_613530;\n\nint sub_406560()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_613500;\n    *((uint128_t *)&v1) = g_613510;\n    *((uint128_t *)&v2) = g_613520;\n    v4 = g_613530;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_405e20();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402b00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402bb3",
            "decompiledFuncCode": "extern unsigned short g_613300;\nextern char g_613301;\nextern unsigned short g_613302;\nextern char g_613303;\nextern unsigned long long g_613304;\n\nint sub_402b00()\n{\n    char v1;  // dil\n    unsigned int v2;  // edi\n    unsigned int v4;  // edi\n    unsigned int v6;  // edi\n    void *v8;  // rax\n\n    if (v1 > 31)\n    {\n        if (v1 <= 126)\n        {\n            *((char *)&g_613300) = v1;\n            v8 = &g_613301;\n        }\n        else if (v1 != 127)\n        {\n            g_613300 = 11597;\n            if (!(v1 > 159))\n            {\n                *((char *)&g_613302) = 94;\n                v8 = &g_613304;\n                *((unsigned long long *)&g_613303) = (unsigned long long)v4 - 64;\n            }\n            else if (v1 != 255)\n            {\n                v8 = &g_613303;\n                *((unsigned long long *)&g_613302) = (unsigned long long)v6 - 128;\n            }\n            else\n            {\n                g_613302 = 16222;\n                v8 = &g_613304;\n            }\n        }\n        else\n        {\n            v8 = &g_613302;\n            g_613300 = 16222;\n        }\n        *((char *)v8) = 0;\n        return &g_613300;\n    }\n    *((char *)&g_613300) = 94;\n    *((unsigned long long *)&g_613301) = (unsigned long long)v2 + 64;\n    *((char *)&g_613302) = 0;\n    return &g_613300;\n}\n"
        },
        {
            "funcName": "sub_402ca0",
            "funcStartAddr": "0x402ca0",
            "funcEndAddr": "0x402d7e",
            "decompiledFuncCode": "extern unsigned int g_40d528;\nextern unsigned int g_6133dc;\n\nint sub_402ca0()\n{\n    char v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v4;  // rdi\n    unsigned int *v5;  // r12\n    unsigned long long v8;  // rbx\n\n    if (ioctl(0x0, 0x5413, (unsigned int)&v0) != 0)\n    {\n        v5 = __errno_location();\n        if (*(v5) == 22)\n        {\n            if ((char)v4 != 0)\n            {\n                return v1;\n            }\n            v8 = (unsigned int)sub_4064f0();\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d528, 0x5));\n        }\n        else\n        {\n            sub_4064f0();\n            error(0x1, *(v5), \"%s\");\n        }\n    }\n    else if ((char)v4 == 0)\n    {\n        g_6133dc = 0;\n        return sub_4027c0();\n    }\n    else\n    {\n        return sub_4027c0();\n    }\n}\n"
        },
        {
            "funcName": "sub_4049e0",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x404a43",
            "decompiledFuncCode": "int sub_4049e0()\n{\n    char *v1;  // rsi\n    unsigned int v2;  // edx\n    unsigned short v3;  // cx\n    unsigned int v5;  // edi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v9;  // rdi\n\n    if (v5 != (unsigned int)v6 && (unsigned int)v6 >= 0)\n    {\n        close(v5);\n        *(v9) = *(v9);\n        return dup2(v6, (unsigned int)__errno_location());\n    }\n    if (v5 == (unsigned int)v6 || (unsigned int)v6 < 0)\n    {\n        v6 = (unsigned int)open(v1, v2, v3);\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_406f90",
            "funcStartAddr": "0x406f90",
            "funcEndAddr": "0x406fb1",
            "decompiledFuncCode": "int sub_406f90()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_406ec0();\n}\n"
        },
        {
            "funcName": "sub_4063b0",
            "funcStartAddr": "0x4063b0",
            "funcEndAddr": "0x406419",
            "decompiledFuncCode": "int sub_4063b0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405e20();\n}\n"
        },
        {
            "funcName": "sub_404af0",
            "funcStartAddr": "0x404af0",
            "funcEndAddr": "0x404bcf",
            "decompiledFuncCode": "extern int512_t g_40f766;\nextern int512_t g_40f76a;\n\nint sub_404af0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_408c00();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40f766 : 4257649);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40f76a : 4257645);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4064c0",
            "funcStartAddr": "0x4064c0",
            "funcEndAddr": "0x4064d1",
            "decompiledFuncCode": "int sub_4064c0()\n{\n}\n"
        },
        {
            "funcName": "sub_405e20",
            "funcStartAddr": "0x405e20",
            "funcEndAddr": "0x405fc0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_613298;\nextern uint128_t g_6132a0;\nextern unsigned int g_6132b0;\nextern int512_t g_613400;\n\nint sub_405e20()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_613298;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_6132b0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_613298 != 6369952)\n            {\n                v16 = sub_406c90();\n                g_613298 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_406c90();\n                v17 = v15;\n                g_613298 = v15;\n                *(v15) = g_6132a0;\n            }\n            memset(&v17[(long long)(int)g_6132b0], 0x0, (int)((unsigned int)v13 + 1 - g_6132b0) * 16);\n            g_6132b0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_406e80(); /* do not return */\n        }\n    }\n    if (g_6132b0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_404bf0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 0x613400)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_406c30();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_404bf0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_406670",
            "funcStartAddr": "0x406670",
            "funcEndAddr": "0x406686",
            "decompiledFuncCode": "int sub_406670()\n{\n}\n"
        },
        {
            "funcName": "sub_408390",
            "funcStartAddr": "0x408390",
            "funcEndAddr": "0x4088f7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_410fd8;\nextern unsigned int g_41101c;\n\nint sub_408390()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    char *[3]|unsigned long long|unsigned long long * v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[2];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!(v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v17 == 0 || v0->field_18 == 0)\n        {\n            v0->field_30 = v17;\n            v0->field_2c = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_407c90();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_407c90();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_407d70();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x410fd8, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x41101c, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x410fd8, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_407d70();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_406a70",
            "funcStartAddr": "0x406a70",
            "funcEndAddr": "0x406a90",
            "decompiledFuncCode": "int sub_406a70()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_402bd0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402c96",
            "decompiledFuncCode": "int sub_402bd0()\n{\n    unsigned long long|unsigned short|char v0;  // [bp-0x30]\n    unsigned short v1;  // [bp-0x2e]\n    unsigned long long v3;  // rax\n    unsigned int *v4;  // r13\n    unsigned long v6;  // rdi\n    unsigned long v7;  // rsi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbx\n\n    v3 = ioctl(0x0, 0x5413, (unsigned int)&v0);\n    if (v3 != 0)\n    {\n        v4 = __errno_location();\n        if (*(v4) == 22)\n        {\n            v0 = 0;\n        }\n        else\n        {\n            sub_4064f0();\n            error(0x1, *(v4), \"%s\");\n        }\n    }\n    if (*(v4) == 22 || v3 == 0)\n    {\n        if ((unsigned int)v6 >= 0)\n        {\n            v0 = v6;\n        }\n        if ((unsigned int)v7 >= 0)\n        {\n            v1 = v7;\n        }\n        v8 = ioctl(0x0, 0x5414, (unsigned int)&v0);\n        if ((unsigned int)v8 == 0)\n        {\n            return v8;\n        }\n        v9 = (unsigned int)sub_4064f0();\n        error(0x1, *(__errno_location()), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_406650",
            "funcStartAddr": "0x406650",
            "funcEndAddr": "0x406661",
            "decompiledFuncCode": "int sub_406650()\n{\n}\n"
        },
        {
            "funcName": "sub_408ba0",
            "funcStartAddr": "0x408ba0",
            "funcEndAddr": "0x408bf6",
            "decompiledFuncCode": "int sub_408ba0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_408c00",
            "funcStartAddr": "0x408c00",
            "funcEndAddr": "0x409154",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_411037;\nextern char g_613578[2];\n\nint sub_408c00()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_613578;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_411037 : (unsigned long long)nl_langinfo(0xe));\n    if (g_613578 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_411037;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                        {\n                            ungetc(v59, v10);\n                            v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v27 > 1)\n                            {\n                                v28 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v28 = &v4;\n                                    v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v31 = &v5;\n                                v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v31 = &v6;\n                                    v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v32;\n                                tmp_56 = (unsigned int)v33 % 0x10000;\n                                v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v35 + 2;\n                                    v36 = malloc(v35 + 3);\n                                    v38 = v1;\n                                    v39 = v2;\n                                }\n                                else\n                                {\n                                    v37 = v35 + v0 + 3;\n                                    v0 = v35 + v0 + 2;\n                                    v36 = realloc(NULL, v37);\n                                    v39 = v2;\n                                    v38 = v1;\n                                }\n                                if (v36 != 0)\n                                {\n                                    tmp_1 = -2 - v38;\n                                    v40 = v38 + 1;\n                                    v41 = v0 - v39;\n                                    v42 = tmp_1 + v0 - v39 + v36;\n                                    if ((unsigned int)v40 >= 8)\n                                    {\n                                        *((long long *)v42) = *((long long *)&v3);\n                                        *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                        v43 = v42 + 8 & -8;\n                                        v42 -= v42 + 8 & -8;\n                                        v44 = &(&v3)[-1 * v42];\n                                        v45 = (unsigned int)(v40 + v42) & -8;\n                                        if (v45 >= 8)\n                                        {\n                                            v42 = 0;\n                                            do\n                                            {\n                                                v47 = v42;\n                                                v42 = (unsigned int)v42 + 8;\n                                                *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                            }\n                                            while ((unsigned int)v42 < (v45 & -8));\n                                        }\n                                    }\n                                    else if ((v40 & 4) != 0)\n                                    {\n                                        *((int *)v42) = *((int *)&v3);\n                                        *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                    }\n                                    else if ((unsigned int)v40 != 0)\n                                    {\n                                        *((char *)v42) = v3;\n                                        if ((v40 & 2) != 0)\n                                        {\n                                            *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                        }\n                                    }\n                                    v62 = v39 + 1;\n                                    v48 = v36 + v41 - 1;\n                                    if ((unsigned int)v42 >= 8)\n                                    {\n                                        *((long long *)v48) = *((long long *)&v5);\n                                        v42 = v62;\n                                        *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                        v51 = v48 - (v48 + 8 & -8);\n                                        v53 = (unsigned int)(v42 + v51) & -8;\n                                        if (v53 >= 8)\n                                        {\n                                            v56 = 0;\n                                            do\n                                            {\n                                                v57 = v56;\n                                                v56 = (unsigned int)v56 + 8;\n                                                *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                            }\n                                            while ((unsigned int)v56 < (v53 & -8));\n                                        }\n                                    }\n                                    else if (((char)v42 & 4) != 0)\n                                    {\n                                        *((int *)v48) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v42 != 0)\n                                    {\n                                        *((char *)v48) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v36;\n                                    v58 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_411037;\n                                    v10 = (tmp_10 == 0? &g_411037 : tmp_10);\n                                    free(NULL);\n                                    sub_409170();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v36 != 0 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v27 > 1)\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if ((unsigned int)v59 == 35)\n                        {\n                            do\n                            {\n                                v60 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v60[1];\n                                    v61 = *(v60);\n                                    v62 = 1;\n                                }\n                                else\n                                {\n                                    v61 = __uflow(v10);\n                                    v62 = (char)(v61 != -1);\n                                }\n                            }\n                            while (v61 != 10 && v62 != 0);\n                        }\n                        if (v61 == -1 && (unsigned int)v59 == 35 || (unsigned int)v59 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v59 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v27 <= 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                        {\n                            v10 = (tmp_10 == 0? &g_411037 : tmp_10);\n                            sub_409170();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v27 <= 1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && v61 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1)\n                    {\n                        v9 = &g_411037;\n                    }\n                    else if (((unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v27 <= 1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && v61 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1) && v0 != 0 || v36 == 0 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v27 > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_411037;\n            free(v17);\n        }\n        *((char *[2])&g_613578[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_411037 : tmp_10), v9);\n            if (v67 != 0 && (v9[1] != 0 || v66 != 42))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v9[1] == 0 && v66 == 42)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stty.elf"
}