{
    "funcInfo": [
        {
            "funcName": "sub_406170",
            "funcStartAddr": "0x406170",
            "funcEndAddr": "0x4061c6",
            "decompiledFuncCode": "int sub_406170()\n{\n    unsigned int v1;  // edi\n    unsigned long long v2;  // rax\n    unsigned long long v4;  // rdi\n    unsigned long long *v5;  // rsi\n\n    if (((unsigned short)v1 & 258) != 0)\n    {\n        v2 = sub_4095a0();\n        *(v5) = v2;\n        v2 = (char)(v2 != 0);\n    }\n    else\n    {\n        v4 = malloc(0x20);\n        *(v5) = v4;\n        v2 = 0;\n        if (v4 != 0)\n        {\n            sub_408bd0();\n            return 1;\n        }\n    }\n    if (v4 == 0 || ((unsigned short)v1 & 258) != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405a20",
            "funcStartAddr": "0x405a20",
            "funcEndAddr": "0x405a41",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned int field_48;\n} struct_0;\n\nint sub_405a20()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 1;\n    if (((char)v2->field_48 & 17) != 16)\n    {\n        v1 = 0;\n    }\n    if (((char)v2->field_48 & 17) == 16 || ((char)v2->field_48 & 17) != 17)\n    {\n        return v1;\n    }\n    if (((char)v2->field_48 & 17) == 17)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405110",
            "funcStartAddr": "0x405110",
            "funcEndAddr": "0x405121",
            "decompiledFuncCode": "int sub_405110()\n{\n}\n"
        },
        {
            "funcName": "sub_4095a0",
            "funcStartAddr": "0x4095a0",
            "funcEndAddr": "0x409720",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_408db0;\nextern int512_t g_408dc0;\nextern int512_t g_40c9d0;\n\nint sub_4095a0()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_408f20();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_40c9d0;\n            v3 = sub_408f20();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v8;\n        }\n        if ((((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_408d10();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_408db0 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_408dc0 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x405968",
            "decompiledFuncCode": "int sub_405940()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_405740();\n}\n"
        },
        {
            "funcName": "sub_405e10",
            "funcStartAddr": "0x405e10",
            "funcEndAddr": "0x405e4a",
            "decompiledFuncCode": "int sub_405e10()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    void *v3;  // rdi\n    unsigned long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6[4];  // rbp\n    unsigned long long v8[4];  // rdi\n    unsigned long long v10[4];  // rbx\n    unsigned long long v11;  // rbx\n\n    if (v3 != 0)\n    {\n        v1 = stack_base + 0;\n        v0 = v5;\n        v10 = v3;\n        while (true)\n        {\n            v6 = v10[2];\n            if (v10[3] != 0)\n            {\n                closedir();\n            }\n            v8 = v10;\n            v10 = v6;\n            if (v10 == 0)\n            {\n                break;\n            }\n        }\n        v11 = v0;\n        return (unsigned long long)free(v8);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409390",
            "funcStartAddr": "0x409390",
            "funcEndAddr": "0x4093cf",
            "decompiledFuncCode": "int sub_409390()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408a50",
            "funcStartAddr": "0x408a50",
            "funcEndAddr": "0x408a68",
            "decompiledFuncCode": "int sub_408a50()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_4089f0();\n}\n"
        },
        {
            "funcName": "sub_406030",
            "funcStartAddr": "0x406030",
            "funcEndAddr": "0x406093",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[44];\n    unsigned int field_2c;\n    char padding_30[24];\n    char field_48;\n} struct_0;\n\nint sub_406030()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v3;  // esi\n    char v4;  // dl\n    unsigned long long v5;  // rax\n    unsigned long v6;  // rdi\n\n    if (v1->field_2c == v3 && v1->field_2c != -100)\n    {\n        abort(); /* do not return */\n    }\n    if (v1->field_2c == -100 || v1->field_2c != v3)\n    {\n        if (!(v4 == 0))\n        {\n            v5 = sub_409f90();\n            if ((unsigned int)v5 >= 0)\n            {\n                v1->field_2c = v3;\n                return close(v5);\n            }\n        }\n        else if ((v1->field_48 & 4) == 0)\n        {\n            if (v1->field_2c >= 0)\n            {\n                v6 = v1->field_2c;\n                v1->field_2c = v3;\n                return close(v6);\n            }\n        }\n        if (v1->field_2c < 0 && v4 == 0 || v4 == 0 && (v1->field_48 & 4) != 0 || (unsigned int)v5 < 0 && v4 != 0)\n        {\n            v1->field_2c = v3;\n            return v5;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x4097d5",
            "decompiledFuncCode": "int sub_409730()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4064a0",
            "funcStartAddr": "0x4064a0",
            "funcEndAddr": "0x406536",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    char padding_10[104];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_0;\n\nint sub_4064a0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned int v3;  // edi\n    struct_0 *v4;  // rdx\n    unsigned long long v5[17];  // rdx\n    void *v6;  // rax\n    unsigned long long *v7[3];  // rsi\n    unsigned long long v8[3];  // rcx\n    unsigned long long v10[17];  // rax\n\n    if (((unsigned short)v3 & 258) == 0)\n    {\n        v10 = v4->field_8;\n        if (v4->field_8 != 0 && !((char)(v4->field_8->field_58 - 0 >> 63)))\n        {\n            v8 = *(v7);\n            if ((*(v7))[2] != 0 && *(*(v7)) == v4->field_80 && (*(v7))[1] == v4->field_78)\n            {\n                v10 = v10[16];\n                (*(v7))[1] = v4->field_8->field_78;\n                v8[0] = v10;\n            }\n        }\n        if ((char)(v4->field_8->field_58 - 0 >> 63) || v4->field_8 == 0 || (*(v7))[2] != 0)\n        {\n            return v10;\n        }\n    }\n    else\n    {\n        *((unsigned long long [17])&v0) = v5[15];\n        *((unsigned long long [17])&v1) = v5[16];\n        v6 = sub_409d80();\n        if (v6 != 0)\n        {\n            return (unsigned long long)free(v6);\n        }\n    }\n    if ((((unsigned short)v3 & 258) == 0 || v6 == 0) && ((*(v7))[2] == 0 || ((unsigned short)v3 & 258) != 0) && (!((char)(v4->field_8->field_58 - 0 >> 63)) || ((unsigned short)v3 & 258) != 0) && (v4->field_8 != 0 || ((unsigned short)v3 & 258) != 0))\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4029c0",
            "funcStartAddr": "0x4029c0",
            "funcEndAddr": "0x402d65",
            "decompiledFuncCode": "extern unsigned int g_40a9c9;\nextern unsigned int g_40ab20;\nextern unsigned int g_40ab48;\nextern unsigned int g_40abd0;\nextern unsigned int g_40ac40;\nextern unsigned int g_40ad10;\nextern unsigned int g_40ad90;\nextern unsigned int g_40add8;\nextern unsigned int g_40ae20;\nextern unsigned int g_40ae50;\nextern unsigned int g_40ae88;\nextern unsigned int g_40af00;\nextern unsigned int g_40af48;\nextern unsigned int g_40af68;\nextern unsigned long long stdout;\n\nint sub_4029c0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v30;  // rax\n    char *v31;  // rdi\n    char *v32;  // rsi\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // cc_dep1\n    unsigned long long v35;  // cc_dep2\n    unsigned long v36;  // d\n    char *v40;  // rax\n    char *v41;  // rax\n    unsigned long long v42;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x40ab20, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ab48, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40abd0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ac40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ad10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ad90, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40add8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae20, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae88, 0x5), stdout);\n        v0 = \"[\";\n        v30 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v30 = &v2;\n            v31 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v32 = \"chmod\";\n            v33 = 6;\n            if ((v34 > v35) - 0 - (v34 < v35) == 0)\n            {\n                break;\n            }\n            while (v33 != 0)\n            {\n                v33 -= 1;\n                v34 = *(v32);\n                v35 = *(v31);\n                v31 = &v31[v36];\n                v32 = &v32[v36];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a9c9, 0x5));\n            v41 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a9c9, 0x5));\n            v40 = setlocale(0x5, 0x0);\n            if (v40 != 0)\n            {\n                v42 = strncmp(v40, \"en_\", 0x3);\n            }\n            if (v42 == 0 || v40 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40af48, 0x5));\n            }\n        }\n        if ((v3 == 0 || v41 != 0) && (v3 == 0 || strncmp(v41, \"en_\", 0x3) != 0) && (v3 != 0 || v42 != 0) && (v3 != 0 || v40 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40af00, 0x5));\n        }\n        if (v3 != 0 || v42 != 0 && v40 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40af48, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40af68, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4036b0",
            "funcStartAddr": "0x4036b0",
            "funcEndAddr": "0x4047e8",
            "decompiledFuncCode": "int sub_4036b0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char|unsigned long long v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    char|unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rbp\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r8\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // r11\n    unsigned long|unsigned long long v41;  // rbp\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    char v44;  // al\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rcx\n    unsigned short|unsigned long|unsigned long long v47;  // rax\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rdx\n    unsigned long long v50;  // rbx\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbp\n    unsigned long long v53;  // r14\n    char *v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // r13\n    unsigned long long v58;  // rcx\n    char v59;  // al\n    char v60;  // al\n    unsigned int v61;  // eax\n    char v62;  // al\n    unsigned int v64;  // eax\n    char v65;  // al\n    unsigned long v66;  // rdx\n    unsigned long long v67;  // rax\n    char v68;  // al\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rbx\n    unsigned int|char|unsigned long long v71;  // rsi\n    char|unsigned long long v72;  // r13\n    unsigned long long v73;  // r14\n    unsigned long long v74;  // r12\n    unsigned int v75;  // r13d\n    unsigned long long v76;  // r11\n    char v77;  // dl\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // dl\n    unsigned long long v81;  // rax\n    unsigned long long v82;  // rax\n    unsigned long long v83;  // rdx\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // rax\n\n    v29 = v28;\n    v73 = v71;\n    v72 = v30;\n    v7 = v71;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v71 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v70 = 1;\n                v72 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v78 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v71 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v70 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4035b0();\n            v27 = (unsigned long long)(unsigned int)sub_4035b0();\n        }\n        v70 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v34 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v71 > v70)\n                    {\n                        *((unsigned long long *)(v28 + v70)) = v34;\n                    }\n                    v70 += 1;\n                    v34 = (char)*((char *)(v26 + v70));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        v5 = v76;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v76 = v4;\n    while (true)\n    {\n        v39 = v76;\n        v74 = 0;\n        v40 = v72;\n        while (true)\n        {\n            v72 = (char)(v39 != v74);\n            if (v39 == -1)\n            {\n                v72 = (char)(*((char *)(v7 + v74)) != 0);\n            }\n            if (v72 != 0)\n            {\n                v38 = v7 + v74;\n                v5 = (unsigned int)v40 != 2 & v4;\n                if (((unsigned int)v40 != 2 & v4) != 0)\n                {\n                    v35 = v8;\n                    if (v8 != 0)\n                    {\n                        v36 = v74 + v35;\n                        if (v39 == -1 && v35 > 1)\n                        {\n                            v11 = v40;\n                            v10 = v33;\n                            v9 = v38;\n                            v39 = strlen(v7);\n                        }\n                        if (v36 <= v39)\n                        {\n                            v12 = v40;\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v38;\n                            v37 = memcmp(v38, v13, v8);\n                            v38 = v9;\n                            v33 = (char)v10;\n                            v39 = v11;\n                            v40 = v12;\n                            if (v17 == 0 && v37 == 0)\n                            {\n                                v41 = (char)*((char *)v38);\n                                switch (*((char *)v38))\n                                {\n                                case 0:\n                                    v71 = (char)((unsigned int)v40 == 2);\n                                    v72 = (unsigned int)(0 ^ 1);\n                                    v72 = (char)(0 ^ 1) & (unsigned int)v40 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0)\n                                    {\n                                        if (v71 > v70)\n                                        {\n                                            *((char *)(v28 + v70)) = 39;\n                                        }\n                                        if (v71 > v70 + 1)\n                                        {\n                                            *((char *)(v28 + v70 + 1)) = 36;\n                                        }\n                                        if (v71 > v70 + 2)\n                                        {\n                                            *((char *)(v28 + v70 + 2)) = 39;\n                                        }\n                                        v48 = v70 + 3;\n                                        v70 += 4;\n                                        v33 = rax<8>;\n                                        v72 = 0;\n                                        v41 = 48;\n                                    }\n                                    else\n                                    {\n                                        v48 = v70;\n                                        v72 = 0;\n                                        v70 = v48 + 1;\n                                        v72 = (unsigned int)v72;\n                                        v41 = 48;\n                                        v72 = 0;\n                                        v41 = 48;\n                                        if (1 < v39)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v71 > v70)\n                                                {\n                                                    *((char *)(v28 + v70)) = 48;\n                                                }\n                                                if (v71 > v48 + 2)\n                                                {\n                                                    *((char *)(v28 + v48 + 2)) = 48;\n                                                }\n                                                v70 = v48 + 3;\n                                                v41 = 48;\n                                            }\n                                        }\n                                        v72 = v72;\n                                        v72 = 0;\n                                    }\n                                    if ((v71 > v70 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) == 0 || v71 > v70 + 3))\n                                    {\n                                        *((char *)(v28 + v48)) = 92;\n                                        v33 = v72;\n                                    }\n                                case 7:\n                                    v41 = 97;\n                                case 8:\n                                    v71 = 0;\n                                    v72 = 0;\n                                    v41 = 98;\n                                case 13:\n                                    v41 = 13;\n                                    v46 = 114;\n                                    v71 = (unsigned int)v40 == 2;\n                                case 32:\n                                    v42 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v71 = 0;\n                                case 35: case 126:\n                                    v43 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v42 = v5;\n                                case 92:\n                                    v45 = v4;\n                                    v41 = 92;\n                                    v46 = 92;\n                                    v71 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v74 = 1;\n                                        v47 = 0;\n                                        v72 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v36 > v39 || v37 != 0)\n                    {\n                        v41 = (char)*((char *)v38);\n                        switch (*((char *)v38))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v40 == 2;\n                            }\n                        case 7:\n                            v41 = 97;\n                            break;\n                        case 8:\n                            v41 = 98;\n                        case 9:\n                            v41 = 116;\n                        case 10:\n                            v41 = 110;\n                            v71 = 0;\n                            v72 = 0;\n                            if (v17 == 0)\n                            {\n                                v67 = (unsigned int)v33 ^ 1;\n                                v68 = (char)((unsigned int)v33 ^ 1) & v71;\n                                if (((char)((unsigned int)v33 ^ 1) & v71) != 0)\n                                {\n                                    if (v73 > v70)\n                                    {\n                                        *((char *)(v29 + v70)) = 39;\n                                    }\n                                    if (v70 + 1 < v73)\n                                    {\n                                        *((char *)(v29 + v70 + 1)) = 36;\n                                    }\n                                    v69 = v70 + 2;\n                                    if (v70 + 2 < v73)\n                                    {\n                                        *((char *)(v29 + v70 + 2)) = 39;\n                                    }\n                                    v70 += 3;\n                                    v33 = rax<8>;\n                                }\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 92;\n                                }\n                                v70 += 1;\n                                v74 += 1;\n                            }\n                            else\n                            {\n                                v81 = v71;\n                                *((unsigned long long *)&v4) = v4 & v81;\n                            }\n                        case 11:\n                            v41 = 118;\n                            break;\n                        case 12:\n                            v41 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v72 = 0;\n                            }\n                            else\n                            {\n                                v81 = 0;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v42 = 0;\n                            v41 = 32;\n                            v72 = v5;\n                            v5 = v42;\n                            v72 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v43 = 0;\n                            v72 = v5;\n                            v71 = 0;\n                            v5 = v43;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v42 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v41 = (char)*((char *)v38);\n                    switch (*((char *)v38))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v74 += 1;\n                            v5 = 0;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            v41 = 0;\n                            break;\n                        }\n                    case 7:\n                        v41 = 7;\n                        v46 = 97;\n                        v71 = (unsigned int)v40 == 2;\n                        if (v4 == 0)\n                        {\n                            v72 = 0;\n                            break;\n                            v72 = ((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1;\n                            v72 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) | v17;\n                            v72 = 0;\n                            v66 = (unsigned int)((unsigned long long)v25[v41 % 32] >> ((char)v41 & 31)) & 1;\n                            v71 = (unsigned int)v40 == 2;\n                            v71 = (unsigned int)v40 == 2;\n                            v74 += 1;\n                            v47 = (v72 ^ 1) & (unsigned int)v33;\n                            if (v47 != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 39;\n                                }\n                                v70 += 2;\n                                v33 = 0;\n                            }\n                        }\n                        else\n                        {\n                            v41 = v46;\n                            v72 = 0;\n                        }\n                    case 8:\n                        v41 = 8;\n                        v46 = 98;\n                        v71 = (unsigned int)v40 == 2;\n                    case 9:\n                        v41 = 9;\n                        v46 = 116;\n                    case 10:\n                        v41 = 10;\n                        v46 = 110;\n                        v71 = (unsigned int)v40 == 2;\n                        v5 = v17 & (unsigned int)v40 == 2;\n                    case 11:\n                        v41 = 11;\n                        v46 = 118;\n                        v71 = (unsigned int)v40 == 2;\n                    case 12:\n                        v41 = 12;\n                        v46 = 102;\n                        v71 = (unsigned int)v40 == 2;\n                    case 13:\n                        v41 = 13;\n                        v46 = 114;\n                    case 32:\n                        v41 = 32;\n                        v71 = (char)((unsigned int)v40 == 2);\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        v72 = 0;\n                    case 35: case 126:\n                        v71 = (unsigned int)v40 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            if (v71 != 0)\n                            {\n                                v49 = 0;\n                            }\n                            if (v71 == 0 || v14 != 0)\n                            {\n                                if (v71 > v70)\n                                {\n                                    *((char *)(v28 + v70)) = 39;\n                                }\n                                if (v71 > v70 + 1)\n                                {\n                                    *((char *)(v28 + v70 + 1)) = 92;\n                                }\n                                if (v71 > v70 + 2)\n                                {\n                                    v49 = v71;\n                                    *((char *)(v28 + v70 + 2)) = 39;\n                                    v73 = v14;\n                                }\n                                else\n                                {\n                                    v49 = v71;\n                                    v73 = v14;\n                                }\n                            }\n                            v18 = v72;\n                            v70 += 3;\n                            v72 = 0;\n                            v33 = 0;\n                            v14 = v73;\n                            v41 = 39;\n                            v73 = v49;\n                        }\n                        else\n                        {\n                            v18 = v72;\n                            v71 = 0;\n                            v41 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v40 != 2)\n                        {\n                            v41 = 63;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            break;\n                            v71 = v7;\n                            v41 = (char)*((char *)(v71 + 2));\n                            v71 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v71 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                            break;\n                            if (v73 > v70)\n                            {\n                                *((char *)(v28 + v70)) = 63;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v28 + v70 + 1)) = 34;\n                            }\n                            if (v73 > v70 + 2)\n                            {\n                                *((char *)(v28 + v70 + 2)) = 34;\n                            }\n                            if (v73 > v70 + 3)\n                            {\n                                *((char *)(v28 + v70 + 3)) = 63;\n                            }\n                            v70 += 4;\n                            v71 = 0;\n                            v72 = 0;\n                            v74 = 2;\n                        }\n                        else\n                        {\n                            v72 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            v74 += 1;\n                            v47 = v33;\n                            v72 = 0;\n                            v41 = 92;\n                        }\n                    case 123: case 125:\n                        v44 = v39 != 1;\n                        if (v39 == -1)\n                        {\n                            v44 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v71 = (unsigned int)v40 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v75 = v40;\n                v76 = v39;\n                v77 = v75 == 2;\n                if ((v75 == 2 & v17) == 0 || v70 != 0)\n                {\n                    v78 = (unsigned int)v17 ^ 1;\n                    v79 = v77 & (char)((unsigned int)v17 ^ 1);\n                    v80 = v77 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v79 == 0)\n                    {\n                        v80 = v78;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v78 = v73 == 0 & v14 != 0;\n                            if ((v73 == 0 & v14 != 0) == 0)\n                            {\n                                v80 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v70 = (unsigned int)sub_4036b0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v72 == 0 && (char)v79 != 0 && v18 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0 || (char)v79 == 0 && v72 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0))\n            {\n                v82 = v13;\n                if (v13 != 0 && v80 != 0)\n                {\n                    v83 = (char)*((char *)v82);\n                    if (*((char *)v82) != 0)\n                    {\n                        v84 = v82 - v70;\n                        do\n                        {\n                            if (v73 > v70)\n                            {\n                                *((unsigned long long *)(v29 + v70)) = v83;\n                            }\n                            v70 += 1;\n                            v83 = (char)*((char *)(v84 + v70));\n                        }\n                        while ((char)v83 != 0);\n                    }\n                }\n                if (v73 > v70)\n                {\n                    *((char *)(v29 + v70)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v40;\n                v10 = v39;\n                v9 = v33;\n                v47 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v41 * 2));\n                tmp_38 = v47 & 0x4000;\n                v47 &= 0x4000;\n                v72 = (tmp_38 & 65535) != 0;\n                v71 = (tmp_38 & 65535) == 0 & v4;\n                if (v71 != 0)\n                {\n                    v71 = v4;\n                    v72 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v39 == -1)\n                {\n                    v11 = v40;\n                    v10 = v33;\n                    v9 = v38;\n                    v39 = strlen(v7);\n                }\n                v21 = v70;\n                v22 = v38;\n                v50 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v41;\n                v11 = v29;\n                v12 = v73;\n                v9 = v39;\n                v10 = v40;\n                do\n                {\n                    v51 = v74 + v50;\n                    v52 = v7 + v74 + v50;\n                    v47 = sub_408af0();\n                    v53 = v47;\n                    if (v47 != -1 && v47 != -2 && v47 != 0)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v47 != 1)\n                        {\n                            v54 = v7 + v71 + 1;\n                            v71 = v7 + v53 + v71;\n                            while (true)\n                            {\n                                v55 = (unsigned int)*(v54) - 91;\n                                if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                                {\n                                    v54 = &v54[1];\n                                    if (v71 == v54)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                            {\n                                v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v50 += v53;\n                                v47 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v50 += v53;\n                        v47 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v47 == -1)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v72 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = v4;\n                    }\n                    if (v47 == -2)\n                    {\n                        v39 = v9;\n                        v71 = v51;\n                        v47 = v50;\n                        v28 = v50;\n                        v33 = (char)v19;\n                        v41 = v20;\n                        v70 = v21;\n                        v29 = v11;\n                        v73 = v12;\n                        v40 = (unsigned int)v10;\n                        if (v71 < v9 && *((char *)v52) != 0)\n                        {\n                            do\n                            {\n                                v47 += 1;\n                            }\n                            while (v47 < v9 && *((char *)(v22 + v47)) != 0);\n                            v28 = v47;\n                        }\n                        v71 = v4;\n                        v72 = 0;\n                    }\n                    if (v47 == 0 || (unsigned int)v47 != 0 && v47 != -1 && v47 != -2)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v71 = (unsigned int)v72 ^ 1;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = (char)((unsigned int)v72 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v47 == -1 || v47 == -2 || v47 == 0 || (unsigned int)v47 != 0)\n                {\n                    v9 = v72;\n                    v71 = 0;\n                    v57 = v17;\n                    v58 = v28 + v74;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v43;\n                v72 = 0;\n            }\n            if (v71 != 0)\n            {\n                v9 = v72;\n                v71 = 0;\n                v57 = v17;\n                v58 = v28 + v74;\n                v28 = v5;\n                while (true)\n                {\n                    if (v71 != 0)\n                    {\n                        v59 = (unsigned int)v40 == 2;\n                        if (v57 == 0)\n                        {\n                            v71 = (unsigned int)v33 ^ 1;\n                            v60 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v71 = v70 + 2;\n                                if (v73 > v70 + 2)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = v47;\n                            }\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                v61 = v41;\n                                v62 = (char)v41 % 64;\n                                *((unsigned long long *)(v29 + v70 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v47 = v70 + 2;\n                            if (v73 > v70 + 2)\n                            {\n                                v64 = v41;\n                                v65 = (char)v41 % 8;\n                                v47 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v70 + 2)) = v47;\n                            }\n                            v74 += 1;\n                            v70 += 3;\n                            v41 = ((unsigned int)v41 & 7) + 48;\n                            if (v74 < v58)\n                            {\n                                v71 = v71;\n                            }\n                            else\n                            {\n                                v72 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v59;\n                        }\n                    }\n                    else\n                    {\n                        v47 = (v71 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                        }\n                        v74 += 1;\n                        if (v74 >= v58)\n                        {\n                            v72 = (char)v9;\n                        }\n                        else if (v47 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 39;\n                            }\n                            v47 = v70 + 1;\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v29 + v70 + 1)) = 39;\n                            }\n                            v70 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v71 == 0 || v57 == 0) && (v71 == 0 || v74 < v58) && (v74 < v58 || v71 != 0))\n                    {\n                        if (v73 > v70)\n                        {\n                            *((unsigned long long *)(v29 + v70)) = v41;\n                        }\n                        v41 = (char)*((char *)(v7 + v74));\n                        v70 += 1;\n                    }\n                }\n            }\n            if ((v70 == 0 || v17 != 0) && (v72 == 0 || v17 != 0) && (v17 != 0 || (v75 == 2 & v17) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v70 = (unsigned int)sub_4036b0();\n            }\n            if (v17 == 0 || v17 == 0 && v5 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) == 0 && v4 == 0 || v71 != 0 && v70 >= v73)\n            {\n                if (v70 < v73)\n                {\n                    *((unsigned long long *)(v29 + v70)) = v41;\n                }\n                v70 += 1;\n                v6 = (v72 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v72 == 0 && (char)v79 != 0 && v18 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0 || (char)v79 == 0 && v72 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && v6 != 0 && (char)v79 != 0 && v18 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || (v70 == 0 || v17 != 0) && (v72 == 0 || v17 != 0) && (v17 != 0 || (v75 == 2 & v17) != 0))\n            {\n                v85 = v70;\n                return v85;\n            }\n        }\n        *((char *)v29) = 39;\n        v72 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v78;\n    }\n}\n"
        },
        {
            "funcName": "sub_4094c0",
            "funcStartAddr": "0x4094c0",
            "funcEndAddr": "0x40952b",
            "decompiledFuncCode": "int sub_4094c0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40a590",
            "funcStartAddr": "0x40a590",
            "funcEndAddr": "0x40a5d5",
            "decompiledFuncCode": "int sub_40a590()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v5;  // rcx\n    char v6;  // dl\n\n    v3 = v5;\n    if ((v6 & 64) != 0)\n    {\n        v0 = 24;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    openat();\n    return sub_40a5e0();\n}\n"
        },
        {
            "funcName": "sub_405a50",
            "funcStartAddr": "0x405a50",
            "funcEndAddr": "0x405a67",
            "decompiledFuncCode": "int sub_405a50()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (v1[1] != v2[1])\n    {\n        return 0;\n    }\n    v3 = *(v2);\n    v4 = *(v1) == *(v2);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x4055a0",
            "decompiledFuncCode": "int sub_405580()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_40a830",
            "funcStartAddr": "0x40a830",
            "funcEndAddr": "0x40a886",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40a830()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404cf0",
            "funcStartAddr": "0x404cf0",
            "funcEndAddr": "0x404d85",
            "decompiledFuncCode": "extern unsigned long long *g_60f2b8;\nextern unsigned long long g_60f2c0;\nextern unsigned long long g_60f2c8;\nextern unsigned int g_60f2d0;\nextern unsigned long long g_60f360;\n\nint sub_404cf0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60f2d0;\n    if (g_60f2d0 > 1)\n    {\n        v2 = &g_60f2b8[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60f2b8[2 * (unsigned long long)(g_60f2d0 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_60f2b8[1] != 6353760)\n    {\n        v1 = free(g_60f2b8[1]);\n        g_60f2c0 = 0x100;\n        g_60f2c8 = &g_60f360;\n    }\n    if (g_60f2b8 != 6353600)\n    {\n        v1 = free(g_60f2b8);\n        g_60f2b8 = &g_60f2c0;\n    }\n    g_60f2d0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404ad0",
            "funcStartAddr": "0x404ad0",
            "funcEndAddr": "0x404adf",
            "decompiledFuncCode": "extern int512_t g_60f460;\n\nint sub_404ad0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60f460 : v1)) = v2;\n    return &g_60f460;\n}\n"
        },
        {
            "funcName": "sub_405aa0",
            "funcStartAddr": "0x405aa0",
            "funcEndAddr": "0x405ac2",
            "decompiledFuncCode": "int sub_405aa0()\n{\n    unsigned long long v1;  // rax\n    struct struct_0 **v2;  // rdi\n    struct struct_0 **v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (*(v2)->field_80 >= *(v3)->field_80)\n    {\n        v1 = (char)(*(v2)->field_80 > *(v3)->field_80);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x406254",
            "decompiledFuncCode": "int sub_4061d0()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    char *v5;  // rdx\n    unsigned long v7;  // rsi\n    unsigned long v9;  // rsi\n    char *v10;  // rdi\n    unsigned long long v11;  // rdx\n\n    if (((unsigned short)v7 & 0x200) == 0)\n    {\n        v9 = (unsigned int)v7 * 0x2000 & 0x20000 | (unsigned int)v7 * 128 & 0x40000 | 0x90900;\n        v10 = v5;\n        v3 = (unsigned int)v7 * 0x2000 & 0x20000 | (unsigned int)v7 * 128 & 0x40000 | 0x90900;\n        v11 = 0;\n        if ((v9 & 64) != 0)\n        {\n            v0 = 16;\n            v11 = (unsigned int)v3;\n            v1 = stack_base + 8;\n            v2 = stack_base + -56;\n        }\n        open(v10, v9, v11);\n        return sub_40a5e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_409450",
            "funcStartAddr": "0x409450",
            "funcEndAddr": "0x4094b0",
            "decompiledFuncCode": "int sub_409450()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_402e30",
            "funcStartAddr": "0x402e30",
            "funcEndAddr": "0x402f96",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n    char field_6;\n    char field_7;\n    char field_8;\n    char field_9;\n    unsigned short field_a;\n} struct_0;\n\nint sub_402e30()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n    struct_0 *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v1 = 45;\n    if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v1 = 100;\n        if (((unsigned short)v2 & 0xf000) != 0x4000)\n        {\n            v1 = 98;\n            if (((unsigned short)v2 & 0xf000) != 0x6000)\n            {\n                v1 = 99;\n                if (((unsigned short)v2 & 0xf000) != 0x2000)\n                {\n                    v1 = 108;\n                    if (((unsigned short)v2 & 0xf000) != 0xa000)\n                    {\n                        v1 = 112;\n                        if (((unsigned short)v2 & 0xf000) != 0x1000)\n                        {\n                            v1 = (unsigned int)((v2 & 0xf000) != 0xc000? 63 : 115);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *((unsigned long long *)&v3->field_0) = v1;\n    v3->field_1 = (0 - (unsigned int)(char)((v2 & 0x100) < 1) & -69) + 114;\n    v3->field_2 = (0 - (unsigned int)(char)((v2 & 128) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x800) != 0)\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -32) + 115;\n    }\n    else\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_3) = v4;\n    v3->field_4 = (0 - (unsigned int)(char)((v2 & 32) < 1) & -69) + 114;\n    v3->field_5 = (0 - (unsigned int)(char)((v2 & 16) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x400) != 0)\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -32) + 115;\n    }\n    else\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_6) = v5;\n    v3->field_7 = (0 - (unsigned int)(char)((v2 & 4) < 1) & -69) + 114;\n    v3->field_8 = (0 - (unsigned int)(char)((v2 & 2) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x200) != 0)\n    {\n        v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -32) + 116;\n        v3->field_a = 32;\n        return 32;\n    }\n    v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -75) + 120;\n    v3->field_a = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "sub_40a5e0",
            "funcStartAddr": "0x40a5e0",
            "funcEndAddr": "0x40a62c",
            "decompiledFuncCode": "int sub_40a5e0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_408af0",
            "funcStartAddr": "0x408af0",
            "funcEndAddr": "0x408b5f",
            "decompiledFuncCode": "extern unsigned long long g_40c917;\n\nint sub_408af0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40c917;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_408cb0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_402961",
            "funcStartAddr": "0x402961",
            "funcEndAddr": "0x4029b8",
            "decompiledFuncCode": "extern char g_60f308;\nextern unsigned long long g_60f310;\n\nint sub_402961()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60f308 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60f310 >= 0)\n            {\n                break;\n            }\n            g_60f310 = g_60f310 + 1;\n            *((long long *)(6352448 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60f308 = 1;\n        return sub_40290b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x4090da",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_408fa0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_408dd0();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_408dd0();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x405146",
            "decompiledFuncCode": "int sub_405130()\n{\n}\n"
        },
        {
            "funcName": "sub_4057a0",
            "funcStartAddr": "0x4057a0",
            "funcEndAddr": "0x4057d0",
            "decompiledFuncCode": "int sub_4057a0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_405990(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404be2",
            "funcStartAddr": "0x404be2",
            "funcEndAddr": "0x404c0b",
            "decompiledFuncCode": "int sub_404be2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_408f20",
            "funcStartAddr": "0x408f20",
            "funcEndAddr": "0x408f9a",
            "decompiledFuncCode": "extern int512_t g_40c9d0;\n\nint sub_408f20()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4245968)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_40c9d0;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_405a80",
            "funcStartAddr": "0x405a80",
            "funcEndAddr": "0x405a8c",
            "decompiledFuncCode": "int sub_405a80()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_403390",
            "funcStartAddr": "0x403390",
            "funcEndAddr": "0x4034f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char padding_2[2];\n    unsigned int field_4;\n    unsigned int field_8;\n    unsigned int field_c;\n} struct_0;\n\nint sub_403390()\n{\n    void tmp_87;  // tmp #87\n    struct_0 *v1;  // rcx\n    unsigned long long v2;  // r11\n    unsigned int v3;  // edi\n    unsigned int v6;  // r12d\n    char v7;  // sil\n    unsigned int v8;  // r10\n    unsigned int v9;  // rdi\n    unsigned int|unsigned long v10;  // r9\n    unsigned long v11;  // r13\n    unsigned long long v12;  // r11\n    unsigned int|unsigned long v13;  // r9\n    unsigned int|unsigned long v14;  // r9\n    unsigned int v16;  // cc_dep1\n    unsigned int v20;  // r10d\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rbx\n    unsigned int *v23;  // r8\n\n    v2 = v1->field_1;\n    v21 = v3 & 4095;\n    v22 = 0;\n    if (v1->field_1 != 0)\n    {\n        while (true)\n        {\n            v6 = v1->field_4;\n            v10 = v1->field_8;\n            if (v7 == 0)\n            {\n                v8 = -1;\n                v9 = 0;\n            }\n            else\n            {\n                v8 = v1->field_c | -3073;\n                v9 = !(v1->field_c) & 0xc00;\n            }\n            if (v2 != 2 || v7 == 0 && (v21 & 73) == 0)\n            {\n                v12 = v1->field_0;\n                v13 = v10 & v8;\n            }\n            if (v2 == 2)\n            {\n                v12 = v1->field_0;\n                v13 = ((unsigned int)v10 | 73) & v8;\n            }\n            else if (v2 == 3)\n            {\n                v10 = (unsigned int)v10 & (unsigned int)v21;\n                tmp_87 = !(0 - (unsigned int)(char)(((unsigned int)v10 & 292) < 1)) & 292;\n                v10 = (unsigned int)v10 | ((v10 & 73) != 0? ((v10 & 146) != 0? (unsigned int)v11 : tmp_87) | 73 : ((v10 & 146) != 0? (unsigned int)v11 : tmp_87));\n            }\n            if (v6 == 0)\n            {\n                v14 = v13 & !((unsigned int)rdx<8>);\n            }\n            else\n            {\n                v14 = v13 & v6;\n                if (v12 != 45)\n                {\n                    v16 = v12;\n                }\n                if (v12 == 61)\n                {\n                    v9 |= !((unsigned int)r12<8>);\n                    v8 = !((unsigned int)cc_dep1<8>);\n                }\n            }\n            if (v12 == 45 && v6 == 0 || v12 == 45 && v6 != 0)\n            {\n                v22 |= v14;\n                v21 = (unsigned int)v21 & !((unsigned int)r9<8>);\n            }\n            if (v6 == 0 && v12 != 45 || v6 != 0 && v12 != 45)\n            {\n                if (v12 == 43 && (v6 == 0 || v12 != 61) && (v12 != 61 || v6 != 0))\n                {\n                    v22 |= v14;\n                    v21 = (unsigned int)v21 | v14;\n                }\n                if ((v12 == 61 || v6 == 0) && (v12 == 61 || v6 != 0))\n                {\n                    v1 = &v1[1];\n                    v2 = v1->field_1;\n                    v20 = v8 & 4095;\n                    v22 |= v20;\n                    v21 = (unsigned int)v21 & v9 | v14;\n                    if ((char)v2 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v12 != 61 || v12 != 61)\n            {\n                v1 = &v1[1];\n                v2 = v1->field_1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v23 != 0)\n    {\n        *((unsigned long long *)&v23) = v22;\n    }\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_4050c0",
            "funcStartAddr": "0x4050c0",
            "funcEndAddr": "0x4050d3",
            "decompiledFuncCode": "int sub_4050c0()\n{\n}\n"
        },
        {
            "funcName": "sub_403330",
            "funcStartAddr": "0x403330",
            "funcEndAddr": "0x403384",
            "decompiledFuncCode": "int sub_403330()\n{\n    unsigned int v0;  // [bp-0x80]\n    unsigned long long v3;  // rax\n\n    v3 = 0;\n    if (__xstat(0x1) == 0)\n    {\n        v3 = sub_405740();\n        *((short *)v3) = 317;\n        *((int *)(v3 + 4)) = 4095;\n        *((unsigned int *)(v3 + 8)) = v0;\n        *((int *)(v3 + 12)) = 4095;\n        *((char *)(v3 + 17)) = 0;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_406220",
            "funcStartAddr": "0x406220",
            "funcEndAddr": "0x4063d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned int field_48;\n    char field_49;\n} struct_0;\n\nint sub_406220()\n{\n    unsigned long v0;  // [bp-0xd0]\n    char v1;  // [bp-0xc8]\n    unsigned long v2;  // [bp-0xc0]\n    struct_0 *v4;  // rdi\n    struct_0 *v5;  // r15\n    unsigned long long v6;  // rsi\n    unsigned long long v7[17];  // r13\n    unsigned long long v8;  // rcx\n    unsigned int v10;  // r12d\n    char *v11;  // rdi\n    unsigned long long v12;  // rcx\n    char *v13;  // rsi\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    unsigned long long v17;  // cc_dep1\n    unsigned int|unsigned long v18;  // r12\n    unsigned long long v19;  // rbx\n    unsigned long long v21;  // r14\n    unsigned int *v22;  // ebp\n    unsigned int v24;  // r13d\n    unsigned long long v26;  // rax\n\n    v5 = v4;\n    v7 = v6;\n    v22 = v18;\n    v10 = v4->field_48;\n    v18 = v4->field_48 & 4;\n    if (v8 != 0)\n    {\n        v11 = \".\";\n        v12 = 3;\n        v13 = v8;\n        while (v12 != 0)\n        {\n            v12 -= 1;\n            v14 = *(v13);\n            v15 = *(v11);\n            v11 = &v11[v16];\n            v13 = &v13[v16];\n            break;\n        }\n        v17 = (v14 > v15) - 0 - (v14 < v15);\n        if ((char)v17 == 0 && v18 == 0)\n        {\n            if (!((unsigned int)v18 < 0))\n            {\n                v18 = v18;\n            }\n            else if (((unsigned short)v10 & 0x200) != 0)\n            {\n                v0 = &v5[1].padding_0[19];\n                v21 = (unsigned int)sub_409f80();\n                if ((char)v21 == 0)\n                {\n                    v18 = (unsigned int)sub_409fd0();\n                    if ((unsigned int)v18 >= 0)\n                    {\n                        v22 = (unsigned int)v18;\n                    }\n                }\n            }\n        }\n    }\n    if ((v8 == 0 || (char)v17 != 0) && v18 == 0 && (unsigned int)v18 >= 0)\n    {\n        v18 = v18;\n    }\n    if (v18 != 0)\n    {\n        if (((unsigned short)v10 & 0x200) != 0 && (unsigned int)v18 >= 0)\n        {\n            v19 = 0;\n            close(v18);\n        }\n        if ((unsigned int)v18 < 0 || ((unsigned short)v10 & 0x200) == 0)\n        {\n            v19 = 0;\n        }\n    }\n    else\n    {\n        if ((unsigned int)v18 < 0 && (((unsigned short)v10 & 0x200) == 0 || (unsigned int)v18 < 0 || v8 == 0 || (char)v17 != 0 || (char)v21 != 0))\n        {\n            v18 = sub_4061d0();\n            if (v18 < 0)\n            {\n                v19 = -18446744069414584321;\n            }\n        }\n        if (((char)v17 == 0 || (unsigned int)v18 >= 0 || v18 >= 0) && ((char)v21 == 0 || (unsigned int)v18 >= 0 || v18 >= 0) && ((unsigned int)v18 >= 0 || ((unsigned short)v10 & 0x200) != 0 || v18 >= 0) && ((unsigned int)v18 >= 0 || v18 >= 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || v18 >= 0 || v8 != 0))\n        {\n            v19 = __fxstat(0x1, v18, (unsigned int)&v1);\n            if ((unsigned int)v19 == 0)\n            {\n                if (v7[15] == *((long long *)&v1) && v7[16] == v2)\n                {\n                    if ((*(&((char *)&v5->field_48)[1]) & 2) == 0)\n                    {\n                        v19 = fchdir(v18);\n                    }\n                    else\n                    {\n                        sub_406030();\n                    }\n                }\n                if (v7[15] != *((long long *)&v1) || v7[16] != v2)\n                {\n                    *(__errno_location()) = 2;\n                }\n            }\n            if (v7[16] != v2)\n            {\n                v19 = -18446744069414584321;\n            }\n            if (((*(&((char *)&v5->field_48)[1]) & 2) == 0 || v7[15] != *((long long *)&v1) || (unsigned int)v19 != 0 || v7[16] != v2) && v22 < 0)\n            {\n                v24 = *(v22);\n                close(v18);\n                *(__errno_location()) = v24;\n            }\n        }\n    }\n    v26 = v19;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_409540",
            "funcStartAddr": "0x409540",
            "funcEndAddr": "0x409571",
            "decompiledFuncCode": "int sub_409540()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404ef0",
            "funcStartAddr": "0x404ef0",
            "funcEndAddr": "0x404eff",
            "decompiledFuncCode": "int sub_404ef0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a928",
            "decompiledFuncCode": "extern int512_t g_60f248;\n\nint sub_40a910()\n{\n}\n"
        },
        {
            "funcName": "sub_404ae0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404b13",
            "decompiledFuncCode": "extern int512_t g_60f460;\n\nint sub_404ae0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60f460 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60f460 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_408dd0",
            "funcStartAddr": "0x408dd0",
            "funcEndAddr": "0x408df6",
            "decompiledFuncCode": "int sub_408dd0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_4056c0",
            "funcStartAddr": "0x4056c0",
            "funcEndAddr": "0x405734",
            "decompiledFuncCode": "extern unsigned int g_40c432;\nextern unsigned int g_40c45d;\nextern unsigned int g_40c690;\n\nint sub_4056c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c432, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c45d, 0x5));\n    dcgettext(0x0, 0x40c690, 0x5);\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "0x407420",
            "funcEndAddr": "0x407b4f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[32];\n    unsigned int field_48;\n    char field_49;\n    char padding_4a[14];\n    unsigned long long field_58;\n} struct_0;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[16];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    unsigned int field_44;\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[8];\n    unsigned short field_70;\n    char field_72;\n    char padding_73[1];\n    unsigned short field_74;\n    char padding_76[2];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n    char padding_94[20];\n    unsigned long long field_a8;\n} struct_4;\n\ntypedef struct struct_7 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[32];\n    unsigned int field_48;\n    char field_49;\n    char padding_4a[14];\n    unsigned long long field_58;\n} struct_7;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    struct struct_3 *field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[16];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    unsigned int field_44;\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[8];\n    unsigned short field_70;\n    char field_72;\n    char padding_73[1];\n    unsigned short field_74;\n    char padding_76[2];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n    char padding_94[20];\n    unsigned long long field_a8;\n} struct_2;\n\ntypedef struct struct_8 {\n    char padding_0[1];\n    char field_1;\n} struct_8;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    struct struct_6 *field_8;\n    unsigned long long field_10;\n    char padding_18[24];\n    unsigned long long field_30;\n} struct_5;\n\nint fts_read()\n{\n    void tmp_11;  // tmp #11\n    void tmp_9;  // tmp #9\n    void tmp_8;  // tmp #8\n    void tmp_13;  // tmp #13\n    void tmp_10;  // tmp #10\n    struct_0 *v1;  // rdi\n    struct_4 *v2;  // rbp\n    unsigned long long v3;  // rax\n    struct_7 *v4;  // r12\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    struct_2 *|unsigned long long v7;  // rbx\n    unsigned long long v8;  // rax\n    char *v9;  // rdx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    void *v12;  // rdi\n    unsigned long long v15;  // rax\n    unsigned int v16;  // eax\n    struct_8 *v19;  // rbp\n    void *v20;  // rdi\n    unsigned long long v22;  // rax\n    unsigned int v24;  // eax\n    unsigned int v25;  // eax\n    struct_5 *v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long v31;  // rdi\n    unsigned long long v32;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r14\n    unsigned long long v44;  // rax\n    unsigned long long v45[14];  // rbp\n    unsigned long long v46;  // rax\n    unsigned int|unsigned long|unsigned long long v48;  // edi\n    unsigned long long v49;  // rax\n\n    v2 = v1->field_0;\n    if (v1->field_0 != 0 && ((char)(v1->field_48 >> 8) & 64) == 0)\n    {\n        v3 = v2->field_74;\n        v4 = v1;\n        v2->field_74 = 3;\n        if (v3 != 1)\n        {\n            if (v1->field_0->field_74 != 2)\n            {\n            }\n            else\n            {\n                if ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000)\n                {\n                }\n                else\n                {\n                    v5 = sub_405ad0();\n                    *((unsigned long long *)&v2->field_70) = v5;\n                    if (v5 != 1)\n                    {\n                        v1->field_0 = &v2->padding_0;\n                    }\n                    else if (((char)v1->field_48 & 4) != 0)\n                    {\n                        v1->field_0 = &v2->padding_0;\n                        v7 = v2;\n                    }\n                    else\n                    {\n                        v11 = sub_4061d0();\n                        *((unsigned long long *)&v2->field_44) = v11;\n                        if (v11 >= 0)\n                        {\n                            *((short *)&v2->field_72) = *((short *)&v2->field_72) | 2;\n                            v49 = v2->field_70;\n                            v7 = v2;\n                        }\n                        else\n                        {\n                            v16 = *(__errno_location());\n                            v2->field_70 = 7;\n                            v2->field_40 = v16;\n                            v1->field_0 = &v2->padding_0;\n                        }\n                    }\n                    if (v5 == 11)\n                    {\n                        v7 = v2;\n                    }\n                }\n            }\n            if (v1->field_0->field_70 != 1 && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000))\n            {\n                while (true)\n                {\n                    v7 = v2->field_10;\n                    if (v2->field_10 != 0)\n                    {\n                        v1->field_0 = &v7->padding_0;\n                        free(v2);\n                        if (v7->field_58 != 0)\n                        {\n                            v6 = v7->field_74;\n                            v2 = v7;\n                            if (v6 != 2)\n                            {\n                                break;\n                            }\n                            v10 = sub_405ad0();\n                            *((unsigned long long *)&v7->field_70) = v10;\n                            if (((char)v1->field_48 & 4) == 0 && v10 == 1)\n                            {\n                                v15 = sub_4061d0();\n                                *((unsigned long long *)&v7->field_44) = v15;\n                                if (v15 >= 0)\n                                {\n                                    *((short *)&v7->field_72) = *((short *)&v7->field_72) | 2;\n                                }\n                                else\n                                {\n                                    v24 = *(__errno_location());\n                                    v7->field_70 = 7;\n                                    v7->field_40 = v24;\n                                }\n                            }\n                            v7->field_74 = 3;\n                        }\n                        else\n                        {\n                            v8 = sub_4060a0();\n                            if (v8 == 0)\n                            {\n                                v12 = *((long long *)&v1->padding_4a[11]);\n                                if (((unsigned short)v4->field_48 & 258) == 0)\n                                {\n                                    free(v12);\n                                }\n                                else if (v12 != 0)\n                                {\n                                    sub_4097e0();\n                                }\n                                tmp_11 = v7->field_60;\n                                v19 = &v7[1].field_58;\n                                v20 = v4->field_20;\n                                v7->field_48 = v7->field_60;\n                                memmove(v20, &v7[1].field_58, tmp_11 + 1);\n                                v22 = strrchr();\n                                if (v22 != 0 && (v19->field_1 != 0 || v19 != v22))\n                                {\n                                    v37 = strlen(v22 + 1);\n                                    memmove(v19, v22 + 1, v37 + 1);\n                                    v7->field_60 = v37;\n                                }\n                                tmp_9 = v4->field_20;\n                                v7->field_38 = v4->field_20;\n                                v7->field_30 = tmp_9;\n                                sub_406170();\n                                v49 = v7->field_70;\n                            }\n                            else\n                            {\n                                v4->field_48 = v4->field_48 | 0x4000;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v7 = v2->field_8;\n                        if (v2->field_8->field_18 != 0)\n                        {\n                            tmp_8 = v7->field_48;\n                            v9 = v4->field_20;\n                            v4->field_0 = v7;\n                            v9[tmp_8] = 0;\n                            v7 = (unsigned long long)(unsigned int)sub_406540();\n                            if (v7 == 0)\n                            {\n                                if ((*(&((char *)&v4->field_48)[1]) & 64) != 0)\n                                {\n                                    break;\n                                }\n                                v7 = v2->field_8;\n                            }\n                            else\n                            {\n                                free(v2);\n                            }\n                        }\n                        if (v2->field_8->field_18 == 0 || v7 == 0)\n                        {\n                            v1->field_0 = &v7->padding_0;\n                            free(v2);\n                            if (v7->field_58 != -1)\n                            {\n                                if (v7->field_70 == 11)\n                                {\n                                    break;\n                                }\n                                *((char *)(v1->field_20 + v7->field_48)) = 0;\n                                if (v7->field_58 != 0)\n                                {\n                                    v28 = (unsigned short)*((short *)&v7->field_72);\n                                    if (((char)*((short *)&v7->field_72) & 2) != 0)\n                                    {\n                                        v30 = v1->field_48;\n                                        v31 = v7->field_44;\n                                        if (((char)v4->field_48 & 4) == 0)\n                                        {\n                                            if ((v30 & 2) != 0)\n                                            {\n                                                sub_406030();\n                                                v31 = v7->field_44;\n                                            }\n                                            else\n                                            {\n                                                v36 = fchdir(v31);\n                                                if (v36 != 0)\n                                                {\n                                                    v7->field_40 = *(__errno_location());\n                                                    v4->field_48 = v4->field_48 | 0x4000;\n                                                }\n                                                v31 = v7->field_44;\n                                            }\n                                        }\n                                        close(v31);\n                                    }\n                                    else if ((v28 & 1) == 0)\n                                    {\n                                        v32 = sub_406220();\n                                    }\n                                }\n                                else\n                                {\n                                    v29 = sub_4060a0();\n                                }\n                                if (v7->field_58 == 0 && v29 == 0 || v32 == 0 && v7->field_58 != 0 || v7->field_58 != 0 && (v28 & 1) != 0 || v7->field_58 != 0 && ((char)*((short *)&v7->field_72) & 2) != 0)\n                                {\n                                    v48 = v4->field_48;\n                                }\n                                else\n                                {\n                                    v7->field_40 = *(__errno_location());\n                                    v4->field_48 = v4->field_48 | 0x4000;\n                                    if (v7->field_70 == 2)\n                                    {\n                                        break;\n                                    }\n                                    v48 = v4->field_48;\n                                }\n                                if (v7->field_70 != 2 || v7->field_58 == 0 && v29 != 0 || (v28 & 1) == 0 && ((char)*((short *)&v7->field_72) & 2) == 0 && v7->field_58 != 0 && v32 != 0)\n                                {\n                                    if (v7->field_40 == 0)\n                                    {\n                                        v7->field_70 = 6;\n                                        sub_4064a0();\n                                        v48 = v4->field_48;\n                                    }\n                                    else\n                                    {\n                                        v7->field_70 = 7;\n                                    }\n                                }\n                                if (((unsigned short)v48 & 0x4000) == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                free(v7);\n                                *(__errno_location()) = 0;\n                                v1->field_0 = 0;\n                            }\n                        }\n                    }\n                }\n                if (!(...))\n                {\n                    if (v7->field_58 == 0 && v8 == 0 && v2->field_10 != 0)\n                    {\n                        v4->field_0 = v7;\n                    }\n                    else if (v7->field_58 == -1 && v2->field_10 == 0 && ((*(&((char *)&v4->field_48)[1]) & 64) == 0 || v2->field_8->field_18 == 0) && (v2->field_8->field_18 == 0 || v7 == 0))\n                    {\n                        return stack_base + 0;\n                    }\n                    else if (...)\n                    {\n                        tmp_13 = v7;\n                        return tmp_13;\n                    }\n                    else if ((v2->field_10 == 0 || v7->field_58 != 0) && (v2->field_10 == 0 || v7->field_74 != 4) && (v2->field_8->field_18 != 0 || v2->field_10 != 0) && (v7 != 0 || v2->field_10 != 0))\n                    {\n                        tmp_10 = (*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20;\n                        *((char *)((*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20)) = 47;\n                        memmove(tmp_10 + 1, &v7[1].field_58, v7->field_60 + 1);\n                        v49 = v7->field_70;\n                    }\n                    else if (v2->field_10 == 0 && v7->field_58 != -1 && ((*(&((char *)&v4->field_48)[1]) & 64) == 0 || v2->field_8->field_18 == 0) && (v2->field_8->field_18 == 0 || v7 == 0))\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n            }\n        }\n        else\n        {\n            v2->field_70 = sub_405ad0();\n        }\n    }\n    if ((v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && ((char)v1->field_48 & 64) != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000) && v2->field_78 == v1->field_18 || v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000) && ((char)v1->field_48 & 64) == 0) && v1->field_8 != 0)\n    {\n        if (!(((char)(v1->field_48 >> 8) & 32) == 0))\n        {\n            v1->field_48 = v1->field_48;\n            sub_405e10();\n            v1->field_8 = 0;\n        }\n        else if (sub_406220() != 0)\n        {\n            v7 = v1->field_8;\n            v25 = *(__errno_location());\n            *((short *)&v2->field_72) = *((short *)&v2->field_72) | 1;\n            v2->field_40 = v25;\n            if (v7 != 0)\n            {\n                v27 = v1->field_8;\n                do\n                {\n                    v27->field_30 = v27->field_8->field_30;\n                    v27 = v27->field_10;\n                }\n                while (v27 != 0);\n            }\n        }\n        else\n        {\n            v7 = v1->field_8;\n        }\n    }\n    if (v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && ((char)v1->field_48 & 64) != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000) && v2->field_78 != v1->field_18 || v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0->field_74 != 2 && v1->field_0 != 0 && v1->field_0->field_74 == 4)\n    {\n        if ((v2->field_72 & 2) != 0)\n        {\n            close(v2->field_44);\n        }\n        if (v1->field_8 != 0)\n        {\n            sub_405e10();\n            v1->field_8 = 0;\n        }\n        v2->field_70 = 6;\n        sub_4064a0();\n    }\n    if (...)\n    {\n        v7 = (unsigned int)sub_406540();\n        v1->field_8 = v7;\n        if (v7 == 0 && ((unsigned short)v1->field_48 & 0x4000) == 0)\n        {\n            if (v2->field_40 != 0 && v2->field_70 != 4)\n            {\n                v2->field_70 = 7;\n            }\n            sub_4064a0();\n        }\n    }\n    if (...)\n    {\n        v1->field_8 = 0;\n    }\n    if (...)\n    {\n        tmp_10 = (*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20;\n        *((char *)((*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20)) = 47;\n        memmove(tmp_10 + 1, &v7[1].field_58, v7->field_60 + 1);\n        v49 = v7->field_70;\n    }\n    if (...)\n    {\n        v4->field_0 = v7;\n    }\n    if (...)\n    {\n        v44 = v7->field_a8;\n        if (v7->field_a8 != 2)\n        {\n        }\n        else\n        {\n            v45 = v7->field_8;\n            if (v7->field_8->field_68 == 0 && ((char)v4->field_48 & 24) == 24)\n            {\n                v46 = sub_405fc0();\n                if (v46 == 2)\n                {\n                    v49 = v7->field_70;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        v49 = sub_405ad0();\n        tmp_10 = v7->field_90;\n        *((unsigned long long *)&v7->field_70) = v49;\n        if (((unsigned short)tmp_10 & 0xf000) == 0x4000 && v7->field_58 != 0 && v45[13] - 1 <= -3)\n        {\n            v45[13] = v45[13] - 1;\n        }\n    }\n    if (...)\n    {\n        v4->field_18 = v7->field_78;\n    }\n    if (...)\n    {\n        *(__errno_location()) = 12;\n    }\n    if (...)\n    {\n        tmp_13 = v7;\n        return tmp_13;\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405790",
            "funcStartAddr": "0x405790",
            "funcEndAddr": "0x405792",
            "decompiledFuncCode": "int sub_405790()\n{\n}\n"
        },
        {
            "funcName": "sub_405760",
            "funcStartAddr": "0x405760",
            "funcEndAddr": "0x405781",
            "decompiledFuncCode": "int sub_405760()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405990(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402d70",
            "funcStartAddr": "0x402d70",
            "funcEndAddr": "0x402d78",
            "decompiledFuncCode": "extern unsigned long long g_60f350;\n\nint sub_402d70()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60f350 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404de0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x404df2",
            "decompiledFuncCode": "int sub_404de0()\n{\n}\n"
        },
        {
            "funcName": "sub_408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x408a83",
            "decompiledFuncCode": "int sub_408a70()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4089f0();\n}\n"
        },
        {
            "funcName": "sub_409fd0",
            "funcStartAddr": "0x409fd0",
            "funcEndAddr": "0x40a010",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[12];\n    unsigned int field_10;\n    unsigned int field_14;\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_409fd0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1->field_1c != 0)\n    {\n        abort(); /* do not return */\n    }\n    v2 = (unsigned long long)v1->field_14;\n    v3 = (unsigned int)*((int *)((char *)v1 + 0x4 * v2));\n    *((unsigned int *)((char *)v1 + 0x4 * v2)) = v1->field_10;\n    if ((unsigned int)v2 != v1->field_18)\n    {\n        v1->field_14 = v1->field_14 + 3 & 3;\n        return v3;\n    }\n    v1->field_1c = 1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4051a0",
            "funcStartAddr": "0x4051a0",
            "funcEndAddr": "0x405549",
            "decompiledFuncCode": "extern unsigned int g_40c3eb;\nextern unsigned int g_40c3ef;\nextern unsigned int g_40c3ff;\nextern unsigned int g_40c416;\nextern unsigned int g_40c478;\nextern unsigned int g_40c548;\nextern unsigned int g_40c568;\nextern unsigned int g_40c590;\nextern unsigned int g_40c5b8;\nextern unsigned int g_40c5e8;\n\nint sub_4051a0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40c3eb, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c478, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40c3ef, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40c3ff, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40c416, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40c548, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40c568, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40c590, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40c5b8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40c5e8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_404c0b",
            "funcStartAddr": "0x404c0b",
            "funcEndAddr": "0x404cd1",
            "decompiledFuncCode": "int sub_404c0b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4036b0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_405740();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4036b0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40a630",
            "funcStartAddr": "0x40a630",
            "funcEndAddr": "0x40a6a8",
            "decompiledFuncCode": "int sub_40a630()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40a7f0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a6b0",
            "funcStartAddr": "0x40a6b0",
            "funcEndAddr": "0x40a7dc",
            "decompiledFuncCode": "extern unsigned int g_60f4e0;\n\nint sub_40a6b0()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60f4e0 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_40a6b0();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60f4e0 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_60f4e0 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_40a6b0();\n        }\n        if (((unsigned int)v15 < 0 || g_60f4e0 < 0) && (g_60f4e0 < 0 || *(v12) == 22) && (g_60f4e0 == -1 || g_60f4e0 >= 0) && (g_60f4e0 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_60f4e0 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v14 == -1 || v13 < 0)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_406540",
            "funcStartAddr": "0x406540",
            "funcEndAddr": "0x406eaa",
            "decompiledFuncCode": "typedef struct struct_2 {\n    struct struct_3 *field_0;\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    char field_48;\n} struct_2;\n\ntypedef struct struct_7 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    char field_48;\n} struct_7;\n\ntypedef struct struct_3 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n} struct_3;\n\ntypedef struct struct_5 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    unsigned int field_48;\n    char field_49;\n} struct_5;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned int field_40;\n    char padding_44[44];\n    unsigned short field_70;\n} struct_1;\n\ntypedef struct struct_4 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_4;\n\ntypedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[24];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[4];\n    unsigned long long field_48;\n    char padding_50[32];\n    unsigned short field_70;\n    unsigned short field_72;\n    char padding_74[20];\n    unsigned long long field_88;\n} struct_0;\n\ntypedef struct struct_8 {\n    char padding_0[72];\n    unsigned int field_48;\n} struct_8;\n\ntypedef struct struct_10 {\n    unsigned long long field_0;\n    char padding_8[10];\n    char field_12;\n    char field_13;\n    char field_14;\n} struct_10;\n\ntypedef struct struct_9 {\n    char padding_0[4245440];\n    unsigned int field_40c7c0;\n} struct_9;\n\ntypedef struct struct_6 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[56];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n} struct_6;\n\nextern int512_t g_405aa0;\nextern char g_40c7c0;\n\nint sub_406540()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x90]\n    void tmp_20;  // tmp #20\n    unsigned long v1;  // [bp-0x88]\n    unsigned long long v2;  // [bp-0x80]\n    unsigned long v3;  // [bp-0x78]\n    struct_3 *|struct_0 * v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned long long v6;  // [bp-0x60]\n    unsigned long|unsigned long long v7;  // [bp-0x58]\n    char *v8;  // [bp-0x50]\n    unsigned long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    char v11;  // [bp-0x3a]\n    char v12;  // [bp-0x39]\n    unsigned int v14;  // [bp+0x100008]\n    struct_2 *v15;  // rdi\n    struct_3 *v17;  // r13\n    unsigned int v18;  // esi\n    unsigned long long v19;  // rax\n    struct_5 *|struct_8 * v21;  // ebx\n    unsigned long long v22;  // rax\n    unsigned short v23;  // cc_dep1\n    unsigned long long v27;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // r14\n    unsigned int|unsigned long|unsigned long long v31;  // rdi\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rdi\n    unsigned long long v34;  // rbp\n    void *v39;  // rcx\n    struct_7 *v40;  // rbx\n    struct_10 *v41;  // r14\n    unsigned long long v42;  // r13\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // r8\n    void *v46;  // rsi\n    unsigned long long v47;  // rax\n    unsigned int v49;  // eax\n    unsigned int v50;  // esi\n    struct_9 *v51;  // rdx\n    unsigned long long v52;  // rax\n    unsigned long long v53;  // r15\n    unsigned long long v54;  // rbp\n    unsigned long long v55;  // r12\n    struct_3 *v56;  // r13\n    struct_3 *v57;  // r13\n    struct_6 *v58;  // r13\n    unsigned int v59;  // ebx\n    struct_7 *v60;  // r15\n    unsigned int v61;  // eax\n    unsigned long long v67[8];  // rax\n    unsigned long long v68;  // rcx\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rdx\n    unsigned long long v71[12];  // rax\n    unsigned long long v72;  // rdx\n    unsigned long long v73;  // rdx\n    unsigned long long v74;  // rdx\n    char v75;  // al\n    unsigned long long v77;  // rax\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // rax\n\n    v17 = v15->field_0;\n    v10 = v18;\n    v31 = v15->field_0->field_18;\n    v9 = v31;\n    if (v9 != 0)\n    {\n        v19 = dirfd();\n        if (v19 >= 0)\n        {\n            if (v21->field_40 != 0)\n            {\n                v6 = -1;\n            }\n            else\n            {\n                v6 = 100000;\n                v31 = v21->field_48;\n                v12 = 1;\n            }\n        }\n        else\n        {\n            closedir();\n            v4->field_18 = 0;\n        }\n    }\n    else if (((unsigned short)v21->field_48 & 516) != 0x200)\n    {\n        v21 = sub_40a590();\n        if (v21 >= 0)\n        {\n            v22 = fdopendir(v21);\n            if (v22 != 0)\n            {\n                v23 = v4->field_70;\n                v4->field_18 = v22;\n                if (!(v23 != 11))\n                {\n                    v4->field_70 = sub_405ad0();\n                }\n                else if (((unsigned short)v21->field_48 & 0x100) != 0)\n                {\n                    sub_4064a0();\n                    sub_405ad0();\n                    v27 = sub_4063f0();\n                    if (v27 == 0)\n                    {\n                        v2 = 0;\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v23 == 11 || ((unsigned short)v21->field_48 & 0x100) == 0 || v27 != 0)\n                {\n                    v6 = (unsigned long long)((unsigned int)(0 - (unsigned long long)(char)(v21->field_40 < 1)) & 100001) - 1;\n                    if (v10 != 2 && ((char)v21->field_48 & 56) == 24 && v4->field_88 == 2)\n                    {\n                        v29 = sub_405fc0();\n                        if (v29 != 0 && v10 == 3)\n                        {\n                            v30 = 0;\n                            v55 = 1;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                close(v21);\n                *(__errno_location()) = v14;\n            }\n        }\n        if (v21 < 0 || v22 == 0)\n        {\n            v4->field_18 = 0;\n        }\n    }\n    if ((v9 == 0 || v19 < 0) && (v9 != 0 || ((unsigned short)v21->field_48 & 516) != 0x200) && (v21 < 0 || v22 == 0 || v9 != 0))\n    {\n        if (v10 == 3)\n        {\n            v4->field_70 = 4;\n            v4->field_40 = *(__errno_location());\n        }\n        v2 = 0;\n    }\n    if (v9 == 0 && v10 != 2 && ((unsigned short)v21->field_48 & 516) != 0x200 && v21 >= 0 && v22 != 0 && (v23 == 11 || ((unsigned short)v21->field_48 & 0x100) == 0 || v27 != 0) && ((char)v21->field_48 & 56) == 24 && v4->field_88 == 2 && v29 == 0 || v9 == 0 && v10 != 2 && ((unsigned short)v21->field_48 & 516) != 0x200 && v21 >= 0 && v22 != 0 && (v23 == 11 || ((unsigned short)v21->field_48 & 0x100) == 0 || v27 != 0) && ((char)v21->field_48 & 56) == 24 && v4->field_88 != 2 || v9 == 0 && v10 != 2 && ((unsigned short)v21->field_48 & 516) != 0x200 && v21 >= 0 && v22 != 0 && (v23 == 11 || ((unsigned short)v21->field_48 & 0x100) == 0 || v27 != 0) && ((char)v21->field_48 & 56) != 24)\n    {\n        v30 = 1;\n        v55 = (char)(v10 == 3);\n    }\n    if (v9 == 0 && v10 != 2 && ((unsigned short)v21->field_48 & 516) != 0x200 && v21 >= 0 && v22 != 0 && (v23 == 11 || ((unsigned short)v21->field_48 & 0x100) == 0 || v27 != 0) && ((char)v21->field_48 & 56) == 24 && v4->field_88 == 2 && v29 != 0 && v10 != 3 || v9 == 0 && ((unsigned short)v21->field_48 & 516) != 0x200 && v21 >= 0 && v22 != 0 && (v23 == 11 || ((unsigned short)v21->field_48 & 0x100) == 0 || v27 != 0) && v10 == 2)\n    {\n        v12 = 0;\n        v31 = v21->field_48;\n    }\n    if (...)\n    {\n        v21 = (unsigned long long)(unsigned int)sub_40a6b0();\n        if ((unsigned int)v21 < 0)\n        {\n            v33 = v4->field_18;\n            v34 = (unsigned int)v4->field_72 | 1;\n        }\n    }\n    if (...)\n    {\n        v32 = sub_406220();\n        if (v32 != 0)\n        {\n            v33 = v4->field_18;\n            v34 = (unsigned int)v4->field_72 | 1;\n        }\n    }\n    if (...)\n    {\n        v12 = 1;\n        v31 = v21->field_48;\n    }\n    if (...)\n    {\n        v4->field_72 = (unsigned int)v4->field_72 | 1;\n        closedir();\n        v31 = v21->field_48;\n    }\n    if (...)\n    {\n        v0 = v33;\n        v4->field_40 = *(__errno_location());\n    }\n    if (...)\n    {\n        *((unsigned long long *)&v4->field_72) = v34;\n        closedir();\n        v31 = v21->field_48;\n        v4->field_18 = 0;\n        if (((unsigned short)v31 & 0x200) != 0 && v21 >= 0)\n        {\n            close(v21);\n            v31 = v21->field_48;\n        }\n    }\n    if (...)\n    {\n        v4->field_18 = 0;\n        v12 = 0;\n    }\n    if (...)\n    {\n        v1 = v4->field_48;\n        v8 = v4->field_48 - 1;\n        if (*((char *)(v4->field_38 + v4->field_48 - 1)) != 47)\n        {\n            v8 = v4->field_48;\n            v1 = &v8[1];\n        }\n        v7 = 0;\n        if (((char)v31 & 4) != 0)\n        {\n            v39 = &v8[v21->field_20 + 1];\n            v8[v21->field_20] = 47;\n            v7 = v39;\n        }\n        v11 = 0;\n        v54 = 0;\n        v3 = v21->field_30 - v1;\n        v21 = v15;\n        v0 = 0;\n        v4 = v17;\n        v5 = *((long long *)&v4->padding_50[8]) + 1;\n        v2 = 0;\n        while (true)\n        {\n            v60 = v4->field_18;\n            if (v4->field_18 != 0)\n            {\n                *((int *)v55) = 0;\n                v55 = __errno_location();\n                v41 = (unsigned long long)readdir();\n                if (v41 != 0)\n                {\n                    if (v41->field_13 == 46 && (v60->field_48 & 32) == 0 && (*((short *)&v41->field_14) == 46 || v41->field_14 == 0))\n                    {\n                        v53 = v0;\n                    }\n                    if (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || *((short *)&v41->field_14) != 46 && v41->field_14 != 0)\n                    {\n                        v42 = strlen(&v41->field_13);\n                        v53 = (unsigned int)sub_405d80();\n                        if (v3 <= v42 && v53 != 0)\n                        {\n                            v3 = v60->field_20;\n                            v43 = sub_406100();\n                            if (v43 != 0)\n                            {\n                                v44 = v60->field_20;\n                                if (v60->field_20 != v3)\n                                {\n                                    *((int *)&v7) = ((v60->field_48 & 4) == 0? v7 : rdx<8> + (long long)(stack_base)[-136]);\n                                }\n                                else\n                                {\n                                    v43 = v11;\n                                }\n                                *((unsigned long long *)&v11) = v43;\n                                v3 = v60->field_30 - v1;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v61 = *((int *)v55);\n                    v56 = v4;\n                    if (*((int *)v55) != 0)\n                    {\n                        v56->field_40 = v61;\n                        v56->field_70 = (0 - (unsigned int)(char)((v9 | v54) < 1) & -3) + 7;\n                    }\n                    if (v4->field_18 != 0)\n                    {\n                        closedir();\n                        v4->field_18 = 0;\n                    }\n                }\n            }\n            else\n            {\n                v56 = v4;\n            }\n            if (v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 <= v42 && v43 == 0 || v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v53 == 0)\n            {\n                v58 = v4;\n                v59 = *((int *)v55);\n                free(v53);\n                sub_405e10();\n                closedir();\n                v58->field_18 = 0;\n                v58->field_70 = 7;\n                v2 = 0;\n                *((int *)(v53 + 72)) = *((int *)(v53 + 72)) | 0x4000;\n                *((unsigned int *)v55) = v59;\n            }\n            if (v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 <= v42 && v43 != 0 || v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 > v42)\n            {\n                v45 = v42 + v1;\n                if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)))\n                {\n                    v46 = v53 + 264;\n                    *((unsigned long *)(v53 + 88)) = v5;\n                    tmp_20 = v60->field_0;\n                    *((unsigned long long *)(v53 + 72)) = v45;\n                    *((long long *)(v53 + 8)) = tmp_20;\n                    *((unsigned long long *)(v53 + 128)) = v41->field_0;\n                    v47 = (unsigned int)*((int *)&v60->field_48);\n                    if (((char)*((int *)&v60->field_48) & 4) == 0)\n                    {\n                        *((void **)(v53 + 48)) = v46;\n                    }\n                    else\n                    {\n                        *((long long *)(v53 + 48)) = *((long long *)(v53 + 56));\n                        memmove(v7, v46, *((long long *)(v53 + 96)) + 1);\n                        v47 = (unsigned int)*((int *)&v60->field_48);\n                    }\n                    if ((v47 & 4) == 0 && v60->field_40 != 0)\n                    {\n                        *((unsigned short *)(v53 + 112)) = sub_405ad0();\n                    }\n                    if (v60->field_40 == 0 || (v47 & 4) != 0)\n                    {\n                        v49 = (unsigned int)v47 & 24;\n                        v50 = v41->field_12;\n                        v51 = (unsigned long long)((unsigned int)v41->field_12 - 1);\n                        if (v49 == 24 && ((char)v50 & 251) != 0)\n                        {\n                            *((short *)(v53 + 112)) = 11;\n                            if ((unsigned int)v51 > 11)\n                            {\n                                *((int *)(v53 + 144)) = 0;\n                                v52 = 1;\n                            }\n                            else\n                            {\n                                *((int *)(v53 + 144)) = *((int *)(0x4 * v51 + &g_40c7c0));\n                                v52 = 1;\n                            }\n                        }\n                        if (((char)v50 & 251) == 0 || v49 != 24)\n                        {\n                            *((short *)(v53 + 112)) = 11;\n                            if ((unsigned int)v51 > 11)\n                            {\n                                *((int *)(v53 + 144)) = 0;\n                                v52 = 2;\n                            }\n                            else\n                            {\n                                *((int *)(v53 + 144)) = *((int *)(0x4 * v51 + &g_40c7c0));\n                                v52 = 2;\n                            }\n                        }\n                        *((unsigned long long *)(v53 + 168)) = v52;\n                    }\n                    *((long long *)(v53 + 16)) = 0;\n                    if (v2 != 0)\n                    {\n                        v54 += 1;\n                        *((unsigned long long *)(v0 + 16)) = v53;\n                    }\n                    else\n                    {\n                        v2 = v53;\n                        v54 += 1;\n                    }\n                }\n                else\n                {\n                    v57 = v4;\n                    free(v53);\n                    sub_405e10();\n                    closedir();\n                    v57->field_18 = 0;\n                    v57->field_70 = 7;\n                    v2 = 0;\n                    *((int *)&v60->field_48) = *((int *)&v60->field_48) | 0x4000;\n                    *((int *)v55) = 36;\n                }\n            }\n            if ((v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 <= v42 && v43 != 0 || v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 > v42) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 == 0 && v54 < v6 || (v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 <= v42 && v43 != 0 || v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 > v42) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 != 0 && v54 < v6 || v41->field_13 == 46 && (v60->field_48 & 32) == 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) == 46 || v41->field_14 == 0))\n            {\n                v0 = v53;\n            }\n            if ((v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 <= v42 && v43 != 0 || v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 > v42) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 == 0 && v54 >= v6 || (v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 <= v42 && v43 != 0 || v53 != 0 && v41 != 0 && v4->field_18 != 0 && (*((short *)&v41->field_14) != 46 || v41->field_13 != 46 || (v60->field_48 & 32) != 0) && (v41->field_13 != 46 || (v60->field_48 & 32) != 0 || v41->field_14 != 0) && v3 > v42) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 != 0 && v54 >= v6)\n            {\n                v56 = v4;\n                v60 = v40;\n            }\n            if (...)\n            {\n                v67 = v60->field_8;\n                v68 = v60->field_20;\n                if (v60->field_8 != 0)\n                {\n                    do\n                    {\n                        v69 = v67[6];\n                        if (v67[6] != &v67[33])\n                        {\n                            v70 = v69 - v67[7] + v68;\n                            v67[6] = v70;\n                        }\n                        v67[7] = v68;\n                        v67 = v67[2];\n                    }\n                    while (v67 != 0);\n                }\n                for (v71 = v2; !((char)(v71[11] - 0 >> 63)); v71 = v74)\n                {\n                    v72 = v71[6];\n                    if (v71[6] != &v71[33])\n                    {\n                        v73 = v72 - v71[7] + v68;\n                        v71[6] = v73;\n                    }\n                    v74 = v71[2];\n                    v71[7] = v68;\n                    if (v74 == 0)\n                    {\n                        v74 = v71[1];\n                    }\n                }\n            }\n            if (...)\n            {\n                if ((v60->field_48 & 4) != 0)\n                {\n                    if (v54 == 0 || v60->field_30 == v1)\n                    {\n                        v7 -= 1;\n                    }\n                    *((char *)v7) = 0;\n                }\n                if (v9 == 0 && v12 != 0 && (v10 == 1 || v54 == 0))\n                {\n                    if (v56->field_58 == 0)\n                    {\n                        v75 = sub_4060a0() != 0;\n                    }\n                    else\n                    {\n                        v75 = sub_406220() != 0;\n                    }\n                    if (v75 != 0)\n                    {\n                        v56->field_70 = 7;\n                        *((int *)&v60->field_48) = *((int *)&v60->field_48) | 0x4000;\n                        sub_405e10();\n                        v2 = 0;\n                    }\n                }\n                if (v54 == 0 && (v12 == 0 || v75 == 0 || v9 != 0))\n                {\n                    if (v10 == 3)\n                    {\n                        v78 = v56->field_70;\n                        if (v56->field_70 != 4 && v78 != 7)\n                        {\n                            v56->field_70 = 6;\n                        }\n                    }\n                    sub_405e10();\n                    v2 = 0;\n                }\n                if (v54 != 0 && (v12 == 0 || v75 == 0 || v9 != 0 || v10 != 1))\n                {\n                    v77 = v60->field_40;\n                    if (v77 == 0 && v54 > 10000)\n                    {\n                        v79 = sub_405ea0();\n                        if (v79 != 16914836 && v79 != 26985)\n                        {\n                            v60->field_40 = &g_405aa0;\n                            v60->field_40 = 0;\n                            v2 = (unsigned int)sub_405c80();\n                        }\n                        if (v79 == 16914836 || v79 == 26985)\n                        {\n                            v77 = v60->field_40;\n                        }\n                    }\n                    if (v77 == 0 && v54 <= 10000 || v54 == 1 && v54 <= 10000 || v77 == 0 && v79 == 16914836 && v77 == 0 || v77 == 0 && v79 == 26985 && v77 == 0 || v79 == 16914836 && v54 == 1 && v77 == 0 || v79 == 26985 && v54 == 1 && v77 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409f90",
            "funcStartAddr": "0x409f90",
            "funcEndAddr": "0x409fc5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[16];\n    unsigned int field_14;\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_409f90()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned int v4;  // esi\n    unsigned int v5;  // esi\n\n    v2 = (unsigned long long)(v1->field_14 + ((unsigned int)v1->field_1c ^ 1) & 3);\n    v3 = (unsigned int)*((int *)((char *)v1 + 0x4 * v2));\n    *((unsigned int *)((char *)v1 + 0x4 * v2)) = v4;\n    v5 = v1->field_18;\n    v1->field_14 = (unsigned int)v2;\n    if (v5 == (unsigned int)v2)\n    {\n        v1->field_18 = ((unsigned int)v1->field_1c ^ 1) + v1->field_18 & 3;\n    }\n    v1->field_1c = 0;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_404db0",
            "funcStartAddr": "0x404db0",
            "funcEndAddr": "0x404dba",
            "decompiledFuncCode": "int sub_404db0()\n{\n}\n"
        },
        {
            "funcName": "sub_4090f0",
            "funcStartAddr": "0x4090f0",
            "funcEndAddr": "0x4090f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4090f0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_404a80",
            "funcStartAddr": "0x404a80",
            "funcEndAddr": "0x404ab4",
            "decompiledFuncCode": "int sub_404a80()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_405940();\n}\n"
        },
        {
            "funcName": "sub_404fb0",
            "funcStartAddr": "0x404fb0",
            "funcEndAddr": "0x405023",
            "decompiledFuncCode": "int sub_404fb0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4048e0();\n}\n"
        },
        {
            "funcName": "sub_405d80",
            "funcStartAddr": "0x405d80",
            "funcEndAddr": "0x405e0a",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[24];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[12];\n    unsigned long long field_50;\n    char padding_58[8];\n    unsigned long long field_60;\n    char padding_68[10];\n    unsigned int field_72;\n} struct_2;\n\nint sub_405d80()\n{\n    struct_1 *v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rbp\n    unsigned long v6;  // rax\n    void *v7;  // rsi\n    struct_2 *v9;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    if (v6 != 0)\n    {\n        memcpy(v6 + 264, v7, v3);\n        v9 = v2->field_20;\n        *((char *)(v1->field_20 + v4 + 264)) = 0;\n        *((unsigned long long *)(v6 + 96)) = v4;\n        *((struct_1 **)(v6 + 80)) = v2;\n        *((struct_2 **)(v6 + 56)) = v9;\n        *((int *)(v6 + 64)) = 0;\n        *((long long *)(v6 + 24)) = 0;\n        *((int *)(v6 + 114)) = 0x30000;\n        *((long long *)(v6 + 32)) = 0;\n        *((long long *)(v6 + 40)) = 0;\n    }\n    v6 = malloc(v3 + 272 & -8);\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_405ad0",
            "funcStartAddr": "0x405ad0",
            "funcEndAddr": "0x405c5e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[48];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[8];\n    unsigned long long field_78;\n    char padding_80[8];\n    unsigned long long field_88;\n    unsigned int field_90;\n    char padding_94[116];\n    char field_108;\n    char field_109;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[136];\n    unsigned long long field_88;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[44];\n    unsigned int field_2c;\n    char padding_30[24];\n    char field_48;\n} struct_0;\n\nint sub_405ad0()\n{\n    struct_1 *v1;  // rsi\n    struct_2 *v2;  // rbp\n    struct_1 *v3;  // rbx\n    unsigned long long v4;  // cc_dep1\n    struct_0 *v6;  // rdi\n    char v7;  // dl\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned int v10;  // eax\n    unsigned int *v11;  // r12\n    unsigned int|unsigned long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    char v16;  // cc_dep1\n    unsigned long long *v17;  // rdi\n    unsigned long long v19;  // rcx\n    unsigned long v20;  // d\n\n    v2 = &v1->field_78;\n    v3 = v1;\n    v4 = v1->field_58;\n    if ((((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0) && ((char)*((int *)&v6->field_48) & 2) == 0 && v7 == 0)\n    {\n        v9 = __fxstatat(0x1, v6->field_2c, v1->field_30, (unsigned int)v2, 0x100);\n        if (v9 != 0)\n        {\n            v12 = (unsigned int)*(__errno_location());\n        }\n    }\n    if (v7 != 0 || ((char)*((int *)&v6->field_48) & 2) != 0 || v4 == 0 && ((char)*((int *)&v6->field_48) & 1) != 0)\n    {\n        v8 = __xstat(0x1);\n    }\n    if (v8 != 0 && (v4 == 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 2) != 0) && (v7 != 0 || ((char)*((int *)&v6->field_48) & 1) != 0 || ((char)*((int *)&v6->field_48) & 2) != 0))\n    {\n        v11 = __errno_location();\n        v12 = *(v11);\n        if ((unsigned int)v12 == 2)\n        {\n            v12 = __lxstat(0x1, v3->field_30, (unsigned int)v2);\n            if (v12 == 0)\n            {\n                *(v11) = 0;\n                return 13;\n            }\n            v12 = *(v11);\n        }\n    }\n    if (v8 == 0 && v7 != 0 || v8 == 0 && ((char)*((int *)&v6->field_48) & 2) != 0 || v4 == 0 && v8 == 0 && ((char)*((int *)&v6->field_48) & 1) != 0 || v9 == 0 && v7 == 0 && ((char)*((int *)&v6->field_48) & 1) == 0 && ((char)*((int *)&v6->field_48) & 2) == 0 || v9 == 0 && v7 == 0 && ((char)*((int *)&v6->field_48) & 2) == 0 && v4 != 0)\n    {\n        v10 = v3->field_90 & 0xf000;\n        if (!(((unsigned short)v3->field_90 & 0xf000) != 0x4000))\n        {\n            v13 = v3->field_88;\n            if (v3->field_88 > 1 && v3->field_58 > 0)\n            {\n                v15 = ((v6->field_48 & 32) == 0? v13 - 2 : v13);\n            }\n            if (v3->field_88 <= 1 || v3->field_58 <= 0)\n            {\n                v15 = -1;\n            }\n            v16 = v3->field_108;\n            v3->field_68 = v15;\n            v14 = 1;\n            if (v16 == 46 && (v3->field_109 == 0 || ((unsigned int)*((int *)&v3->field_108) & 0xffff00) == 0x2e00))\n            {\n                v14 = (0 - (unsigned int)(char)(v3->field_58 < 1) & -0x4) + 5;\n            }\n        }\n        else if (v10 != 0xa000)\n        {\n            v14 = (unsigned long long)(char)(v10 == 0x8000) * 5 + 3;\n        }\n        else\n        {\n            v14 = 12;\n        }\n        return v14;\n    }\n    if ((v7 == 0 || v8 != 0) && (((char)*((int *)&v6->field_48) & 2) == 0 || v8 != 0) && (v7 == 0 || (unsigned int)v12 != 2 || v12 != 0) && (((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0 || v8 != 0) && (((char)*((int *)&v6->field_48) & 2) == 0 || (unsigned int)v12 != 2 || v12 != 0) && (v4 == 0 || v9 != 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 2) != 0) && (((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0 || (unsigned int)v12 != 2 || v12 != 0) && (v9 != 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 1) != 0 || ((char)*((int *)&v6->field_48) & 2) != 0))\n    {\n        *((unsigned long *)&v3->field_40) = v12;\n        v17 = &v2->padding_0[8] & -8;\n        v3->field_78 = 0;\n        v2->field_88 = 0;\n        for (v19 = &((struct struct_2 *)&v2->padding_0[-1 * (&v2->padding_0[8] & -8)])[1] >> 3; v19 != 0; v17 = &v17[v20])\n        {\n            v19 -= 1;\n            *(v17) = 0;\n        }\n        return 10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4091e0",
            "funcStartAddr": "0x4091e0",
            "funcEndAddr": "0x40931c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4091e0()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long|unsigned long long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x40575a",
            "decompiledFuncCode": "int sub_405740()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_405990(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x4059bc",
            "decompiledFuncCode": "extern unsigned int g_40c76f;\nextern unsigned int g_60f260;\n\nint sub_405990()\n{\n    dcgettext(0x0, 0x40c76f, 0x5);\n    error(g_60f260, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_408e00",
            "funcStartAddr": "0x408e00",
            "funcEndAddr": "0x408f05",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_408e00()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_408dd0();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v8 != v1 && v1 != *(v11))\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_4093e0",
            "funcStartAddr": "0x4093e0",
            "funcEndAddr": "0x409439",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4093e0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_408dd0();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_404f70",
            "funcStartAddr": "0x404f70",
            "funcEndAddr": "0x404f7d",
            "decompiledFuncCode": "int sub_404f70()\n{\n}\n"
        },
        {
            "funcName": "sub_408ab0",
            "funcStartAddr": "0x408ab0",
            "funcEndAddr": "0x408ac6",
            "decompiledFuncCode": "int sub_408ab0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4089f0();\n}\n"
        },
        {
            "funcName": "sub_402fc0",
            "funcStartAddr": "0x402fc0",
            "funcEndAddr": "0x4032cd",
            "decompiledFuncCode": "int sub_402fc0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a020",
            "funcStartAddr": "0x40a020",
            "funcEndAddr": "0x40a574",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40c917;\nextern char g_60f4d8[2];\n\nint sub_40a020()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_60f4d8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40c917 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60f4d8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40c917;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v62 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v62;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40c917;\n                                        v10 = (tmp_10 == 0? &g_40c917 : tmp_10);\n                                        free(NULL);\n                                        sub_40a630();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v61 = (unsigned int)*(v61);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)((unsigned int)v61 != -1);\n                                    }\n                                }\n                                while (v61 != 10 && v62 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40c917 : tmp_10);\n                            sub_40a630();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_40c917;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40c917;\n            free(v17);\n        }\n        *((char *[2])&g_60f4d8[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_40c917 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x409580",
            "funcEndAddr": "0x4095a0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_409580()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_402fb0",
            "funcStartAddr": "0x402fb0",
            "funcEndAddr": "0x402fb8",
            "decompiledFuncCode": "int sub_402fb0()\n{\n}\n"
        },
        {
            "funcName": "sub_4063f0",
            "funcStartAddr": "0x4063f0",
            "funcEndAddr": "0x406494",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[104];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_1;\n\nint sub_4063f0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long long v1;  // rdx\n    struct_0 *v2;  // rbx\n    unsigned int v3;  // edi\n    unsigned long long v4;  // rax\n    unsigned long long v5[3];  // rbp\n    struct_1 *v6;  // r12\n    unsigned long long v7;  // rax\n\n    v2 = v1;\n    if (((unsigned short)v3 & 258) != 0)\n    {\n        v5 = malloc(0x18);\n        if (v5 != 0)\n        {\n            tmp_10 = v2->field_78;\n            v5[2] = v2;\n            v5[0] = tmp_10;\n            v5[1] = v2->field_80;\n            v6 = (unsigned long long)(unsigned int)sub_409d40();\n            if (v5 != v6)\n            {\n                free(v5);\n                if (v6 != 0)\n                {\n                    v7 = v6->field_10;\n                    v2->field_70 = 2;\n                    v2->field_0 = v7;\n                }\n            }\n        }\n        if ((v6 == 0 || v5 == 0) && (v5 == 0 || v5 != v6))\n        {\n            return 0;\n        }\n    }\n    else\n    {\n        v4 = sub_408be0();\n        if (v4 != 0)\n        {\n            v2->field_0 = v2;\n            v2->field_70 = 2;\n            return v4;\n        }\n    }\n    if ((v4 == 0 || ((unsigned short)v3 & 258) != 0) && (((unsigned short)v3 & 258) == 0 || v5 != 0) && (((unsigned short)v3 & 258) == 0 || v5 == v6 || v6 != 0))\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4097e0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x4098b0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4097e0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((v4[8] == 0 || v4[4] == 0 || *(v4) < v4[1]) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_405810",
            "funcStartAddr": "0x405810",
            "funcEndAddr": "0x405888",
            "decompiledFuncCode": "int sub_405810() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408a90",
            "funcStartAddr": "0x408a90",
            "funcEndAddr": "0x408aa5",
            "decompiledFuncCode": "int sub_408a90()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408420();\n}\n"
        },
        {
            "funcName": "sub_409f60",
            "funcStartAddr": "0x409f60",
            "funcEndAddr": "0x409f7b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    unsigned int field_c;\n    unsigned int field_10;\n    unsigned long long field_14;\n    char field_1c;\n} struct_0;\n\nint sub_409f60()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // esi\n    unsigned long v3;  // rax\n\n    *((long long *)&(&v1->field_10)[1]) = 0;\n    *(&((char *)&v1->field_14)[4]) = 1;\n    v1->field_0 = v2;\n    v1->field_4 = v2;\n    v1->field_8 = v2;\n    v1->field_c = v2;\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a82b",
            "decompiledFuncCode": "int sub_40a7f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40a830();\n    }\n}\n"
        },
        {
            "funcName": "sub_403510",
            "funcStartAddr": "0x403510",
            "funcEndAddr": "0x4035a9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60f358;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403510()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60f358 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405a90",
            "funcStartAddr": "0x405a90",
            "funcEndAddr": "0x405a9a",
            "decompiledFuncCode": "int sub_405a90()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4059d0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x405a11",
            "decompiledFuncCode": "int sub_4059d0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = fts_open();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    else if (*(__errno_location()) != 22)\n    {\n        sub_405990(); /* do not return */\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4035b0",
            "funcStartAddr": "0x4035b0",
            "funcEndAddr": "0x40368f",
            "decompiledFuncCode": "extern int512_t g_40b686;\nextern int512_t g_40b68a;\n\nint sub_4035b0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40a020();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40b686 : 4241041);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40b68a : 4241037);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4058a0",
            "funcStartAddr": "0x4058a0",
            "funcEndAddr": "0x4058ea",
            "decompiledFuncCode": "int sub_4058a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4050e0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x4050ea",
            "decompiledFuncCode": "int sub_4050e0()\n{\n}\n"
        },
        {
            "funcName": "sub_408b70",
            "funcStartAddr": "0x408b70",
            "funcEndAddr": "0x408bcc",
            "decompiledFuncCode": "int sub_408b70()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40a630();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405a70",
            "funcStartAddr": "0x405a70",
            "funcEndAddr": "0x405a7d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_405a70()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_4057e0",
            "funcStartAddr": "0x4057e0",
            "funcEndAddr": "0x405801",
            "decompiledFuncCode": "int sub_4057e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405990(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409170",
            "funcStartAddr": "0x409170",
            "funcEndAddr": "0x4091d2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_409170()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405907",
            "decompiledFuncCode": "int sub_4058f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_405740();\n}\n"
        },
        {
            "funcName": "sub_409d40",
            "funcStartAddr": "0x409d40",
            "funcEndAddr": "0x409d74",
            "decompiledFuncCode": "int sub_409d40()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_409ac0();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x405198",
            "decompiledFuncCode": "extern unsigned int g_40b67e;\n\nint sub_405150()\n{\n    char v0;  // [bp-0x98]\n    unsigned long v1;  // [bp-0x90]\n    unsigned long long v3[2];  // rax\n    unsigned long v4;  // rdi\n\n    v3 = __lxstat(0x1, 0x40b67e, (unsigned int)&v0);\n    if (v3 == 0)\n    {\n        v3[0] = v1;\n        v3[1] = *((long long *)&v0);\n        return v4;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405c80",
            "funcStartAddr": "0x405c80",
            "funcEndAddr": "0x405d72",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[16];\n    struct struct_2 *field_10;\n    char padding_18[32];\n    unsigned long long field_38;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405c80()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3[8];  // rdi\n    struct_1 *v4;  // rbp\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // rdi\n    unsigned long long v7[2];  // rdx\n    struct_0 *v8;  // rbx\n    unsigned long long v9[2];  // r8\n    unsigned long long v11[2];  // rdx\n    struct_0 *v12;  // rsi\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rdi\n    struct_0 *v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v8 = v5;\n    v6 = v3[2];\n    if (v4->field_38 < v1)\n    {\n        v4->field_38 = v1 + 40;\n        if (v1 + 40 <= 2305843009213693951)\n        {\n            v6 = realloc(v6, (v1 + 40) * 8);\n            if (v6 != 0)\n            {\n                v4->field_10 = &v6;\n            }\n            else\n            {\n                v6 = v4->field_10;\n            }\n        }\n        if (v6 == 0 || v1 + 40 > 2305843009213693951)\n        {\n            free(v6);\n            v4->field_10 = 0;\n            v4->field_38 = 0;\n            return v5;\n        }\n    }\n    if (v4->field_38 >= v1 || v1 + 40 <= 2305843009213693951 && v6 != 0)\n    {\n        v7 = v6;\n        if (v5 != 0)\n        {\n            do\n            {\n                v7 = &v7[1];\n                v7[-1] = v8;\n                v8 = v8->field_10;\n            }\n            while (v8 != 0);\n        }\n        qsort();\n        v9 = v4->field_10;\n        v11 = v4->field_10;\n        v12 = v4->field_10->field_0;\n        v13 = v2 - 1;\n        if (v2 == 1)\n        {\n            v15 = v4->field_10->field_0;\n        }\n        else\n        {\n            while (true)\n            {\n                v14 = v11[1];\n                v11 = &v11[1];\n                v12->field_10 = v14;\n                v13 -= 1;\n                if (v13 == 1)\n                {\n                    break;\n                }\n                v12 = *(v11);\n            }\n            v15 = v9[v2 + -1];\n        }\n        v15->field_10 = 0;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_4029b8",
            "funcStartAddr": "0x4029b8",
            "funcEndAddr": "0x4029f4",
            "decompiledFuncCode": "int sub_4029b8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405e60",
            "funcStartAddr": "0x405e60",
            "funcEndAddr": "0x405e89",
            "decompiledFuncCode": "int sub_405e60()\n{\n    unsigned long long v1;  // rax\n\n    while (true)\n    {\n        v1 = sub_409f80();\n        if (v1 == 0)\n        {\n            close(sub_409fd0());\n        }\n        else\n        {\n            return v1;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409d80",
            "funcStartAddr": "0x409d80",
            "funcEndAddr": "0x409f3f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_409d80()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned int|unsigned long|uint128_t|unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned int|unsigned long|uint128_t v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_408e00() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_408f20();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_4098c0() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_409f80",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x409f85",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    char field_1c;\n} struct_0;\n\nint sub_409f80()\n{\n    struct_0 *v1;  // rdi\n\n    return (unsigned long long)v1->field_1c;\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407cfc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    unsigned long long field_8;\n    char padding_10[56];\n    unsigned int field_48;\n    char field_49;\n} struct_0;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[56];\n    unsigned int field_48;\n    char field_49;\n} struct_3;\n\nint fts_children()\n{\n    struct_0 *v1;  // rdi\n    struct_3 *v2;  // rbx\n    unsigned int *v3;  // r13\n    unsigned int v4;  // esi\n    unsigned long long v6;  // rax\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v3 = __errno_location();\n    if ((v4 & -8193) == 0)\n    {\n        *(v3) = 0;\n        if (!((*(&((char *)&v1->field_48)[1]) & 64) == 0))\n        {\n            return 0;\n        }\n        else if (v1->field_0->field_70 != 9)\n        {\n            v8 = 0;\n            if (v1->field_0->field_70 == 1)\n            {\n                if (v1->field_8 != 0)\n                {\n                    sub_405e10();\n                }\n                if (v4 == 0x2000)\n                {\n                    v2->field_48 = v2->field_48 | 0x2000;\n                }\n                if (v1->field_0->field_58 == 0 && *(v1->field_0->field_30) != 47 && ((char)v1->field_48 & 4) == 0)\n                {\n                    v6 = sub_4061d0();\n                    v7 = v6;\n                    if ((unsigned int)v6 >= 0)\n                    {\n                        v2->field_8 = (unsigned int)sub_406540();\n                        if ((*(&((char *)&v2->field_48)[1]) & 2) == 0)\n                        {\n                            v10 = fchdir(v7);\n                            if (v10 == 0)\n                            {\n                                close(v7);\n                            }\n                            else\n                            {\n                                close(v7);\n                                v8 = 0;\n                                *(v3) = *(v3);\n                            }\n                        }\n                        else\n                        {\n                            sub_406030();\n                        }\n                        if (v10 == 0 || (*(&((char *)&v2->field_48)[1]) & 2) != 0)\n                        {\n                            v8 = v2->field_8;\n                        }\n                    }\n                    else\n                    {\n                        v1->field_8 = 0;\n                        v8 = 0;\n                    }\n                }\n                if (*(v1->field_0->field_30) == 47 || ((char)v1->field_48 & 4) != 0 || v1->field_0->field_58 != 0)\n                {\n                    v8 = sub_406540();\n                    v1->field_8 = v8;\n                }\n            }\n            return v8;\n        }\n        return v1->field_0->field_10;\n    }\n    *(v3) = 22;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4089f0",
            "funcStartAddr": "0x4089f0",
            "funcEndAddr": "0x408a46",
            "decompiledFuncCode": "extern unsigned int g_60f2d4;\nextern unsigned int g_60f2d8;\nextern unsigned int g_60f2dc;\nextern unsigned int g_60f4a0;\nextern unsigned int g_60f4a4;\nextern unsigned int g_60f4a8;\nextern unsigned long long g_60f4b0;\nextern unsigned long long g_60f4e8;\n\nint sub_4089f0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60f4a0 = g_60f2dc;\n    g_60f4a4 = g_60f2d8;\n    v1 = (unsigned int)v2;\n    v0 = &g_60f4a0;\n    g_60f2dc = g_60f4a0;\n    g_60f4e8 = g_60f4b0;\n    g_60f2d4 = g_60f4a8;\n    return sub_408420();\n}\n"
        },
        {
            "funcName": "sub_404fa0",
            "funcStartAddr": "0x404fa0",
            "funcEndAddr": "0x404faa",
            "decompiledFuncCode": "int sub_404fa0()\n{\n}\n"
        },
        {
            "funcName": "sub_404ac0",
            "funcStartAddr": "0x404ac0",
            "funcEndAddr": "0x404acf",
            "decompiledFuncCode": "extern int512_t g_60f460;\n\nint sub_404ac0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60f460 : v1));\n}\n"
        },
        {
            "funcName": "sub_404e70",
            "funcStartAddr": "0x404e70",
            "funcEndAddr": "0x404ed9",
            "decompiledFuncCode": "int sub_404e70()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4048e0();\n}\n"
        },
        {
            "funcName": "sub_407e00",
            "funcStartAddr": "0x407e00",
            "funcEndAddr": "0x4083fe",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40c7f0;\nextern unsigned int g_40c810;\nextern unsigned int g_40c840;\nextern unsigned int g_40c860;\nextern unsigned int g_40c890;\nextern unsigned long long stderr;\n\nint sub_407e00()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long *|unsigned long long v18;  // rbx\n    unsigned int|unsigned long|unsigned long long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40c7f0, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40c810, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v21 == 0) && (*(v18) == 0 || v22 == v16) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (v4 == 0 || v22 == v16) && (v1 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40c890, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40c860, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40c840, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "0x406f00",
            "funcEndAddr": "0x407270",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    char padding_18[88];\n    unsigned short field_70;\n} struct_0;\n\nextern unsigned long long g_10;\nextern unsigned long long g_30;\nextern unsigned long long g_58;\nextern unsigned short g_70;\nextern unsigned long long g_8;\nextern unsigned long long g_a8;\n\nint fts_open()\n{\n    void *|unsigned long long v0;  // [bp-0x50]\n    char v1;  // [bp-0x42]\n    char v2;  // [bp-0x41]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rbp\n    unsigned long long *v7;  // rdi\n    unsigned long long v9;  // rbx\n    unsigned long v10;  // rdx\n    unsigned int v11;  // eax\n    unsigned int v12;  // ah\n    char *v14;  // rdi\n    unsigned long long *v15;  // r15\n    unsigned long long v16;  // r12\n    unsigned long long [2]|unsigned long long * v17;  // r15\n    void *v18;  // rax\n    unsigned long long v19[14];  // rcx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // rbp\n    unsigned long long v22;  // rax\n    struct_0 *v24;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rdi\n    unsigned long long v30;  // rax\n\n    if (((unsigned int)v5 & -0x2000) == 0)\n    {\n        v6 = v5;\n        if (((unsigned short)v5 & 516) != 516 && (v5 & 18) != 0)\n        {\n            v9 = calloc(0x80, 0x1);\n            if (v9 != 0)\n            {\n                *((unsigned long *)(v9 + 64)) = v10;\n                if (((char)v5 & 2) == 0)\n                {\n                    *((unsigned int *)(v9 + 72)) = v5;\n                }\n                else\n                {\n                    v11 = v6;\n                    v12 = (char)v6 % 0x100 & 253;\n                    *((int *)(v9 + 72)) = rax<4> | 4;\n                }\n                v14 = *(v7);\n                *((int *)(v9 + 44)) = -100;\n                if (v14 != 0)\n                {\n                    v15 = v7;\n                    v16 = 0;\n                    do\n                    {\n                        v16 = (v16 < strlen(v14)? strlen(v14) : v16);\n                        v15 += &g_8;\n                        v14 = *(v15);\n                    }\n                    while (*(v15) != 0);\n                }\n                v1 = sub_406100();\n                if (v1 != 0)\n                {\n                    v17 = *(v15);\n                    if (*(v15) != 0)\n                    {\n                        v18 = sub_405d80();\n                        v19 = v18;\n                        v0 = v18;\n                        if (v18 != 0)\n                        {\n                            v17 = *(v15);\n                            *((long long *)(v19 + &g_58)) = -1;\n                            v19[13] = -1;\n                        }\n                    }\n                    else\n                    {\n                        v0 = 0;\n                    }\n                    if (*(v15) == 0 || v18 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            v1 = (unsigned int)((unsigned int)*((int *)(v9 + 72)) >> &g_8) & 1;\n                        }\n                        if ((*(v15) != 0 || v10 != 0) && v17 != 0)\n                        {\n                            v3 = 0;\n                            v20 = 0;\n                            v21 = 0;\n                            v2 = ((unsigned int)v5 % 0x1000 ^ 1) & 1;\n                            while (true)\n                            {\n                                v22 = strlen(v17);\n                                if (v20 == 0)\n                                {\n                                    break;\n                                }\n                                *((long long *)&((char *)&g_58)[v20]) = 0;\n                                *((void **)&((char *)&g_8)[v20]) = v0;\n                                *((unsigned long long *)&((char *)&g_30)[v20]) = v20 + 264;\n                                if (v20 != 0 && v1 != 0)\n                                {\n                                    *((long long *)&((char *)&g_a8)[v20]) = 2;\n                                    *((unsigned long long **)&((char *)&g_70)[v20]) = &g_8;\n                                    if (v10 == 0)\n                                    {\n                                        *((long long *)&((char *)&g_10)[v20]) = 0;\n                                    }\n                                }\n                                if (v20 == 0 || v1 == 0)\n                                {\n                                    *((unsigned short *)&((char *)&g_70)[v20]) = sub_405ad0();\n                                    if (v10 == 0)\n                                    {\n                                        *((long long *)&((char *)&g_10)[v20]) = 0;\n                                        if (v20 == 0)\n                                        {\n                                            v3 = v20;\n                                        }\n                                    }\n                                }\n                                if (v10 != 0)\n                                {\n                                    *((unsigned long long *)&((char *)&g_10)[v20]) = v20;\n                                    v20 = (unsigned int)sub_405d80();\n                                }\n                                if (v10 == 0 && (v20 != 0 || v20 != 0) && (v20 != 0 || v1 != 0))\n                                {\n                                    v3 = v20;\n                                    g_10 = v20;\n                                }\n                                if (v21 <= 1 || v10 == 0)\n                                {\n                                    break;\n                                }\n                                v21 += 1;\n                                v17 = *((long long *)(v20 + v21 * &g_8));\n                                v20 = (unsigned int)sub_405c80();\n                            }\n                            if (v15[v21] == 0 && v20 != 0)\n                            {\n                                v24 = sub_405d80();\n                                *((struct_0 **)v9) = v24;\n                            }\n                            else\n                            {\n                                sub_405e10();\n                                free(v0);\n                            }\n                        }\n                        if ((*(v15) == 0 || v17 == 0) && (v10 == 0 || v17 == 0))\n                        {\n                            v20 = 0;\n                        }\n                        if ((*(v15) == 0 || v17 == 0 || v24 != 0) && (v10 == 0 || v17 == 0 || v24 != 0))\n                        {\n                            v24 = sub_405d80();\n                            *((struct_0 **)v9) = v24;\n                        }\n                        if (v24 != 0)\n                        {\n                            *((unsigned long long *)(v24 + &g_10)) = v20;\n                            *((unsigned long long **)(v24 + &g_70)) = &g_8;\n                            v25 = sub_406170();\n                            if (v25 != 0)\n                            {\n                                if (((unsigned short)*((int *)(v9 + 72)) & 516) == 0)\n                                {\n                                    v27 = sub_4061d0();\n                                    *((unsigned long long *)(v9 + 40)) = v27;\n                                    if (v27 < 0)\n                                    {\n                                        *((int *)(v9 + 72)) = *((int *)(v9 + 72)) | 4;\n                                    }\n                                }\n                                sub_409f60();\n                            }\n                        }\n                        if (v25 == 0 || v24 == 0)\n                        {\n                            sub_405e10();\n                            free(v0);\n                        }\n                    }\n                    if ((v18 == 0 || v25 == 0 || v24 == 0) && (v25 == 0 || v24 == 0 || *(v15) != 0))\n                    {\n                        free(*((long long *)(v9 + 32)));\n                    }\n                }\n                if (v25 == 0 || v24 == 0 || v1 == 0 || v18 == 0 && *(v15) != 0)\n                {\n                    v28 = v9;\n                    v9 = 0;\n                    free(v28);\n                }\n            }\n        }\n    }\n    if (((unsigned short)v5 & 516) == 516 || (v5 & 18) == 0 || ((unsigned int)v5 & -0x2000) != 0)\n    {\n        v9 = 0;\n        *((unsigned long long **)&__errno_location()) = &g_10;\n    }\n    v30 = v9;\n    return v30;\n}\n"
        },
        {
            "funcName": "sub_405ea0",
            "funcStartAddr": "0x405ea0",
            "funcEndAddr": "0x405fa9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    struct struct_1 *field_50;\n    char padding_58[32];\n    unsigned long long field_78;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_405ea0()\n{\n    char|unsigned long long v0;  // [bp-0x98]\n    unsigned long long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rbx\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // r12\n    struct_2 *v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n\n    v2 = v4;\n    v1 = v5;\n    if ((v6->field_50->field_49 & 2) != 0)\n    {\n        if (v6->field_50->field_50 == 0)\n        {\n            v7 = (unsigned int)sub_4095a0();\n            v6->field_50->field_50 = v7;\n            if (v7 == 0)\n            {\n                v9 = fstatfs(v6->field_50->field_2c, (unsigned int)&v0);\n            }\n        }\n        if (v6->field_50->field_50 != 0 || v7 != 0)\n        {\n            v0 = v6->field_78;\n            v8 = sub_409330();\n            if (v8 != 0)\n            {\n                v14 = v8->field_8;\n            }\n            else\n            {\n                v10 = fstatfs(v6->field_50->field_2c, (unsigned int)&v0);\n                if (v10 == 0)\n                {\n                    v13 = malloc(0x10);\n                    v14 = v0;\n                    if (v13 != 0)\n                    {\n                        v15 = v6->field_78;\n                        v13[1] = v0;\n                        v13[0] = v15;\n                        v16 = sub_409d40();\n                        if (!(v16 != 0))\n                        {\n                            free(v13);\n                            v14 = v0;\n                        }\n                        else if (v13 != v16)\n                        {\n                            abort(); /* do not return */\n                        }\n                    }\n                }\n            }\n            if ((v10 == 0 || v8 != 0) && (v13 == 0 || v16 == 0 || v8 != 0))\n            {\n                v19 = v1;\n                v20 = v2;\n                return v14;\n            }\n        }\n    }\n    if ((v6->field_50->field_49 & 2) == 0 || v6->field_50->field_50 == 0 && v7 == 0 && v9 != 0 || v8 == 0 && v6->field_50->field_50 != 0 && v10 != 0 || v8 == 0 && v7 != 0 && v10 != 0)\n    {\n        v11 = v1;\n        v12 = v2;\n        return 0;\n    }\n    if (v9 == 0 && v6->field_50->field_50 == 0 && v7 == 0 && (v6->field_50->field_49 & 2) != 0 || v8 == 0 && v13 == v16 && v10 == 0 && v13 != 0 && v16 != 0 && (v6->field_50->field_49 & 2) != 0 && (v6->field_50->field_50 != 0 || v7 != 0))\n    {\n        v17 = v1;\n        v18 = v2;\n        return v0;\n    }\n}\n"
        },
        {
            "funcName": "sub_408be0",
            "funcStartAddr": "0x408be0",
            "funcEndAddr": "0x408c54",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_408be0()\n{\n    void tmp_9;  // tmp #9\n    unsigned long v0;  // [bp-0x8]\n    struct_0 *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rax\n    unsigned long long v5[2];  // rsi\n\n    if (v2->field_18 == 9827862)\n    {\n        v3 = v2->field_10;\n        if (v2->field_10 != 0)\n        {\n            if (v2->field_0 == v5[1] && *(v5) == v2->field_8)\n            {\n                return 1;\n            }\n            if (*(v5) != v2->field_8 || v2->field_0 != v5[1])\n            {\n                v2->field_10 = v2->field_10 + 1;\n                if ((v3 + 1 & v3) != 0)\n                {\n                    return 0;\n                }\n                else if (v2->field_10 + 1 == 0)\n                {\n                    return 1;\n                }\n            }\n        }\n        else\n        {\n            v2->field_10 = 1;\n        }\n        if (v2->field_10 == 0 || (v3 + 1 & v3) == 0 && *(v5) != v2->field_8 && v2->field_10 + 1 != 0 || (v3 + 1 & v3) == 0 && v2->field_0 != v5[1] && v2->field_10 + 1 != 0)\n        {\n            tmp_9 = *(v5);\n            *((unsigned long long [2])&v2->field_0) = v5[1];\n            v2->field_8 = tmp_9;\n            return 0;\n        }\n    }\n    else\n    {\n        v0 = v4;\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408ad0",
            "funcStartAddr": "0x408ad0",
            "funcEndAddr": "0x408ae8",
            "decompiledFuncCode": "int sub_408ad0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408420();\n}\n"
        },
        {
            "funcName": "sub_404b70",
            "funcStartAddr": "0x404b70",
            "funcEndAddr": "0x404be2",
            "decompiledFuncCode": "extern int512_t g_60f460;\n\nint sub_404b70()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60f460 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4036b0();\n}\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e6d",
            "decompiledFuncCode": "int sub_404e00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4048e0();\n}\n"
        },
        {
            "funcName": "sub_408bd0",
            "funcStartAddr": "0x408bd0",
            "funcEndAddr": "0x408be0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_408bd0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rax\n\n    v1->field_10 = 0;\n    v1->field_18 = 9827862;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_402d80",
            "funcStartAddr": "0x402d80",
            "funcEndAddr": "0x402d88",
            "decompiledFuncCode": "extern char g_60f348;\n\nint sub_402d80()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60f348 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408dc0",
            "funcStartAddr": "0x408dc0",
            "funcEndAddr": "0x408dc7",
            "decompiledFuncCode": "int sub_408dc0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x405983",
            "decompiledFuncCode": "int sub_405970()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_404ce0",
            "funcStartAddr": "0x404ce0",
            "funcEndAddr": "0x404cea",
            "decompiledFuncCode": "int sub_404ce0()\n{\n}\n"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "0x4072a0",
            "funcEndAddr": "0x4073ee",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    char padding_30[24];\n    unsigned int field_48;\n    char padding_4c[4];\n    unsigned long long field_50;\n    unsigned long long field_58;\n} struct_0;\n\nint fts_close()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned long long v3[12];  // rdi\n    unsigned long long v4[12];  // rbx\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned int *v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    void *v16;  // rdi\n    unsigned long long v18;  // rax\n\n    v2 = v1;\n    v3 = v1->field_0;\n    if (v3 != 0)\n    {\n        if ((char)(v3[11] - 0 >> 63))\n        {\n            v4 = v3;\n        }\n        else\n        {\n            while (true)\n            {\n                v4 = v3[2];\n                if (v3[2] != 0)\n                {\n                    free(v3);\n                    v3 = v4;\n                    if ((char)(v4[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v4 = v3[1];\n                    free(v3);\n                    v3 = v4;\n                    if ((char)(v4[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        free(v4);\n    }\n    if (v2->field_8 != 0)\n    {\n        sub_405e10();\n    }\n    free(v2->field_10);\n    free(v2->field_20);\n    v6 = v2->field_48;\n    if (((char)(v2->field_48 >> 8) & 2) != 0)\n    {\n        if (v2->field_2c >= 0)\n        {\n            v9 = close(v2->field_2c);\n            if (v9 != 0)\n            {\n                v12 = (unsigned int)*(__errno_location());\n            }\n        }\n    }\n    else\n    {\n        if ((v6 & 4) == 0)\n        {\n            v8 = fchdir(v2->field_28);\n            if (v8 == 0)\n            {\n                v10 = close(v2->field_28);\n                if (v10 != 0)\n                {\n                    v11 = __errno_location();\n                }\n            }\n            else\n            {\n                v11 = __errno_location();\n                v12 = *(v11);\n                v13 = close(v2->field_28);\n            }\n            if (((unsigned int)v12 == 0 || v8 == 0) && (v8 == 0 || v13 != 0) && (v8 != 0 || v10 != 0))\n            {\n                v12 = *(v11);\n            }\n        }\n    }\n    if (v9 == 0 && ((char)(v2->field_48 >> 8) & 2) != 0 || ((char)(v2->field_48 >> 8) & 2) == 0 && (v6 & 4) != 0 || v2->field_2c < 0 && ((char)(v2->field_48 >> 8) & 2) != 0 || ((char)(v2->field_48 >> 8) & 2) == 0 && v8 == 0 && v10 == 0)\n    {\n        v12 = 0;\n    }\n    sub_405e60();\n    if (v2->field_50 != 0)\n    {\n        sub_4097e0();\n    }\n    v16 = v2->field_58;\n    if (!(((unsigned short)v2->field_48 & 258) != 0))\n    {\n        free(v16);\n    }\n    else if (v16 != 0)\n    {\n        sub_4097e0();\n    }\n    free(v2);\n    if ((unsigned int)v12 != 0)\n    {\n        *(__errno_location()) = v12;\n        v12 = -18446744069414584321;\n    }\n    v18 = v12;\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_405090",
            "funcStartAddr": "0x405090",
            "funcEndAddr": "0x405099",
            "decompiledFuncCode": "int sub_405090()\n{\n}\n"
        },
        {
            "funcName": "sub_407d20",
            "funcStartAddr": "0x407d20",
            "funcEndAddr": "0x407df5",
            "decompiledFuncCode": "int sub_407d20()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_408cb0",
            "funcStartAddr": "0x408cb0",
            "funcEndAddr": "0x408d06",
            "decompiledFuncCode": "int sub_408cb0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404b40",
            "funcStartAddr": "0x404b40",
            "funcEndAddr": "0x404b6b",
            "decompiledFuncCode": "extern char g_60f460;\n\nint sub_404b40()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60f460 : v2);\n    *((int *)(tmp_11? &g_60f460 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60f460;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60f460;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40a890",
            "funcStartAddr": "0x40a890",
            "funcEndAddr": "0x40a89e",
            "decompiledFuncCode": "int sub_40a890()\n{\n}\n"
        },
        {
            "funcName": "sub_408db0",
            "funcStartAddr": "0x408db0",
            "funcEndAddr": "0x408dc0",
            "decompiledFuncCode": "int sub_408db0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_4098c0",
            "funcStartAddr": "0x4098c0",
            "funcEndAddr": "0x409ab0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_4098c0()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_408d10();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_408fa0();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_408fa0();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_408fa0();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v0 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_10 != *((long long *)&v2) && v11->field_28->field_10 != 0)\n    {\n        v21 = 0;\n    }\n    if ((char)v21 != 0 || v11->field_10 != *((long long *)&v2))\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401c40",
            "funcEndAddr": "0x40289a",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[44];\n    unsigned int field_2c;\n} struct_2;\n\ntypedef struct struct_1 {\n    char padding_0[56];\n    unsigned long long field_38;\n    char padding_40[48];\n    unsigned short field_70;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n    char padding_88[8];\n    unsigned int field_90;\n} struct_0;\n\nextern unsigned int g_40a9e4;\nextern unsigned int g_40aa1f;\nextern unsigned int g_40aa38;\nextern unsigned int g_40aa49;\nextern unsigned int g_40aa83;\nextern unsigned int g_40aa9e;\nextern unsigned int g_40aabb;\nextern unsigned int g_40afa0;\nextern unsigned int g_40b088;\nextern unsigned int g_40b0a8;\nextern unsigned int g_40b0d0;\nextern unsigned int g_40b190;\nextern unsigned int g_40b1c0;\nextern unsigned int g_40b200;\nextern unsigned int g_40b238;\nextern unsigned int g_40b270;\nextern unsigned int g_40b298;\nextern unsigned int g_40b2d0;\nextern unsigned int g_40b310;\nextern unsigned int g_40c917;\nextern unsigned int g_60f250;\nextern unsigned int g_60f2dc;\nextern unsigned long long g_60f330[2];\nextern char g_60f338;\nextern char g_60f339;\nextern char g_60f33a;\nextern unsigned int g_60f33c;\nextern unsigned long long g_60f340;\nextern unsigned long long g_60f4e8;\n\nint main()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x128]\n    unsigned long long v1;  // [bp-0x120]\n    unsigned int v2;  // [bp-0x110]\n    unsigned int v3;  // [bp-0x10c]\n    unsigned int|unsigned long|void *|unsigned long long v4;  // [bp-0x108]\n    unsigned long|void * v5;  // [bp-0x100]\n    unsigned int *|unsigned long v6;  // [bp-0xf8]\n    unsigned long v7;  // [bp-0xf0]\n    unsigned long|unsigned long long v8;  // [bp-0xe0]\n    char v9;  // [bp-0xca]\n    char v10;  // [bp-0xc8]\n    char v11;  // [bp-0xbe]\n    unsigned int v12;  // [bp-0xb0]\n    unsigned long long v14;  // r15\n    unsigned long long v15;  // r14\n    unsigned long long v16;  // r13\n    unsigned long long *v17;  // rsi\n    unsigned long long *v18;  // rbx\n    unsigned long long v21;  // rax\n    unsigned int v22;  // eax\n    unsigned long long v23;  // r12\n    unsigned long long v26;  // rcx\n    unsigned long long v27;  // r9\n    unsigned long long *v30;  // rax\n    unsigned long long *v32;  // rdx\n    unsigned long v34;  // rdi\n    unsigned long v36;  // rsi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbx\n    unsigned long long v39;  // rbp\n    unsigned long long v41;  // r12b\n    unsigned long long v42;  // cc_dep1\n    struct_2 *v44;  // rbp\n    unsigned long long v45;  // rbx\n    char *v46;  // r12\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rax\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // r15\n    unsigned long long v53;  // r12\n    unsigned long long v54;  // r15\n    unsigned int v56;  // r15d\n    unsigned int|unsigned long v57;  // rax\n    unsigned long long v58;  // r12\n    unsigned long long v59;  // r15\n    unsigned long long v60;  // r12\n    unsigned int|unsigned long long v61;  // r15\n    unsigned long long v62;  // r12\n    unsigned long long v64;  // rax\n    unsigned long long v65;  // r15\n    unsigned int v67;  // eax\n    unsigned long long v70;  // r15\n    unsigned long long v85;  // r12\n    unsigned long long v87;  // ebx\n    struct_1 *v88;  // rax\n    struct_0 *v89;  // r13\n    unsigned long long v91;  // rbx\n\n    v14 = 0;\n    v15 = 0;\n    v16 = 0;\n    v23 = 0;\n    v18 = v17;\n    v8 = 0;\n    sub_403510();\n    setlocale(0x6, 0x40c917);\n    bindtextdomain(0x40a9e4, 0x40afa0);\n    textdomain(0x40a9e4);\n    sub_40a910();\n    g_60f338 = 0;\n    g_60f339 = 0;\n    g_60f33a = 0;\n    while (true)\n    {\n        v21 = sub_408a70();\n        if ((unsigned int)v21 == -1)\n        {\n            if (!(v14 != 0))\n            {\n                v30 = (long long)(int)g_60f2dc;\n                if (v15 != 0)\n                {\n                    if ((unsigned int)v34 <= g_60f2dc)\n                    {\n                        v32 = (long long)(int)g_60f2dc;\n                    }\n                }\n                else\n                {\n                    v32 = (char *)v30 + 1;\n                    v15 = *((long long *)((char *)v17 + 0x8 * v30));\n                    g_60f2dc = (unsigned int)v30 + 1;\n                }\n                if (v15 == 0 && (unsigned int)(unsigned long long *)&((char *)v30)[1] < (unsigned int)v34 || v15 != 0 && (unsigned int)v34 > g_60f2dc)\n                {\n                    g_60f340 = (unsigned int)sub_402fc0();\n                    if (g_60f340 != 0)\n                    {\n                        g_60f33c = umask(0x0);\n                    }\n                    else\n                    {\n                        v38 = (unsigned int)sub_405130();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40aa38, 0x5));\n                        sub_4029c0(); /* do not return */\n                    }\n                }\n                if (*((long long *)&((char *)((char *)v17 + 0x8 * v32))[-8]) == v15 && (v15 == 0 || (unsigned int)v34 <= g_60f2dc) && (v15 != 0 || (unsigned int)(unsigned long long *)&((char *)v30)[1] >= (unsigned int)v34) && (v15 != 0 || v17[(long long)(int)g_60f2dc] != 0))\n                {\n                    v37 = (unsigned int)sub_405130();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40aa1f, 0x5));\n                }\n            }\n            else if (!(v15 == 0))\n            {\n                v36 = \"cannot combine mode and --reference options\";\n            }\n            else if ((unsigned int)v34 > g_60f2dc)\n            {\n                g_60f340 = (unsigned int)sub_403330();\n                if (g_60f340 == 0)\n                {\n                    v39 = (unsigned int)sub_404ee0();\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40b088, 0x5));\n                }\n            }\n            if (g_60f340 != 0 && (v15 == 0 || v14 == 0) && (v15 == 0 || (unsigned int)v34 > g_60f2dc) && (v14 == 0 || (unsigned int)v34 > g_60f2dc) && ((unsigned int)(unsigned long long *)&((char *)v30)[1] < (unsigned int)v34 || v15 != 0 || v14 != 0))\n            {\n                v41 = v23 & g_60f33a;\n                v6 = __errno_location();\n                v42 = v41;\n                if ((char)v42 == 0)\n                {\n                    g_60f330[0] = 0;\n                }\n                else\n                {\n                    g_60f330[0] = (unsigned int)sub_405150();\n                    if (g_60f330 == 0)\n                    {\n                        v45 = (unsigned int)sub_404ee0();\n                        error(0x1, *(v6), (unsigned long long)dcgettext(0x0, 0x40b088, 0x5));\n                    }\n                }\n                if ((char)v42 == 0 || g_60f330 != 0)\n                {\n                    v87 = 1;\n                    v44 = (unsigned long long)(unsigned int)sub_4059d0();\n                    v5 = stack_base + -199;\n                    v88 = fts_read();\n                    v89 = v88;\n                    if (v88 != 0)\n                    {\n                        while (true)\n                        {\n                            v46 = v88->field_38;\n                            if ((unsigned long long)v88->field_70 << 48 <= 0xd000000000000)\n                            {\n                                v47 = v88->field_70;\n                                /* goto *((long long *)(v47 * 8 + 4240192)); */\n                                if (*((long long *)(v47 * 8 + 4240192)) == 4202778)\n                                {\n                                    v48 = sub_405a20();\n                                    if (v48 != 0)\n                                    {\n                                        v61 = 0;\n                                        v53 = (unsigned int)sub_404fb0();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b0d0, 0x5));\n                                    }\n                                }\n                                if (*((long long *)(v47 * 8 + 4240192)) == 4202474)\n                                {\n                                    v61 = 1;\n                                }\n                                if (*((long long *)(v47 * 8 + 4240192)) == 4203072)\n                                {\n                                    if (v89->field_58 == 0 && v89->field_20 == 0)\n                                    {\n                                        v89->field_20 = 1;\n                                        v61 = 1;\n                                        fts_set();\n                                    }\n                                    if (g_60f339 == 0 && (v89->field_58 != 0 || v89->field_20 != 0))\n                                    {\n                                        v54 = (unsigned int)sub_404ee0();\n                                    }\n                                }\n                                if (g_60f339 == 0 && *((long long *)(v47 * 8 + 4240192)) == 4202566)\n                                {\n                                    v51 = (unsigned int)sub_404ee0();\n                                }\n                                if (*((long long *)(v47 * 8 + 4240192)) == 4203004 && g_60f339 == 0)\n                                {\n                                    v52 = (unsigned int)sub_404ee0();\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b0a8, 0x5));\n                                }\n                                if (*((long long *)(v47 * 8 + 4240192)) == 4203160 && g_60f339 == 0)\n                                {\n                                    sub_404fb0();\n                                    error(0x0, v89->field_40, \"%s\");\n                                }\n                                if (g_60f339 == 0 && (*((long long *)(v47 * 8 + 4240192)) == 4202566 || *((long long *)(v47 * 8 + 4240192)) == 4203072) && (*((long long *)(v47 * 8 + 4240192)) == 4202566 || v89->field_58 != 0 || v89->field_20 != 0))\n                                {\n                                    error(0x0, v89->field_40, (unsigned long long)dcgettext(0x0, v17, 0x5));\n                                }\n                            }\n                            if (v89->field_78 == g_60f330[1] && v89->field_80 == *(g_60f330) && g_60f330 != 0 && (v48 == 0 || *((long long *)(v47 * 8 + 4240192)) == 4202797 || (unsigned long long)v88->field_70 << 48 > 0xd000000000000) && (*((long long *)(v47 * 8 + 4240192)) == 4202778 || *((long long *)(v47 * 8 + 4240192)) == 4202797 || (unsigned long long)v88->field_70 << 48 > 0xd000000000000))\n                            {\n                                if (strcmp(v46, \"/\") == 0)\n                                {\n                                    v58 = (unsigned int)sub_404ee0();\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b190, 0x5));\n                                }\n                                else\n                                {\n                                    v59 = (unsigned int)sub_404e00();\n                                    v60 = (unsigned int)sub_404e00();\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b1c0, 0x5));\n                                }\n                                v61 = 0;\n                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b200, 0x5));\n                                fts_set();\n                                fts_read();\n                            }\n                            if (g_60f330 == 0 && *((long long *)(v47 * 8 + 4240192)) == 4202797 || g_60f330 == 0 && (unsigned long long)v88->field_70 << 48 > 0xd000000000000 || *((long long *)(v47 * 8 + 4240192)) == 4202797 && v89->field_78 != g_60f330[1] || *((long long *)(v47 * 8 + 4240192)) == 4202797 && v89->field_80 != *(g_60f330) || v48 == 0 && *((long long *)(v47 * 8 + 4240192)) == 4202778 && g_60f330 == 0 || v89->field_78 != g_60f330[1] && (unsigned long long)v88->field_70 << 48 > 0xd000000000000 || v89->field_80 != *(g_60f330) && (unsigned long long)v88->field_70 << 48 > 0xd000000000000 || v48 == 0 && *((long long *)(v47 * 8 + 4240192)) == 4202778 && v89->field_78 != g_60f330[1] || v48 == 0 && *((long long *)(v47 * 8 + 4240192)) == 4202778 && v89->field_80 != *(g_60f330))\n                            {\n                                v4 = v89->field_30;\n                                v56 = v89->field_90 & 0xf000;\n                                v3 = v89->field_90;\n                                v2 = sub_403390();\n                                if (v56 != 0xa000)\n                                {\n                                    v57 = fchmodat(v44->field_2c, v4);\n                                    if (v57 == 0)\n                                    {\n                                        if (g_60f250 != 2)\n                                        {\n                                            v57 = v2;\n                                            if (((char)(v2 >> 8) & 14) != 0)\n                                            {\n                                                v64 = __fxstatat(0x1, v44->field_2c, v4, (unsigned int)&v10, 0x0);\n                                                if (v64 == 0)\n                                                {\n                                                    v57 = v12;\n                                                }\n                                                else if (g_60f339 == 0)\n                                                {\n                                                    v70 = (unsigned int)sub_404ee0();\n                                                    error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x40aa9e, 0x5));\n                                                }\n                                            }\n                                            if (v64 == 0 || ((char)(v2 >> 8) & 14) == 0)\n                                            {\n                                                v67 = v57 ^ v3;\n                                                if (((unsigned short)v67 & 4095) != 0)\n                                                {\n                                                    sub_402e30();\n                                                    v9 = 0;\n                                                    sub_402e30();\n                                                    v11 = 0;\n                                                    sub_404ee0();\n                                                    v1 = 4;\n                                                    v0 = stack_base + -211;\n                                                    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b298, 0x5));\n                                                }\n                                            }\n                                            if (g_60f250 == 0 && (((unsigned short)v67 & 4095) == 0 || v64 != 0) && (((unsigned short)v67 & 4095) == 0 || ((char)(v2 >> 8) & 14) != 0))\n                                            {\n                                                sub_402e30();\n                                                v9 = 0;\n                                                sub_402e30();\n                                                v11 = 0;\n                                                sub_404ee0();\n                                                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b310, 0x5));\n                                            }\n                                        }\n                                        v61 = g_60f338;\n                                        if (g_60f338 != 0 && (!((int)(stack_base)[-264]) & v2) != 0)\n                                        {\n                                            v4 = sub_403390();\n                                            v61 = 0;\n                                            sub_402e30();\n                                            sub_402e30();\n                                            v11 = 0;\n                                            v9 = 0;\n                                            v85 = (unsigned int)sub_404fb0();\n                                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b270, 0x5));\n                                        }\n                                    }\n                                    else if (g_60f339 == 0)\n                                    {\n                                        v65 = (unsigned int)sub_404ee0();\n                                        error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x40aa83, 0x5));\n                                    }\n                                }\n                                else if (g_60f250 == 0)\n                                {\n                                    v61 = 1;\n                                    v62 = (unsigned int)sub_404ee0();\n                                    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b238, 0x5));\n                                }\n                            }\n                            if (...)\n                            {\n                                if (g_60f250 == 2 || g_60f250 != 0)\n                                {\n                                    v61 = 0;\n                                }\n                                if (g_60f250 == 0)\n                                {\n                                    sub_402e30();\n                                    v9 = 0;\n                                    sub_402e30();\n                                    v11 = 0;\n                                    sub_404ee0();\n                                    v1 = 5;\n                                    v61 = 0;\n                                    v0 = stack_base + -211;\n                                    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b2d0, 0x5));\n                                }\n                            }\n                            if (...)\n                            {\n                                v61 = 1;\n                            }\n                            if (...)\n                            {\n                                fts_set();\n                            }\n                            v87 &= v61;\n                            v88 = fts_read();\n                            v89 = v88;\n                            if (v88 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (*(v6) != 0)\n                    {\n                        v87 = g_60f339;\n                        if (g_60f339 != 0)\n                        {\n                            v87 = 0;\n                        }\n                        else\n                        {\n                            error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x40aa49, 0x5));\n                        }\n                    }\n                    if (fts_close() != 0)\n                    {\n                        v87 = 0;\n                        error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x40aabb, 0x5));\n                    }\n                    v91 = v87 ^ 1;\n                    return v91;\n                }\n            }\n        }\n        else if ((unsigned int)v21 != 99)\n        {\n            if (v21 > 99)\n            {\n                if ((unsigned int)v21 == 118)\n                {\n                    g_60f250 = 0;\n                }\n                else if (v21 > 118)\n                {\n                    if ((unsigned int)v21 == 128)\n                    {\n                        v23 = 0;\n                    }\n                    else if (v21 > 128)\n                    {\n                        if ((unsigned int)v21 == 129)\n                        {\n                            v23 = 1;\n                        }\n                        if ((unsigned int)v21 == 130)\n                        {\n                            v14 = g_60f4e8;\n                        }\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v21 != 111 && v21 <= 111 && (unsigned int)v21 == 102)\n                    {\n                        g_60f339 = 1;\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v21 <= 55)\n                {\n                    if ((unsigned int)v21 < 48)\n                    {\n                        if ((unsigned int)v21 == -130)\n                        {\n                            sub_4029c0(); /* do not return */\n                        }\n                        else if (v21 > -18446744069414584450)\n                        {\n                            v22 = (unsigned int)v21 - 43;\n                        }\n                        else if ((unsigned int)v21 == -131)\n                        {\n                            v0 = 0;\n                            sub_405600();\n                            exit(0x0); /* do not return */\n                        }\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v21 == 82)\n                    {\n                        g_60f33a = 1;\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v21 == 99)\n        {\n            g_60f250 = 1;\n        }\n        if ((unsigned int)v21 == -1 && v14 == 0 && (v15 == 0 || (unsigned int)v34 <= g_60f2dc) && (v15 != 0 || (unsigned int)(unsigned long long *)&((char *)v30)[1] >= (unsigned int)v34) && (v15 != 0 || v17[(long long)(int)g_60f2dc] != 0) && *((long long *)&((char *)((char *)v17 + 0x8 * v32))[-8]) != v15 || v15 == 0 && (unsigned int)v21 == -1 && v14 == 0 && (unsigned int)(unsigned long long *)&((char *)v30)[1] >= (unsigned int)v34 && v17[(long long)(int)g_60f2dc] == 0 || v15 == 0 && (unsigned int)v21 == -1 && v14 != 0 && (unsigned int)v34 <= g_60f2dc)\n        {\n            v36 = \"missing operand\";\n        }\n        if ((unsigned int)v21 == -1 && v14 == 0 && (v15 == 0 || (unsigned int)v34 <= g_60f2dc) && (v15 != 0 || (unsigned int)(unsigned long long *)&((char *)v30)[1] >= (unsigned int)v34) && (v15 != 0 || v17[(long long)(int)g_60f2dc] != 0) && *((long long *)&((char *)((char *)v17 + 0x8 * v32))[-8]) != v15 || v15 == 0 && (unsigned int)v21 == -1 && v14 == 0 && (unsigned int)(unsigned long long *)&((char *)v30)[1] >= (unsigned int)v34 && v17[(long long)(int)g_60f2dc] == 0 || v15 == 0 && (unsigned int)v21 == -1 && v14 != 0 && (unsigned int)v34 <= g_60f2dc || (unsigned int)v21 == -1 && v15 != 0 && v14 != 0)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v36, 0x5));\n        }\n        if ((unsigned int)v21 <= 55 && v21 <= 99 && (unsigned int)v21 != -1 && (unsigned int)v21 >= 48 && (unsigned int)v21 != 99 || (unsigned int)v21 == 111 && v21 <= 118 && (unsigned int)v21 != -1 && (unsigned int)v21 != 99 && v21 > 99 && (unsigned int)v21 != 118 || (unsigned int)v21 == 61 && v21 <= 82 && v21 <= 99 && (unsigned int)v21 != 82 && (unsigned int)v21 > 55 && (unsigned int)v21 != -1 && (unsigned int)v21 != 99 || v21 <= 99 && (unsigned int)v21 == 88 && (unsigned int)v21 != 82 && (unsigned int)v21 > 55 && (unsigned int)v21 != -1 && v21 > 82 && (unsigned int)v21 != 99 || (unsigned int)v21 <= 55 && (unsigned int)v21 < 48 && v22 <= 1 && v21 <= 99 && (unsigned int)v21 != -1 && v21 > -18446744069414584450 && (unsigned int)v21 != 99 && (unsigned int)v21 != -130 || (unsigned int)v21 == 97 && v21 <= 99 && (unsigned int)v21 != 82 && (unsigned int)v21 > 55 && (unsigned int)v21 != -1 && v21 > 82 && (unsigned int)v21 != 99 && (unsigned int)v21 != 88 || (unsigned int)v21 <= 120 && v21 <= 128 && (unsigned int)v21 != 128 && (unsigned int)v21 != -1 && (unsigned int)v21 != 99 && v21 > 99 && (unsigned int)v21 != 118 && v21 > 118 || v21 <= 118 && (unsigned int)v21 != -1 && (unsigned int)v21 >= 114 && (unsigned int)v21 != 111 && (unsigned int)v21 != 99 && v21 > 99 && v21 > 111 && (unsigned int)v21 != 118 || (unsigned int)v21 == 103 && v21 <= 111 && v21 <= 118 && (unsigned int)v21 != -1 && (unsigned int)v21 != 111 && (unsigned int)v21 != 99 && v21 > 99 && (unsigned int)v21 != 102 && (unsigned int)v21 != 118)\n        {\n            v4 = v18[(long long)(int)g_60f2dc + -1];\n            v26 = rcx<8> + v16;\n            v27 = v7 + v6;\n            if (v8 <= v7 + v6)\n            {\n                v7 = strlen(v18[(long long)(int)g_60f2dc + -1]);\n                v6 = v26;\n                v5 = v4;\n                v4 = v27;\n                v8 = v27 + 1;\n                v15 = (unsigned int)sub_4058a0();\n                v27 = v4;\n            }\n            *((char *)(v15 + v16)) = 44;\n            v4 = v27;\n            memcpy(v15 + v6, v5, v7 + 1);\n            g_60f338 = 1;\n            v16 = v4;\n        }\n        if (...)\n        {\n            sub_4029c0(); /* do not return */\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x405600",
            "funcEndAddr": "0x4056b8",
            "decompiledFuncCode": "int sub_405600()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4051a0();\n    }\n}\n"
        },
        {
            "funcName": "sub_409330",
            "funcStartAddr": "0x409330",
            "funcEndAddr": "0x40937b",
            "decompiledFuncCode": "int sub_409330()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_408dd0();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409110",
            "funcStartAddr": "0x409110",
            "funcEndAddr": "0x409115",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_409110()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_4048e0",
            "funcStartAddr": "0x4048e0",
            "funcEndAddr": "0x404a80",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60f2b8;\nextern uint128_t g_60f2c0;\nextern unsigned int g_60f2d0;\nextern int512_t g_60f360;\n\nint sub_4048e0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60f2b8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60f2d0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60f2b8 != 6353600)\n            {\n                v16 = sub_4057a0();\n                g_60f2b8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4057a0();\n                v17 = v15;\n                g_60f2b8 = v15;\n                *(v15) = g_60f2c0;\n            }\n            memset(&v17[(long long)(int)g_60f2d0], 0x0, (int)((unsigned int)v13 + 1 - g_60f2d0) * 16);\n            g_60f2d0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_405990(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_60f2d0 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4036b0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6353760)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_405740();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4036b0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_405fc0",
            "funcStartAddr": "0x405fc0",
            "funcEndAddr": "0x40601a",
            "decompiledFuncCode": "int sub_405fc0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rdx\n    char v4;  // dl\n    unsigned int v5;  // edx\n    char v6;  // dl\n\n    v1 = sub_405ea0();\n    if (v1 != 40864)\n    {\n        if (!(v1 > 40864))\n        {\n            v2 = 0;\n            if (v1 != 0)\n            {\n                v3 = 0;\n                v4 = v1 != 26985;\n                return rdx<8>;\n            }\n        }\n        else if (v1 != 1397113167)\n        {\n            v2 = 2;\n            if (v1 != 1481003842)\n            {\n                v5 = 0;\n                v6 = v1 == 1382369651;\n                v2 = (unsigned long long)(unsigned int)rdx<4> + 1;\n            }\n        }\n    }\n    if (v1 == 40864 || v1 == 1397113167 && v1 > 40864)\n    {\n        v2 = 0;\n    }\n    if (v1 == 0 || v1 == 40864 || v1 > 40864)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_409100",
            "funcStartAddr": "0x409100",
            "funcEndAddr": "0x409105",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_409100()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_4059bc",
            "funcStartAddr": "0x4059bc",
            "funcEndAddr": "0x4059c1",
            "decompiledFuncCode": "int sub_4059bc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404eff",
            "funcStartAddr": "0x404eff",
            "funcEndAddr": "0x404f70",
            "decompiledFuncCode": "extern uint128_t g_60f460;\nextern uint128_t g_60f470;\nextern uint128_t g_60f480;\nextern unsigned long long g_60f490;\n\nint sub_404eff()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60f490;\n    *((uint128_t *)&v0) = g_60f460;\n    *((uint128_t *)&v1) = g_60f470;\n    *((uint128_t *)&v2) = g_60f480;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4048e0();\n}\n"
        },
        {
            "funcName": "sub_404d90",
            "funcStartAddr": "0x404d90",
            "funcEndAddr": "0x404da1",
            "decompiledFuncCode": "int sub_404d90()\n{\n}\n"
        },
        {
            "funcName": "sub_405020",
            "funcStartAddr": "0x405020",
            "funcEndAddr": "0x40508c",
            "decompiledFuncCode": "extern uint128_t g_60f460;\nextern uint128_t g_60f470;\nextern uint128_t g_60f480;\nextern unsigned long long g_60f490;\n\nint sub_405020()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60f460;\n    *((uint128_t *)&v1) = g_60f470;\n    *((uint128_t *)&v2) = g_60f480;\n    v4 = g_60f490;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4048e0();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402d90",
            "funcStartAddr": "0x402d90",
            "funcEndAddr": "0x402e2e",
            "decompiledFuncCode": "extern unsigned int g_40b525;\nextern unsigned int g_60f260;\nextern char g_60f348;\nextern unsigned long long g_60f350;\n\nint sub_402d90()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_408b70();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60f348 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40b525, 0x5);\n            if (g_60f350 != 0)\n            {\n                sub_404f80();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60f348 != 0)\n    {\n        v3 = sub_408b70();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_60f348 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60f260);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_408420",
            "funcStartAddr": "0x408420",
            "funcEndAddr": "0x408987",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40c8b8;\nextern unsigned int g_40c8fc;\n\nint sub_408420()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char [2]|char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9\n    unsigned long|unsigned long long *|unsigned long long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned int|unsigned long long v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char *v58;  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_407d20();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_407d20();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_407e00();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40c8b8, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40c8fc, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40c8b8, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_407e00();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_406100",
            "funcStartAddr": "0x406100",
            "funcEndAddr": "0x40615f",
            "decompiledFuncCode": "int sub_406100()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n    unsigned long long *v4;  // rsi\n    unsigned long v5;  // rdx\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n\n    v2 = v1;\n    v3 = *(v1);\n    v6 = *(v4) + v5 + 0x100;\n    if (*(v4) <= *(v4) + v5 + 0x100)\n    {\n        *(v4) = *(v4) + v5 + 0x100;\n        v7 = realloc(v3, v6);\n        if (v7 != 0)\n        {\n            *(v2) = v7;\n            return 1;\n        }\n        free(*(v2));\n        *(v2) = 0;\n        return 0;\n    }\n    free(v3);\n    *(v2) = 0;\n    *(__errno_location()) = 36;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4060a0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4060ef",
            "decompiledFuncCode": "int sub_4060a0()\n{\n    unsigned int v1[19];  // rdi\n    char v4;  // bpl\n\n    if (((char)v1[9] & 4) == 0)\n    {\n        if (((char)(v1[9] >> 8) & 2) != 0)\n        {\n            sub_406030();\n        }\n        else\n        {\n            v4 = fchdir(v1[5]) != 0;\n        }\n    }\n    sub_405e60();\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40a928",
            "funcStartAddr": "0x40a928",
            "funcEndAddr": "0x40a948",
            "decompiledFuncCode": "extern unsigned long long g_60ee30;\n\nint sub_40a928()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60ee30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409ac0",
            "funcStartAddr": "0x409ac0",
            "funcEndAddr": "0x409d16",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_2 *field_48;\n} struct_1;\n\ntypedef struct struct_3 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_0 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_3;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_0;\n\nint sub_409ac0()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_1 *v5;  // rdi\n    struct_3 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_0 *v12;  // rdx\n    unsigned int|unsigned long|uint128_t v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_0 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned int|unsigned long|uint128_t v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_408e00();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_408f20();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_4098c0();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_408e00();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_404ee0",
            "funcStartAddr": "0x404ee0",
            "funcEndAddr": "0x404eec",
            "decompiledFuncCode": "int sub_404ee0()\n{\n}\n"
        },
        {
            "funcName": "sub_404b20",
            "funcStartAddr": "0x404b20",
            "funcEndAddr": "0x404b33",
            "decompiledFuncCode": "extern int512_t g_60f460;\n\nint sub_404b20()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60f460 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60f460 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408d10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408da1",
            "decompiledFuncCode": "int sub_408d10()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v3 != 0 && v2 > 9)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404f80",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x404f91",
            "decompiledFuncCode": "int sub_404f80()\n{\n}\n"
        },
        {
            "funcName": "sub_405910",
            "funcStartAddr": "0x405910",
            "funcEndAddr": "0x40593e",
            "decompiledFuncCode": "int sub_405910()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_405990(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4050f0",
            "funcStartAddr": "0x4050f0",
            "funcEndAddr": "0x405102",
            "decompiledFuncCode": "int sub_4050f0()\n{\n}\n"
        },
        {
            "funcName": "sub_409120",
            "funcStartAddr": "0x409120",
            "funcEndAddr": "0x40916f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_409120()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "0x407b80",
            "funcEndAddr": "0x407ba5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[116];\n    unsigned short field_74;\n} struct_0;\n\nint fts_set()\n{\n    unsigned long v1;  // rdx\n    struct_0 *v2;  // rsi\n\n    if ((unsigned int)v1 <= 4)\n    {\n        *((unsigned long *)&v2->field_74) = v1;\n        return 0;\n    }\n    *(__errno_location()) = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40290b",
            "funcStartAddr": "0x40290b",
            "funcEndAddr": "0x40292a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_40290b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404dc0",
            "funcStartAddr": "0x404dc0",
            "funcEndAddr": "0x404dd6",
            "decompiledFuncCode": "int sub_404dc0()\n{\n}\n"
        },
        {
            "funcName": "sub_4055a0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x4055f9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4055a0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4051a0();\n}\n"
        },
        {
            "funcName": "sub_4050a0",
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x4050b7",
            "decompiledFuncCode": "int sub_4050a0()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chmod.elf"
}