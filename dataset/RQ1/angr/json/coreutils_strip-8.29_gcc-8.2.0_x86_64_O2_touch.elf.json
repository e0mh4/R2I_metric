{
    "funcInfo": [
        {
            "funcName": "sub_40a770",
            "funcStartAddr": "0x40a770",
            "funcEndAddr": "0x40a7ba",
            "decompiledFuncCode": "int sub_40a770() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409d20",
            "funcStartAddr": "0x409d20",
            "funcEndAddr": "0x409d8d",
            "decompiledFuncCode": "int sub_409d20()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_409800();\n}\n"
        },
        {
            "funcName": "sub_402d30",
            "funcStartAddr": "0x402d30",
            "funcEndAddr": "0x402e3f",
            "decompiledFuncCode": "extern unsigned int g_411a5d;\nextern unsigned long long stderr[7];\n\nint sub_402d30()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411a5d, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_40a050();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_40a050();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_408100",
            "funcStartAddr": "0x408100",
            "funcEndAddr": "0x408390",
            "decompiledFuncCode": "int sub_408100()\n{\n    unsigned long v0;  // [bp-0xc8]\n    char v1;  // [bp-0xb8]\n    unsigned int v2;  // [bp-0xa8]\n    unsigned int v3;  // [bp-0xa4]\n    unsigned int v4;  // [bp-0xa0]\n    unsigned int v5;  // [bp-0x9c]\n    unsigned int v6;  // [bp-0x98]\n    unsigned int v7;  // [bp-0x68]\n    unsigned int v8;  // [bp-0x64]\n    unsigned long long|unsigned int v9;  // [bp-0x60]\n    unsigned int v10;  // [bp-0x5c]\n    unsigned long long v11;  // [bp-0x58]\n    unsigned int v12;  // [bp-0x48]\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rbp\n    char *v16;  // rsi\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // r13\n    unsigned long long v20;  // r14\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rcx\n    unsigned long v23;  // r13\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long|unsigned int v27;  // rax\n    unsigned long long v28;  // rdx\n    unsigned long long v29;  // rax\n    unsigned int v30[6];  // rdx\n    unsigned int v31;  // esi\n    unsigned long long v32;  // rax\n    char *v33;  // rax\n    unsigned long long *v34;  // rdi\n\n    v15 = v14;\n    v17 = strlen(v16);\n    if (((char)v14 & 4) != 0)\n    {\n        v20 = strchr(v16, 0x2e);\n        if (v20 != 0)\n        {\n            v18 = v20 * 0;\n            v19 = v17 - v17;\n            if (v19 == 3)\n            {\n                v17 = v18;\n            }\n        }\n    }\n    else\n    {\n        v20 = 0;\n    }\n    if ((((char)v14 & 4) == 0 || v20 == 0 || v19 == 3) && v17 - 8 <= 4 && (v17 & 1) == 0)\n    {\n        v21 = v16;\n        v22 = &v16[v17];\n        while ((unsigned int)(char)*((char *)v21) - 48 <= 9)\n        {\n            v21 += 1;\n            v23 = v17 % 2;\n            v24 = 0;\n            do\n            {\n                v7 = (char)*((char *)(v21 + v24 * 2 + 1)) + ((unsigned long long)(char)*((char *)(v21 + v24 * 2)) * 5 - 240) * 2 - 48;\n                v24 += 1;\n            }\n            while (v17 != v24);\n            if ((v15 & 1) != 0)\n            {\n                v6 = v7 - 1;\n                v5 = v8;\n                v4 = v9;\n                v3 = v10;\n                v26 = sub_408070();\n                if (v26 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v25 = sub_408070();\n                if (v25 == 0)\n                {\n                    break;\n                }\n                v6 = (unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v17 + -120]) - 1;\n                v5 = *((int *)&((char *)stack_base)[4 * v17 + -116]);\n                v4 = *((int *)&((char *)stack_base)[4 * v17 + -112]);\n                v3 = *((int *)&((char *)stack_base)[4 * v17 + -108]);\n            }\n            if (v20 != 0)\n            {\n                v27 = (unsigned int)(char)*((char *)(v20 + 1)) - 48;\n                v28 = (char)*((char *)(v20 + 2));\n                if ((unsigned int)((unsigned long long)(char)*((char *)(v20 + 2)) - 48) > 9 || (unsigned int)(char)*((char *)(v20 + 1)) - 48 > 9)\n                {\n                    break;\n                }\n                v27 = v28 + v27 * 10 - 48;\n                v2 = v27;\n            }\n            else\n            {\n                v2 = 0;\n                v27 = 0;\n            }\n            *((unsigned long *)&v7) = v27;\n            v12 = -1;\n            v8 = v3;\n            v9 = *((long long *)&(&v5)[-1]);\n            v11 = *((long long *)&v6);\n            v29 = sub_40bdb0();\n            v30 = &v7;\n            v0 = v29;\n            if (v0 == -1)\n            {\n                v29 = localtime((unsigned int)(stack_base + -200));\n                v30 = v29;\n            }\n            if (v0 != -1 || v29 != 0)\n            {\n                v31 = v2;\n                if (!(((&v6)[1] ^ v30[2 + 1]) == 0 && (v6 ^ v30[2]) == 0 && (v5 ^ v30[1 + 1]) == 0 && (v4 ^ v30[1]) == 0 && (v3 ^ v30[1]) == 0 && (v30[0] ^ v2) == 0))\n                {\n                    if (v31 != 60)\n                    {\n                        break;\n                    }\n                    v33 = __stpcpy_chk((unsigned int)&v1, v21, 0x10);\n                    *((short *)&v33[-2]) = 14645;\n                    *(v33) = 0;\n                    v32 = sub_408100();\n                    if (v32 == 0)\n                    {\n                        break;\n                    }\n                }\n                *(v34) = v0;\n                return 1;\n            }\n        }\n        if (true)\n        {\n            v32 = 0;\n        }\n        else if (...)\n        {\n            return v32;\n        }\n    }\n    v32 = 0;\n    return v32;\n}\n"
        },
        {
            "funcName": "sub_4083b0",
            "funcStartAddr": "0x4083b0",
            "funcEndAddr": "0x408418",
            "decompiledFuncCode": "int sub_4083b0()\n{\n    char v0;  // [bp-0x10]\n    unsigned long long v2;  // rbx\n    char *v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v2 = 200809;\n    v3 = getenv(\"_POSIX2_VERSION\");\n    if (v3 != 0 && *(v3) != 0)\n    {\n        v4 = strtol(v3, &v0, 0xa);\n        if (*((char *)*((long long *)&v0)) == 0)\n        {\n            if (v4 >= -0x80000000)\n            {\n                return (v4 <= 2147483647? v4 : 2147483647);\n            }\n            v2 = 0x80000000;\n        }\n    }\n    if (v4 < -0x80000000 || *(v3) == 0 || v3 == 0 || *((char *)*((long long *)&v0)) != 0)\n    {\n        v5 = v2;\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_410160",
            "funcStartAddr": "0x410160",
            "funcEndAddr": "0x410e16",
            "decompiledFuncCode": "int sub_410160() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408000",
            "funcStartAddr": "0x408000",
            "funcEndAddr": "0x408067",
            "decompiledFuncCode": "int sub_408000()\n{\n    unsigned long long v1;  // r12\n    unsigned long v3;  // rbx\n    unsigned long long v4;  // rbp\n\n    v1 = getenv(\"TZ\");\n    sub_40bea0();\n    if (v3 != 0)\n    {\n        v4 = (unsigned int)sub_406030();\n        sub_40c160();\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_410ef8",
            "funcStartAddr": "0x410ef8",
            "funcEndAddr": "0x410f18",
            "decompiledFuncCode": "extern unsigned long long g_617e30;\n\nint sub_410ef8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_617e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40a660",
            "funcStartAddr": "0x40a660",
            "funcEndAddr": "0x40a662",
            "decompiledFuncCode": "int sub_40a660()\n{\n}\n"
        },
        {
            "funcName": "sub_40a670",
            "funcStartAddr": "0x40a670",
            "funcEndAddr": "0x40a6a0",
            "decompiledFuncCode": "int sub_40a670()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_40a860(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409ec0",
            "funcStartAddr": "0x409ec0",
            "funcEndAddr": "0x409eca",
            "decompiledFuncCode": "int sub_409ec0()\n{\n}\n"
        },
        {
            "funcName": "sub_406030",
            "funcStartAddr": "0x406030",
            "funcEndAddr": "0x407fa9",
            "decompiledFuncCode": "int sub_406030() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a470",
            "funcStartAddr": "0x40a470",
            "funcEndAddr": "0x40a4c9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40a470()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_40a070();\n}\n"
        },
        {
            "funcName": "sub_409e10",
            "funcStartAddr": "0x409e10",
            "funcEndAddr": "0x409e1f",
            "decompiledFuncCode": "int sub_409e10()\n{\n}\n"
        },
        {
            "funcName": "sub_40ff40",
            "funcStartAddr": "0x40ff40",
            "funcEndAddr": "0x4100fc",
            "decompiledFuncCode": "int sub_40ff40() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403a10",
            "funcStartAddr": "0x403a10",
            "funcEndAddr": "0x403d90",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    unsigned int field_1c;\n    char padding_20[64];\n    unsigned long long field_60;\n    char padding_68[56];\n    char field_a0;\n    char padding_a1[7];\n    unsigned long long field_a8;\n    unsigned long long field_b0;\n    unsigned long long field_b8;\n    char padding_c0[8];\n    unsigned long long field_c8;\n    unsigned long long field_d0;\n    char field_d8;\n    char padding_d9[1];\n    char field_da;\n    char field_db;\n    char field_dc;\n    char field_dd;\n    char field_de;\n    char field_df;\n} struct_0;\n\nextern unsigned int g_411abb;\nextern unsigned int g_411b57;\nextern unsigned int g_411b8b;\nextern unsigned int g_4120d8;\nextern unsigned long long stderr;\n\nint sub_403a10()\n{\n    struct_0 *v1;  // rsi\n    struct_0 *v2;  // rbx\n    unsigned long long v5;  // rdx\n    unsigned long long v7;  // cc_dep1\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // cc_dep1\n    char v12;  // cc_dep1\n\n    v2 = v1;\n    dcgettext(0x0, 0x411abb, 0x5);\n    sub_403400();\n    if (v1->field_a8 != 0 && v1->field_da == 0)\n    {\n        __fprintf_chk();\n        v2->field_da = 1;\n        v5 = 1;\n        if (v2->field_d8 != v2->field_df)\n        {\n            fputc(0x20, stderr);\n        }\n    }\n    if (v1->field_a8 == 0 || v1->field_da != 0)\n    {\n        v5 = 0;\n    }\n    if (v1->field_a8 == 0 && v2->field_d8 != v2->field_df || v2->field_d8 != v2->field_df && v1->field_da != 0 || v1->field_da == 0 && v2->field_d8 != v2->field_df && v1->field_a8 != 0)\n    {\n        dcgettext(0x0, 0x411b57, 0x5);\n        __fprintf_chk();\n        v5 = 1;\n        v2->field_df = v2->field_d8;\n    }\n    if (v2->field_c8 != 0 && v2->field_dd == 0)\n    {\n        __fprintf_chk();\n        if (v2->field_60 != 0)\n        {\n            __fprintf_chk();\n        }\n        if (v2->field_1c == 1)\n        {\n            fwrite(\"pm\", 0x1, 0x2, stderr);\n        }\n        v7 = v2->field_b0;\n        v2->field_dd = 1;\n        v5 = 1;\n        if (v7 != 0)\n        {\n            v5 = v2->field_db;\n        }\n    }\n    if ((v2->field_dd == 0 || v2->field_db == 0) && (v2->field_dd == 0 || v2->field_b0 != 0) && (v2->field_db == 0 || v2->field_c8 != 0) && (v2->field_c8 != 0 || v2->field_b0 != 0) && (v2->field_c8 == 0 || v2->field_db == 0 || v2->field_dd != 0) && (v2->field_c8 == 0 || v2->field_dd != 0 || v7 != 0))\n    {\n        if ((v2->field_dd == 0 || v5 != 0) && (v2->field_c8 != 0 || v5 != 0))\n        {\n            fputc(0x20, stderr);\n        }\n        v9 = (unsigned int)sub_403920();\n        dcgettext(0x0, 0x4120d8, 0x5);\n        __fprintf_chk();\n        v2->field_db = 1;\n        v5 = 1;\n    }\n    if (v2->field_b8 != 0 && v2->field_dc == 0)\n    {\n        __fprintf_chk();\n        v10 = v2->field_d0;\n        v2->field_dc = 1;\n    }\n    if ((v2->field_dc == 0 || v2->field_de == 0) && (v2->field_dc == 0 || v2->field_d0 != 0) && (v2->field_de == 0 || v2->field_b8 != 0) && (v2->field_d0 != 0 || v2->field_b8 != 0) && (v2->field_de == 0 || v2->field_b8 == 0 || v2->field_dc != 0) && (v2->field_b8 == 0 || v2->field_dc != 0 || v10 != 0))\n    {\n        sub_403290();\n        __fprintf_chk();\n        v12 = v2->field_a0;\n        v2->field_de = 1;\n    }\n    if (v2->field_a0 != 0 && (v2->field_d0 == 0 || v2->field_de != 0) && (v2->field_b8 == 0 || v2->field_dc != 0) && v5 != 0 || (v2->field_dc == 0 || v2->field_de == 0) && (v2->field_dc == 0 || v12 != 0) && (v2->field_dc == 0 || v2->field_d0 != 0) && (v2->field_de == 0 || v2->field_b8 != 0) && (v12 != 0 || v2->field_b8 != 0) && (v2->field_d0 != 0 || v2->field_b8 != 0) && (v10 == 0 || v12 != 0 || v2->field_de != 0) && (v2->field_de == 0 || v2->field_b8 == 0 || v2->field_dc != 0 || v2->field_a0 != 0) && (v2->field_b8 == 0 || v2->field_dc != 0 || v10 != 0 || v2->field_a0 != 0))\n    {\n        fputc(0x20, stderr);\n    }\n    if (v2->field_a0 != 0 && (v2->field_d0 == 0 || v2->field_de != 0) && (v2->field_b8 == 0 || v2->field_dc != 0) && v5 == 0 || v2->field_a0 != 0 && (v2->field_d0 == 0 || v2->field_de != 0) && (v2->field_b8 == 0 || v2->field_dc != 0) && v5 != 0 || (v2->field_dc == 0 || v2->field_de == 0) && (v2->field_dc == 0 || v12 != 0) && (v2->field_dc == 0 || v2->field_d0 != 0) && (v2->field_de == 0 || v2->field_b8 != 0) && (v12 != 0 || v2->field_b8 != 0) && (v2->field_d0 != 0 || v2->field_b8 != 0) && (v10 == 0 || v12 != 0 || v2->field_de != 0) && (v2->field_de == 0 || v2->field_b8 == 0 || v2->field_dc != 0 || v2->field_a0 != 0) && (v2->field_b8 == 0 || v2->field_dc != 0 || v10 != 0 || v2->field_a0 != 0))\n    {\n        dcgettext(0x0, 0x411b8b, 0x5);\n        __fprintf_chk();\n    }\n    return fputc(0xa, stderr);\n}\n"
        },
        {
            "funcName": "sub_40a8a0",
            "funcStartAddr": "0x40a8a0",
            "funcEndAddr": "0x40a975",
            "decompiledFuncCode": "int sub_40a8a0()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_403110",
            "funcStartAddr": "0x403110",
            "funcEndAddr": "0x40327d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    unsigned int field_1c;\n    uint128_t field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    unsigned long long field_50;\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[57];\n    char field_a1;\n    char padding_a2[6];\n    unsigned long long field_a8;\n    char padding_b0[24];\n    unsigned long long field_c8;\n    char padding_d0[8];\n    char field_d8;\n} struct_0;\n\ndouble sub_403110()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long long v1;  // [bp+0x10]\n    unsigned long v2;  // [bp+0x18]\n    unsigned long long v3;  // r8\n    struct_0 *v4;  // rdi\n    void v5;  // xmm0\n    void v6;  // xmm0\n\n    v3 = v1;\n    if (*((long long *)&v4->padding_68[56]) != 0 && v4->field_28 == 0 && v4->padding_68[49] == 0)\n    {\n        if (*((long long *)&v4->padding_b0[16]) == 0 && v2 <= 2)\n        {\n            *((long long *)&v4->padding_b0[16]) = 1;\n        }\n        if (v2 > 2 || *((long long *)&v4->padding_b0[16]) != 0)\n        {\n            v4->padding_d0[0] = 1;\n            v4->field_20 = *((int128_t *)&v0);\n            v4->field_28 = v2;\n            return *((int128_t *)&v0);\n        }\n    }\n    if (*((long long *)&v4->padding_68[56]) == 0 || v4->padding_68[49] != 0 || v4->field_28 != 0)\n    {\n        if (v2 > 4)\n        {\n            *((long long *)&v4->padding_68[56]) = *((long long *)&v4->padding_68[56]) + 1;\n            v4->field_28 = v2 - 4;\n            v4->field_38 = v3 - (((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63)) * 100;\n            v4->field_30 = ((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63) - ((((((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63)) * 11805916207174113035 >> 64) + ((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63) >> 6) - (((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63) >> 63)) * 100;\n            *((unsigned long long *)&((char *)&v4->field_20)[8]) = (v3 * 3777893186295716171 >> 64 >> 11) - (v3 >> 63);\n            return v5;\n        }\n        *((long long *)&v4->padding_b0[16]) = *((long long *)&v4->padding_b0[16]) + 1;\n        if (v2 > 2)\n        {\n            v4->field_40 = ((v3 * 11805916207174113035 >> 64) + v3 >> 6) - (v3 >> 63);\n            v4->field_48 = v1 - (((v1 * 11805916207174113035 >> 64) + v1 >> 6) - (v1 >> 63)) * 100;\n        }\n    }\n    if ((v4->padding_68[49] == 0 || v2 <= 4) && (v4->field_28 == 0 || v2 <= 4) && (v2 <= 4 || *((long long *)&v4->padding_68[56]) != 0) && (*((long long *)&v4->padding_68[56]) == 0 || *((long long *)&v4->padding_b0[16]) == 0 || v4->padding_68[49] != 0 || v4->field_28 != 0))\n    {\n        if (v2 <= 2)\n        {\n            v4->field_40 = v1;\n            v4->field_48 = 0;\n        }\n        if (v2 <= 2 || *((long long *)&v4->padding_68[56]) == 0 || v4->padding_68[49] != 0 || v4->field_28 != 0)\n        {\n            v4->field_50 = 0;\n            v4->field_58 = 0;\n            v4->field_1c = 2;\n            return v6;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_410ee0",
            "funcStartAddr": "0x410ee0",
            "funcEndAddr": "0x410ef8",
            "decompiledFuncCode": "extern int512_t g_618288;\n\nint sub_410ee0()\n{\n}\n"
        },
        {
            "funcName": "sub_40bdb0",
            "funcStartAddr": "0x40bdb0",
            "funcEndAddr": "0x40bdcc",
            "decompiledFuncCode": "int sub_40bdb0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    tzset();\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401df0",
            "funcEndAddr": "0x40268d",
            "decompiledFuncCode": "extern unsigned int g_410f44;\nextern unsigned int g_410fdb;\nextern unsigned int g_411088;\nextern unsigned int g_41109b;\nextern unsigned int g_4110ab;\nextern unsigned int g_411778;\nextern unsigned int g_411818;\nextern unsigned int g_411838;\nextern int512_t g_4118b0;\nextern unsigned int g_414b94;\nextern unsigned int g_61831c;\nextern unsigned long long g_618360;\nextern char g_618380;\nextern unsigned long long g_618388;\nextern char g_618390;\nextern unsigned long long g_618398;\nextern char g_6183a0;\nextern char g_6183a1;\nextern char g_6183a2;\nextern char g_6183a3;\nextern unsigned int g_6183a4;\nextern unsigned long long g_618550;\n\nint main()\n{\n    unsigned long v0;  // [bp-0x128]\n    unsigned long v1;  // [bp-0x120]\n    unsigned long v2;  // [bp-0x118]\n    unsigned long|unsigned long long v3;  // [bp-0x110]\n    unsigned long long|unsigned int|char v4;  // [bp-0xfc]\n    unsigned long|unsigned int|char v5;  // [bp-0xf8]\n    unsigned int v6;  // [bp-0xf0]\n    unsigned int v7;  // [bp-0xec]\n    unsigned long v8;  // [bp-0xe8]\n    unsigned long v9;  // [bp-0xe0]\n    unsigned long v10;  // [bp-0xd8]\n    unsigned long v11;  // [bp-0xd0]\n    unsigned long v12;  // [bp-0xc8]\n    unsigned long v13;  // [bp-0xc0]\n    unsigned long long v14;  // [bp-0x80]\n    unsigned long long v15;  // [bp-0x78]\n    unsigned long long v16;  // [bp-0x70]\n    unsigned long long v17;  // [bp-0x68]\n    unsigned long long v19;  // r14\n    unsigned long long v20;  // r13\n    unsigned long long v21;  // rdi\n    unsigned long long v22;  // r12\n    unsigned long long *v23;  // rsi\n    unsigned long v28;  // r11\n    unsigned long long v30;  // rbx\n    char v35;  // al\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    unsigned int v44[5];  // rax\n    unsigned long long v45;  // r15\n    unsigned long long v46;  // r14\n    unsigned long long v47;  // rcx\n    char *v48;  // rdi\n    unsigned long long v49;  // r11\n    char *v50;  // rsi\n    unsigned long long v51;  // cc_dep1\n    unsigned long long v52;  // cc_dep2\n    unsigned long v53;  // d\n    unsigned long|unsigned int v54;  // r14\n    unsigned int *v55;  // rax\n    char v56;  // r10b\n    unsigned long long v57;  // rax\n    unsigned long|unsigned int v58;  // rdx\n    unsigned int *v59;  // rax\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // r14\n    unsigned int *v62;  // rax\n    unsigned long long v63;  // r15\n    unsigned long|unsigned int v64;  // r10\n    unsigned long long v65;  // r14\n    unsigned long|unsigned int v66;  // r13d\n    unsigned long long *v67;  // rax\n    unsigned long v68;  // rsi\n    unsigned long long v69;  // r13\n\n    v19 = 0;\n    v20 = 0;\n    v22 = v21;\n    sub_408430();\n    setlocale(0x6, 0x414b94);\n    bindtextdomain(0x410fdb, 0x411778);\n    textdomain(0x410fdb);\n    sub_410ee0();\n    g_6183a2 = 0;\n    g_6183a4 = 0;\n    g_6183a3 = 0;\n    while (true)\n    {\n        if ((unsigned int)v28 == -1)\n        {\n            if (g_6183a4 == 0)\n            {\n                g_6183a4 = 3;\n            }\n            if (v20 != 0)\n            {\n                if (v19 != 0 || g_6183a2 != 0)\n                {\n                    v68 = \"cannot specify times from more than one source\";\n                }\n            }\n            else\n            {\n                if (g_6183a2 == 0)\n                {\n                    if (v19 != 0)\n                    {\n                        sub_4030d0();\n                        sub_4027a0();\n                        *((int128_t *)&g_618390) = *((int128_t *)&g_618380);\n                        if (g_6183a4 == 3 && *((long long *)&g_618380) == v8 && g_618388 == v9)\n                        {\n                            v11 = v9;\n                            v10 = v8 ^ 1;\n                            sub_4027a0();\n                        }\n                    }\n                    if (g_6183a4 == 3 && v12 == v10 && *((long long *)&g_618380) == v8 && g_618388 == v9 && v19 != 0 && v13 == v11 || v19 == 0)\n                    {\n                        if ((unsigned int)v21 - g_61831c > 1)\n                        {\n                            v41 = sub_4083b0();\n                            if (v41 <= 200111)\n                            {\n                                v42 = sub_408100();\n                                if (v42 != 0)\n                                {\n                                    g_618388 = 0;\n                                    *((int128_t *)&g_618390) = *((int128_t *)&g_618380);\n                                    if (getenv(\"POSIXLY_CORRECT\") == 0)\n                                    {\n                                        v44 = localtime(0x618380);\n                                        if (v44 != 0)\n                                        {\n                                            v45 = v44[1];\n                                            v46 = v44[1 + 1];\n                                            v7 = v44[0];\n                                            v6 = v44[1];\n                                            v4 = v44[2] + 1;\n                                            v5 = v23[(long long)(int)g_61831c];\n                                            v3 = v7;\n                                            v2 = v6;\n                                            v1 = v45;\n                                            v0 = v46;\n                                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x411838, 0x5));\n                                        }\n                                    }\n                                    g_61831c = g_61831c + 1;\n                                }\n                            }\n                        }\n                        if ((unsigned int)v21 - g_61831c <= 1 || v42 == 0 || v41 > 200111)\n                        {\n                            if (g_6183a4 != 3)\n                            {\n                                g_618388 = 1073741823;\n                                g_618398 = 1073741823;\n                            }\n                            else\n                            {\n                                g_6183a0 = 1;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    if (g_6183a1 == 0)\n                    {\n                        v35 = __xstat() != 0;\n                    }\n                    else\n                    {\n                        v35 = __lxstat() != 0;\n                    }\n                    if (v35 == 0)\n                    {\n                        *((unsigned long long *)&g_618380) = v14;\n                        g_618388 = v15;\n                        *((unsigned long long *)&g_618390) = v16;\n                        g_618398 = v17;\n                        if (v19 != 0)\n                        {\n                            v36 = g_6183a4;\n                            if (((char)g_6183a4 & 1) != 0)\n                            {\n                                sub_4027a0();\n                                v36 = g_6183a4;\n                            }\n                            if ((v36 & 2) != 0)\n                            {\n                                sub_4027a0();\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v37 = (unsigned int)sub_409e00();\n                        error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x411818, 0x5));\n                    }\n                }\n            }\n            if (v19 == 0 && g_6183a2 == 0 || v20 == 0 && v35 == 0 || v20 == 0 && g_6183a2 == 0)\n            {\n                v67 = (unsigned long long)g_61831c;\n                if (g_61831c != (unsigned int)v22)\n                {\n                    v66 = 1;\n                    if (g_61831c < v22)\n                    {\n                        while (true)\n                        {\n                            v47 = 2;\n                            v48 = \"-\";\n                            v49 = 1;\n                            v50 = *((long long *)((char *)v23 + 0x8 * v67));\n                            while (v47 != 0)\n                            {\n                                v47 -= 1;\n                                v51 = *(v50);\n                                v52 = *(v48);\n                                v48 = &v48[v53];\n                                v50 = &v50[v53];\n                                break;\n                            }\n                            v54 = (v51 > v52) - 0 - (v51 < v52);\n                            if ((v51 > v52) - (v51 < v52) != 0)\n                            {\n                                if (g_6183a1 == 0 && g_6183a3 == 0)\n                                {\n                                    v54 = 0;\n                                    v49 = sub_402fd0();\n                                    if (v49 == -1)\n                                    {\n                                        v4 = v49;\n                                        v55 = __errno_location();\n                                        v54 = *(v55);\n                                        if ((unsigned int)((unsigned long long)*(v55) - 21) > 1)\n                                        {\n                                            v49 = (unsigned int)v4;\n                                        }\n                                    }\n                                }\n                                if (g_6183a1 != 0 || g_6183a3 != 0 || (unsigned int)v54 == 1 && v49 == -1 || v49 == -1 && (unsigned int)((unsigned long long)*(v55) - 21) <= 1)\n                                {\n                                    v28 = (unsigned int)sub_40b5f0();\n                                    v54 = 0;\n                                }\n                            }\n                            if (g_6183a4 != 3 && g_6183a4 != 1 && g_6183a4 != 2)\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                            if (g_6183a4 == 2)\n                            {\n                                g_618388 = 1073741822;\n                            }\n                            if (g_6183a4 == 1)\n                            {\n                                g_618398 = 1073741822;\n                            }\n                            if (g_6183a4 == 3 || g_6183a4 == 1 || g_6183a4 == 2)\n                            {\n                                v56 = v49 == -1 & g_6183a1;\n                                if ((v49 == -1 & g_6183a1) != 0)\n                                {\n                                    v58 = (unsigned int)sub_403040();\n                                }\n                                else if (v49 != 1)\n                                {\n                                    v5 = v56;\n                                    v4 = v49;\n                                    v58 = sub_403040();\n                                    if ((int)v4 == 0)\n                                    {\n                                        v5 = v58;\n                                        v4 = v56;\n                                        v60 = close(0x0);\n                                        v58 = v5;\n                                        if (v60 != 0)\n                                        {\n                                            v61 = (unsigned int)sub_409e00();\n                                            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x411088, 0x5));\n                                            v64 = v4;\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    v57 = sub_403040();\n                                    if (v57 != 0)\n                                    {\n                                        v59 = __errno_location();\n                                    }\n                                }\n                                if (((v49 == -1 & g_6183a1) == 0 || v58 != 0) && (v49 == 1 || v58 != 0) && (v57 != 0 || (v49 == -1 & g_6183a1) != 0 || v49 != 1) && ((v49 == -1 & g_6183a1) != 0 || v49 != 1 || *(v59) != 9) && (v60 == 0 || v49 == 1 || (int)v4 != 0 || (v49 == -1 & g_6183a1) != 0) && v54 == 0)\n                                {\n                                    v62 = __errno_location();\n                                }\n                                if ((v49 == -1 & g_6183a1) == 0 && g_6183a3 == 0 && v49 == 1 && *(v59) == 9 && v57 != 0 && v54 != 0 || ((v49 == -1 & g_6183a1) == 0 || v58 != 0) && (v49 == 1 || v58 != 0) && (v57 != 0 || (v49 == -1 & g_6183a1) != 0 || v49 != 1) && ((v49 == -1 & g_6183a1) != 0 || v49 != 1 || *(v59) != 9) && (v60 == 0 || v49 == 1 || (int)v4 != 0 || (v49 == -1 & g_6183a1) != 0) && v54 != 0)\n                                {\n                                    v63 = (unsigned int)sub_409e00();\n                                    error(0x0, v54, (unsigned long long)dcgettext(0x0, 0x41109b, 0x5));\n                                    v64 = 0;\n                                }\n                                if ((v49 == -1 & g_6183a1) == 0 && g_6183a3 == 0 && v49 == 1 && *(v59) == 9 && v57 != 0 && v54 == 0 || ((v49 == -1 & g_6183a1) == 0 || v58 != 0) && (v49 == 1 || v58 != 0) && (v57 != 0 || (v49 == -1 & g_6183a1) != 0 || v49 != 1) && ((v49 == -1 & g_6183a1) != 0 || v49 != 1 || *(v59) != 9) && (v60 == 0 || v49 == 1 || (int)v4 != 0 || (v49 == -1 & g_6183a1) != 0) && v54 == 0 && g_6183a3 != 0 && *(v62) != 2 || ((v49 == -1 & g_6183a1) == 0 || v58 != 0) && (v49 == 1 || v58 != 0) && (v57 != 0 || (v49 == -1 & g_6183a1) != 0 || v49 != 1) && ((v49 == -1 & g_6183a1) != 0 || v49 != 1 || *(v59) != 9) && (v60 == 0 || v49 == 1 || (int)v4 != 0 || (v49 == -1 & g_6183a1) != 0) && v54 == 0 && g_6183a3 == 0)\n                                {\n                                    v65 = (unsigned int)sub_409e00();\n                                    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4110ab, 0x5));\n                                    v64 = 0;\n                                }\n                                if (((v49 == -1 & g_6183a1) != 0 || v60 == 0 && v49 != 1 || (int)v4 != 0 && v49 != 1) && v58 == 0 || ((v49 == -1 & g_6183a1) == 0 || v58 != 0) && (v49 == 1 || v58 != 0) && (v57 != 0 || (v49 == -1 & g_6183a1) != 0 || v49 != 1) && ((v49 == -1 & g_6183a1) != 0 || v49 != 1 || *(v59) != 9) && (v60 == 0 || v49 == 1 || (int)v4 != 0 || (v49 == -1 & g_6183a1) != 0) && v54 == 0 && g_6183a3 != 0 && *(v62) == 2 || (v49 == -1 & g_6183a1) == 0 && v49 == 1 && *(v59) == 9 && v57 != 0 && g_6183a3 != 0 || (v49 == -1 & g_6183a1) == 0 && v49 == 1 && v57 == 0)\n                                {\n                                    v64 = 1;\n                                }\n                                v66 = 1 & v64;\n                                v67 = (unsigned long long)(g_61831c + 1);\n                                g_61831c = g_61831c + 1;\n                                if ((unsigned int)v67 >= (unsigned int)v22)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v68 = \"missing file operand\";\n                }\n            }\n            if ((g_61831c == (unsigned int)v22 || v20 != 0) && (v35 == 0 || g_6183a2 == 0 || v20 != 0) && (g_61831c == (unsigned int)v22 || v19 != 0 || g_6183a2 != 0))\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v68, 0x5));\n            }\n        }\n        else if ((unsigned int)v28 != 102)\n        {\n            if (v28 > 102)\n            {\n                if ((unsigned int)v28 == 114)\n                {\n                    g_6183a2 = 1;\n                    g_618360 = g_618550;\n                }\n                else if (v28 <= 114)\n                {\n                    if ((unsigned int)v28 == 104)\n                    {\n                        g_6183a1 = 1;\n                    }\n                    if ((unsigned int)v28 == 109)\n                    {\n                        g_6183a4 = g_6183a4 | 2;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v28 == 116)\n                    {\n                        v20 = (unsigned int)sub_408100();\n                        if ((char)v20 != 0)\n                        {\n                            g_618388 = 0;\n                            *((int128_t *)&g_618390) = *((int128_t *)&g_618380);\n                        }\n                        else\n                        {\n                            v30 = (unsigned int)sub_40a050();\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x410f44, 0x5));\n                        }\n                    }\n                    if ((unsigned int)v28 == 128)\n                    {\n                        g_6183a4 = g_6183a4 | *((int *)&((char *)&g_4118b0)[4 * (unsigned long long)(unsigned int)sub_402e50()]);\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v28 == 97)\n                {\n                    g_6183a4 = g_6183a4 | 1;\n                }\n                else if (v28 > 97)\n                {\n                    if ((unsigned int)v28 == 99)\n                    {\n                        g_6183a3 = 1;\n                    }\n                    if ((unsigned int)v28 == 100)\n                    {\n                        v19 = g_618550;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v28 == -131)\n                    {\n                        v3 = 0;\n                        v2 = \"Randy Smith\";\n                        v1 = \"David MacKenzie\";\n                        v0 = \"Jim Kingdon\";\n                        sub_40a4d0();\n                        exit(0x0); /* do not return */\n                    }\n                    if ((unsigned int)v28 == -130)\n                    {\n                        sub_4027e0(); /* do not return */\n                    }\n                }\n            }\n        }\n        if (v28 <= 102 && v28 <= 97 && (unsigned int)v28 != 102 && (unsigned int)v28 != -130 && (unsigned int)v28 != 97 && (unsigned int)v28 != -131 && (unsigned int)v28 != -1 || v28 <= 102 && (unsigned int)v28 != 102 && (unsigned int)v28 != 99 && (unsigned int)v28 != 100 && (unsigned int)v28 != 97 && v28 > 97 && (unsigned int)v28 != -1 || v28 <= 114 && (unsigned int)v28 != 102 && (unsigned int)v28 != 104 && (unsigned int)v28 != 109 && (unsigned int)v28 != 114 && v28 > 102 && (unsigned int)v28 != -1 || (unsigned int)v28 != 102 && (unsigned int)v28 != 114 && v28 > 102 && v28 > 114 && (unsigned int)v28 != 128 && (unsigned int)v28 != -1 && (unsigned int)v28 != 116 || (unsigned int)v28 == -1 && (g_61831c == (unsigned int)v22 || v20 != 0) && (v35 == 0 || g_6183a2 == 0 || v20 != 0) && (g_61831c == (unsigned int)v22 || v19 != 0 || g_6183a2 != 0))\n        {\n            sub_4027e0(); /* do not return */\n        }\n    }\n    v69 = v66 ^ 1;\n    return v69;\n}\n"
        },
        {
            "funcName": "sub_40a450",
            "funcStartAddr": "0x40a450",
            "funcEndAddr": "0x40a470",
            "decompiledFuncCode": "int sub_40a450()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_402f10",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x402f18",
            "decompiledFuncCode": "extern unsigned long long g_6183b0;\n\nint sub_402f10()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6183b0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4099e0",
            "funcStartAddr": "0x4099e0",
            "funcEndAddr": "0x4099ef",
            "decompiledFuncCode": "extern int512_t g_6184c0;\n\nint sub_4099e0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6184c0 : v1));\n}\n"
        },
        {
            "funcName": "sub_40a6e0",
            "funcStartAddr": "0x40a6e0",
            "funcEndAddr": "0x40a758",
            "decompiledFuncCode": "int sub_40a6e0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b8b0",
            "funcStartAddr": "0x40b8b0",
            "funcEndAddr": "0x40b962",
            "decompiledFuncCode": "int sub_40b8b0()\n{\n    unsigned long|unsigned long long|char v0;  // [bp-0x30]\n    unsigned long long *v2;  // rdx\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rsi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rsi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n    unsigned long long *v13;  // rsi\n    unsigned long long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rdi\n\n    v5 = v4;\n    v7 = v6;\n    v8 = v2;\n    v9 = &v0;\n    v0 = *(v2);\n    v15 = v5();\n    if (v15 == 0)\n    {\n        v16 = *(v7);\n        v10 = 0;\n        if (*(v7) != 0)\n        {\n            while (true)\n            {\n                v11 = (v16 >> 1) + (v10 >> 1);\n                v12 = ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1);\n                if (v16 != v12 && v10 != ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1))\n                {\n                    break;\n                }\n                v0 = v12;\n                v13 = v2;\n                v14 = &v0;\n                v15 = r12<8>();\n                if (v15 == 0)\n                {\n                    v16 = v12;\n                    v12 = v10;\n                }\n                v10 = v12;\n            }\n            if (v15 == 0 && v10 != 0)\n            {\n                v0 = v10;\n                v17 = &v0;\n                return (long long)(stack_base)[-24]();\n            }\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 || v15 != 0 || v15 != 0)\n    {\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a590",
            "funcStartAddr": "0x40a590",
            "funcEndAddr": "0x40a604",
            "decompiledFuncCode": "extern unsigned int g_414732;\nextern unsigned int g_41475d;\nextern unsigned int g_414990;\n\nint sub_40a590()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x414732, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41475d, 0x5));\n    dcgettext(0x0, 0x414990, 0x5);\n}\n"
        },
        {
            "funcName": "sub_40b630",
            "funcStartAddr": "0x40b630",
            "funcEndAddr": "0x40b646",
            "decompiledFuncCode": "int sub_40b630()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40b570();\n}\n"
        },
        {
            "funcName": "sub_40a000",
            "funcStartAddr": "0x40a000",
            "funcEndAddr": "0x40a00a",
            "decompiledFuncCode": "int sub_40a000()\n{\n}\n"
        },
        {
            "funcName": "sub_403880",
            "funcStartAddr": "0x403880",
            "funcEndAddr": "0x403912",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[208];\n    unsigned long long field_d0;\n} struct_0;\n\nint sub_403880()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rbp\n    unsigned long v7;  // rdx\n\n    v1 = sub_40e2d0();\n    if (v2 != 0)\n    {\n        v3 = v1;\n        if ((unsigned int)v1 <= 99 && v2->field_d0 != 0)\n        {\n            sub_403290();\n            __snprintf_chk();\n            return v7;\n        }\n    }\n    if (v2 == 0 || v2->field_d0 == 0 || (unsigned int)v1 > 99)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_409fe0",
            "funcStartAddr": "0x409fe0",
            "funcEndAddr": "0x409ff3",
            "decompiledFuncCode": "int sub_409fe0()\n{\n}\n"
        },
        {
            "funcName": "sub_409ce0",
            "funcStartAddr": "0x409ce0",
            "funcEndAddr": "0x409cf6",
            "decompiledFuncCode": "int sub_409ce0()\n{\n}\n"
        },
        {
            "funcName": "sub_409a00",
            "funcStartAddr": "0x409a00",
            "funcEndAddr": "0x409a33",
            "decompiledFuncCode": "extern int512_t g_6184c0;\n\nint sub_409a00()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6184c0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6184c0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_409fc0",
            "funcStartAddr": "0x409fc0",
            "funcEndAddr": "0x409fd7",
            "decompiledFuncCode": "int sub_409fc0()\n{\n}\n"
        },
        {
            "funcName": "sub_409e90",
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409e9d",
            "decompiledFuncCode": "int sub_409e90()\n{\n}\n"
        },
        {
            "funcName": "sub_4034c0",
            "funcStartAddr": "0x4034c0",
            "funcEndAddr": "0x403523",
            "decompiledFuncCode": "int sub_4034c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a6b0",
            "funcStartAddr": "0x40a6b0",
            "funcEndAddr": "0x40a6d1",
            "decompiledFuncCode": "int sub_40a6b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_40a860(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402cb0",
            "funcStartAddr": "0x402cb0",
            "funcEndAddr": "0x402d1c",
            "decompiledFuncCode": "extern unsigned int g_411a25;\nextern unsigned int g_411a40;\n\nint sub_402cb0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x411a25, 0x5);\n    }\n    dcgettext(0x0, 0x411a40, 0x5);\n    sub_40a030();\n    sub_409d20();\n}\n"
        },
        {
            "funcName": "sub_40a070",
            "funcStartAddr": "0x40a070",
            "funcEndAddr": "0x40a419",
            "decompiledFuncCode": "extern unsigned int g_4146eb;\nextern unsigned int g_4146ef;\nextern unsigned int g_4146ff;\nextern unsigned int g_414716;\nextern unsigned int g_414778;\nextern unsigned int g_414848;\nextern unsigned int g_414868;\nextern unsigned int g_414890;\nextern unsigned int g_4148b8;\nextern unsigned int g_4148e8;\n\nint sub_40a070()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x4146eb, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414778, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4146ef, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4146ff, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x414716, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x414848, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x414868, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x414890, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x4148b8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x4148e8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_403390",
            "funcStartAddr": "0x403390",
            "funcEndAddr": "0x4033fe",
            "decompiledFuncCode": "int sub_403390() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409a40",
            "funcStartAddr": "0x409a40",
            "funcEndAddr": "0x409a53",
            "decompiledFuncCode": "extern int512_t g_6184c0;\n\nint sub_409a40()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6184c0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6184c0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403040",
            "funcStartAddr": "0x403040",
            "funcEndAddr": "0x4030c7",
            "decompiledFuncCode": "int sub_403040()\n{\n    unsigned int v1;  // edi\n    unsigned long v2;  // rdx\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rdx\n    unsigned int *v5;  // rax\n    unsigned long v6;  // rsi\n    unsigned int v7;  // r8d\n\n    if (v1 < 0)\n    {\n    }\n    else\n    {\n        v3 = futimens();\n        if (v4 != 0 && (unsigned int)v3 == -1)\n        {\n            v5 = __errno_location();\n            if (*(v5) != 38)\n            {\n                return -18446744069414584321;\n            }\n        }\n    }\n    if (v1 >= 0 || v2 != 0)\n    {\n        if ((v1 < 0 || *(v5) == 38) && (v1 < 0 || (unsigned int)v3 == -1) && (v1 < 0 || v4 != 0))\n        {\n            v3 = utimensat(v6, v7, v7, v7);\n        }\n        if ((unsigned int)v3 != 1 && (v4 == 0 || v1 < 0 || *(v5) == 38 || (unsigned int)v3 != -1))\n        {\n            return v3;\n        }\n    }\n    if (v4 == 0 && (unsigned int)v3 == 1 || v1 < 0 && (unsigned int)v3 == 1 || v1 < 0 && v2 == 0 || *(v5) == 38 && (unsigned int)v3 == 1 || (unsigned int)v3 == 1 && (unsigned int)v3 != -1)\n    {\n        *(__errno_location()) = 9;\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b610",
            "funcStartAddr": "0x40b610",
            "funcEndAddr": "0x40b625",
            "decompiledFuncCode": "int sub_40b610()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40afa0();\n}\n"
        },
        {
            "funcName": "sub_403630",
            "funcStartAddr": "0x403630",
            "funcEndAddr": "0x4036ce",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[232];\n    unsigned long long field_e8;\n} struct_0;\n\nextern unsigned long long g_412dc0;\nextern unsigned long long g_4130c0;\n\nint sub_403630()\n{\n    unsigned long long v1;  // rdi\n    struct_0 *v2;  // r12\n    char *v3;  // rsi\n    char *v4;  // rbp\n    unsigned long long v5;  // rax\n    char *v6;  // rsi\n    char *v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long *v10;  // rbx\n    char *v11;  // rsi\n    unsigned long long *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long *v14;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v6 = \"GMT\";\n    v10 = &g_4130c0;\n    while (true)\n    {\n        v5 = strcmp(v4, v6);\n        if (v5 == 0)\n        {\n            break;\n        }\n        v10 = &v10[2];\n        v6 = *(v10);\n        v7 = v2->field_e8;\n        v8 = &v2->field_e8;\n        if (v2->field_e8 != 0)\n        {\n            while (true)\n            {\n                v9 = strcmp(v4, v7);\n                if (v9 != 0)\n                {\n                    v8 = &v8[2];\n                    v7 = *(v8);\n                    if (*(v8) == 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v12 = v8;\n                    return v12;\n                }\n            }\n        }\n        v10 = &g_412dc0;\n        v11 = \"WET\";\n        while (true)\n        {\n            v13 = strcmp(v4, v11);\n            if (v13 != 0)\n            {\n                v10 = &v10[2];\n                v11 = *(v10);\n                return 0;\n            }\n        }\n    }\n    v14 = v10;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_409fb0",
            "funcStartAddr": "0x409fb0",
            "funcEndAddr": "0x409fb9",
            "decompiledFuncCode": "int sub_409fb0()\n{\n}\n"
        },
        {
            "funcName": "sub_409a60",
            "funcStartAddr": "0x409a60",
            "funcEndAddr": "0x409a8b",
            "decompiledFuncCode": "extern char g_6184c0;\n\nint sub_409a60()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6184c0 : v2);\n    *((int *)(tmp_11? &g_6184c0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6184c0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_6184c0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40c370",
            "funcStartAddr": "0x40c370",
            "funcEndAddr": "0x40c429",
            "decompiledFuncCode": "int sub_40c370()\n{\n    unsigned long long v0;  // [bp-0x800]\n    void *v2;  // rax\n    unsigned long long v3;  // rbx\n    void *v4;  // rbp\n    void *v5;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    v0 = 2000;\n    v2 = sub_40e420();\n    v3 = v0;\n    if (false)\n    {\n        *(__errno_location()) = 75;\n    }\n    if (stack_base + 0 != 0)\n    {\n        v4 = v2;\n        if (!(fwrite(v2, 0x1, 0x7d0, v5) >= 2000))\n        {\n            v3 = -18446744069414584321;\n            if (v4 != stack_base + -2040)\n            {\n                free(v4);\n                *(__errno_location()) = *(v7);\n            }\n        }\n        else if (v4 != stack_base + -2040)\n        {\n            free(v4);\n        }\n    }\n    else\n    {\n        v3 = -18446744069414584321;\n        sub_40e410();\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_403570",
            "funcStartAddr": "0x403570",
            "funcEndAddr": "0x403612",
            "decompiledFuncCode": "int sub_403570()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r9\n    unsigned long v3;  // rcx\n    unsigned int v4;  // ecx\n    char v6;  // cl\n    char v7;  // sil\n    unsigned long long v8;  // rcx\n    unsigned long long v9;  // r9\n    unsigned long v10;  // r8\n    char v11;  // dl\n    unsigned long v12;  // r8\n    unsigned long long v13;  // rax\n    unsigned int v14;  // r9d\n    unsigned int *v15;  // rdi\n\n    v2 = v1;\n    if (v3 <= 2)\n    {\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v8 = 0;\n        }\n    }\n    else\n    {\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v2 = ((v2 * 11805916207174113035 >> 64) + v2 >> 6) - (v2 >> 63);\n            v8 = v1 - (((v1 * 11805916207174113035 >> 64) + v1 >> 6) - (v1 >> 63)) * 100;\n        }\n    }\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = 0;\n        v6 = [D] amd64g_calculate_condition(0x0<64>, 0x34<64>, rdx<8>, 0x3c<64>, cc_ndep<8>);\n        if (v7 == 0)\n        {\n            v9 = v1 * 60 + v10;\n            v11 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Mul(rdx<8>, 0x3c<64>), r8<8>, cc_ndep<8>);\n        }\n        else\n        {\n            v1 = 0;\n            v9 = v1 * 60 - v12;\n            v11 = ((v9 ^ v12) & (v9 ^ v9 - v12)) >> 63;\n        }\n        v13 = 0;\n    }\n    else\n    {\n        v9 = v8 + v2 * 60;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r8<8>, 0x0<64>, cc_ndep<8>) || v11 == 0 && rcx<4> == 0)\n    {\n        v13 = 0;\n        if (v9 + 1440 <= 2880)\n        {\n            v14 = (unsigned int)v9 * 60;\n            v13 = 1;\n            *(v15) = v14;\n        }\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_409a90",
            "funcStartAddr": "0x409a90",
            "funcEndAddr": "0x409b02",
            "decompiledFuncCode": "extern int512_t g_6184c0;\n\nint sub_409a90()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6184c0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4085d0();\n}\n"
        },
        {
            "funcName": "sub_4099a0",
            "funcStartAddr": "0x4099a0",
            "funcEndAddr": "0x4099d4",
            "decompiledFuncCode": "int sub_4099a0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_40a810();\n}\n"
        },
        {
            "funcName": "sub_409ea0",
            "funcStartAddr": "0x409ea0",
            "funcEndAddr": "0x409eb1",
            "decompiledFuncCode": "int sub_409ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c350",
            "funcStartAddr": "0x40c350",
            "funcEndAddr": "0x40c366",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned int field_20;\n} struct_0;\n\nint sub_40c350()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_20 = 0;\n}\n"
        },
        {
            "funcName": "sub_40bdd0",
            "funcStartAddr": "0x40bdd0",
            "funcEndAddr": "0x40be10",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nextern unsigned int g_411eae;\n\nint sub_40bdd0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    if (v1->field_8 == 0)\n    {\n        v2 = unsetenv(0x411eae);\n    }\n    else\n    {\n        v2 = setenv(0x411eae, (unsigned int)v1 + 9, 0x1);\n    }\n    v3 = 0;\n    if (v2 == 0)\n    {\n        tzset();\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40b5f0",
            "funcStartAddr": "0x40b5f0",
            "funcEndAddr": "0x40b603",
            "decompiledFuncCode": "int sub_40b5f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40b570();\n}\n"
        },
        {
            "funcName": "sub_40e410",
            "funcStartAddr": "0x40e410",
            "funcEndAddr": "0x40e414",
            "decompiledFuncCode": "int sub_40e410()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = *(v1) | 32;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b650",
            "funcStartAddr": "0x40b650",
            "funcEndAddr": "0x40b668",
            "decompiledFuncCode": "int sub_40b650()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40afa0();\n}\n"
        },
        {
            "funcName": "sub_4085d0",
            "funcStartAddr": "0x4085d0",
            "funcEndAddr": "0x409708",
            "decompiledFuncCode": "int sub_4085d0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long|unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long|unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4084d0();\n            v27 = (unsigned long long)(unsigned int)sub_4084d0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                    if (v4 == 0)\n                                    {\n                                        v55 = 0;\n                                        v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                                        v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                                        v78 = 0;\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v89 = (unsigned int)v39 == 2;\n                                        v89 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v40 = v45;\n                                        v78 = 0;\n                                        v87 = v89;\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                        if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        *((unsigned long long *)&v4) = v4 & v87;\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_4085d0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40b670();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v46 != 1 && v17 != 0)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && (unsigned int)v46 != 0 && v46 != -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v63 == 0 || v89 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_4085d0();\n            }\n            if (v17 == 0 && v4 != 0 || v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v4 == 0 && v5 == 0 || (v15 != 1 || v89 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && v6 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ca60",
            "funcStartAddr": "0x40ca60",
            "funcEndAddr": "0x40caa1",
            "decompiledFuncCode": "int sub_40ca60()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_tolower_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40e3b0",
            "funcStartAddr": "0x40e3b0",
            "funcEndAddr": "0x40e406",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40e3b0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4036f0",
            "funcStartAddr": "0x4036f0",
            "funcEndAddr": "0x403866",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[104];\n    unsigned long long field_68;\n    unsigned long long field_70;\n    unsigned long long field_78;\n    unsigned long long field_80;\n    unsigned long long field_88;\n    unsigned long long field_90;\n    unsigned int field_98;\n} struct_0;\n\nextern unsigned int g_411abb;\nextern unsigned int g_411acc;\n\nint sub_4036f0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // rbx\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rdi\n\n    v0 = v2;\n    v4 = v3;\n    dcgettext(0x0, 0x411abb, 0x5);\n    sub_403400();\n    if (!(v3->field_68 == 0))\n    {\n        v6 = (unsigned int)sub_403530();\n        if (v3->field_70 == 0)\n        {\n            v3 = v3->field_78;\n        }\n    }\n    else if (v3->field_70 == 0)\n    {\n        if (v3->field_78 == 0 && v3->field_80 == 0 && v3->field_88 == 0 && v3->field_90 == 0 && v3->field_98 == 0)\n        {\n            dcgettext(0x0, 0x411acc, 0x5);\n        }\n    }\n    if (v3->field_68 == 0 && v3->field_70 != 0 || v3->field_68 != 0 && v3->field_70 != 0)\n    {\n        v7 = (unsigned int)sub_403530();\n    }\n    if (v3->field_68 != 0 && v3 != 0 || v3 != 0 && v3->field_70 != 0 || v3->field_68 == 0 && v3->field_70 == 0 && v3->field_78 != 0)\n    {\n        v8 = (unsigned int)sub_403530();\n    }\n    if (v3->field_68 != 0 || v3->field_88 != 0 || v3->field_70 != 0 || v3->field_80 != 0 || v3->field_98 != 0 || v3->field_90 != 0 || v3->field_78 != 0)\n    {\n        if (v4->field_80 != 0)\n        {\n            v9 = (unsigned int)sub_403530();\n        }\n        if (v4->field_88 != 0)\n        {\n            v10 = (unsigned int)sub_403530();\n        }\n        if (v4->field_90 != 0)\n        {\n            v11 = (unsigned int)sub_403530();\n        }\n        if (v4->field_98 != 0)\n        {\n            sub_403530();\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40c230",
            "funcStartAddr": "0x40c230",
            "funcEndAddr": "0x40c335",
            "decompiledFuncCode": "int sub_40c230()\n{\n    unsigned long long v0;  // [bp-0x60]\n    char v1;  // [bp-0x58]\n    unsigned int v2;  // [bp-0x54]\n    unsigned int v3;  // [bp-0x50]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned int v5;  // [bp-0x48]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x38]\n    unsigned int v9[9];  // rsi\n    unsigned long v11;  // rdi\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    if (v11 != 0)\n    {\n        v12 = (unsigned int)sub_40c0b0();\n        if (v12 != 0)\n        {\n            v0 = (unsigned int)sub_40bdb0();\n            if (v0 == -1)\n            {\n                v13 = localtime_r((unsigned int)&v0, (unsigned int)&v1);\n            }\n            if ((v0 == -1 && v13 != 0 && (v9[4] < 0 || v9[4] == 0 == v7 == 0 || v7 < 0) && (v9[2] ^ v5) == 0 && (v9[2 + 1] ^ v6) == 0 && (v9[1 + 1] ^ v4) == 0 && (v9[1] ^ v3) == 0 && (v9[1] ^ v2) == 0 && (v9[0] ^ *((int *)&v1)) == 0 || v0 != -1) && sub_40bf30() == 0)\n            {\n                v0 = -1;\n            }\n            if (v12 != 1)\n            {\n                v15 = sub_40be50();\n            }\n        }\n        if (v12 == 0 || v15 == 0 && v12 != 1)\n        {\n            v16 = -1;\n        }\n        if (v12 == 1 || v12 != 0 && v15 != 0)\n        {\n            v16 = v0;\n        }\n        return v16;\n    }\n    return sub_40c350();\n}\n"
        },
        {
            "funcName": "sub_40a4d0",
            "funcStartAddr": "0x40a4d0",
            "funcEndAddr": "0x40a588",
            "decompiledFuncCode": "int sub_40a4d0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_40a070();\n    }\n}\n"
        },
        {
            "funcName": "sub_409c00",
            "funcStartAddr": "0x409c00",
            "funcEndAddr": "0x409c0a",
            "decompiledFuncCode": "int sub_409c00()\n{\n}\n"
        },
        {
            "funcName": "sub_403530",
            "funcStartAddr": "0x403530",
            "funcEndAddr": "0x403565",
            "decompiledFuncCode": "int sub_403530()\n{\n    __fprintf_chk();\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40c4f0",
            "funcStartAddr": "0x40c4f0",
            "funcEndAddr": "0x40ca44",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_414b94;\nextern char g_618548[2];\n\nint sub_40c4f0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // rdx\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rbp\n    unsigned long long v72;  // rax\n\n    v9 = g_618548;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_414b94 : (unsigned long long)nl_langinfo(0xe));\n    if (g_618548 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_414b94;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                        {\n                            ungetc(v27, v10);\n                            v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v29 > 1)\n                            {\n                                v30 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v30 = &v4;\n                                    v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v33 = &v5;\n                                v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v33 = &v6;\n                                    v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v34;\n                                tmp_56 = (unsigned int)v35 % 0x10000;\n                                v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v37 + 2;\n                                    v38 = malloc(v37 + 3);\n                                    v40 = v1;\n                                    v41 = v2;\n                                }\n                                else\n                                {\n                                    v39 = v37 + v0 + 3;\n                                    v0 = v37 + v0 + 2;\n                                    v38 = realloc(NULL, v39);\n                                    v41 = v2;\n                                    v40 = v1;\n                                }\n                                if (v38 != 0)\n                                {\n                                    tmp_1 = -2 - v40;\n                                    v42 = v40 + 1;\n                                    v43 = v0 - v41;\n                                    v44 = tmp_1 + v0 - v41 + v38;\n                                    if ((unsigned int)v42 >= 8)\n                                    {\n                                        *((long long *)v44) = *((long long *)&v3);\n                                        *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                        v45 = v44 + 8 & -8;\n                                        v44 -= v44 + 8 & -8;\n                                        v46 = &(&v3)[-1 * v44];\n                                        v47 = (unsigned int)(v42 + v44) & -8;\n                                        if (v47 >= 8)\n                                        {\n                                            v44 = 0;\n                                            do\n                                            {\n                                                v49 = v44;\n                                                v44 = (unsigned int)v44 + 8;\n                                                *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                            }\n                                            while ((unsigned int)v44 < (v47 & -8));\n                                        }\n                                    }\n                                    else if ((v42 & 4) != 0)\n                                    {\n                                        *((int *)v44) = *((int *)&v3);\n                                        *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                    }\n                                    else if ((unsigned int)v42 != 0)\n                                    {\n                                        *((char *)v44) = v3;\n                                        if ((v42 & 2) != 0)\n                                        {\n                                            *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                        }\n                                    }\n                                    v64 = v41 + 1;\n                                    v50 = v38 + v43 - 1;\n                                    if ((unsigned int)v44 >= 8)\n                                    {\n                                        *((long long *)v50) = *((long long *)&v5);\n                                        v44 = v64;\n                                        *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                        v53 = v50 - (v50 + 8 & -8);\n                                        v55 = (unsigned int)(v44 + v53) & -8;\n                                        if (v55 >= 8)\n                                        {\n                                            v58 = 0;\n                                            do\n                                            {\n                                                v59 = v58;\n                                                v58 = (unsigned int)v58 + 8;\n                                                *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                            }\n                                            while ((unsigned int)v58 < (v55 & -8));\n                                        }\n                                    }\n                                    else if (((char)v44 & 4) != 0)\n                                    {\n                                        *((int *)v50) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v44 != 0)\n                                    {\n                                        *((char *)v50) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v38;\n                                    v60 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_414b94;\n                                    v10 = (tmp_10 == 0? &g_414b94 : tmp_10);\n                                    free(NULL);\n                                    sub_40e2f0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1 && v38 != 0)\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if ((unsigned int)v27 == 35)\n                        {\n                            do\n                            {\n                                v62 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v62[1];\n                                    v63 = *(v62);\n                                    v64 = 1;\n                                }\n                                else\n                                {\n                                    v63 = __uflow(v10);\n                                    v64 = (char)(v63 != -1);\n                                }\n                            }\n                            while (v63 != 10 && v64 != 0);\n                        }\n                        if ((unsigned int)v27 == 35 && v63 == -1 || (unsigned int)v61 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v61 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v29 <= 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                        {\n                            v10 = (tmp_10 == 0? &g_414b94 : tmp_10);\n                            sub_40e2f0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (unsigned int)(v27 - 9) > 1 && v63 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (unsigned int)(v27 - 9) > 1 && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1)\n                    {\n                        v9 = &g_414b94;\n                    }\n                    else if (((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (unsigned int)(v27 - 9) > 1 && v63 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (unsigned int)(v27 - 9) > 1 && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1) && v0 != 0 || v38 == 0 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1 && (unsigned int)(v27 - 9) > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_414b94;\n            free(v17);\n        }\n        *((char *[2])&g_618548[0]) = v9;\n    }\n    v68 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v69 = strcmp((tmp_10 == 0? &g_414b94 : tmp_10), v9);\n            if (v69 != 0 && (v68 != 42 || v9[1] != 0))\n            {\n                v70 = strlen(v9);\n                v71 = &((char [2])&v9[v70])[1];\n                v72 = strlen(&((char [2])&v9[v70])[1]);\n                v9 = v71 + v72 + 1;\n                v68 = (char)*((char *)(v71 + v72 + 1));\n                if (v68 == 0)\n                {\n                    break;\n                }\n            }\n            if (v69 == 0 || v68 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_402ec0",
            "funcStartAddr": "0x402ec0",
            "funcEndAddr": "0x402f0c",
            "decompiledFuncCode": "int sub_402ec0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40e420",
            "funcStartAddr": "0x40e420",
            "funcEndAddr": "0x40fe39",
            "decompiledFuncCode": "int sub_40e420() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a610",
            "funcStartAddr": "0x40a610",
            "funcEndAddr": "0x40a62a",
            "decompiledFuncCode": "int sub_40a610()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_40a860(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a030",
            "funcStartAddr": "0x40a030",
            "funcEndAddr": "0x40a041",
            "decompiledFuncCode": "int sub_40a030()\n{\n}\n"
        },
        {
            "funcName": "sub_40c180",
            "funcStartAddr": "0x40c180",
            "funcEndAddr": "0x40c216",
            "decompiledFuncCode": "int sub_40c180()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // r13\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = (unsigned int)sub_40c0b0();\n        if (v2 != 0)\n        {\n            v5 = localtime_r(v3, v4);\n            if (v5 != 0)\n            {\n                v6 = sub_40bf30();\n                if (v6 != 0)\n                {\n                    if (v2 != 1)\n                    {\n                        v8 = sub_40be50();\n                    }\n                    if (v2 == 1 || v8 != 0)\n                    {\n                        return v4;\n                    }\n                }\n            }\n            if ((v5 == 0 || v6 == 0) && v2 != 1)\n            {\n                sub_40be50();\n            }\n        }\n        if (v5 == 0 || v2 == 0 || v6 == 0 || v8 == 0 && v2 != 1)\n        {\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a050",
            "funcStartAddr": "0x40a050",
            "funcEndAddr": "0x40a066",
            "decompiledFuncCode": "int sub_40a050()\n{\n}\n"
        },
        {
            "funcName": "sub_40e370",
            "funcStartAddr": "0x40e370",
            "funcEndAddr": "0x40e3ab",
            "decompiledFuncCode": "int sub_40e370()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40e3b0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40c490",
            "funcStartAddr": "0x40c490",
            "funcEndAddr": "0x40c4e6",
            "decompiledFuncCode": "int sub_40c490()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c0b0",
            "funcStartAddr": "0x40c0b0",
            "funcEndAddr": "0x40c14f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_40c0b0()\n{\n    char *v1;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    v1 = getenv(\"TZ\");\n    if (v1 != 0)\n    {\n        if (v3->field_8 != 0)\n        {\n            v4 = strcmp(&v3[1], v1);\n            if (v4 == 0)\n            {\n                return 1;\n            }\n        }\n    }\n    else\n    {\n        if (v3->field_8 == 0)\n        {\n            return 1;\n        }\n    }\n    if (v1 == 0 && v3->field_8 != 0 || v3->field_8 == 0 && v1 != 0 || v1 != 0 && v4 != 0)\n    {\n        if (v4 != 0)\n        {\n            v6 = sub_40bdd0();\n            if (v6 == 0)\n            {\n                v8 = __errno_location();\n                if (v8 != 1)\n                {\n                    sub_40be20();\n                }\n                *(v8) = *(v8);\n                return 0;\n            }\n        }\n        if (v4 == 0 || v6 != 0)\n        {\n            v4 = (unsigned int)sub_40bea0();\n            return v7;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_402b90",
            "funcStartAddr": "0x402b90",
            "funcEndAddr": "0x402c93",
            "decompiledFuncCode": "int sub_402b90()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (v0 == -1 || *((long long *)(v5 + (v12 << 3))) == 0) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_4084d0",
            "funcStartAddr": "0x4084d0",
            "funcEndAddr": "0x4085af",
            "decompiledFuncCode": "extern int512_t g_41398c;\nextern int512_t g_413990;\n\nint sub_4084d0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40c4f0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41398c : 4274583);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_413990 : 4274579);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e2f0",
            "funcStartAddr": "0x40e2f0",
            "funcEndAddr": "0x40e368",
            "decompiledFuncCode": "int sub_40e2f0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40e370() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40b6f0",
            "funcStartAddr": "0x40b6f0",
            "funcEndAddr": "0x40b807",
            "decompiledFuncCode": "int sub_40b6f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402741",
            "funcStartAddr": "0x402741",
            "funcEndAddr": "0x402798",
            "decompiledFuncCode": "extern char g_618348;\nextern unsigned long long g_618350;\n\nint sub_402741()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_618348 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_618350 >= 0)\n            {\n                break;\n            }\n            g_618350 = g_618350 + 1;\n            *((long long *)(6389312 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_618348 = 1;\n        return sub_4026eb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b670",
            "funcStartAddr": "0x40b670",
            "funcEndAddr": "0x40b6df",
            "decompiledFuncCode": "extern unsigned long long g_414b94;\n\nint sub_40b670()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_414b94;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40c490() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4027e0",
            "funcStartAddr": "0x4027e0",
            "funcEndAddr": "0x402b7d",
            "decompiledFuncCode": "extern unsigned int g_410fc0;\nextern unsigned int g_411108;\nextern unsigned int g_411130;\nextern unsigned int g_411150;\nextern unsigned int g_411278;\nextern unsigned int g_4112c8;\nextern unsigned int g_4113a0;\nextern unsigned int g_4114a8;\nextern unsigned int g_411600;\nextern unsigned int g_411630;\nextern unsigned int g_411668;\nextern unsigned int g_4116d8;\nextern unsigned int g_411720;\nextern unsigned int g_411740;\nextern unsigned long long stdout;\n\nint sub_4027e0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v30[2];  // rax\n    char *v31;  // rdi\n    char *v32;  // rsi\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // cc_dep1\n    unsigned long long v35;  // cc_dep2\n    unsigned long v36;  // d\n    char *v40;  // rax\n    char *v41;  // rax\n    unsigned long long v42;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x411108, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411130, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411150, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411278, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4112c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4113a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4114a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411600, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411630, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411668, 0x5), stdout);\n        v0 = \"[\";\n        v30 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v30 = &v2;\n            v31 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v32 = \"touch\";\n            v33 = 6;\n            if ((v34 > v35) - 0 - (v34 < v35) == 0)\n            {\n                break;\n            }\n            while (v33 != 0)\n            {\n                v33 -= 1;\n                v34 = *(v32);\n                v35 = *(v31);\n                v31 = &v31[v36];\n                v32 = &v32[v36];\n                break;\n            }\n        }\n        if (v30[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x410fc0, 0x5));\n            v41 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x410fc0, 0x5));\n            v40 = setlocale(0x5, 0x0);\n            if (v40 != 0)\n            {\n                v42 = strncmp(v40, \"en_\", 0x3);\n            }\n            if (v42 == 0 || v40 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411720, 0x5));\n            }\n        }\n        if ((v30[1] == 0 || strncmp(v41, \"en_\", 0x3) != 0) && (v30[1] == 0 || v41 != 0) && (v42 != 0 || v30[1] != 0) && (v30[1] != 0 || v40 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4116d8, 0x5));\n        }\n        if (v30[1] != 0 || v42 != 0 && v40 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411720, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411740, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a7c0",
            "funcStartAddr": "0x40a7c0",
            "funcEndAddr": "0x40a7d7",
            "decompiledFuncCode": "int sub_40a7c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_40a610();\n}\n"
        },
        {
            "funcName": "sub_4027a0",
            "funcStartAddr": "0x4027a0",
            "funcEndAddr": "0x4027df",
            "decompiledFuncCode": "extern unsigned int g_410f44;\n\nint sub_4027a0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rbx\n\n    v1 = sub_408000();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    v2 = (unsigned int)sub_40a050();\n    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x410f44, 0x5));\n}\n"
        },
        {
            "funcName": "sub_403290",
            "funcStartAddr": "0x403290",
            "funcEndAddr": "0x403381",
            "decompiledFuncCode": "int sub_403290() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b570",
            "funcStartAddr": "0x40b570",
            "funcEndAddr": "0x40b5c6",
            "decompiledFuncCode": "extern unsigned int g_618314;\nextern unsigned int g_618318;\nextern unsigned int g_61831c;\nextern unsigned int g_618500;\nextern unsigned int g_618504;\nextern unsigned int g_618508;\nextern unsigned long long g_618510;\nextern unsigned long long g_618550;\n\nint sub_40b570()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_618500 = g_61831c;\n    g_618504 = g_618318;\n    v1 = (unsigned int)v2;\n    v0 = &g_618500;\n    g_61831c = g_618500;\n    g_618550 = g_618510;\n    g_618314 = g_618508;\n    return sub_40afa0();\n}\n"
        },
        {
            "funcName": "sub_402fd0",
            "funcStartAddr": "0x402fd0",
            "funcEndAddr": "0x403033",
            "decompiledFuncCode": "int sub_402fd0()\n{\n    char *v1;  // rsi\n    unsigned int v2;  // edx\n    unsigned short v3;  // cx\n    unsigned int v5;  // edi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    if (v5 != (unsigned int)v6 && (unsigned int)v6 >= 0)\n    {\n        v8 = __errno_location();\n        close((unsigned int)v8);\n        *(v8) = *(v8);\n        return dup2(v6, v5);\n    }\n    if (v5 == (unsigned int)v6 || (unsigned int)v6 < 0)\n    {\n        v6 = (unsigned int)open(v1, v2, v3);\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bea0",
            "funcStartAddr": "0x40bea0",
            "funcEndAddr": "0x40bf2a",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned short field_8;\n} struct_1;\n\nint sub_40bea0()\n{\n    void *v1;  // rdi\n    unsigned long long v2;  // rax\n    struct_1 *v3;  // rbx\n    unsigned long v4;  // rbp\n    struct_1 *v5;  // rax\n    struct_1 *v7;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = strlen(v1);\n        v4 = v2 + 1;\n        v3 = malloc((118 <= v2 + 1? v2 + 1 : 118) + 17 & -8);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v3->field_8 = 1;\n            memcpy((char *)&v3->field_8 + 1, v1, v4);\n            *(&((char *)&v3->field_0)[9 + v4]) = 0;\n        }\n    }\n    else\n    {\n        v3 = malloc(0x80);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v5 = v3;\n            v3->field_8 = 0;\n            return v5;\n        }\n    }\n    if (v3 == 0 || v1 != 0)\n    {\n        v7 = v3;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_403920",
            "funcStartAddr": "0x403920",
            "funcEndAddr": "0x403a08",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[204];\n    char field_e0;\n} struct_0;\n\nint sub_403920()\n{\n    struct_0 *v1;  // rdi\n    char *v3;  // rsi\n    char *v4;  // rsi\n    unsigned long long v5;  // rax\n\n    if (!(v1->field_e0 != 0))\n    {\n        *(v3) = 0;\n    }\n    else if (v1->field_8 + 1 <= 13)\n    {\n        v5 = snprintf(v4, 0x64, \"%s\", (unsigned int)(char *)(4270987 + 11 * v1->field_8));\n    }\n    else\n    {\n        __snprintf_chk();\n    }\n    if (v1->field_e0 == 0 && v1->field_10 > 6 || v1->field_8 + 1 <= 13 && (unsigned int)v5 > 99 && v1->field_e0 != 0 || v1->field_8 + 1 <= 13 && v1->field_e0 != 0 && v1->field_10 > 6 || v1->field_10 > 6 && v1->field_e0 != 0 && v1->field_8 + 1 > 13)\n    {\n        return stack_base + 0;\n    }\n    __snprintf_chk();\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_409f40",
            "funcStartAddr": "0x409f40",
            "funcEndAddr": "0x409fac",
            "decompiledFuncCode": "extern uint128_t g_6184c0;\nextern uint128_t g_6184d0;\nextern uint128_t g_6184e0;\nextern unsigned long long g_6184f0;\n\nint sub_409f40()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6184c0;\n    *((uint128_t *)&v1) = g_6184d0;\n    *((uint128_t *)&v2) = g_6184e0;\n    v4 = g_6184f0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_409800();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40a980",
            "funcStartAddr": "0x40a980",
            "funcEndAddr": "0x40af7e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_2 *field_20;\n} struct_1;\n\nextern unsigned int g_414a80;\nextern unsigned int g_414aa0;\nextern unsigned int g_414ad0;\nextern unsigned int g_414af0;\nextern unsigned int g_414b20;\nextern unsigned long long stderr;\n\nint sub_40a980()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_1 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_2 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x414a80, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x414aa0, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 += 32;\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (*(v18) == 0 || v22 == v16) && (v22 == v16 || v4 == 0) && (v22 == v16 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x414b20, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x414af0, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v17) != 0 || v34 != 0))\n        {\n            return v42;\n        }\n    }\n    if (*((long long *)v17) == 0 && v28 == 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0 || v34 == 0 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x414ad0, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b5d0",
            "funcStartAddr": "0x40b5d0",
            "funcEndAddr": "0x40b5e8",
            "decompiledFuncCode": "int sub_40b5d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40b570();\n}\n"
        },
        {
            "funcName": "sub_40c160",
            "funcStartAddr": "0x40c160",
            "funcEndAddr": "0x40c16c",
            "decompiledFuncCode": "int sub_40c160()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rax\n\n    if (v1 == 1)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40cab0",
            "funcStartAddr": "0x40cab0",
            "funcEndAddr": "0x40caf1",
            "decompiledFuncCode": "int sub_40cab0()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40afa0",
            "funcStartAddr": "0x40afa0",
            "funcEndAddr": "0x40b507",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_414b48;\nextern unsigned int g_414b79;\n\nint sub_40afa0()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[2];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long long *v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char *v53;  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_40a8a0();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_40a8a0();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v46;\n                    *((unsigned long long **)&v0->field_0) = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = (unsigned long long)v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 != (unsigned int)v26 && v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_40a980();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x414b48, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x414b79, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x414b48, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_40a980();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_409d90",
            "funcStartAddr": "0x409d90",
            "funcEndAddr": "0x409df9",
            "decompiledFuncCode": "int sub_409d90()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_409800();\n}\n"
        },
        {
            "funcName": "sub_40a810",
            "funcStartAddr": "0x40a810",
            "funcEndAddr": "0x40a838",
            "decompiledFuncCode": "int sub_40a810()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_40a610();\n}\n"
        },
        {
            "funcName": "sub_402f20",
            "funcStartAddr": "0x402f20",
            "funcEndAddr": "0x402f28",
            "decompiledFuncCode": "extern char g_6183a8;\n\nint sub_402f20()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_6183a8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403db0",
            "funcStartAddr": "0x403db0",
            "funcEndAddr": "0x405fb9",
            "decompiledFuncCode": "typedef struct struct_10 {\n    uint128_t field_0;\n    uint128_t field_10;\n    uint128_t field_20;\n    unsigned long long field_30;\n} struct_10;\n\ntypedef struct struct_11 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned int field_c;\n} struct_11;\n\ntypedef struct struct_12 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned int field_18;\n    unsigned int field_1c;\n} struct_12;\n\ntypedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n    char padding_39[7];\n    unsigned long long field_40;\n    char field_48;\n    char padding_49[7];\n    unsigned long long field_50;\n    char field_58;\n    char padding_59[7];\n    unsigned long long field_60;\n    char field_68;\n} struct_0;\n\nextern unsigned int g_411bbb;\nextern unsigned int g_411bd5;\nextern unsigned int g_411c08;\nextern unsigned int g_4120f8;\nextern unsigned int g_412130;\nextern unsigned long long g_412c20;\nextern unsigned long long g_413100;\nextern char g_413260;\nextern char g_413320;\nextern unsigned long long g_4134c0;\nextern int512_t g_413520;\nextern int512_t g_413580;\nextern char g_4135e0;\nextern char g_413660;\nextern int512_t g_4136e0;\nextern int512_t g_413700;\nextern int512_t g_413720;\nextern int512_t g_4137a0;\nextern int512_t g_413820;\n\nint sub_403db0()\n{\n    void tmp_24;  // tmp #24\n    void tmp_26;  // tmp #26\n    void tmp_37;  // tmp #37\n    void tmp_5;  // tmp #5\n    void tmp_9;  // tmp #9\n    void tmp_117;  // tmp #117\n    void tmp_259;  // tmp #259\n    unsigned long long v0;  // [bp-0x608]\n    void tmp_120;  // tmp #120\n    void tmp_256;  // tmp #256\n    void tmp_1;  // tmp #1\n    void tmp_7;  // tmp #7\n    void tmp_113;  // tmp #113\n    void tmp_249;  // tmp #249\n    void tmp_14;  // tmp #14\n    void tmp_62;  // tmp #62\n    void tmp_11;  // tmp #11\n    unsigned long long v1;  // [bp-0x600]\n    unsigned long|unsigned long long v2;  // [bp-0x5f8]\n    char v3;  // [bp-0x5e8]\n    unsigned long|unsigned long long|unsigned int v4;  // [bp-0x5e0]\n    unsigned long|unsigned long long|unsigned int|char v5;  // [bp-0x5d8]\n    unsigned long long|unsigned int v6;  // [bp-0x5d0]\n    unsigned int v7;  // [bp-0x5c4]\n    unsigned long|unsigned long long v8;  // [bp-0x5c0]\n    unsigned long v9;  // [bp-0x5b8]\n    char *|unsigned long long|char v10;  // [bp-0x5b0]\n    unsigned long|unsigned long long|unsigned int v11;  // [bp-0x5a8]\n    unsigned long|unsigned long long v12;  // [bp-0x5a0]\n    unsigned long long v13;  // [bp-0x598]\n    unsigned long|unsigned long long|unsigned int v14;  // [bp-0x590]\n    unsigned long|unsigned long long v15;  // [bp-0x588]\n    unsigned long|unsigned int v16;  // [bp-0x580]\n    unsigned long long v17;  // [bp-0x578]\n    unsigned long long v18;  // [bp-0x570]\n    unsigned long|unsigned long long|char v19;  // [bp-0x568]\n    char v20;  // [bp-0x554]\n    char v21;  // [bp-0x552]\n    char v22;  // [bp-0x550]\n    char v23;  // [bp-0x54e]\n    char v24;  // [bp-0x54c]\n    char v25;  // [bp-0x54a]\n    unsigned short v26;  // [bp-0x548]\n    char v27;  // [bp-0x540]\n    unsigned long v28;  // [bp-0x538]\n    unsigned long|void|unsigned long long|char v29;  // [bp-0x518]\n    unsigned long v30;  // [bp-0x510]\n    unsigned long|char v31;  // [bp-0x508]\n    unsigned long v32;  // [bp-0x500]\n    unsigned long v33;  // [bp-0x4f8]\n    unsigned long v34;  // [bp-0x4e8]\n    void|uint128_t|unsigned long long v35;  // [bp-0x4d8]\n    unsigned long long|char v36;  // [bp-0x4d0]\n    void|uint128_t|unsigned long long v37;  // [bp-0x4c8]\n    unsigned long long v38;  // [bp-0x4c0]\n    void|uint128_t|unsigned long long v39;  // [bp-0x4b8]\n    unsigned long long v40;  // [bp-0x4b0]\n    unsigned long|unsigned long long|unsigned int v41;  // [bp-0x4a8]\n    unsigned int v42;  // [bp-0x4a4]\n    unsigned int v43;  // [bp-0x4a0]\n    unsigned long long v44;  // [bp-0x498]\n    unsigned long v45;  // [bp-0x490]\n    unsigned long v46;  // [bp-0x488]\n    unsigned long v47;  // [bp-0x480]\n    unsigned long v48;  // [bp-0x478]\n    unsigned long v49;  // [bp-0x470]\n    char v51;  // [bp-0x1]\n    unsigned long|unsigned long long|unsigned int v53;  // r8\n    unsigned long long v54;  // rdi\n    unsigned long long v55;  // r9\n    unsigned int v56;  // edx\n    unsigned long long v57;  // rdx\n    unsigned long long v58;  // rsi\n    unsigned long long v59;  // rax\n    unsigned long long v61;  // rbx\n    unsigned long long v63;  // rbx\n    unsigned long long v64;  // rax\n    unsigned long long v65;  // r15\n    struct_0 *|unsigned long long v66;  // rdx\n    unsigned long long v67;  // rcx\n    unsigned long long v68;  // r10\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // r8\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rdi\n    unsigned long long v73;  // rsi\n    unsigned long long v74;  // rcx\n    unsigned long long v75;  // rax\n    unsigned long long v76;  // r11\n    uint128_t v77;  // xmm7\n    uint128_t v78;  // xmm0\n    unsigned long long v79;  // r8\n    char v80;  // r8b\n    unsigned long long v81;  // rdi\n    char v82;  // dil\n    unsigned int v83;  // esi\n    char v84;  // sil\n    unsigned long long v85;  // rcx\n    unsigned long long v86;  // cl\n    unsigned long long v87;  // rcx\n    char v88;  // cl\n    unsigned long long v89;  // rcx\n    char v90;  // cl\n    unsigned long long v92;  // rax\n    unsigned long long v94;  // rax\n    unsigned long v95;  // rsi\n    unsigned long long v96;  // rax\n    unsigned long long v97;  // rax\n    unsigned long v98;  // rsi\n    uint128_t v99;  // xmm0\n    unsigned int v100;  // eax\n    char v101[4273761];  // rax\n    unsigned long long v102;  // r14\n    unsigned long long v103;  // rax\n    unsigned int v104;  // ecx\n    char v105;  // cl\n    unsigned int v106;  // edx\n    char v107;  // dl\n    unsigned int v108;  // esi\n    char v109;  // sil\n    unsigned long long v110;  // rdi\n    char v111;  // dil\n    unsigned long long v112;  // rdi\n    char v113;  // dil\n    unsigned int v114;  // edi\n    char v115;  // dil\n    unsigned int v116;  // eax\n    char v117;  // al\n    unsigned long long v118;  // rax\n    unsigned int v119;  // ecx\n    char v120;  // cl\n    unsigned long long v121;  // rdi\n    char v122;  // dil\n    unsigned int v123;  // esi\n    char v124;  // sil\n    unsigned int v125;  // edi\n    char v126;  // dil\n    unsigned long long v127;  // rdx\n    char v128;  // dl\n    unsigned int v129;  // edx\n    char v130;  // dl\n    unsigned int v131;  // eax\n    char v132;  // al\n    char v134;  // al\n    unsigned long long v135;  // r8\n    char v136;  // r8b\n    unsigned long long v137;  // rdi\n    char v138;  // dil\n    unsigned int v139;  // esi\n    char v140;  // sil\n    unsigned int v141;  // r11d\n    char v142;  // r11b\n    char v143;  // r10b\n    unsigned long long v144;  // r8\n    char v145;  // r8b\n    unsigned long long v146;  // rdi\n    char v147;  // dil\n    unsigned int v148;  // esi\n    char v149;  // sil\n    unsigned int v150;  // r11d\n    char v151;  // r11b\n    char v152;  // r10b\n    unsigned long long v153;  // rcx\n    char v154;  // cl\n    unsigned long long v155;  // rdi\n    unsigned long long v156;  // rdi\n    unsigned long long v157;  // rax\n    unsigned long long v158;  // rdi\n    unsigned long long v159;  // rdi\n    unsigned long long v163;  // rdi\n    uint128_t v165;  // xmm7\n    char v167[4273761];  // r8\n    unsigned long long v168;  // rsi\n    char *|unsigned long long v169;  // rax\n    unsigned long long v170;  // rdi\n    unsigned long long v171;  // rbp\n    unsigned long long v172;  // rcx\n    unsigned long long v173;  // rdx\n    unsigned long long v174;  // rcx\n    unsigned long long v175;  // rsi\n    unsigned long long v176;  // rcx\n    char v177;  // al\n    unsigned long long v178;  // rcx\n    unsigned long long v179;  // rdx\n    unsigned long long v180;  // rsi\n    unsigned long long v181;  // rbp\n    unsigned long long v182;  // rbp\n    unsigned long long v183;  // rsi\n    unsigned long long v184;  // rcx\n    unsigned long long v185;  // rdx\n    unsigned long long v187;  // rbp\n    char *v188;  // rsi\n    unsigned long long v189;  // rax\n    unsigned long long v190;  // r11\n    unsigned long long v191;  // rcx\n    unsigned long long v192;  // rcx\n    unsigned long v193;  // rcx\n    unsigned long long v194;  // rbp\n    unsigned int v195;  // edx\n    unsigned long long v196;  // rax\n    char *v197;  // rcx\n    unsigned long long v198;  // rdx\n    unsigned long long v199;  // rdx\n    char v200[2];  // rbp\n    unsigned long long v201;  // r11\n    unsigned long long|unsigned int v202;  // rax\n    unsigned long long v203;  // r13\n    char *v204;  // rsi\n    struct_11 *v205;  // rbx\n    unsigned long|unsigned int v206;  // rdi\n    unsigned long long v207;  // cc_dep1\n    unsigned long long v208;  // rax\n    unsigned int *v209;  // rbp\n    unsigned long long v210;  // r8\n    unsigned long long v211;  // rdx\n    unsigned long long v212;  // rax\n    unsigned long long v213;  // rbp\n    unsigned long long v214;  // rdi\n    char *v215;  // rsi\n    unsigned long long v216;  // rbx\n    unsigned int v217;  // ebp\n    char v218;  // dl\n    unsigned long long v219;  // r9\n    unsigned long long v220;  // rdx\n    unsigned long long v221;  // r8\n    unsigned long long v222;  // rcx\n    char *v223;  // rsi\n    char *v224;  // rdi\n    unsigned long long v225;  // cc_dep1\n    unsigned long long v226;  // cc_dep2\n    unsigned long v227;  // d\n    char *v228;  // rsi\n    unsigned long long v229;  // cc_dep1\n    unsigned long long v230;  // rax\n    char *v231;  // rcx\n    unsigned long long v232;  // rcx\n    unsigned long long v233;  // r8\n    char *v234;  // rsi\n    unsigned long long v235;  // rax\n    unsigned long long v236;  // r10\n    unsigned long long v237;  // r8\n    struct_0 *|unsigned long long|struct_11 *|struct_10 * v238;  // rbx\n    unsigned long long|char [4273761] v239;  // r15\n    unsigned long long v240;  // rdx\n    unsigned long long v241;  // rbp\n    unsigned long long v242;  // rdx\n    unsigned long long v243;  // rbx\n    unsigned long long v244;  // rbp\n    unsigned long long v245;  // r9\n    char *v246;  // rsi\n    unsigned long long v247;  // r15\n    unsigned long long v248;  // rbp\n    unsigned long long v249;  // rax\n    unsigned long long v250;  // rax\n    struct_11 *v251;  // rcx\n    unsigned long long v252;  // r8\n    struct_12 *v253;  // rcx\n    char *v254;  // rsi\n    unsigned long long v255;  // rdi\n    char *|unsigned long long v256;  // rsi\n    char *v257;  // rcx\n    unsigned int v258[4];  // rax\n    unsigned long long v259;  // r8\n    unsigned long|unsigned int v260;  // rax\n    unsigned long long v262;  // r8\n    char v263[4273761];  // r10\n    unsigned long long v264;  // r13\n    unsigned long long v265;  // rax\n\n    v53 = 0;\n    v55 = v54;\n    v239 = 38;\n    v241 = -18446744069414584322;\n    v26 = 0;\n    v238 = &v44;\n    v102 = &v26;\n    v7 = 0;\n    while (true)\n    {\n        v67 = (char)*(&((char *)&g_413720)[v53]);\n        v56 = (char)*(&((char *)&g_413720)[v53]);\n        if (*(&((char *)&g_413720)[v53]) == 0)\n        {\n            if (v7 == 3 && (unsigned int)-18446744069414584322 > 0)\n            {\n                v241 = -18446744069414584322;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>)))) || v7 != 3 || (unsigned int)-18446744069414584322 > 0)\n            {\n                while (true)\n                {\n                    v100 = (char)*(&((char *)&g_4137a0)[v53]);\n                    if ((unsigned int)(char)*(&((char *)&g_4137a0)[v53]) != -93)\n                    {\n                        v101 = (unsigned long long)v100 + 1;\n                        if (*((char *)(v101 + &g_4135e0)) == 1 && (unsigned int)v101 <= 112)\n                        {\n                            v53 = (char)*((char *)(v101 + &g_413660));\n                            if (*((char *)(v101 + &g_413660)) != 0)\n                            {\n                                v238 += 56;\n                                v67 = v102;\n                                v7 = 3;\n                                v30 = v8;\n                                v31 = v9;\n                                v238->field_0 = (int128_t)v29;\n                                v238->field_30 = v34;\n                                v238->field_10 = *((int128_t *)&v31);\n                                v238->field_20 = *((int128_t *)&v33);\n                            }\n                        }\n                    }\n                    if (*((char *)(v101 + &g_413660)) == 0 || (unsigned int)(char)*(&((char *)&g_4137a0)[v53]) == -93 || *((char *)(v101 + &g_4135e0)) != 1 || (unsigned int)v101 > 112)\n                    {\n                        if (v102 == &v26)\n                        {\n                            break;\n                        }\n                        v102 = &v25;\n                        v53 = *((short *)&v25);\n                        v238 = &v36;\n                    }\n                }\n                if (*((char *)(v101 + &g_4135e0)) == 1 && (unsigned int)v101 <= 112 && *((char *)(v101 + &g_413660)) != 0 && (unsigned int)(char)*(&((char *)&g_4137a0)[v53]) != -93)\n                {\n                    v102 = v67 + 2;\n                    *((unsigned long *)(v67 + 2)) = v53;\n                    if (v67 + 2 >= stack_base + -1314)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v265 = 1;\n                }\n            }\n        }\n        else\n        {\n            v57 = (unsigned long long)v56 - 4;\n            v58 = (char)*(&((char *)&g_413520)[v67]);\n            v65 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56));\n            v68 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 8));\n            v41 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 48));\n            v264 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 16));\n            *((int128_t *)&v35) = *((int128_t *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56));\n            v76 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 24));\n            *((int128_t *)&v37) = *((int128_t *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 16));\n            v5 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 32));\n            *((int128_t *)&v39) = *((int128_t *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 32));\n            v4 = *((long long *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 40));\n            v6 = *((int *)(v238 + (int)(1 - (unsigned int)(char)*(&((char *)&g_413520)[v67])) * 56 + 48));\n            switch (v57)\n            {\n            case 0:\n                v99 = *((int128_t *)&v44);\n                *((char *)(v55 + 160)) = 1;\n                *((uint128_t *)(v55 + 88)) = v99;\n                v12 = v68;\n                v11 = v76;\n                v10 = v55;\n                v156 = dcgettext(0x0, 0x411bd5, 0x5);\n                v64 = 2;\n            case 3:\n                v12 = v68;\n                v98 = \"datetime\";\n                v11 = v76;\n                *((long long *)(v55 + 200)) = *((long long *)(v55 + 200)) + 1;\n                *((long long *)(v55 + 168)) = *((long long *)(v55 + 168)) + 1;\n                v10 = v55;\n            case 4:\n                v12 = v68;\n                v98 = \"time\";\n                v11 = v76;\n                *((long long *)(v55 + 200)) = *((long long *)(v55 + 200)) + 1;\n                v10 = v55;\n            case 5:\n                v12 = v68;\n                v98 = \"local_\";\n                v11 = v76;\n                *((long long *)(v55 + 184)) = *((long long *)(v55 + 184)) + 1;\n                v10 = v55;\n            case 6:\n                v12 = v68;\n                v98 = \"zone\";\n                *((long long *)(v55 + 208)) = *((long long *)(v55 + 208)) + 1;\n                v11 = v76;\n                v10 = v55;\n            case 7:\n                v12 = v68;\n                v98 = \"date\";\n                v11 = v76;\n                *((long long *)(v55 + 168)) = *((long long *)(v55 + 168)) + 1;\n                v10 = v55;\n            case 8:\n                v12 = v68;\n                v98 = \"day\";\n                v11 = v76;\n                *((long long *)(v55 + 176)) = *((long long *)(v55 + 176)) + 1;\n                v10 = v55;\n            case 9:\n                v12 = v55;\n                v95 = \"relative\";\n                v11 = v68;\n                v10 = v76;\n            case 10:\n                v12 = v55;\n                v11 = v68;\n                v10 = v76;\n                v155 = dcgettext(0x0, 0x411c08, 0x5);\n                v53 = -18446744069414584413;\n                v64 = 4;\n                v76 = v10;\n                v68 = v11;\n                if (*((char *)(v12 + 217)) != 0)\n                {\n                    v16 = -93;\n                    v15 = v66;\n                    v14 = 4;\n                    v13 = v11;\n                    v12 = v67;\n                    v11 = v10;\n                    v10 = v55;\n                    sub_403a10();\n                }\n            case 11:\n                v12 = v55;\n                v95 = \"hybrid\";\n                v11 = v68;\n                v10 = v76;\n            case 14:\n                v66 = &v31;\n                v67 = &v24;\n                *((long long *)(v55 + 80)) = 0;\n                *((long long *)(v55 + 88)) = 0;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 72)) = (long long)v37;\n                tmp_24 = v44;\n                *((long long *)(v55 + 96)) = 0;\n                *((unsigned int *)(v55 + 28)) = tmp_24;\n                v64 = 7;\n                break;\n            case 15:\n                v67 = &v22;\n                *((long long *)(v55 + 88)) = 0;\n                *((long long *)(v55 + 96)) = 0;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 80)) = (long long)v37;\n                tmp_26 = v44;\n                *((unsigned long *)(v55 + 72)) = v28;\n                v66 = &v17;\n                *((unsigned int *)(v55 + 28)) = tmp_26;\n                v64 = 7;\n                break;\n            case 16:\n                v53 = -93;\n                *((long long *)(v55 + 88)) = (long long)(&v35)[8];\n                *((unsigned long long *)(v55 + 72)) = v11;\n                v67 = &v20;\n                *((long long *)(v55 + 96)) = (int)v37;\n                tmp_37 = v44;\n                *((unsigned long *)(v55 + 80)) = v28;\n                v66 = &v3;\n                *((unsigned int *)(v55 + 28)) = tmp_37;\n                v64 = 7;\n                break;\n            case 18:\n                *((long long *)(v55 + 80)) = 0;\n                v66 = &v31;\n                v67 = &v24;\n                *((long long *)(v55 + 88)) = 0;\n                v53 = 20;\n                *((long long *)(v55 + 72)) = (long long)v37;\n                v64 = 8;\n                *((long long *)(v55 + 96)) = 0;\n                *((int *)(v55 + 28)) = 2;\n                break;\n            case 19:\n                *((long long *)(v55 + 88)) = 0;\n                v67 = &v22;\n                *((long long *)(v55 + 96)) = 0;\n                v53 = 20;\n                *((unsigned long *)(v55 + 72)) = v28;\n                v66 = &v17;\n                *((long long *)(v55 + 80)) = (long long)v37;\n                v64 = 8;\n                *((int *)(v55 + 28)) = 2;\n                break;\n            case 20:\n                *((int *)(v55 + 28)) = 2;\n                v53 = 20;\n                *((long long *)(v55 + 88)) = (long long)(&v35)[8];\n                *((unsigned long long *)(v55 + 72)) = v11;\n                v67 = &v20;\n                *((unsigned long *)(v55 + 80)) = v28;\n                v66 = &v3;\n                *((long long *)(v55 + 96)) = (int)v37;\n                v64 = 8;\n                break;\n            case 23:\n                v12 = v68;\n                v11 = v76;\n                *((long long *)(v55 + 208)) = *((long long *)(v55 + 208)) + 1;\n                v10 = v55;\n                v92 = sub_403570();\n                v55 = v10;\n                v76 = v11;\n                v68 = v12;\n                if (v92 != 0)\n                {\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584347;\n                    v64 = 10;\n                    break;\n                }\n            case 24:\n                v66 = &v35;\n                v67 = &v25;\n                v53 = -18446744069414584413;\n                *((unsigned int *)(v55 + 20)) = v44;\n                v64 = 11;\n                break;\n            case 25:\n                *((int *)(v55 + 20)) = 1;\n                v66 = &v31;\n                v67 = &v24;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 192)) = *((long long *)(v55 + 192)) + 1;\n                v64 = 11;\n                break;\n            case 26:\n                v59 = v44;\n            case 27:\n                *((int *)(v55 + 24)) = 25200;\n                v66 = &v35;\n                v67 = &v25;\n                v53 = -18446744069414584413;\n                v64 = 12;\n                break;\n            case 28:\n                v12 = v68;\n                v11 = v76;\n                *((unsigned int *)(v55 + 24)) = (long long)(&v35)[8];\n            case 29:\n                v12 = v68;\n                v11 = v76;\n                *((int *)(v55 + 24)) = 25200;\n            case 30:\n                v12 = v68;\n                v11 = v76;\n                v10 = v55;\n                v94 = sub_403570();\n                if (v94 != 0)\n                {\n                    v55 = v10;\n                    v157 = *((int *)(v10 + 24)) + v31;\n                    *((unsigned int *)(v10 + 24)) = *((int *)(v10 + 24)) + v31;\n                    v66 = &v27;\n                    v67 = &v23;\n                    v53 = -18446744069414584413;\n                    v64 = 12;\n                    v76 = v11;\n                    v68 = v12;\n                    break;\n                }\n            case 31:\n                v59 = (unsigned int)((int)v44 + 3600);\n            case 32:\n                v66 = &v31;\n                v67 = &v24;\n                v53 = -18446744069414584413;\n                *((int *)(v55 + 24)) = (int)(&v35)[8] + 3600;\n                v64 = 12;\n                break;\n            case 33:\n                tmp_5 = v44;\n                *((long long *)(v55 + 8)) = 0;\n                v66 = &v35;\n                v67 = &v25;\n                v53 = -18446744069414584413;\n                *((unsigned int *)(v55 + 16)) = tmp_5;\n                v64 = 13;\n                break;\n            case 34:\n                *((long long *)(v55 + 8)) = 0;\n                v66 = &v31;\n                v67 = &v24;\n                v53 = -18446744069414584413;\n                *((unsigned int *)(v55 + 16)) = (long long)(&v35)[8];\n                v64 = 13;\n                break;\n            case 35:\n                v103 = (long long)(&v35)[8];\n            case 36:\n                v103 = (long long)v37;\n            case 37:\n                v67 = &v23;\n                v66 = &v27;\n                v53 = -18446744069414584413;\n                *((unsigned long *)(v55 + 56)) = v32;\n                *((unsigned long *)(v55 + 64)) = v45;\n                v64 = 14;\n                break;\n            case 38:\n                v96 = (char)*((char *)(v55 + 217));\n                if (v19 > 3)\n                {\n                    if (v96 != 0)\n                    {\n                        v14 = v55;\n                        v13 = v68;\n                        v12 = v76;\n                        v11 = v19;\n                        v10 = v18;\n                        dcgettext(0x0, 0x4120f8, 0x5);\n                        sub_403400();\n                        v55 = v14;\n                        v68 = v13;\n                        v76 = v12;\n                    }\n                    v67 = &v21;\n                    v66 = &v10;\n                    v53 = -18446744069414584413;\n                    *((unsigned long long *)(v55 + 48)) = v19;\n                    *((int128_t *)(v55 + 32)) = *((int128_t *)&v17);\n                    *((unsigned long *)(v55 + 56)) = v32;\n                    *((unsigned long *)(v55 + 64)) = v45;\n                    v64 = 14;\n                }\n                else\n                {\n                    v10 = v18;\n                    if (v96 != 0)\n                    {\n                        v13 = v55;\n                        v12 = v68;\n                        v11 = v76;\n                        dcgettext(0x0, 0x412130, 0x5);\n                        sub_403400();\n                        v55 = v13;\n                        v68 = v12;\n                        v76 = v11;\n                    }\n                    v165 = *((int128_t *)&v44);\n                    v67 = &v21;\n                    v66 = &v10;\n                    v53 = -18446744069414584413;\n                    *((unsigned long long *)(v55 + 56)) = v10;\n                    *((uint128_t *)(v55 + 32)) = v165;\n                    *((unsigned long *)(v55 + 64)) = v32;\n                    *((unsigned long *)(v55 + 48)) = v46;\n                    v64 = 14;\n                }\n            case 39:\n                *((unsigned long *)(v55 + 64)) = v32;\n                *((long long *)(v55 + 56)) = (long long)(&v35)[8];\n                *((unsigned long *)(v55 + 40)) = 0 - v45;\n            case 40:\n                *((unsigned long *)(v55 + 56)) = v31;\n                *((long long *)(v55 + 64)) = 0 - (long long)v37;\n                if ((long long)v37 != 0x8000000000000000)\n                {\n                    *((unsigned long *)(v55 + 40)) = 0 - v45;\n                }\n            case 41:\n                v66 = &v31;\n                v67 = &v24;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 56)) = (long long)(&v35)[8];\n                *((unsigned long *)(v55 + 64)) = v45;\n                v64 = 14;\n                break;\n            case 42:\n                v78 = *((int128_t *)&v44);\n                v67 = &v22;\n                v66 = &v17;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 56)) = *((long long *)&v27);\n                *((uint128_t *)(v55 + 32)) = v78;\n                *((unsigned long *)(v55 + 64)) = v32;\n                *((unsigned long *)(v55 + 48)) = v46;\n                v64 = 14;\n                break;\n            case 43:\n                v66 = &v31;\n                v67 = &v24;\n                v53 = -18446744069414584413;\n                *((long long *)(v55 + 64)) = (long long)v37;\n                *((unsigned long long *)(v55 + 56)) = v44;\n                v64 = 14;\n                break;\n            case 44:\n                v77 = *((int128_t *)&v44);\n                *((unsigned long *)(v55 + 64)) = v32;\n                *((uint128_t *)(v55 + 32)) = v77;\n                *((long long *)(v55 + 56)) = (long long)(&v35)[8];\n            case 46:\n                *((unsigned long *)(v55 + 48)) = v33;\n                v97 = (long long)v37;\n                *((int128_t *)(v55 + 32)) = *((int128_t *)&v31);\n                *((unsigned long long *)(v55 + 56)) = 0 - v97;\n                if (v97 != 0x8000000000000000)\n                {\n                    *((unsigned long *)(v55 + 64)) = 0 - v45;\n                    v66 = &v27;\n                    v67 = &v23;\n                    v53 = -18446744069414584413;\n                    v64 = 15;\n                    break;\n                }\n            case 47:\n                v70 = v43;\n                v14 = *((long long *)(v55 + 144));\n                v10 = (long long)(&v35)[8];\n                v11 = (long long)v37;\n                v71 = *((long long *)(v55 + 136));\n                v15 = *((long long *)(v55 + 128));\n                v12 = (long long)(&v37)[8];\n                v72 = v41;\n                v16 = *((long long *)(v55 + 120));\n                v13 = (long long)v39;\n                v73 = (long long)(&v39)[8];\n                v17 = *((long long *)(v55 + 112));\n                v74 = (unsigned int)*((int *)(v55 + 152));\n                v18 = *((long long *)(v55 + 104));\n                if ((int)v44 >= 0)\n                {\n                    *((unsigned int *)(v55 + 152)) = v74 + v70;\n                    v119 = 0;\n                    tmp_9 = v14 + v72;\n                    v120 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1424, size=8, endness=Iend_LE), rdi<8>, cc_ndep<8>);\n                    v121 = 0;\n                    *((long long *)(v55 + 144)) = tmp_9;\n                    v122 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rsi<8>, cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 136)) = v71 + v73;\n                    v123 = 0;\n                    *((int *)&v14) = rdi<8>;\n                    v124 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1416, size=8, endness=Iend_LE), Load(addr=stack_base-1432, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 128)) = v15 + v13;\n                    v125 = 0;\n                    v126 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1408, size=8, endness=Iend_LE), Load(addr=stack_base-1440, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 120)) = v16 + v12;\n                    v127 = 0;\n                    v128 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1400, size=8, endness=Iend_LE), Load(addr=stack_base-1448, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 112)) = v17 + v11;\n                    *((int *)&v11) = rdx<8>;\n                    v129 = 0;\n                    *((unsigned long long *)(v55 + 104)) = v18 + v10;\n                    v130 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=stack_base-1392, size=8, endness=Iend_LE), Load(addr=stack_base-1456, size=8, endness=Iend_LE), cc_ndep<8>);\n                    v131 = rcx<4> | (unsigned int)((!(v74 ^ v70) & (v74 ^ v74 + v70)) >> 31 & 1);\n                    v132 = (char)(rcx<4> | (unsigned int)((!(v74 ^ v70) & (v74 ^ v74 + v70)) >> 31 & 1)) | (char)v14;\n                    v134 = (unsigned long long)(unsigned int)(rax<4> | rsi<4> | rdi<4>) | (char)v11;\n                    v118 = (unsigned int)rax<8> | rdx<4>;\n                }\n                else\n                {\n                    *((unsigned int *)(v55 + 152)) = v74 - v70;\n                    v104 = 0;\n                    v105 = ((v14 ^ v72) & (v14 ^ v14 - v72)) >> 63;\n                    *((unsigned long long *)(v55 + 144)) = v14 - v72;\n                    v106 = 0;\n                    v107 = ((v71 ^ v73) & (v71 ^ v71 - v73)) >> 63;\n                    *((unsigned long long *)(v55 + 136)) = v71 - v73;\n                    v108 = 0;\n                    v109 = ((v15 ^ v13) & (v15 ^ v15 - v13)) >> 63;\n                    *((unsigned long long *)(v55 + 128)) = v15 - v13;\n                    v110 = 0;\n                    v111 = ((v16 ^ v12) & (v16 ^ v16 - v12)) >> 63;\n                    *((unsigned long long *)(v55 + 120)) = v16 - v12;\n                    *((int *)&v12) = rdi<8>;\n                    v112 = 0;\n                    v113 = ((v17 ^ v11) & (v17 ^ v17 - v11)) >> 63;\n                    *((unsigned long long *)(v55 + 112)) = v17 - v11;\n                    *((int *)&v11) = rdi<8>;\n                    v114 = 0;\n                    *((unsigned long long *)(v55 + 104)) = v18 - v10;\n                    v115 = ((v18 ^ v10) & (v18 ^ v18 - v10)) >> 63;\n                    v116 = rcx<4> | (unsigned int)(((v74 ^ v70) & (v74 ^ v74 - v70)) >> 31 & 1) | rdx<4> | rsi<4>;\n                    v117 = (char)(rcx<4> | (unsigned int)(((v74 ^ v70) & (v74 ^ v74 - v70)) >> 31 & 1) | rdx<4> | rsi<4>) | (char)v12 | (char)v11;\n                    v118 = (unsigned int)(rax<4> | rdi<4>);\n                }\n                if (v118 == 0)\n                {\n                    *((char *)(v55 + 161)) = 1;\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584413;\n                    v64 = 16;\n                    break;\n                }\n            case 48: case 49:\n                v79 = 0;\n                v80 = (!((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)*((int *)(v55 + 152))) & ((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)((int)(stack_base)[-1128] + *((int *)(v55 + 152))))) >> 31 & 1;\n                *((int *)(v55 + 152)) = (int)(stack_base)[-1128] + *((int *)(v55 + 152));\n                tmp_117 = *((long long *)(v55 + 144));\n                v81 = 0;\n                *((unsigned long *)(v55 + 144)) = *((long long *)(v55 + 144)) + v49;\n                v82 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x88<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1144, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 136)) = *((long long *)(v55 + 136)) + v48;\n                v83 = 0;\n                v84 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x80<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1152, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 128)) = *((long long *)(v55 + 128)) + v47;\n                v85 = 0;\n                v86 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x78<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1160, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 120)) = *((long long *)(v55 + 120)) + v46;\n                *((int *)&v10) = rcx<8>;\n                v87 = 0;\n                v88 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x70<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1168, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v55 + 112)) = *((long long *)(v55 + 112)) + v45;\n                *((int *)&v11) = rcx<8>;\n                v89 = 0;\n                v90 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x68<64>), size=8, endness=Iend_LE), Load(addr=rbx<8>, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long long *)(v55 + 104)) = *((long long *)(v55 + 104)) + v44;\n                tmp_259 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, t117, Load(addr=stack_base-1136, size=8, endness=Iend_LE), cc_ndep<8>) | (unsigned int)r8<8> | rdi<8>;\n                if ((char)v11 == 0)\n                {\n                    *((char *)(v55 + 161)) = 1;\n                    v66 = &v35;\n                    v67 = &v25;\n                    v53 = -18446744069414584413;\n                    v64 = 16;\n                    break;\n                }\n            case 50:\n                v42 = 0;\n                v65 = (long long)(&v35)[8];\n            case 51:\n                v42 = 0;\n                v65 = (long long)v37;\n            case 52:\n                v66 = &v35;\n                v67 = &v25;\n                v64 = 17;\n                v76 = 0;\n                v53 = -18446744069414584413;\n                v264 = 0;\n                v42 = 0;\n                v68 = 0;\n                v6 = 0;\n                v65 = 1;\n                v4 = 0;\n                v5 = 0;\n                break;\n            case 53:\n                v68 = (long long)(&v35)[8];\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v64 = 17;\n            case 54:\n                v68 = (long long)v37;\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v64 = 17;\n            case 55:\n                v66 = &v35;\n                v67 = &v25;\n                v64 = 17;\n                v76 = 0;\n                v53 = -18446744069414584413;\n                v264 = 0;\n                v65 = 0;\n                v42 = 0;\n                v6 = 0;\n                v68 = 1;\n                v4 = 0;\n                v5 = 0;\n                break;\n            case 56:\n                v41 = 0;\n                v35 = 0;\n                v37 = 0;\n                v39 = 0;\n                v264 = v44 * *((long long *)&((char *)&v35)[8]);\n            case 57:\n                v41 = 0;\n                v35 = 0;\n                v37 = 0;\n                v39 = 0;\n                v264 = v44 * (long long)v37;\n            case 58:\n                v264 = v44;\n                v66 = &v35;\n                v67 = &v25;\n                v64 = 17;\n                v42 = 0;\n                v53 = -18446744069414584413;\n            case 59:\n                v76 = (long long)(&v35)[8];\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v64 = 17;\n            case 60:\n                v76 = (long long)v37;\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v64 = 17;\n            case 61:\n                v66 = &v35;\n                v67 = &v25;\n                v64 = 17;\n                v264 = 0;\n                v53 = -18446744069414584413;\n                v68 = 0;\n                v65 = 0;\n                v42 = 0;\n                v6 = 0;\n                v76 = 1;\n                v4 = 0;\n                v5 = 0;\n                break;\n            case 62:\n                v42 = 0;\n                v69 = (long long)(&v35)[8];\n            case 63:\n                v42 = 0;\n                v69 = (long long)v37;\n            case 64:\n                v66 = &v35;\n                v67 = &v25;\n                v64 = 17;\n                v76 = 0;\n                v53 = -18446744069414584413;\n                v264 = 0;\n                v68 = 0;\n                v65 = 0;\n                v42 = 0;\n                v6 = 0;\n                v4 = 0;\n                v5 = 1;\n                break;\n            case 65:\n                v42 = 0;\n                v75 = (long long)(&v35)[8];\n            case 66:\n                v42 = 0;\n                v75 = (long long)v37;\n            case 67: case 68:\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v4 = (long long)(&v35)[8];\n                v6 = (int)v37;\n                v64 = 17;\n            case 69:\n                v66 = &v35;\n                v67 = &v25;\n                v42 = 0;\n                v53 = -18446744069414584413;\n                v64 = 17;\n                v6 = 0;\n                v4 = 1;\n            case 71:\n                v65 = (long long)v37;\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v64 = 18;\n            case 72:\n                v68 = (long long)v37;\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v64 = 18;\n            case 73:\n                v41 = 0;\n                v35 = 0;\n                v37 = 0;\n                v39 = 0;\n                v264 = v44 * (long long)v37;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>)))))\n                {\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = 60;\n                    v64 = 18;\n                }\n            case 74:\n                v76 = (long long)v37;\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v64 = 18;\n            case 75:\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v5 = (long long)v37;\n                v64 = 18;\n            case 76:\n                v66 = &v31;\n                v67 = &v24;\n                v42 = 0;\n                v53 = 60;\n                v4 = (long long)v37;\n                v64 = 18;\n            case 77:\n                v264 = v44;\n                v66 = &v35;\n                v67 = &v25;\n                v64 = 19;\n                v42 = 0;\n                v53 = -18446744069414584413;\n            case 81:\n                v65 = v45;\n                v66 = &v35;\n                v67 = &v25;\n                v68 = 0;\n                v53 = -18446744069414584413;\n                v64 = 21;\n                break;\n            case 83:\n                v65 = v45;\n                v66 = &v35;\n                v67 = &v25;\n                v68 = 0;\n                v53 = -18446744069414584412;\n                v64 = 22;\n                break;\n            case 84:\n                v12 = v68;\n                v11 = v76;\n                v2 = v46;\n                v1 = v45;\n                v0 = v44;\n                v10 = v55;\n                sub_403110();\n                v66 = &v35;\n                v67 = &v25;\n                v53 = -18446744069414584413;\n                v64 = 23;\n                v55 = v10;\n                v76 = v11;\n                v68 = v12;\n                break;\n            case 85:\n                v12 = v68;\n                v11 = v76;\n                v2 = (long long)(&v37)[8];\n                v1 = (long long)v37;\n                v0 = (long long)(&v35)[8];\n                v10 = v55;\n                sub_403110();\n                v144 = 0;\n                v55 = v10;\n                v145 = (!((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)*((int *)(v10 + 152))) & ((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)((int)(stack_base)[-1128] + *((int *)(v10 + 152))))) >> 31 & 1;\n                *((int *)(v10 + 152)) = (int)(stack_base)[-1128] + *((int *)(v10 + 152));\n                tmp_120 = *((long long *)(v10 + 144));\n                v146 = 0;\n                *((unsigned long *)(v10 + 144)) = *((long long *)(v10 + 144)) + v49;\n                v147 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x88<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1144, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 136)) = *((long long *)(v10 + 136)) + v48;\n                v148 = 0;\n                v149 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x80<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1152, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 128)) = *((long long *)(v10 + 128)) + v47;\n                v150 = 0;\n                v151 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x78<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1160, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 120)) = *((long long *)(v10 + 120)) + v46;\n                v152 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x70<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1168, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long *)(v10 + 112)) = *((long long *)(v10 + 112)) + v45;\n                v153 = 0;\n                v154 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(Load(addr=stack_base-1456, size=8, endness=Iend_LE) + 0x68<64>), size=8, endness=Iend_LE), Load(addr=rbx<8>, size=8, endness=Iend_LE), cc_ndep<8>);\n                *((unsigned long long *)(v10 + 104)) = *((long long *)(v10 + 104)) + v44;\n                tmp_256 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, t120, Load(addr=stack_base-1136, size=8, endness=Iend_LE), cc_ndep<8>) | (unsigned int)r8<8> | rdi<8>;\n                if ((char)((unsigned int)tmp_256 | rsi<4> | r11<4>) == 0)\n                {\n                    *((char *)(v10 + 161)) = 1;\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584413;\n                    v64 = 24;\n                    v76 = v11;\n                    v68 = v12;\n                    break;\n                }\n            case 86:\n                v53 = 43;\n                v65 = -1;\n                tmp_1 = v58 * 7;\n                v67 = v102 - v58 * 2;\n                v63 = v238 - tmp_1 * 8;\n                v64 = 25;\n                v66 = v63;\n                break;\n            case 87:\n                v65 = v45;\n                v66 = &v31;\n                v67 = &v24;\n                v53 = 43;\n                v64 = 25;\n                break;\n            default:\n                v64 = (unsigned int)(char)*(&((char *)&g_413580)[v67]) - 28;\n                v53 = (char)*(&((char *)&g_413700)[(long long)(int)((unsigned int)(char)*(&((char *)&g_413580)[v67]) - 28)]);\n                tmp_7 = v58 * 56;\n                v67 = v102 - v58 * 2;\n                v61 = v238 - tmp_7;\n                v66 = v61;\n                break;\n            }\n            if (v57 <= 87)\n            {\n                v66 = v57;\n                if (*((long long *)(v66 * 8 + 4270240)) == 4214431 || *((long long *)(v66 * 8 + 4270240)) == 4212599)\n                {\n                    v4 = v75;\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584413;\n                    v64 = 17;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4216991 || *((long long *)(v66 * 8 + 4270240)) == 4215703)\n                {\n                    *((unsigned long long *)(v55 + 8)) = v103;\n                    tmp_9 = v44;\n                    v66 = &v31;\n                    v67 = &v24;\n                    *((char *)(v55 + 224)) = 1;\n                    v53 = -18446744069414584413;\n                    *((unsigned int *)(v55 + 16)) = tmp_9;\n                    v64 = 13;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4215865 || *((long long *)(v66 * 8 + 4270240)) == 4212683)\n                {\n                    *((unsigned long long *)(v55 + 24)) = v59;\n                    v66 = &v35;\n                    v67 = &v25;\n                    v53 = -18446744069414584413;\n                    v64 = 12;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4215031 || *((long long *)(v66 * 8 + 4270240)) == 4214711)\n                {\n                    v135 = 0;\n                    v136 = (!((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)*((int *)(v55 + 152))) & ((unsigned int)(int)(stack_base)[-1128] ^ (unsigned long long)(unsigned int)((int)(stack_base)[-1128] + *((int *)(v55 + 152))))) >> 31 & 1;\n                    *((int *)(v55 + 152)) = (int)(stack_base)[-1128] + *((int *)(v55 + 152));\n                    tmp_113 = *((long long *)(v55 + 144));\n                    v137 = 0;\n                    *((unsigned long *)(v55 + 144)) = *((long long *)(v55 + 144)) + v49;\n                    v138 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x88<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1144, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 136)) = *((long long *)(v55 + 136)) + v48;\n                    v139 = 0;\n                    v140 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x80<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1152, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 128)) = *((long long *)(v55 + 128)) + v47;\n                    v141 = 0;\n                    v142 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x78<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1160, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 120)) = *((long long *)(v55 + 120)) + v46;\n                    v143 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x70<64>), size=8, endness=Iend_LE), Load(addr=stack_base-1168, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long *)(v55 + 112)) = *((long long *)(v55 + 112)) + v45;\n                    v67 = 0;\n                    v67 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, Load(addr=(r9<8> + 0x68<64>), size=8, endness=Iend_LE), Load(addr=rbx<8>, size=8, endness=Iend_LE), cc_ndep<8>);\n                    *((unsigned long long *)(v55 + 104)) = *((long long *)(v55 + 104)) + v44;\n                    tmp_249 = [D] amd64g_calculate_condition(0x0<64>, 0x4<64>, t113, Load(addr=stack_base-1136, size=8, endness=Iend_LE), cc_ndep<8>) | (unsigned int)r8<8> | rdi<8>;\n                    if (rcx<8> == 0 && (char)((unsigned int)tmp_249 | rsi<4> | r11<4>) == 0 && v143 == 0)\n                    {\n                        *((char *)(v55 + 161)) = 1;\n                        v10 = v55;\n                        v163 = dcgettext(0x0, 0x411bff, 0x5);\n                        v53 = -18446744069414584413;\n                        v64 = 12;\n                        v76 = v11;\n                        v68 = v12;\n                        if (*((char *)(v10 + 217)) != 0)\n                        {\n                            v16 = -93;\n                            v15 = v66;\n                            v14 = 12;\n                            v13 = v68;\n                            *((int *)&v12) = rcx<8>;\n                        }\n                    }\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4216005 || *((long long *)(v66 * 8 + 4270240)) == 4214316)\n                {\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584413;\n                    v64 = 17;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4214003 || *((long long *)(v66 * 8 + 4270240)) == 4213296 || *((long long *)(v66 * 8 + 4270240)) == 4213222)\n                {\n                    v6 = 0;\n                    v264 = 0;\n                    v68 = 0;\n                    v65 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4213620 || *((long long *)(v66 * 8 + 4270240)) == 4214123 || *((long long *)(v66 * 8 + 4270240)) == 4213694)\n                {\n                    v6 = 0;\n                    v76 = 0;\n                    v264 = 0;\n                    v65 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4213129 || *((long long *)(v66 * 8 + 4270240)) == 4213056)\n                {\n                    v5 = v69;\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584413;\n                    v64 = 17;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4215342 || *((long long *)(v66 * 8 + 4270240)) == 4215597)\n                {\n                    v158 = dcgettext(0x0, v95, 0x5);\n                    v53 = -18446744069414584413;\n                    v64 = 4;\n                    v76 = v10;\n                    v68 = v11;\n                    if (*((char *)(v12 + 217)) != 0)\n                    {\n                        v16 = -93;\n                        v15 = v66;\n                        v14 = 4;\n                        v13 = v68;\n                        v12 = v67;\n                        v11 = v76;\n                        v10 = v55;\n                    }\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>)))) && (*((long long *)(v66 * 8 + 4270240)) == 4213483 || *((long long *)(v66 * 8 + 4270240)) == 4213405))\n                {\n                    v66 = &v31;\n                    v67 = &v24;\n                    v53 = -18446744069414584413;\n                    v64 = 17;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4215054 || *((long long *)(v66 * 8 + 4270240)) == 4215665 || *((long long *)(v66 * 8 + 4270240)) == 4213968 || *((long long *)(v66 * 8 + 4270240)) == 4215092 || *((long long *)(v66 * 8 + 4270240)) == 4215627 || *((long long *)(v66 * 8 + 4270240)) == 4213901)\n                {\n                    v159 = dcgettext(0x0, v98, 0x5);\n                    v64 = 4;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4214431 || *((long long *)(v66 * 8 + 4270240)) == 4214489 || *((long long *)(v66 * 8 + 4270240)) == 4212599)\n                {\n                    v6 = 0;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4214162 || *((long long *)(v66 * 8 + 4270240)) == 4216005 || *((long long *)(v66 * 8 + 4270240)) == 4214316)\n                {\n                    v6 = 0;\n                    v76 = 0;\n                    v264 = 0;\n                    v68 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4213129 || *((long long *)(v66 * 8 + 4270240)) == 4213056 || *((long long *)(v66 * 8 + 4270240)) == 4214533)\n                {\n                    v76 = 0;\n                    v264 = 0;\n                    v68 = 0;\n                    v65 = 0;\n                    v6 = 0;\n                    v4 = 0;\n                }\n                if ((*((long long *)(v66 * 8 + 4270240)) == 4216506 || v45 != 0x8000000000000000) && (*((long long *)(v66 * 8 + 4270240)) == 4216708 || *((long long *)(v66 * 8 + 4270240)) == 4216506 || *((long long *)(v66 * 8 + 4270240)) == 4216784) && (*((long long *)(v66 * 8 + 4270240)) == 4216506 || *((long long *)(v66 * 8 + 4270240)) == 4216784 || (long long)v37 != 0x8000000000000000))\n                {\n                    v67 = &v23;\n                    v66 = &v27;\n                    v53 = -18446744069414584413;\n                    *((unsigned long *)(v55 + 48)) = v46;\n                    v64 = 14;\n                }\n                if ((*((long long *)(v66 * 8 + 4270240)) == 4213332 || *((long long *)(v66 * 8 + 4270240)) == 4214451 || !((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>))))) && (*((long long *)(v66 * 8 + 4270240)) == 4213332 || *((long long *)(v66 * 8 + 4270240)) == 4213483 || *((long long *)(v66 * 8 + 4270240)) == 4214451 || *((long long *)(v66 * 8 + 4270240)) == 4214042 || *((long long *)(v66 * 8 + 4270240)) == 4213405))\n                {\n                    v6 = 0;\n                    v76 = 0;\n                    v68 = 0;\n                    v65 = 0;\n                    v4 = 0;\n                    v5 = 0;\n                }\n                if (*((long long *)(v66 * 8 + 4270240)) == 4214236 || *((long long *)(v66 * 8 + 4270240)) == 4212441 || *((long long *)(v66 * 8 + 4270240)) == 4214431 || *((long long *)(v66 * 8 + 4270240)) == 4214489 || *((long long *)(v66 * 8 + 4270240)) == 4212599)\n                {\n                    v76 = 0;\n                    v264 = 0;\n                    v68 = 0;\n                    v65 = 0;\n                    v5 = 0;\n                }\n            }\n        }\n        if (v57 <= 87 && *((long long *)(v66 * 8 + 4270240)) == 4213730 && *(&((char *)&g_413720)[v53]) != 0 || v57 <= 87 && *(&((char *)&g_413720)[v53]) != 0 && (*((long long *)(v66 * 8 + 4270240)) == 4215054 || *((long long *)(v66 * 8 + 4270240)) == 4215665 || *((long long *)(v66 * 8 + 4270240)) == 4213968 || *((long long *)(v66 * 8 + 4270240)) == 4215092 || *((long long *)(v66 * 8 + 4270240)) == 4215627 || *((long long *)(v66 * 8 + 4270240)) == 4213901))\n        {\n            v55 = v10;\n            v76 = v11;\n            v68 = v12;\n            if (*((char *)(v10 + 217)) != 0)\n            {\n                v16 = -93;\n                v15 = v66;\n                v14 = v64;\n                v13 = v68;\n                v12 = v67;\n                sub_403a10();\n            }\n        }\n        if (...)\n        {\n            v265 = 1;\n        }\n        if (v57 <= 87 && *(&((char *)&g_413720)[v53]) != 0 && *((char *)(v12 + 217)) != 0 && (*((long long *)(v66 * 8 + 4270240)) == 4215342 || *((long long *)(v66 * 8 + 4270240)) == 4215597) || rcx<8> == 0 && (char)((unsigned int)tmp_249 | rsi<4> | r11<4>) == 0 && v57 <= 87 && v143 == 0 && *(&((char *)&g_413720)[v53]) != 0 && *((char *)(v10 + 217)) != 0 && (*((long long *)(v66 * 8 + 4270240)) == 4215031 || *((long long *)(v66 * 8 + 4270240)) == 4214711))\n        {\n            sub_4036f0();\n        }\n        if (v57 <= 87 && *(&((char *)&g_413720)[v53]) != 0 && *((char *)(v12 + 217)) != 0 && (*((long long *)(v66 * 8 + 4270240)) == 4215342 || *((long long *)(v66 * 8 + 4270240)) == 4215597) || rcx<8> == 0 && (char)((unsigned int)tmp_249 | rsi<4> | r11<4>) == 0 && v57 <= 87 && v143 == 0 && *(&((char *)&g_413720)[v53]) != 0 && *((char *)(v10 + 217)) != 0 && (*((long long *)(v66 * 8 + 4270240)) == 4215031 || *((long long *)(v66 * 8 + 4270240)) == 4214711) || *((char *)(v10 + 217)) != 0 && (v57 <= 87 && *((long long *)(v66 * 8 + 4270240)) == 4213730 && *(&((char *)&g_413720)[v53]) != 0 || v57 <= 87 && *(&((char *)&g_413720)[v53]) != 0 && (*((long long *)(v66 * 8 + 4270240)) == 4215054 || *((long long *)(v66 * 8 + 4270240)) == 4215665 || *((long long *)(v66 * 8 + 4270240)) == 4213968 || *((long long *)(v66 * 8 + 4270240)) == 4215092 || *((long long *)(v66 * 8 + 4270240)) == 4215627 || *((long long *)(v66 * 8 + 4270240)) == 4213901)) || v57 <= 87 && *((long long *)(v66 * 8 + 4270240)) == 4215467 && *(&((char *)&g_413720)[v53]) != 0 && *((char *)(v12 + 217)) != 0)\n        {\n            v55 = v10;\n            v76 = v11;\n            v67 = v12;\n            v68 = v13;\n            v64 = v14;\n            v66 = v15;\n            v53 = v16;\n        }\n        if (...)\n        {\n            v35 = v65;\n            v238 = v66 + 56;\n            v36 = v68;\n            v39 = v5;\n            v37 = v264;\n            v38 = v76;\n            v40 = v4;\n            v41 = v6;\n            *((int128_t *)(v66 + 56)) = *((int128_t *)&(&v36)[-1]);\n            *((unsigned long long *)(v66 + 104)) = v41;\n            *((int128_t *)(v66 + 72)) = *((int128_t *)&v37);\n            *((int128_t *)(v66 + 88)) = *((int128_t *)&(&v40)[-1]);\n            v167 = v53 + (unsigned short)*((short *)v67);\n            v168 = (unsigned short)*((short *)v67);\n            if ((unsigned int)v167 <= 112 && v168 == (char)*((char *)(v167 + &g_4135e0)))\n            {\n                v53 = (char)*((char *)(v167 + &g_413660));\n            }\n            if ((unsigned int)v167 > 112 || v168 != (char)*((char *)(v167 + &g_4135e0)))\n            {\n                v53 = *(&((char *)&g_4136e0)[v64]);\n            }\n        }\n        if (...)\n        {\n            if ((unsigned int)v53 == 12)\n            {\n                break;\n            }\n            v239 = (char)*(&((char *)&g_4137a0)[v53]);\n            if ((unsigned int)(char)*(&((char *)&g_4137a0)[v53]) != -93)\n            {\n                break;\n            }\n        }\n    }\n    if (...)\n    {\n        v265 = 0;\n    }\n    else if (...)\n    {\n        v265 = 2;\n    }\n    else if (...)\n    {\n        return v265;\n    }\n    if ((unsigned int)-18446744069414584322 == -2)\n    {\n        v169 = *((long long *)v55);\n        v170 = 1;\n        v171 = (char)*((char *)*((long long *)v55));\n        v172 = (char)*((char *)*((long long *)v55));\n        while (true)\n        {\n            v173 = v172;\n            if (v172 <= 32)\n            {\n                v174 = 1 << (v172 & 63);\n                if ((0x100003e00 & v174) != 0)\n                {\n                    v175 = v169 + 1;\n                    do\n                    {\n                        *((unsigned long long *)v55) = v175;\n                        v171 = (char)*((char *)v175);\n                        v169 = v175;\n                        v173 = (char)*((char *)v175);\n                        v175 += 1;\n                    }\n                    while (*((char *)v175) <= 32 && (0x100003e00 & 1 << (unsigned long long)((char)v173 & 63)) != 0);\n                    if (true)\n                    {\n                        v176 = (unsigned int)v173 - 43 & -3;\n                    }\n                }\n                if ((unsigned int)(v171 - 48) > 9 && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9))\n                {\n                    v178 = v171 - 65;\n                }\n            }\n            if (v172 > 32 || (0x100003e00 & v174) != 0 && (unsigned int)(v171 - 48) > 9)\n            {\n                v176 = (unsigned int)v173 - 43 & -3;\n            }\n            if ((unsigned int)(v171 - 48) > 9 && ((0x100003e00 & v174) != 0 || v172 > 32))\n            {\n                if (v176 != 0)\n                {\n                    v178 = v171 - 65;\n                }\n                else\n                {\n                    v177 = v173 == 45;\n                }\n            }\n            if ((unsigned int)(v171 - 48) <= 9 && v172 > 32)\n            {\n                v177 = v173 == 45;\n            }\n            if (v172 <= 32 || v176 != 0)\n            {\n                if ((v172 <= 32 || (unsigned int)(v171 - 48) <= 9) && ((unsigned int)(v171 - 48) <= 9 || v172 > 32) && ((0x100003e00 & v174) == 0 || v172 > 32 || (unsigned int)(v171 - 48) > 9))\n                {\n                    v169 = *((long long *)v55);\n                    v180 = 0;\n                }\n                if ((288230371923853311 & 1 << (v178 & 63)) != 0 && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 65) <= 57) && ((unsigned int)(v171 - 65) <= 57 || v172 <= 32) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (0x100003e00 & v174) != 0 || v172 > 32) && ((unsigned int)(v171 - 48) > 9 || (0x100003e00 & v174) != 0 || v172 > 32))\n                {\n                    v188 = &v19;\n                    v189 = *((long long *)v55) + 1;\n                    while (true)\n                    {\n                        if (v188 < stack_base + -1365)\n                        {\n                            *((unsigned long long *)&v19) = v173;\n                            v188 = &v19;\n                        }\n                        *((unsigned long long *)v55) = v189;\n                        v173 = (char)*((char *)v189);\n                        v192 = (unsigned int)(char)*((char *)v189) - 65;\n                        if (v173 != 46 && ((288230371923853311 & 1 << (v192 & 63)) == 0 || (unsigned int)(char)*((char *)v189) - 65 > 57))\n                        {\n                            break;\n                        }\n                        v189 += 1;\n                    }\n                    *(v188) = 0;\n                    v196 = (char)v19;\n                    v197 = &v19;\n                    if ((char)v19 != 0)\n                    {\n                        do\n                        {\n                            v197 = &v19;\n                            v19 = ((unsigned int)(v196 - 97) < 26? (unsigned int)v196 - 32 : (unsigned int)rax<8>);\n                            v196 = (char)*(&((char *)&v19)[1]);\n                        }\n                        while ((char)v196 != 0);\n                    }\n                    v5 = v238;\n                    v204 = \"AM\";\n                    v205 = &g_4134c0;\n                    v4 = v53;\n                    while (true)\n                    {\n                        v208 = strcmp(&v19, v204);\n                        if (v208 != 0)\n                        {\n                            v205 = &v205[1];\n                            v204 = v205->field_0;\n                            v209 = &v19;\n                            do\n                            {\n                                tmp_14 = (unsigned int)v19;\n                                v209 = &v19;\n                            }\n                            while (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) == 0);\n                            tmp_62 = v209;\n                            v211 = (char *)v209 + 2;\n                            v212 = 1;\n                            v213 = -3 + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v209 + 2) : v209) + -1 * (((unsigned int)((((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)? 1 : 0) & 1) + -0x1 * &v19;\n                            if (-3 + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? v211 : tmp_62) + -1 * (((unsigned int)((((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) + (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) >> 16) : (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152)? 1 : 0) & 1) + -0x1 * &v19 != 3)\n                            {\n                                v212 = 0;\n                                if (v10 == 4)\n                                {\n                                    v212 = 0;\n                                    v212 = (char)(*(&((char *)&v19)[3]) == 46);\n                                }\n                            }\n                            v5 = v5;\n                            v215 = \"JANUARY\";\n                            v10 = v213;\n                            v216 = &g_413320;\n                            v217 = v212;\n                            v4 = v4;\n                            v6 = v55;\n                            while (true)\n                            {\n                                if (v217 != 0)\n                                {\n                                    v218 = strncmp(&v19, v215, 0x3) == 0;\n                                }\n                                else\n                                {\n                                    v218 = strcmp(&v19, v215) == 0;\n                                }\n                                if (v218 == 0)\n                                {\n                                    v216 += 16;\n                                    v215 = *((long long *)v216);\n                                    if (*((long long *)v216) == 0)\n                                    {\n                                        v238 = v5;\n                                        v244 = v10;\n                                        v5 = v218;\n                                        v11 = v4;\n                                        v4 = v6;\n                                        v258 = sub_403630();\n                                        v219 = v4;\n                                        v220 = v5;\n                                        v221 = (int)v11;\n                                        if (v258 == 0)\n                                        {\n                                            v222 = 4;\n                                            v223 = &v19;\n                                            v224 = \"DST\";\n                                            while (v222 != 0)\n                                            {\n                                                v222 -= 1;\n                                                v225 = (char)v19;\n                                                v226 = *(v224);\n                                                v224 = &v224[v227];\n                                                v223 = &v223[v227];\n                                                break;\n                                            }\n                                            v228 = \"YEAR\";\n                                            v229 = (v225 > v226) - 0 - (v225 < v226);\n                                            if ((char)v229 == 0)\n                                            {\n                                                v29 = 0;\n                                                v241 = 259;\n                                            }\n                                            else\n                                            {\n                                                v5 = v238;\n                                                v216 = &g_413260;\n                                                v4 = v221;\n                                                *((unsigned long long *)&v10) = v220;\n                                                v6 = v219;\n                                                while (true)\n                                                {\n                                                    v230 = strcmp(&v19, v228);\n                                                    if (v230 == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v216 += 16;\n                                                    v228 = *((long long *)v216);\n                                                    v231 = &v51;\n                                                    v259 = v4;\n                                                    v243 = v5;\n                                                    v242 = v10;\n                                                    v245 = v6;\n                                                    if (v51 == 83)\n                                                    {\n                                                        *((unsigned int *)&v4) = v239;\n                                                        v234 = \"YEAR\";\n                                                        v239 = v5;\n                                                        v5 = v244;\n                                                        v243 = &g_413260;\n                                                        v51 = 0;\n                                                        while (true)\n                                                        {\n                                                            v11 = v245;\n                                                            v10 = v231;\n                                                            v6 = v242;\n                                                            v235 = strcmp(&v19, v234);\n                                                            v242 = (char)v6;\n                                                            v231 = v10;\n                                                            v245 = v11;\n                                                            if (v235 != 0)\n                                                            {\n                                                                v243 += 16;\n                                                                v234 = *((long long *)v243);\n                                                                v244 = v5;\n                                                                v239 = (int)v4;\n                                                                *(v10) = 83;\n                                                            }\n                                                            else\n                                                            {\n                                                                v236 = v243;\n                                                                v237 = v244;\n                                                                v238 = v239;\n                                                                v239 = (unsigned int)v4;\n                                                                v240 = *((int *)(v236 + 12));\n                                                                v241 = (unsigned int)*((int *)(v236 + 8));\n                                                            }\n                                                        }\n                                                        if (v235 == 0)\n                                                        {\n                                                            v29 = v240;\n                                                        }\n                                                        else if (*((long long *)v243) == 0 && v235 != 0)\n                                                        {\n                                                            v4 = v239;\n                                                            v246 = \"TOMORROW\";\n                                                            v247 = v243;\n                                                            v5 = v244;\n                                                            v238 = &g_413100;\n                                                            v248 = v259;\n                                                        }\n                                                    }\n                                                    v4 = v239;\n                                                    v246 = \"TOMORROW\";\n                                                    v247 = v243;\n                                                    v5 = v244;\n                                                    v238 = &g_413100;\n                                                    v248 = v259;\n                                                    while (true)\n                                                    {\n                                                        v10 = v245;\n                                                        v6 = v242;\n                                                        v249 = strcmp(&v19, v246);\n                                                        v242 = (char)v6;\n                                                        v245 = v10;\n                                                        if (v249 != 0)\n                                                        {\n                                                            v238 = &v238[1];\n                                                            v246 = v238->field_0;\n                                                            v250 = (char)v19;\n                                                            v239 = (unsigned int)v4;\n                                                            if (v5 == 1)\n                                                            {\n                                                                v253 = &g_412c20;\n                                                                if (v250 != 65)\n                                                                {\n                                                                    while (true)\n                                                                    {\n                                                                        v254 = v253->field_10;\n                                                                        v255 = &v253->field_10;\n                                                                        if (v253->field_10 == 0)\n                                                                        {\n                                                                            break;\n                                                                        }\n                                                                        if (*(v254) != v250)\n                                                                        {\n                                                                            v253 = v255;\n                                                                        }\n                                                                        else\n                                                                        {\n                                                                            v240 = (int)v253->field_1c;\n                                                                            v241 = v253->field_18;\n                                                                        }\n                                                                    }\n                                                                    if (*(v254) == v250 && v253->field_10 != 0)\n                                                                    {\n                                                                        v29 = v240;\n                                                                    }\n                                                                    else\n                                                                    {\n                                                                        v256 = &v19;\n                                                                        v257 = &v19;\n                                                                    }\n                                                                }\n                                                                else\n                                                                {\n                                                                    v29 = -3600;\n                                                                    v241 = 273;\n                                                                }\n                                                            }\n                                                            if (v5 != 1 || v250 != 65)\n                                                            {\n                                                                v256 = &v19;\n                                                                v257 = &v19;\n                                                                if (v250 != 0)\n                                                                {\n                                                                    do\n                                                                    {\n                                                                        if (v250 != 46)\n                                                                        {\n                                                                            v257 = &v19;\n                                                                        }\n                                                                        else\n                                                                        {\n                                                                            v242 = 1;\n                                                                        }\n                                                                        v256 = &v19;\n                                                                        v250 = (char)*(&((char *)&v19)[1]);\n                                                                        tmp_11 = *(&((char *)&v19)[1]);\n                                                                        *(v257) = *(&((char *)&v19)[1]);\n                                                                    }\n                                                                    while (tmp_11 != 0);\n                                                                    if (v242 != 0)\n                                                                    {\n                                                                        v5 = v259;\n                                                                        v4 = v10;\n                                                                        v258 = sub_403630();\n                                                                        v245 = v4;\n                                                                        v259 = (int)v5;\n                                                                        if (v258 != 0)\n                                                                        {\n                                                                            break;\n                                                                        }\n                                                                    }\n                                                                }\n                                                                if (*((char *)(v245 + 217)) == 0)\n                                                                {\n                                                                    break;\n                                                                }\n                                                                v5 = v245;\n                                                                v4 = v259;\n                                                                dcgettext(0x0, 0x411bbb, 0x5);\n                                                                sub_403400();\n                                                                v260 = 2;\n                                                                v262 = (int)v4;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            v251 = v238;\n                                                            v252 = v248;\n                                                            v238 = v247;\n                                                            v239 = (unsigned int)v4;\n                                                            v240 = (int)v251->field_c;\n                                                            v241 = v251->field_8;\n                                                        }\n                                                    }\n                                                    if (v249 == 0 || v5 == 1 && v238->field_0 == 0 && v250 != 65)\n                                                    {\n                                                        v29 = v240;\n                                                    }\n                                                    else if (v238->field_0 == 0 && v249 != 0 && v250 != 0 && v242 != 0 && (v5 != 1 || v250 != 65))\n                                                    {\n                                                        v240 = (int)v258[1 + 1];\n                                                        v241 = v258[1];\n                                                    }\n                                                    else if (v5 == 1 && v250 == 65 && v238->field_0 == 0 && v249 != 0)\n                                                    {\n                                                        v260 = (char)*(&((char *)&g_413820)[v241]);\n                                                    }\n                                                    else if (v238->field_0 == 0 && v249 != 0 && (v250 == 0 || v242 == 0 || v258 == 0) && (v5 != 1 || v250 != 65))\n                                                    {\n                                                        v260 = 2;\n                                                    }\n                                                    else if (v238->field_0 == 0 && v249 != 0 && *((char *)(v245 + 217)) != 0 && (v250 == 0 || v242 == 0 || v258 == 0) && (v5 != 1 || v250 != 65))\n                                                    {\n                                                        v239 += v260;\n                                                    }\n                                                }\n                                                if (*((long long *)v216) == 0 && v230 != 0)\n                                                {\n                                                    v260 = 2;\n                                                }\n                                                else if (*((long long *)v216) == 0 && v230 != 0)\n                                                {\n                                                    v29 = v240;\n                                                }\n                                                else if (true)\n                                                {\n                                                    v232 = v216;\n                                                    v233 = (int)v4;\n                                                    v238 = v5;\n                                                    v240 = *((int *)(v232 + 12));\n                                                    v241 = (unsigned int)*((int *)(v232 + 8));\n                                                }\n                                                else if (*((long long *)v216) == 0 && v230 != 0)\n                                                {\n                                                    v240 = (int)v258[1 + 1];\n                                                    v241 = v258[1];\n                                                }\n                                                else if (*((long long *)v216) == 0 && v230 != 0)\n                                                {\n                                                    v239 += v260;\n                                                }\n                                                else if (*((long long *)v216) == 0 && v230 != 0)\n                                                {\n                                                    v260 = (char)*(&((char *)&g_413820)[v241]);\n                                                }\n                                            }\n                                        }\n                                        if (v258 != 0 || (char)v229 != 0)\n                                        {\n                                            v240 = (int)v258[1 + 1];\n                                            v241 = v258[1];\n                                        }\n                                    }\n                                }\n                                if (v218 != 0 || v258 == 0 && *((long long *)v216) == 0 && (char)v229 != 0)\n                                {\n                                    v232 = v216;\n                                    v233 = (int)v4;\n                                    v238 = v5;\n                                    v240 = *((int *)(v232 + 12));\n                                    v241 = (unsigned int)*((int *)(v232 + 8));\n                                }\n                            }\n                            if (v218 != 0 || *((long long *)v216) == 0 && v258 != 0 || *((long long *)v216) == 0 && (char)v229 != 0)\n                            {\n                                v29 = v240;\n                            }\n                            else if (v258 == 0 && v218 == 0 && *((long long *)v216) == 0 && (char)v229 != 0)\n                            {\n                                v239 += v260;\n                            }\n                            else if (v258 == 0 && v218 == 0 && *((long long *)v216) == 0)\n                            {\n                                v260 = (char)*(&((char *)&g_413820)[v241]);\n                            }\n                            else if (v258 == 0 && v218 == 0 && *((long long *)v216) == 0 && (char)v229 != 0)\n                            {\n                                v260 = 2;\n                            }\n                        }\n                        else\n                        {\n                            tmp_5 = v205;\n                            v210 = (int)v4;\n                            v238 = v5;\n                            v240 = *((int *)(tmp_5 + 12));\n                            v241 = (unsigned int)*((int *)(tmp_5 + 8));\n                        }\n                        v29 = v240;\n                    }\n                    if (v205->field_0 == 0 && v208 != 0)\n                    {\n                        v239 += v260;\n                    }\n                    else if (v205->field_0 == 0 && v208 != 0)\n                    {\n                        v260 = 2;\n                    }\n                    else if (v205->field_0 == 0 && v208 != 0)\n                    {\n                        v260 = (char)*(&((char *)&g_413820)[v241]);\n                    }\n                }\n                if (((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (unsigned int)(v171 - 65) > 57) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (0x100003e00 & v174) != 0 || v172 > 32) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (0x100003e00 & v174) != 0 || v172 > 32) && ((unsigned int)(v171 - 48) > 9 || (0x100003e00 & v174) != 0 || v172 > 32) && v173 == 40)\n                {\n                    v183 = *((long long *)v55);\n                    v184 = 0;\n                    while (true)\n                    {\n                        v169 = v183 + 1;\n                        *((unsigned long long *)v55) = v183 + 1;\n                        v185 = (char)*((char *)(v183 + 1 - 1));\n                        if (*((char *)(v183 + 1 - 1)) == 0)\n                        {\n                            break;\n                        }\n                        if (v185 != 40)\n                        {\n                            v184 -= (char)(v185 == 41);\n                        }\n                        else\n                        {\n                            v184 += 1;\n                        }\n                        if (v184 != 0)\n                        {\n                            v183 = v169;\n                        }\n                        else\n                        {\n                            v187 = (char)*((char *)(v183 + 1));\n                            v172 = (char)*((char *)(v183 + 1));\n                        }\n                    }\n                    if (v184 == 0 && *((char *)(v183 + 1 - 1)) != 0)\n                    {\n                        v173 = v172;\n                    }\n                    else\n                    {\n                        v260 = 0;\n                    }\n                }\n            }\n            if (v176 == 0 && ((0x100003e00 & v174) != 0 || v172 > 32) && (v172 > 32 || (unsigned int)(v171 - 48) > 9))\n            {\n                v179 = *((long long *)v55) + 1;\n                v180 = (0 - (unsigned int)(char)(v177 < 1) & 2) - 1;\n                while (true)\n                {\n                    *((unsigned long long *)v55) = v179;\n                    v172 = (char)*((char *)v179);\n                    v169 = v179;\n                    v173 = (char)*((char *)v179);\n                    if (*((char *)v179) <= 32)\n                    {\n                        v179 = v169 + 1;\n                        v181 = v172;\n                    }\n                    else\n                    {\n                        v182 = v172;\n                        break;\n                    }\n                }\n                if ((0x100003e00 & 1 << (v172 & 63)) == 0 || *((char *)v179) > 32)\n                {\n                    v173 = v172;\n                }\n                else if (*((char *)v179) > 32)\n                {\n                    v190 = v169;\n                    v191 = 0;\n                    v170 = v173;\n                }\n            }\n            if (v176 == 0 && v172 > 32 || (unsigned int)(v171 - 48) <= 9 && v172 > 32 || (unsigned int)(v171 - 48) <= 9 && (0x100003e00 & v174) == 0 && (unsigned int)(v171 - 48) <= 9 || (unsigned int)(v171 - 48) <= 9 && v172 <= 32 && (unsigned int)(v171 - 48) > 9 || v176 == 0 && (0x100003e00 & v174) != 0 && (unsigned int)(v171 - 48) > 9)\n            {\n                v190 = v169;\n                v191 = 0;\n                v170 = v173;\n                while (true)\n                {\n                    v193 = v191 + ((unsigned int)v180 == -1? 48 - v170 : (unsigned int)(rdi<8> - 48));\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>))))\n                    {\n                        break;\n                    }\n                    v170 = (char)*((char *)(v190 + 1));\n                    v194 = v190 + 1;\n                    v195 = (char)*((char *)(v190 + 1));\n                    if ((unsigned int)((unsigned long long)(char)*((char *)(v190 + 1)) - 48) > 9)\n                    {\n                        v198 = v195 & -3;\n                        if (v198 == 44)\n                        {\n                            v199 = (unsigned int)(char)*((char *)(v190 + 1)) - 48;\n                            if ((unsigned int)(char)*((char *)(v190 + 1)) - 48 <= 9)\n                            {\n                                v200 = v190 + 3;\n                                v201 = (char)*((char *)(v190 + 3));\n                                v202 = 8;\n                                v203 = v201;\n                                do\n                                {\n                                    v206 = v201 - 48;\n                                    v199 = (unsigned int)v199 * 10;\n                                    if ((unsigned int)(v201 - 48) <= 9)\n                                    {\n                                        v201 = v200[1];\n                                        v199 += v206;\n                                        v200 = &v200[1];\n                                        v203 = v201;\n                                        v206 = (unsigned int)v201 - 48;\n                                    }\n                                    v207 = v202;\n                                    v202 -= 1;\n                                }\n                                while (v207 != 1);\n                                if ((unsigned int)v180 == -1)\n                                {\n                                    if (v206 <= 9)\n                                    {\n                                        if (v203 == 48)\n                                        {\n                                            do\n                                            {\n                                                v200 = &v200[1];\n                                                v214 = v200[0];\n                                            }\n                                            while (v214 == 48 && (unsigned int)v200[0] - 48 <= 9);\n                                            if ((unsigned int)v200[0] - 48 <= 9)\n                                            {\n                                                v199 = (unsigned int)v199 + 1;\n                                            }\n                                        }\n                                        if (v203 != 48 || (unsigned int)v199 != 0)\n                                        {\n                                            v199 = (unsigned int)v199 + 1;\n                                        }\n                                    }\n                                    if ((unsigned int)v199 == 0 && v206 > 9)\n                                    {\n                                        *((char *[2])v55) = v200;\n                                        v260 = 21;\n                                        v29 = v8;\n                                        v8 = 0;\n                                    }\n                                }\n                                if (v206 <= 9 && ((unsigned int)v200[0] - 48 <= 9 || (unsigned int)v180 != -1) && (v203 != 48 || (unsigned int)v199 != 0 || (unsigned int)v180 != -1))\n                                {\n                                    do\n                                    {\n                                        v200 = &v200[1];\n                                    }\n                                    while ((unsigned int)v200[0] - 48 <= 9);\n                                }\n                                if ((unsigned int)v199 == 0 && (unsigned int)v180 != -1 || v206 > 9 && (unsigned int)v180 != -1 || (unsigned int)v180 != -1 && (unsigned int)v180 >= 0 || (unsigned int)v200[0] - 48 <= 9 && (unsigned int)v199 == 0 && v206 <= 9 && v203 != 48 || (unsigned int)v200[0] - 48 <= 9 && (unsigned int)v199 == 0 && v206 <= 9 && (unsigned int)v199 != 0 || (unsigned int)v200[0] - 48 <= 9 && v206 <= 9 && v203 != 48 && (unsigned int)v180 >= 0 || (unsigned int)v200[0] - 48 <= 9 && v206 <= 9 && (unsigned int)v199 != 0 && (unsigned int)v180 >= 0)\n                                {\n                                    *((char *[2])v55) = v200;\n                                    v8 = v199;\n                                    v29 = v8;\n                                    v260 = !(0 - (unsigned int)(char)((unsigned int)rsi<8> < 1)) + 22;\n                                }\n                                if ((v206 <= 9 || (unsigned int)v180 == -1) && ((unsigned int)v180 == -1 || (unsigned int)v180 < 0) && (v206 <= 9 || (unsigned int)v199 != 0) && ((unsigned int)v180 == -1 || (unsigned int)v199 != 0) && (v203 != 48 || (unsigned int)v199 != 0 || (unsigned int)v180 != -1) && (v203 == 48 || (unsigned int)v180 < 0 || (unsigned int)v200[0] - 48 > 9 || v206 > 9) && (v203 == 48 || (unsigned int)v200[0] - 48 > 9 || (unsigned int)v199 != 0 || v206 > 9))\n                                {\n                                    if (v8 == 0x8000000000000000)\n                                    {\n                                        break;\n                                    }\n                                    *((char *[2])v55) = v200;\n                                    v29 = v8 - 1;\n                                    v8 = (int)(0x3b9aca00 - (unsigned int)v199);\n                                    v260 = 21;\n                                }\n                            }\n                        }\n                        if ((unsigned int)(char)*((char *)(v190 + 1)) - 48 > 9 || v198 != 44)\n                        {\n                            *((unsigned long long *)v55) = v190;\n                            v8 = v193;\n                            v29 = (char)v180 % 0x80000000;\n                            v9 = v190 - v169;\n                            v260 = !(0 - (unsigned int)(char)((unsigned int)v180 < 1)) + 20;\n                        }\n                    }\n                    else\n                    {\n                        v191 = v8 * 10;\n                        if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x34<64>, Mul(Load(addr=stack_base-1472, size=8, endness=Iend_LE), 0xa<64>), 0xa<64>, Conv(1->64, ((t16 & 0xff<64>) < 0x1<64>))))\n                        {\n                            break;\n                        }\n                        v190 = v194;\n                    }\n                }\n                if (true)\n                {\n                    v260 = 2;\n                }\n                else if (...)\n                {\n                    v239 += v260;\n                }\n            }\n            if (((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && (v172 <= 32 || v176 != 0) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (unsigned int)(v171 - 65) > 57) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (0x100003e00 & v174) != 0 || v172 > 32) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (0x100003e00 & v174) != 0 || v172 > 32) && ((unsigned int)(v171 - 48) > 9 || (0x100003e00 & v174) != 0 || v172 > 32) && v173 != 40 || v172 <= 32 && (unsigned int)(v171 - 48) > 9 && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && (unsigned int)(v171 - 65) > 57)\n            {\n                *((char **)v55) = &v169[1];\n                v241 = *(v169);\n                if (*(v169) != 0)\n                {\n                    break;\n                }\n            }\n            if ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 65) <= 57 || (288230371923853311 & 1 << (v178 & 63)) != 0)\n            {\n                v260 = 2;\n            }\n        }\n        if ((unsigned int)(v171 - 48) <= 9 && (0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) <= 9 && (unsigned int)(v171 - 48) > 9 || v176 == 0 && v172 > 32 || (unsigned int)(v171 - 48) <= 9 && v172 > 32 || (288230371923853311 & 1 << (v178 & 63)) != 0 && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 65) <= 57) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || (unsigned int)(v171 - 48) > 9) && (char)v19 != 0 || (288230371923853311 & 1 << (v178 & 63)) != 0 && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 65) <= 57) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || (unsigned int)(v171 - 48) > 9) && (char)v19 == 0)\n        {\n            v239 += v260;\n        }\n        else if ((((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (unsigned int)(v171 - 65) > 57) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || v176 != 0) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || (unsigned int)(v171 - 48) > 9) && v173 != 40 || (unsigned int)(v171 - 48) > 9 && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && (unsigned int)(v171 - 65) > 57) && *(v169) == 0 || ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (unsigned int)(v171 - 65) > 57) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || v176 != 0) && ((288230371923853311 & 1 << (v178 & 63)) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || (unsigned int)(v171 - 48) > 9) && v173 == 40)\n        {\n            v260 = 0;\n        }\n        else if (!((288230371923853311 & 1 << (v178 & 63)) != 0 && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 65) <= 57) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || (unsigned int)(v171 - 48) > 9) && (char)v19 != 0 || (288230371923853311 & 1 << (v178 & 63)) != 0 && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 65) <= 57) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && ((0x100003e00 & v174) == 0 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 65) <= 57 || v176 != 0) && ((unsigned int)(v171 - 65) <= 57 || (unsigned int)(v171 - 48) > 9) && (v172 <= 32 || (unsigned int)(v171 - 48) > 9) && ((unsigned int)(v171 - 48) > 9 || v176 != 0) && ((unsigned int)(v171 - 48) > 9 || (unsigned int)(v171 - 48) > 9) && (char)v19 == 0))\n        {\n            if (...)\n            {\n                v260 = (char)*(&((char *)&g_413820)[v241]);\n            }\n        }\n    }\n    v260 = 0;\n    if ((unsigned int)v241 > 277)\n    {\n        v239 = (unsigned long long)((unsigned int)v239 + 2);\n        v260 = 2;\n    }\n    if ((unsigned int)-18446744069414584322 == -2 || (unsigned int)v241 <= 277)\n    {\n        v260 = (char)*(&((char *)&g_413820)[v241]);\n        v239 += v260;\n    }\n    if ((unsigned int)v239 <= 112)\n    {\n        v263 = v239;\n        if ((char)*((char *)(v239 + &g_4135e0)) == v260)\n        {\n            v53 = (char)*((char *)(v263 + &g_413660));\n            if (*((char *)(v263 + &g_413660)) != 0)\n            {\n                v67 = v102;\n                v238 = &v238->field_38;\n                v7 = v7 - 1 + (char)(v7 < 1);\n                v30 = v8;\n                v31 = v9;\n                v238->field_0 = *((int128_t *)&(&v30)[-1]);\n                v238->field_30 = v34;\n                v238->field_10 = *((int128_t *)&v31);\n                v238->field_20 = *((int128_t *)&v33);\n            }\n            else\n            {\n                v67 = v102;\n                v66 = v238;\n                v65 = *((long long *)&v238->field_38);\n                *((int128_t *)&v35) = *((int128_t *)&v238->field_38);\n                v68 = v238->field_40;\n                v264 = *((long long *)&v238->field_48);\n                v41 = *((long long *)&v238->field_68);\n                v76 = v238->field_50;\n                *((int128_t *)&v37) = *((int128_t *)&v238->field_48);\n                *((int128_t *)&v39) = *((int128_t *)&v238->field_58);\n                v5 = *((long long *)&v238->field_58);\n                v4 = v238->field_60;\n                v6 = *((int *)&v238->field_68);\n            }\n        }\n    }\n    v265 = 2;\n    v265 = 0;\n    return v265;\n}\n"
        },
        {
            "funcName": "sub_409ed0",
            "funcStartAddr": "0x409ed0",
            "funcEndAddr": "0x409f43",
            "decompiledFuncCode": "int sub_409ed0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_409800();\n}\n"
        },
        {
            "funcName": "sub_40a630",
            "funcStartAddr": "0x40a630",
            "funcEndAddr": "0x40a651",
            "decompiledFuncCode": "int sub_40a630()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_40a860(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402b80",
            "funcStartAddr": "0x402b80",
            "funcEndAddr": "0x402b8a",
            "decompiledFuncCode": "int sub_402b80()\n{\n}\n"
        },
        {
            "funcName": "sub_408070",
            "funcStartAddr": "0x408070",
            "funcEndAddr": "0x4080e2",
            "decompiledFuncCode": "int sub_408070()\n{\n    char v0;  // [bp-0x10]\n    unsigned long long v1;  // [bp-0x8]\n    unsigned long v3;  // rdx\n    unsigned int *v4;  // rdi\n    unsigned int *v5;  // rsi\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rbx\n    unsigned int v9;  // ecx\n    unsigned int *v10;  // rdi\n    unsigned int v11[2];  // rsi\n    unsigned int *v12;  // rdi\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n\n    if (!(v3 != 1))\n    {\n        *(v4) = *(v5);\n        if (*(v5) <= 68)\n        {\n            if (((char)v9 & 8) == 0)\n            {\n                *(v4) = *(v5) + 100;\n                return 1;\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    else if (v3 != 2)\n    {\n        v1 = v7;\n        time(&v0);\n        v13 = localtime((unsigned int)&v0);\n        if (v13 != 0)\n        {\n            *(v12) = *((int *)(v13 + 20));\n            v13 = 1;\n        }\n        v14 = v1;\n        return v13;\n    }\n    if (v3 == 2 && ((char)v6 & 2) != 0)\n    {\n        *(v10) = v11[0] * 100 + v11[1] - 1900;\n        return 1;\n    }\n    if ((((char)v6 & 2) == 0 || v3 == 1) && (((char)v6 & 2) == 0 || *(v5) <= 68) && (v3 == 1 || v3 == 2) && (*(v5) <= 68 || v3 == 2) && (((char)v6 & 2) == 0 || ((char)v9 & 8) != 0) && (v3 == 2 || ((char)v9 & 8) != 0))\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bf30",
            "funcStartAddr": "0x40bf30",
            "funcEndAddr": "0x40c08b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    struct struct_1 *field_30;\n} struct_0;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    char field_8;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    char field_8;\n} struct_2;\n\nextern char g_414b94;\n\nint sub_40bf30()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rax\n    char *v6;  // rbx\n    struct_3 *v7;  // rbp\n    unsigned long long v8;  // rax\n    char *v9;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    struct_2 *v13;  // rax\n\n    if (v1->field_30 != 0)\n    {\n        v7 = v2;\n        if (v1 <= v1->field_30)\n        {\n            v12 = 1;\n        }\n        if (v1 > v1->field_30 || v1->field_30 >= &v1[1])\n        {\n            v6 = v2 + 9;\n            if (*(v1->field_30) != 0)\n            {\n                while (true)\n                {\n                    v3 = strcmp(v6, v1->field_30);\n                    if (v3 == 0)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        if (*(v6) == 0)\n                        {\n                            v4 = &v7[1];\n                            if (&v7[1] != v6)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = &v6[-1 * v4];\n                                if (!(&v6[-1 * v4]) < v9)\n                                {\n                                    *(__errno_location()) = 12;\n                                    v12 = 0;\n                                }\n                            }\n                            else if (v7->field_8 == 0)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = 0;\n                            }\n                            if ((&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                            {\n                                v11 = &v9[v10];\n                                if (v11 <= 118)\n                                {\n                                    memcpy(v6, v1->field_30, v9);\n                                    *((char *)(v6 + v9)) = 0;\n                                }\n                                else\n                                {\n                                    v13 = sub_40bea0();\n                                    v7->field_0 = v13;\n                                    if (v13 != 0)\n                                    {\n                                        v13->field_8 = 0;\n                                        v6 = &v13[1];\n                                    }\n                                    else\n                                    {\n                                        v12 = 0;\n                                    }\n                                }\n                            }\n                        }\n                        if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                        {\n                            v6 = &v6[strlen(v6) + 1];\n                            v5 = v7->field_0;\n                            if (v7->field_0 == 0 || *(v6) != 0)\n                            {\n                                break;\n                            }\n                            v6 = &v7[1];\n                            v7 = v5;\n                            v8 = strcmp(v5 + 9, v1->field_30);\n                        }\n                    }\n                    if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                    {\n                        v3 = strcmp(v6, v1->field_30);\n                    }\n                    else if (*(v6) == 0 && v8 == 0 && v7->field_0 != 0 && (&v7[1] == v6 || *(v6) != 0) && (*(v6) != 0 || v7->field_8 != 0) || *(v6) == 0 && v13 != 0 && v11 > 118 && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || *(v6) == 0 && v11 <= 118 && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                    {\n                        v1->field_30 = v6;\n                        v12 = 1;\n                    }\n                    else if (*(v6) == 0 && (v13 == 0 || !(&v6[-1 * v4]) < v9) && (v13 == 0 || &v7[1] != v6) && (v7->field_8 == 0 || &v7[1] != v6) && (!(&v6[-1 * v4]) < v9 || v11 > 118) && (&v7[1] != v6 || v11 > 118))\n                    {\n                        return v12;\n                    }\n                }\n                if (true)\n                {\n                    v1->field_30 = v6;\n                    v12 = 1;\n                }\n                else\n                {\n                    return v12;\n                }\n            }\n            else\n            {\n                v6 = &g_414b94;\n            }\n            v1->field_30 = v6;\n            v12 = 1;\n        }\n        return v12;\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_402f30",
            "funcStartAddr": "0x402f30",
            "funcEndAddr": "0x402fce",
            "decompiledFuncCode": "extern unsigned int g_411a7f;\nextern unsigned int g_6182a0;\nextern char g_6183a8;\nextern unsigned long long g_6183b0;\n\nint sub_402f30()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40c430();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_6183a8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x411a7f, 0x5);\n            if (g_6183b0 != 0)\n            {\n                sub_409ea0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_6183a8 != 0)\n    {\n        v3 = sub_40c430();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_6183a8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6182a0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_408430",
            "funcStartAddr": "0x408430",
            "funcEndAddr": "0x4084c9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_6183b8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_408430()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_6183b8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40c430",
            "funcStartAddr": "0x40c430",
            "funcEndAddr": "0x40c48c",
            "decompiledFuncCode": "int sub_40c430()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40e2f0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a840",
            "funcStartAddr": "0x40a840",
            "funcEndAddr": "0x40a853",
            "decompiledFuncCode": "int sub_40a840()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_409c10",
            "funcStartAddr": "0x409c10",
            "funcEndAddr": "0x409ca5",
            "decompiledFuncCode": "extern struct_0 *g_6182f8;\nextern unsigned long long g_618300;\nextern unsigned long long g_618308;\nextern unsigned int g_618310;\nextern unsigned long long g_6183c0;\n\nint sub_409c10()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_618310;\n    if (g_618310 > 1)\n    {\n        v2 = &g_6182f8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6182f8[(unsigned long long)(g_618310 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_6182f8->field_8 != 6390720)\n    {\n        v1 = free(g_6182f8->field_8);\n        g_618300 = 0x100;\n        g_618308 = &g_6183c0;\n    }\n    if (g_6182f8 != 0x618300)\n    {\n        v1 = free(g_6182f8);\n        g_6182f8 = &g_618300;\n    }\n    g_618310 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409b2b",
            "funcStartAddr": "0x409b2b",
            "funcEndAddr": "0x409bf1",
            "decompiledFuncCode": "int sub_409b2b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4085d0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_40a610();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4085d0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40a860",
            "funcStartAddr": "0x40a860",
            "funcEndAddr": "0x40a891",
            "decompiledFuncCode": "extern unsigned int g_414a6f;\nextern unsigned int g_6182a0;\n\nint sub_40a860()\n{\n    dcgettext(0x0, 0x414a6f, 0x5);\n    error(g_6182a0, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40b96f",
            "funcStartAddr": "0x40b96f",
            "funcEndAddr": "0x40bd82",
            "decompiledFuncCode": "int sub_40b96f() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a010",
            "funcStartAddr": "0x40a010",
            "funcEndAddr": "0x40a022",
            "decompiledFuncCode": "int sub_40a010()\n{\n}\n"
        },
        {
            "funcName": "sub_40be20",
            "funcStartAddr": "0x40be20",
            "funcEndAddr": "0x40be43",
            "decompiledFuncCode": "int sub_40be20()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned long long *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long long v4;  // rbx\n    void *v5;  // rbx\n    unsigned long long v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        while (true)\n        {\n            v5 = *(v2);\n            v2 = v5;\n            if (v5 == 0)\n            {\n                break;\n            }\n        }\n        v7 = v0;\n        return (unsigned long long)free(v2);\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_409b02",
            "funcStartAddr": "0x409b02",
            "funcEndAddr": "0x409b2b",
            "decompiledFuncCode": "int sub_409b02()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_403400",
            "funcStartAddr": "0x403400",
            "funcEndAddr": "0x4034be",
            "decompiledFuncCode": "extern unsigned long long stderr;\n\nint sub_403400()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned long v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp-0xa0]\n    unsigned long v7;  // [bp-0x98]\n    unsigned long v8;  // [bp-0x90]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    void v16;  // [bp-0x18]\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned long v20;  // rcx\n    unsigned long v21;  // r8\n    unsigned long v22;  // r9\n    char v23;  // al\n    void v24;  // xmm0\n    void v25;  // xmm1\n    void v26;  // xmm2\n    void v27;  // xmm3\n    void v28;  // xmm4\n    void v29;  // xmm5\n    void v30;  // xmm6\n    void v31;  // xmm7\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    if (v23 != 0)\n    {\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n    }\n    fwrite(\"date: \", 0x1, 0x6, stderr);\n    v2 = stack_base + 8;\n    v0 = 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_40c370();\n}\n"
        },
        {
            "funcName": "sub_4026eb",
            "funcStartAddr": "0x4026eb",
            "funcEndAddr": "0x40270a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4026eb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409e00",
            "funcStartAddr": "0x409e00",
            "funcEndAddr": "0x409e0c",
            "decompiledFuncCode": "int sub_409e00()\n{\n}\n"
        },
        {
            "funcName": "sub_409800",
            "funcStartAddr": "0x409800",
            "funcEndAddr": "0x4099a0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6182f8;\nextern uint128_t g_618300;\nextern unsigned int g_618310;\nextern int512_t g_6183c0;\n\nint sub_409800()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_6182f8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_618310 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_6182f8 != 0x618300)\n            {\n                v16 = sub_40a670();\n                g_6182f8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_40a670();\n                v17 = v15;\n                g_6182f8 = v15;\n                *(v15) = g_618300;\n            }\n            memset(&v17[(long long)(int)g_618310], 0x0, (int)((unsigned int)v13 + 1 - g_618310) * 16);\n            g_618310 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_40a860(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_618310 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4085d0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6390720)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_40a610();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4085d0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_402798",
            "funcStartAddr": "0x402798",
            "funcEndAddr": "0x4027d4",
            "decompiledFuncCode": "int sub_402798() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a7e0",
            "funcStartAddr": "0x40a7e0",
            "funcEndAddr": "0x40a80e",
            "decompiledFuncCode": "int sub_40a7e0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_40a860(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4099f0",
            "funcStartAddr": "0x4099f0",
            "funcEndAddr": "0x4099ff",
            "decompiledFuncCode": "extern int512_t g_6184c0;\n\nint sub_4099f0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6184c0 : v1)) = v2;\n    return &g_6184c0;\n}\n"
        },
        {
            "funcName": "sub_40b810",
            "funcStartAddr": "0x40b810",
            "funcEndAddr": "0x40b890",
            "decompiledFuncCode": "int sub_40b810()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long long v4;  // [bp+0x8]\n    unsigned int v5[8];  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rax\n\n    v5 = v4;\n    if (v4 != 0)\n    {\n        v3 = v5[0];\n        v2 = v5[1];\n        v1 = v5[1];\n        v0 = v5[3 + 1];\n        v8 = (unsigned int)sub_40b6f0() + v6;\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return v8;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>) || v4 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return (9223372036854775805 < v6? v6 - 1 : 9223372036854775807);\n        }\n        else if (v6 < 9223372036854775810)\n        {\n            return v6 + 1;\n        }\n        return 0x8000000000000000;\n    }\n}\n"
        },
        {
            "funcName": "sub_409cd0",
            "funcStartAddr": "0x409cd0",
            "funcEndAddr": "0x409cda",
            "decompiledFuncCode": "int sub_409cd0()\n{\n}\n"
        },
        {
            "funcName": "sub_409cb0",
            "funcStartAddr": "0x409cb0",
            "funcEndAddr": "0x409cc1",
            "decompiledFuncCode": "int sub_409cb0()\n{\n}\n"
        },
        {
            "funcName": "sub_409e1f",
            "funcStartAddr": "0x409e1f",
            "funcEndAddr": "0x409e90",
            "decompiledFuncCode": "extern uint128_t g_6184c0;\nextern uint128_t g_6184d0;\nextern uint128_t g_6184e0;\nextern unsigned long long g_6184f0;\n\nint sub_409e1f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6184f0;\n    *((uint128_t *)&v0) = g_6184c0;\n    *((uint128_t *)&v1) = g_6184d0;\n    *((uint128_t *)&v2) = g_6184e0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_409800();\n}\n"
        },
        {
            "funcName": "sub_40e2d0",
            "funcStartAddr": "0x40e2d0",
            "funcEndAddr": "0x40e2ef",
            "decompiledFuncCode": "int sub_40e2d0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    char v2;  // [bp-0x9]\n    unsigned long v4;  // r9\n    unsigned long v5;  // r8\n\n    v2 = 0;\n    v1 = v4;\n    v0 = v5;\n    return sub_40cb00();\n}\n"
        },
        {
            "funcName": "sub_40cb00",
            "funcStartAddr": "0x40cb00",
            "funcEndAddr": "0x40e286",
            "decompiledFuncCode": "int sub_40cb00() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40be50",
            "funcStartAddr": "0x40be50",
            "funcEndAddr": "0x40be91",
            "decompiledFuncCode": "int sub_40be50()\n{\n    unsigned int *v1;  // rbx\n    unsigned long|unsigned int v2;  // r13\n\n    v1 = __errno_location();\n    v2 = *(v1);\n    if ((char)sub_40bdd0() == 0)\n    {\n        v2 = *(v1);\n    }\n    sub_40be20();\n    *((unsigned long *)&v1) = v2;\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_402e50",
            "funcStartAddr": "0x402e50",
            "funcEndAddr": "0x402ebd",
            "decompiledFuncCode": "int sub_402e50()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_402b90();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_402cb0();\n        sub_402d30();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409d00",
            "funcStartAddr": "0x409d00",
            "funcEndAddr": "0x409d12",
            "decompiledFuncCode": "int sub_409d00()\n{\n}\n"
        },
        {
            "funcName": "sub_4030d0",
            "funcStartAddr": "0x4030d0",
            "funcEndAddr": "0x40310a",
            "decompiledFuncCode": "int sub_4030d0()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_touch.elf"
}