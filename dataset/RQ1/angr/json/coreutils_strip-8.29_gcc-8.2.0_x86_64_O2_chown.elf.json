{
    "funcInfo": [
        {
            "funcName": "sub_40b090",
            "funcStartAddr": "0x40b090",
            "funcEndAddr": "0x40b0c4",
            "decompiledFuncCode": "int sub_40b090()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_40ae10();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ba20",
            "funcStartAddr": "0x40ba20",
            "funcEndAddr": "0x40ba6c",
            "decompiledFuncCode": "int sub_40ba20()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40a680",
            "funcStartAddr": "0x40a680",
            "funcEndAddr": "0x40a6cb",
            "decompiledFuncCode": "int sub_40a680()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_40a120();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4058d0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x4058e6",
            "decompiledFuncCode": "int sub_4058d0()\n{\n}\n"
        },
        {
            "funcName": "sub_4070c0",
            "funcStartAddr": "0x4070c0",
            "funcEndAddr": "0x4071c9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    struct struct_1 *field_50;\n    char padding_58[32];\n    unsigned long long field_78;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_4070c0()\n{\n    char|unsigned long long v0;  // [bp-0x98]\n    unsigned long long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rbx\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // r12\n    struct_2 *v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n\n    v2 = v4;\n    v1 = v5;\n    if ((v6->field_50->field_49 & 2) != 0)\n    {\n        if (v6->field_50->field_50 == 0)\n        {\n            v7 = (unsigned int)sub_40a8f0();\n            v6->field_50->field_50 = v7;\n            if (v7 == 0)\n            {\n                v9 = fstatfs(v6->field_50->field_2c, (unsigned int)&v0);\n            }\n        }\n        if (v6->field_50->field_50 != 0 || v7 != 0)\n        {\n            v0 = v6->field_78;\n            v8 = sub_40a680();\n            if (v8 != 0)\n            {\n                v14 = v8->field_8;\n            }\n            else\n            {\n                v10 = fstatfs(v6->field_50->field_2c, (unsigned int)&v0);\n                if (v10 == 0)\n                {\n                    v13 = malloc(0x10);\n                    v14 = v0;\n                    if (v13 != 0)\n                    {\n                        v15 = v6->field_78;\n                        v13[1] = v0;\n                        v13[0] = v15;\n                        v16 = sub_40b090();\n                        if (!(v16 != 0))\n                        {\n                            free(v13);\n                            v14 = v0;\n                        }\n                        else if (v13 != v16)\n                        {\n                            abort(); /* do not return */\n                        }\n                    }\n                }\n            }\n            if ((v10 == 0 || v8 != 0) && (v13 == 0 || v16 == 0 || v8 != 0))\n            {\n                v19 = v1;\n                v20 = v2;\n                return v14;\n            }\n        }\n    }\n    if ((v6->field_50->field_49 & 2) == 0 || v6->field_50->field_50 == 0 && v7 == 0 && v9 != 0 || v8 == 0 && v6->field_50->field_50 != 0 && v10 != 0 || v8 == 0 && v7 != 0 && v10 != 0)\n    {\n        v11 = v1;\n        v12 = v2;\n        return 0;\n    }\n    if (v9 == 0 && v6->field_50->field_50 == 0 && v7 == 0 && (v6->field_50->field_49 & 2) != 0 || v8 == 0 && v13 == v16 && v10 == 0 && v13 != 0 && v16 != 0 && (v6->field_50->field_49 & 2) != 0 && (v6->field_50->field_50 != 0 || v7 != 0))\n    {\n        v17 = v1;\n        v18 = v2;\n        return v0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b940",
            "funcStartAddr": "0x40b940",
            "funcEndAddr": "0x40b985",
            "decompiledFuncCode": "int sub_40b940()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v5;  // rcx\n    char v6;  // dl\n\n    v3 = v5;\n    if ((v6 & 64) != 0)\n    {\n        v0 = 24;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    openat();\n    return sub_40ba20();\n}\n"
        },
        {
            "funcName": "sub_40b8e0",
            "funcStartAddr": "0x40b8e0",
            "funcEndAddr": "0x40b906",
            "decompiledFuncCode": "extern unsigned int g_40f138;\nextern unsigned int g_6122d8;\n\nint sub_40b8e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int v3;  // edi\n\n    v0 = v2;\n    error(g_6122d8, v3, (unsigned long long)dcgettext(0x0, 0x40f138, 0x5));\n}\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x405c2c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1];\n    char field_1;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[16];\n    unsigned int field_10;\n} struct_1;\n\nint sub_405940()\n{\n    unsigned int|char v0;  // [bp-0x6c]\n    unsigned int *v1;  // [bp-0x68]\n    struct_0 *|unsigned long v2;  // [bp-0x60]\n    unsigned long long v3;  // [bp-0x58]\n    char v4;  // [bp-0x20]\n    unsigned long long v6;  // r15\n    unsigned int *v7;  // rdx\n    unsigned int *v8;  // rcx\n    unsigned long long *v9;  // r8\n    unsigned long long *v10;  // r9\n    unsigned long v11;  // rsi\n    char *v12;  // rdi\n    unsigned long v13;  // rdi\n    char *v14;  // rax\n    unsigned long long v15;  // r14\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rdx\n    unsigned int v18[6];  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v21;  // rbp\n    unsigned long long v22;  // rdi\n    struct_1 *v23;  // rax\n    unsigned long long v24;  // rax\n\n    v6 = -18446744069414584321;\n    v1 = v7;\n    v0 = *(v7);\n    if (v8 != 0)\n    {\n        v6 = *(v8);\n    }\n    if (v9 != 0)\n    {\n        *(v9) = 0;\n    }\n    if (v10 != 0)\n    {\n        *(v10) = 0;\n    }\n    if (v11 != 0)\n    {\n        if (v2 == v13)\n        {\n            v15 = &v2->field_1;\n            if (v2->field_1 == 0)\n            {\n                v16 = 0;\n            }\n        }\n        else\n        {\n            v2 = v11;\n            v14 = sub_4064c0();\n            v14[v11 + -1 * v13] = 0;\n            v16 = v14;\n            if (v2->field_1 != 0)\n            {\n                v15 = &v2->field_1;\n                if (v14 != 0)\n                {\n                    v17 = (unsigned int)v7 & (unsigned int)v14;\n                }\n            }\n        }\n        if ((v2 == v13 || v14 == 0) && (v2 == v13 || v2->field_1 != 0) && (v2 != v13 || v2->field_1 != 0))\n        {\n            v16 = 0;\n        }\n    }\n    else\n    {\n        v16 = 0;\n        v15 = 0;\n        if (*(v12) != 0)\n        {\n            v2 = v11;\n            v14 = sub_4064f0();\n            v16 = v14;\n        }\n    }\n    if ((v2->field_1 == 0 || v11 == 0) && (v11 == 0 || v2 != v13) && (*(v12) != 0 || v11 != 0) && v16 != 0)\n    {\n        v15 = 0;\n        v17 = 1 & (unsigned int)v14;\n    }\n    if ((v2 == v13 || v16 == 0) && (v16 == 0 || v11 != 0) && (v2->field_1 == 0 || v2 == v13 || v11 == 0) && (*(v12) != 0 || v11 != 0) && (v2->field_1 == 0 || v11 == 0 || v2 != v13))\n    {\n        v15 = 0;\n    }\n    if (v16 != 0 && (v2->field_1 == 0 || v11 == 0) && (v11 == 0 || v2 != v13) && (*(v12) != 0 || v11 != 0) && *((char *)v16) != 43 || v2->field_1 != 0 && v2 != v13 && v11 != 0 && v14 != 0 && *((char *)v16) != 43)\n    {\n        *((unsigned long long *)&v0) = v17;\n        v18 = getpwnam(v16);\n        v17 = v0;\n        if (v18 != 0)\n        {\n            v0 = v18[2];\n            if (v17 == 0)\n            {\n                endpwent();\n            }\n            else\n            {\n                v6 = v18[2 + 1];\n                if ((unsigned long long)getgrgid() == 0)\n                {\n                    v22 = (unsigned int)sub_403c60();\n                }\n                v15 = (unsigned int)sub_4064f0();\n                endgrent();\n                endpwent();\n            }\n        }\n    }\n    if (v16 != 0 && (v2->field_1 == 0 || v11 == 0) && (v11 == 0 || v2 != v13) && (*(v12) != 0 || v11 != 0) && *((char *)v16) == 43 || (v16 != 0 && (v2->field_1 == 0 || v11 == 0) && (v11 == 0 || v2 != v13) && (*(v12) != 0 || v11 != 0) && *((char *)v16) != 43 || v2->field_1 != 0 && v2 != v13 && v11 != 0 && v14 != 0 && *((char *)v16) != 43) && v18 == 0 || v2->field_1 != 0 && v2 != v13 && v11 != 0 && v14 != 0 && *((char *)v16) == 43)\n    {\n        if (v17 != 0)\n        {\n            endpwent();\n            v21 = 0;\n        }\n        else\n        {\n            v19 = sub_4065d0();\n            if (v19 == 0)\n            {\n                v0 = v3;\n                if (v3 <= -18446744069414584322)\n                {\n                    endpwent();\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        endpwent();\n        v21 = 0;\n    }\n    if (...)\n    {\n        v23 = getgrnam(v15);\n        if (v23 != 0)\n        {\n            v6 = v23->field_10;\n        }\n    }\n    if (...)\n    {\n        v24 = sub_4065d0();\n        if (v24 == 0)\n        {\n            v6 = v3;\n        }\n    }\n    if (...)\n    {\n        endgrent();\n        v21 = (unsigned int)sub_4064f0();\n    }\n    if (...)\n    {\n        endgrent();\n        v15 = (unsigned int)sub_4064f0();\n    }\n    if (...)\n    {\n        free(v16);\n        free(v21);\n        return dcgettext(0x0, *((long long *)&v4), 0x5);\n    }\n    if (...)\n    {\n        *(v1) = v0;\n        if (v8 != 0)\n        {\n            *((unsigned long long *)&v8) = v6;\n        }\n        if (v9 != 0)\n        {\n            *(v9) = v16;\n            v16 = 0;\n        }\n        if (v10 != 0)\n        {\n            *(v10) = v15;\n            v15 = 0;\n        }\n        free(v16);\n        free(v15);\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ab30",
            "funcStartAddr": "0x40ab30",
            "funcEndAddr": "0x40ac00",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40ab30()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((v4[8] == 0 || v4[4] == 0 || *(v4) < v4[1]) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_402d10",
            "funcStartAddr": "0x402d10",
            "funcEndAddr": "0x4039b7",
            "decompiledFuncCode": "typedef struct struct_5 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[16];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_5;\n\ntypedef struct struct_4 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n    char padding_88[8];\n    unsigned int field_90;\n} struct_4;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char field_4;\n    char padding_5[3];\n    struct struct_1 *field_8;\n    char field_10;\n    char field_11;\n    char padding_12[6];\n    unsigned long long field_18;\n    unsigned long long field_20;\n} struct_0;\n\ntypedef struct struct_3 {\n    unsigned int field_0;\n    char field_4;\n    char padding_5[3];\n    unsigned long long field_8;\n    char field_10;\n    char field_11;\n    char padding_12[6];\n    unsigned long long field_18;\n    unsigned long long field_20;\n} struct_3;\n\ntypedef struct struct_6 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned int field_18;\n    unsigned int field_1c;\n    unsigned int field_20;\n} struct_6;\n\ntypedef struct struct_2 {\n    char padding_0[44];\n    unsigned int field_2c;\n} struct_2;\n\nextern unsigned int g_40d50a;\nextern unsigned int g_40d520;\nextern unsigned int g_40d539;\nextern unsigned int g_40d54e;\nextern unsigned int g_40d56c;\nextern unsigned int g_40d588;\nextern unsigned int g_40d5c8;\nextern unsigned int g_40d5f8;\nextern unsigned int g_40d638;\nextern unsigned int g_40d670;\nextern unsigned int g_40d730;\nextern unsigned int g_40d758;\nextern unsigned int g_40d780;\nextern unsigned int g_40d7b0;\nextern unsigned int g_40d858;\nextern unsigned int g_40d878;\n\nint sub_402d10()\n{\n    unsigned long long v0;  // [bp-0x188]\n    unsigned int|unsigned long|void *|unsigned long long v1;  // [bp-0x180]\n    unsigned int|unsigned long|void *|unsigned long long v2;  // [bp-0x178]\n    unsigned int|unsigned long long v3;  // [bp-0x170]\n    unsigned int|unsigned int *|unsigned long long v4;  // [bp-0x168]\n    unsigned int v5;  // [bp-0x160]\n    unsigned int v6;  // [bp-0x15c]\n    char v7;  // [bp-0x158]\n    char v8;  // [bp-0xc8]\n    unsigned long v9;  // [bp-0xc0]\n    unsigned int v10;  // [bp-0xac]\n    struct_0 *v12;  // [bp+0x8]\n    unsigned int v13;  // edx\n    unsigned int v14;  // r15d\n    unsigned int v15;  // r8d\n    struct_4 *v16;  // r12\n    unsigned int v17;  // ecx\n    struct_3 *v18;  // rbx\n    unsigned int v19;  // r9d\n    unsigned int|unsigned long v21;  // rdx\n    unsigned long long v23;  // rcx\n    unsigned long long v24;  // r15\n    unsigned int|unsigned long v25;  // eax\n    unsigned long long v26;  // rbx\n    unsigned long long v27;  // r15\n    char *v28;  // rsi\n    char *v29;  // rdi\n    unsigned long long v30;  // rcx\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // cc_dep2\n    unsigned long v33;  // d\n    struct_5 *v34;  // rsi\n    struct_2 *v36;  // rdi\n    unsigned int|unsigned long v37;  // rax\n    unsigned long long v38;  // rdx\n    unsigned long long v39;  // rbx\n    unsigned long long v40;  // rbp\n    unsigned long long v41;  // rbx\n    unsigned int v42;  // eax\n    unsigned long long v43;  // rdx\n    char v44;  // al\n    unsigned long long v45;  // rbp\n    unsigned long long v46;  // r14\n    unsigned int v47;  // eax\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // cc_dep1\n    unsigned long long v52;  // cc_dep2\n    unsigned long v53;  // d\n    char *v54;  // rsi\n    char *v55;  // rdi\n    unsigned long long v56;  // rax\n    unsigned int|unsigned long v57;  // r9\n    unsigned int|unsigned long v58;  // r10\n    unsigned int|unsigned long long v59;  // r11\n    struct_6 *v60;  // r14\n    unsigned int v61;  // ebp\n    unsigned int|unsigned long v62;  // rax\n    unsigned long long v64;  // rax\n    unsigned int v65;  // eax\n    char v66;  // bpl\n    unsigned long long v67;  // rbx\n    unsigned long long v68;  // rbp\n    unsigned long long v70;  // rbx\n    unsigned int|unsigned long v71;  // ecx\n    unsigned long long v73;  // r14\n    unsigned long long v74;  // rax\n    unsigned int|unsigned long v76;  // rcx\n    unsigned int *v77;  // rbp\n    unsigned int v80;  // eax\n    unsigned long long v81;  // rax\n    unsigned int *v82;  // rbp\n    unsigned long long v84;  // rax\n    unsigned int *v85;  // rbp\n    unsigned int|unsigned long v87;  // eax\n    char *v88;  // r15\n    unsigned long long v89;  // r15\n    unsigned long long v90;  // r14\n    unsigned long v93;  // rsi\n    char *v94;  // r15\n    unsigned long long v95;  // rax\n\n    v14 = v13;\n    v58 = v15;\n    v16 = v34;\n    v21 = v34->field_70;\n    v1 = v17;\n    v18 = v12;\n    v0 = v34->field_38;\n    if ((unsigned long long)v34->field_70 << 48 <= 0xa000000000000)\n    {\n        /* goto *((long long *)((unsigned long long)v34->field_70 * 8 + 4249776)); */\n    }\n    if (v34->field_58 == 0 && v34->field_20 == 0)\n    {\n        v34->field_20 = 1;\n        fts_set();\n    }\n    if ((v34->field_20 != 0 || v34->field_58 != 0) && v12->field_11 == 0)\n    {\n        v27 = (unsigned int)sub_405680();\n        v34 = (unsigned long long)v34->field_40;\n        v21 = dcgettext(0x0, v34, 0x5);\n    }\n    if (v12->field_4 != 0 && v12->field_8 != 0 && v34->field_80 == v12->field_8->field_0 && v34->field_78 == v12->field_8->field_8)\n    {\n        v28 = v0;\n        v29 = \"/\";\n        v30 = 2;\n        while (v30 != 0)\n        {\n            v30 -= 1;\n            v31 = *(v28);\n            v32 = *(v29);\n            v29 = &v29[v33];\n            v28 = &v28[v33];\n            break;\n        }\n        if ((v31 > v32) - 0 - (v31 < v32) == 0)\n        {\n            v39 = (unsigned int)sub_405680();\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d5c8, 0x5));\n        }\n        else\n        {\n            v40 = (unsigned int)sub_4055a0();\n            v41 = (unsigned int)sub_4055a0();\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d5f8, 0x5));\n        }\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d638, 0x5));\n        fts_set();\n        fts_read();\n    }\n    if (v12->field_11 != 0)\n    {\n        v25 = v18->field_0;\n        if (v18->field_0 != 2 && v25 == 0)\n        {\n            v89 = v18->field_20;\n            v90 = v18->field_18;\n            v2 = 0;\n            v1 = 0;\n            v5 = 3;\n        }\n    }\n    else\n    {\n        v23 = (unsigned int)sub_405750();\n        error(0x0, v34, v21);\n        v25 = v18->field_0;\n    }\n    if (v12->field_11 == 0)\n    {\n        v24 = (unsigned int)sub_405680();\n    }\n    v4 = v19;\n    v2 = v34->field_70;\n    v3 = v15;\n    v21 = v2;\n    v58 = v3;\n    v57 = v4;\n    if (sub_4065a0() != 0)\n    {\n        v26 = (unsigned int)sub_405750();\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d670, 0x5));\n    }\n    v60 = &v16->field_78;\n    v59 = v58 & v57;\n    v2 = v16->field_30;\n    v56 = v12->field_10;\n    if ((v58 & v57) != -1)\n    {\n        if (v12->field_10 != 0 && ((unsigned short)v16->field_90 & 0xf000) == 0xa000)\n        {\n            v5 = v57;\n            *((unsigned long *)&v4) = v58;\n            v3 = v59;\n            v37 = __fxstatat(0x1, v36->field_2c, v2, (unsigned int)&v7, 0x0);\n            if (v37 == 0)\n            {\n                v21 = v16->field_70;\n                v60 = &v7;\n                v59 = v3;\n                v58 = v4;\n                v57 = v5;\n            }\n            else\n            {\n                if (v12->field_11 != 0)\n                {\n                    v37 = v18->field_0;\n                    if (v18->field_0 == 2 && v18->field_4 == 0)\n                    {\n                        fts_set();\n                    }\n                }\n                else\n                {\n                    v46 = (unsigned int)sub_405680();\n                    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d50a, 0x5));\n                    v37 = v18->field_0;\n                }\n            }\n        }\n        if (v12->field_10 == 0 || ((unsigned short)v16->field_90 & 0xf000) != 0xa000)\n        {\n            v42 = v21 & -3;\n            v43 = (unsigned long long)v21 - 1;\n            v44 = v43 << 48 <= 1 << 48;\n            v45 = (unsigned int)v12->field_4 | rax<4>;\n            if (v58 != -1)\n            {\n                if (v60->field_1c != v58)\n                {\n                    if ((char)((unsigned int)v12->field_4 | rax<4>) != 0)\n                    {\n                        if (v12->field_8 != 0)\n                        {\n                            if (v12->field_8->field_0 == v60->field_8 && v60->field_0 == v12->field_8->field_8)\n                            {\n                                v54 = v0;\n                                v55 = \"/\";\n                                v50 = 2;\n                                while (v50 != 0)\n                                {\n                                    v50 -= 1;\n                                    v51 = *(v54);\n                                    v52 = *(v55);\n                                    v55 = &v55[v53];\n                                    v54 = &v54[v53];\n                                    break;\n                                }\n                                if ((v51 > v52) - 0 - (v51 < v52) == 0)\n                                {\n                                    v67 = (unsigned int)sub_405680();\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d5c8, 0x5));\n                                }\n                                else\n                                {\n                                    v68 = (unsigned int)sub_4055a0();\n                                    v70 = (unsigned int)sub_4055a0();\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d5f8, 0x5));\n                                }\n                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40d638, 0x5));\n                            }\n                        }\n                        else\n                        {\n                            v62 = v18->field_0;\n                            if (v18->field_0 != 2 && v62 == 0)\n                            {\n                                v5 = 4;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (v12->field_0 == 0)\n                        {\n                            v5 = 4;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if (v57 != -1)\n                {\n                    v47 = v60->field_20;\n                    if (v45 != 0)\n                    {\n                    }\n                    else\n                    {\n                        if (v47 != v57)\n                        {\n                            v62 = v18->field_0;\n                        }\n                    }\n                }\n                else\n                {\n                    if ((char)((unsigned int)v12->field_4 | rax<4>) == 0)\n                    {\n                        v56 = v12->field_10;\n                    }\n                }\n            }\n        }\n    }\n    else if (v12->field_0 == 2)\n    {\n        if (v12->field_8 == 0 && v12->field_10 == 0)\n        {\n            if ((unsigned short)((unsigned int)v21 & -3) != 4)\n            {\n                v38 = (unsigned int)v21 - 1;\n            }\n            if ((unsigned short)((unsigned int)v21 & -3) == 4 || v38 << 48 <= 0x1000000000000)\n            {\n                v64 = sub_406a00();\n                v66 = v64 == 0;\n                if (v64 != 0)\n                {\n                    if (*(__errno_location()) == 95 && v12->field_0 == 0)\n                    {\n                        v2 = (unsigned long long)(unsigned int)sub_402cd0();\n                        v1 = (unsigned long long)(unsigned int)sub_402c90();\n                        v73 = (unsigned int)sub_405680();\n                        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d878, 0x5));\n                    }\n                }\n                else\n                {\n                    if (v66 != 0)\n                    {\n                        if (v12->field_0 != 2)\n                        {\n                            if (v14 != -1)\n                            {\n                                if (v60->field_1c != v14)\n                                {\n                                    v5 = 2;\n                                }\n                            }\n                            else\n                            {\n                                if (v1 != -1)\n                                {\n                                    if (v60->field_20 != v1)\n                                    {\n                                        v5 = 2;\n                                    }\n                                }\n                                else\n                                {\n                                    if (v12->field_0 == 0)\n                                    {\n                                        v5 = 4;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (v12->field_11 != 0)\n                        {\n                            v87 = v18->field_0;\n                            if (v18->field_0 != 2 && v87 == 0)\n                            {\n                                v5 = 3;\n                            }\n                        }\n                        else\n                        {\n                            v1 = (unsigned int)sub_405680();\n                            if (v14 != -1)\n                            {\n                                v88 = (unsigned long long)dcgettext(0x0, 0x40d520, 0x5);\n                            }\n                            else\n                            {\n                                v88 = (unsigned long long)dcgettext(0x0, 0x40d539, 0x5);\n                            }\n                            error(0x0, *(__errno_location()), v88);\n                            v87 = v18->field_0;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if ((v12->field_11 == 0 && ((unsigned short)v16->field_90 & 0xf000) == 0xa000 && (v58 & v57) != -1 && v37 != 0 && v12->field_10 != 0 && v18->field_0 != 2 || ((unsigned short)v16->field_90 & 0xf000) == 0xa000 && v12->field_11 != 0 && (v58 & v57) != -1 && v37 != 0 && v12->field_10 != 0 && v18->field_0 != 2) && v37 == 0)\n    {\n        v5 = 3;\n    }\n    if (v57 == -1 && v58 == -1 && (char)((unsigned int)v12->field_4 | rax<4>) == 0 && (v58 & v57) != -1 && (v12->field_10 == 0 || ((unsigned short)v16->field_90 & 0xf000) != 0xa000) || v12->field_8 == 0 && (v58 & v57) == -1 && v12->field_0 == 2 && v12->field_10 == 0 && (unsigned short)((unsigned int)v21 & -3) != 4 && v38 << 48 > 0x1000000000000)\n    {\n        v61 = v36->field_2c;\n        if (v56 != 0)\n        {\n            if (v59 != -1)\n            {\n                v65 = v60->field_18 & 0xf000;\n                if (((unsigned short)v60->field_18 & 0xf000) != 0x8000)\n                {\n                    v3 = 0x10900;\n                }\n                else\n                {\n                    v3 = 0x900;\n                }\n            }\n            else\n            {\n                v66 = sub_406a00() == 0;\n            }\n        }\n    }\n    if (...)\n    {\n        *((unsigned long *)&v5) = v57;\n        *((unsigned long *)&v4) = v58;\n        v71 = __openat_2(v61, v2, v3);\n        if (!(v71 < 0))\n        {\n            *((unsigned long *)&v2) = v71;\n            *((unsigned long *)&v4) = v57;\n            *((unsigned long *)&v3) = v58;\n            v74 = __fxstat(0x1, v71, (unsigned int)&v8);\n            v76 = v2;\n            if (v74 == 0)\n            {\n                if (v60->field_8 != v9)\n                {\n                    v1 = v76;\n                    v77 = __errno_location();\n                    close(v1);\n                    v80 = v12->field_0;\n                    *(v77) = *(v77);\n                }\n                else\n                {\n                    if (v60->field_0 == *((long long *)&v8))\n                    {\n                        if (v3 != -1)\n                        {\n                            if (v3 != v10)\n                            {\n                                v3 = v76;\n                                v82 = __errno_location();\n                                v2 = *(v82);\n                                close(v3);\n                                *(v82) = v2;\n                            }\n                        }\n                        else\n                        {\n                            if (v4 != -1)\n                            {\n                            }\n                            else\n                            {\n                                v2 = v76;\n                                v81 = fchown(v76, v14, v1);\n                                v76 = v2;\n                                if (v81 == 0)\n                                {\n                                    v84 = close(v2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                *((unsigned long *)&v2) = v76;\n                v85 = __errno_location();\n                v1 = *(v85);\n                close(v2);\n                *(v85) = v1;\n            }\n        }\n        else if (*((int *)*((long long *)&v4)) == 13)\n        {\n            if (((unsigned short)v60->field_18 & 0xf000) == 0x8000)\n            {\n                v6 = v5;\n                v5 = v4;\n                v4 = __errno_location();\n                v71 = __openat_2(v61, v2, v3 | 1);\n                v57 = v6;\n            }\n        }\n    }\n    if ((char)((unsigned int)v12->field_4 | rax<4>) == 0 && (v58 & v57) != -1 && v58 != -1 && v60->field_1c != v58 && (v12->field_10 == 0 || ((unsigned short)v16->field_90 & 0xf000) != 0xa000) && v12->field_0 != 2 && v12->field_0 == 0 || (v12->field_11 == 0 && ((unsigned short)v16->field_90 & 0xf000) == 0xa000 && (v58 & v57) != -1 && v37 != 0 && v12->field_10 != 0 && v18->field_0 != 2 || ((unsigned short)v16->field_90 & 0xf000) == 0xa000 && v12->field_11 != 0 && (v58 & v57) != -1 && v37 != 0 && v12->field_10 != 0 && v18->field_0 != 2) && v37 == 0)\n    {\n        v2 = (unsigned int)sub_402cd0();\n        v89 = v18->field_20;\n        v90 = v18->field_18;\n        v1 = (unsigned int)sub_402c90();\n        v3 = (unsigned int)sub_402bd0();\n        if (v90 != 0)\n        {\n            v4 = (unsigned int)sub_402bd0();\n            if (v5 != 3)\n            {\n                if (v5 != 4)\n                {\n                    v94 = (unsigned long long)dcgettext(0x0, 0x40d730, 0x5);\n                }\n                else\n                {\n                    v94 = (unsigned long long)dcgettext(0x0, 0x40d858, 0x5);\n                }\n            }\n        }\n        else\n        {\n            v4 = (unsigned int)sub_402bd0();\n            if (v5 != 3)\n            {\n                if (v5 == 4)\n                {\n                    if (v89 != 0)\n                    {\n                        v94 = (unsigned long long)dcgettext(0x0, 0x40d56c, 0x5);\n                    }\n                    else\n                    {\n                        v94 = (unsigned long long)dcgettext(0x0, 0x40d588, 0x5);\n                    }\n                }\n                else\n                {\n                    if (v89 != 0)\n                    {\n                        v94 = (unsigned long long)dcgettext(0x0, 0x40d758, 0x5);\n                    }\n                    else\n                    {\n                        v94 = (unsigned long long)dcgettext(0x0, 0x40d54e, 0x5);\n                    }\n                }\n            }\n        }\n        if (v5 == 3)\n        {\n            if (!(v4 != 0))\n            {\n                v93 = \"failed to change ownership of %s to %s\\n\";\n                if (v90 == 0)\n                {\n                    v93 = \"failed to change group of %s to %s\\n\";\n                    if (v89 == 0)\n                    {\n                        v93 = \"failed to change ownership of %s\\n\";\n                    }\n                }\n                v94 = (unsigned long long)dcgettext(0x0, v93, 0x5);\n                v95 = v3;\n                v3 = 0;\n                v4 = v95;\n            }\n            else if (v90 != 0)\n            {\n                v94 = (unsigned long long)dcgettext(0x0, 0x40d780, 0x5);\n            }\n            else if (v89 != 0)\n            {\n                v94 = (unsigned long long)dcgettext(0x0, 0x40d7b0, 0x5);\n            }\n            else\n            {\n                v94 = (unsigned long long)dcgettext(0x0, 0x40d7e0, 0x5);\n            }\n        }\n        sub_405680();\n        __printf_chk(0x1, v94);\n        free(v4);\n        free(v3);\n        free(v2);\n        free(v1);\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_409f20",
            "funcStartAddr": "0x409f20",
            "funcEndAddr": "0x409f30",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_409f20()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rax\n\n    v1->field_10 = 0;\n    v1->field_18 = 9827862;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4062c0",
            "funcStartAddr": "0x4062c0",
            "funcEndAddr": "0x4062da",
            "decompiledFuncCode": "int sub_4062c0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_406510(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405840",
            "funcStartAddr": "0x405840",
            "funcEndAddr": "0x405857",
            "decompiledFuncCode": "int sub_405840()\n{\n}\n"
        },
        {
            "funcName": "sub_40b2e0",
            "funcStartAddr": "0x40b2e0",
            "funcEndAddr": "0x40b315",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[16];\n    unsigned int field_14;\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_40b2e0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned int v4;  // esi\n    unsigned int v5;  // esi\n\n    v2 = (unsigned long long)(v1->field_14 + ((unsigned int)v1->field_1c ^ 1) & 3);\n    v3 = (unsigned int)*((int *)((char *)v1 + 0x4 * v2));\n    *((unsigned int *)((char *)v1 + 0x4 * v2)) = v4;\n    v5 = v1->field_18;\n    v1->field_14 = (unsigned int)v2;\n    if (v5 == (unsigned int)v2)\n    {\n        v1->field_18 = ((unsigned int)v1->field_1c ^ 1) + v1->field_18 & 3;\n    }\n    v1->field_1c = 0;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405480",
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x40548a",
            "decompiledFuncCode": "int sub_405480()\n{\n}\n"
        },
        {
            "funcName": "sub_40bf20",
            "funcStartAddr": "0x40bf20",
            "funcEndAddr": "0x40bf5b",
            "decompiledFuncCode": "int sub_40bf20()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40bf60();\n    }\n}\n"
        },
        {
            "funcName": "sub_40bfc0",
            "funcStartAddr": "0x40bfc0",
            "funcEndAddr": "0x40c465",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[11];\n    char field_13;\n    char field_14;\n} struct_0;\n\nextern unsigned int g_40ee1a;\nextern unsigned int g_40efb1;\n\nint sub_40bfc0()\n{\n    unsigned int|unsigned long long v0;  // [bp-0x120]\n    unsigned long long v1;  // [bp-0x118]\n    void *|unsigned long long v2;  // [bp-0x110]\n    void *v3;  // [bp-0x108]\n    unsigned long long v4;  // [bp-0x100]\n    char v5;  // [bp-0xe9]\n    char *|unsigned long v6;  // [bp-0xe8]\n    unsigned long long v7;  // [bp-0xe0]\n    unsigned long v8;  // [bp-0xd8]\n    unsigned long v9;  // [bp-0xd0]\n    char v10;  // [bp-0xc8]\n    unsigned long long v11;  // [bp-0xc0]\n    unsigned int v12;  // [bp-0xb0]\n    void *v14;  // rdi\n    unsigned int v15;  // rsi\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long long v20;  // rax\n    unsigned int *v21;  // r12\n    unsigned int v22;  // r15d\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rbp\n    unsigned long long v26;  // r13\n    struct_0 *v27;  // rax\n    unsigned long long v28;  // rdx\n    void *v29;  // rbx\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // r13\n    unsigned long v32;  // r14\n    unsigned int v33;  // rax\n    unsigned long long v35;  // r8\n    unsigned long v40;  // rbx\n    unsigned long v41;  // rdx\n    unsigned int|unsigned long long v43;  // rbx\n\n    v3 = v14;\n    if (v15 == 0)\n    {\n        v4 = 0x1000;\n        if (v14 != 0)\n        {\n            v2 = 0;\n            *(__errno_location()) = 22;\n        }\n    }\n    else\n    {\n        *((unsigned int *)&v4) = v15;\n        if (v3 != 0)\n        {\n            v2 = v3;\n        }\n    }\n    if (v15 == 0 && v14 == 0 || v3 == 0 && v15 != 0)\n    {\n        v2 = malloc(v4);\n    }\n    if (v14 == 0 && v2 != 0 || v15 != 0 && v3 != 0 || v15 != 0 && v2 != 0)\n    {\n        v16 = v2 + v4;\n        *((char *)(v2 + v4 - 1)) = 0;\n        v17 = __lxstat(0x1, 0x40ee1a, (unsigned int)&v10);\n        if (v17 >= 0)\n        {\n            v18 = *((long long *)&v10);\n            v19 = v11;\n            v0 = *((long long *)&v10);\n            v20 = __lxstat(0x1, 0x40efb1, (unsigned int)&v10);\n            if (v20 >= 0)\n            {\n                v6 = v16 - 1;\n                v8 = v11;\n                v7 = *((long long *)&v10);\n                v5 = *((long long *)&v10) != *((long long *)&v10) | v11 != v11;\n                if (v19 != v11 || v18 != *((long long *)&v10))\n                {\n                    v25 = 0;\n                    v21 = __errno_location();\n                    while (true)\n                    {\n                        v22 = openat();\n                        if (v22 >= 0)\n                        {\n                            v23 = __fxstat(0x1, v22, (unsigned int)&v10);\n                            if (v23 == 0)\n                            {\n                                if (v25 != 0)\n                                {\n                                    v24 = closedir();\n                                }\n                                if (v24 == 0 || v25 == 0)\n                                {\n                                    v1 = *((long long *)&v10);\n                                    v9 = v11;\n                                    v25 = fdopendir(v22);\n                                    if (v25 != 0)\n                                    {\n                                        v26 = v5;\n                                        while (true)\n                                        {\n                                            *(v21) = 0;\n                                            v27 = readdir();\n                                            if (v27 == 0)\n                                            {\n                                                v43 = *(v21);\n                                                if (*(v21) == 0 && v26 != 0)\n                                                {\n                                                    rewinddir(v25);\n                                                    v27 = readdir();\n                                                    if (v27 != 0)\n                                                    {\n                                                        v26 = 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v43 = *(v21);\n                                                    }\n                                                }\n                                                if (v26 == 0 || v27 == 0 || *(v21) != 0)\n                                                {\n                                                    if ((unsigned int)v43 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    *(v21) = 2;\n                                                    v43 = 2;\n                                                }\n                                            }\n                                            if (v27 != 0 || *(v21) == 0 && v26 != 0 && v27 != 0)\n                                            {\n                                                if (v26 != 0 && (v27->field_13 == 46 || v27 != 0) && (v27->field_13 != 46 || v27->field_14 != 0) && (v27->field_13 != 46 || *((short *)&v27->field_14) != 46) && (v27->field_14 != 0 || v27 != 0) && (*((short *)&v27->field_14) != 46 || v27 != 0))\n                                                {\n                                                    v26 = v28;\n                                                }\n                                                if ((v27 == 0 || v27->field_13 != 46 || v27->field_14 != 0) && (v27 == 0 || v27->field_13 != 46 || *((short *)&v27->field_14) != 46) && (v27->field_13 != 46 || v27->field_14 != 0 || v27 != 0) && (v27->field_13 != 46 || *((short *)&v27->field_14) != 46 || v27 != 0))\n                                                {\n                                                    v29 = &v27->field_13;\n                                                    v30 = __fxstatat(0x1, v22, (unsigned int)v27 + 19, (unsigned int)&v10, 0x100);\n                                                    v31 = &v6[-1 * v2];\n                                                    v32 = strlen(v29);\n                                                    if (v31 <= v32)\n                                                    {\n                                                        if (v15 == 0)\n                                                        {\n                                                            v33 = v4 + (v4 <= v32? v32 : v4);\n                                                            *((int *)&v6) = (v4 <= v32? v32 : v4);\n                                                            *((unsigned long long *)&v0) = v4 + (v4 <= v32? v32 : v4);\n                                                            if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                            {\n                                                                v2 = realloc(v2, v33);\n                                                                v6 = memcpy(v2 + v6 + v31, v2 + v31, v4 - v31);\n                                                                v4 = *((long long *)&v0);\n                                                            }\n                                                            if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0)\n                                                            {\n                                                                *(v21) = 12;\n                                                                v43 = 12;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v21) = 34;\n                                                            v43 = 34;\n                                                        }\n                                                    }\n                                                    if (v31 > v32 || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                    {\n                                                        v35 = memcpy(&v6[-1 * v32], v29, v32);\n                                                        v6 = v35 - 1;\n                                                        *((char *)(v35 - 1)) = 47;\n                                                        v0 = v1;\n                                                        if (v7 != v1 || v8 != v9)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (closedir() != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v16 = v2 + v4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            v22 = openat();\n                                        }\n                                        else if (...)\n                                        {\n                                            v43 = *(v21);\n                                        }\n                                        else if (...)\n                                        {\n                                            closedir();\n                                        }\n                                    }\n                                }\n                                if ((v25 == 0 || v24 != 0) && (v25 == 0 || v25 != 0))\n                                {\n                                    v43 = *(v21);\n                                }\n                            }\n                            else\n                            {\n                                v43 = *(v21);\n                                if (v25 != 0)\n                                {\n                                    closedir();\n                                }\n                            }\n                            if ((v25 == 0 || v24 != 0 || v23 != 0) && (v25 == 0 || v23 != 0 || v25 != 0))\n                            {\n                                close(v22);\n                            }\n                        }\n                        else\n                        {\n                            v43 = *(v21);\n                        }\n                        if ((v22 < 0 || v23 == 0) && (v22 < 0 || v25 != 0) && (v24 == 0 || v22 < 0 || v25 == 0) && (v22 >= 0 || v25 != 0))\n                        {\n                            closedir();\n                        }\n                        break;\n                    }\n                    if (v25 == 0 || v24 != 0 && v25 != 0)\n                    {\n                        if (v22 < 0 || v25 == 0 || v6 != v2 + v4 - 1 || v23 != 0 || v24 != 0 && v25 != 0)\n                        {\n                            free(v2);\n                        }\n                        else if (v25 != 0 && (v24 == 0 || v25 == 0))\n                        {\n                            v43 = *(v21);\n                        }\n                        else if (v22 < 0 || v25 == 0 || v6 != v2 + v4 - 1 || v23 != 0 || v24 != 0 && v25 != 0)\n                        {\n                            *(v21) = v43;\n                            v2 = 0;\n                        }\n                    }\n                }\n                v6[-1] = 47;\n                v6 = &v6[-1];\n                v40 = v16 + -0x1 * v6;\n                v41 = v40;\n                memmove(v2, v6, v41);\n                if (v15 == 0)\n                {\n                    v3 = realloc(v2, v41);\n                }\n                *((int *)&v2) = (v3 == 0? v2 : v3);\n            }\n        }\n        if (v17 < 0 || v20 < 0)\n        {\n            v21 = __errno_location();\n        }\n        if (v17 < 0 || v20 < 0 || v19 != v11 || v18 != *((long long *)&v10))\n        {\n            v43 = *(v21);\n            free(v2);\n            *(v21) = v43;\n            v2 = 0;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4076c0",
            "funcStartAddr": "0x4076c0",
            "funcEndAddr": "0x407756",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    char padding_10[104];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_0;\n\nint sub_4076c0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned int v3;  // edi\n    struct_0 *v4;  // rdx\n    unsigned long long v5[17];  // rdx\n    void *v6;  // rax\n    unsigned long long *v7[3];  // rsi\n    unsigned long long v8[3];  // rcx\n    unsigned long long v10[17];  // rax\n\n    if (((unsigned short)v3 & 258) == 0)\n    {\n        v10 = v4->field_8;\n        if (v4->field_8 != 0 && !((char)(v4->field_8->field_58 - 0 >> 63)))\n        {\n            v8 = *(v7);\n            if ((*(v7))[2] != 0 && *(*(v7)) == v4->field_80 && (*(v7))[1] == v4->field_78)\n            {\n                v10 = v10[16];\n                (*(v7))[1] = v4->field_8->field_78;\n                v8[0] = v10;\n            }\n        }\n        if ((char)(v4->field_8->field_58 - 0 >> 63) || v4->field_8 == 0 || (*(v7))[2] != 0)\n        {\n            return v10;\n        }\n    }\n    else\n    {\n        *((unsigned long long [17])&v0) = v5[15];\n        *((unsigned long long [17])&v1) = v5[16];\n        v6 = sub_40b0d0();\n        if (v6 != 0)\n        {\n            return (unsigned long long)free(v6);\n        }\n    }\n    if ((((unsigned short)v3 & 258) == 0 || v6 == 0) && ((*(v7))[2] == 0 || ((unsigned short)v3 & 258) != 0) && (!((char)(v4->field_8->field_58 - 0 >> 63)) || ((unsigned short)v3 & 258) != 0) && (v4->field_8 != 0 || ((unsigned short)v3 & 258) != 0))\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40ac10",
            "funcStartAddr": "0x40ac10",
            "funcEndAddr": "0x40ae00",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_0 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nint sub_40ac10()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_0 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_1 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_40a060();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_40a2f0();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_40a2f0();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_40a2f0();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v0 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_10 != *((long long *)&v2) && v11->field_28->field_10 != 0)\n    {\n        v21 = 0;\n    }\n    if ((char)v21 != 0 || v11->field_10 != *((long long *)&v2))\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x405592",
            "decompiledFuncCode": "int sub_405580()\n{\n}\n"
        },
        {
            "funcName": "sub_40ba70",
            "funcStartAddr": "0x40ba70",
            "funcEndAddr": "0x40baa0",
            "decompiledFuncCode": "int sub_40ba70()\n{\n    unsigned int v1;  // rdi\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n\n    if (v1 < 0)\n    {\n        return v2;\n    }\n    v3 = close(v1);\n    if ((unsigned int)v3 == 0)\n    {\n        return v3;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4062e0",
            "funcStartAddr": "0x4062e0",
            "funcEndAddr": "0x406301",
            "decompiledFuncCode": "int sub_4062e0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_406510(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_407320",
            "funcStartAddr": "0x407320",
            "funcEndAddr": "0x40737f",
            "decompiledFuncCode": "int sub_407320()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n    unsigned long long *v4;  // rsi\n    unsigned long v5;  // rdx\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n\n    v2 = v1;\n    v3 = *(v1);\n    v6 = *(v4) + v5 + 0x100;\n    if (*(v4) <= *(v4) + v5 + 0x100)\n    {\n        *(v4) = *(v4) + v5 + 0x100;\n        v7 = realloc(v3, v6);\n        if (v7 != 0)\n        {\n            *(v2) = v7;\n            return 1;\n        }\n        free(*(v2));\n        *(v2) = 0;\n        return 0;\n    }\n    free(v3);\n    *(v2) = 0;\n    *(__errno_location()) = 36;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b9e0",
            "funcStartAddr": "0x40b9e0",
            "funcEndAddr": "0x40bc4c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_40efb1;\n\nint sub_40b9e0()\n{\n    unsigned int v0;  // [bp-0x2c]\n    unsigned long long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long long v3;  // [bp-0x18]\n    unsigned long long v4;  // [bp-0x10]\n    unsigned long long v5;  // [bp-0x8]\n    struct_0 *v8;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // r13\n    unsigned long long v13;  // r12\n    unsigned long long v14;  // rbx\n    unsigned int *v15;  // r12\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbx\n    char *v18;  // rbp\n    unsigned long long v19;  // rax\n    char *v20;  // rbx\n    unsigned long long v21;  // rax\n    unsigned long v23;  // rdi\n    unsigned long long v24;  // r13\n    char *v25;  // rbx\n    unsigned long v28;  // rdi\n    unsigned long long v29;  // rbx\n    unsigned long long v30;  // rax\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // r13\n    unsigned long long v38;  // r14\n\n    if (v8->field_0 < 0)\n    {\n        v9 = v8->field_8;\n        v5 = v10;\n        v4 = v11;\n        v3 = v13;\n        v2 = stack_base + 0;\n        v1 = v14;\n        v29 = chdir();\n        if ((unsigned int)v29 != 0)\n        {\n            v15 = __errno_location();\n            if (*(v15) == 36)\n            {\n                v0 = -100;\n                v16 = strlen(stack_base + 0);\n                if (!(v16 != 0))\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (v16 > 4095)\n                {\n                    v17 = strspn((unsigned int)(stack_base + 0), 0x40efb1);\n                    if (v17 != 2)\n                    {\n                        v18 = v9;\n                        if (v17 != 0)\n                        {\n                            v19 = sub_40bab0();\n                            if (v19 == 0)\n                            {\n                                v18 = &v18[v17];\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v20 = (unsigned long long)(unsigned int)sub_40c490();\n                        if (v20 != 0)\n                        {\n                            *(v20) = 0;\n                            v21 = sub_40bab0();\n                            *(v20) = 47;\n                            if (v21 == 0)\n                            {\n                                v23 = &v20[1];\n                                v18 = v23 + (unsigned long long)strspn(v23, 0x40efb1);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n        }\n        if (v17 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && (unsigned int)v29 != 0 && v16 != 0 || v17 == 2 && *(v15) == 36 && v21 == 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 || v19 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0)\n        {\n            if (*(v18) != 47)\n            {\n                v24 = &v18[v16];\n                if (v18 <= &v18[v16])\n                {\n                    while (true)\n                    {\n                        if (v24 + -0x1 * v18 > 4095)\n                        {\n                            v25 = (unsigned long long)memrchr((unsigned int)v18, 0x2f, 0x1000);\n                            if (v25 != 0)\n                            {\n                                *(v25) = 0;\n                                if (v25 - v18 <= 4095)\n                                {\n                                    *(v25) = 47;\n                                    if (sub_40bab0() != 0)\n                                    {\n                                        break;\n                                    }\n                                    v28 = &v25[1];\n                                    v18 = v28 + (unsigned long long)strspn(v28, 0x40efb1);\n                                }\n                                else\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                            else\n                            {\n                                *(v15) = 36;\n                                v29 = -18446744069414584321;\n                            }\n                        }\n                        else\n                        {\n                            if (v24 > v18)\n                            {\n                                v30 = sub_40bab0();\n                                if (v30 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v29 = fchdir(v0);\n                            if ((unsigned int)v29 == 0)\n                            {\n                                sub_40ba70();\n                            }\n                        }\n                    }\n                    if (v24 + -0x1 * v18 <= 4095 && v24 > v18 || v24 + -0x1 * v18 <= 4095 && (unsigned int)v29 != 0 || v25 - v18 <= 4095 && v25 != 0 && v24 + -0x1 * v18 > 4095)\n                    {\n                        sub_40ba70();\n                        *(v15) = *(v15);\n                    }\n                    else if ((v25 == 0 || v24 + -0x1 * v18 <= 4095) && ((unsigned int)v29 == 0 || v24 + -0x1 * v18 > 4095) && (v24 <= v18 || v30 == 0 || v24 + -0x1 * v18 > 4095))\n                    {\n                        v34 = v29;\n                        v35 = v1;\n                        v36 = v3;\n                        v37 = v4;\n                        v38 = v5;\n                        return v34;\n                    }\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (*(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0 && v19 != 0 || *(v18) != 47 && (v17 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && (unsigned int)v29 != 0 && v16 != 0 || v17 == 2 && *(v15) == 36 && v21 == 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 || v19 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0) && v18 <= &v18[v16] || v17 == 2 && *(v15) == 36 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 && v21 != 0)\n        {\n            sub_40ba70();\n            *(v15) = *(v15);\n        }\n        if (*(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0 && v19 != 0 || *(v18) != 47 && (v17 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && (unsigned int)v29 != 0 && v16 != 0 || v17 == 2 && *(v15) == 36 && v21 == 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 || v19 == 0 && *(v15) == 36 && v16 > 4095 && v17 != 2 && v17 != 0 && (unsigned int)v29 != 0 && v16 != 0) && v18 <= &v18[v16] || v17 == 2 && *(v15) == 36 && v16 > 4095 && (unsigned int)v29 != 0 && v20 != 0 && v16 != 0 && v21 != 0 || v17 == 2 && *(v15) == 36 && v16 > 4095 && (unsigned int)v29 != 0 && v16 != 0 && v20 == 0)\n        {\n            v29 = -18446744069414584321;\n        }\n        if (...)\n        {\n            v34 = v29;\n            v35 = v1;\n            v36 = v3;\n            v37 = v4;\n            v38 = v5;\n            return v34;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4057c0",
            "funcStartAddr": "0x4057c0",
            "funcEndAddr": "0x40582c",
            "decompiledFuncCode": "extern uint128_t g_6124c0;\nextern uint128_t g_6124d0;\nextern uint128_t g_6124e0;\nextern unsigned long long g_6124f0;\n\nint sub_4057c0()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6124c0;\n    *((uint128_t *)&v1) = g_6124d0;\n    *((uint128_t *)&v2) = g_6124e0;\n    v4 = g_6124f0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_405080();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40b370",
            "funcStartAddr": "0x40b370",
            "funcEndAddr": "0x40b8c4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40ef77;\nextern char g_612540[2];\n\nint sub_40b370()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rdx\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n\n    v9 = g_612540;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40ef77 : (unsigned long long)nl_langinfo(0xe));\n    if (g_612540 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40ef77;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 != 35 && (unsigned int)v59 != 32)\n                        {\n                            ungetc(v59, v10);\n                            v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v27 > 1)\n                            {\n                                v28 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v28 = &v4;\n                                    v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v31 = &v5;\n                                v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v31 = &v6;\n                                    v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v32;\n                                tmp_56 = (unsigned int)v33 % 0x10000;\n                                v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v35 + 2;\n                                    v36 = malloc(v35 + 3);\n                                    v38 = v1;\n                                    v39 = v2;\n                                }\n                                else\n                                {\n                                    v37 = v35 + v0 + 3;\n                                    v0 = v35 + v0 + 2;\n                                    v36 = realloc(NULL, v37);\n                                    v39 = v2;\n                                    v38 = v1;\n                                }\n                                if (v36 != 0)\n                                {\n                                    tmp_1 = -2 - v38;\n                                    v40 = v38 + 1;\n                                    v41 = v0 - v39;\n                                    v42 = tmp_1 + v0 - v39 + v36;\n                                    if ((unsigned int)v40 >= 8)\n                                    {\n                                        *((long long *)v42) = *((long long *)&v3);\n                                        *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                        v43 = v42 + 8 & -8;\n                                        v42 -= v42 + 8 & -8;\n                                        v44 = &(&v3)[-1 * v42];\n                                        v45 = (unsigned int)(v40 + v42) & -8;\n                                        if (v45 >= 8)\n                                        {\n                                            v42 = 0;\n                                            do\n                                            {\n                                                v47 = v42;\n                                                v42 = (unsigned int)v42 + 8;\n                                                *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                            }\n                                            while ((unsigned int)v42 < (v45 & -8));\n                                        }\n                                    }\n                                    else if ((v40 & 4) != 0)\n                                    {\n                                        *((int *)v42) = *((int *)&v3);\n                                        *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                    }\n                                    else if ((unsigned int)v40 != 0)\n                                    {\n                                        *((char *)v42) = v3;\n                                        if ((v40 & 2) != 0)\n                                        {\n                                            *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                        }\n                                    }\n                                    v61 = v39 + 1;\n                                    v48 = v36 + v41 - 1;\n                                    if ((unsigned int)v42 >= 8)\n                                    {\n                                        *((long long *)v48) = *((long long *)&v5);\n                                        v42 = v61;\n                                        *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                        v51 = v48 - (v48 + 8 & -8);\n                                        v53 = (unsigned int)(v42 + v51) & -8;\n                                        if (v53 >= 8)\n                                        {\n                                            v56 = 0;\n                                            do\n                                            {\n                                                v57 = v56;\n                                                v56 = (unsigned int)v56 + 8;\n                                                *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                            }\n                                            while ((unsigned int)v56 < (v53 & -8));\n                                        }\n                                    }\n                                    else if (((char)v42 & 4) != 0)\n                                    {\n                                        *((int *)v48) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v42 != 0)\n                                    {\n                                        *((char *)v48) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v36;\n                                    v58 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_40ef77;\n                                    v10 = (tmp_10 == 0? &g_40ef77 : tmp_10);\n                                    free(NULL);\n                                    sub_40bd60();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 35 && v36 != 0 && (unsigned int)v59 != 32)\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if ((unsigned int)v59 == 35)\n                        {\n                            do\n                            {\n                                v60 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v60[1];\n                                    v60 = (unsigned int)*(v60);\n                                    v61 = 1;\n                                }\n                                else\n                                {\n                                    v60 = __uflow(v10);\n                                    v61 = (char)((unsigned int)v60 != -1);\n                                }\n                            }\n                            while (v60 != 10 && v61 != 0);\n                        }\n                        if ((unsigned int)v59 == 35 && v60 == -1 || (unsigned int)v59 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v59 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v27 <= 1 && (unsigned int)v59 != 35 && (unsigned int)v59 != 32)\n                        {\n                            v10 = (tmp_10 == 0? &g_40ef77 : tmp_10);\n                            sub_40bd60();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v59 != 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && v27 <= 1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && v60 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1)\n                    {\n                        v9 = &g_40ef77;\n                    }\n                    else if (v36 == 0 && v27 > 1 && (unsigned int)v59 != 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 || ((unsigned int)v59 != 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && v27 <= 1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && v60 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40ef77;\n            free(v17);\n        }\n        *((char *[2])&g_612540[0]) = v9;\n    }\n    v65 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v66 = strcmp((tmp_10 == 0? &g_40ef77 : tmp_10), v9);\n            if (v66 != 0 && (v9[1] != 0 || v65 != 42))\n            {\n                v67 = strlen(v9);\n                v68 = &((char [2])&v9[v67])[1];\n                v69 = strlen(&((char [2])&v9[v67])[1]);\n                v9 = v68 + v69 + 1;\n                v65 = (char)*((char *)(v68 + v69 + 1));\n                if (v65 == 0)\n                {\n                    break;\n                }\n            }\n            if (v66 == 0 || v9[1] == 0 && v65 == 42)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_406ea0",
            "funcStartAddr": "0x406ea0",
            "funcEndAddr": "0x406f92",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[16];\n    struct struct_2 *field_10;\n    char padding_18[32];\n    unsigned long long field_38;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_406ea0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3[8];  // rdi\n    struct_1 *v4;  // rbp\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // rdi\n    unsigned long long *v7;  // rdx\n    struct_0 *v8;  // rbx\n    unsigned long long *v9;  // r8\n    unsigned long long v11[2];  // rdx\n    struct_0 *v12;  // rsi\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rdi\n    struct_0 *v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v8 = v5;\n    v6 = v3[2];\n    if (v4->field_38 < v1)\n    {\n        v4->field_38 = v1 + 40;\n        if (v1 + 40 <= 2305843009213693951)\n        {\n            v6 = realloc(v6, (v1 + 40) * 8);\n            if (v6 != 0)\n            {\n                v4->field_10 = &v6;\n            }\n            else\n            {\n                v6 = v4->field_10;\n            }\n        }\n        if (v6 == 0 || v1 + 40 > 2305843009213693951)\n        {\n            free(v6);\n            v4->field_10 = 0;\n            v4->field_38 = 0;\n            return v5;\n        }\n    }\n    if (v4->field_38 >= v1 || v1 + 40 <= 2305843009213693951 && v6 != 0)\n    {\n        v7 = v6;\n        if (v5 != 0)\n        {\n            do\n            {\n                v7 = &v7[1];\n                v7[-1] = v8;\n                v8 = v8->field_10;\n            }\n            while (v8 != 0);\n        }\n        qsort();\n        v9 = v4->field_10;\n        v11 = v4->field_10;\n        v12 = v4->field_10->field_0;\n        v13 = v2 - 1;\n        if (v2 == 1)\n        {\n            v15 = v4->field_10->field_0;\n        }\n        else\n        {\n            while (true)\n            {\n                v14 = v11[1];\n                v11 = &v11[1];\n                v12->field_10 = v14;\n                v13 -= 1;\n                if (v13 == 1)\n                {\n                    break;\n                }\n                v12 = *(v11);\n            }\n            v15 = v9[v2 + -1];\n        }\n        v15->field_10 = 0;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x405679",
            "decompiledFuncCode": "int sub_405610()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405080();\n}\n"
        },
        {
            "funcName": "sub_40a810",
            "funcStartAddr": "0x40a810",
            "funcEndAddr": "0x40a87b",
            "decompiledFuncCode": "int sub_40a810()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40b0d0",
            "funcStartAddr": "0x40b0d0",
            "funcEndAddr": "0x40b28f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_40b0d0()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned int|unsigned long|uint128_t|unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_3 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned int|unsigned long|uint128_t v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_2 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_40a150() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_40a270();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_40ac10() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_406cc0",
            "funcStartAddr": "0x406cc0",
            "funcEndAddr": "0x406ce2",
            "decompiledFuncCode": "int sub_406cc0()\n{\n    unsigned long long v1;  // rax\n    struct struct_0 **v2;  // rdi\n    struct struct_0 **v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (*(v2)->field_80 >= *(v3)->field_80)\n    {\n        v1 = (char)(*(v2)->field_80 > *(v3)->field_80);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405220",
            "funcStartAddr": "0x405220",
            "funcEndAddr": "0x405254",
            "decompiledFuncCode": "int sub_405220()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4064c0();\n}\n"
        },
        {
            "funcName": "sub_405710",
            "funcStartAddr": "0x405710",
            "funcEndAddr": "0x40571d",
            "decompiledFuncCode": "int sub_405710()\n{\n}\n"
        },
        {
            "funcName": "sub_407030",
            "funcStartAddr": "0x407030",
            "funcEndAddr": "0x40706a",
            "decompiledFuncCode": "int sub_407030()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    void *v3;  // rdi\n    unsigned long v4;  // rax\n    unsigned long long v5;  // rbx\n    void *v6;  // rbp\n    unsigned long long v8[4];  // rdi\n    unsigned long long v10[4];  // rbx\n    unsigned long long v11;  // rbx\n\n    if (v3 != 0)\n    {\n        v1 = stack_base + 0;\n        v0 = v5;\n        v10 = v3;\n        while (true)\n        {\n            v6 = v10[2];\n            if (v10[3] != 0)\n            {\n                closedir();\n            }\n            v8 = v10;\n            v10 = v6;\n            if (v10 == 0)\n            {\n                break;\n            }\n        }\n        v11 = v0;\n        return (unsigned long long)free(v8);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406240",
            "funcStartAddr": "0x406240",
            "funcEndAddr": "0x4062b4",
            "decompiledFuncCode": "extern unsigned int g_40e73a;\nextern unsigned int g_40e765;\nextern unsigned int g_40e998;\n\nint sub_406240()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e73a, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40e765, 0x5));\n    dcgettext(0x0, 0x40e998, 0x5);\n}\n"
        },
        {
            "funcName": "sub_409fb0",
            "funcStartAddr": "0x409fb0",
            "funcEndAddr": "0x409ff6",
            "decompiledFuncCode": "int sub_409fb0()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_40ba20();\n}\n"
        },
        {
            "funcName": "sub_40b906",
            "funcStartAddr": "0x40b906",
            "funcEndAddr": "0x40b90b",
            "decompiledFuncCode": "int sub_40b906()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409c70",
            "funcStartAddr": "0x409c70",
            "funcEndAddr": "0x409c88",
            "decompiledFuncCode": "int sub_409c70()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_409c10();\n}\n"
        },
        {
            "funcName": "sub_402770",
            "funcStartAddr": "0x402770",
            "funcEndAddr": "0x402bcd",
            "decompiledFuncCode": "extern unsigned int g_40c6e9;\nextern unsigned int g_40c7c8;\nextern unsigned int g_40c7f0;\nextern unsigned int g_40c858;\nextern unsigned int g_40c8f0;\nextern unsigned int g_40c9c0;\nextern unsigned int g_40caa8;\nextern unsigned int g_40cb20;\nextern unsigned int g_40cc78;\nextern unsigned int g_40ccf8;\nextern unsigned int g_40cd78;\nextern unsigned int g_40cdc0;\nextern unsigned int g_40cf98;\nextern unsigned int g_40cfc8;\nextern unsigned int g_40d000;\nextern unsigned int g_40d0c0;\nextern unsigned int g_40d1b8;\nextern unsigned int g_40d200;\nextern unsigned int g_40d220;\nextern unsigned long long stdout;\n\nint sub_402770()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v35[2];  // rax\n    char *v36;  // rdi\n    char *v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // cc_dep1\n    unsigned long long v40;  // cc_dep2\n    unsigned long v41;  // d\n    char *v45;  // rax\n    char *v46;  // rax\n    unsigned long long v47;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x40c7c8, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c7f0, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c858, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c8f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c9c0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40caa8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40cb20, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40cc78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ccf8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40cd78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40cdc0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40cf98, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40cfc8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d000, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d0c0, 0x5));\n        v0 = \"[\";\n        v35 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v35 = &v2;\n            v36 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v37 = \"chown\";\n            v38 = 6;\n            if ((v39 > v40) - 0 - (v39 < v40) == 0)\n            {\n                break;\n            }\n            while (v38 != 0)\n            {\n                v38 -= 1;\n                v39 = *(v37);\n                v40 = *(v36);\n                v36 = &v36[v41];\n                v37 = &v37[v41];\n                break;\n            }\n        }\n        if (v35[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c6e9, 0x5));\n            v46 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c6e9, 0x5));\n            v45 = setlocale(0x5, 0x0);\n            if (v45 != 0)\n            {\n                v47 = strncmp(v45, \"en_\", 0x3);\n            }\n            if (v47 == 0 || v45 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d200, 0x5));\n            }\n        }\n        if ((v35[1] == 0 || strncmp(v46, \"en_\", 0x3) != 0) && (v35[1] == 0 || v46 != 0) && (v47 != 0 || v35[1] != 0) && (v35[1] != 0 || v45 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d1b8, 0x5));\n        }\n        if (v35[1] != 0 || v47 != 0 && v45 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d200, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d220, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408f40",
            "funcStartAddr": "0x408f40",
            "funcEndAddr": "0x409015",
            "decompiledFuncCode": "int sub_408f40()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40569f",
            "funcStartAddr": "0x40569f",
            "funcEndAddr": "0x405710",
            "decompiledFuncCode": "extern uint128_t g_6124c0;\nextern uint128_t g_6124d0;\nextern uint128_t g_6124e0;\nextern unsigned long long g_6124f0;\n\nint sub_40569f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6124f0;\n    *((uint128_t *)&v0) = g_6124c0;\n    *((uint128_t *)&v1) = g_6124d0;\n    *((uint128_t *)&v2) = g_6124e0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_405080();\n}\n"
        },
        {
            "funcName": "sub_403a80",
            "funcStartAddr": "0x403a80",
            "funcEndAddr": "0x403b8f",
            "decompiledFuncCode": "extern unsigned int g_40d5a2;\nextern unsigned int g_40d5b2;\n\nint sub_403a80()\n{\n    char v0[18];  // [bp-0x58]\n    unsigned int v1;  // [bp-0x3c]\n    char v2[18];  // [bp+0x8]\n    unsigned int v3;  // edx\n    char v4[18];  // r12\n    unsigned long long v7;  // rbp\n    unsigned int *v9;  // r13\n    unsigned long long v10;  // rbx\n    unsigned long long v12;  // rax\n\n    v1 = v3;\n    v4 = v2;\n    v10 = 1;\n    v7 = (unsigned int)sub_406550();\n    while (true)\n    {\n        if (fts_read() == 0)\n        {\n            break;\n        }\n        *((char *[18])&v0[0]) = v2;\n        v10 = (unsigned int)v10 & sub_402d10();\n    }\n    v9 = __errno_location();\n    if (*(v9) != 0)\n    {\n        v10 = v4[2 + 1];\n        if (v4[2 + 1] != 0)\n        {\n            v10 = 0;\n        }\n        else\n        {\n            error(0x0, *(v9), (unsigned long long)dcgettext(0x0, 0x40d5a2, 0x5));\n        }\n    }\n    if (fts_close() != 0)\n    {\n        v10 = 0;\n        error(0x0, *(v9), (unsigned long long)dcgettext(0x0, 0x40d5b2, 0x5));\n    }\n    v12 = v10;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_407080",
            "funcStartAddr": "0x407080",
            "funcEndAddr": "0x4070a9",
            "decompiledFuncCode": "int sub_407080()\n{\n    unsigned long long v1;  // rax\n\n    while (true)\n    {\n        v1 = sub_40b2d0();\n        if (v1 == 0)\n        {\n            close(sub_40b320());\n        }\n        else\n        {\n            return v1;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_406420",
            "funcStartAddr": "0x406420",
            "funcEndAddr": "0x40646a",
            "decompiledFuncCode": "int sub_406420() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402cd0",
            "funcStartAddr": "0x402cd0",
            "funcEndAddr": "0x402d07",
            "decompiledFuncCode": "int sub_402cd0()\n{\n    if ((unsigned long long)getpwuid() != 0)\n    {\n        return sub_4064f0();\n    }\n    sub_403c60();\n    return sub_4064f0();\n}\n"
        },
        {
            "funcName": "fts_read",
            "funcStartAddr": "0x408640",
            "funcEndAddr": "0x408d6f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[32];\n    unsigned int field_48;\n    char field_49;\n    char padding_4a[14];\n    unsigned long long field_58;\n} struct_0;\n\ntypedef struct struct_7 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[16];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    unsigned int field_44;\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[8];\n    unsigned short field_70;\n    char field_72;\n    char padding_73[1];\n    unsigned short field_74;\n    char padding_76[2];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n    char padding_94[20];\n    unsigned long long field_a8;\n} struct_7;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[32];\n    unsigned int field_48;\n    char field_49;\n    char padding_4a[14];\n    unsigned long long field_58;\n} struct_2;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    struct struct_6 *field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[16];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned int field_40;\n    unsigned int field_44;\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[8];\n    unsigned short field_70;\n    char field_72;\n    char padding_73[1];\n    unsigned short field_74;\n    char padding_76[2];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n    char padding_94[20];\n    unsigned long long field_a8;\n} struct_5;\n\ntypedef struct struct_8 {\n    char padding_0[1];\n    char field_1;\n} struct_8;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    struct struct_4 *field_8;\n    unsigned long long field_10;\n    char padding_18[24];\n    unsigned long long field_30;\n} struct_3;\n\nint fts_read()\n{\n    void tmp_11;  // tmp #11\n    void tmp_9;  // tmp #9\n    void tmp_8;  // tmp #8\n    void tmp_13;  // tmp #13\n    void tmp_10;  // tmp #10\n    struct_0 *v1;  // rdi\n    struct_7 *v2;  // rbp\n    unsigned long long v3;  // rax\n    struct_2 *v4;  // r12\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    struct_5 *|unsigned long long v7;  // rbx\n    unsigned long long v8;  // rax\n    char *v9;  // rdx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    void *v12;  // rdi\n    unsigned long long v15;  // rax\n    unsigned int v16;  // eax\n    struct_8 *v19;  // rbp\n    void *v20;  // rdi\n    unsigned long long v22;  // rax\n    unsigned int v24;  // eax\n    unsigned int v25;  // eax\n    struct_3 *v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long v31;  // rdi\n    unsigned long long v32;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r14\n    unsigned long long v44;  // rax\n    unsigned long long v45[14];  // rbp\n    unsigned long long v46;  // rax\n    unsigned int|unsigned long|unsigned long long v48;  // edi\n    unsigned long long v49;  // rax\n\n    v2 = v1->field_0;\n    if (v1->field_0 != 0 && ((char)(v1->field_48 >> 8) & 64) == 0)\n    {\n        v3 = v2->field_74;\n        v4 = v1;\n        v2->field_74 = 3;\n        if (v3 != 1)\n        {\n            if (v1->field_0->field_74 != 2)\n            {\n            }\n            else\n            {\n                if ((unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000)\n                {\n                }\n                else\n                {\n                    v5 = sub_406cf0();\n                    *((unsigned long long *)&v2->field_70) = v5;\n                    if (v5 != 1)\n                    {\n                        v1->field_0 = &v2->padding_0;\n                    }\n                    else if (((char)v1->field_48 & 4) != 0)\n                    {\n                        v1->field_0 = &v2->padding_0;\n                        v7 = v2;\n                    }\n                    else\n                    {\n                        v11 = sub_4073f0();\n                        *((unsigned long long *)&v2->field_44) = v11;\n                        if (v11 >= 0)\n                        {\n                            *((short *)&v2->field_72) = *((short *)&v2->field_72) | 2;\n                            v49 = v2->field_70;\n                            v7 = v2;\n                        }\n                        else\n                        {\n                            v16 = *(__errno_location());\n                            v2->field_70 = 7;\n                            v2->field_40 = v16;\n                            v1->field_0 = &v2->padding_0;\n                        }\n                    }\n                    if (v5 == 11)\n                    {\n                        v7 = v2;\n                    }\n                }\n            }\n            if (v1->field_0->field_70 != 1 && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000))\n            {\n                while (true)\n                {\n                    v7 = v2->field_10;\n                    if (v2->field_10 != 0)\n                    {\n                        v1->field_0 = &v7->padding_0;\n                        free(v2);\n                        if (v7->field_58 != 0)\n                        {\n                            v6 = v7->field_74;\n                            v2 = v7;\n                            if (v6 != 2)\n                            {\n                                break;\n                            }\n                            v10 = sub_406cf0();\n                            *((unsigned long long *)&v7->field_70) = v10;\n                            if (((char)v1->field_48 & 4) == 0 && v10 == 1)\n                            {\n                                v15 = sub_4073f0();\n                                *((unsigned long long *)&v7->field_44) = v15;\n                                if (v15 >= 0)\n                                {\n                                    *((short *)&v7->field_72) = *((short *)&v7->field_72) | 2;\n                                }\n                                else\n                                {\n                                    v24 = *(__errno_location());\n                                    v7->field_70 = 7;\n                                    v7->field_40 = v24;\n                                }\n                            }\n                            v7->field_74 = 3;\n                        }\n                        else\n                        {\n                            v8 = sub_4072c0();\n                            if (v8 == 0)\n                            {\n                                v12 = *((long long *)&v1->padding_4a[11]);\n                                if (((unsigned short)v4->field_48 & 258) == 0)\n                                {\n                                    free(v12);\n                                }\n                                else if (v12 != 0)\n                                {\n                                    sub_40ab30();\n                                }\n                                tmp_11 = v7->field_60;\n                                v19 = &v7[1].field_58;\n                                v20 = v4->field_20;\n                                v7->field_48 = v7->field_60;\n                                memmove(v20, &v7[1].field_58, tmp_11 + 1);\n                                v22 = strrchr();\n                                if (v22 != 0 && (v19->field_1 != 0 || v19 != v22))\n                                {\n                                    v37 = strlen(v22 + 1);\n                                    memmove(v19, v22 + 1, v37 + 1);\n                                    v7->field_60 = v37;\n                                }\n                                tmp_9 = v4->field_20;\n                                v7->field_38 = v4->field_20;\n                                v7->field_30 = tmp_9;\n                                sub_407390();\n                                v49 = v7->field_70;\n                            }\n                            else\n                            {\n                                v4->field_48 = v4->field_48 | 0x4000;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v7 = v2->field_8;\n                        if (v2->field_8->field_18 != 0)\n                        {\n                            tmp_8 = v7->field_48;\n                            v9 = v4->field_20;\n                            v4->field_0 = v7;\n                            v9[tmp_8] = 0;\n                            v7 = (unsigned long long)(unsigned int)sub_407760();\n                            if (v7 == 0)\n                            {\n                                if ((*(&((char *)&v4->field_48)[1]) & 64) != 0)\n                                {\n                                    break;\n                                }\n                                v7 = v2->field_8;\n                            }\n                            else\n                            {\n                                free(v2);\n                            }\n                        }\n                        if (v2->field_8->field_18 == 0 || v7 == 0)\n                        {\n                            v1->field_0 = &v7->padding_0;\n                            free(v2);\n                            if (v7->field_58 != -1)\n                            {\n                                if (v7->field_70 == 11)\n                                {\n                                    break;\n                                }\n                                *((char *)(v1->field_20 + v7->field_48)) = 0;\n                                if (v7->field_58 != 0)\n                                {\n                                    v28 = (unsigned short)*((short *)&v7->field_72);\n                                    if (((char)*((short *)&v7->field_72) & 2) != 0)\n                                    {\n                                        v30 = v1->field_48;\n                                        v31 = v7->field_44;\n                                        if (((char)v4->field_48 & 4) == 0)\n                                        {\n                                            if ((v30 & 2) != 0)\n                                            {\n                                                sub_407250();\n                                                v31 = v7->field_44;\n                                            }\n                                            else\n                                            {\n                                                v36 = fchdir(v31);\n                                                if (v36 != 0)\n                                                {\n                                                    v7->field_40 = *(__errno_location());\n                                                    v4->field_48 = v4->field_48 | 0x4000;\n                                                }\n                                                v31 = v7->field_44;\n                                            }\n                                        }\n                                        close(v31);\n                                    }\n                                    else if ((v28 & 1) == 0)\n                                    {\n                                        v32 = sub_407440();\n                                    }\n                                }\n                                else\n                                {\n                                    v29 = sub_4072c0();\n                                }\n                                if (v7->field_58 == 0 && v29 == 0 || v32 == 0 && v7->field_58 != 0 || v7->field_58 != 0 && (v28 & 1) != 0 || v7->field_58 != 0 && ((char)*((short *)&v7->field_72) & 2) != 0)\n                                {\n                                    v48 = v4->field_48;\n                                }\n                                else\n                                {\n                                    v7->field_40 = *(__errno_location());\n                                    v4->field_48 = v4->field_48 | 0x4000;\n                                    if (v7->field_70 == 2)\n                                    {\n                                        break;\n                                    }\n                                    v48 = v4->field_48;\n                                }\n                                if (v7->field_70 != 2 || v7->field_58 == 0 && v29 != 0 || (v28 & 1) == 0 && ((char)*((short *)&v7->field_72) & 2) == 0 && v7->field_58 != 0 && v32 != 0)\n                                {\n                                    if (v7->field_40 == 0)\n                                    {\n                                        v7->field_70 = 6;\n                                        sub_4076c0();\n                                        v48 = v4->field_48;\n                                    }\n                                    else\n                                    {\n                                        v7->field_70 = 7;\n                                    }\n                                }\n                                if (((unsigned short)v48 & 0x4000) == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                free(v7);\n                                *(__errno_location()) = 0;\n                                v1->field_0 = 0;\n                            }\n                        }\n                    }\n                }\n                if (v7->field_58 == -1 && v2->field_10 == 0 && ((*(&((char *)&v4->field_48)[1]) & 64) == 0 || v2->field_8->field_18 == 0) && (v2->field_8->field_18 == 0 || v7 == 0))\n                {\n                    return stack_base + 0;\n                }\n                else if (...)\n                {\n                    tmp_13 = v7;\n                    return tmp_13;\n                }\n                else if ((v2->field_10 == 0 || v7->field_58 != 0) && (v2->field_10 == 0 || v7->field_74 != 4) && (v2->field_8->field_18 != 0 || v2->field_10 != 0) && (v7 != 0 || v2->field_10 != 0))\n                {\n                    tmp_10 = (*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20;\n                    *((char *)((*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20)) = 47;\n                    memmove(tmp_10 + 1, &v7[1].field_58, v7->field_60 + 1);\n                    v49 = v7->field_70;\n                }\n                else if (v7->field_58 == 0 && v8 == 0 && v2->field_10 != 0)\n                {\n                    v4->field_0 = v7;\n                }\n                else if (!(...))\n                {\n                    if (v2->field_10 == 0 && v7->field_58 != -1 && ((*(&((char *)&v4->field_48)[1]) & 64) == 0 || v2->field_8->field_18 == 0) && (v2->field_8->field_18 == 0 || v7 == 0))\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n            }\n        }\n        else\n        {\n            v2->field_70 = sub_406cf0();\n        }\n    }\n    if ((v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && ((char)v1->field_48 & 64) != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000) && v2->field_78 == v1->field_18 || v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000) && ((char)v1->field_48 & 64) == 0) && v1->field_8 != 0)\n    {\n        if (!(((char)(v1->field_48 >> 8) & 32) == 0))\n        {\n            v1->field_48 = v1->field_48;\n            sub_407030();\n            v1->field_8 = 0;\n        }\n        else if (sub_407440() != 0)\n        {\n            v7 = v1->field_8;\n            v25 = *(__errno_location());\n            *((short *)&v2->field_72) = *((short *)&v2->field_72) | 1;\n            v2->field_40 = v25;\n            if (v7 != 0)\n            {\n                v27 = v1->field_8;\n                do\n                {\n                    v27->field_30 = v27->field_8->field_30;\n                    v27 = v27->field_10;\n                }\n                while (v27 != 0);\n            }\n        }\n        else\n        {\n            v7 = v1->field_8;\n        }\n    }\n    if (v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0 != 0 && ((char)v1->field_48 & 64) != 0 && (v1->field_0->field_74 == 2 || v1->field_0->field_74 != 4) && (v1->field_0->field_74 != 2 || (unsigned long long)v1->field_0->field_70 - 12 << 48 > 0x1000000000000) && v2->field_78 != v1->field_18 || v1->field_0->field_70 == 1 && ((char)(v1->field_48 >> 8) & 64) == 0 && v3 != 1 && v1->field_0->field_74 != 2 && v1->field_0 != 0 && v1->field_0->field_74 == 4)\n    {\n        if ((v2->field_72 & 2) != 0)\n        {\n            close(v2->field_44);\n        }\n        if (v1->field_8 != 0)\n        {\n            sub_407030();\n            v1->field_8 = 0;\n        }\n        v2->field_70 = 6;\n        sub_4076c0();\n    }\n    if (...)\n    {\n        v7 = (unsigned int)sub_407760();\n        v1->field_8 = v7;\n        if (v7 == 0 && ((unsigned short)v1->field_48 & 0x4000) == 0)\n        {\n            if (v2->field_40 != 0 && v2->field_70 != 4)\n            {\n                v2->field_70 = 7;\n            }\n            sub_4076c0();\n        }\n    }\n    if (...)\n    {\n        v1->field_8 = 0;\n    }\n    if (...)\n    {\n        tmp_10 = (*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20;\n        *((char *)((*((char *)(v7->field_8->field_38 + v7->field_8->field_48 - 1)) != 47? v7->field_8->field_48 : v7->field_8->field_48 - 1) + v4->field_20)) = 47;\n        memmove(tmp_10 + 1, &v7[1].field_58, v7->field_60 + 1);\n        v49 = v7->field_70;\n    }\n    if (...)\n    {\n        v4->field_0 = v7;\n    }\n    if (...)\n    {\n        v44 = v7->field_a8;\n        if (v7->field_a8 != 2)\n        {\n        }\n        else\n        {\n            v45 = v7->field_8;\n            if (v7->field_8->field_68 == 0 && ((char)v4->field_48 & 24) == 24)\n            {\n                v46 = sub_4071e0();\n                if (v46 == 2)\n                {\n                    v49 = v7->field_70;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        v49 = sub_406cf0();\n        tmp_10 = v7->field_90;\n        *((unsigned long long *)&v7->field_70) = v49;\n        if (((unsigned short)tmp_10 & 0xf000) == 0x4000 && v7->field_58 != 0 && v45[13] - 1 <= -3)\n        {\n            v45[13] = v45[13] - 1;\n        }\n    }\n    if (...)\n    {\n        v4->field_18 = v7->field_78;\n    }\n    if (...)\n    {\n        *(__errno_location()) = 12;\n    }\n    if (...)\n    {\n        tmp_13 = v7;\n        return tmp_13;\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b990",
            "funcStartAddr": "0x40b990",
            "funcEndAddr": "0x40b9d3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b990()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rax\n\n    v1->field_8 = 0;\n    v2 = (unsigned int)sub_409fb0();\n    v1->field_0 = v2;\n    if ((unsigned int)v2 >= 0)\n    {\n        return 0;\n    }\n    v3 = sub_40bfc0();\n    v1->field_8 = v3;\n    return 0 - (unsigned int)(char)(v3 == 0);\n}\n"
        },
        {
            "funcName": "sub_403bb0",
            "funcStartAddr": "0x403bb0",
            "funcEndAddr": "0x403bb8",
            "decompiledFuncCode": "extern char g_612398;\n\nint sub_403bb0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_612398 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40aa80",
            "funcStartAddr": "0x40aa80",
            "funcEndAddr": "0x40ab25",
            "decompiledFuncCode": "int sub_40aa80()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_409f30",
            "funcStartAddr": "0x409f30",
            "funcEndAddr": "0x409fa4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_409f30()\n{\n    void tmp_9;  // tmp #9\n    unsigned long v0;  // [bp-0x8]\n    struct_0 *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rax\n    unsigned long long v5[2];  // rsi\n\n    if (v2->field_18 == 9827862)\n    {\n        v3 = v2->field_10;\n        if (v2->field_10 != 0)\n        {\n            if (v2->field_0 == v5[1] && *(v5) == v2->field_8)\n            {\n                return 1;\n            }\n            if (*(v5) != v2->field_8 || v2->field_0 != v5[1])\n            {\n                v2->field_10 = v2->field_10 + 1;\n                if ((v3 + 1 & v3) != 0)\n                {\n                    return 0;\n                }\n                else if (v2->field_10 + 1 == 0)\n                {\n                    return 1;\n                }\n            }\n        }\n        else\n        {\n            v2->field_10 = 1;\n        }\n        if (v2->field_10 == 0 || (v3 + 1 & v3) == 0 && *(v5) != v2->field_8 && v2->field_10 + 1 != 0 || (v3 + 1 & v3) == 0 && v2->field_0 != v5[1] && v2->field_10 + 1 != 0)\n        {\n            tmp_9 = *(v5);\n            *((unsigned long long [2])&v2->field_0) = v5[1];\n            v2->field_8 = tmp_9;\n            return 0;\n        }\n    }\n    else\n    {\n        v0 = v4;\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40b320",
            "funcStartAddr": "0x40b320",
            "funcEndAddr": "0x40b360",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[12];\n    unsigned int field_10;\n    unsigned int field_14;\n    unsigned int field_18;\n    char field_1c;\n} struct_0;\n\nint sub_40b320()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1->field_1c != 0)\n    {\n        abort(); /* do not return */\n    }\n    v2 = (unsigned long long)v1->field_14;\n    v3 = (unsigned int)*((int *)((char *)v1 + 0x4 * v2));\n    *((unsigned int *)((char *)v1 + 0x4 * v2)) = v1->field_10;\n    if ((unsigned int)v2 != v1->field_18)\n    {\n        v1->field_14 = v1->field_14 + 3 & 3;\n        return v3;\n    }\n    v1->field_1c = 1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405690",
            "funcStartAddr": "0x405690",
            "funcEndAddr": "0x40569f",
            "decompiledFuncCode": "int sub_405690()\n{\n}\n"
        },
        {
            "funcName": "sub_40ae10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40b066",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_40ae10()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_3 *v12;  // rdx\n    unsigned int|unsigned long|uint128_t v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned int|unsigned long|uint128_t v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_40a150();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_40a270();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_40ac10();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_40a150();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_402c50",
            "funcStartAddr": "0x402c50",
            "funcEndAddr": "0x402c7c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char field_4;\n    char padding_5[3];\n    unsigned long long field_8;\n    unsigned short field_10;\n    char padding_12[6];\n    unsigned long long field_18;\n    unsigned long long field_20;\n} struct_0;\n\nint sub_402c50()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_0 = 2;\n    v1->field_4 = 0;\n    v1->field_8 = 0;\n    v1->field_10 = 1;\n    v1->field_18 = 0;\n    v1->field_20 = 0;\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40a2f0",
            "funcStartAddr": "0x40a2f0",
            "funcEndAddr": "0x40a42a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_40a2f0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_40a120();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_40a120();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_405310",
            "funcStartAddr": "0x405310",
            "funcEndAddr": "0x405382",
            "decompiledFuncCode": "extern int512_t g_6124c0;\n\nint sub_405310()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6124c0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_403e50();\n}\n"
        },
        {
            "funcName": "sub_405550",
            "funcStartAddr": "0x405550",
            "funcEndAddr": "0x40555a",
            "decompiledFuncCode": "int sub_405550()\n{\n}\n"
        },
        {
            "funcName": "sub_406c70",
            "funcStartAddr": "0x406c70",
            "funcEndAddr": "0x406c87",
            "decompiledFuncCode": "int sub_406c70()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (v1[1] != v2[1])\n    {\n        return 0;\n    }\n    v3 = *(v2);\n    v4 = *(v1) == *(v2);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_409ec0",
            "funcStartAddr": "0x409ec0",
            "funcEndAddr": "0x409f1c",
            "decompiledFuncCode": "int sub_409ec0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40bd60();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409020",
            "funcStartAddr": "0x409020",
            "funcEndAddr": "0x40961e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40ee50;\nextern unsigned int g_40ee70;\nextern unsigned int g_40eea0;\nextern unsigned int g_40eec0;\nextern unsigned int g_40eef0;\nextern unsigned long long stderr;\n\nint sub_409020()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long *|unsigned long long v18;  // rbx\n    unsigned int|unsigned long|unsigned long long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40ee50, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40ee70, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v21 == 0) && (*(v18) == 0 || v22 == v16) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (v4 == 0 || v22 == v16) && (v1 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40eef0, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40eec0, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40eea0, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a470",
            "funcStartAddr": "0x40a470",
            "funcEndAddr": "0x40a4bf",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40a470()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x405541",
            "decompiledFuncCode": "int sub_405530()\n{\n}\n"
        },
        {
            "funcName": "sub_405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x40526f",
            "decompiledFuncCode": "extern int512_t g_6124c0;\n\nint sub_405260()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6124c0 : v1));\n}\n"
        },
        {
            "funcName": "sub_40a530",
            "funcStartAddr": "0x40a530",
            "funcEndAddr": "0x40a66c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40a530()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long|unsigned long long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_405d20",
            "funcStartAddr": "0x405d20",
            "funcEndAddr": "0x4060c9",
            "decompiledFuncCode": "extern unsigned int g_40e6f3;\nextern unsigned int g_40e6f7;\nextern unsigned int g_40e707;\nextern unsigned int g_40e71e;\nextern unsigned int g_40e780;\nextern unsigned int g_40e850;\nextern unsigned int g_40e870;\nextern unsigned int g_40e898;\nextern unsigned int g_40e8c0;\nextern unsigned int g_40e8f0;\n\nint sub_405d20()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40e6f3, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e780, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40e6f7, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40e707, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40e71e, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40e850, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40e870, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40e898, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40e8c0, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40e8f0, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_406320",
            "funcStartAddr": "0x406320",
            "funcEndAddr": "0x406350",
            "decompiledFuncCode": "int sub_406320()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_406510(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40c638",
            "funcStartAddr": "0x40c638",
            "funcEndAddr": "0x40c658",
            "decompiledFuncCode": "extern unsigned long long g_611e30;\n\nint sub_40c638()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_611e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x40574a",
            "decompiledFuncCode": "int sub_405740()\n{\n}\n"
        },
        {
            "funcName": "sub_402bd0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402c39",
            "decompiledFuncCode": "int sub_402bd0()\n{\n    char *v1;  // rdi\n    unsigned long v2;  // rsi\n    char *v3;  // rsi\n    unsigned long long v4;  // r12\n    char *v6;  // rax\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rax\n\n    if (v1 != 0)\n    {\n        if (v3 != 0)\n        {\n            v4 = strlen(v1);\n            strlen(v3);\n            v8 = (unsigned int)sub_4062c0();\n            v6 = stpcpy(v8, v1);\n            *(v6) = 58;\n            strcpy(&v6[1], v3);\n        }\n    }\n    else\n    {\n        if (v2 == 0)\n        {\n            v8 = 0;\n        }\n    }\n    if (v2 == 0 && v1 == 0 || v3 != 0 && v1 != 0)\n    {\n        v9 = v8;\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_406490",
            "funcStartAddr": "0x406490",
            "funcEndAddr": "0x4064be",
            "decompiledFuncCode": "int sub_406490()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_406510(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403bc0",
            "funcStartAddr": "0x403bc0",
            "funcEndAddr": "0x403c5e",
            "decompiledFuncCode": "extern unsigned int g_40d90d;\nextern unsigned int g_6122d8;\nextern char g_612398;\nextern unsigned long long g_6123a0;\n\nint sub_403bc0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_409ec0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_612398 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40d90d, 0x5);\n            if (g_6123a0 != 0)\n            {\n                sub_405720();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_612398 != 0)\n    {\n        v3 = sub_409ec0();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_612398 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6122d8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_405490",
            "funcStartAddr": "0x405490",
            "funcEndAddr": "0x405525",
            "decompiledFuncCode": "extern unsigned long long *g_612318;\nextern unsigned long long g_612320;\nextern unsigned long long g_612328;\nextern unsigned int g_612330;\nextern unsigned long long g_6123c0;\n\nint sub_405490()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_612330;\n    if (g_612330 > 1)\n    {\n        v2 = &g_612318[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_612318[2 * (unsigned long long)(g_612330 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_612318[1] != 6366144)\n    {\n        v1 = free(g_612318[1]);\n        g_612320 = 0x100;\n        g_612328 = &g_6123c0;\n    }\n    if (g_612318 != 6365984)\n    {\n        v1 = free(g_612318);\n        g_612318 = &g_612320;\n    }\n    g_612330 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40a8f0",
            "funcStartAddr": "0x40a8f0",
            "funcEndAddr": "0x40aa70",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_40a100;\nextern int512_t g_40a110;\nextern int512_t g_40f070;\n\nint sub_40a8f0()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_40a270();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_40f070;\n            v3 = sub_40a270();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v8;\n        }\n        if ((((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_40a060();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_40a100 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_40a110 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_4052e0",
            "funcStartAddr": "0x4052e0",
            "funcEndAddr": "0x40530b",
            "decompiledFuncCode": "extern char g_6124c0;\n\nint sub_4052e0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6124c0 : v2);\n    *((int *)(tmp_11? &g_6124c0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6124c0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_6124c0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409cd0",
            "funcStartAddr": "0x409cd0",
            "funcEndAddr": "0x409ce6",
            "decompiledFuncCode": "int sub_409cd0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409c10();\n}\n"
        },
        {
            "funcName": "sub_40b936",
            "funcStartAddr": "0x40b936",
            "funcEndAddr": "0x40b93b",
            "decompiledFuncCode": "int sub_40b936()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409640",
            "funcStartAddr": "0x409640",
            "funcEndAddr": "0x409ba7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_40ef18;\nextern unsigned int g_40ef5c;\n\nint sub_409640()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char [2]|char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9\n    unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[2];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_408f40();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_408f40();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_409020();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40ef18, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40ef5c, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40ef18, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_409020();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40c620",
            "funcStartAddr": "0x40c620",
            "funcEndAddr": "0x40c638",
            "decompiledFuncCode": "extern int512_t g_6122c8;\n\nint sub_40c620()\n{\n}\n"
        },
        {
            "funcName": "sub_40c490",
            "funcStartAddr": "0x40c490",
            "funcEndAddr": "0x40c573",
            "decompiledFuncCode": "int sub_40c490()\n{\n    unsigned long long v1;  // rdx\n    void *v2;  // dil\n    char|unsigned long v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while (*((char *)v2) != (char)v3 && (v2 & 7) != 0 && v1 != 1);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if (*((char *)(v6 - 1)) == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v3 == *((char *)v2) && (v2 & 7) != 0 && v1 != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_406470",
            "funcStartAddr": "0x406470",
            "funcEndAddr": "0x406487",
            "decompiledFuncCode": "int sub_406470()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4062c0();\n}\n"
        },
        {
            "funcName": "sub_4065a0",
            "funcStartAddr": "0x4065a0",
            "funcEndAddr": "0x4065c1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned int field_48;\n} struct_0;\n\nint sub_4065a0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 1;\n    if (((char)v2->field_48 & 17) != 16)\n    {\n        v1 = 0;\n    }\n    if (((char)v2->field_48 & 17) == 16 || ((char)v2->field_48 & 17) != 17)\n    {\n        return v1;\n    }\n    if (((char)v2->field_48 & 17) == 17)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c5a0",
            "funcStartAddr": "0x40c5a0",
            "funcEndAddr": "0x40c5ae",
            "decompiledFuncCode": "int sub_40c5a0()\n{\n}\n"
        },
        {
            "funcName": "sub_403c60",
            "funcStartAddr": "0x403c60",
            "funcEndAddr": "0x403ca4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_403c60()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405382",
            "funcStartAddr": "0x405382",
            "funcEndAddr": "0x4053ab",
            "decompiledFuncCode": "int sub_405382()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_40a100",
            "funcStartAddr": "0x40a100",
            "funcEndAddr": "0x40a110",
            "decompiledFuncCode": "int sub_40a100()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_407250",
            "funcStartAddr": "0x407250",
            "funcEndAddr": "0x4072b3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[44];\n    unsigned int field_2c;\n    char padding_30[24];\n    char field_48;\n} struct_0;\n\nint sub_407250()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v3;  // rsi\n    char v4;  // dl\n    unsigned long long v5;  // rax\n    unsigned long v6;  // rdi\n\n    if (v1->field_2c == (unsigned int)v3 && v1->field_2c != -100)\n    {\n        abort(); /* do not return */\n    }\n    if (v1->field_2c == -100 || v1->field_2c != (unsigned int)v3)\n    {\n        if (!(v4 == 0))\n        {\n            v5 = sub_40b2e0();\n            if ((unsigned int)v5 >= 0)\n            {\n                v1->field_2c = v3;\n                return close(v5);\n            }\n        }\n        else if ((v1->field_48 & 4) == 0)\n        {\n            if (v1->field_2c >= 0)\n            {\n                v6 = v1->field_2c;\n                v1->field_2c = v3;\n                return close(v6);\n            }\n        }\n        if (v1->field_2c < 0 && v4 == 0 || v4 == 0 && (v1->field_48 & 4) != 0 || (unsigned int)v5 < 0 && v4 != 0)\n        {\n            v1->field_2c = v3;\n            return v5;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4072c0",
            "funcStartAddr": "0x4072c0",
            "funcEndAddr": "0x40730f",
            "decompiledFuncCode": "int sub_4072c0()\n{\n    unsigned int v1[19];  // rdi\n    char v4;  // bpl\n\n    if (((char)v1[9] & 4) == 0)\n    {\n        if (((char)(v1[9] >> 8) & 2) != 0)\n        {\n            sub_407250();\n        }\n        else\n        {\n            v4 = fchdir(v1[5]) != 0;\n        }\n    }\n    sub_407080();\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_406cf0",
            "funcStartAddr": "0x406cf0",
            "funcEndAddr": "0x406e7e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[8];\n    unsigned long long field_78;\n    char padding_80[8];\n    unsigned long long field_88;\n    unsigned int field_90;\n    char padding_94[116];\n    char field_108;\n    char field_109;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[136];\n    unsigned long long field_88;\n} struct_2;\n\ntypedef struct struct_1 {\n    char padding_0[44];\n    unsigned int field_2c;\n    char padding_30[24];\n    char field_48;\n} struct_1;\n\nint sub_406cf0()\n{\n    struct_0 *v1;  // rsi\n    struct_2 *v2;  // rbp\n    struct_0 *v3;  // rbx\n    unsigned long long v4;  // cc_dep1\n    struct_1 *v6;  // rdi\n    char v7;  // dl\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned int v10;  // eax\n    unsigned int *v11;  // r12\n    unsigned int|unsigned long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    char v16;  // cc_dep1\n    unsigned long long *v17;  // rdi\n    unsigned long long v19;  // rcx\n    unsigned long v20;  // d\n\n    v2 = &v1->field_78;\n    v3 = v1;\n    v4 = v1->field_58;\n    if ((((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0) && ((char)*((int *)&v6->field_48) & 2) == 0 && v7 == 0)\n    {\n        v9 = __fxstatat(0x1, v6->field_2c, v1->field_30, (unsigned int)v2, 0x100);\n        if (v9 != 0)\n        {\n            v12 = (unsigned int)*(__errno_location());\n        }\n    }\n    if (v7 != 0 || ((char)*((int *)&v6->field_48) & 2) != 0 || v4 == 0 && ((char)*((int *)&v6->field_48) & 1) != 0)\n    {\n        v8 = __xstat(0x1);\n    }\n    if (v8 != 0 && (v4 == 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 2) != 0) && (v7 != 0 || ((char)*((int *)&v6->field_48) & 1) != 0 || ((char)*((int *)&v6->field_48) & 2) != 0))\n    {\n        v11 = __errno_location();\n        v12 = *(v11);\n        if ((unsigned int)v12 == 2)\n        {\n            v12 = __lxstat(0x1, v3->field_30, (unsigned int)v2);\n            if (v12 == 0)\n            {\n                *(v11) = 0;\n                return 13;\n            }\n            v12 = *(v11);\n        }\n    }\n    if (v8 == 0 && v7 != 0 || v8 == 0 && ((char)*((int *)&v6->field_48) & 2) != 0 || v4 == 0 && v8 == 0 && ((char)*((int *)&v6->field_48) & 1) != 0 || v9 == 0 && v7 == 0 && ((char)*((int *)&v6->field_48) & 1) == 0 && ((char)*((int *)&v6->field_48) & 2) == 0 || v9 == 0 && v7 == 0 && ((char)*((int *)&v6->field_48) & 2) == 0 && v4 != 0)\n    {\n        v10 = v3->field_90 & 0xf000;\n        if (!(((unsigned short)v3->field_90 & 0xf000) != 0x4000))\n        {\n            v13 = v3->field_88;\n            if (v3->field_88 > 1 && v3->field_58 > 0)\n            {\n                v15 = ((v6->field_48 & 32) == 0? v13 - 2 : v13);\n            }\n            if (v3->field_88 <= 1 || v3->field_58 <= 0)\n            {\n                v15 = -1;\n            }\n            v16 = v3->field_108;\n            v3->field_68 = v15;\n            v14 = 1;\n            if (v16 == 46 && (v3->field_109 == 0 || ((unsigned int)*((int *)&v3->field_108) & 0xffff00) == 0x2e00))\n            {\n                v14 = (0 - (unsigned int)(char)(v3->field_58 < 1) & -0x4) + 5;\n            }\n        }\n        else if (v10 != 0xa000)\n        {\n            v14 = (unsigned long long)(char)(v10 == 0x8000) * 5 + 3;\n        }\n        else\n        {\n            v14 = 12;\n        }\n        return v14;\n    }\n    if ((v7 == 0 || v8 != 0) && (((char)*((int *)&v6->field_48) & 2) == 0 || v8 != 0) && (v7 == 0 || (unsigned int)v12 != 2 || v12 != 0) && (((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0 || v8 != 0) && (((char)*((int *)&v6->field_48) & 2) == 0 || (unsigned int)v12 != 2 || v12 != 0) && (v4 == 0 || v9 != 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 2) != 0) && (((char)*((int *)&v6->field_48) & 1) == 0 || v4 != 0 || (unsigned int)v12 != 2 || v12 != 0) && (v9 != 0 || v7 != 0 || ((char)*((int *)&v6->field_48) & 1) != 0 || ((char)*((int *)&v6->field_48) & 2) != 0))\n    {\n        *((unsigned long *)&v3->field_40) = v12;\n        v17 = &v2->padding_0[8] & -8;\n        v3->field_78 = 0;\n        v2->field_88 = 0;\n        for (v19 = &((struct struct_2 *)&v2->padding_0[-1 * (&v2->padding_0[8] & -8)])[1] >> 3; v19 != 0; v17 = &v17[v20])\n        {\n            v19 -= 1;\n            *(v17) = 0;\n        }\n        return 10;\n    }\n}\n"
        },
        {
            "funcName": "sub_407390",
            "funcStartAddr": "0x407390",
            "funcEndAddr": "0x4073e6",
            "decompiledFuncCode": "int sub_407390()\n{\n    unsigned int v1;  // edi\n    unsigned long long v2;  // rax\n    unsigned long long v4;  // rdi\n    unsigned long long *v5;  // rsi\n\n    if (((unsigned short)v1 & 258) != 0)\n    {\n        v2 = sub_40a8f0();\n        *(v5) = v2;\n        v2 = (char)(v2 != 0);\n    }\n    else\n    {\n        v4 = malloc(0x20);\n        *(v5) = v4;\n        v2 = 0;\n        if (v4 != 0)\n        {\n            sub_409f20();\n            return 1;\n        }\n    }\n    if (v4 == 0 || ((unsigned short)v1 & 258) != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bab0",
            "funcStartAddr": "0x40bab0",
            "funcEndAddr": "0x40bae6",
            "decompiledFuncCode": "int sub_40bab0()\n{\n    unsigned long long v2;  // rax\n    unsigned int v3;  // ebp\n    unsigned int *v5;  // rdi\n\n    if (rbp<4> >= 0)\n    {\n        rbp<4> = openat();\n        sub_40ba70();\n        *(v5) = v3;\n        v2 = 0;\n    }\n    else\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407760",
            "funcStartAddr": "0x407760",
            "funcEndAddr": "0x4080ca",
            "decompiledFuncCode": "typedef struct struct_4 {\n    struct struct_3 *field_0;\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    char field_48;\n} struct_4;\n\ntypedef struct struct_5 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    char field_48;\n} struct_5;\n\ntypedef struct struct_3 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned int field_40;\n    char padding_44[20];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n} struct_3;\n\ntypedef struct struct_8 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[8];\n    unsigned long long field_40;\n    unsigned int field_48;\n    char field_49;\n} struct_8;\n\ntypedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned int field_40;\n    char padding_44[44];\n    unsigned short field_70;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[24];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[4];\n    unsigned long long field_48;\n    char padding_50[32];\n    unsigned short field_70;\n    unsigned short field_72;\n    char padding_74[20];\n    unsigned long long field_88;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_2;\n\ntypedef struct struct_9 {\n    char padding_0[72];\n    unsigned int field_48;\n} struct_9;\n\ntypedef struct struct_6 {\n    unsigned long long field_0;\n    char padding_8[10];\n    char field_12;\n    char field_13;\n    char field_14;\n} struct_6;\n\ntypedef struct struct_10 {\n    char padding_0[4255264];\n    unsigned int field_40ee20;\n} struct_10;\n\ntypedef struct struct_7 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[56];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned short field_70;\n} struct_7;\n\nextern int512_t g_406cc0;\nextern char g_40ee20;\n\nint sub_407760()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x90]\n    void tmp_20;  // tmp #20\n    unsigned long v1;  // [bp-0x88]\n    unsigned long long v2;  // [bp-0x80]\n    unsigned long v3;  // [bp-0x78]\n    struct_3 *|struct_2 * v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned long long v6;  // [bp-0x60]\n    unsigned long|unsigned long long v7;  // [bp-0x58]\n    char *v8;  // [bp-0x50]\n    unsigned long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    char v11;  // [bp-0x3a]\n    char v12;  // [bp-0x39]\n    unsigned int v14;  // [bp+0x100008]\n    struct_4 *v15;  // rdi\n    struct_3 *v17;  // r13\n    unsigned int v18;  // esi\n    unsigned long long v20;  // rax\n    unsigned long long v22;  // rax\n    struct_9 *|struct_8 * v23;  // ebx\n    unsigned long long v24;  // rax\n    unsigned short v25;  // cc_dep1\n    unsigned long long v29;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // r14\n    unsigned int|unsigned long long v33;  // rdi\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rdi\n    unsigned long long v36;  // rbp\n    void *v41;  // rcx\n    struct_5 *v42;  // rbx\n    struct_6 *v43;  // r14\n    unsigned long long v44;  // r13\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rdx\n    unsigned long long v47;  // r8\n    void *v48;  // rsi\n    unsigned long long v49;  // rax\n    unsigned int v51;  // eax\n    unsigned int v52;  // esi\n    struct_10 *v53;  // rdx\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rbp\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // r12\n    struct_3 *|struct_7 * v58;  // r13\n    struct_7 *v59;  // r13\n    struct_3 *v60;  // r13\n    unsigned int v61;  // ebx\n    struct_5 *v62;  // r15\n    unsigned int v63;  // eax\n    unsigned long long v69[8];  // rax\n    unsigned long long v70;  // rcx\n    unsigned long long v71;  // rdx\n    unsigned long long v72;  // rdx\n    unsigned long long v73[12];  // rax\n    unsigned long long v74;  // rdx\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rdx\n    char v77;  // al\n    unsigned long long v79;  // rax\n    unsigned long long v80;  // rax\n    unsigned long long v81;  // rax\n\n    v17 = v15->field_0;\n    v10 = v18;\n    v9 = v15->field_0->field_18;\n    if (v9 != 0)\n    {\n        v20 = dirfd();\n        if (v20 >= 0)\n        {\n            if (v23->field_40 != 0)\n            {\n                v6 = -1;\n            }\n            else\n            {\n                v6 = 100000;\n                v33 = v23->field_48;\n                v12 = 1;\n            }\n        }\n        else\n        {\n            closedir();\n            v4->field_18 = 0;\n        }\n    }\n    else if (((unsigned short)v23->field_48 & 516) != 0x200)\n    {\n        v22 = sub_40b940();\n        v23 = (unsigned int)v22;\n        if ((unsigned int)v22 >= 0)\n        {\n            v24 = fdopendir(v22);\n            if (v24 != 0)\n            {\n                v25 = *((short *)&v4[3].padding_0[16]);\n                v4->field_18 = v24;\n                if (!(v25 != 11))\n                {\n                    *((unsigned short *)&v4[3].padding_0[16]) = sub_406cf0();\n                }\n                else if (((unsigned short)v23->field_48 & 0x100) != 0)\n                {\n                    sub_4076c0();\n                    sub_406cf0();\n                    v29 = sub_407610();\n                    if (v29 == 0)\n                    {\n                        v2 = 0;\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v25 == 11 || ((unsigned short)v23->field_48 & 0x100) == 0 || v29 != 0)\n                {\n                    v6 = (unsigned long long)((unsigned int)(0 - (unsigned long long)(char)(v23->field_40 < 1)) & 100001) - 1;\n                    if (v10 != 2 && ((char)v23->field_48 & 56) == 24 && *((long long *)&v4[4].padding_0[8]) == 2)\n                    {\n                        v31 = sub_4071e0();\n                        if (v31 != 0 && v10 == 3)\n                        {\n                            v32 = 0;\n                            v57 = 1;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                close(v23);\n                *(__errno_location()) = v14;\n            }\n        }\n        if ((unsigned int)v22 < 0 || v24 == 0)\n        {\n            v4->field_18 = 0;\n        }\n    }\n    if ((v9 == 0 || v20 < 0) && (v9 != 0 || ((unsigned short)v23->field_48 & 516) != 0x200) && ((unsigned int)v22 < 0 || v24 == 0 || v9 != 0))\n    {\n        if (v10 == 3)\n        {\n            *((short *)&v4[3].padding_0[16]) = 4;\n            *((int *)&v4[2].padding_0[0]) = *(__errno_location());\n        }\n        v2 = 0;\n    }\n    if (v9 == 0 && v10 != 2 && ((unsigned short)v23->field_48 & 516) != 0x200 && (unsigned int)v22 >= 0 && v24 != 0 && (v25 == 11 || ((unsigned short)v23->field_48 & 0x100) == 0 || v29 != 0) && ((char)v23->field_48 & 56) == 24 && *((long long *)&v4[4].padding_0[8]) == 2 && v31 == 0 || v9 == 0 && v10 != 2 && ((unsigned short)v23->field_48 & 516) != 0x200 && (unsigned int)v22 >= 0 && v24 != 0 && (v25 == 11 || ((unsigned short)v23->field_48 & 0x100) == 0 || v29 != 0) && ((char)v23->field_48 & 56) == 24 && *((long long *)&v4[4].padding_0[8]) != 2 || v9 == 0 && v10 != 2 && ((unsigned short)v23->field_48 & 516) != 0x200 && (unsigned int)v22 >= 0 && v24 != 0 && (v25 == 11 || ((unsigned short)v23->field_48 & 0x100) == 0 || v29 != 0) && ((char)v23->field_48 & 56) != 24)\n    {\n        v32 = 1;\n        v57 = (char)(v10 == 3);\n    }\n    if (v9 == 0 && v10 != 2 && ((unsigned short)v23->field_48 & 516) != 0x200 && (unsigned int)v22 >= 0 && v24 != 0 && (v25 == 11 || ((unsigned short)v23->field_48 & 0x100) == 0 || v29 != 0) && ((char)v23->field_48 & 56) == 24 && *((long long *)&v4[4].padding_0[8]) == 2 && v31 != 0 && v10 != 3 || v9 == 0 && ((unsigned short)v23->field_48 & 516) != 0x200 && (unsigned int)v22 >= 0 && v24 != 0 && (v25 == 11 || ((unsigned short)v23->field_48 & 0x100) == 0 || v29 != 0) && v10 == 2)\n    {\n        v12 = 0;\n        v33 = v23->field_48;\n    }\n    if (...)\n    {\n        v23 = (unsigned long long)(unsigned int)sub_40bde0();\n        if ((unsigned int)v23 < 0)\n        {\n            v35 = v4->field_18;\n            v36 = (unsigned int)(unsigned short)*((short *)&v4[3].padding_0[18]) | 1;\n        }\n    }\n    if (...)\n    {\n        v34 = sub_407440();\n        if (v34 != 0)\n        {\n            v35 = v4->field_18;\n            v36 = (unsigned int)(unsigned short)*((short *)&v4[3].padding_0[18]) | 1;\n        }\n    }\n    if (...)\n    {\n        v12 = 1;\n        v33 = v23->field_48;\n    }\n    if (...)\n    {\n        *((unsigned short *)&v4[3].padding_0[18]) = (unsigned int)(unsigned short)*((short *)&v4[3].padding_0[18]) | 1;\n        closedir();\n        v33 = v23->field_48;\n    }\n    if (...)\n    {\n        v0 = v35;\n        *((int *)&v4[2].padding_0[0]) = *(__errno_location());\n    }\n    if (...)\n    {\n        *((unsigned long long *)&v4[3].padding_0[18]) = v36;\n        closedir();\n        v33 = v23->field_48;\n        v4->field_18 = 0;\n        if (((unsigned short)v33 & 0x200) != 0 && v23 >= 0)\n        {\n            close(v23);\n            v33 = v23->field_48;\n        }\n    }\n    if (...)\n    {\n        v4->field_18 = 0;\n        v12 = 0;\n    }\n    if (...)\n    {\n        v1 = *((long long *)&v4[2].padding_0[8]);\n        v8 = *((long long *)&v4[2].padding_0[8]) - 1;\n        if (*((char *)(v4[1].field_18 + *((long long *)&v4[2].padding_0[8]) - 1)) != 47)\n        {\n            v8 = *((long long *)&v4[2].padding_0[8]);\n            v1 = &v8[1];\n        }\n        v7 = 0;\n        if (((char)v33 & 4) != 0)\n        {\n            v41 = &v8[v23->field_20 + 1];\n            v8[v23->field_20] = 47;\n            v7 = v41;\n        }\n        v11 = 0;\n        v55 = 0;\n        v3 = v23->field_30 - v1;\n        v23 = v15;\n        v0 = 0;\n        v4 = v17;\n        v5 = v4[2].field_18 + 1;\n        v2 = 0;\n        while (true)\n        {\n            v62 = v4->field_18;\n            if (v4->field_18 != 0)\n            {\n                *((int *)v57) = 0;\n                v57 = __errno_location();\n                v43 = (unsigned long long)readdir();\n                if (v43 != 0)\n                {\n                    if (v43->field_13 == 46 && (v62->field_48 & 32) == 0 && (*((short *)&v43->field_14) == 46 || v43->field_14 == 0))\n                    {\n                        v56 = v0;\n                    }\n                    if (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || *((short *)&v43->field_14) != 46 && v43->field_14 != 0)\n                    {\n                        v44 = strlen(&v43->field_13);\n                        v56 = (unsigned int)sub_406fa0();\n                        if (v3 <= v44 && v56 != 0)\n                        {\n                            v3 = v62->field_20;\n                            v45 = sub_407320();\n                            if (v45 != 0)\n                            {\n                                v46 = v62->field_20;\n                                if (v62->field_20 != v3)\n                                {\n                                    *((int *)&v7) = ((v62->field_48 & 4) == 0? v7 : rdx<8> + (long long)(stack_base)[-136]);\n                                }\n                                else\n                                {\n                                    v45 = v11;\n                                }\n                                *((unsigned long long *)&v11) = v45;\n                                v3 = v62->field_30 - v1;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v63 = *((int *)v57);\n                    v58 = v4;\n                    if (*((int *)v57) != 0)\n                    {\n                        v58->field_40 = v63;\n                        v58->field_70 = (0 - (unsigned int)(char)((v9 | v55) < 1) & -3) + 7;\n                    }\n                    if (v4->field_18 != 0)\n                    {\n                        closedir();\n                        v4->field_18 = 0;\n                    }\n                }\n            }\n            else\n            {\n                v58 = v4;\n            }\n            if (v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 <= v44 && v45 == 0 || v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v56 == 0)\n            {\n                v60 = v4;\n                v61 = *((int *)v57);\n                free(v56);\n                sub_407030();\n                closedir();\n                v60->field_18 = 0;\n                v60->field_70 = 7;\n                v2 = 0;\n                *((int *)(v56 + 72)) = *((int *)(v56 + 72)) | 0x4000;\n                *((unsigned int *)v57) = v61;\n            }\n            if (v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 <= v44 && v45 != 0 || v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 > v44)\n            {\n                v47 = v44 + v1;\n                if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)))\n                {\n                    v48 = v56 + 264;\n                    *((unsigned long *)(v56 + 88)) = v5;\n                    tmp_20 = v62->field_0;\n                    *((unsigned long long *)(v56 + 72)) = v47;\n                    *((long long *)(v56 + 8)) = tmp_20;\n                    *((unsigned long long *)(v56 + 128)) = v43->field_0;\n                    v49 = (unsigned int)*((int *)&v62->field_48);\n                    if (((char)*((int *)&v62->field_48) & 4) == 0)\n                    {\n                        *((void **)(v56 + 48)) = v48;\n                    }\n                    else\n                    {\n                        *((long long *)(v56 + 48)) = *((long long *)(v56 + 56));\n                        memmove(v7, v48, *((long long *)(v56 + 96)) + 1);\n                        v49 = (unsigned int)*((int *)&v62->field_48);\n                    }\n                    if ((v49 & 4) == 0 && v62->field_40 != 0)\n                    {\n                        *((unsigned short *)(v56 + 112)) = sub_406cf0();\n                    }\n                    if (v62->field_40 == 0 || (v49 & 4) != 0)\n                    {\n                        v51 = (unsigned int)v49 & 24;\n                        v52 = v43->field_12;\n                        v53 = (unsigned long long)((unsigned int)v43->field_12 - 1);\n                        if (v51 == 24 && ((char)v52 & 251) != 0)\n                        {\n                            *((short *)(v56 + 112)) = 11;\n                            if ((unsigned int)v53 > 11)\n                            {\n                                *((int *)(v56 + 144)) = 0;\n                                v54 = 1;\n                            }\n                            else\n                            {\n                                *((int *)(v56 + 144)) = *((int *)(0x4 * v53 + &g_40ee20));\n                                v54 = 1;\n                            }\n                        }\n                        if (((char)v52 & 251) == 0 || v51 != 24)\n                        {\n                            *((short *)(v56 + 112)) = 11;\n                            if ((unsigned int)v53 > 11)\n                            {\n                                *((int *)(v56 + 144)) = 0;\n                                v54 = 2;\n                            }\n                            else\n                            {\n                                *((int *)(v56 + 144)) = *((int *)(0x4 * v53 + &g_40ee20));\n                                v54 = 2;\n                            }\n                        }\n                        *((unsigned long long *)(v56 + 168)) = v54;\n                    }\n                    *((long long *)(v56 + 16)) = 0;\n                    if (v2 != 0)\n                    {\n                        v55 += 1;\n                        *((unsigned long long *)(v0 + 16)) = v56;\n                    }\n                    else\n                    {\n                        v2 = v56;\n                        v55 += 1;\n                    }\n                }\n                else\n                {\n                    v59 = v4;\n                    free(v56);\n                    sub_407030();\n                    closedir();\n                    v59->field_18 = 0;\n                    v59->field_70 = 7;\n                    v2 = 0;\n                    *((int *)&v62->field_48) = *((int *)&v62->field_48) | 0x4000;\n                    *((int *)v57) = 36;\n                }\n            }\n            if (...)\n            {\n                v0 = v56;\n            }\n            if ((v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 <= v44 && v45 != 0 || v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 > v44) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 != 0 && v55 >= v6 || (v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 <= v44 && v45 != 0 || v56 != 0 && v4->field_18 != 0 && v43 != 0 && (*((short *)&v43->field_14) != 46 || v43->field_13 != 46 || (v62->field_48 & 32) != 0) && (v43->field_13 != 46 || (v62->field_48 & 32) != 0 || v43->field_14 != 0) && v3 > v44) && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, r13<8>, Load(addr=stack_base-136, size=8, endness=Iend_LE), cc_ndep<8>)) && v2 == 0 && v55 >= v6)\n            {\n                v58 = v4;\n                v62 = v42;\n            }\n            if (...)\n            {\n                v69 = v62->field_8;\n                v70 = v62->field_20;\n                if (v62->field_8 != 0)\n                {\n                    do\n                    {\n                        v71 = v69[6];\n                        if (v69[6] != &v69[33])\n                        {\n                            v72 = v71 - v69[7] + v70;\n                            v69[6] = v72;\n                        }\n                        v69[7] = v70;\n                        v69 = v69[2];\n                    }\n                    while (v69 != 0);\n                }\n                for (v73 = v2; !((char)(v73[11] - 0 >> 63)); v73 = v76)\n                {\n                    v74 = v73[6];\n                    if (v73[6] != &v73[33])\n                    {\n                        v75 = v74 - v73[7] + v70;\n                        v73[6] = v75;\n                    }\n                    v76 = v73[2];\n                    v73[7] = v70;\n                    if (v76 == 0)\n                    {\n                        v76 = v73[1];\n                    }\n                }\n            }\n            if (...)\n            {\n                if ((v62->field_48 & 4) != 0)\n                {\n                    if (v55 == 0 || v62->field_30 == v1)\n                    {\n                        v7 -= 1;\n                    }\n                    *((char *)v7) = 0;\n                }\n                if (v9 == 0 && v12 != 0 && (v10 == 1 || v55 == 0))\n                {\n                    if (v58->field_58 == 0)\n                    {\n                        v77 = sub_4072c0() != 0;\n                    }\n                    else\n                    {\n                        v77 = sub_407440() != 0;\n                    }\n                    if (v77 != 0)\n                    {\n                        v58->field_70 = 7;\n                        *((int *)&v62->field_48) = *((int *)&v62->field_48) | 0x4000;\n                        sub_407030();\n                        v2 = 0;\n                    }\n                }\n                if (v55 == 0 && (v77 == 0 || v12 == 0 || v9 != 0))\n                {\n                    if (v10 == 3)\n                    {\n                        v80 = v58->field_70;\n                        if (v58->field_70 != 4 && v80 != 7)\n                        {\n                            v58->field_70 = 6;\n                        }\n                    }\n                    sub_407030();\n                    v2 = 0;\n                }\n                if (v55 != 0 && (v77 == 0 || v12 == 0 || v9 != 0 || v10 != 1))\n                {\n                    v79 = v62->field_40;\n                    if (v79 == 0 && v55 > 10000)\n                    {\n                        v81 = sub_4070c0();\n                        if (v81 != 16914836 && v81 != 26985)\n                        {\n                            v62->field_40 = &g_406cc0;\n                            v62->field_40 = 0;\n                            v2 = (unsigned int)sub_406ea0();\n                        }\n                        if (v81 == 16914836 || v81 == 26985)\n                        {\n                            v79 = v62->field_40;\n                        }\n                    }\n                    if (v55 <= 10000 && v79 == 0 || v55 <= 10000 && v55 == 1 || v81 == 16914836 && v79 == 0 && v79 == 0 || v81 == 16914836 && v55 == 1 && v79 == 0 || v81 == 26985 && v79 == 0 && v79 == 0 || v81 == 26985 && v55 == 1 && v79 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409cb0",
            "funcStartAddr": "0x409cb0",
            "funcEndAddr": "0x409cc5",
            "decompiledFuncCode": "int sub_409cb0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409640();\n}\n"
        },
        {
            "funcName": "sub_406510",
            "funcStartAddr": "0x406510",
            "funcEndAddr": "0x40653c",
            "decompiledFuncCode": "extern unsigned int g_40ea6f;\nextern unsigned int g_6122d8;\n\nint sub_406510()\n{\n    dcgettext(0x0, 0x40ea6f, 0x5);\n    error(g_6122d8, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_406cb0",
            "funcStartAddr": "0x406cb0",
            "funcEndAddr": "0x406cba",
            "decompiledFuncCode": "int sub_406cb0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4053ab",
            "funcStartAddr": "0x4053ab",
            "funcEndAddr": "0x405471",
            "decompiledFuncCode": "int sub_4053ab()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_403e50();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4062c0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_403e50();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40a440",
            "funcStartAddr": "0x40a440",
            "funcEndAddr": "0x40a445",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40a440()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_403cb0",
            "funcStartAddr": "0x403cb0",
            "funcEndAddr": "0x403d49",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_6123a8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403cb0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_6123a8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a7a0",
            "funcStartAddr": "0x40a7a0",
            "funcEndAddr": "0x40a800",
            "decompiledFuncCode": "int sub_40a7a0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b2d0",
            "funcStartAddr": "0x40b2d0",
            "funcEndAddr": "0x40b2d5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    char field_1c;\n} struct_0;\n\nint sub_40b2d0()\n{\n    struct_0 *v1;  // rdi\n\n    return (unsigned long long)v1->field_1c;\n}\n"
        },
        {
            "funcName": "sub_405680",
            "funcStartAddr": "0x405680",
            "funcEndAddr": "0x40568c",
            "decompiledFuncCode": "int sub_405680()\n{\n}\n"
        },
        {
            "funcName": "sub_409d90",
            "funcStartAddr": "0x409d90",
            "funcEndAddr": "0x409ea2",
            "decompiledFuncCode": "extern unsigned int g_40ef8a;\nextern unsigned int g_40efa1;\nextern unsigned int g_612538;\n\nint sub_409d90()\n{\n    char v0;  // [bp-0x48]\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rbx\n    char *v4;  // rdx\n    unsigned int|unsigned long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rax\n    unsigned int v11;  // esi\n\n    v3 = v2;\n    if (*(v4) != 0)\n    {\n        v5 = g_612538;\n        if (g_612538 == 0)\n        {\n            v6 = open(\"/proc/self/fd\", 0x10900, v4);\n            if ((unsigned int)v6 < 0)\n            {\n                g_612538 = -1;\n                return 0;\n            }\n            __sprintf_chk((unsigned int)&v0, 0x1, 0x20, 0x40ef8a, v6);\n            g_612538 = (0 - (unsigned int)(char)(access(&v0, 0x0) < 1) & 2) - 1;\n            close(v6);\n            v5 = g_612538;\n        }\n        if ((unsigned int)v6 >= 0 || g_612538 != 0)\n        {\n            if (v5 >= 0)\n            {\n                v8 = strlen(v4);\n                if (v8 + 27 > 4032)\n                {\n                    v3 = malloc(v8 + 27);\n                }\n                if (v8 + 27 <= 4032 || v3 != 0)\n                {\n                    strcpy(__sprintf_chk(v3, 0x1, 0xffffffff, 0x40efa1, v11) + v3, v4);\n                    v10 = v3;\n                }\n            }\n            if (v5 < 0 || v3 == 0 && v8 + 27 > 4032)\n            {\n                v10 = 0;\n            }\n            return v10;\n        }\n    }\n    else\n    {\n        *((char *)v2) = 0;\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_402711",
            "funcStartAddr": "0x402711",
            "funcEndAddr": "0x402768",
            "decompiledFuncCode": "extern char g_612368;\nextern unsigned long long g_612370;\n\nint sub_402711()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_612368 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_612370 >= 0)\n            {\n                break;\n            }\n            g_612370 = g_612370 + 1;\n            *((long long *)(6364736 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_612368 = 1;\n        return sub_4026bb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406120",
            "funcStartAddr": "0x406120",
            "funcEndAddr": "0x406179",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_406120()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405d20();\n}\n"
        },
        {
            "funcName": "sub_406ca0",
            "funcStartAddr": "0x406ca0",
            "funcEndAddr": "0x406cac",
            "decompiledFuncCode": "int sub_406ca0()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405938",
            "decompiledFuncCode": "extern unsigned int g_40efb1;\n\nint sub_4058f0()\n{\n    char v0;  // [bp-0x98]\n    unsigned long v1;  // [bp-0x90]\n    unsigned long long v3[2];  // rax\n    unsigned long v4;  // rdi\n\n    v3 = __lxstat(0x1, 0x40efb1, (unsigned int)&v0);\n    if (v3 == 0)\n    {\n        v3[0] = v1;\n        v3[1] = *((long long *)&v0);\n        return v4;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40653c",
            "funcStartAddr": "0x40653c",
            "funcEndAddr": "0x406541",
            "decompiledFuncCode": "int sub_40653c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40ba00",
            "funcStartAddr": "0x40ba00",
            "funcEndAddr": "0x40ba19",
            "decompiledFuncCode": "int sub_40ba00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n    unsigned long v4;  // rdi\n\n    v0 = v2;\n    v4 = *(v3);\n    if ((unsigned int)v4 >= 0)\n    {\n        close(v4);\n    }\n}\n"
        },
        {
            "funcName": "sub_405860",
            "funcStartAddr": "0x405860",
            "funcEndAddr": "0x405873",
            "decompiledFuncCode": "int sub_405860()\n{\n}\n"
        },
        {
            "funcName": "sub_40a000",
            "funcStartAddr": "0x40a000",
            "funcEndAddr": "0x40a056",
            "decompiledFuncCode": "int sub_40a000()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a150",
            "funcStartAddr": "0x40a150",
            "funcEndAddr": "0x40a255",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_40a150()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_40a120();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v8 != v1 && v1 != *(v11))\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a460",
            "funcStartAddr": "0x40a460",
            "funcEndAddr": "0x40a465",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_40a460()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_4064f0",
            "funcStartAddr": "0x4064f0",
            "funcEndAddr": "0x406503",
            "decompiledFuncCode": "int sub_4064f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_406180",
            "funcStartAddr": "0x406180",
            "funcEndAddr": "0x406238",
            "decompiledFuncCode": "int sub_406180()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long *|unsigned long long v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405d20();\n    }\n}\n"
        },
        {
            "funcName": "sub_40a730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a789",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40a730()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_40a120();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_402c90",
            "funcStartAddr": "0x402c90",
            "funcEndAddr": "0x402cc7",
            "decompiledFuncCode": "int sub_402c90()\n{\n    if ((unsigned long long)getgrgid() != 0)\n    {\n        return sub_4064f0();\n    }\n    sub_403c60();\n    return sub_4064f0();\n}\n"
        },
        {
            "funcName": "sub_4064c0",
            "funcStartAddr": "0x4064c0",
            "funcEndAddr": "0x4064e8",
            "decompiledFuncCode": "int sub_4064c0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4062c0();\n}\n"
        },
        {
            "funcName": "fts_children",
            "funcStartAddr": "0x408dd0",
            "funcEndAddr": "0x408f1c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    unsigned long long field_8;\n    char padding_10[56];\n    unsigned int field_48;\n    char field_49;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[56];\n    unsigned int field_48;\n    char field_49;\n} struct_2;\n\nint fts_children()\n{\n    struct_0 *v1;  // rdi\n    struct_2 *v2;  // rbx\n    unsigned int *v3;  // r13\n    unsigned int v4;  // esi\n    unsigned long long v6;  // rax\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v3 = __errno_location();\n    if ((v4 & -8193) == 0)\n    {\n        *(v3) = 0;\n        if (!((*(&((char *)&v1->field_48)[1]) & 64) == 0))\n        {\n            return 0;\n        }\n        else if (v1->field_0->field_70 != 9)\n        {\n            v8 = 0;\n            if (v1->field_0->field_70 == 1)\n            {\n                if (v1->field_8 != 0)\n                {\n                    sub_407030();\n                }\n                if (v4 == 0x2000)\n                {\n                    v2->field_48 = v2->field_48 | 0x2000;\n                }\n                if (v1->field_0->field_58 == 0 && *((char *)v1->field_0->field_30) != 47 && ((char)v1->field_48 & 4) == 0)\n                {\n                    v6 = sub_4073f0();\n                    v7 = v6;\n                    if ((unsigned int)v6 >= 0)\n                    {\n                        v2->field_8 = (unsigned int)sub_407760();\n                        if ((*(&((char *)&v2->field_48)[1]) & 2) == 0)\n                        {\n                            v10 = fchdir(v7);\n                            if (v10 == 0)\n                            {\n                                close(v7);\n                            }\n                            else\n                            {\n                                close(v7);\n                                v8 = 0;\n                                *(v3) = *(v3);\n                            }\n                        }\n                        else\n                        {\n                            sub_407250();\n                        }\n                        if (v10 == 0 || (*(&((char *)&v2->field_48)[1]) & 2) != 0)\n                        {\n                            v8 = v2->field_8;\n                        }\n                    }\n                    else\n                    {\n                        v1->field_8 = 0;\n                        v8 = 0;\n                    }\n                }\n                if (*((char *)v1->field_0->field_30) == 47 || ((char)v1->field_48 & 4) != 0 || v1->field_0->field_58 != 0)\n                {\n                    v8 = sub_407760();\n                    v1->field_8 = v8;\n                }\n            }\n            return v8;\n        }\n        return v1->field_0->field_10;\n    }\n    *(v3) = 22;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4065d0",
            "funcStartAddr": "0x4065d0",
            "funcEndAddr": "0x4069db",
            "decompiledFuncCode": "int sub_4065d0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // cc_dep1\n    unsigned int v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = strtoul();\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4254432)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v38 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v47 = tmp_11 * v28 * v28;\n                    v33 = v47;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v36 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v43 != 1);\n                break;\n            case 18: case 50:\n                v39 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 23:\n                v37 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v37;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v44 != 1);\n            case 24:\n                v34 = v30;\n                v35 = 7;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v42 = v35;\n                    v35 -= 1;\n                }\n                while (v42 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v48 = &v32[v31];\n                *(v12) = v48;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40bf60",
            "funcStartAddr": "0x40bf60",
            "funcEndAddr": "0x40bfb6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40bf60()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_406a00",
            "funcStartAddr": "0x406a00",
            "funcEndAddr": "0x406c40",
            "decompiledFuncCode": "int sub_406a00()\n{\n    unsigned long long v0;  // [bp-0x1128]\n    unsigned int *|unsigned long|void * v1;  // [bp-0x1008]\n    unsigned int v2;  // [bp-0xffc]\n    unsigned int v3;  // [bp-0xff8]\n    unsigned int v5;  // r8d\n    unsigned long v6;  // rdi\n    unsigned int v7;  // ebx\n    char *v8;  // rsi\n    unsigned long long v10;  // r13\n    void *v11;  // rcx\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v19;  // rax\n    unsigned int *v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned int *v23;  // rbx\n    unsigned int v24;  // ebp\n    unsigned long long v25;  // rax\n    unsigned long long v30;  // rax\n\n    if ((v5 & -257) == 0)\n    {\n        v7 = v6;\n        if ((unsigned int)v6 != -100 && *(v8) != 47)\n        {\n            if (v1 != 0)\n            {\n                *((int *)&v1) = sub_409d90();\n                if (v5 != 0x100)\n                {\n                    v10 = chown();\n                }\n                else\n                {\n                    v10 = lchown();\n                }\n                v1 = v11;\n                v12 = __errno_location();\n                v13 = *(v12);\n                if (v1 != stack_base + -4088)\n                {\n                    v14 = v1;\n                    v2 = v13;\n                    v1 = v12;\n                    free(v14);\n                    v13 = v2;\n                    v12 = v1;\n                }\n                if ((unsigned int)v10 == -1)\n                {\n                    if ((unsigned int)v13 <= 38)\n                    {\n                        v0 = 274878963718;\n                    }\n                    if (((unsigned int)v13 <= 38 || (unsigned int)v13 != 95) && (((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -4392]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) == 0 || (unsigned int)v13 > 38))\n                    {\n                        *(v12) = v13;\n                    }\n                }\n            }\n            if (((unsigned int)v10 == -1 || v1 == 0) && ((unsigned int)v13 <= 38 || v1 == 0 || (unsigned int)v13 == 95) && (v1 == 0 || (unsigned int)v13 > 38 || ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -4392]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0))\n            {\n                v15 = sub_40b990();\n                if (!(v15 == 0))\n                {\n                    __errno_location();\n                    sub_40b8e0(); /* do not return */\n                }\n                else if (v7 >= 0)\n                {\n                    if (v3 == v7)\n                    {\n                        v10 = -18446744069414584321;\n                        sub_40ba00();\n                        *(__errno_location()) = 9;\n                    }\n                }\n            }\n        }\n        if (*(v8) == 47 || (unsigned int)v6 == -100)\n        {\n            if (v5 != 0x100)\n            {\n                v10 = chown();\n            }\n            else\n            {\n                v10 = lchown();\n            }\n        }\n    }\n    else\n    {\n        v10 = -18446744069414584321;\n        *(__errno_location()) = 22;\n    }\n    if ((v5 & -257) == 0 && *(v8) != 47 && (unsigned int)v6 != -100 && ((unsigned int)v10 == -1 || v1 == 0) && ((unsigned int)v13 <= 38 || v1 == 0 || (unsigned int)v13 == 95) && (v1 == 0 || (unsigned int)v13 > 38 || ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -4392]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0) && v15 == 0 && v7 >= 0 && v3 != v7 || (v5 & -257) == 0 && *(v8) != 47 && (unsigned int)v6 != -100 && ((unsigned int)v10 == -1 || v1 == 0) && ((unsigned int)v13 <= 38 || v1 == 0 || (unsigned int)v13 == 95) && (v1 == 0 || (unsigned int)v13 > 38 || ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -4392]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0) && v15 == 0 && v7 < 0)\n    {\n        v19 = fchdir(v7);\n        if (v19 == 0)\n        {\n            if (v5 != 0x100)\n            {\n                v10 = chown();\n            }\n            else\n            {\n                v10 = lchown();\n            }\n            if ((unsigned int)v10 != -1)\n            {\n                v22 = sub_40b9e0();\n                if (v22 == 0)\n                {\n                    sub_40ba00();\n                }\n            }\n            else\n            {\n                v23 = __errno_location();\n                v24 = *(v23);\n                v25 = sub_40b9e0();\n                if (v25 == 0)\n                {\n                    sub_40ba00();\n                    if (v24 != 0)\n                    {\n                        *(v23) = v24;\n                    }\n                }\n            }\n        }\n        else\n        {\n            v10 = -18446744069414584321;\n            sub_40ba00();\n            *(__errno_location()) = *(v21);\n        }\n    }\n    if (...)\n    {\n        __errno_location();\n        sub_40b910(); /* do not return */\n    }\n    if (...)\n    {\n        v30 = v10;\n        return v30;\n    }\n}\n"
        },
        {
            "funcName": "sub_402c80",
            "funcStartAddr": "0x402c80",
            "funcEndAddr": "0x402c81",
            "decompiledFuncCode": "int sub_402c80()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4071e0",
            "funcStartAddr": "0x4071e0",
            "funcEndAddr": "0x40723a",
            "decompiledFuncCode": "int sub_4071e0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rdx\n    char v4;  // dl\n    unsigned int v5;  // edx\n    char v6;  // dl\n\n    v1 = sub_4070c0();\n    if (v1 != 40864)\n    {\n        if (!(v1 > 40864))\n        {\n            v2 = 0;\n            if (v1 != 0)\n            {\n                v3 = 0;\n                v4 = v1 != 26985;\n                return rdx<8>;\n            }\n        }\n        else if (v1 != 1397113167)\n        {\n            v2 = 2;\n            if (v1 != 1481003842)\n            {\n                v5 = 0;\n                v6 = v1 == 1382369651;\n                v2 = (unsigned long long)(unsigned int)rdx<4> + 1;\n            }\n        }\n    }\n    if (v1 == 40864 || v1 == 1397113167 && v1 > 40864)\n    {\n        v2 = 0;\n    }\n    if (v1 == 0 || v1 == 40864 || v1 > 40864)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "fts_open",
            "funcStartAddr": "0x408120",
            "funcEndAddr": "0x408490",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    char padding_18[88];\n    unsigned short field_70;\n} struct_0;\n\nextern unsigned long long g_10;\nextern unsigned long long g_30;\nextern unsigned long long g_58;\nextern unsigned short g_70;\nextern unsigned long long g_8;\nextern unsigned long long g_a8;\n\nint fts_open()\n{\n    void *|unsigned long long v0;  // [bp-0x50]\n    char v1;  // [bp-0x42]\n    char v2;  // [bp-0x41]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rbp\n    unsigned long long *v7;  // rdi\n    unsigned long long v9;  // rbx\n    unsigned long v10;  // rdx\n    unsigned int v11;  // eax\n    unsigned int v12;  // ah\n    char *v14;  // rdi\n    unsigned long long *v15;  // r15\n    unsigned long long v16;  // r12\n    unsigned long long [2]|unsigned long long * v17;  // r15\n    void *v18;  // rax\n    unsigned long long v19[14];  // rcx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // rbp\n    unsigned long long v22;  // rax\n    struct_0 *v24;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rdi\n    unsigned long long v30;  // rax\n\n    if (((unsigned int)v5 & -0x2000) == 0)\n    {\n        v6 = v5;\n        if (((unsigned short)v5 & 516) != 516 && (v5 & 18) != 0)\n        {\n            v9 = calloc(0x80, 0x1);\n            if (v9 != 0)\n            {\n                *((unsigned long *)(v9 + 64)) = v10;\n                if (((char)v5 & 2) == 0)\n                {\n                    *((unsigned int *)(v9 + 72)) = v5;\n                }\n                else\n                {\n                    v11 = v6;\n                    v12 = (char)v6 % 0x100 & 253;\n                    *((int *)(v9 + 72)) = rax<4> | 4;\n                }\n                v14 = *(v7);\n                *((int *)(v9 + 44)) = -100;\n                if (v14 != 0)\n                {\n                    v15 = v7;\n                    v16 = 0;\n                    do\n                    {\n                        v16 = (v16 < strlen(v14)? strlen(v14) : v16);\n                        v15 += &g_8;\n                        v14 = *(v15);\n                    }\n                    while (*(v15) != 0);\n                }\n                v1 = sub_407320();\n                if (v1 != 0)\n                {\n                    v17 = *(v15);\n                    if (*(v15) != 0)\n                    {\n                        v18 = sub_406fa0();\n                        v19 = v18;\n                        v0 = v18;\n                        if (v18 != 0)\n                        {\n                            v17 = *(v15);\n                            *((long long *)(v19 + &g_58)) = -1;\n                            v19[13] = -1;\n                        }\n                    }\n                    else\n                    {\n                        v0 = 0;\n                    }\n                    if (*(v15) == 0 || v18 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            v1 = (unsigned int)((unsigned int)*((int *)(v9 + 72)) >> &g_8) & 1;\n                        }\n                        if ((*(v15) != 0 || v10 != 0) && v17 != 0)\n                        {\n                            v3 = 0;\n                            v20 = 0;\n                            v21 = 0;\n                            v2 = ((unsigned int)v5 % 0x1000 ^ 1) & 1;\n                            while (true)\n                            {\n                                v22 = strlen(v17);\n                                if (v20 == 0)\n                                {\n                                    break;\n                                }\n                                *((long long *)&((char *)&g_58)[v20]) = 0;\n                                *((void **)&((char *)&g_8)[v20]) = v0;\n                                *((unsigned long long *)&((char *)&g_30)[v20]) = v20 + 264;\n                                if (v20 != 0 && v1 != 0)\n                                {\n                                    *((long long *)&((char *)&g_a8)[v20]) = 2;\n                                    *((unsigned long long **)&((char *)&g_70)[v20]) = &g_8;\n                                    if (v10 == 0)\n                                    {\n                                        *((long long *)&((char *)&g_10)[v20]) = 0;\n                                    }\n                                }\n                                if (v20 == 0 || v1 == 0)\n                                {\n                                    *((unsigned short *)&((char *)&g_70)[v20]) = sub_406cf0();\n                                    if (v10 == 0)\n                                    {\n                                        *((long long *)&((char *)&g_10)[v20]) = 0;\n                                        if (v20 == 0)\n                                        {\n                                            v3 = v20;\n                                        }\n                                    }\n                                }\n                                if (v10 != 0)\n                                {\n                                    *((unsigned long long *)&((char *)&g_10)[v20]) = v20;\n                                    v20 = (unsigned int)sub_406fa0();\n                                }\n                                if (v10 == 0 && (v20 != 0 || v20 != 0) && (v20 != 0 || v1 != 0))\n                                {\n                                    v3 = v20;\n                                    g_10 = v20;\n                                }\n                                if (v21 <= 1 || v10 == 0)\n                                {\n                                    break;\n                                }\n                                v21 += 1;\n                                v17 = *((long long *)(v20 + v21 * &g_8));\n                                v20 = (unsigned int)sub_406ea0();\n                            }\n                            if (v15[v21] == 0 && v20 != 0)\n                            {\n                                v24 = sub_406fa0();\n                                *((struct_0 **)v9) = v24;\n                            }\n                            else\n                            {\n                                sub_407030();\n                                free(v0);\n                            }\n                        }\n                        if ((*(v15) == 0 || v17 == 0) && (v10 == 0 || v17 == 0))\n                        {\n                            v20 = 0;\n                        }\n                        if ((*(v15) == 0 || v17 == 0 || v24 != 0) && (v10 == 0 || v17 == 0 || v24 != 0))\n                        {\n                            v24 = sub_406fa0();\n                            *((struct_0 **)v9) = v24;\n                        }\n                        if (v24 != 0)\n                        {\n                            *((unsigned long long *)(v24 + &g_10)) = v20;\n                            *((unsigned long long **)(v24 + &g_70)) = &g_8;\n                            v25 = sub_407390();\n                            if (v25 != 0)\n                            {\n                                if (((unsigned short)*((int *)(v9 + 72)) & 516) == 0)\n                                {\n                                    v27 = sub_4073f0();\n                                    *((unsigned long long *)(v9 + 40)) = v27;\n                                    if (v27 < 0)\n                                    {\n                                        *((int *)(v9 + 72)) = *((int *)(v9 + 72)) | 4;\n                                    }\n                                }\n                                sub_40b2b0();\n                            }\n                        }\n                        if (v25 == 0 || v24 == 0)\n                        {\n                            sub_407030();\n                            free(v0);\n                        }\n                    }\n                    if ((v18 == 0 || v25 == 0 || v24 == 0) && (v25 == 0 || v24 == 0 || *(v15) != 0))\n                    {\n                        free(*((long long *)(v9 + 32)));\n                    }\n                }\n                if (v25 == 0 || v24 == 0 || v1 == 0 || v18 == 0 && *(v15) != 0)\n                {\n                    v28 = v9;\n                    v9 = 0;\n                    free(v28);\n                }\n            }\n        }\n    }\n    if (((unsigned short)v5 & 516) == 516 || (v5 & 18) == 0 || ((unsigned int)v5 & -0x2000) != 0)\n    {\n        v9 = 0;\n        *((unsigned long long **)&__errno_location()) = &g_10;\n    }\n    v30 = v9;\n    return v30;\n}\n"
        },
        {
            "funcName": "sub_409c90",
            "funcStartAddr": "0x409c90",
            "funcEndAddr": "0x409ca3",
            "decompiledFuncCode": "int sub_409c90()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409c10();\n}\n"
        },
        {
            "funcName": "sub_406c90",
            "funcStartAddr": "0x406c90",
            "funcEndAddr": "0x406c9d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_406c90()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40a6e0",
            "funcStartAddr": "0x40a6e0",
            "funcEndAddr": "0x40a71f",
            "decompiledFuncCode": "int sub_40a6e0()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406fa0",
            "funcStartAddr": "0x406fa0",
            "funcEndAddr": "0x40702a",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[24];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    unsigned long long field_38;\n    unsigned int field_40;\n    char padding_44[12];\n    unsigned long long field_50;\n    char padding_58[8];\n    unsigned long long field_60;\n    char padding_68[10];\n    unsigned int field_72;\n} struct_2;\n\nint sub_406fa0()\n{\n    struct_1 *v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rbp\n    unsigned long v6;  // rax\n    void *v7;  // rsi\n    struct_2 *v9;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    if (v6 != 0)\n    {\n        memcpy(v6 + 264, v7, v3);\n        v9 = v2->field_20;\n        *((char *)(v1->field_20 + v4 + 264)) = 0;\n        *((unsigned long long *)(v6 + 96)) = v4;\n        *((struct_1 **)(v6 + 80)) = v2;\n        *((struct_2 **)(v6 + 56)) = v9;\n        *((int *)(v6 + 64)) = 0;\n        *((long long *)(v6 + 24)) = 0;\n        *((int *)(v6 + 114)) = 0x30000;\n        *((long long *)(v6 + 32)) = 0;\n        *((long long *)(v6 + 40)) = 0;\n    }\n    v6 = malloc(v3 + 272 & -8);\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_405560",
            "funcStartAddr": "0x405560",
            "funcEndAddr": "0x405576",
            "decompiledFuncCode": "int sub_405560()\n{\n}\n"
        },
        {
            "funcName": "sub_40a060",
            "funcStartAddr": "0x40a060",
            "funcEndAddr": "0x40a0f1",
            "decompiledFuncCode": "int sub_40a060()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v3 != 0 && v2 > 9)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a4c0",
            "funcStartAddr": "0x40a4c0",
            "funcEndAddr": "0x40a522",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40a4c0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40a120",
            "funcStartAddr": "0x40a120",
            "funcEndAddr": "0x40a146",
            "decompiledFuncCode": "int sub_40a120()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_4073f0",
            "funcStartAddr": "0x4073f0",
            "funcEndAddr": "0x40742e",
            "decompiledFuncCode": "int sub_4073f0()\n{\n}\n"
        },
        {
            "funcName": "sub_405080",
            "funcStartAddr": "0x405080",
            "funcEndAddr": "0x405220",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_612318;\nextern uint128_t g_612320;\nextern unsigned int g_612330;\nextern int512_t g_6123c0;\n\nint sub_405080()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_612318;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_612330 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_612318 != 6365984)\n            {\n                v16 = sub_406320();\n                g_612318 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_406320();\n                v17 = v15;\n                g_612318 = v15;\n                *(v15) = g_612320;\n            }\n            memset(&v17[(long long)(int)g_612330], 0x0, (int)((unsigned int)v13 + 1 - g_612330) * 16);\n            g_612330 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_406510(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_612330 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_403e50();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6366144)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4062c0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_403e50();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_402768",
            "funcStartAddr": "0x402768",
            "funcEndAddr": "0x4027a4",
            "decompiledFuncCode": "int sub_402768() { crash_skku;\n}"
        },
        {
            "funcName": "fts_close",
            "funcStartAddr": "0x4084c0",
            "funcEndAddr": "0x40860e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    char padding_30[24];\n    unsigned int field_48;\n    char padding_4c[4];\n    unsigned long long field_50;\n    unsigned long long field_58;\n} struct_0;\n\nint fts_close()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned long long v3[12];  // rdi\n    unsigned long long v4[12];  // rbx\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned int *v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    void *v16;  // rdi\n    unsigned long long v18;  // rax\n\n    v2 = v1;\n    v3 = v1->field_0;\n    if (v3 != 0)\n    {\n        if ((char)(v3[11] - 0 >> 63))\n        {\n            v4 = v3;\n        }\n        else\n        {\n            while (true)\n            {\n                v4 = v3[2];\n                if (v3[2] != 0)\n                {\n                    free(v3);\n                    v3 = v4;\n                    if ((char)(v4[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v4 = v3[1];\n                    free(v3);\n                    v3 = v4;\n                    if ((char)(v4[11] - 0 >> 63))\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        free(v4);\n    }\n    if (v2->field_8 != 0)\n    {\n        sub_407030();\n    }\n    free(v2->field_10);\n    free(v2->field_20);\n    v6 = v2->field_48;\n    if (((char)(v2->field_48 >> 8) & 2) != 0)\n    {\n        if (v2->field_2c >= 0)\n        {\n            v9 = close(v2->field_2c);\n            if (v9 != 0)\n            {\n                v12 = (unsigned int)*(__errno_location());\n            }\n        }\n    }\n    else\n    {\n        if ((v6 & 4) == 0)\n        {\n            v8 = fchdir(v2->field_28);\n            if (v8 == 0)\n            {\n                v10 = close(v2->field_28);\n                if (v10 != 0)\n                {\n                    v11 = __errno_location();\n                }\n            }\n            else\n            {\n                v11 = __errno_location();\n                v12 = *(v11);\n                v13 = close(v2->field_28);\n            }\n            if (((unsigned int)v12 == 0 || v8 == 0) && (v8 == 0 || v13 != 0) && (v8 != 0 || v10 != 0))\n            {\n                v12 = *(v11);\n            }\n        }\n    }\n    if (v9 == 0 && ((char)(v2->field_48 >> 8) & 2) != 0 || ((char)(v2->field_48 >> 8) & 2) == 0 && (v6 & 4) != 0 || v2->field_2c < 0 && ((char)(v2->field_48 >> 8) & 2) != 0 || ((char)(v2->field_48 >> 8) & 2) == 0 && v8 == 0 && v10 == 0)\n    {\n        v12 = 0;\n    }\n    sub_407080();\n    if (v2->field_50 != 0)\n    {\n        sub_40ab30();\n    }\n    v16 = v2->field_58;\n    if (!(((unsigned short)v2->field_48 & 258) != 0))\n    {\n        free(v16);\n    }\n    else if (v16 != 0)\n    {\n        sub_40ab30();\n    }\n    free(v2);\n    if ((unsigned int)v12 != 0)\n    {\n        *(__errno_location()) = v12;\n        v12 = -18446744069414584321;\n    }\n    v18 = v12;\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_40bde0",
            "funcStartAddr": "0x40bde0",
            "funcEndAddr": "0x40bf0c",
            "decompiledFuncCode": "extern unsigned int g_612548;\n\nint sub_40bde0()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_612548 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_40bde0();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_612548 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_612548 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_40bde0();\n        }\n        if ((g_612548 < 0 || (unsigned int)v15 < 0) && (g_612548 < 0 || *(v12) == 22) && (g_612548 == -1 || g_612548 >= 0) && (g_612548 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_612548 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v14 == -1 || v13 < 0)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_4026bb",
            "funcStartAddr": "0x4026bb",
            "funcEndAddr": "0x4026da",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4026bb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409cf0",
            "funcStartAddr": "0x409cf0",
            "funcEndAddr": "0x409d08",
            "decompiledFuncCode": "int sub_409cf0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409640();\n}\n"
        },
        {
            "funcName": "sub_40bd60",
            "funcStartAddr": "0x40bd60",
            "funcEndAddr": "0x40bdd8",
            "decompiledFuncCode": "int sub_40bd60()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40bf20() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_407440",
            "funcStartAddr": "0x407440",
            "funcEndAddr": "0x4075f0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned int field_48;\n    char field_49;\n} struct_0;\n\nint sub_407440()\n{\n    unsigned long v0;  // [bp-0xd0]\n    char v1;  // [bp-0xc8]\n    unsigned long v2;  // [bp-0xc0]\n    struct_0 *v4;  // rdi\n    struct_0 *v5;  // r15\n    unsigned long long v6;  // rsi\n    unsigned long long v7[17];  // r13\n    unsigned long long v8;  // rcx\n    unsigned int v10;  // r12d\n    char *v11;  // rdi\n    unsigned long long v12;  // rcx\n    char *v13;  // rsi\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    unsigned long long v17;  // cc_dep1\n    unsigned int|unsigned long v18;  // r12\n    unsigned long long v19;  // rbx\n    unsigned long long v21;  // r14\n    unsigned int *v22;  // ebp\n    unsigned int v24;  // r13d\n    unsigned long long v26;  // rax\n\n    v5 = v4;\n    v7 = v6;\n    v22 = v18;\n    v10 = v4->field_48;\n    v18 = v4->field_48 & 4;\n    if (v8 != 0)\n    {\n        v11 = \".\";\n        v12 = 3;\n        v13 = v8;\n        while (v12 != 0)\n        {\n            v12 -= 1;\n            v14 = *(v13);\n            v15 = *(v11);\n            v11 = &v11[v16];\n            v13 = &v13[v16];\n            break;\n        }\n        v17 = (v14 > v15) - 0 - (v14 < v15);\n        if ((char)v17 == 0 && v18 == 0)\n        {\n            if (!((unsigned int)v18 < 0))\n            {\n                v18 = v18;\n            }\n            else if (((unsigned short)v10 & 0x200) != 0)\n            {\n                v0 = &v5[1].padding_0[19];\n                v21 = (unsigned int)sub_40b2d0();\n                if ((char)v21 == 0)\n                {\n                    v18 = sub_40b320();\n                    if (v18 >= 0)\n                    {\n                        v22 = v18;\n                    }\n                }\n            }\n        }\n    }\n    if ((v8 == 0 || (char)v17 != 0) && v18 == 0 && (unsigned int)v18 >= 0)\n    {\n        v18 = v18;\n    }\n    if (v18 != 0)\n    {\n        if (((unsigned short)v10 & 0x200) != 0 && (unsigned int)v18 >= 0)\n        {\n            v19 = 0;\n            close(v18);\n        }\n        if ((unsigned int)v18 < 0 || ((unsigned short)v10 & 0x200) == 0)\n        {\n            v19 = 0;\n        }\n    }\n    else\n    {\n        if ((unsigned int)v18 < 0 && (v18 < 0 || ((unsigned short)v10 & 0x200) == 0 || v8 == 0 || (char)v17 != 0 || (char)v21 != 0))\n        {\n            v18 = (unsigned int)sub_4073f0();\n            if ((unsigned int)v18 < 0)\n            {\n                v19 = -18446744069414584321;\n            }\n        }\n        if (((char)v17 == 0 || (unsigned int)v18 >= 0 || (unsigned int)v18 >= 0) && ((char)v21 == 0 || (unsigned int)v18 >= 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || v18 >= 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || ((unsigned short)v10 & 0x200) != 0 || (unsigned int)v18 >= 0) && ((unsigned int)v18 >= 0 || (unsigned int)v18 >= 0 || v8 != 0))\n        {\n            v19 = __fxstat(0x1, v18, (unsigned int)&v1);\n            if ((unsigned int)v19 == 0)\n            {\n                if (v7[15] == *((long long *)&v1) && v7[16] == v2)\n                {\n                    if ((*(&((char *)&v5->field_48)[1]) & 2) == 0)\n                    {\n                        v19 = fchdir(v18);\n                    }\n                    else\n                    {\n                        sub_407250();\n                    }\n                }\n                if (v7[15] != *((long long *)&v1) || v7[16] != v2)\n                {\n                    *(__errno_location()) = 2;\n                }\n            }\n            if (v7[16] != v2)\n            {\n                v19 = -18446744069414584321;\n            }\n            if (((*(&((char *)&v5->field_48)[1]) & 2) == 0 || v7[15] != *((long long *)&v1) || (unsigned int)v19 != 0 || v7[16] != v2) && v22 < 0)\n            {\n                v24 = *(v22);\n                close(v18);\n                *(__errno_location()) = v24;\n            }\n        }\n    }\n    v26 = v19;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_405c50",
            "funcStartAddr": "0x405c50",
            "funcEndAddr": "0x405d0d",
            "decompiledFuncCode": "int sub_405c50()\n{\n    unsigned long long v0;  // [bp-0x40]\n    unsigned long long v1;  // [bp-0x30]\n    unsigned long v2;  // [bp-0x28]\n    unsigned long long v3;  // [bp-0x20]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp-0x8]\n    unsigned long v8;  // rdx\n    unsigned long long v9;  // r15\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // r13\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rbx\n    char *v14;  // rdi\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r10\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // r13\n    unsigned long long v22;  // r14\n    unsigned long long v23;  // r15\n\n    if (v8 != 0)\n    {\n        v6 = v9;\n        v5 = v10;\n        v4 = v11;\n        v3 = v12;\n        v2 = stack_base + 0;\n        v1 = v13;\n        v17 = (unsigned int)sub_405940();\n        if (strchr(v14, 0x3a) == 0)\n        {\n            v0 = v17;\n            if (v17 != 0)\n            {\n                v16 = strchr(v14, 0x2e);\n                v17 = v0;\n                if (v16 != 0)\n                {\n                    v17 = v0;\n                }\n            }\n            if (v17 == 0 || sub_405940() == 0 && v16 != 0)\n            {\n                v17 = 0;\n            }\n        }\n        v19 = v1;\n        v20 = v3;\n        v21 = v4;\n        v22 = v5;\n        v23 = v6;\n        return v17;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a890",
            "funcStartAddr": "0x40a890",
            "funcEndAddr": "0x40a8c1",
            "decompiledFuncCode": "int sub_40a890()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x405731",
            "decompiledFuncCode": "int sub_405720()\n{\n}\n"
        },
        {
            "funcName": "sub_409d10",
            "funcStartAddr": "0x409d10",
            "funcEndAddr": "0x409d7f",
            "decompiledFuncCode": "extern unsigned long long g_40ef77;\n\nint sub_409d10()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40ef77;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40a000() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40a270",
            "funcStartAddr": "0x40a270",
            "funcEndAddr": "0x40a2ea",
            "decompiledFuncCode": "extern int512_t g_40f070;\n\nint sub_40a270()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4255856)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_40f070;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_403ba0",
            "funcStartAddr": "0x403ba0",
            "funcEndAddr": "0x403ba8",
            "decompiledFuncCode": "extern unsigned long long g_6123a0;\n\nint sub_403ba0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6123a0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405270",
            "funcStartAddr": "0x405270",
            "funcEndAddr": "0x40527f",
            "decompiledFuncCode": "extern int512_t g_6124c0;\n\nint sub_405270()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6124c0 : v1)) = v2;\n    return &g_6124c0;\n}\n"
        },
        {
            "funcName": "sub_403e50",
            "funcStartAddr": "0x403e50",
            "funcEndAddr": "0x404f88",
            "decompiledFuncCode": "int sub_403e50()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long|unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char|unsigned long long v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|char|unsigned long long v77;  // rsi\n    unsigned int|unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_403d50();\n            v27 = (unsigned long long)(unsigned int)sub_403d50();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                    if (v25 != 0)\n                                    {\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v77 = (unsigned int)v39 == 2;\n                                    }\n                                    else\n                                    {\n                                        v77 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                        v87 = v77;\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                                        if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        *((unsigned long long *)&v4) = v4 & v87;\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v77 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v77 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (char)((unsigned int)v39 == 2);\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_403e50();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_409d10();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v15 != 1 || v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v77 == 0 || v80 < v64) && (v77 == 0 || v63 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v25 == 0 || v76 == 0) && (v25 == 0 || v78 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_403e50();\n            }\n            if (v25 == 0 && v5 == 0 || v25 == 0 && v17 == 0 && v5 != 0 || (v15 != 1 || v77 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (v25 == 0 || v76 == 0) && (v25 == 0 || v78 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v17 != 0 || (v81 == 2 & v17) != 0) && ((v81 == 2 & v17) != 0 || v5 != 0) || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402180",
            "funcEndAddr": "0x40264c",
            "decompiledFuncCode": "extern unsigned int g_40c704;\nextern unsigned int g_40c73f;\nextern unsigned int g_40c74f;\nextern unsigned int g_40d258;\nextern unsigned int g_40d2c8;\nextern unsigned int g_40d2f8;\nextern unsigned int g_40ef77;\nextern unsigned int g_61233c;\nextern unsigned long long g_612390;\nextern unsigned long long g_612550;\n\nint main()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x128]\n    unsigned long v1;  // [bp-0x120]\n    unsigned long v2;  // [bp-0x110]\n    unsigned int v3;  // [bp-0x108]\n    unsigned int v4;  // [bp-0x104]\n    unsigned int v5;  // [bp-0x100]\n    unsigned int v6;  // [bp-0xfc]\n    unsigned int v7;  // [bp-0xf8]\n    char v8;  // [bp-0xf4]\n    unsigned long v9;  // [bp-0xf0]\n    char v10;  // [bp-0xe8]\n    char v11;  // [bp-0xe7]\n    unsigned long v12;  // [bp-0xe0]\n    unsigned long v13;  // [bp-0xd8]\n    unsigned int v14;  // [bp-0xac]\n    unsigned int v15;  // [bp-0xa8]\n    unsigned long long v17;  // r14\n    unsigned int|unsigned long v18;  // r13\n    unsigned long long v22;  // rax\n    unsigned int|unsigned long v24;  // rbx\n    unsigned int v28;  // edi\n    unsigned long long v32;  // rbx\n    unsigned long long v33;  // rbp\n    unsigned long long v35;  // rbp\n    unsigned long long v37;  // rax\n\n    v17 = 0;\n    v18 = -18446744069414584321;\n    v24 = 16;\n    v3 = -1;\n    v4 = -1;\n    v5 = -1;\n    v6 = -1;\n    sub_403cb0();\n    setlocale(0x6, 0x40ef77);\n    bindtextdomain(0x40c704, 0x40d258);\n    textdomain(0x40c704);\n    sub_40c620();\n    sub_402c50();\n    while (true)\n    {\n        v22 = sub_409c90();\n        if ((unsigned int)v22 == -1)\n        {\n            if (v24 == 16 && v8 != 0)\n            {\n                if (v18 != 1)\n                {\n                    v18 = 0;\n                }\n                else\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d2c8, 0x5));\n                }\n            }\n            if (v8 == 0 || v18 != 1 || v24 != 16)\n            {\n                v10 = v18 != 0;\n                if (g_612390 != 0)\n                {\n                    if (v28 - g_61233c > 0)\n                    {\n                        if (__xstat(0x1) == 0)\n                        {\n                            v3 = v14;\n                            v4 = v15;\n                            v12 = (unsigned int)sub_402cd0();\n                            v13 = (unsigned int)sub_402c90();\n                        }\n                        else\n                        {\n                            v33 = (unsigned int)sub_405680();\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d2f8, 0x5));\n                        }\n                    }\n                }\n                else\n                {\n                    if (v28 - g_61233c > 1)\n                    {\n                        if ((unsigned long long)(unsigned int)sub_405c50() == 0)\n                        {\n                            if (v12 == 0 && v13 != 0)\n                            {\n                                v12 = &g_40ef77;\n                            }\n                            g_61233c = g_61233c + 1;\n                        }\n                        else\n                        {\n                            sub_4058d0();\n                            error(0x1, 0x0, \"%s: \");\n                        }\n                    }\n                }\n                if ((v28 - g_61233c <= 0 || g_612390 == 0) && (v28 - g_61233c <= 1 || g_612390 != 0))\n                {\n                    if (g_61233c >= v28)\n                    {\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40c73f, 0x5));\n                    }\n                    else\n                    {\n                        v32 = (unsigned int)sub_4058d0();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40c74f, 0x5));\n                    }\n                }\n            }\n        }\n        else if ((unsigned int)v22 != 102)\n        {\n            if (v22 > 102)\n            {\n                if ((unsigned int)v22 == 129)\n                {\n                    *((int *)&v2) = sub_405c50();\n                    sub_4058d0();\n                    error(0x1, 0x0, \"%s: \");\n                }\n                else if (v22 <= 129)\n                {\n                    if ((unsigned int)v22 == 118)\n                    {\n                        v7 = 0;\n                    }\n                    if ((unsigned int)v22 == 128)\n                    {\n                        v18 = 1;\n                    }\n                    if ((unsigned int)v22 == 104)\n                    {\n                        v18 = 0;\n                    }\n                }\n                else if ((unsigned int)v22 == 131)\n                {\n                    v17 = 1;\n                }\n                else if (v22 < 131)\n                {\n                    v17 = 0;\n                }\n                else if ((unsigned int)v22 == 132)\n                {\n                    g_612390 = g_612550;\n                }\n            }\n            else\n            {\n                if ((unsigned int)v22 == 76)\n                {\n                    v24 = 2;\n                }\n                else if (v22 > 76)\n                {\n                    if ((unsigned int)v22 == 82)\n                    {\n                        v8 = 1;\n                    }\n                    if ((unsigned int)v22 == 99)\n                    {\n                        v7 = 1;\n                    }\n                    if ((unsigned int)v22 == 80)\n                    {\n                        v24 = 16;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v22 == -130)\n                    {\n                        sub_402770(); /* do not return */\n                    }\n                    if ((unsigned int)v22 == 72)\n                    {\n                        v24 = 17;\n                    }\n                    if ((unsigned int)v22 == -131)\n                    {\n                        v0 = 0;\n                        sub_406180();\n                        exit(0x0); /* do not return */\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v22 == 102)\n        {\n            v11 = 1;\n        }\n        if ((unsigned int)v22 == -1 && (v28 - g_61233c <= 0 || g_612390 == 0) && (v28 - g_61233c <= 1 || g_612390 != 0) && (v8 == 0 || v18 != 1 || v24 != 16) || v22 <= 102 && v22 <= 76 && (unsigned int)v22 != -131 && (unsigned int)v22 != 72 && (unsigned int)v22 != 102 && (unsigned int)v22 != -130 && (unsigned int)v22 != 76 && (unsigned int)v22 != -1 || v22 <= 102 && (unsigned int)v22 != 99 && (unsigned int)v22 != 80 && (unsigned int)v22 != 102 && (unsigned int)v22 != 76 && (unsigned int)v22 != -1 && v22 > 76 && (unsigned int)v22 != 82 || v22 <= 129 && (unsigned int)v22 != 118 && v22 > 102 && (unsigned int)v22 != 129 && (unsigned int)v22 != 102 && (unsigned int)v22 != 128 && (unsigned int)v22 != -1 && (unsigned int)v22 != 104 || v22 >= 131 && v22 > 102 && (unsigned int)v22 != 129 && (unsigned int)v22 != 102 && v22 > 129 && (unsigned int)v22 != 132 && (unsigned int)v22 != -1 && (unsigned int)v22 != 131)\n        {\n            sub_402770(); /* do not return */\n        }\n    }\n    if (v8 != 0 && v17 != 0)\n    {\n        v9 = (unsigned int)sub_4058f0();\n        if (v9 == 0)\n        {\n            v35 = (unsigned int)sub_405680();\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d2f8, 0x5));\n        }\n    }\n    if (v17 == 0 || v8 == 0 || v9 != 0)\n    {\n        v1 = (int)g_61233c;\n        v0 = stack_base + -248;\n        v37 = (unsigned int)(sub_403a80() ^ 1);\n        return v37;\n    }\n}\n"
        },
        {
            "funcName": "sub_405880",
            "funcStartAddr": "0x405880",
            "funcEndAddr": "0x40588a",
            "decompiledFuncCode": "int sub_405880()\n{\n}\n"
        },
        {
            "funcName": "sub_40b2b0",
            "funcStartAddr": "0x40b2b0",
            "funcEndAddr": "0x40b2cb",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    unsigned int field_c;\n    unsigned int field_10;\n    unsigned long long field_14;\n    char field_1c;\n} struct_0;\n\nint sub_40b2b0()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // esi\n    unsigned long v3;  // rax\n\n    *((long long *)&(&v1->field_10)[1]) = 0;\n    *(&((char *)&v1->field_14)[4]) = 1;\n    v1->field_0 = v2;\n    v1->field_4 = v2;\n    v1->field_8 = v2;\n    v1->field_c = v2;\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405890",
            "funcStartAddr": "0x405890",
            "funcEndAddr": "0x4058a2",
            "decompiledFuncCode": "int sub_405890()\n{\n}\n"
        },
        {
            "funcName": "sub_405280",
            "funcStartAddr": "0x405280",
            "funcEndAddr": "0x4052b3",
            "decompiledFuncCode": "extern int512_t g_6124c0;\n\nint sub_405280()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6124c0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6124c0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_409c10",
            "funcStartAddr": "0x409c10",
            "funcEndAddr": "0x409c66",
            "decompiledFuncCode": "extern unsigned int g_612334;\nextern unsigned int g_612338;\nextern unsigned int g_61233c;\nextern unsigned int g_612500;\nextern unsigned int g_612504;\nextern unsigned int g_612508;\nextern unsigned long long g_612510;\nextern unsigned long long g_612550;\n\nint sub_409c10()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_612500 = g_61233c;\n    g_612504 = g_612338;\n    v1 = (unsigned int)v2;\n    v0 = &g_612500;\n    g_61233c = g_612500;\n    g_612550 = g_612510;\n    g_612334 = g_612508;\n    return sub_409640();\n}\n"
        },
        {
            "funcName": "sub_406360",
            "funcStartAddr": "0x406360",
            "funcEndAddr": "0x406381",
            "decompiledFuncCode": "int sub_406360()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_406510(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406390",
            "funcStartAddr": "0x406390",
            "funcEndAddr": "0x406408",
            "decompiledFuncCode": "int sub_406390() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b910",
            "funcStartAddr": "0x40b910",
            "funcEndAddr": "0x40b936",
            "decompiledFuncCode": "extern unsigned int g_40f168;\nextern unsigned int g_6122d8;\n\nint sub_40b910()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int v3;  // edi\n\n    v0 = v2;\n    error(g_6122d8, v3, (unsigned long long)dcgettext(0x0, 0x40f168, 0x5));\n}\n"
        },
        {
            "funcName": "sub_405750",
            "funcStartAddr": "0x405750",
            "funcEndAddr": "0x4057c3",
            "decompiledFuncCode": "int sub_405750()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405080();\n}\n"
        },
        {
            "funcName": "sub_406100",
            "funcStartAddr": "0x406100",
            "funcEndAddr": "0x406120",
            "decompiledFuncCode": "int sub_406100()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_406310",
            "funcStartAddr": "0x406310",
            "funcEndAddr": "0x406312",
            "decompiledFuncCode": "int sub_406310()\n{\n}\n"
        },
        {
            "funcName": "sub_40a450",
            "funcStartAddr": "0x40a450",
            "funcEndAddr": "0x40a455",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40a450()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_406550",
            "funcStartAddr": "0x406550",
            "funcEndAddr": "0x406591",
            "decompiledFuncCode": "int sub_406550()\n{\n    unsigned long long v1;  // rax\n\n    v1 = fts_open();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    else if (*(__errno_location()) != 22)\n    {\n        sub_406510(); /* do not return */\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4058b0",
            "funcStartAddr": "0x4058b0",
            "funcEndAddr": "0x4058c1",
            "decompiledFuncCode": "int sub_4058b0()\n{\n}\n"
        },
        {
            "funcName": "sub_403d50",
            "funcStartAddr": "0x403d50",
            "funcEndAddr": "0x403e2f",
            "decompiledFuncCode": "extern int512_t g_40d966;\nextern int512_t g_40d96a;\n\nint sub_403d50()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40b370();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40d966 : 4249969);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40d96a : 4249965);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a110",
            "funcStartAddr": "0x40a110",
            "funcEndAddr": "0x40a117",
            "decompiledFuncCode": "int sub_40a110()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4052c0",
            "funcStartAddr": "0x4052c0",
            "funcEndAddr": "0x4052d3",
            "decompiledFuncCode": "extern int512_t g_6124c0;\n\nint sub_4052c0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6124c0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6124c0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a8d0",
            "funcStartAddr": "0x40a8d0",
            "funcEndAddr": "0x40a8f0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_40a8d0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x405839",
            "decompiledFuncCode": "int sub_405830()\n{\n}\n"
        },
        {
            "funcName": "fts_set",
            "funcStartAddr": "0x408da0",
            "funcEndAddr": "0x408dc5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[116];\n    unsigned short field_74;\n} struct_0;\n\nint fts_set()\n{\n    unsigned long v1;  // rdx\n    struct_0 *v2;  // rsi\n\n    if ((unsigned int)v1 <= 4)\n    {\n        *((unsigned long *)&v2->field_74) = v1;\n        return 0;\n    }\n    *(__errno_location()) = 22;\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_407610",
            "funcStartAddr": "0x407610",
            "funcEndAddr": "0x4076b4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    char padding_8[104];\n    unsigned short field_70;\n    char padding_72[6];\n    unsigned long long field_78;\n    unsigned long long field_80;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_407610()\n{\n    void tmp_10;  // tmp #10\n    unsigned long long v1;  // rdx\n    struct_1 *v2;  // rbx\n    unsigned int v3;  // edi\n    unsigned long long v4;  // rax\n    unsigned long long v5[3];  // rbp\n    struct_0 *v6;  // r12\n    unsigned long long v7;  // rax\n\n    v2 = v1;\n    if (((unsigned short)v3 & 258) != 0)\n    {\n        v5 = malloc(0x18);\n        if (v5 != 0)\n        {\n            tmp_10 = v2->field_78;\n            v5[2] = v2;\n            v5[0] = tmp_10;\n            v5[1] = v2->field_80;\n            v6 = (unsigned long long)(unsigned int)sub_40b090();\n            if (v5 != v6)\n            {\n                free(v5);\n                if (v6 != 0)\n                {\n                    v7 = v6->field_10;\n                    v2->field_70 = 2;\n                    v2->field_0 = v7;\n                }\n            }\n        }\n        if ((v6 == 0 || v5 == 0) && (v5 == 0 || v5 != v6))\n        {\n            return 0;\n        }\n    }\n    else\n    {\n        v4 = sub_409f30();\n        if (v4 != 0)\n        {\n            v2->field_0 = v2;\n            v2->field_70 = 2;\n            return v4;\n        }\n    }\n    if ((v4 == 0 || ((unsigned short)v3 & 258) != 0) && (((unsigned short)v3 & 258) == 0 || v5 != 0) && (((unsigned short)v3 & 258) == 0 || v5 == v6 || v6 != 0))\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4055a0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x40560d",
            "decompiledFuncCode": "int sub_4055a0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405080();\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_chown.elf"
}