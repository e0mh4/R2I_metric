{
    "funcInfo": [
        {
            "funcName": "sub_408350",
            "funcStartAddr": "0x408350",
            "funcEndAddr": "0x4088b7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40c9e0;\nextern unsigned int g_40ca14;\nextern unsigned long long stderr;\n\nint sub_408350()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char [2]|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9d\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long *|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char *v60;  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_407c50();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = (unsigned int)v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_407c50();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = (unsigned int)v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_407d30();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c9e0, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40ca14, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c9e0, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_407d30();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_402290",
            "funcStartAddr": "0x402290",
            "funcEndAddr": "0x40243f",
            "decompiledFuncCode": "extern unsigned long long g_60f338;\nextern unsigned long long g_60f340;\n\nint sub_402290()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    char *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rbx\n    char *v6;  // rbx\n    unsigned long long v7;  // cc_dep1\n    unsigned long long v9;  // rbp\n    char *v10;  // rdx\n    char *v12;  // rax\n    char *v14;  // rax\n    unsigned long long v16;  // rcx\n    unsigned long long v18;  // rbx\n\n    v4 = *(v3);\n    if (*(v3) != 0)\n    {\n        v1 = stack_base + 0;\n        v9 = 1;\n        v0 = v5;\n        v6 = v3;\n        do\n        {\n            v16 = g_60f340;\n            v10 = g_60f338;\n            v7 = v4;\n            if (v4 != 61)\n            {\n                if (v7 <= 61)\n                {\n                    if (v4 == 39)\n                    {\n                        if (g_60f340 == g_60f338)\n                        {\n                            _obstack_newchunk();\n                            v10 = g_60f338;\n                        }\n                        g_60f338 = &v10[1];\n                        *(v10) = 39;\n                        v12 = g_60f338;\n                        if (g_60f340 == g_60f338)\n                        {\n                            _obstack_newchunk();\n                            v12 = g_60f338;\n                        }\n                        g_60f338 = &v12[1];\n                        *(v12) = 92;\n                        v14 = g_60f338;\n                        if (g_60f340 == g_60f338)\n                        {\n                            _obstack_newchunk();\n                            v14 = g_60f338;\n                        }\n                        v9 = 1;\n                        g_60f338 = &v14[1];\n                        *(v14) = 39;\n                        v16 = g_60f340;\n                        v10 = g_60f338;\n                    }\n                }\n                else\n                {\n                    if (v4 == 94 || v4 == 92)\n                    {\n                        v9 = (unsigned int)v9 ^ 1;\n                    }\n                }\n            }\n            if ((v9 == 0 || v4 != 61) && (v4 == 61 || v7 <= 61 || v4 != 94) && (v4 == 61 || v7 <= 61 || v4 != 92) && (v4 == 61 || v4 != 39 || v7 > 61) && (v9 == 0 || v4 != 58 || v7 > 61))\n            {\n                v9 = 1;\n            }\n            if (v9 != 0 && (v4 == 61 || v4 == 58) && (v4 == 61 || v7 <= 61) && (v4 == 61 || v4 != 39))\n            {\n                if (g_60f340 == g_60f338)\n                {\n                    _obstack_newchunk();\n                    v10 = g_60f338;\n                }\n                g_60f338 = &v10[1];\n                *(v10) = 92;\n                v10 = g_60f338;\n            }\n            if (v4 == 39 && v16 == v10 || v16 == v10 && v9 == 0 || v4 == 61 && g_60f340 == g_60f338 && v9 != 0 || v16 == v10 && v4 != 61 && v4 != 58 || v16 == v10 && v4 != 61 && v7 > 61 || g_60f340 == g_60f338 && v4 == 58 && v7 <= 61 && v4 != 39 && v9 != 0)\n            {\n                _obstack_newchunk();\n                v10 = g_60f338;\n            }\n            v6 = &v6[1];\n            g_60f338 = &v10[1];\n            *(v10) = v6[-1];\n            v4 = *(v6);\n        }\n        while ((char)v4 != 0);\n        v18 = v0;\n        return v4;\n    }\n    return (unsigned long long)*(v3);\n}\n"
        },
        {
            "funcName": "sub_405390",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x4053b1",
            "decompiledFuncCode": "int sub_405390()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405540(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4051b0",
            "funcStartAddr": "0x4051b0",
            "funcEndAddr": "0x405268",
            "decompiledFuncCode": "int sub_4051b0()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long *|unsigned long long v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_404d50();\n    }\n}\n"
        },
        {
            "funcName": "sub_404aff",
            "funcStartAddr": "0x404aff",
            "funcEndAddr": "0x404b70",
            "decompiledFuncCode": "extern uint128_t g_60f4a0;\nextern uint128_t g_60f4b0;\nextern uint128_t g_60f4c0;\nextern unsigned long long g_60f4d0;\n\nint sub_404aff()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60f4d0;\n    *((uint128_t *)&v0) = g_60f4a0;\n    *((uint128_t *)&v1) = g_60f4b0;\n    *((uint128_t *)&v2) = g_60f4c0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4044e0();\n}\n"
        },
        {
            "funcName": "sub_404af0",
            "funcStartAddr": "0x404af0",
            "funcEndAddr": "0x404aff",
            "decompiledFuncCode": "int sub_404af0()\n{\n}\n"
        },
        {
            "funcName": "sub_408bf0",
            "funcStartAddr": "0x408bf0",
            "funcEndAddr": "0x408c05",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_408bf0()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_404b80",
            "funcStartAddr": "0x404b80",
            "funcEndAddr": "0x404b91",
            "decompiledFuncCode": "int sub_404b80()\n{\n}\n"
        },
        {
            "funcName": "sub_4047e2",
            "funcStartAddr": "0x4047e2",
            "funcEndAddr": "0x40480b",
            "decompiledFuncCode": "int sub_4047e2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_4053c0",
            "funcStartAddr": "0x4053c0",
            "funcEndAddr": "0x405438",
            "decompiledFuncCode": "int sub_4053c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4089a0",
            "funcStartAddr": "0x4089a0",
            "funcEndAddr": "0x4089b3",
            "decompiledFuncCode": "int sub_4089a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408920();\n}\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x405598",
            "decompiledFuncCode": "int sub_405580()\n{\n    unsigned long long v1;  // rax\n\n    v1 = strndup();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_405540(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4054a0",
            "funcStartAddr": "0x4054a0",
            "funcEndAddr": "0x4054b7",
            "decompiledFuncCode": "int sub_4054a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4052f0();\n}\n"
        },
        {
            "funcName": "sub_404cf0",
            "funcStartAddr": "0x404cf0",
            "funcEndAddr": "0x404d02",
            "decompiledFuncCode": "int sub_404cf0()\n{\n}\n"
        },
        {
            "funcName": "sub_408bb0",
            "funcStartAddr": "0x408bb0",
            "funcEndAddr": "0x408beb",
            "decompiledFuncCode": "extern unsigned int g_40bf00;\nextern unsigned int g_40c28f;\nextern unsigned int g_60f258;\nextern unsigned long long stderr;\n\nint sub_408bb0()\n{\n    __fprintf_chk(stderr, 0x1, 0x40bf00, dcgettext(0x0, 0x40c28f, 0x5));\n    exit(g_60f258); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404ca0",
            "funcStartAddr": "0x404ca0",
            "funcEndAddr": "0x404cb7",
            "decompiledFuncCode": "int sub_404ca0()\n{\n}\n"
        },
        {
            "funcName": "sub_402288",
            "funcStartAddr": "0x402288",
            "funcEndAddr": "0x4022c4",
            "decompiledFuncCode": "int sub_402288() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x4094f4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40ca2f;\nextern char g_60f518[2];\n\nint sub_408fa0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_60f518;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40ca2f : (unsigned long long)nl_langinfo(0xe));\n    if (g_60f518 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40ca2f;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            ungetc(v26, v10);\n                            v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v28 > 1)\n                            {\n                                v29 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v29 = &v4;\n                                    v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v32 = &v5;\n                                v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v32 = &v6;\n                                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v33;\n                                tmp_56 = (unsigned int)v34 % 0x10000;\n                                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v36 + 2;\n                                    v37 = malloc(v36 + 3);\n                                    v39 = v1;\n                                    v40 = v2;\n                                }\n                                else\n                                {\n                                    v38 = v36 + v0 + 3;\n                                    v0 = v36 + v0 + 2;\n                                    v37 = realloc(NULL, v38);\n                                    v40 = v2;\n                                    v39 = v1;\n                                }\n                                if (v37 != 0)\n                                {\n                                    tmp_1 = -2 - v39;\n                                    v41 = v39 + 1;\n                                    v42 = v0 - v40;\n                                    v43 = tmp_1 + v0 - v40 + v37;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v43) = *((long long *)&v3);\n                                        *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                        v44 = v43 + 8 & -8;\n                                        v43 -= v43 + 8 & -8;\n                                        v45 = &(&v3)[-1 * v43];\n                                        v46 = (unsigned int)(v41 + v43) & -8;\n                                        if (v46 >= 8)\n                                        {\n                                            v43 = 0;\n                                            do\n                                            {\n                                                v48 = v43;\n                                                v43 = (unsigned int)v43 + 8;\n                                                *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                            }\n                                            while ((unsigned int)v43 < (v46 & -8));\n                                        }\n                                    }\n                                    else if ((v41 & 4) != 0)\n                                    {\n                                        *((int *)v43) = *((int *)&v3);\n                                        *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v43) = v3;\n                                        if ((v41 & 2) != 0)\n                                        {\n                                            *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                        }\n                                    }\n                                    v62 = v40 + 1;\n                                    v49 = v37 + v42 - 1;\n                                    if ((unsigned int)v43 >= 8)\n                                    {\n                                        *((long long *)v49) = *((long long *)&v5);\n                                        v43 = v62;\n                                        *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                        v52 = v49 - (v49 + 8 & -8);\n                                        v54 = (unsigned int)(v43 + v52) & -8;\n                                        if (v54 >= 8)\n                                        {\n                                            v57 = 0;\n                                            do\n                                            {\n                                                v58 = v57;\n                                                v57 = (unsigned int)v57 + 8;\n                                                *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                            }\n                                            while ((unsigned int)v57 < (v54 & -8));\n                                        }\n                                    }\n                                    else if (((char)v43 & 4) != 0)\n                                    {\n                                        *((int *)v49) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v43 != 0)\n                                    {\n                                        *((char *)v49) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v37;\n                                    v59 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_40ca2f;\n                                    v10 = (tmp_10 == 0? &g_40ca2f : tmp_10);\n                                    free(NULL);\n                                    sub_4055a0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1)\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if ((unsigned int)v26 == 35)\n                        {\n                            do\n                            {\n                                v61 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v61[1];\n                                    v61 = (unsigned int)*(v61);\n                                    v62 = 1;\n                                }\n                                else\n                                {\n                                    v61 = __uflow(v10);\n                                    v62 = (char)((unsigned int)v61 != -1);\n                                }\n                            }\n                            while (v61 != 10 && v62 != 0);\n                        }\n                        if ((unsigned int)v26 == 35 && v61 == -1 || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v28 <= 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            v10 = (tmp_10 == 0? &g_40ca2f : tmp_10);\n                            sub_4055a0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && v61 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1)\n                    {\n                        v9 = &g_40ca2f;\n                    }\n                    else if (v37 == 0 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 || ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && v61 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40ca2f;\n            free(v17);\n        }\n        *((char *[2])&g_60f518[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_40ca2f : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x405150",
            "decompiledFuncCode": "int sub_405130()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "0x408e00",
            "funcEndAddr": "0x408e2d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_allocated_p()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rax\n    unsigned long v3;  // rsi\n\n    v2 = v1->field_8;\n    if (v1->field_8 != 0)\n    {\n        while (true)\n        {\n            if (*(v2) >= v3 && v3 > v2)\n            {\n                return 1;\n            }\n            if (*(v2) < v3 || v3 <= v2)\n            {\n                v2 = v2[1];\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405350",
            "funcStartAddr": "0x405350",
            "funcEndAddr": "0x405380",
            "decompiledFuncCode": "int sub_405350()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_405540(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4068d0",
            "funcStartAddr": "0x4068d0",
            "funcEndAddr": "0x406deb",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1];\n    char field_1;\n} struct_0;\n\nextern char g_406a89;\nextern char g_406abe;\nextern char g_406b2e;\nextern char g_406b8a;\nextern char g_406c01;\nextern char g_406c2e;\nextern char g_406c58;\nextern char g_406c7a;\nextern char g_406ccd;\nextern char g_406d0c;\nextern char g_406d5c;\nextern char g_406d71;\nextern char g_406d97;\nextern char g_406de1;\nextern char g_406dfa;\nextern char g_406e13;\nextern unsigned int g_60f4d8;\n\nint sub_4068d0()\n{\n    unsigned long long v0;  // [bp-0x1b0]\n    unsigned long v1;  // [bp-0x98]\n    char v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    struct_0 *|unsigned long v4;  // [bp-0x80]\n    unsigned long v5;  // [bp-0x70]\n    unsigned long long v6;  // [bp-0x68]\n    unsigned int|char [3] v7;  // [bp-0x60]\n    unsigned int|unsigned long|unsigned long long * v8;  // [bp-0x58]\n    unsigned int|char [3] v9;  // [bp-0x50]\n    unsigned long|unsigned long long|unsigned long long * v10;  // [bp-0x40]\n    unsigned long v11;  // [bp-0x20]\n    unsigned long v12;  // [bp-0x18]\n    unsigned long v13;  // [bp-0x10]\n    unsigned long v14;  // [bp-0x8]\n    unsigned int v16;  // edi\n    unsigned long long v17;  // rdx\n    unsigned long v18;  // rcx\n    char *v19;  // rsi\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rax\n    char [3]|char * v22;  // r14\n    unsigned long long v23;  // r15\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n    char v27[3];  // rcx\n    unsigned long long v28;  // rax\n    unsigned long long v30;  // r13\n    unsigned long long v32;  // rax\n    unsigned long long *v33;  // r14\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long *v36;  // r14\n    unsigned int v37;  // r9d\n    unsigned long long v38;  // rax\n    unsigned long long *v39;  // r13\n    unsigned long long v40;  // r13\n    char v41;  // r8b\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // r14\n    unsigned long long v48;  // rax\n\n    v9 = v16;\n    v6 = v17;\n    v5 = v18;\n    v10 = 0;\n    rsp<8> = &v2;\n    v8 = strlen(v19);\n    v21 = v4->field_1;\n    if (v4->field_1 != 0)\n    {\n        v22 = &v4->field_1;\n        v4 = v19;\n        v23 = 0;\n        v7 = v9 - 63;\n        while (true)\n        {\n            if (v21 != 91)\n            {\n                while (true)\n                {\n                    v20 = v21 - 33;\n                    if ((v21 - 33 & 255) <= 31)\n                    {\n                        v0 = 3221227009;\n                        rsp<8> = &v2;\n                        if (v22[1] == 40 && ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) != 0)\n                        {\n                            v23 += 1;\n                            v22 = &v22[1];\n                            v21 = 40;\n                        }\n                        if (v21 == 41 && (((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 || v22[1] != 40))\n                        {\n                            if (v23 != 0)\n                            {\n                                v21 = v22[1];\n                                v22 = &v22[1];\n                                if (v21 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v28 = ((unsigned int)((unsigned long long)v9 - 63) <= 1? v8 : r14<8> - (long long)(stack_base)[-136] + 1) + 15 & -8;\n                                if ((((unsigned int)((unsigned long long)v9 - 63) <= 1? v8 : r14<8> - (long long)(stack_base)[-136] + 1) + 15 & -8) - 8 > 7991)\n                                {\n                                    break;\n                                }\n                                rsp<8> = &(&v2)[-1 * (v28 + 23 & -0x10) + -8];\n                                v14 = &g_406b2e;\n                                v10 = &(&v2)[-1 * (v28 + 23 & -0x10) + 15] & -0x10;\n                                *((char *)(unsigned long long)mempcpy((&(&v2)[-1 * (v28 + 23 & -0x10) + 15] & -0x10) + 8)) = 0;\n                                *(v10) = 0;\n                                v8 = v10;\n                                if (v10 == 0)\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v13 = &g_406e13;\n                                    __assert_fail(); /* do not return */\n                                }\n                                else if (v22[-1 + 7] == 41)\n                                {\n                                    v30 = v9 - 33;\n                                    switch (v9)\n                                    {\n                                    case 33:\n                                        if (v6 <= v5)\n                                        {\n                                            *((char *[3])&v9[0]) = v22;\n                                            while (true)\n                                            {\n                                                v33 = v8;\n                                                while (true)\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v13 = &g_406ccd;\n                                                    v34 = sub_406e20();\n                                                    if (v34 != 0)\n                                                    {\n                                                        v33 = *(v33);\n                                                        rsp<8> = rsp<8> - 8;\n                                                        v12 = &g_406d0c;\n                                                        v35 = sub_406e20();\n                                                        if (v35 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                                }\n                                                if (v34 == 0 || v33 == 0 && v35 != 0)\n                                                {\n                                                    v33 = v8;\n                                                }\n                                                else if (v34 == 0 || v33 == 0 && v35 != 0)\n                                                {\n                                                    v38 = 1;\n                                                }\n                                                else if (v33 == 0 && v34 != 0)\n                                                {\n                                                    v38 = 0;\n                                                }\n                                            }\n                                            if (true)\n                                            {\n                                                v38 = 1;\n                                            }\n                                            else\n                                            {\n                                                v38 = 0;\n                                            }\n                                        }\n                                    case 42:\n                                        rsp<8> = rsp<8> - 8;\n                                        v13 = &g_406b8a;\n                                    case 43:\n                                        *((char *[3])&v7[0]) = v22;\n                                        v36 = v8;\n                                        v8 = v37 & 1;\n                                        v4 -= 1;\n                                        while (true)\n                                        {\n                                            if (v6 <= v5)\n                                            {\n                                                v40 = v6;\n                                                v9 = v41;\n                                                do\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v13 = &g_406c58;\n                                                    v42 = sub_406e20();\n                                                    if (v42 == 0)\n                                                    {\n                                                        if (v6 != v40)\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v12 = &g_406c01;\n                                                            v44 = sub_406e20();\n                                                            if (v44 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v11 = &g_406c2e;\n                                                            v45 = sub_406e20();\n                                                            if (v45 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v12 = &g_406c7a;\n                                                            v43 = sub_406e20();\n                                                            if (v43 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        v36 = v10;\n                                                    }\n                                                    v40 += 1;\n                                                }\n                                                while (v5 >= v40);\n                                                if (true)\n                                                {\n                                                    v38 = 0;\n                                                }\n                                                else if (v42 != 0 || v43 != 0 || v44 != 0 && v45 != 0)\n                                                {\n                                                    v46 = *(v36);\n                                                    v10 = v46;\n                                                }\n                                            }\n                                            v46 = *(v36);\n                                            v10 = v46;\n                                        }\n                                        if (v6 <= v5)\n                                        {\n                                            v38 = 0;\n                                        }\n                                        else if (v46 == 0)\n                                        {\n                                            v38 = 1;\n                                        }\n                                    case 63:\n                                        rsp<8> = rsp<8> - 8;\n                                        v13 = &g_406d97;\n                                        v32 = sub_406e20();\n                                        if (v32 != 0)\n                                        {\n                                            v39 = v8;\n                                            while (true)\n                                            {\n                                                rsp<8> = rsp<8> - 8;\n                                                v13 = &g_406d5c;\n                                                strcat(&v39[1], v22);\n                                                rsp<8> = rsp<8> - 8;\n                                                v12 = &g_406d71;\n                                                v48 = sub_406e20();\n                                                if (v48 != 0)\n                                                {\n                                                    v39 = *(v39);\n                                                    v10 = v39;\n                                                    if (v39 == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v38 = 0;\n                                                }\n                                            }\n                                            if (v48 != 0)\n                                            {\n                                                v38 = 1;\n                                            }\n                                            else if (v48 == 0)\n                                            {\n                                                return v38;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v38 = 0;\n                                            break;\n                                        }\n                                    default:\n                                        rsp<8> = rsp<8> - 8;\n                                        v13 = &g_406de1;\n                                        __assert_fail(); /* do not return */\n                                    }\n                                    v38 = 0;\n                                    v38 = 1;\n                                }\n                                else\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v13 = &g_406dfa;\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                        }\n                    }\n                    else if (v21 == 124)\n                    {\n                        if (v23 == 0)\n                        {\n                            v24 = (v7 <= 1? v8 : r14<8> - (long long)(stack_base)[-136] + 1) + 15 & -8;\n                            if (((v7 <= 1? v8 : r14<8> - (long long)(stack_base)[-136] + 1) + 15 & -8) - 8 > 7991)\n                            {\n                                break;\n                            }\n                            rsp<8> = &(&v2)[-1 * (v24 + 23 & -0x10) + -8];\n                            v14 = &g_406a89;\n                            *((char *)(unsigned long long)mempcpy((&(&v2)[-1 * (v24 + 23 & -0x10) + 15] & -0x10) + 8)) = 0;\n                            v21 = v22[1];\n                            v22 = &v22[1];\n                            *((long long *)v10) = 0;\n                            v10 = &(&v2)[-1 * (v24 + 23 & -0x10) + 15] & -0x10;\n                        }\n                    }\n                    if (v23 != 0 && (v21 - 33 & 255) > 31 || (v21 - 33 & 255) > 31 && v21 != 124 || ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 && (v21 - 33 & 255) <= 31 && v21 != 41 || (v21 - 33 & 255) <= 31 && v21 != 41 && v22[1] != 40)\n                    {\n                        v21 = v22[1];\n                        v22 = &v22[1];\n                    }\n                }\n                if (v23 == 0 && v21 == 124 && (v21 - 33 & 255) > 31 || v23 == 0 && v21 == 41 && (v21 - 33 & 255) <= 31 && (((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 || v22[1] != 40) || v21 == 0 && v21 == 41 && (v21 - 33 & 255) <= 31 && v23 != 0 && (((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 || v22[1] != 40))\n                {\n                    v38 = -18446744069414584321;\n                }\n                else if (((v7 <= 1? v8 : r14<8> - (long long)(stack_base)[-136] + 1) + 15 & -8) - 8 <= 7991 && (v21 - 33 & 255) > 31 || v23 != 0 && (v21 - 33 & 255) > 31 || (v21 - 33 & 255) > 31 && v21 != 124 || ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 && (v21 - 33 & 255) <= 31 && v21 != 41 || (v21 - 33 & 255) <= 31 && v21 != 41 && v22[1] != 40)\n                {\n                    if (v21 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (...)\n                {\n                    return v38;\n                }\n            }\n            else\n            {\n                if (g_60f4d8 == 0)\n                {\n                    v3 = &v4->field_1;\n                    rsp<8> = rsp<8> - 8;\n                    v1 = &g_406abe;\n                    g_60f4d8 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v25 = v22[1];\n                if (v22[1] != 33 && (v25 != 94 || g_60f4d8 >= 0))\n                {\n                    v27 = &v22[1];\n                }\n                if (v22[1] == 33 || v25 == 94 && g_60f4d8 < 0)\n                {\n                    v27 = &v22[2];\n                    v25 = v22[2];\n                }\n                if (v25 == 93)\n                {\n                    v25 = v27[1];\n                    v27 = &v27[1];\n                    v22 = &v27[1];\n                }\n                if (v25 != 93 || v25 != 93)\n                {\n                    while (v25 != 0)\n                    {\n                        v25 = *(v22);\n                        v27 = v22;\n                        v22 = &v27[1];\n                        if (v25 == 93)\n                        {\n                            break;\n                        }\n                    }\n                    if (v25 != 0)\n                    {\n                        v21 = v27[1];\n                    }\n                    else\n                    {\n                        v38 = -18446744069414584321;\n                    }\n                }\n                v21 = v27[1];\n            }\n        }\n        if (true)\n        {\n            v38 = -18446744069414584321;\n        }\n        else\n        {\n            return v38;\n        }\n    }\n    v38 = -18446744069414584321;\n    return v38;\n}\n"
        },
        {
            "funcName": "sub_408f40",
            "funcStartAddr": "0x408f40",
            "funcEndAddr": "0x408f96",
            "decompiledFuncCode": "int sub_408f40()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4048f0",
            "funcStartAddr": "0x4048f0",
            "funcEndAddr": "0x404985",
            "decompiledFuncCode": "extern unsigned long long *g_60f298;\nextern unsigned long long g_60f2a0;\nextern unsigned long long g_60f2a8;\nextern unsigned int g_60f2b0;\nextern unsigned long long g_60f3a0;\n\nint sub_4048f0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60f2b0;\n    if (g_60f2b0 > 1)\n    {\n        v2 = &g_60f298[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60f298[2 * (unsigned long long)(g_60f2b0 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_60f298[1] != 6353824)\n    {\n        v1 = free(g_60f298[1]);\n        g_60f2a0 = 0x100;\n        g_60f2a8 = &g_60f3a0;\n    }\n    if (g_60f298 != 6353568)\n    {\n        v1 = free(g_60f298);\n        g_60f298 = &g_60f2a0;\n    }\n    g_60f2b0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404c20",
            "funcStartAddr": "0x404c20",
            "funcEndAddr": "0x404c8c",
            "decompiledFuncCode": "extern uint128_t g_60f4a0;\nextern uint128_t g_60f4b0;\nextern uint128_t g_60f4c0;\nextern unsigned long long g_60f4d0;\n\nint sub_404c20()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60f4a0;\n    *((uint128_t *)&v1) = g_60f4b0;\n    *((uint128_t *)&v2) = g_60f4c0;\n    v4 = g_60f4d0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4044e0();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "0x408eb0",
            "funcEndAddr": "0x408ed4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_memory_used()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rdx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n\n    v2 = v1->field_8;\n    v3 = 0;\n    if (v1->field_8 != 0)\n    {\n        do\n        {\n            v4 = (unsigned long long [2])(*(v2) + -0x1 * v2);\n            v2 = v2[1];\n            v3 += v4;\n        }\n        while (v2 != 0);\n        return v3;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_404bb0",
            "funcStartAddr": "0x404bb0",
            "funcEndAddr": "0x404c23",
            "decompiledFuncCode": "int sub_404bb0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4044e0();\n}\n"
        },
        {
            "funcName": "sub_408ee0",
            "funcStartAddr": "0x408ee0",
            "funcEndAddr": "0x408f3c",
            "decompiledFuncCode": "int sub_408ee0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4055a0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404ae0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404aec",
            "decompiledFuncCode": "int sub_404ae0()\n{\n}\n"
        },
        {
            "funcName": "sub_4046c0",
            "funcStartAddr": "0x4046c0",
            "funcEndAddr": "0x4046cf",
            "decompiledFuncCode": "extern int512_t g_60f4a0;\n\nint sub_4046c0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60f4a0 : v1));\n}\n"
        },
        {
            "funcName": "sub_405760",
            "funcStartAddr": "0x405760",
            "funcEndAddr": "0x40583e",
            "decompiledFuncCode": "extern unsigned int g_60f4d8;\n\nint sub_405760()\n{\n    unsigned long long v0;  // [bp-0x138]\n    unsigned long long v2;  // rdi\n    char v3[4];  // rbx\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v3 = v2;\n    while (true)\n    {\n        while (true)\n        {\n            if (v4 != 91)\n            {\n                v5 = v4 - 33;\n                if ((v4 - 33 & 255) <= 31)\n                {\n                    v0 = 3221227009;\n                    if (v3[2] == 40 && ((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) != 0)\n                    {\n                        v3 = (unsigned long long)(unsigned int)sub_405760();\n                    }\n                    if (v4 == 41 && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v3[2] != 40))\n                    {\n                        v8 = &v3[2];\n                        return v8;\n                    }\n                }\n                if (v3[2] != 40 || v4 != 41)\n                {\n                    v3 = &v3[1];\n                    v4 = v3[1];\n                    if ((char)v4 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                if (g_60f4d8 == 0)\n                {\n                    g_60f4d8 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v6 = v3[2];\n                if (v3[2] != 33 && (v6 != 94 || g_60f4d8 >= 0))\n                {\n                    v3 = &v3[2];\n                }\n                if (v3[2] == 33 || v6 == 94 && g_60f4d8 < 0)\n                {\n                    v6 = v3[3];\n                    v3 = &v3[3];\n                }\n                if (v6 == 93)\n                {\n                    v6 = v3[1];\n                    v3 = &v3[1];\n                }\n                while (true)\n                {\n                    v7 = &v3[1];\n                    if (v6 == 93)\n                    {\n                        break;\n                    }\n                    if (v6 != 0)\n                    {\n                        v6 = v3[0];\n                        v3 = v7;\n                    }\n                }\n                if (true)\n                {\n                    v4 = v3[1];\n                    if (v3[1] == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v6 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n        if (v4 != 91 && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v3[2] != 40) && (v4 != 41 || (v4 - 33 & 255) > 31))\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404680",
            "funcStartAddr": "0x404680",
            "funcEndAddr": "0x4046b4",
            "decompiledFuncCode": "int sub_404680()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4054f0();\n}\n"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x4043e8",
            "decompiledFuncCode": "int sub_4032b0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char|unsigned long long v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|char|unsigned long long v77;  // rsi\n    unsigned int|unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4031b0();\n            v27 = (unsigned long long)(unsigned int)sub_4031b0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                    v55 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v77 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v77 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v77 = (unsigned int)v39 == 2;\n                        }\n                        if (v17 == 0)\n                        {\n                            v77 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                            if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_4032b0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_408a20();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n                v87 = v77;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v15 != 1 || v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v77 == 0 || v80 < v64) && (v77 == 0 || v63 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v76 == 0 || (unsigned int)v39 == 2) && (v78 == 0 || (unsigned int)v39 == 2) && (v76 == 0 || v17 != 0) && (v78 == 0 || v17 != 0) && ((unsigned int)v39 == 2 || (v81 == 2 & v17) != 0) && (v17 != 0 || (v81 == 2 & v17) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_4032b0();\n            }\n            if (v17 == 0 && v5 == 0 && ((unsigned int)v39 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0) || v17 == 0 && v5 != 0 && ((unsigned int)v39 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0) || (v15 != 1 || v77 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v76 == 0 || (unsigned int)v39 == 2) && (v78 == 0 || (unsigned int)v39 == 2) && (v76 == 0 || v17 != 0) && (v78 == 0 || v17 != 0) && ((unsigned int)v39 == 2 || (v81 == 2 & v17) != 0) && (v17 != 0 || (v81 == 2 & v17) != 0))\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_405450",
            "funcStartAddr": "0x405450",
            "funcEndAddr": "0x40549a",
            "decompiledFuncCode": "int sub_405450() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405310",
            "funcStartAddr": "0x405310",
            "funcEndAddr": "0x405331",
            "decompiledFuncCode": "int sub_405310()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405540(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406e20",
            "funcStartAddr": "0x406e20",
            "funcEndAddr": "0x407841",
            "decompiledFuncCode": "int sub_406e20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402480",
            "funcStartAddr": "0x402480",
            "funcEndAddr": "0x402a13",
            "decompiledFuncCode": "extern unsigned int g_40960c;\nextern unsigned int g_409880;\nextern unsigned int g_4098b0;\nextern int512_t g_409e80;\nextern unsigned long long g_409fc0[4];\nextern int512_t g_40b14d;\nextern char *g_60f338;\nextern unsigned long long g_60f340;\n\nint sub_402480()\n{\n    char [2]|unsigned long|unsigned long long|unsigned long long * v0;  // [bp-0x68]\n    void tmp_20;  // tmp #20\n    void tmp_10;  // tmp #10\n    void tmp_6;  // tmp #6\n    unsigned short *v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    char v3;  // [bp-0x4d]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned long long v5;  // [bp-0x48]\n    unsigned long long v6;  // [bp-0x40]\n    void *v8;  // rdi\n    void *v9;  // r14\n    unsigned short *v10;  // rsi\n    unsigned long v12;  // rbx\n    unsigned long long v14;  // rbp\n    char v15[2];  // rbx\n    unsigned long long v17;  // rcx\n    char v18[2];  // r13\n    unsigned short *v19;  // rcx\n    unsigned int v20;  // eax\n    unsigned short v21;  // ax\n    char *v23;  // rbx\n    unsigned long long v24;  // rdi\n    unsigned long long v25;  // rax\n    unsigned short *v26;  // rdx\n    char v27[2];  // rax\n    unsigned long long v28;  // rsi\n    char v29[2];  // rsi\n    char v30[2];  // rdx\n    void *v31;  // r13\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rax\n    unsigned int|unsigned long v35;  // r15d\n    char *v36;  // rax\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // rax\n    char *v42;  // rax\n    unsigned long long v44;  // rax\n    unsigned long long v46;  // rdx\n    unsigned long long v47;  // rax\n    char v49[2];  // rdx\n    unsigned long long v50;  // rcx\n    unsigned long long v52;  // rdx\n    char *v56;  // rax\n    char v57[2];  // r12\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rbx\n    unsigned long long v60;  // r13\n\n    v9 = v8;\n    v1 = v10;\n    v5 = 0;\n    v6 = 0;\n    if (v12 != 0)\n    {\n        v12 = getenv(\"TERM\");\n        *((int *)&v2) = (*((char *)v12) != 0? v12 : \"none\");\n    }\n    else\n    {\n        v2 = \"none\";\n    }\n    v3 = 1;\n    v35 = 3;\n    v57 = \"# Configuration file for dircolors, a utility to help you set the\";\n    v14 = 0;\n    while (true)\n    {\n        v14 += 1;\n        if (v9 != 0)\n        {\n            v58 = __getdelim(&v5, &v6, 0xa, v9);\n            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v59 = v5;\n            }\n            else\n            {\n                free(v5);\n            }\n        }\n        else if (v57 != \"8.29\")\n        {\n            v15 = v57;\n            v57 = &((char [2])&v57[strlen(v57)])[1];\n        }\n        if (v9 == 0 && v57 == \"8.29\" || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) && v9 != 0)\n        {\n            return (unsigned long long)v3;\n        }\n        if (v9 == 0 && v57 != \"8.29\" || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v9 != 0)\n        {\n            while (true)\n            {\n                v17 = v15[0];\n                if ((*(&((char *)&v10[(unsigned long long)v15[0]])[1]) & 32) == 0)\n                {\n                    break;\n                }\n                v15 = &v15[1];\n            }\n            v18 = v15;\n        }\n    }\n    do\n    {\n        v18 = &v18[1];\n        v19 = (unsigned long long)v18[0];\n        v20 = (unsigned short)*((short *)((char *)v10 + 0x2 * v19));\n        v21 = (unsigned long long)(unsigned short)*((short *)((char *)v10 + 0x2 * v19)) >> 13;\n    }\n    while (((unsigned long long)(unsigned int)(rax<4> ^ 1) & (char)(v18[0] != 0)) != 0);\n    v0 = (unsigned long long)__ctype_b_loc();\n    v23 = (unsigned long long)(unsigned int)sub_405580();\n    if (v18[0] != 0)\n    {\n        v24 = *(v0);\n        do\n        {\n            v18 = &v18[1];\n            v25 = v18[0];\n            v26 = (unsigned long long)v18[0];\n        }\n        while ((*((char *)(v24 + (v25 << 1) + 1)) & 32) != 0);\n        if (v25 != 0)\n        {\n            v27 = v18;\n            if (v26 != 35)\n            {\n                while (true)\n                {\n                    v28 = &v27[1];\n                    if ((v27[1] != 35 & v27[1] != 0) == 0)\n                    {\n                        break;\n                    }\n                    v27 = v28;\n                }\n                if ((*((char *)(v24 + ((unsigned long long)v27[-1 + 7] << 1) + 1)) & 32) != 0)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = &v29[-1 + 7];\n                        if ((*((char *)(v24 + ((unsigned long long)v29[-1 + 7] << 1) + 1)) & 32) == 0)\n                        {\n                            break;\n                        }\n                        v29 = v30;\n                    }\n                }\n                v31 = (unsigned long long)(unsigned int)sub_405580();\n                if (v23 != 0 && v31 != 0)\n                {\n                    v32 = sub_402d60();\n                    if (v32 != 0)\n                    {\n                        v34 = *(v23);\n                        if (!(*(v23) != 46))\n                        {\n                            v36 = g_60f338;\n                            if (g_60f340 == g_60f338)\n                            {\n                                _obstack_newchunk();\n                                v36 = g_60f338;\n                            }\n                        }\n                        else if (v34 != 42)\n                        {\n                            v39 = sub_402d60();\n                            if (v39 != 0)\n                            {\n                                v41 = sub_402d60();\n                                if (v41 != 0)\n                                {\n                                    v44 = sub_402d60();\n                                    if (v44 != 0)\n                                    {\n                                        v46 = 0;\n                                        while (true)\n                                        {\n                                            v4 = v46;\n                                            v0 = v46;\n                                            v47 = sub_402d60();\n                                            if (v47 != 0)\n                                            {\n                                                v46 = v0 + 1;\n                                                if (v35 == 3)\n                                                {\n                                                    break;\n                                                }\n                                                if (v1 != 0)\n                                                {\n                                                    v50 = (unsigned int)sub_404bb0();\n                                                }\n                                                else\n                                                {\n                                                    v50 = dcgettext(0x0, 0x40960c, 0x5);\n                                                }\n                                                v0 = v50;\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4098b0, 0x5));\n                                                v3 = 0;\n                                            }\n                                            else\n                                            {\n                                                if (g_60f340 == g_60f338)\n                                                {\n                                                    _obstack_newchunk();\n                                                }\n                                                v49 = (&g_409e80)[(long long)(int)v4];\n                                                tmp_20 = g_60f338;\n                                                g_60f338 = &g_60f338[1];\n                                                *((char *)tmp_20) = v49[0];\n                                                if (g_60f340 == g_60f338)\n                                                {\n                                                    *((char *[2])&v0[0]) = v49;\n                                                    _obstack_newchunk();\n                                                    v49 = v0;\n                                                }\n                                                tmp_10 = g_60f338;\n                                                g_60f338 = &g_60f338[1];\n                                                v52 = v49[1];\n                                                *((unsigned long long *)tmp_10) = v52;\n                                                break;\n                                            }\n                                        }\n                                        if (v47 == 0)\n                                        {\n                                            tmp_6 = g_60f338;\n                                            g_60f338 = &g_60f338[1];\n                                            *((char *)tmp_6) = 61;\n                                            sub_402290();\n                                        }\n                                        else if (v47 == 0)\n                                        {\n                                            _obstack_newchunk();\n                                        }\n                                        else if (g_409fc0[1 + v0] == 0 && v47 != 0)\n                                        {\n                                            free(v23);\n                                            free(v31);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            sub_402290();\n                        }\n                    }\n                    else\n                    {\n                        v33 = sub_407910();\n                    }\n                }\n            }\n        }\n    }\n    if (v23 != 0 && (v25 == 0 || v26 == 35 || v18[0] == 0 || v31 == 0))\n    {\n        v60 = (unsigned int)sub_404bb0();\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409880, 0x5));\n        free(v23);\n        v3 = 0;\n    }\n    if (false)\n    {\n        v34 = *(v23);\n        v35 = 1;\n    }\n    if (*(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 == g_60f338 || *(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 != g_60f338)\n    {\n        g_60f338 = &v36[1];\n        *(v36) = 42;\n        sub_402290();\n        v42 = g_60f338;\n        if (g_60f340 == g_60f338)\n        {\n            _obstack_newchunk();\n            v42 = g_60f338;\n        }\n    }\n    if ((*(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 == g_60f338 || *(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 != g_60f338) && g_60f340 == g_60f338 || (*(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 == g_60f338 || *(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 != g_60f338) && g_60f340 != g_60f338)\n    {\n        g_60f338 = &v42[1];\n        *(v42) = 61;\n        sub_402290();\n        v56 = g_60f338;\n    }\n    if (v23 != 0 && v25 != 0 && v34 != 42 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && v39 != 0 && v41 != 0 && v44 != 0 && g_60f340 != g_60f338 || v34 == 42 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && g_60f340 == g_60f338)\n    {\n        _obstack_newchunk();\n    }\n    if (v23 != 0 && v25 != 0 && v34 != 42 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && v39 != 0 && v41 != 0 && v44 != 0 && g_60f340 != g_60f338 || v34 == 42 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && g_60f340 == g_60f338 || v34 == 42 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && g_60f340 != g_60f338)\n    {\n        tmp_6 = g_60f338;\n        g_60f338 = &g_60f338[1];\n        *((char *)tmp_6) = 61;\n        sub_402290();\n    }\n    if ((v23 != 0 && v25 != 0 && v34 != 42 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && v39 != 0 && v41 != 0 && v44 != 0 && g_60f340 != g_60f338 || v34 == 42 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && g_60f340 == g_60f338 || v34 == 42 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && *(v23) != 46 && g_60f340 != g_60f338) && g_60f340 == g_60f338 || ((*(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 == g_60f338 || *(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 != g_60f338) && g_60f340 == g_60f338 || (*(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 == g_60f338 || *(v23) == 46 && v23 != 0 && v25 != 0 && v32 != 0 && v26 != 35 && v18[0] != 0 && v31 != 0 && g_60f340 != g_60f338) && g_60f340 != g_60f338) && g_60f340 == g_60f338)\n    {\n        _obstack_newchunk();\n    }\n    if (...)\n    {\n        v56 = g_60f338;\n    }\n    if (...)\n    {\n        g_60f338 = &v56[1];\n        *(v56) = 58;\n    }\n    if (...)\n    {\n        free(v23);\n        free(v31);\n    }\n}\n"
        },
        {
            "funcName": "sub_4046e0",
            "funcStartAddr": "0x4046e0",
            "funcEndAddr": "0x404713",
            "decompiledFuncCode": "extern int512_t g_60f4a0;\n\nint sub_4046e0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60f4a0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60f4a0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_402dd0",
            "funcStartAddr": "0x402dd0",
            "funcEndAddr": "0x402dd8",
            "decompiledFuncCode": "extern char g_60f378;\n\nint sub_402dd0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60f378 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4089c0",
            "funcStartAddr": "0x4089c0",
            "funcEndAddr": "0x4089d5",
            "decompiledFuncCode": "int sub_4089c0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408350();\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x40565b",
            "decompiledFuncCode": "int sub_405620()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_407bf0();\n    }\n}\n"
        },
        {
            "funcName": "sub_402f60",
            "funcStartAddr": "0x402f60",
            "funcEndAddr": "0x4030e9",
            "decompiledFuncCode": "int sub_402f60()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v2;  // rdi\n    void *v3;  // rdx\n    unsigned int *v4;  // r14\n    unsigned int|char|unsigned long long v5;  // bl\n    unsigned long|unsigned long long v6;  // bpl\n    unsigned long long v7;  // rax\n    unsigned long|unsigned long long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned int|unsigned long|unsigned long long v10;  // r15\n    unsigned long long v15;  // rax\n\n    v0 = v2;\n    v5 = fileno(v3);\n    v4 = __errno_location();\n    if (!(v5 != 1))\n    {\n        v5 = 0;\n        v6 = 0;\n    }\n    else if (v5 != 2)\n    {\n        if (v5 != 0)\n        {\n            v5 = dup2(0x2, 0x2) != 2;\n        }\n    }\n    if (v5 == 2)\n    {\n        v5 = 0;\n    }\n    if (v5 == 0)\n    {\n        v5 = 0;\n        v6 = 0;\n        v8 = 0;\n    }\n    if (v5 == 2 || v5 != 1 && v5 != 0)\n    {\n        v6 = (char)(dup2(0x1, 0x1) != 1);\n    }\n    if (v5 == 1 || v5 == 2 || v5 != 0)\n    {\n        v7 = dup2(0x0, 0x0);\n        if (v7 != 0)\n        {\n            v8 = (unsigned int)sub_402f10();\n            if ((char)v8 != 0)\n            {\n            }\n            else\n            {\n                v8 = 1;\n                v9 = 0;\n            }\n        }\n        else\n        {\n            v8 = 0;\n        }\n        if (v6 != 0 && (v7 == 0 || (char)v8 != 0))\n        {\n            v6 = (unsigned int)sub_402f10();\n            if ((char)v6 == 0)\n            {\n                v10 = *(v4);\n                v9 = 0;\n                if (v5 != 0)\n                {\n                    close(0x2);\n                }\n            }\n        }\n        if ((v7 == 0 && v6 == 0 || v7 == 0 && (char)v6 != 0 || v6 == 0 && (char)v8 != 0 || (char)v6 != 0 && (char)v8 != 0) && v5 != 0)\n        {\n            v5 = (unsigned int)sub_402f10();\n            if ((char)v5 == 0)\n            {\n                v10 = *(v4);\n                v9 = 0;\n            }\n        }\n    }\n    if (v5 == 0 || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))\n    {\n        v9 = (unsigned int)sub_407b50();\n    }\n    if ((char)v5 != 0 || (char)v6 != 0)\n    {\n        v10 = *(v4);\n    }\n    if ((char)v5 == 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)))\n    {\n        close(0x2);\n    }\n    if ((char)v6 == 0 && v6 != 0 && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || ((char)v5 == 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 != 0)\n    {\n        close(0x1);\n    }\n    if (((char)v5 == 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 == 0 && v8 != 0 || ((char)v6 == 0 && v6 != 0 && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || ((char)v5 == 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v7 == 0 || (char)v8 != 0) && (v6 == 0 || (char)v6 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 != 0) && v8 != 0)\n    {\n        close(0x0);\n    }\n    if (...)\n    {\n        *((unsigned long *)&v4) = v10;\n    }\n    v15 = v9;\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_4052f0",
            "funcStartAddr": "0x4052f0",
            "funcEndAddr": "0x40530a",
            "decompiledFuncCode": "int sub_4052f0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_405540(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4046d0",
            "funcStartAddr": "0x4046d0",
            "funcEndAddr": "0x4046df",
            "decompiledFuncCode": "extern int512_t g_60f4a0;\n\nint sub_4046d0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60f4a0 : v1)) = v2;\n    return &g_60f4a0;\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x409580",
            "funcEndAddr": "0x409598",
            "decompiledFuncCode": "extern int512_t g_60f248;\n\nint sub_409580()\n{\n}\n"
        },
        {
            "funcName": "sub_408c10",
            "funcStartAddr": "0x408c10",
            "funcEndAddr": "0x408c25",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_408c10()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_402231",
            "funcStartAddr": "0x402231",
            "funcEndAddr": "0x402288",
            "decompiledFuncCode": "extern char g_60f308;\nextern unsigned long long g_60f310;\n\nint sub_402231()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60f308 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60f310 >= 0)\n            {\n                break;\n            }\n            g_60f310 = g_60f310 + 1;\n            *((long long *)(6352448 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60f308 = 1;\n        return sub_4021db();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407b50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407bea",
            "decompiledFuncCode": "int sub_407b50()\n{\n    void *v2;  // rax\n    unsigned long v3;  // rdi\n    unsigned int v4;  // r13d\n    unsigned long long v5;  // rax\n    unsigned int *v6;  // rax\n    unsigned short v7;  // dx\n    unsigned long long v9;  // rax\n    unsigned long v10;  // rdi\n    unsigned long long v13;  // rax\n\n    if (v2 != 0 && v3 != 0)\n    {\n        v4 = fileno(v2);\n        v5 = dup2(v4, v4);\n        if (v5 < 0)\n        {\n            v6 = __errno_location();\n            if (*(v6) == 9 && v4 != (unsigned int)v3)\n            {\n                v9 = dup2(v3, v4);\n                v3 = (unsigned int)open(\"/dev/null\", 0x80000, v7);\n                if (v9 >= 0)\n                {\n                    close(v10);\n                }\n                else\n                {\n                    close(v10);\n                }\n            }\n        }\n    }\n    if (v3 == 0 || v2 == 0 || v5 >= 0 || *(v6) != 9 || v9 < 0 && v4 != (unsigned int)v3)\n    {\n        v2 = (unsigned long long)freopen();\n        return v13;\n    }\n}\n"
        },
        {
            "funcName": "sub_40556c",
            "funcStartAddr": "0x40556c",
            "funcEndAddr": "0x405571",
            "decompiledFuncCode": "int sub_40556c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405df0",
            "funcStartAddr": "0x405df0",
            "funcEndAddr": "0x406826",
            "decompiledFuncCode": "int sub_405df0() { crash_skku;\n}"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "0x408cc0",
            "funcEndAddr": "0x408cd1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[8];\n    char field_50;\n} struct_0;\n\nint _obstack_begin()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rcx\n    unsigned long v3;  // r8\n\n    v1->field_50 = v1->field_50 & 254;\n    v1->field_38 = v2;\n    v1->field_40 = v3;\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "0x408d00",
            "funcEndAddr": "0x408df4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nint _obstack_newchunk()\n{\n    void tmp_23;  // tmp #23\n    void tmp_102;  // tmp #102\n    void tmp_108;  // tmp #108\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    unsigned long v3;  // r13\n    struct_1 *v4;  // rbp\n    char v5;  // al\n    unsigned long v6;  // rsi\n    unsigned long v9;  // rbx\n    unsigned long long v10;  // rcx\n    struct_0 *v11;  // r12\n    unsigned long long v12[2];  // r14\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n\n    v1 = 0;\n    v3 = v2->field_18 - v2->field_10;\n    v4 = v2->field_8;\n    v5 = [D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rsi<8>, Sub(Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE), Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE)), cc_ndep<8>);\n    tmp_23 = v6 + v2->field_18 - v2->field_10 + v2->field_30;\n    tmp_102 = v6 + v2->field_18 - v2->field_10 + v2->field_30 + (v2->field_18 - v2->field_10 >> 3) + 100;\n    tmp_108 = v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0;\n    v9 = (tmp_102 <= (tmp_108? v2->field_0 : tmp_23)? (v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0? v2->field_0 : v6 + v2->field_18 - v2->field_10 + v2->field_30) : tmp_102);\n    if (rax<8> == 0)\n    {\n        v10 = (char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Add(rsi<8>, (Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE) - Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE))), Load(addr=(rdi<8> + 0x30<64>), size=8, endness=Iend_LE), cc_ndep<8>);\n        if (v10 == 0)\n        {\n            v11 = v2;\n            v12 = (unsigned long long)(unsigned int)sub_408bf0();\n            if (v12 != 0)\n            {\n                v11->field_8 = v12;\n                v12[1] = v4;\n                v11->field_20 = (char *)v12 + v9;\n                v12[0] = (char *)v12 + v9;\n                v14 = &((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30);\n                v15 = memcpy(&((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30), v11->field_10, v3);\n                if ((v11->field_50 & 2) == 0)\n                {\n                    v15 = !(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1];\n                    if (v11->field_10 == (!(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1]))\n                    {\n                        v12[1] = v4->field_8;\n                        v15 = sub_408c10();\n                    }\n                }\n                v11->field_10 = v14;\n                v11->field_18 = v3 + v14;\n                v11->field_50 = v11->field_50 & 253;\n                return v15;\n            }\n        }\n    }\n    if (v12 == 0 || rax<8> != 0 || v10 != 0)\n    {\n        sub_408bb0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4049e0",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x4049f2",
            "decompiledFuncCode": "int sub_4049e0()\n{\n}\n"
        },
        {
            "funcName": "sub_402a50",
            "funcStartAddr": "0x402a50",
            "funcEndAddr": "0x402d5d",
            "decompiledFuncCode": "extern unsigned int g_409621;\nextern unsigned int g_40969e;\nextern unsigned int g_4098d0;\nextern unsigned int g_4098f8;\nextern unsigned int g_409a10;\nextern unsigned int g_409a40;\nextern unsigned int g_409a78;\nextern unsigned int g_409b80;\nextern unsigned int g_409bc8;\nextern unsigned int g_409be8;\nextern unsigned long long g_60f388;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_402a50()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v26;  // rax\n    char *v27;  // rdi\n    char *v28;  // rsi\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v31;  // cc_dep2\n    unsigned long v32;  // d\n    char *v36;  // rax\n    char *v37;  // rax\n    unsigned long long v38;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4098d0, 0x5), g_60f388);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409621, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4098f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409a10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409a40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409a78, 0x5), stdout);\n        v0 = \"[\";\n        v26 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v26 = &v2;\n            v27 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v28 = \"dircolors\";\n            v29 = 10;\n            if ((v30 > v31) - 0 - (v30 < v31) == 0)\n            {\n                break;\n            }\n            while (v29 != 0)\n            {\n                v29 -= 1;\n                v30 = *(v28);\n                v31 = *(v27);\n                v27 = &v27[v32];\n                v28 = &v28[v32];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40969e, 0x5));\n            v37 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40969e, 0x5));\n            v36 = setlocale(0x5, 0x0);\n            if (v36 != 0)\n            {\n                v38 = strncmp(v36, \"en_\", 0x3);\n            }\n            if (v36 == 0 || v38 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409bc8, 0x5));\n            }\n        }\n        if ((v3 == 0 || v37 != 0) && (v3 == 0 || strncmp(v37, \"en_\", 0x3) != 0) && (v3 != 0 || v36 != 0) && (v3 != 0 || v38 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409b80, 0x5));\n        }\n        if (v3 != 0 || v36 != 0 && v38 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409bc8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409be8, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404740",
            "funcStartAddr": "0x404740",
            "funcEndAddr": "0x40476b",
            "decompiledFuncCode": "extern char g_60f4a0;\n\nint sub_404740()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60f4a0 : v2);\n    *((int *)(tmp_11? &g_60f4a0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60f4a0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60f4a0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4049b0",
            "funcStartAddr": "0x4049b0",
            "funcEndAddr": "0x4049ba",
            "decompiledFuncCode": "int sub_4049b0()\n{\n}\n"
        },
        {
            "funcName": "sub_408920",
            "funcStartAddr": "0x408920",
            "funcEndAddr": "0x408976",
            "decompiledFuncCode": "extern unsigned int g_60f2b4;\nextern unsigned int g_60f2b8;\nextern unsigned int g_60f2bc;\nextern unsigned int g_60f4e0;\nextern unsigned int g_60f4e4;\nextern unsigned int g_60f4e8;\nextern unsigned long long g_60f4f0;\nextern unsigned long long g_60f520;\n\nint sub_408920()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60f4e0 = g_60f2bc;\n    g_60f4e4 = g_60f2b8;\n    v1 = (unsigned int)v2;\n    v0 = &g_60f4e0;\n    g_60f2bc = g_60f4e0;\n    g_60f520 = g_60f4f0;\n    g_60f2b4 = g_60f4e8;\n    return sub_408350();\n}\n"
        },
        {
            "funcName": "sub_404720",
            "funcStartAddr": "0x404720",
            "funcEndAddr": "0x404733",
            "decompiledFuncCode": "extern int512_t g_60f4a0;\n\nint sub_404720()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60f4a0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60f4a0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405660",
            "funcStartAddr": "0x405660",
            "funcEndAddr": "0x405738",
            "decompiledFuncCode": "extern unsigned int g_60f4d8;\n\nint sub_405660()\n{\n    unsigned long long v0;  // [bp-0x138]\n    unsigned long long v2;  // rdi\n    unsigned int v3[4];  // rbx\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned int|unsigned long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v3 = v2;\n    while (true)\n    {\n        while (true)\n        {\n            if ((unsigned int)v4 != 91)\n            {\n                v5 = v4 - 33;\n                if ((unsigned int)(v4 - 33) <= 31)\n                {\n                    v0 = 3221227009;\n                    if (v3[1] == 40 && ((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) != 0)\n                    {\n                        v3 = (unsigned long long)(unsigned int)sub_405660();\n                    }\n                    if ((unsigned int)v4 == 41 && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v3[1] != 40))\n                    {\n                        v8 = &v3[1];\n                        return v8;\n                    }\n                }\n                if (v3[1] != 40 || (unsigned int)v4 != 41)\n                {\n                    v3 = &v3[1];\n                    v4 = v3[1];\n                    if (v3[1] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                if (g_60f4d8 == 0)\n                {\n                    g_60f4d8 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v6 = v3[1];\n                if (v3[1] != 33 && ((unsigned int)v6 != 94 || g_60f4d8 >= 0))\n                {\n                    v3 = &v3[1];\n                }\n                if (v3[1] == 33 || (unsigned int)v6 == 94 && g_60f4d8 < 0)\n                {\n                    v6 = v3[1 + 1];\n                    v3 = &v3[1 + 1];\n                }\n                if (v6 == 93)\n                {\n                    v6 = v3[1];\n                    v3 = &v3[1];\n                }\n                while (true)\n                {\n                    v7 = &v3[1];\n                    if (v6 == 93)\n                    {\n                        break;\n                    }\n                    if (v6 != 0)\n                    {\n                        v6 = v3[0];\n                        v3 = v7;\n                    }\n                }\n                if (true)\n                {\n                    v4 = v3[1];\n                    if (v3[1] == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v6 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n        if ((unsigned int)v4 != 91 && ((unsigned int)(v4 - 33) > 31 || (unsigned int)v4 != 41) && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || (unsigned int)(v4 - 33) > 31 || v3[1] != 40))\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404ba0",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404baa",
            "decompiledFuncCode": "int sub_404ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_402f10",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x402f59",
            "decompiledFuncCode": "int sub_402f10()\n{\n    unsigned long long v1;  // rbx\n    unsigned short v2;  // dx\n    unsigned long v3;  // rax\n    unsigned int v4;  // edi\n    unsigned long long v6;  // rax\n\n    v1 = 1;\n    v3 = open(\"/dev/null\", 0x0, v2);\n    if (v4 != v3)\n    {\n        v1 = 0;\n        if (v3 >= 0)\n        {\n            close(v3);\n            *(__errno_location()) = 9;\n            return 0;\n        }\n    }\n    if (v4 == v3 || v3 < 0)\n    {\n        v6 = v1;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407d25",
            "decompiledFuncCode": "int sub_407c50()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_405860",
            "funcStartAddr": "0x405860",
            "funcEndAddr": "0x405db8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n} struct_0;\n\nextern char g_405a34;\nextern char g_405a6e;\nextern char g_405b08;\nextern char g_405b63;\nextern char g_405bd6;\nextern char g_405c03;\nextern char g_405c2d;\nextern char g_405c4f;\nextern char g_405ca5;\nextern char g_405ce5;\nextern char g_405d31;\nextern char g_405d46;\nextern char g_405d6c;\nextern char g_405db1;\nextern char g_405dca;\nextern char g_405de3;\nextern unsigned int g_60f4d8;\n\nint sub_405860()\n{\n    unsigned long long v0;  // [bp-0x1b0]\n    unsigned long v1;  // [bp-0x98]\n    char v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x80]\n    struct_0 *|unsigned int [3]|unsigned long long v4;  // [bp-0x78]\n    unsigned long long v5;  // [bp-0x70]\n    unsigned long v6;  // [bp-0x60]\n    unsigned int|unsigned int [3] v7;  // [bp-0x58]\n    unsigned int|unsigned long long *|unsigned long long v8;  // [bp-0x50]\n    unsigned long|unsigned long long|unsigned long long * v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x20]\n    unsigned long v11;  // [bp-0x18]\n    unsigned long v12;  // [bp-0x10]\n    unsigned long v13;  // [bp-0x8]\n    unsigned int v15;  // edi\n    unsigned long long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long long v18;  // rsi\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r13\n    unsigned int *|unsigned int [3] v22;  // r14\n    unsigned long long v23;  // rdx\n    unsigned long long v24;  // rax\n    unsigned int v25[3];  // rdx\n    unsigned long long v27;  // rbx\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rax\n    unsigned long long v31;  // r15\n    unsigned long long v33;  // rax\n    unsigned long long *v34;  // r13\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned int v37;  // r9d\n    char v38;  // r8b\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    unsigned long long *v43;  // r13\n    unsigned long long v44;  // r15\n    unsigned long long *v45;  // r13\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rax\n\n    v7 = v15;\n    v5 = v16;\n    v6 = v17;\n    v9 = 0;\n    rsp<8> = &v2;\n    v8 = wcslen(v18);\n    v20 = v4->field_4;\n    if (v4->field_4 != 0)\n    {\n        v22 = &v4->field_4;\n        v4 = v18;\n        v21 = 0;\n        while (true)\n        {\n            if ((unsigned int)v20 != 91)\n            {\n                while (true)\n                {\n                    v19 = v20 - 33;\n                    if ((unsigned int)(v20 - 33) <= 31)\n                    {\n                        v0 = 3221227009;\n                        rsp<8> = &v2;\n                        if (v22[1] == 40 && ((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) != 0)\n                        {\n                            v21 += 1;\n                            v22 = &v22[1];\n                            v20 = 40;\n                        }\n                        if ((unsigned int)v20 == 41 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40))\n                        {\n                            if (v21 != 0)\n                            {\n                                v20 = v22[1];\n                                v22 = &v22[1];\n                                if ((unsigned int)v20 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v27 = v4;\n                                if (v7 - 63 > 1)\n                                {\n                                    v8 = (v22 - &v4->field_4 >> 2) + 1;\n                                }\n                                v28 = v8;\n                                v29 = v8 * 4 + 15 & -8;\n                                if (v28 > 4611686018427387903 || ((v8 << 2) + 15 & -8) - 8 > 7991)\n                                {\n                                    break;\n                                }\n                                rsp<8> = &(&v2)[-1 * (v29 + 23 & -0x10) + -8];\n                                v13 = &g_405b08;\n                                *((int *)(unsigned long long)wmempcpy((&(&v2)[-1 * (v29 + 23 & -0x10) + 15] & -0x10) + 8)) = 0;\n                                v9 = &(&v2)[-1 * (v29 + 23 & -0x10) + 15] & -0x10;\n                                v43 = v9;\n                                *(v9) = 0;\n                                if (v9 == 0)\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v12 = &g_405de3;\n                                    __assert_fail(); /* do not return */\n                                }\n                                else if (v22[-1 + 1] == 41)\n                                {\n                                    v31 = v7 - 33;\n                                    switch (v7)\n                                    {\n                                    case 33:\n                                        if (v5 <= v6)\n                                        {\n                                            v8 = v9;\n                                            *((unsigned int *[3])&v7[0]) = v22;\n                                            while (true)\n                                            {\n                                                v34 = v8;\n                                                while (true)\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v12 = &g_405ca5;\n                                                    v35 = sub_405df0();\n                                                    if (v35 != 0)\n                                                    {\n                                                        v34 = *(v34);\n                                                        rsp<8> = rsp<8> - 8;\n                                                        v11 = &g_405ce5;\n                                                        v36 = sub_405df0();\n                                                        if (v36 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                                }\n                                                if (v35 == 0 || v34 == 0 && v36 != 0)\n                                                {\n                                                    v34 = v8;\n                                                }\n                                                else if (v35 == 0 || v34 == 0 && v36 != 0)\n                                                {\n                                                    v47 = 1;\n                                                }\n                                                else if (v34 == 0 && v35 != 0)\n                                                {\n                                                    v47 = 0;\n                                                }\n                                            }\n                                            if (true)\n                                            {\n                                                v47 = 1;\n                                            }\n                                            else\n                                            {\n                                                v47 = 0;\n                                            }\n                                        }\n                                    case 42:\n                                        rsp<8> = rsp<8> - 8;\n                                        v12 = &g_405b63;\n                                    case 43:\n                                        *((unsigned int *[3])&v4[0]) = v22;\n                                        v7 = v37 & 1;\n                                        v3 = v27 - 4;\n                                        while (true)\n                                        {\n                                            if (v5 <= v6)\n                                            {\n                                                v44 = v5;\n                                                v8 = v38;\n                                                do\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v12 = &g_405c2d;\n                                                    v39 = sub_405df0();\n                                                    if (v39 == 0)\n                                                    {\n                                                        if (v5 != v44)\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v11 = &g_405bd6;\n                                                            v41 = sub_405df0();\n                                                            if (v41 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v10 = &g_405c03;\n                                                            v42 = sub_405df0();\n                                                            if (v42 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v11 = &g_405c4f;\n                                                            v40 = sub_405df0();\n                                                            if (v40 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        v43 = v9;\n                                                    }\n                                                    v44 += 4;\n                                                }\n                                                while (v6 >= v44);\n                                                if (v39 == 0)\n                                                {\n                                                    v47 = 0;\n                                                }\n                                                else if (v39 != 0 || v5 == v44 && v40 != 0 || v42 != 0 && v5 != v44 && v41 != 0)\n                                                {\n                                                    v45 = *(v43);\n                                                    v9 = v45;\n                                                }\n                                            }\n                                            v45 = *(v43);\n                                            v9 = v45;\n                                        }\n                                        if (true)\n                                        {\n                                            v47 = 0;\n                                        }\n                                        else if (v45 == 0)\n                                        {\n                                            v47 = 1;\n                                        }\n                                    case 63:\n                                        rsp<8> = rsp<8> - 8;\n                                        v12 = &g_405d6c;\n                                        v33 = sub_405df0();\n                                        if (v33 == 0)\n                                        {\n                                            v47 = 0;\n                                            break;\n                                        }\n                                    case 64:\n                                        while (true)\n                                        {\n                                            rsp<8> = rsp<8> - 8;\n                                            v12 = &g_405d31;\n                                            wcscat((unsigned int)v43 + 8, (unsigned int)v22);\n                                            rsp<8> = rsp<8> - 8;\n                                            v11 = &g_405d46;\n                                            v46 = sub_405df0();\n                                            if (v46 != 0)\n                                            {\n                                                v43 = *(v43);\n                                                v9 = v43;\n                                                if (v43 == 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v47 = 0;\n                                            }\n                                        }\n                                        if (v46 != 0)\n                                        {\n                                            v47 = 1;\n                                        }\n                                        else if (v46 == 0)\n                                        {\n                                            return v47;\n                                        }\n                                    default:\n                                        rsp<8> = rsp<8> - 8;\n                                        v12 = &g_405db1;\n                                        __assert_fail(); /* do not return */\n                                    }\n                                    v47 = 1;\n                                    v47 = 0;\n                                }\n                                else\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v12 = &g_405dca;\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                        }\n                    }\n                    else if ((unsigned int)v20 == 124)\n                    {\n                        if (v21 == 0)\n                        {\n                            v23 = v8;\n                            if (v7 - 63 > 1)\n                            {\n                                v23 = (v22 - &v4->field_4 >> 2) + 1;\n                            }\n                            v24 = v23 * 4 + 15 & -8;\n                            if (v23 > 4611686018427387903 || ((v23 << 2) + 15 & -8) - 8 > 7991)\n                            {\n                                break;\n                            }\n                            rsp<8> = &(&v2)[-1 * (v24 + 23 & -0x10) + -8];\n                            v13 = &g_405a34;\n                            *((int *)(unsigned long long)wmempcpy((&(&v2)[-1 * (v24 + 23 & -0x10) + 15] & -0x10) + 8)) = 0;\n                            v20 = v22[1];\n                            v22 = &v22[1];\n                            *((long long *)v9) = 0;\n                            v9 = &(&v2)[-1 * (v24 + 23 & -0x10) + 15] & -0x10;\n                        }\n                    }\n                    if ((unsigned int)v20 != 124 && (unsigned int)(v20 - 33) > 31 || v21 != 0 && (unsigned int)(v20 - 33) > 31 || ((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 && (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 || (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 && v22[1] != 40)\n                    {\n                        v20 = v22[1];\n                        v22 = &v22[1];\n                    }\n                }\n                if ((unsigned int)v20 == 124 && v21 == 0 && (unsigned int)(v20 - 33) > 31 || (unsigned int)v20 == 124 && v21 == 0 && ((v23 << 2) + 15 & -8) - 8 <= 7991 && (unsigned int)(v20 - 33) > 31 || (unsigned int)v20 == 41 && v21 == 0 && ((v8 << 2) + 15 & -8) - 8 <= 7991 && (unsigned int)(v20 - 33) <= 31 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40) || (unsigned int)v20 == 41 && v21 == 0 && (unsigned int)(v20 - 33) <= 31 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40) || (unsigned int)v20 == 41 && (unsigned int)v20 == 0 && (unsigned int)(v20 - 33) <= 31 && v21 != 0 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40))\n                {\n                    v47 = -18446744069414584321;\n                }\n                else if ((unsigned int)v20 != 124 && (unsigned int)(v20 - 33) > 31 || v21 != 0 && (unsigned int)(v20 - 33) > 31 || ((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 && (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 || v23 <= 4611686018427387903 && ((v23 << 2) + 15 & -8) - 8 <= 7991 && (unsigned int)(v20 - 33) > 31 || (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 && v22[1] != 40)\n                {\n                    if ((unsigned int)v20 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (...)\n                {\n                    return v47;\n                }\n            }\n            else\n            {\n                if (g_60f4d8 == 0)\n                {\n                    v3 = &v4->field_4;\n                    rsp<8> = rsp<8> - 8;\n                    v1 = &g_405a6e;\n                    g_60f4d8 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v20 = v22[1];\n                if (v22[1] != 33 && (v20 != 94 || g_60f4d8 >= 0))\n                {\n                    v25 = &v22[1];\n                }\n                if (v22[1] == 33 || v20 == 94 && g_60f4d8 < 0)\n                {\n                    v25 = &v22[1];\n                    v20 = v22[1];\n                }\n                if (v20 == 93)\n                {\n                    v20 = v25[1];\n                    v25 = &v25[1];\n                }\n                while (true)\n                {\n                    v22 = &v25[1];\n                    if (v20 != 93)\n                    {\n                        if (v20 == 0)\n                        {\n                            break;\n                        }\n                        v20 = *(v22);\n                        v25 = v22;\n                    }\n                    else\n                    {\n                        v20 = v25[1];\n                    }\n                }\n                if (v20 != 93)\n                {\n                    v47 = -18446744069414584321;\n                }\n            }\n        }\n        if (true)\n        {\n            v47 = -18446744069414584321;\n        }\n        else if ((unsigned int)v20 != 91)\n        {\n            return v47;\n        }\n    }\n    v47 = -18446744069414584321;\n    return v47;\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4051a9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405150()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_404d50();\n}\n"
        },
        {
            "funcName": "sub_409598",
            "funcStartAddr": "0x409598",
            "funcEndAddr": "0x4095b8",
            "decompiledFuncCode": "extern unsigned long long g_60ee30;\n\nint sub_409598()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60ee30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4049c0",
            "funcStartAddr": "0x4049c0",
            "funcEndAddr": "0x4049d6",
            "decompiledFuncCode": "int sub_4049c0()\n{\n}\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a18",
            "decompiledFuncCode": "int sub_408a00()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_408350();\n}\n"
        },
        {
            "funcName": "sub_407d30",
            "funcStartAddr": "0x407d30",
            "funcEndAddr": "0x40832e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40c918;\nextern unsigned int g_40c938;\nextern unsigned int g_40c968;\nextern unsigned int g_40c988;\nextern unsigned int g_40c9b8;\nextern unsigned int g_40ca09;\nextern unsigned long long stderr;\n\nint sub_407d30()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long *|unsigned long long v19;  // rbx\n    unsigned int|unsigned long|unsigned long long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (*((int *)(v19 + 24)) != *((int *)(v27 + 24)) || v29 != 0 || *((int *)(v19 + 8)) != *((int *)(v27 + 8)) || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c918, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c938, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x40ca09, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 += 32;\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((*(v19) == 0 || v22 == 0) && (*(v19) == 0 || v23 == v17) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c9b8, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c988, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if (*(v15) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v25 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0) && (*((long long *)v18) != 0 || v36 != 0))\n        {\n            return v46;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0 || v36 == 0 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x40c968, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_405540",
            "funcStartAddr": "0x405540",
            "funcEndAddr": "0x40556c",
            "decompiledFuncCode": "extern unsigned int g_40c28f;\nextern unsigned int g_60f258;\n\nint sub_405540()\n{\n    dcgettext(0x0, 0x40c28f, 0x5);\n    error(g_60f258, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_404d30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d46",
            "decompiledFuncCode": "int sub_404d30()\n{\n}\n"
        },
        {
            "funcName": "sub_408c25",
            "funcStartAddr": "0x408c25",
            "funcEndAddr": "0x408cb0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\nint sub_408c25()\n{\n    unsigned long long v0;  // [bp-0x18]\n    void tmp_35;  // tmp #35\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rdi\n    struct_0 *v7;  // rbx\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // r12\n    unsigned long v11;  // rsi\n    unsigned long long v12[2];  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // r12\n\n    v2 = v4;\n    v1 = stack_base + 0;\n    v0 = v5;\n    v7 = v6;\n    if (v8 != 0)\n    {\n        v9 = v8;\n        v10 = v8 - 1;\n    }\n    else\n    {\n        v10 = 15;\n        v9 = 16;\n    }\n    v7->field_30 = v10;\n    *((int *)&v7->field_0) = (v11 == 0? 4064 : v11);\n    v12 = sub_408bf0();\n    v7->field_8 = v12;\n    if (v12 != 0)\n    {\n        tmp_35 = v7->field_0;\n        v7->field_10 = 0 - v9 & &((unsigned long long [2])&((char *)v12)[v10])[2];\n        v7->field_18 = 0 - v9 & &((unsigned long long [2])&((char *)v12)[v10])[2];\n        v12[0] = tmp_35 + (char *)v12;\n        v7->field_20 = tmp_35 + (char *)v12;\n        v12[1] = 0;\n        v7->field_50 = v7->field_50 & 249;\n        v13 = v0;\n        v14 = v2;\n        return 1;\n    }\n    sub_408bb0(); /* do not return */\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408cf5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    char field_50;\n} struct_0;\n\nint _obstack_begin_1()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rcx\n    unsigned long v3;  // r8\n    unsigned long v4;  // r9\n\n    v1->field_50 = v1->field_50 | 1;\n    v1->field_38 = v2;\n    v1->field_40 = v3;\n    v1->field_48 = v4;\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x405533",
            "decompiledFuncCode": "int sub_405520()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_405340",
            "funcStartAddr": "0x405340",
            "funcEndAddr": "0x405342",
            "decompiledFuncCode": "int sub_405340()\n{\n}\n"
        },
        {
            "funcName": "sub_408980",
            "funcStartAddr": "0x408980",
            "funcEndAddr": "0x408998",
            "decompiledFuncCode": "int sub_408980()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_408920();\n}\n"
        },
        {
            "funcName": "sub_402ee0",
            "funcStartAddr": "0x402ee0",
            "funcEndAddr": "0x402f07",
            "decompiledFuncCode": "int sub_402ee0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_402de0",
            "funcStartAddr": "0x402de0",
            "funcEndAddr": "0x402e7e",
            "decompiledFuncCode": "extern unsigned int g_40b152;\nextern unsigned int g_60f258;\nextern char g_60f378;\nextern unsigned long long g_60f380;\n\nint sub_402de0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_408ee0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60f378 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40b152, 0x5);\n            if (g_60f380 != 0)\n            {\n                sub_404b80();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60f378 != 0)\n    {\n        v3 = sub_408ee0();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_60f378 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60f258);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_407bf0",
            "funcStartAddr": "0x407bf0",
            "funcEndAddr": "0x407c46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_407bf0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404b70",
            "funcStartAddr": "0x404b70",
            "funcEndAddr": "0x404b7d",
            "decompiledFuncCode": "int sub_404b70()\n{\n}\n"
        },
        {
            "funcName": "sub_4089e0",
            "funcStartAddr": "0x4089e0",
            "funcEndAddr": "0x4089f6",
            "decompiledFuncCode": "int sub_4089e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408920();\n}\n"
        },
        {
            "funcName": "sub_40480b",
            "funcStartAddr": "0x40480b",
            "funcEndAddr": "0x4048d1",
            "decompiledFuncCode": "int sub_40480b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4032b0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4052f0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4032b0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404770",
            "funcStartAddr": "0x404770",
            "funcEndAddr": "0x4047e2",
            "decompiledFuncCode": "extern int512_t g_60f4a0;\n\nint sub_404770()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60f4a0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4032b0();\n}\n"
        },
        {
            "funcName": "sub_402dc0",
            "funcStartAddr": "0x402dc0",
            "funcEndAddr": "0x402dc8",
            "decompiledFuncCode": "extern unsigned long long g_60f380;\n\nint sub_402dc0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60f380 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404ce0",
            "funcStartAddr": "0x404ce0",
            "funcEndAddr": "0x404cea",
            "decompiledFuncCode": "int sub_404ce0()\n{\n}\n"
        },
        {
            "funcName": "sub_403110",
            "funcStartAddr": "0x403110",
            "funcEndAddr": "0x4031a9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60f388;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403110()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60f388 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404d50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x4050f9",
            "decompiledFuncCode": "extern unsigned int g_40bef8;\nextern unsigned int g_40bf04;\nextern unsigned int g_40bf0b;\nextern unsigned int g_40bf0f;\nextern unsigned int g_40bf1f;\nextern unsigned int g_40bf36;\nextern unsigned int g_40bf98;\nextern unsigned int g_40c068;\nextern unsigned int g_40c088;\nextern unsigned int g_40c0b0;\nextern unsigned int g_40c0d8;\nextern unsigned int g_40c108;\nextern unsigned int g_40c260;\n\nint sub_404d50()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x40bef8, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x40bf04, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x40c260, dcgettext(0x0, 0x40bf0b, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40bf98, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40bf0f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40bf1f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40bf36, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x40c068, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x40c088, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x40c0b0, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x40c0d8, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x40c108, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_4021db",
            "funcStartAddr": "0x4021db",
            "funcEndAddr": "0x4021fa",
            "decompiledFuncCode": "extern unsigned long long g_60f2c8;\n\nint sub_4021db()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_60f2c8;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404990",
            "funcStartAddr": "0x404990",
            "funcEndAddr": "0x4049a1",
            "decompiledFuncCode": "int sub_404990()\n{\n}\n"
        },
        {
            "funcName": "sub_404cc0",
            "funcStartAddr": "0x404cc0",
            "funcEndAddr": "0x404cd3",
            "decompiledFuncCode": "int sub_404cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_4054f0",
            "funcStartAddr": "0x4054f0",
            "funcEndAddr": "0x405518",
            "decompiledFuncCode": "int sub_4054f0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4052f0();\n}\n"
        },
        {
            "funcName": "sub_408a20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a8f",
            "decompiledFuncCode": "extern unsigned long long g_40ca2f;\n\nint sub_408a20()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40ca2f;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_408f40() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4031b0",
            "funcStartAddr": "0x4031b0",
            "funcEndAddr": "0x40328f",
            "decompiledFuncCode": "extern int512_t g_40b1b6;\nextern int512_t g_40b1ba;\n\nint sub_4031b0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_408fa0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40b1b6 : 4239809);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40b1ba : 4239805);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405270",
            "funcStartAddr": "0x405270",
            "funcEndAddr": "0x4052e4",
            "decompiledFuncCode": "extern unsigned int g_40bf52;\nextern unsigned int g_40bf7d;\nextern unsigned int g_40c1b0;\n\nint sub_405270()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bf52, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bf7d, 0x5));\n    dcgettext(0x0, 0x40c1b0, 0x5);\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401d70",
            "funcEndAddr": "0x402197",
            "decompiledFuncCode": "extern unsigned int g_4096b9;\nextern unsigned int g_409719;\nextern unsigned int g_409c20;\nextern unsigned int g_409c90;\nextern unsigned int g_409cf8;\nextern unsigned int g_409d38;\nextern unsigned int g_40bf00;\nextern unsigned int g_40ca2f;\nextern unsigned int g_60f2bc;\nextern unsigned long long g_60f330;\nextern unsigned long long g_60f338;\nextern unsigned long long g_60f340;\nextern char g_60f370;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint main()\n{\n    unsigned int|char|unsigned long v1;  // r13\n    unsigned long long v2;  // rbp\n    unsigned long long v5;  // rax\n    char *v6;  // rdi\n    unsigned int v7;  // r12d\n    char *v10;  // rbx\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // rbx\n    char *v14;  // rdi\n    unsigned long long v15;  // rcx\n    char v16;  // cc_dep2\n    unsigned long v17;  // d\n    char *v18;  // rax\n    unsigned long v21;  // rdi\n    unsigned long long *v23;  // rsi\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rbp\n    unsigned long long v26;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rbx\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rdx\n    char *v32;  // r14\n\n    v1 = 2;\n    v2 = 0;\n    sub_403110();\n    setlocale(0x6, 0x40ca2f);\n    bindtextdomain(0x4096b9, 0x409c20);\n    textdomain(0x4096b9);\n    sub_409580();\n    while (true)\n    {\n        v5 = sub_4089a0();\n        if ((unsigned int)v5 == -1)\n        {\n            v7 = (unsigned int)v6 - g_60f2bc;\n            if ((unsigned int)v1 != 2 && v2 != 0)\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409c90, 0x5));\n            }\n            if ((unsigned int)v1 == 2 || v2 == 0)\n            {\n                if (((unsigned int)v2 ^ 1) >= (unsigned int)v6 - g_60f2bc)\n                {\n                    if (v2 != 0)\n                    {\n                        v10 = \"# Configuration file for dircolors, a utility to help you set the\";\n                        do\n                        {\n                            puts(v10);\n                            v14 = v10;\n                            v15 = -1;\n                            while (v15 != 0)\n                            {\n                                v15 -= 1;\n                                v16 = *(v14);\n                                v14 = &v14[v17];\n                                break;\n                            }\n                            v10 = (char *)(0x40a100 + !(rcx<8>));\n                        }\n                        while ((char *)(0x40a100 + !(rcx<8>)) - \"# Configuration file for dircolors, a utility to help you set the\" <= 4172);\n                    }\n                    else\n                    {\n                        if ((unsigned int)v1 == 2)\n                        {\n                            v18 = getenv(\"SHELL\");\n                            if (v18 != 0 && *(v18) != 0)\n                            {\n                                v1 = (unsigned int)sub_402e80();\n                                if (strcmp(v6, \"csh\") != 0)\n                                {\n                                    v6 = v1;\n                                    v1 = 0;\n                                    v1 = strcmp(v21, \"t\") == 0;\n                                }\n                                else\n                                {\n                                    v1 = 1;\n                                }\n                            }\n                            if (v18 == 0 || *(v18) == 0)\n                            {\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x409cf8, 0x5));\n                            }\n                        }\n                        if ((unsigned int)v1 != 2 || v18 != 0 && *(v18) != 0)\n                        {\n                            _obstack_begin();\n                            if (v7 != 0)\n                            {\n                                v24 = strcmp(v23[(long long)(int)g_60f2bc], \"-\");\n                                if (v24 != 0)\n                                {\n                                    v26 = sub_402f60();\n                                }\n                                if (v24 == 0 || v26 != 0)\n                                {\n                                    v28 = sub_4055a0();\n                                    if (v28 == 0)\n                                    {\n                                        v25 = (unsigned int)sub_402480();\n                                    }\n                                }\n                                if ((v26 == 0 || v28 != 0) && (v24 != 0 || v28 != 0))\n                                {\n                                    v29 = (unsigned int)sub_404bb0();\n                                    error(0x0, *(__errno_location()), \"%s\");\n                                }\n                            }\n                            else\n                            {\n                                v25 = (unsigned int)sub_402480();\n                            }\n                            if (v7 == 0 || v24 == 0 && v28 == 0 || v28 == 0 && v26 != 0)\n                            {\n                                if (v25 == 0)\n                                {\n                                    break;\n                                }\n                                v30 = g_60f338;\n                                if (g_60f338 == g_60f330)\n                                {\n                                    g_60f370 = g_60f370 | 2;\n                                }\n                                v31 = g_60f340;\n                                *((int *)&g_60f338) = (!((rax<8> + *((long long *)6353744) & !(*((long long *)6353744))) - *((long long *)6353704) <= g_60f340 - *((long long *)6353704))? v31 : rax<8> + *((long long *)6353744) & !(*((long long *)6353744)));\n                                *((int *)&g_60f330) = (!((rax<8> + *((long long *)6353744) & !(*((long long *)6353744))) - *((long long *)6353704) <= g_60f340 - *((long long *)6353704))? v31 : rax<8> + *((long long *)6353744) & !(*((long long *)6353744)));\n                                v32 = (v1 != 0? \"'\\n\" : \"';\\nexport LS_COLORS\\n\");\n                                fputs_unlocked((v1 != 0? \"setenv LS_COLORS \" : \"LS_COLORS='\"), stdout);\n                                fwrite_unlocked(g_60f330, 0x1, g_60f338 - g_60f330, stdout);\n                                fputs_unlocked(v32, stdout);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    if (v2 != 0)\n                    {\n                        v12 = (unsigned int)sub_404d30();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409719, 0x5));\n                        __fprintf_chk(stderr, 0x1, 0x40bf00, dcgettext(0x0, 0x409d38, 0x5));\n                    }\n                    else\n                    {\n                        v11 = (unsigned int)sub_404d30();\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409719, 0x5));\n                    }\n                }\n            }\n        }\n        else if ((unsigned int)v5 != 98)\n        {\n            if (v5 > 98)\n            {\n                if ((unsigned int)v5 == 99)\n                {\n                    v1 = 1;\n                }\n                if ((unsigned int)v5 == 112)\n                {\n                    v2 = 1;\n                }\n            }\n            else\n            {\n                if ((unsigned int)v5 == -131)\n                {\n                    sub_4051b0();\n                    exit(0x0); /* do not return */\n                }\n                if ((unsigned int)v5 == -130)\n                {\n                    sub_402a50(); /* do not return */\n                }\n            }\n        }\n        if ((unsigned int)v5 == 98)\n        {\n            v1 = 0;\n        }\n        if ((unsigned int)v5 == -1 && ((unsigned int)v2 ^ 1) < (unsigned int)v6 - g_60f2bc && ((unsigned int)v1 == 2 || v2 == 0) || (unsigned int)v5 == -1 && (unsigned int)v1 != 2 && v2 != 0 || v5 <= 98 && (unsigned int)v5 != -1 && (unsigned int)v5 != -131 && (unsigned int)v5 != 98 && (unsigned int)v5 != -130 || (unsigned int)v5 != -1 && v5 > 98 && (unsigned int)v5 != 112 && (unsigned int)v5 != 99 && (unsigned int)v5 != 98)\n        {\n            sub_402a50(); /* do not return */\n        }\n    }\n    return (unsigned long long)(stack_base + 0);\n}\n"
        },
        {
            "funcName": "sub_4048e0",
            "funcStartAddr": "0x4048e0",
            "funcEndAddr": "0x4048ea",
            "decompiledFuncCode": "int sub_4048e0()\n{\n}\n"
        },
        {
            "funcName": "sub_402d60",
            "funcStartAddr": "0x402d60",
            "funcEndAddr": "0x402db4",
            "decompiledFuncCode": "int sub_402d60()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned int|unsigned long v4;  // r8d\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdx\n    unsigned int v9;  // r9d\n\n    v1 = 0;\n    if (v2 != v3)\n    {\n        v8 = 0;\n        do\n        {\n            v4 = (char)*((char *)(v2 + v8));\n            v5 = (char)*((char *)(v2 + v8));\n            if ((unsigned int)((unsigned long long)(char)*((char *)(v2 + v8)) - 65) <= 25)\n            {\n                v4 = (unsigned long long)v4 + 32;\n                v5 = (unsigned int)v5 + 32;\n            }\n            v6 = (char)*((char *)(v3 + v8));\n            v7 = (char)*((char *)(v3 + v8));\n            if ((unsigned int)((unsigned long long)(char)*((char *)(v3 + v8)) - 65) <= 25)\n            {\n                v6 = (unsigned int)v6 + 32;\n                v7 = (unsigned int)v7 + 32;\n            }\n            if (v5 == 0)\n            {\n                break;\n            }\n            v8 += 1;\n        }\n        while (v5 == v7);\n        v9 = v6;\n        v1 = v4 - v9;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x408e40",
            "funcEndAddr": "0x408ea5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[40];\n    char field_50;\n} struct_0;\n\nint _obstack_free()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbp\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v8[2];  // rsi\n\n    v2 = v1;\n    v8 = v3->field_8;\n    v4 = v3;\n    if (v3->field_8 != 0)\n    {\n        while (true)\n        {\n            if (v8 < v2)\n            {\n                v5 = *(v8);\n                if (*(v8) >= v2)\n                {\n                    v4->field_18 = v2;\n                    v4->field_10 = v2;\n                    v4->field_20 = v5;\n                    v4->field_8 = v8;\n                    return v5;\n                }\n            }\n            if (*(v8) < v2 || v8 >= v2)\n            {\n                v6 = v8[1];\n                v4->field_50 = v4->field_50 | 2;\n                v8 = v6;\n                if (v6 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v2 != 0)\n    {\n        abort(); /* do not return */\n    }\n    return sub_408c10();\n}\n"
        },
        {
            "funcName": "sub_402e80",
            "funcStartAddr": "0x402e80",
            "funcEndAddr": "0x402ed2",
            "decompiledFuncCode": "int sub_402e80()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_404a70",
            "funcStartAddr": "0x404a70",
            "funcEndAddr": "0x404ad9",
            "decompiledFuncCode": "int sub_404a70()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4044e0();\n}\n"
        },
        {
            "funcName": "sub_404a00",
            "funcStartAddr": "0x404a00",
            "funcEndAddr": "0x404a6d",
            "decompiledFuncCode": "int sub_404a00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4044e0();\n}\n"
        },
        {
            "funcName": "sub_4054c0",
            "funcStartAddr": "0x4054c0",
            "funcEndAddr": "0x4054ee",
            "decompiledFuncCode": "int sub_4054c0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_405540(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4044e0",
            "funcStartAddr": "0x4044e0",
            "funcEndAddr": "0x404680",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60f298;\nextern uint128_t g_60f2a0;\nextern unsigned int g_60f2b0;\nextern int512_t g_60f3a0;\n\nint sub_4044e0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60f298;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60f2b0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60f298 != 6353568)\n            {\n                v16 = sub_405350();\n                g_60f298 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_405350();\n                v17 = v15;\n                g_60f298 = v15;\n                *(v15) = g_60f2a0;\n            }\n            memset(&v17[(long long)(int)g_60f2b0], 0x0, (int)((unsigned int)v13 + 1 - g_60f2b0) * 16);\n            g_60f2b0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_405540(); /* do not return */\n        }\n    }\n    if (g_60f2b0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4032b0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6353824)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4052f0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4032b0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d10",
            "funcStartAddr": "0x404d10",
            "funcEndAddr": "0x404d21",
            "decompiledFuncCode": "int sub_404d10()\n{\n}\n"
        },
        {
            "funcName": "sub_404c90",
            "funcStartAddr": "0x404c90",
            "funcEndAddr": "0x404c99",
            "decompiledFuncCode": "int sub_404c90()\n{\n}\n"
        },
        {
            "funcName": "sub_407910",
            "funcStartAddr": "0x407910",
            "funcEndAddr": "0x407b46",
            "decompiledFuncCode": "extern char g_407a30;\nextern int512_t g_407a39;\nextern int512_t g_407a54;\nextern int512_t g_407a70;\nextern int512_t g_407b16;\n\nint sub_407910()\n{\n    void tmp_8;  // tmp #8\n    unsigned int v0;  // [bp-0x5c]\n    char v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // rax\n    unsigned long long v12;  // r13\n    unsigned long long v13;  // rax\n    char *v14;  // rsi\n    unsigned long long v16;  // rax\n    unsigned long v17;  // rax\n    unsigned long v18;  // rdi\n    unsigned int v21;  // r15d\n    unsigned long long v22;  // rax\n    void *v23;  // r14\n    unsigned long long v25;  // rax\n\n    v2 = v6;\n    v7 = __ctype_get_mb_cur_max();\n    if (v7 != 1)\n    {\n        v3 = 0;\n        v9 = (unsigned long long)mbsrtowcs(0x0, (unsigned int)&v2, 0x0, (unsigned int)&v3) + 1;\n        if (v9 + 1 != 0)\n        {\n            v10 = mbsinit((unsigned int)&v3);\n            if (v10 != 0)\n            {\n                v12 = (unsigned long long)mbsrtowcs(0x0, (unsigned int)&v1, 0x0, (unsigned int)&v3) + 1;\n                if (v12 + 1 != 0)\n                {\n                    v13 = mbsinit((unsigned int)&v3);\n                    if (v13 != 0)\n                    {\n                        v17 = v9 + v12;\n                        if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v17 <= 4611686018427387903)\n                        {\n                            v18 = v17 * 4;\n                            if (v17 <= 1999)\n                            {\n                                tmp_8 = stack_base + -104 - (v18 + 23 & -0x10);\n                                v21 = (stack_base + -104 - (v18 + 23 & -0x10) + 15 & -0x10) + v9 * 4;\n                                v4 = &g_407a30;\n                                mbsrtowcs(stack_base + -104 - (v18 + 23 & -0x10) + 15 & -0x10, (unsigned int)&v2, v9, (unsigned int)&v3);\n                                rsp<8> = tmp_8 - 8 - 8;\n                                *((long long **)(tmp_8 - 8 - 8)) = &g_407a39;\n                                v22 = mbsinit((unsigned int)&v3);\n                                if (v22 != 0)\n                                {\n                                    *((long long **)(tmp_8 - 8 - 8 - 8)) = &g_407a54;\n                                    mbsrtowcs(v21, (unsigned int)&v1, v12, (unsigned int)&v3);\n                                    *((long long **)(tmp_8 - 8 - 8 - 8 - 8)) = &g_407a70;\n                                    v16 = sub_405df0();\n                                }\n                            }\n                            else\n                            {\n                                v23 = malloc(v18);\n                                if (v23 != 0)\n                                {\n                                    mbsrtowcs((unsigned int)v23, (unsigned int)&v2, v9, (unsigned int)&v3);\n                                    rsp<8> = stack_base + -112;\n                                    v25 = mbsinit((unsigned int)&v3);\n                                    if (v25 != 0)\n                                    {\n                                        mbsrtowcs((unsigned int)(v23 + v9 * 4), (unsigned int)&v1, v12, (unsigned int)&v3);\n                                        v0 = sub_405df0();\n                                        free(v23);\n                                        v16 = v0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n    }\n    if (v9 + 1 == 0 || v7 == 1 || v12 + 1 == 0 && v10 != 0)\n    {\n        strlen(v14);\n        v16 = sub_406e20();\n    }\n    if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>) && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 || !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v17 > 4611686018427387903 && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 || v23 == 0 && v17 <= 4611686018427387903 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v17 > 1999 && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0)\n    {\n        *(__errno_location()) = 12;\n        v16 = -18446744069414584321;\n    }\n    if (v17 <= 4611686018427387903 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v23 != 0 && v17 > 1999 && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 && v25 == 0 || v17 <= 1999 && v17 <= 4611686018427387903 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 && v22 == 0)\n    {\n        rsp<8> = rsp<8> - 8;\n        *((long long **)rsp<8>) = &g_407b16;\n        __assert_fail(); /* do not return */\n    }\n    if (...)\n    {\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_408aa0",
            "funcStartAddr": "0x408aa0",
            "funcEndAddr": "0x408b83",
            "decompiledFuncCode": "int sub_408aa0()\n{\n    unsigned long long v1;  // rdx\n    void *v2;  // dil\n    char|unsigned long v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    void *v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while (*((char *)v2) != (char)v3 && (v2 & 7) != 0 && v1 != 1);\n            if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if (true)\n            {\n                return 0;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            if ((v2 & 7) == 0 || v1 > 7)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v1 > 7) && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if ((char)v6[-1] == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v1 > 7) && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 && v1 > 7 || v3 == *((char *)v2) && (v2 & 7) != 0 && v1 != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v1 > 7) && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 && v1 > 7 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v1 <= 7 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_4055a0",
            "funcStartAddr": "0x4055a0",
            "funcEndAddr": "0x405618",
            "decompiledFuncCode": "int sub_4055a0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_405620() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dircolors.elf"
}