{
    "funcInfo": [
        {
            "funcName": "sub_4106d0",
            "funcStartAddr": "0x4106d0",
            "funcEndAddr": "0x410cce",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_416e60;\nextern unsigned int g_416e80;\nextern unsigned int g_416eb0;\nextern unsigned int g_416ed0;\nextern unsigned int g_416f00;\nextern unsigned int g_416f51;\nextern unsigned long long stderr;\n\nint sub_4106d0()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long *|unsigned long long v19;  // rbx\n    unsigned int|unsigned long|unsigned long long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long|unsigned long long * v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (*((int *)(v19 + 24)) != *((int *)(v27 + 24)) || v29 != 0 || *((int *)(v19 + 8)) != *((int *)(v27 + 8)) || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416e60, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416e80, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x416f51, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 = &v40[4];\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((*(v19) == 0 || v22 == 0) && (*(v19) == 0 || v23 == v17) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416f00, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416ed0, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if (*(v15) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v25 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0) && (*((long long *)v18) != 0 || v36 != 0))\n        {\n            return v46;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0 || v36 == 0 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416eb0, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b7c0",
            "funcStartAddr": "0x40b7c0",
            "funcEndAddr": "0x40b820",
            "decompiledFuncCode": "int sub_40b7c0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b8b0",
            "funcStartAddr": "0x40b8b0",
            "funcEndAddr": "0x40b8e1",
            "decompiledFuncCode": "int sub_40b8b0()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40dcf0",
            "funcStartAddr": "0x40dcf0",
            "funcEndAddr": "0x40dd5d",
            "decompiledFuncCode": "int sub_40dcf0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40d7d0();\n}\n"
        },
        {
            "funcName": "sub_4051b0",
            "funcStartAddr": "0x4051b0",
            "funcEndAddr": "0x4051d4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[26];\n    char field_1a;\n} struct_0;\n\nint sub_4051b0()\n{\n    unsigned int *v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = __errno_location();\n    v1 = *(v1) == 1 | *(v1) == 22;\n    if (*(v1) == 1 || *(v1) == 22)\n    {\n        v1 = (unsigned long long)((unsigned int)v2->field_1a ^ 1);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40ad70",
            "funcStartAddr": "0x40ad70",
            "funcEndAddr": "0x40aed6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n    char field_6;\n    char field_7;\n    char field_8;\n    char field_9;\n    unsigned short field_a;\n} struct_0;\n\nint sub_40ad70()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n    struct_0 *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v1 = 45;\n    if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v1 = 100;\n        if (((unsigned short)v2 & 0xf000) != 0x4000)\n        {\n            v1 = 98;\n            if (((unsigned short)v2 & 0xf000) != 0x6000)\n            {\n                v1 = 99;\n                if (((unsigned short)v2 & 0xf000) != 0x2000)\n                {\n                    v1 = 108;\n                    if (((unsigned short)v2 & 0xf000) != 0xa000)\n                    {\n                        v1 = 112;\n                        if (((unsigned short)v2 & 0xf000) != 0x1000)\n                        {\n                            v1 = (unsigned int)((v2 & 0xf000) != 0xc000? 63 : 115);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *((unsigned long long *)&v3->field_0) = v1;\n    v3->field_1 = (0 - (unsigned int)(char)((v2 & 0x100) < 1) & -69) + 114;\n    v3->field_2 = (0 - (unsigned int)(char)((v2 & 128) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x800) != 0)\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -32) + 115;\n    }\n    else\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_3) = v4;\n    v3->field_4 = (0 - (unsigned int)(char)((v2 & 32) < 1) & -69) + 114;\n    v3->field_5 = (0 - (unsigned int)(char)((v2 & 16) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x400) != 0)\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -32) + 115;\n    }\n    else\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_6) = v5;\n    v3->field_7 = (0 - (unsigned int)(char)((v2 & 4) < 1) & -69) + 114;\n    v3->field_8 = (0 - (unsigned int)(char)((v2 & 2) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x200) != 0)\n    {\n        v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -32) + 116;\n        v3->field_a = 32;\n        return 32;\n    }\n    v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -75) + 120;\n    v3->field_a = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "sub_405110",
            "funcStartAddr": "0x405110",
            "funcEndAddr": "0x405136",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_405110()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = sub_40b910();\n    v2->field_38 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40a900",
            "funcStartAddr": "0x40a900",
            "funcEndAddr": "0x40a908",
            "decompiledFuncCode": "extern unsigned long long g_61b918;\n\nint sub_40a900()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61b918 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_410290",
            "funcStartAddr": "0x410290",
            "funcEndAddr": "0x4102a7",
            "decompiledFuncCode": "int sub_410290()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4100e0();\n}\n"
        },
        {
            "funcName": "sub_40e7f0",
            "funcStartAddr": "0x40e7f0",
            "funcEndAddr": "0x40e84e",
            "decompiledFuncCode": "int sub_40e7f0()\n{\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rbx\n    unsigned long long v4;  // rbp\n    unsigned int v6;  // r12d\n    unsigned int *v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v2 = sub_40a9c0();\n        v4 = (unsigned int)sub_40e450();\n        if (closedir() == 0)\n        {\n            return stack_base + 0;\n        }\n        v6 = *(v3);\n        v3 = __errno_location();\n        free(v3);\n        *(v7) = v6;\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40bc30",
            "funcStartAddr": "0x40bc30",
            "funcEndAddr": "0x40be20",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_40bc30()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_40b080();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_40b310();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_40b310();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_40b310();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v0 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_10 != *((long long *)&v2) && v11->field_28->field_10 != 0)\n    {\n        v21 = 0;\n    }\n    if (v11->field_10 != *((long long *)&v2) || (char)v21 != 0)\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e000",
            "funcStartAddr": "0x40e000",
            "funcEndAddr": "0x40e011",
            "decompiledFuncCode": "int sub_40e000()\n{\n}\n"
        },
        {
            "funcName": "sub_40da10",
            "funcStartAddr": "0x40da10",
            "funcEndAddr": "0x40da23",
            "decompiledFuncCode": "extern int512_t g_61ba40;\n\nint sub_40da10()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_61ba40 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_61ba40 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_412760",
            "funcStartAddr": "0x412760",
            "funcEndAddr": "0x4127d8",
            "decompiledFuncCode": "int sub_412760()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_410520() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40b310",
            "funcStartAddr": "0x40b310",
            "funcEndAddr": "0x40b44a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_40b310()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_40b140();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_40b140();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40fee0",
            "funcStartAddr": "0x40fee0",
            "funcEndAddr": "0x40ff00",
            "decompiledFuncCode": "int sub_40fee0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_40c35a",
            "funcStartAddr": "0x40c35a",
            "funcEndAddr": "0x40c373",
            "decompiledFuncCode": "int sub_40c35a()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_411bc0",
            "funcStartAddr": "0x411bc0",
            "funcEndAddr": "0x411cab",
            "decompiledFuncCode": "int sub_411bc0()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3f]\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // r15\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    char *v11;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned long v15;  // rsi\n    unsigned long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rbp\n\n    v4 = v3;\n    v6 = v5 + 1;\n    v7 = v5;\n    v14 = v3[1];\n    v13 = v3[2];\n    while (true)\n    {\n        if (v13 < v7)\n        {\n            v8 = v13;\n            v9 = 0;\n            do\n            {\n                v9 += 1;\n                v8 = v8 * 0x100 + 255;\n            }\n            while (v7 > v8);\n            sub_4120b0();\n            v11 = &v0;\n            do\n            {\n                v11 = &v1;\n                v13 = v13 * 0x100 + 255;\n                v14 = v14 * 0x100 + v0;\n            }\n            while (v7 > v13);\n        }\n        if (v13 < v7 && v13 == v7 || v13 == v7 && v13 >= v7)\n        {\n            v4[2] = 0;\n            v4[1] = 0;\n        }\n        if (v13 < v7 && v13 != v7 || v13 >= v7 && v13 != v7)\n        {\n            v15 = (0 CONCAT v13 - v7) % v6 >> 64;\n            v16 = (0 CONCAT v13 - v7) % v6;\n            v17 = v13 - ((0 CONCAT v13 - v7) % v6 >> 64);\n            v18 = (0 CONCAT v14) % v6;\n            v19 = (0 CONCAT v14) % v6 >> 64;\n            if (v14 > v17)\n            {\n                v13 = v15 - 1;\n                v20 = v19;\n            }\n            else\n            {\n                v4[1] = v18;\n                v4[2] = v16;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4115e0",
            "funcStartAddr": "0x4115e0",
            "funcEndAddr": "0x411b34",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_416f77;\nextern char g_61bad8[2];\n\nint sub_4115e0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_61bad8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_416f77 : (unsigned long long)nl_langinfo(0xe));\n    if (g_61bad8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_416f77;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 32 && (unsigned int)v27 != 35)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v63 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v63;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_416f77;\n                                        v10 = (tmp_10 == 0? &g_416f77 : tmp_10);\n                                        free(NULL);\n                                        sub_412760();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v62 = (unsigned int)*(v62);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)((unsigned int)v62 != -1);\n                                    }\n                                }\n                                while (v63 != 0 && v62 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v38 != 0 && (unsigned int)v27 != 32 && v29 > 1 && (unsigned int)v27 != 35)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v38 != 0 && (unsigned int)v27 != 32 && v29 > 1 && (unsigned int)v27 != 35) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_416f77 : tmp_10);\n                            sub_412760();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_416f77;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_416f77;\n            free(v17);\n        }\n        *((char *[2])&g_61bad8[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_416f77 : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40ac10",
            "funcStartAddr": "0x40ac10",
            "funcEndAddr": "0x40ac15",
            "decompiledFuncCode": "int sub_40ac10()\n{\n}\n"
        },
        {
            "funcName": "sub_40af20",
            "funcStartAddr": "0x40af20",
            "funcEndAddr": "0x40aff4",
            "decompiledFuncCode": "int sub_40af20()\n{\n    char v0;  // [bp-0x39]\n    char *v2;  // rsi\n    char *v3;  // r12\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rbx\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // r15\n    char *v11;  // rax\n    unsigned long v12;  // rdi\n    unsigned long long *v13;  // rdx\n    unsigned long long v14;  // rax\n    char v15;  // al\n\n    v3 = v2;\n    v4 = (unsigned int)sub_40ab40();\n    v5 = (unsigned int)sub_40aba0();\n    v7 = v4 - v6 + v5;\n    if (v5 != 0)\n    {\n        v5 = (char)(*((char *)(v4 + v5 - 1)) != 47);\n    }\n    v0 = *(v3);\n    if (*(v3) == 47)\n    {\n        do\n        {\n            v3 = &v3[1];\n        }\n        while (*(v3) == 47);\n    }\n    v8 = strlen(v3);\n    v10 = malloc(v5 + v7 + 1 + v8);\n    if (v8 != 0)\n    {\n        v11 = mempcpy(v8, v6, v7);\n        *(v11) = 47;\n        v12 = &v11[v5];\n        if (v13 != 0)\n        {\n            v14 = 0;\n            v15 = v0 == 47;\n            *(v13) = v12 - rax<8>;\n        }\n        *((char *)(unsigned long long)mempcpy(v12, (unsigned int)v3, v8)) = 0;\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_40e8c0",
            "funcStartAddr": "0x40e8c0",
            "funcEndAddr": "0x40e8ca",
            "decompiledFuncCode": "int sub_40e8c0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c300",
            "funcStartAddr": "0x40c300",
            "funcEndAddr": "0x40c30d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c300()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40c3a0",
            "funcStartAddr": "0x40c3a0",
            "funcEndAddr": "0x40c439",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_61b920;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_40c3a0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_61b920 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_410560",
            "funcStartAddr": "0x410560",
            "funcEndAddr": "0x410588",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n} struct_0;\n\nint sub_410560()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 0;\n    if (v2->field_28 <= v2->field_20)\n    {\n        v1 = v2->field_10 - v2->field_8;\n        if (((unsigned short)v2->field_0 & 0x100) != 0)\n        {\n            v1 = v2->field_10 - v2->field_8 + v2->field_58 - v2->field_48;\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4105f0",
            "funcStartAddr": "0x4105f0",
            "funcEndAddr": "0x4106c5",
            "decompiledFuncCode": "int sub_4105f0()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40dad2",
            "funcStartAddr": "0x40dad2",
            "funcEndAddr": "0x40dafb",
            "decompiledFuncCode": "int sub_40dad2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_40c480",
            "funcStartAddr": "0x40c480",
            "funcEndAddr": "0x40c49c",
            "decompiledFuncCode": "int sub_40c480()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n\n    v0 = v2;\n    return sub_411470();\n}\n"
        },
        {
            "funcName": "sub_40f2d0",
            "funcStartAddr": "0x40f2d0",
            "funcEndAddr": "0x40f389",
            "decompiledFuncCode": "int sub_40f2d0()\n{\n    void tmp_12;  // tmp #12\n    char v0;  // [bp-0x19]\n    unsigned long long v2[13];  // rdi\n    unsigned long long v3[13];  // rbp\n    unsigned long long *v4[4];  // rsi\n    unsigned long long v5[4];  // rbx\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n\n    v3 = v2;\n    v5 = *(v4);\n    v9 = (*(v4))[3];\n    if ((*(v4))[1] != 1073741822)\n    {\n    }\n    else\n    {\n        v8 = 1;\n        if ((*(v4))[3] != 1073741822)\n        {\n            v6 = v2[10];\n            *((unsigned long long [13])&(*(v4))[0]) = v2[9];\n            v5[1] = v6;\n        }\n    }\n    if ((*(v4))[1] == 1073741823)\n    {\n        if ((*(v4))[3] != 1073741823)\n        {\n            sub_411500();\n            v9 = v5[3];\n        }\n        else\n        {\n            *(v4) = 0;\n            v8 = 0;\n        }\n    }\n    if (((*(v4))[3] == 1073741822 || (*(v4))[1] == 1073741823) && (v5[3] == 1073741822 || (*(v4))[1] != 1073741823) && ((*(v4))[1] == 1073741823 || (*(v4))[1] != 1073741822) && ((*(v4))[3] != 1073741823 || (*(v4))[1] != 1073741823))\n    {\n        tmp_12 = v3[12];\n        *((unsigned long long [13])&(*(v4))[2]) = v3[11];\n        v5[3] = tmp_12;\n        v8 = 0;\n    }\n    if (((*(v4))[1] == 1073741823 || (*(v4))[3] != 1073741822) && (v5[3] != 1073741822 || (*(v4))[3] != 1073741822) && ((*(v4))[3] != 1073741823 || (*(v4))[3] != 1073741822) && ((*(v4))[1] == 1073741822 || v5[3] != 1073741822 || (*(v4))[1] != 1073741823) && ((*(v4))[1] == 1073741822 || (*(v4))[3] != 1073741823 || (*(v4))[1] != 1073741823))\n    {\n        v8 = 0;\n        if (v9 == 1073741823)\n        {\n            v0 = 0;\n            sub_411500();\n            return (unsigned long long)v0;\n        }\n    }\n    if (v9 != 1073741823 || v5[3] == 1073741822 && (*(v4))[1] == 1073741823 || (*(v4))[3] == 1073741823 && (*(v4))[1] == 1073741823 || (*(v4))[3] == 1073741822 && (*(v4))[1] == 1073741822 || (*(v4))[3] == 1073741822 && (*(v4))[1] != 1073741823)\n    {\n        return v8;\n    }\n}\n"
        },
        {
            "funcName": "sub_40aca0",
            "funcStartAddr": "0x40aca0",
            "funcEndAddr": "0x40ad2d",
            "decompiledFuncCode": "int sub_40aca0()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long|unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_410310();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_40c0b0();\n        if (!(v13 != 0))\n        {\n            sub_410330(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_4100e0();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_404690",
            "funcStartAddr": "0x404690",
            "funcEndAddr": "0x404724",
            "decompiledFuncCode": "extern unsigned long long g_61b3b8;\nextern unsigned long long g_61b4e0;\nextern unsigned long long g_61b8e0;\n\nint sub_404690()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbx\n    unsigned long v4;  // rbp\n    unsigned long long v5;  // rax\n\n    v2 = v1;\n    if (g_61b8e0 == 0)\n    {\n        if (g_61b8e0 != 0)\n        {\n            g_61b8e0 = calloc(g_61b3b8, 0x1);\n        }\n        else\n        {\n            g_61b8e0 = &g_61b4e0;\n            g_61b3b8 = 0x400;\n        }\n    }\n    if (v1 != 0)\n    {\n        while (true)\n        {\n            v4 = (g_61b3b8 <= v2? g_61b3b8 : v2);\n            v5 = sub_40b000();\n            if (v5 == v4)\n            {\n                v2 -= v5;\n                if (v2 == v5)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_409870",
            "funcStartAddr": "0x409870",
            "funcEndAddr": "0x4098cd",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char field_8;\n} struct_0;\n\nint sub_409870()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rax\n    struct_0 *v7;  // rax\n    unsigned long long v8;  // rax\n\n    v4 = v3;\n    v5 = (unsigned int)sub_40ab40() - v1;\n    if (v5 + 9 > 0x100)\n    {\n        v4 = malloc(v5 + 9);\n        if (v4 == 0)\n        {\n            v8 = 0;\n        }\n    }\n    if (v5 + 9 <= 0x100 || v4 != 0)\n    {\n        v7 = mempcpy(v4, v1, v5);\n        v7->field_0 = 6365935209750754627;\n        v7->field_8 = 0x6e690039322e3800;\n        v8 = v4;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_404ad0",
            "funcStartAddr": "0x404ad0",
            "funcEndAddr": "0x404b83",
            "decompiledFuncCode": "int sub_404ad0()\n{\n    unsigned int v1;  // edi\n    unsigned long v2;  // rcx\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rbp\n    unsigned int v8;  // esi\n\n    v3 = lseek(v1, v2, 0x1);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        if ((char)v4 != 0)\n        {\n            v5 = sub_404740();\n            if (v5 < 0)\n            {\n                v7 = (unsigned int)sub_40ddd0();\n            }\n        }\n        if ((char)v4 == 0 || v5 >= 0)\n        {\n            return 1;\n        }\n    }\n    else\n    {\n        v6 = (unsigned int)sub_40ddd0();\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v5 < 0 && (char)v4 != 0)\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, v8, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40dfb0",
            "funcStartAddr": "0x40dfb0",
            "funcEndAddr": "0x40dfc3",
            "decompiledFuncCode": "int sub_40dfb0()\n{\n}\n"
        },
        {
            "funcName": "sub_410310",
            "funcStartAddr": "0x410310",
            "funcEndAddr": "0x410323",
            "decompiledFuncCode": "int sub_410310()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_40e41b",
            "funcStartAddr": "0x40e41b",
            "funcEndAddr": "0x40e420",
            "decompiledFuncCode": "int sub_40e41b()\n{\n}\n"
        },
        {
            "funcName": "sub_40b830",
            "funcStartAddr": "0x40b830",
            "funcEndAddr": "0x40b89b",
            "decompiledFuncCode": "int sub_40b830()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403c80",
            "funcStartAddr": "0x403c80",
            "funcEndAddr": "0x4041a5",
            "decompiledFuncCode": "extern unsigned int g_412a07;\nextern unsigned int g_413a18;\nextern unsigned int g_413a40;\nextern unsigned int g_413ac0;\nextern unsigned int g_413b00;\nextern unsigned int g_413b50;\nextern unsigned int g_413d10;\nextern unsigned int g_413ec0;\nextern unsigned int g_413f50;\nextern unsigned int g_414020;\nextern unsigned int g_414178;\nextern unsigned int g_414210;\nextern unsigned int g_414330;\nextern unsigned int g_4143f8;\nextern unsigned int g_414508;\nextern unsigned int g_414648;\nextern unsigned int g_414760;\nextern unsigned int g_414790;\nextern unsigned int g_4147c8;\nextern unsigned int g_414a10;\nextern unsigned int g_414af0;\nextern unsigned int g_414bd0;\nextern unsigned int g_414ca0;\nextern unsigned int g_414ce8;\nextern unsigned int g_414d08;\nextern unsigned long long g_61b920;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_403c80()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v41[2];  // rax\n    char *v42;  // rdi\n    char *v43;  // rsi\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // cc_dep1\n    unsigned long long v46;  // cc_dep2\n    unsigned long v47;  // d\n    char *v51;  // rax\n    char *v52;  // rax\n    unsigned long long v53;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x413a18, 0x5), g_61b920);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x413a40, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413ac0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413b00, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413b50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413d10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413ec0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413f50, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414020, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414178, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414210, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414330, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4143f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414508, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414648, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414760, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414790, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4147c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414a10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414af0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x414bd0, 0x5), stdout);\n        v0 = \"[\";\n        v41 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v41 = &v2;\n            v42 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v43 = \"cp\";\n            v44 = 3;\n            if ((v45 > v46) - 0 - (v45 < v46) == 0)\n            {\n                break;\n            }\n            while (v44 != 0)\n            {\n                v44 -= 1;\n                v45 = *(v43);\n                v46 = *(v42);\n                v42 = &v42[v47];\n                v43 = &v43[v47];\n                break;\n            }\n        }\n        if (v41[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x412a07, 0x5));\n            v52 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x412a07, 0x5));\n            v51 = setlocale(0x5, 0x0);\n            if (v51 != 0)\n            {\n                v53 = strncmp(v51, \"en_\", 0x3);\n            }\n            if (v53 == 0 || v51 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x414ce8, 0x5));\n            }\n        }\n        if ((v41[1] == 0 || strncmp(v52, \"en_\", 0x3) != 0) && (v41[1] == 0 || v52 != 0) && (v53 != 0 || v41[1] != 0) && (v51 != 0 || v41[1] != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x414ca0, 0x5));\n        }\n        if (v41[1] != 0 || v53 != 0 && v51 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x414ce8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x414d08, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409a40",
            "funcStartAddr": "0x409a40",
            "funcEndAddr": "0x409b34",
            "decompiledFuncCode": "int sub_409a40()\n{\n    unsigned long v0;  // [bp-0x148]\n    unsigned int v1;  // [bp-0x140]\n    unsigned int v3;  // esi\n    unsigned int v4;  // ebp\n    char v5;  // cl\n    unsigned int *v6;  // r14\n    void *v7;  // rbx\n    unsigned long v8;  // rdi\n    unsigned long long v9;  // rax\n    unsigned int v10;  // edx\n    unsigned long long v11;  // rax\n    unsigned int|unsigned long v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rax\n\n    v4 = v3;\n    v13 = symlinkat();\n    if (v5 == 1 && (unsigned int)v13 != 0)\n    {\n        v6 = __errno_location();\n        if (*(v6) == 17)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_409870();\n            if (v7 != 0)\n            {\n                v0 = v8;\n                v1 = v3;\n                v9 = sub_40e910();\n                if (v9 != 0)\n                {\n                    v12 = *(v6);\n                }\n                else\n                {\n                    v11 = renameat(v4, (unsigned int)v7, v4, v10);\n                    if (!(v11 == 0))\n                    {\n                        v12 = *(v6);\n                        unlinkat(v4, (unsigned int)v7, 0x0);\n                    }\n                    else if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                }\n                if (v9 != 0 || v11 != 0)\n                {\n                    if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                    if (v12 != 0)\n                    {\n                        *((unsigned long *)&v6) = v12;\n                        v13 = -18446744069414584321;\n                    }\n                }\n                if (v12 == 0 || v9 == 0 && v11 == 0)\n                {\n                    v13 = 1;\n                }\n            }\n            else\n            {\n                v13 = -18446744069414584321;\n            }\n        }\n    }\n    v14 = v13;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_4102e0",
            "funcStartAddr": "0x4102e0",
            "funcEndAddr": "0x410308",
            "decompiledFuncCode": "int sub_4102e0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4100e0();\n}\n"
        },
        {
            "funcName": "sub_40dcd0",
            "funcStartAddr": "0x40dcd0",
            "funcEndAddr": "0x40dce2",
            "decompiledFuncCode": "int sub_40dcd0()\n{\n}\n"
        },
        {
            "funcName": "sub_40dc80",
            "funcStartAddr": "0x40dc80",
            "funcEndAddr": "0x40dc91",
            "decompiledFuncCode": "int sub_40dc80()\n{\n}\n"
        },
        {
            "funcName": "sub_4100e0",
            "funcStartAddr": "0x4100e0",
            "funcEndAddr": "0x4100fa",
            "decompiledFuncCode": "int sub_4100e0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_410330(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_411450",
            "funcStartAddr": "0x411450",
            "funcEndAddr": "0x411465",
            "decompiledFuncCode": "int sub_411450()\n{\n}\n"
        },
        {
            "funcName": "sub_40a800",
            "funcStartAddr": "0x40a800",
            "funcEndAddr": "0x40a8f2",
            "decompiledFuncCode": "extern unsigned int g_415b68;\nextern unsigned int g_61b3d0;\nextern unsigned long long g_61b908;\n\nint sub_40a800()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // rbp\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n\n    v1 = v3;\n    v0 = v4;\n    v5 = sub_410560();\n    if (v5 != 0 || sub_4114a0() != 0)\n    {\n        while (true)\n        {\n            v11 = sub_410590();\n            if (v11 == 0)\n            {\n                v12 = sub_410520();\n                if (v12 != 0)\n                {\n                    sub_4114a0();\n                }\n            }\n            if (v12 == 0 || v11 != 0)\n            {\n                if (sub_4114a0() == 0)\n                {\n                    break;\n                }\n            }\n            v7 = dcgettext(0x0, 0x415b68, 0x5);\n            v8 = __errno_location();\n            if (g_61b908 != 0)\n            {\n                sub_40de70();\n                error(0x0, *(v8), \"%s: %s\");\n            }\n            else\n            {\n                error(0x0, *(v8), \"%s\");\n            }\n            sub_40a920();\n            _exit(g_61b3d0);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40e3fb",
            "funcStartAddr": "0x40e3fb",
            "funcEndAddr": "0x40e3fd",
            "decompiledFuncCode": "int sub_40e3fb()\n{\n}\n"
        },
        {
            "funcName": "sub_40e440",
            "funcStartAddr": "0x40e440",
            "funcEndAddr": "0x40e44b",
            "decompiledFuncCode": "int sub_40e440()\n{\n}\n"
        },
        {
            "funcName": "sub_412210",
            "funcStartAddr": "0x412210",
            "funcEndAddr": "0x412251",
            "decompiledFuncCode": "int sub_412210()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e420",
            "funcStartAddr": "0x40e420",
            "funcEndAddr": "0x40e436",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40e420()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    struct_0 *v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (v2->field_8 >= v3->field_8)\n    {\n        v1 = (char)(v2->field_8 > v3->field_8);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40b700",
            "funcStartAddr": "0x40b700",
            "funcEndAddr": "0x40b73f",
            "decompiledFuncCode": "int sub_40b700()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b480",
            "funcStartAddr": "0x40b480",
            "funcEndAddr": "0x40b485",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_40b480()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_409d30",
            "funcStartAddr": "0x409d30",
            "funcEndAddr": "0x409e33",
            "decompiledFuncCode": "int sub_409d30()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((*((long long *)(v5 + (v12 << 3))) == 0 || v13 == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_411380",
            "funcStartAddr": "0x411380",
            "funcEndAddr": "0x411396",
            "decompiledFuncCode": "int sub_411380()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4112c0();\n}\n"
        },
        {
            "funcName": "sub_40dbe0",
            "funcStartAddr": "0x40dbe0",
            "funcEndAddr": "0x40dc75",
            "decompiledFuncCode": "extern struct_0 *g_61b418;\nextern unsigned long long g_61b420;\nextern unsigned long long g_61b428;\nextern unsigned int g_61b430;\nextern unsigned long long g_61b940;\n\nint sub_40dbe0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_61b430;\n    if (g_61b430 > 1)\n    {\n        v2 = &g_61b418[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_61b418[(unsigned long long)(g_61b430 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_61b418->field_8 != 6404416)\n    {\n        v1 = free(g_61b418->field_8);\n        g_61b420 = 0x100;\n        g_61b428 = &g_61b940;\n    }\n    if (g_61b418 != 6403104)\n    {\n        v1 = free(g_61b418);\n        g_61b418 = &g_61b420;\n    }\n    g_61b430 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_410cf0",
            "funcStartAddr": "0x410cf0",
            "funcEndAddr": "0x411257",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_416f28;\nextern unsigned int g_416f5c;\nextern unsigned long long stderr;\n\nint sub_410cf0()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char [2]|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9d\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned int|unsigned long long v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[3];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_4105f0();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = *(v34);\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_4105f0();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_4106d0();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416f28, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416f5c, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x416f28, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_4106d0();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_40aef0",
            "funcStartAddr": "0x40aef0",
            "funcEndAddr": "0x40aef8",
            "decompiledFuncCode": "int sub_40aef0()\n{\n}\n"
        },
        {
            "funcName": "sub_411da0",
            "funcStartAddr": "0x411da0",
            "funcEndAddr": "0x41207c",
            "decompiledFuncCode": "extern char g_411d40;\n\nint sub_411da0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    void *v7;  // r13\n    unsigned short v8;  // dx\n    unsigned int v9;  // r15d\n    unsigned long long v10;  // r14\n    unsigned long long v12[2];  // rbx\n    unsigned long long v13;  // rbx\n    unsigned long long v15;  // rbp\n    unsigned long long v17;  // r15\n    unsigned long v18;  // rbp\n    char *v20;  // rdi\n    char *v21;  // rsi\n    unsigned long long v22;  // rcx\n    unsigned long v23;  // d\n    unsigned long long v24;  // r14\n    char *v26;  // rsi\n    unsigned long long v27;  // rcx\n    char *v28;  // rdi\n    unsigned long v29;  // rbp\n    unsigned long long v31;  // rsi\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rbp\n    unsigned long v36;  // r14\n    unsigned long long v38;  // rsi\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rbp\n    unsigned long long v44;  // rsi\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rdx\n    unsigned long long v49;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_4127e0();\n            if (v7 != 0)\n            {\n                v12[0] = v7;\n                v12[1] = &g_411d40;\n                v12 = (unsigned long long)(unsigned int)sub_4100e0();\n                v12[2] = v5;\n                setvbuf(v7, &v12[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v13 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_4100e0();\n            v6[1] = &g_411d40;\n            v6[2] = 0;\n            v6[3] = 0;\n            v9 = open(\"/dev/urandom\", 0x0, v8);\n            if (v9 >= 0)\n            {\n                v15 = __read_chk(v9, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v9);\n                if (v15 <= 2047)\n                {\n                    tmp_2 = v15;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v17 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15);\n                    v18 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v20 = v17;\n                    v21 = &v1;\n                    for (v22 = v0; v22 != 0; v21 = &v21[v23])\n                    {\n                        v22 -= 1;\n                        *(v20) = v1;\n                        v20 = &v20[v23];\n                    }\n                    if (v18 <= 2047)\n                    {\n                        v24 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v26 = &v1;\n                        v1 = getpid();\n                        v27 = v24;\n                        v10 = v24 + v18;\n                        for (v28 = (char *)&v6[4] + v18; v27 != 0; v26 = &v26[v23])\n                        {\n                            v27 -= 1;\n                            *(v28) = v1;\n                            v28 = &v28[v23];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v10 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v13 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v13 + 48)) = v1;\n            }\n            if (v9 < 0 || v15 <= 2047 && v18 <= 2047 && v10 <= 2047)\n            {\n                v29 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v31 = (char *)&v6[4] + v10;\n                v1 = getppid();\n                if ((unsigned int)v29 != 0)\n                {\n                    v33 = 0;\n                    do\n                    {\n                        v34 = v33;\n                        v33 = (unsigned int)v33 + 1;\n                        *((char *)(v31 + v34)) = v1;\n                    }\n                    while ((unsigned int)v33 < (unsigned int)v29);\n                }\n                v35 = v29 + v10;\n                if (v35 <= 2047)\n                {\n                    v36 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v38 = (char *)&v6[4] + v35;\n                    v1 = getuid();\n                    if ((unsigned int)v36 != 0)\n                    {\n                        v40 = 0;\n                        do\n                        {\n                            v41 = v40;\n                            v40 = (unsigned int)v40 + 1;\n                            *((char *)(v38 + v41)) = v1;\n                        }\n                        while ((unsigned int)v40 < (unsigned int)v36);\n                    }\n                    v42 = v35 + v36;\n                    if (v42 <= 2047)\n                    {\n                        v44 = (char *)&v6[4] + v42;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v42 <= 4)? 4 : 0x800 - v42) != 0)\n                        {\n                            v46 = 0;\n                            do\n                            {\n                                v47 = v46;\n                                v46 = (unsigned int)v46 + 1;\n                                *((char *)(v44 + v47)) = v1;\n                            }\n                            while ((unsigned int)v46 < (!(0x800 - v42 <= 4)? 4 : 0x800 - v42));\n                        }\n                    }\n                }\n            }\n            sub_412510();\n        }\n    }\n    else\n    {\n        v13 = (unsigned int)sub_4100e0();\n        *((long long *)v13) = 0;\n        *((char **)(v13 + 8)) = &g_411d40;\n        *((long long *)(v13 + 16)) = 0;\n    }\n    v49 = v13;\n    return v49;\n}\n"
        },
        {
            "funcName": "sub_409b40",
            "funcStartAddr": "0x409b40",
            "funcEndAddr": "0x409bc1",
            "decompiledFuncCode": "extern unsigned int g_4158a3;\n\nint sub_409b40()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rax\n\n    if ((unsigned int)v2 != -2)\n    {\n        if ((unsigned int)v2 == -1)\n        {\n            v4 = (unsigned int)sub_40e020();\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4158a3, 0x5));\n        }\n        v2 = (unsigned int)sub_40c440();\n        return v5;\n    }\n    v3 = (unsigned int)sub_40e020();\n    error(0x0, *(__errno_location()), \"%s\");\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4100a0",
            "funcStartAddr": "0x4100a0",
            "funcEndAddr": "0x4100d1",
            "decompiledFuncCode": "extern char g_61ba90;\nextern char g_61ba91;\n\nint sub_4100a0()\n{\n    unsigned long long v1;  // rax\n    char v2;  // al\n\n    if (g_61ba91 != 0)\n    {\n        return (unsigned long long)g_61ba90;\n    }\n    v1 = geteuid();\n    g_61ba91 = 1;\n    v2 = (unsigned int)v1 == 0;\n    g_61ba90 = (unsigned int)v1 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40ad30",
            "funcStartAddr": "0x40ad30",
            "funcEndAddr": "0x40ad64",
            "decompiledFuncCode": "int sub_40ad30()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_40b6a0() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b6a0",
            "funcStartAddr": "0x40b6a0",
            "funcEndAddr": "0x40b6eb",
            "decompiledFuncCode": "int sub_40b6a0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_40b140();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409ed0",
            "funcStartAddr": "0x409ed0",
            "funcEndAddr": "0x409fdf",
            "decompiledFuncCode": "extern unsigned int g_415a7e;\nextern unsigned int g_415a93;\nextern unsigned int g_415a9b;\nextern unsigned long long stderr[7];\n\nint sub_409ed0()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v8;  // rbx\n    char *v9;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v8 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x415a7e, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v8 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v8 += 1;\n                    v7 += v5;\n                    __fprintf_chk((unsigned int)stderr, 0x1, 0x415a9b, sub_40e020());\n                    if (v4[v8] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v8 == 0 || v6 != 0)\n            {\n                v8 += 1;\n                v1 = v7;\n                v7 += v5;\n                __fprintf_chk((unsigned int)stderr, 0x1, 0x415a93, sub_40e020());\n                if (v4[v8] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v9 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v9) = 10;\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_410020",
            "funcStartAddr": "0x410020",
            "funcEndAddr": "0x410094",
            "decompiledFuncCode": "extern unsigned int g_416b19;\nextern unsigned int g_416b44;\nextern unsigned int g_416d70;\n\nint sub_410020()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416b19, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416b44, 0x5));\n    dcgettext(0x0, 0x416d70, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4093b0",
            "funcStartAddr": "0x4093b0",
            "funcEndAddr": "0x4093c7",
            "decompiledFuncCode": "int sub_4093b0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (*(v1) != *(v2))\n    {\n        return 0;\n    }\n    v3 = v2[1];\n    v4 = v1[1] == v2[1];\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_409540",
            "funcStartAddr": "0x409540",
            "funcEndAddr": "0x40961c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned long long g_61b8f8[10];\n\nint sub_409540()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r12\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v2 = v4;\n    v5 = g_61b8f8;\n    v1 = stack_base + 0;\n    v0 = v6;\n    v12 = *(v5);\n    v11 = v5[1];\n    if (v5[8] != 0 && v5[4] != 0 && *(g_61b8f8) < g_61b8f8[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v10 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v10 = v10[1];\n                    if (v10 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v10);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= *(g_61b8f8) + 16)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((*(g_61b8f8) < g_61b8f8[1] || v5[8] == 0 || v5[4] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_40a910",
            "funcStartAddr": "0x40a910",
            "funcEndAddr": "0x40a918",
            "decompiledFuncCode": "extern char g_61b910;\n\nint sub_40a910()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_61b910 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40aba0",
            "funcStartAddr": "0x40aba0",
            "funcEndAddr": "0x40abc7",
            "decompiledFuncCode": "int sub_40aba0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_411500",
            "funcStartAddr": "0x411500",
            "funcEndAddr": "0x41153a",
            "decompiledFuncCode": "int sub_411500()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_4047a0",
            "funcStartAddr": "0x4047a0",
            "funcEndAddr": "0x4047d1",
            "decompiledFuncCode": "extern unsigned int g_415068;\n\nint sub_4047a0()\n{\n    unsigned int *v0;  // [bp-0x8]\n    unsigned int *v2;  // rbx\n\n    v0 = v2;\n    *(v2) = 95;\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x415068, 0x5));\n}\n"
        },
        {
            "funcName": "sub_40b550",
            "funcStartAddr": "0x40b550",
            "funcEndAddr": "0x40b68c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_415b8e;\nextern unsigned int g_415ba6;\nextern unsigned int g_415bd8;\n\nint sub_40b550()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned int v6;  // esi\n    unsigned int v7;  // ebp\n    unsigned long v8;  // rbx\n    unsigned long long v9[5];  // rdi\n    unsigned long long v12;  // rdi\n    unsigned long long v13[2];  // rsi\n    struct_0 *v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long|unsigned long long v16;  // rbx\n    unsigned long v17;  // xmm1lq\n    uint128_t v18;  // xmm0\n    unsigned long long v19;  // xmm0lq\n    uint128_t v20;  // xmm0\n    uint128_t v21;  // xmm0\n    unsigned long long v22;  // xmm0lq\n\n    v2 = v4;\n    v1 = v5;\n    v7 = v6;\n    v0 = v8;\n    v16 = 0;\n    v13 = *(v9);\n    v12 = v9[1];\n    if (v13 < v12)\n    {\n        while (true)\n        {\n            if (*(v13) == 0)\n            {\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v14 = v13[1];\n                v15 = 1;\n                if (v13[1] != 0)\n                {\n                    do\n                    {\n                        v14 = v14->field_8;\n                        v15 += 1;\n                    }\n                    while (v14 != 0);\n                }\n                v16 = (v16 < v15? v15 : v16);\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(v7, 0x1, 0x415b8e, v9[4]);\n    __fprintf_chk(v7, 0x1, 0x415ba6, v17);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v18 = 0;\n        v19 = v9[3];\n        v20 = xmm0<16> * 0x4059000000000000;\n    }\n    else\n    {\n        v21 = 0;\n        v22 = 0 >> 1 | (unsigned long long)(unsigned int)(0 & 1);\n        v20 = xmm0<16> * 0x80b2000000000000;\n        tmp_14 = v17;\n    }\n    __fprintf_chk(v7, 0x1, 0x415bd8, v19);\n}\n"
        },
        {
            "funcName": "sub_40a0b0",
            "funcStartAddr": "0x40a0b0",
            "funcEndAddr": "0x40a166",
            "decompiledFuncCode": "int sub_40a0b0()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rdx\n    char *v12;  // rsi\n    unsigned long long v13;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = (unsigned int)sub_40ab40();\n    v10 = sub_40aba0();\n    if (v10 > 14)\n    {\n        v6 = (unsigned short)*((short *)v5);\n        v7 = v10;\n        *((short *)v5) = 46;\n        *(v8) = 0;\n        v10 = pathconf(v3, 0x3);\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v11 = 255;\n        }\n        if (*(__errno_location()) == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v11 = v10;\n        }\n        *((unsigned long long *)v5) = v6;\n        if (v7 > v11)\n        {\n            v12 = v4 + v1;\n            v13 = v4 + v2 - v5;\n            if (v4 + v2 - v5 < v11)\n            {\n                v11 = v13 + 1;\n            }\n            else\n            {\n                v12 = v5 + v11 - 1;\n            }\n            *(v12) = 126;\n            *((char *)(v5 + v11)) = 0;\n            return v13;\n        }\n    }\n    if (v7 <= v11 || v10 <= 14)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404fc0",
            "funcStartAddr": "0x404fc0",
            "funcEndAddr": "0x405077",
            "decompiledFuncCode": "extern unsigned int g_415130;\n\nint sub_404fc0()\n{\n    char v1[39];  // r8\n    char v2[39];  // rbp\n    unsigned long long v3;  // rcx\n    unsigned long long v4;  // rbx\n    char v5;  // bl\n    unsigned int *v6;  // r13\n    unsigned int|unsigned long v8;  // rbx\n    unsigned long long v9;  // rax\n\n    v2 = v1;\n    if (v1[4 + 5] != 0)\n    {\n        v6 = __errno_location();\n        if (v1[4 + 3] != 0)\n        {\n            v8 = v2[4 + 6];\n            if (v2[4 + 6] == 0)\n            {\n                *(v6) = 95;\n            }\n        }\n        if (v1[4 + 3] == 0 || v2[4 + 6] != 0)\n        {\n            *(v6) = 95;\n            v8 = (unsigned int)sub_40ddd0();\n            error(0x0, *(v6), (unsigned long long)dcgettext(0x0, 0x415130, 0x5));\n            v8 = v1[4 + 6];\n        }\n        v9 = v8 ^ 1;\n        return v9;\n    }\n    v4 = v3;\n    v5 = (char)v3 & v1[4 + 1];\n    if (((char)v3 & v1[4 + 1]) == 0)\n    {\n        return 1;\n    }\n    *(__errno_location()) = 95;\n    return rbx<8>;\n}\n"
        },
        {
            "funcName": "sub_410180",
            "funcStartAddr": "0x410180",
            "funcEndAddr": "0x4101a1",
            "decompiledFuncCode": "int sub_410180()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_410330(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405170",
            "funcStartAddr": "0x405170",
            "funcEndAddr": "0x4051a1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    uint128_t field_10;\n    char field_1a;\n    char field_1b;\n    char padding_1c[4];\n    uint128_t field_20;\n    uint128_t field_30;\n    unsigned long long field_40;\n} struct_0;\n\nint sub_405170()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    v2 = v1;\n    *((long long *)&v1->field_30) = 0;\n    v1->field_0 = 0;\n    v1->field_10 = 0;\n    *((int128_t *)&v1->field_1a) = 0;\n    v1->field_20 = 0;\n    v3 = geteuid();\n    v4 = (unsigned int)v3 == 0;\n    *(&((char *)&v2->field_10)[11]) = (unsigned int)v3 == 0;\n    *(&((char *)&v2->field_10)[10]) = (unsigned int)v3 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4102b0",
            "funcStartAddr": "0x4102b0",
            "funcEndAddr": "0x4102de",
            "decompiledFuncCode": "int sub_4102b0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_410330(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40aa80",
            "funcStartAddr": "0x40aa80",
            "funcEndAddr": "0x40aad8",
            "decompiledFuncCode": "int sub_40aa80()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_40ab40();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d970",
            "funcStartAddr": "0x40d970",
            "funcEndAddr": "0x40d9a4",
            "decompiledFuncCode": "int sub_40d970()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4102e0();\n}\n"
        },
        {
            "funcName": "sub_409480",
            "funcStartAddr": "0x409480",
            "funcEndAddr": "0x4094f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409480()\n{\n    unsigned long long v1[3];  // rbx\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    struct_0 *v5;  // rbp\n    unsigned long long v6;  // rax\n\n    v1 = (unsigned long long)(unsigned int)sub_4100e0();\n    v1[0] = v2;\n    v1[2] = (unsigned int)sub_410310();\n    v1[1] = v3;\n    if (rbp<8> != 0)\n    {\n        rbp<8> = sub_40c0b0();\n        v6 = 0;\n        if (v1 != rbp<8>)\n        {\n            free(v1[2]);\n            free(v1);\n            v6 = v5->field_10;\n        }\n        return v6;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_412260",
            "funcStartAddr": "0x412260",
            "funcEndAddr": "0x412505",
            "decompiledFuncCode": "int sub_412260() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_4053d0",
            "funcStartAddr": "0x4053d0",
            "funcEndAddr": "0x4053fa",
            "decompiledFuncCode": "extern unsigned int g_61b3b0;\n\nint sub_4053d0()\n{\n    if (g_61b3b0 != -1)\n    {\n        return g_61b3b0;\n    }\n    g_61b3b0 = umask(0x0);\n    umask(g_61b3b0);\n    return g_61b3b0;\n}\n"
        },
        {
            "funcName": "sub_411d8a",
            "funcStartAddr": "0x411d8a",
            "funcEndAddr": "0x411d8f",
            "decompiledFuncCode": "int sub_411d8a()\n{\n}\n"
        },
        {
            "funcName": "sub_40b080",
            "funcStartAddr": "0x40b080",
            "funcEndAddr": "0x40b111",
            "decompiledFuncCode": "int sub_40b080()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v3 != 0 && v2 > 9)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40eaa0",
            "funcStartAddr": "0x40eaa0",
            "funcEndAddr": "0x40ead1",
            "decompiledFuncCode": "int sub_40eaa0()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_40e910();\n    }\n    sub_40e8f0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40af00",
            "funcStartAddr": "0x40af00",
            "funcEndAddr": "0x40af18",
            "decompiledFuncCode": "int sub_40af00()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40af20();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a6b0",
            "funcStartAddr": "0x40a6b0",
            "funcEndAddr": "0x40a6ba",
            "decompiledFuncCode": "int sub_40a6b0()\n{\n}\n"
        },
        {
            "funcName": "sub_40de60",
            "funcStartAddr": "0x40de60",
            "funcEndAddr": "0x40de6d",
            "decompiledFuncCode": "int sub_40de60()\n{\n}\n"
        },
        {
            "funcName": "sub_40eaf0",
            "funcStartAddr": "0x40eaf0",
            "funcEndAddr": "0x40eb3c",
            "decompiledFuncCode": "int sub_40eaf0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40a9c0",
            "funcStartAddr": "0x40a9c0",
            "funcEndAddr": "0x40aa50",
            "decompiledFuncCode": "int sub_40a9c0()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned int *v6;  // rbp\n    unsigned long long v7;  // r13\n    unsigned int|unsigned long v9;  // r14\n    unsigned long long v10;  // rbx\n\n    if (v2 != 0)\n    {\n        v3 = dirfd(v2);\n        if (v3 <= 2)\n        {\n            v5 = sub_4103e0();\n            v6 = __errno_location();\n            if (v5 < 0)\n            {\n                v9 = *(v6);\n                v7 = 0;\n            }\n            else\n            {\n                v9 = *(v6);\n                v7 = fdopendir(v5);\n                if (v7 == 0)\n                {\n                    close(v5);\n                }\n            }\n            v10 = v7;\n            closedir();\n            *((unsigned long *)&v6) = v9;\n            return v10;\n        }\n    }\n    if (v2 == 0 || v3 > 2)\n    {\n        v2 = opendir();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c340",
            "funcStartAddr": "0x40c340",
            "funcEndAddr": "0x40c357",
            "decompiledFuncCode": "int sub_40c340()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40be30",
            "funcStartAddr": "0x40be30",
            "funcEndAddr": "0x40c086",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_40be30()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_3 *v12;  // rdx\n    unsigned int|unsigned long|uint128_t v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned int|unsigned long|uint128_t v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_40b170();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_40b290();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_40bc30();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_40b170();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e2f0",
            "funcStartAddr": "0x40e2f0",
            "funcEndAddr": "0x40e408",
            "decompiledFuncCode": "int sub_40e2f0()\n{\n    char v0;  // [bp-0x158]\n    unsigned long v1;  // [bp-0x150]\n    char v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    char|unsigned long long v5;  // rbx\n    unsigned long v8;  // r13\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    void *v11;  // rbp\n    void *v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n\n    v5 = 0;\n    v8 = (unsigned int)sub_40aba0();\n    v9 = sub_40aba0();\n    if (v8 == v9)\n    {\n        v10 = memcmp((unsigned long long)(unsigned int)sub_40ab40(), (unsigned long long)(unsigned int)sub_40ab40(), v8);\n        if (v10 == 0)\n        {\n            v11 = (unsigned long long)(unsigned int)sub_40aa60();\n            v12 = (unsigned long long)(unsigned int)sub_40aa60();\n            v13 = __xstat(0x1, (unsigned int)v11, (unsigned int)&v0);\n            if (v13 == 0)\n            {\n                v14 = __xstat(0x1, (unsigned int)v12, (unsigned int)&v2);\n                if (v14 == 0)\n                {\n                    v5 = 0;\n                    if (v1 == v3)\n                    {\n                        v5 = *((long long *)&v0) == *((long long *)&v2);\n                    }\n                    free(v11);\n                    free(v12);\n                }\n                else\n                {\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v8 != v9 || v10 != 0 || v13 == 0 && v14 == 0)\n    {\n        v15 = v5;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e450",
            "funcStartAddr": "0x40e450",
            "funcEndAddr": "0x40e7b7",
            "decompiledFuncCode": "int sub_40e450() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4103e0",
            "funcStartAddr": "0x4103e0",
            "funcEndAddr": "0x41050c",
            "decompiledFuncCode": "extern unsigned int g_61ba94;\n\nint sub_4103e0()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_61ba94 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_4103e0();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_61ba94 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_61ba94 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_4103e0();\n        }\n        if (((unsigned int)v15 < 0 || g_61ba94 < 0) && (g_61ba94 < 0 || *(v12) == 22) && (g_61ba94 < 0 || (unsigned int)v15 >= 0) && (g_61ba94 == -1 || g_61ba94 >= 0) && ((unsigned int)v15 >= 0 || g_61ba94 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v14 == -1 || v13 < 0)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_40de70",
            "funcStartAddr": "0x40de70",
            "funcEndAddr": "0x40de81",
            "decompiledFuncCode": "int sub_40de70()\n{\n}\n"
        },
        {
            "funcName": "sub_4047e0",
            "funcStartAddr": "0x4047e0",
            "funcEndAddr": "0x40488c",
            "decompiledFuncCode": "extern unsigned int g_415692;\nextern unsigned long long stdout[7];\n\nint sub_4047e0()\n{\n    unsigned long v2;  // rdx\n    unsigned long long v3;  // rbx\n    char *v5;  // rax\n\n    __printf_chk(0x1, \"%s -> %s\", sub_40dcf0(), sub_40dcf0());\n    if (v2 != 0)\n    {\n        v3 = (unsigned int)sub_40ddd0();\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x415692, 0x5));\n    }\n    v5 = stdout[5];\n    if (stdout[5] < stdout[6])\n    {\n        stdout[5] = stdout[5] + 1;\n        *(v5) = 10;\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40dfd0",
            "funcStartAddr": "0x40dfd0",
            "funcEndAddr": "0x40dfda",
            "decompiledFuncCode": "int sub_40dfd0()\n{\n}\n"
        },
        {
            "funcName": "sub_40f450",
            "funcStartAddr": "0x40f450",
            "funcEndAddr": "0x40f45a",
            "decompiledFuncCode": "int sub_40f450()\n{\n}\n"
        },
        {
            "funcName": "sub_411d40",
            "funcStartAddr": "0x411d40",
            "funcEndAddr": "0x411d9d",
            "decompiledFuncCode": "extern unsigned int g_417010;\nextern unsigned int g_417020;\nextern unsigned int g_61b3d0;\n\nint sub_411d40()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_40e020();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x417020, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x417010, 0x5);\n    }\n    error(g_61b3d0, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_40eb50",
            "funcStartAddr": "0x40eb50",
            "funcEndAddr": "0x40eb5a",
            "decompiledFuncCode": "int sub_40eb50()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4093d0",
            "funcStartAddr": "0x4093d0",
            "funcEndAddr": "0x4093e6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4093d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rdi\n\n    v0 = v2;\n    free(v3->field_10);\n}\n"
        },
        {
            "funcName": "sub_40b290",
            "funcStartAddr": "0x40b290",
            "funcEndAddr": "0x40b30a",
            "decompiledFuncCode": "extern int512_t g_415c00;\n\nint sub_40b290()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 0x415c00)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_415c00;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40f3a0",
            "funcStartAddr": "0x40f3a0",
            "funcEndAddr": "0x40f43f",
            "decompiledFuncCode": "int sub_40f3a0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2;  // r9\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r10\n    char v6;  // al\n    unsigned long long v7;  // ecx\n    unsigned long long v8;  // rax\n    char v9;  // al\n    unsigned long long v10;  // rax\n\n    v2 = v1[1];\n    if (v1[1] <= 999999999 || v1[1] - 1073741822 <= 1)\n    {\n        v3 = v1[3];\n    }\n    if (v1[1] <= 999999999 && v1[3] <= 999999999 || v1[1] <= 999999999 && v1[3] - 1073741822 <= 1 || v1[1] - 1073741822 <= 1 && v1[3] <= 999999999 || v1[1] - 1073741822 <= 1 && v1[3] - 1073741822 <= 1)\n    {\n        v7 = 0;\n        v5 = 0;\n        if (v1[1] - 1073741822 <= 1)\n        {\n            v1[0] = 0;\n            v7 = 0;\n            v5 = 1;\n            v7 = (char)(v2 == 1073741822);\n        }\n        if (v1[3] - 1073741822 <= 1)\n        {\n            v4 = 0;\n            v1[2] = 0;\n            v5 = 1;\n            v6 = v3 == 1073741822;\n            v7 = (unsigned int)(v7 + rax<8>);\n        }\n        v8 = 0;\n        v9 = v7 == 1;\n        v10 = rax<8> + v5;\n        return v10;\n    }\n    *(__errno_location()) = 22;\n    return -18446744069414584321;\n}\n"
        },
        {
            "funcName": "sub_40c2d0",
            "funcStartAddr": "0x40c2d0",
            "funcEndAddr": "0x40c2f7",
            "decompiledFuncCode": "int sub_40c2d0()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_4115a0() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40dea0",
            "funcStartAddr": "0x40dea0",
            "funcEndAddr": "0x40df13",
            "decompiledFuncCode": "int sub_40dea0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40d7d0();\n}\n"
        },
        {
            "funcName": "sub_40ddd0",
            "funcStartAddr": "0x40ddd0",
            "funcEndAddr": "0x40dddc",
            "decompiledFuncCode": "int sub_40ddd0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ff00",
            "funcStartAddr": "0x40ff00",
            "funcEndAddr": "0x40ff59",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40ff00()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_40fb00();\n}\n"
        },
        {
            "funcName": "sub_403221",
            "funcStartAddr": "0x403221",
            "funcEndAddr": "0x403278",
            "decompiledFuncCode": "extern char g_61b468;\nextern unsigned long long g_61b470;\n\nint sub_403221()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_61b468 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_61b470 >= 0)\n            {\n                break;\n            }\n            g_61b470 = g_61b470 + 1;\n            *((long long *)(6401600 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_61b468 = 1;\n        return sub_4031cb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_412908",
            "funcStartAddr": "0x412908",
            "funcEndAddr": "0x412928",
            "decompiledFuncCode": "extern unsigned long long g_61ae30;\n\nint sub_412908()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_61ae30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404b90",
            "funcStartAddr": "0x404b90",
            "funcEndAddr": "0x404f86",
            "decompiledFuncCode": "extern unsigned int g_4156e5;\nextern unsigned int g_4156f6;\nextern unsigned int g_415707;\n\nint sub_404b90()\n{\n    void tmp_2;  // tmp #2\n    void tmp_14;  // tmp #14\n    unsigned int|unsigned long v0;  // [bp-0xa0]\n    void tmp_3;  // tmp #3\n    unsigned long v1;  // [bp-0x98]\n    unsigned int v2;  // [bp-0x90]\n    char v3;  // [bp-0x8b]\n    char v4;  // [bp-0x8a]\n    char v5;  // [bp-0x89]\n    void *v6;  // [bp-0x88]\n    unsigned long v7;  // [bp-0x80]\n    unsigned long long v8;  // [bp-0x78]\n    char v9;  // [bp-0x70]\n    unsigned long v10;  // [bp-0x68]\n    unsigned long long *v11;  // [bp-0x60]\n    unsigned long v12;  // [bp-0x58]\n    char *v13;  // [bp-0x48]\n    unsigned int v14;  // [bp-0x3c]\n    unsigned long v15;  // [bp+0x8]\n    unsigned long v16;  // [bp+0x10]\n    unsigned long v17;  // [bp+0x18]\n    unsigned long long *v18;  // [bp+0x20]\n    char *v19;  // [bp+0x28]\n    char v20;  // r9b\n    unsigned int v21;  // r9d\n    void *v22;  // rdx\n    unsigned int v23;  // esi\n    unsigned long v24;  // r8\n    unsigned long v25;  // rcx\n    unsigned int v26;  // edi\n    unsigned long long v27;  // cc_dep1\n    void *v29;  // r11\n    char *v30;  // rsi\n    unsigned int|unsigned long v31;  // rdx\n    unsigned long long v32;  // r9\n    unsigned long long v33;  // r9\n    unsigned long long v34;  // r12\n    void *|unsigned long long v35;  // r13\n    unsigned long long v36;  // r14\n    unsigned long long v37;  // r15\n    unsigned long long v38;  // rbx\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // r15\n    unsigned int *v41;  // rbx\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rbp\n    unsigned long long v44;  // rbp\n    unsigned long long v45;  // rax\n\n    v5 = v20;\n    v10 = v15;\n    *(v19) = 0;\n    v1 = v16;\n    v11 = v18;\n    v7 = v17;\n    v13 = v19;\n    *(v18) = 0;\n    if (v17 != 0)\n    {\n        v14 = v21;\n        v36 = 0;\n        v37 = 0;\n        v6 = v22;\n        v2 = v23;\n        *((int *)&v12) = (v24 == 0? v25 : v24);\n        while (true)\n        {\n            v39 = read(v26, v6, (v25 <= v7? *((long long *)&v9) : v7));\n            v8 = v39;\n            v27 = v39;\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v41 = __errno_location();\n                v40 = 0;\n                v44 = (unsigned int)sub_40ddd0();\n                error(0x0, *(v41), (unsigned long long)dcgettext(0x0, 0x4156e5, 0x5));\n            }\n            else if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v35 = v6;\n                v34 = v8;\n                v38 = v12;\n                *(v11) = *(v11) + v8;\n                v29 = v6;\n                v3 = v24 != 0;\n                while (true)\n                {\n                    tmp_2 = v38;\n                    tmp_14 = !(v38 <= v34);\n                    v38 = (!(v38 <= v34)? v34 : v38);\n                    v39 = (tmp_14? v34 : tmp_2) != 0 & v3;\n                    if (((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                    {\n                        v30 = v35;\n                        v31 = v38;\n                        while (true)\n                        {\n                            if (*(v30) == 0)\n                            {\n                                v30 = &v30[1];\n                                v31 -= 1;\n                                if (v31 != 1)\n                                {\n                                    v0 = v29;\n                                    v39 = (char)(memcmp(v35, v30, (unsigned int)v39 ^ 0) != 0);\n                                }\n                                else\n                                {\n                                    v32 = (0 ^ 1) & (unsigned int)v11;\n                                }\n                            }\n                            else\n                            {\n                                v39 = v39;\n                                v31 = 0;\n                                v39 = 0;\n                            }\n                            if (v31 != 1 || *(v30) != 0)\n                            {\n                                v32 = v21 & v31;\n                                if (v38 == v34 && v39 != 0)\n                                {\n                                    if (v32 != 0)\n                                    {\n                                        v0 = 1;\n                                        v39 = 0;\n                                    }\n                                    else\n                                    {\n                                        v39 = 0;\n                                    }\n                                }\n                            }\n                            if (v39 == 0 || v38 != v34 || v31 == 1 && *(v30) == 0)\n                            {\n                                if (v32 == 0)\n                                {\n                                    break;\n                                }\n                                v0 = 0;\n                            }\n                            if (v32 != 0)\n                            {\n                                *((unsigned long long *)&v4) = v32;\n                                break;\n                            }\n                        }\n                        if (v32 == 0 && v38 == v34 && v39 != 0 && ((v31 & 15) == 0 || *(v30) != 0) && (v31 != 1 || *(v30) != 0))\n                        {\n                            v37 += v38;\n                            v0 = 1;\n                            v4 = 0;\n                        }\n                        else if ((v38 == v34 || v32 != 0) && (v39 != 0 || v32 != 0) && (v31 == 1 || (v31 & 15) == 0 || *(v30) != 0) && (v31 != 1 || v32 != 0 || *(v30) != 0) && (v31 == 1 || v39 == 0 || v32 != 0 || v38 != v34) && (v39 == 0 || *(v30) == 0 || v32 != 0 || v38 != v34))\n                        {\n                            v39 = sub_404ad0();\n                            v33 = v4;\n                        }\n                        else if ((v38 == v34 || v32 != 0) && (v39 != 0 || v32 != 0) && (v31 == 1 || (v31 & 15) == 0 || *(v30) != 0) && (v31 != 1 || v32 != 0 || *(v30) != 0) && (v31 == 1 || v39 == 0 || v32 != 0 || v38 != v34) && (v39 == 0 || *(v30) == 0 || v32 != 0 || v38 != v34))\n                        {\n                            v39 = sub_40b000();\n                            v33 = v4;\n                        }\n                    }\n                    else\n                    {\n                        v39 = v36;\n                    }\n                    if ((((char)((unsigned int)v36 ^ 1) & v38 == v34) == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || v36 != 0) && (((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || v38 != 0))\n                    {\n                        if (9223372036854775807 - v38 >= v37)\n                        {\n                            v37 += v38;\n                            v34 -= v38;\n                            v35 += v38;\n                            v36 = v39;\n                        }\n                        else\n                        {\n                            v40 = 0;\n                            v42 = (unsigned int)sub_40ddd0();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x415707, 0x5));\n                        }\n                    }\n                    if (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && v38 == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) == 0 && ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || v36 != 0 && ((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                    {\n                        v37 += v38;\n                        v0 = 1;\n                        v4 = 0;\n                    }\n                    if (v36 == 0)\n                    {\n                        if (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                        {\n                            v39 = sub_40b000();\n                            v33 = v4;\n                            if (v37 != v39)\n                            {\n                                v40 = v36;\n                                v43 = (unsigned int)sub_40ddd0();\n                                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4156f6, 0x5));\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0)\n                        {\n                            v39 = sub_404ad0();\n                            v33 = v4;\n                            if ((char)v37 == 0)\n                            {\n                                v37 = v39;\n                            }\n                        }\n                    }\n                    if (v36 != 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (char)v37 != 0 || v36 == 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && v37 == v39)\n                    {\n                        if (v0 == 0)\n                        {\n                            v34 -= v38;\n                            v36 = v39;\n                            v35 += v38;\n                            v37 = v38;\n                        }\n                        else if (v38 != 0)\n                        {\n                            if (v33 != 0)\n                            {\n                                v37 = v38;\n                                v36 = v39;\n                                v38 = 0;\n                            }\n                            else\n                            {\n                                v34 -= v38;\n                                v36 = v39;\n                                v35 += v38;\n                                v37 = 0;\n                            }\n                        }\n                    }\n                    if (...)\n                    {\n                        tmp_3 = v7;\n                        v7 -= v8;\n                        *((unsigned long long *)&v13) = v39;\n                        if (tmp_3 != v8)\n                        {\n                            v36 = v39;\n                        }\n                    }\n                }\n                if (((v36 != 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (char)v37 != 0 || v36 == 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && v37 == v39) && v0 != 0 && v38 == 0 || v34 == 0) && tmp_3 == v8)\n                {\n                    if (v39 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (((v36 != 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (char)v37 != 0 || v36 == 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && v37 == v39) && v0 != 0 && v38 == 0 || v34 == 0) && tmp_3 != v8)\n                {\n                    v39 = read(v26, v6, (v25 <= v7? *((long long *)&v9) : v7));\n                    v8 = v39;\n                    v27 = v39;\n                }\n                else if ((char)v37 == 0 && v36 != 0 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) || v36 == 0 && v37 != v39 && (v38 == 0 || ((char)((unsigned int)v36 ^ 1) & v38 == v34) != 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) || 9223372036854775807 - v38 < v37 && (((char)((unsigned int)v36 ^ 1) & v38 == v34) == 0 || ((tmp_14? v34 : tmp_2) != 0 & v3) != 0) && (((tmp_14? v34 : tmp_2) != 0 & v3) == 0 || v36 != 0) && (((tmp_14? v34 : tmp_2) != 0 & v3) != 0 || v38 != 0))\n                {\n                    v45 = v40;\n                    return v45;\n                }\n            }\n            else\n            {\n                v39 = v36;\n            }\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v39 != 0)\n        {\n            v40 = 1;\n        }\n        else if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v41) != 4)\n        {\n            v45 = v40;\n            return v45;\n        }\n    }\n    v40 = 1;\n    v45 = v40;\n    return v45;\n}\n"
        },
        {
            "funcName": "sub_40baa0",
            "funcStartAddr": "0x40baa0",
            "funcEndAddr": "0x40bb45",
            "decompiledFuncCode": "int sub_40baa0()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40ac50",
            "funcStartAddr": "0x40ac50",
            "funcEndAddr": "0x40ac96",
            "decompiledFuncCode": "int sub_40ac50()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_40eaf0();\n}\n"
        },
        {
            "funcName": "sub_411340",
            "funcStartAddr": "0x411340",
            "funcEndAddr": "0x411353",
            "decompiledFuncCode": "int sub_411340()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4112c0();\n}\n"
        },
        {
            "funcName": "sub_411470",
            "funcStartAddr": "0x411470",
            "funcEndAddr": "0x411492",
            "decompiledFuncCode": "int sub_411470()\n{\n    return 0 - (unsigned int)(char)(sub_411450() != 0);\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x409580",
            "funcEndAddr": "0x409833",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_20;\n    char field_21;\n    char padding_22[6];\n    unsigned long long field_28;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    char field_20;\n    char field_21;\n    char padding_22[6];\n    struct struct_2 *field_28;\n} struct_1;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_4;\n\nint sub_409580()\n{\n    char|unsigned long long v0;  // [bp-0x1038]\n    void tmp_15;  // tmp #15\n    unsigned long v1;  // [bp-0x1030]\n    unsigned int v2;  // [bp-0x1028]\n    unsigned int v3;  // [bp-0x1024]\n    unsigned int v4;  // [bp-0x1020]\n    unsigned long|unsigned long long v5;  // [bp-0x1018]\n    unsigned long|unsigned long long v6;  // [bp-0x1008]\n    unsigned int v7;  // [bp-0xff0]\n    unsigned long long v9;  // r13\n    struct_0 *v10;  // rdi\n    struct_1 *v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rdx\n    unsigned long v14;  // d\n    unsigned long long v15;  // rcx\n    unsigned long long *v16;  // rdi\n    unsigned long long v17;  // rax\n    unsigned long long *v19;  // rdi\n    unsigned long long v20;  // rcx\n    unsigned long v22;  // rax\n    unsigned long v23;  // rdx\n    unsigned long long v24;  // rax\n    struct_4 *v25;  // rbx\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rdx\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rsi\n    unsigned int|unsigned long v31;  // r9\n    unsigned long long v32;  // r10\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // al\n    unsigned long long *v39;  // rdx\n\n    v9 = 0;\n    v11 = v10;\n    v12 = v10->field_28;\n    v13 = v10->field_8;\n    while (true)\n    {\n        v15 = 0x200;\n        for (v16 = &v0; v15 != 0; v16 = &v16[v14])\n        {\n            v15 -= 1;\n            v0 = 0;\n        }\n        v0 = v13;\n        v4 = 72;\n        v2 = v11->field_10;\n        v1 = !(*((long long *)&v0));\n        v17 = ioctl(v11->field_0, 0xc020660b, (unsigned int)&v0);\n        if (v17 >= 0)\n        {\n            v37 = v3;\n            if (!(v3 != 0))\n            {\n                v36 = v11->field_8;\n                v11->field_21 = 1;\n                v37 = (char)(v36 != 0);\n            }\n            else if (v11->field_18 <= !((unsigned long long)v3))\n            {\n                v19 = v11->field_28;\n                v20 = v11->field_18 + v3;\n                v11->field_18 = v20;\n                v22 = 24 * v20;\n                v23 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x18<64>, rcx<8>, cc_ndep<8>);\n                if (v23 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    v24 = sub_410140();\n                    v11->field_28 = v24;\n                    v25 = (char *)(v12 + -0x1 * v19) + v24;\n                    v26 = v6;\n                    v27 = v5;\n                    if (v5 <= 9223372036854775807 - v6)\n                    {\n                        v28 = 0;\n                        v29 = &v5;\n                        do\n                        {\n                            if ((unsigned int)v9 != 0)\n                            {\n                                v31 = v7;\n                                v32 = v25->field_8;\n                                v30 = v25->field_0 + v25->field_8;\n                                if (*((int *)&v25->field_10) == (v7 & -2) && v27 == v30)\n                                {\n                                    v33 = v26 + v32;\n                                    *((unsigned int *)&v25->field_10) = v7;\n                                    v28 = (unsigned int)v28 + 1;\n                                    v25->field_8 = v33;\n                                }\n                            }\n                            else\n                            {\n                                v30 = v11->field_8;\n                                if (v11->field_8 <= v27)\n                                {\n                                    v31 = v7;\n                                }\n                            }\n                            if ((unsigned int)v9 == 0 || *((int *)&v25->field_10) != (v7 & -2) || v27 != v30)\n                            {\n                                if ((v30 <= v27 || (unsigned int)v9 == 0) && (v11->field_8 <= v27 || (unsigned int)v9 != 0))\n                                {\n                                    tmp_15 = v9;\n                                    v28 = (unsigned int)v28 + 1;\n                                    v9 = (unsigned int)v9 + 1;\n                                    v25 = &v11->field_28[2 * tmp_15 + tmp_15];\n                                    v11->field_28[2 * tmp_15 + tmp_15].field_0 = v27;\n                                    v25->field_8 = v26;\n                                    *((unsigned long *)&v25->field_10) = v31;\n                                    if ((unsigned int)v28 >= v3)\n                                    {\n                                        break;\n                                    }\n                                }\n                                if (((unsigned int)v9 == 0 || v30 > v27) && ((unsigned int)v9 != 0 || v11->field_8 > v27))\n                                {\n                                    if (v30 - v27 < v26)\n                                    {\n                                        break;\n                                    }\n                                    v5 = v30;\n                                    v34 = v27 + v26 - v30;\n                                    v6 = v34;\n                                }\n                            }\n                            if ((unsigned int)v28 >= v3 && (v30 > v27 || v11->field_8 > v27))\n                            {\n                                break;\n                            }\n                            v29 = &(&v5)[7 * v28];\n                            v26 = (&v5)[2 + 7 * v28];\n                            v27 = (&v5)[7 * v28];\n                        }\n                        while ((&v5)[7 * v28] <= 9223372036854775807 - (&v5)[2 + 7 * v28]);\n                        if ((unsigned int)v28 < v3 || (unsigned int)v28 < v3)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                        else if (((unsigned int)v9 == 0 || v30 > v27) && ((unsigned int)v9 != 0 || v11->field_8 > v27) && ((unsigned int)v9 == 0 || *((int *)&v25->field_10) != (v7 & -2) || v27 != v30))\n                        {\n                            v37 = 0;\n                            if (v11->field_8 != 0)\n                            {\n                                break;\n                            }\n                        }\n                        if ((v25->field_10 & 1) == 0)\n                        {\n                            v35 = v11->field_21;\n                            if ((unsigned int)v9 <= 72)\n                            {\n                                v11->field_18 = v9;\n                                if (v35 == 0)\n                                {\n                                    v11->field_8 = v25->field_8 + v25->field_0;\n                                }\n                            }\n                            else if (v35 == 0)\n                            {\n                                v39 = v11->field_28;\n                                v11->field_18 = v9 - 1;\n                                v11->field_8 = v39[3 * v9 + -5] + v39[3 * v9 + -6];\n                            }\n                        }\n                        else\n                        {\n                            v11->field_21 = 1;\n                        }\n                        if ((v25->field_10 & 1) != 0 || v35 != 0 && (unsigned int)v9 > 72)\n                        {\n                            v11->field_18 = v9;\n                        }\n                        v37 = 1;\n                    }\n                    __assert_fail(); /* do not return */\n                }\n                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v23 != 0)\n                {\n                    sub_410330(); /* do not return */\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (v17 < 0 || v23 == 0 && v5 <= 9223372036854775807 - v6 && v11->field_18 <= !((unsigned long long)v3) && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 != 0)\n        {\n            v11->field_20 = 1;\n            v37 = 0;\n        }\n    }\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_40ea70",
            "funcStartAddr": "0x40ea70",
            "funcEndAddr": "0x40ea9b",
            "decompiledFuncCode": "int sub_40ea70()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_40e910();\n    }\n    sub_40e8f0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4114a0",
            "funcStartAddr": "0x4114a0",
            "funcEndAddr": "0x4114fc",
            "decompiledFuncCode": "int sub_4114a0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_412760();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4093a0",
            "funcStartAddr": "0x4093a0",
            "funcEndAddr": "0x4093ac",
            "decompiledFuncCode": "int sub_4093a0()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_410140",
            "funcStartAddr": "0x410140",
            "funcEndAddr": "0x410170",
            "decompiledFuncCode": "int sub_410140()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_410330(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_410330",
            "funcStartAddr": "0x410330",
            "funcEndAddr": "0x41035c",
            "decompiledFuncCode": "extern unsigned int g_416e4f;\nextern unsigned int g_61b3d0;\n\nint sub_410330()\n{\n    dcgettext(0x0, 0x416e4f, 0x5);\n    error(g_61b3d0, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_40c0b0",
            "funcStartAddr": "0x40c0b0",
            "funcEndAddr": "0x40c0e4",
            "decompiledFuncCode": "int sub_40c0b0()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_40be30();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40c5a0",
            "funcStartAddr": "0x40c5a0",
            "funcEndAddr": "0x40d6d8",
            "decompiledFuncCode": "int sub_40c5a0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char|unsigned long long v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    char|unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|char|unsigned long long v77;  // rsi\n    unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_40c4a0();\n            v27 = (unsigned int)sub_40c4a0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v50 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                    v55 = 0;\n                                    v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                                    v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                                    if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) != 0)\n                                    {\n                                        v78 = 0;\n                                        v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                        v77 = (unsigned int)v39 == 2;\n                                    }\n                                    if (v17 == 0)\n                                    {\n                                        v77 = (unsigned int)v39 == 2;\n                                        v80 += 1;\n                                        v46 = (v78 ^ 1) & (unsigned int)v33;\n                                        if (v46 != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v79 > v76 + 1)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 39;\n                                            }\n                                            v76 += 2;\n                                            v33 = 0;\n                                        }\n                                        v73 = (unsigned int)v33 ^ 1;\n                                        v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                                        if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                                        {\n                                            if (v79 > v76)\n                                            {\n                                                *((char *)(v29 + v76)) = 39;\n                                            }\n                                            if (v76 + 1 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 1)) = 36;\n                                            }\n                                            v75 = v76 + 2;\n                                            if (v76 + 2 < v79)\n                                            {\n                                                *((char *)(v29 + v76 + 2)) = 39;\n                                            }\n                                            v76 += 3;\n                                            v33 = rax<8>;\n                                        }\n                                        if (v79 > v76)\n                                        {\n                                            *((char *)(v29 + v76)) = 92;\n                                        }\n                                        v76 += 1;\n                                        v80 += 1;\n                                    }\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v77 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v77 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v77 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_40c5a0();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_40c5a0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_4113c0();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n                v87 = v77;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v15 != 1 || v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v77 == 0 || v80 < v64) && (v77 == 0 || v63 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v17 == 0 || v76 >= v79) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0 || v76 >= v79) && (v17 == 0 || v15 != 1 || v77 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0 || v15 != 1 || v77 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v76 == 0 && v78 == 0 && (v81 == 2 & v17) != 0)\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_4051e0",
            "funcStartAddr": "0x4051e0",
            "funcEndAddr": "0x4053a1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char field_1b;\n    char padding_1c[8];\n    char field_24;\n    char padding_25[6];\n    char field_2b;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_1;\n\nextern unsigned int g_4139c8;\nextern unsigned int g_41571b;\n\nint sub_4051e0()\n{\n    unsigned int|unsigned long v1;  // rsi\n    unsigned int v2;  // r12d\n    unsigned int v3;  // ebx\n    char v4;  // r8b\n    struct_0 *v5;  // rdi\n    struct_1 *v6;  // r9\n    struct_1 *v7;  // r9\n    unsigned int v8;  // rdx\n    unsigned int v9;  // eax\n    unsigned int v10;  // ah\n    unsigned int v11;  // eax\n    unsigned long long v12;  // rax\n    unsigned int *v13;  // rbx\n    unsigned int v14;  // eax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rdx\n    unsigned int *v18;  // r14\n    unsigned int v19;  // ebx\n    unsigned int *v20;  // r14\n    unsigned int *v21;  // r15\n    unsigned int v22;  // r14d\n    unsigned int *v23;  // r15\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // r12\n\n    v2 = v1;\n    v3 = v8;\n    if (v4 == 0)\n    {\n        if ((71776119061217535 & v5->field_18) != 0)\n        {\n            v1 = v6->field_18;\n        }\n        else if (v5->padding_25[1] != 0)\n        {\n            v1 = v7->field_18;\n        }\n        if ((71776119061217535 & v5->field_18) != 0 || v5->padding_25[1] != 0)\n        {\n            v9 = !((unsigned int)rdx<8>);\n            v10 = (char)(!((unsigned int)rdx<8>) >> 8) | 14;\n            v11 = rax<4> & v1;\n            if (((unsigned short)v11 & 4095) != 0)\n            {\n                v12 = sub_40c480();\n                if (v12 != 0)\n                {\n                    v13 = __errno_location();\n                    v14 = *(v13);\n                    if (*(&((char *)&v5->field_18)[3]) != 0 || v14 != 22 && v14 != 1)\n                    {\n                        v24 = (unsigned int)sub_40ddd0();\n                        error(0x0, *(v13), (unsigned long long)dcgettext(0x0, 0x41571b, 0x5));\n                    }\n                }\n            }\n        }\n    }\n    if (v8 != -1)\n    {\n        if (((71776119061217535 & v5->field_18) == 0 || v12 == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0) && (v12 == 0 || v5->padding_25[1] == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0))\n        {\n            v16 = fchown(v3);\n            if (v16 != 0)\n            {\n                v22 = *(v21);\n                v21 = __errno_location();\n                if (v22 == 22 || *(v21) == 1)\n                {\n                    fchown(v3);\n                    *(v23) = v22;\n                }\n            }\n        }\n    }\n    else\n    {\n        if (((71776119061217535 & v5->field_18) == 0 || v12 == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0) && (v12 == 0 || v5->padding_25[1] == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0))\n        {\n            v15 = lchown(v2);\n            if (v15 != 0)\n            {\n                v19 = *(v18);\n                v18 = __errno_location();\n                if (*(v18) == 1 || v19 == 22)\n                {\n                    lchown(v2);\n                    *(v20) = v19;\n                }\n            }\n        }\n    }\n    if (v12 == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0 || (71776119061217535 & v5->field_18) == 0 && v5->padding_25[1] == 0)\n    {\n        if ((v8 == -1 || v16 == 0) && (v15 == 0 || v8 != -1))\n        {\n            v17 = 1;\n        }\n        if (v8 == -1 && v15 != 0 || v8 != -1 && v16 != 0)\n        {\n            v25 = sub_4051b0();\n            v17 = 0;\n            if (v25 == 0)\n            {\n                v26 = (unsigned int)sub_40ddd0();\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4139c8, 0x5));\n            }\n        }\n    }\n    if (v4 == 0 && v12 != 0 && ((unsigned short)v11 & 4095) != 0 && ((71776119061217535 & v5->field_18) != 0 || v5->padding_25[1] != 0) || (v8 == -1 || v16 != 0) && (v15 != 0 || v8 != -1) && ((71776119061217535 & v5->field_18) == 0 || v12 == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0) && (v12 == 0 || v5->padding_25[1] == 0 || ((unsigned short)v11 & 4095) == 0 || v4 != 0) && v25 == 0)\n    {\n        v17 = 0 - (unsigned int)v5->padding_1c[3];\n    }\n    return v17;\n}\n"
        },
        {
            "funcName": "sub_409500",
            "funcStartAddr": "0x409500",
            "funcEndAddr": "0x409536",
            "decompiledFuncCode": "extern unsigned long long g_61b8f8;\n\nint sub_409500()\n{\n    g_61b8f8 = (unsigned int)sub_40b910();\n    if (g_61b8f8 != 0)\n    {\n        return g_61b8f8;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_411cc0",
            "funcStartAddr": "0x411cc0",
            "funcEndAddr": "0x411cde",
            "decompiledFuncCode": "int sub_411cc0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __explicit_bzero_chk();\n}\n"
        },
        {
            "funcName": "sub_40c310",
            "funcStartAddr": "0x40c310",
            "funcEndAddr": "0x40c332",
            "decompiledFuncCode": "int sub_40c310()\n{\n    unsigned long long v1[3];  // rdi\n    unsigned long long v2[3];  // rsi\n\n    if (v1[1] != v2[1] || v1[2] != v2[2])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a7f8",
            "decompiledFuncCode": "extern unsigned long long g_61b908;\n\nint sub_40a7f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61b908 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40f8b0",
            "funcStartAddr": "0x40f8b0",
            "funcEndAddr": "0x40fad0",
            "decompiledFuncCode": "extern unsigned int g_61ba88;\nextern unsigned int g_61ba8c;\n\nint sub_40f8b0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    unsigned long|void v1;  // [bp-0xc8]\n    unsigned long v2;  // [bp-0xc0]\n    unsigned long|void v3;  // [bp-0xb8]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned int v5;  // [bp-0x90]\n    unsigned long v6;  // [bp-0x60]\n    unsigned long v7;  // [bp-0x58]\n    unsigned long v8;  // [bp-0x50]\n    unsigned long v9;  // [bp-0x48]\n    uint128_t v11[2];  // rsi\n    unsigned int|unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned int v14;  // edi\n    unsigned long long v15;  // rax\n    unsigned int *v16;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rbp\n\n    if (v11 != 0)\n    {\n        v0 = stack_base + -200;\n        *((int128_t *)&v1) = *((int128_t *)&v11);\n        *((int128_t *)&v3) = *((int128_t *)&v11[2]);\n        v12 = (unsigned int)sub_40f3a0();\n        if ((unsigned int)v12 >= 0 && g_61ba88 >= 0 && (unsigned int)v12 == 2)\n        {\n            v13 = __lxstat();\n            if (v13 == 0)\n            {\n                if ((long long)(&v1)[8] != 1073741822)\n                {\n                    v12 = 3;\n                    if ((long long)(&v3)[8] == 1073741822)\n                    {\n                        v4 = v9;\n                        v3 = v8;\n                    }\n                }\n                else\n                {\n                    v12 = 3;\n                    v1 = v6;\n                    v2 = v7;\n                }\n            }\n        }\n    }\n    else\n    {\n        v12 = 0;\n        v0 = 0;\n        if (g_61ba88 < 0)\n        {\n            g_61ba88 = -1;\n        }\n    }\n    if (g_61ba88 >= 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (v13 == 0 || v11 == 0 || (unsigned int)v12 != 2))\n    {\n        v15 = utimensat(0xffffff9c, v14);\n        if ((unsigned int)v15 > 0)\n        {\n            *(__errno_location()) = 38;\n        }\n        else\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v16 = __errno_location();\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) || *(v16) != 38)\n            {\n                g_61ba8c = 1;\n                g_61ba88 = 1;\n                return stack_base + 0;\n            }\n        }\n    }\n    if ((v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2))\n    {\n        g_61ba88 = -1;\n        if (v12 != 0 && v12 != 3)\n        {\n            v18 = __lxstat();\n        }\n    }\n    if (g_61ba88 < 0 && v11 == 0 || v12 == 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2))\n    {\n        v17 = __lxstat();\n    }\n    if (v12 != 3 && v12 != 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2) && v18 == 0 && v0 != 0 || v12 == 3 && v12 != 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2) && v0 != 0)\n    {\n        v19 = sub_40f2d0();\n    }\n    if ((v12 != 3 && v12 != 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2) && v18 == 0 && v0 != 0 || v12 == 3 && v12 != 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2) && v0 != 0) && v19 == 0 || v12 != 3 && v12 != 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2) && v18 == 0 && v0 == 0 || v12 == 3 && v12 != 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2) && v0 == 0 || (g_61ba88 < 0 && v11 == 0 || v12 == 0 && (v11 == 0 || (unsigned int)v12 >= 0) && (g_61ba88 >= 0 || v11 != 0) && (g_61ba88 < 0 || *(v16) == 38 || (unsigned int)v15 > 0) && (g_61ba88 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || (unsigned int)v15 > 0) && (g_61ba88 < 0 || v13 == 0 || v11 == 0 || (unsigned int)v12 != 2)) && v17 == 0)\n    {\n        if (((unsigned short)v5 & 0xf000) != 0xa000)\n        {\n            v20 = (unsigned int)sub_40f460();\n        }\n        else\n        {\n            *(__errno_location()) = 38;\n        }\n    }\n    if (...)\n    {\n        return stack_base + 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4041b0",
            "funcStartAddr": "0x4041b0",
            "funcEndAddr": "0x40462b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[18];\n    char field_16;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[160];\n    unsigned long long field_a0;\n} struct_1;\n\nextern char g_40424c;\nextern char g_404257;\nextern char g_40426d;\nextern char g_4042a6;\nextern char g_4042cc;\nextern char g_4042fc;\nextern char g_404329;\nextern char g_404331;\nextern char g_40433c;\nextern char g_404364;\nextern char g_404386;\nextern char g_4043b2;\nextern char g_4044a8;\nextern char g_4044d3;\nextern char g_4044f9;\nextern unsigned int g_412a60;\nextern unsigned int g_414d70;\nextern unsigned int g_61b480;\nextern char g_61b4c8;\nextern char g_61b4c9;\n\nint sub_4041b0()\n{\n    unsigned long v0;  // [bp-0x100]\n    unsigned long v1;  // [bp-0xf8]\n    unsigned long v2;  // [bp-0xf0]\n    char v3;  // [bp-0xda]\n    void *v4;  // [bp-0xd8]\n    unsigned long long v5;  // [bp-0xd0]\n    char v6;  // [bp-0xc0]\n    unsigned int v7;  // [bp-0xb0]\n    unsigned long v8;  // [bp-0x38]\n    unsigned long v9;  // [bp-0x30]\n    unsigned long v10;  // [bp-0x28]\n    unsigned long v11;  // [bp-0x20]\n    unsigned long v12;  // [bp-0x18]\n    unsigned long v13;  // [bp-0x10]\n    unsigned long v14;  // [bp-0x8]\n    unsigned int v16;  // eax\n    unsigned long long v17;  // rdi\n    unsigned long long *v18;  // rsi\n    unsigned long v19;  // rdx\n    char v20;  // al\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v24;  // rbx\n    unsigned long long *v25;  // r12\n    unsigned long long v27;  // rbx\n    struct_0 *v28;  // r8\n    unsigned long v29;  // rsi\n    void *v32;  // r12\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rdx\n    unsigned long long v36;  // rax\n    char *v37;  // rdi\n    unsigned long long v40;  // r13\n    char *v43;  // rsi\n    void *|unsigned long long v44;  // r13\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // cc_dep1\n    unsigned long long v49;  // cc_dep2\n    unsigned long v50;  // d\n    unsigned long long v52;  // rax\n    struct_1 *v53;  // rdi\n    unsigned long long *v54;  // rbx\n    unsigned int|unsigned long long v55;  // r15\n    struct_0 *v58;  // rsi\n    unsigned int *v59;  // rdi\n    unsigned long long v60;  // rcx\n    unsigned long v61;  // d\n    unsigned long long v62;  // rax\n\n    v16 = 0;\n    v25 = v17;\n    v54 = v18;\n    rsp<8> = stack_base + -248;\n    v2 = v19;\n    v20 = v19 == 0;\n    v3 = 0;\n    if (rax<4> < (unsigned int)v17)\n    {\n        if (v47 == 0)\n        {\n            if (v2 == 0 && (unsigned int)v17 != 1)\n            {\n                rsp<8> = stack_base + -0x100;\n                v22 = sub_4033e0();\n                if (v22 == 0)\n                {\n                    if ((unsigned int)v17 != 2)\n                    {\n                        v27 = (unsigned int)sub_40ddd0();\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x412a60, 0x5));\n                    }\n                }\n                else\n                {\n                    v25 = (unsigned long long)((unsigned int)v17 - 1);\n                    v2 = *((long long *)((char *)v54 + 0x8 * v25));\n                }\n            }\n            if ((*((long long *)((char *)v54 + 0x8 * v25)) != 0 || v2 != 0) && (v2 != 0 || (unsigned int)v17 != 1) && (v2 != 0 || v22 != 0))\n            {\n                if ((unsigned int)v25 != 1)\n                {\n                    sub_405110();\n                    rsp<8> = stack_base + -0x100;\n                    sub_405140();\n                }\n                v55 = 1;\n                v1 = &((unsigned long long *)((char *)v18 + 0x8 * ((char *)&v25[-1] + 7)))[1];\n                while (true)\n                {\n                    v32 = *(v54);\n                    v5 = 0;\n                    if (g_61b4c8 != 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v0 = &g_4044a8;\n                        sub_40abd0();\n                    }\n                    rsp<8> = rsp<8> - 8;\n                    v0 = &g_4042fc;\n                    v34 = strlen(v32);\n                    v35 = v34 + 1;\n                    v36 = v34 + 24 & -0x10;\n                    if (g_61b4c9 != 0)\n                    {\n                        rsp<8> = rsp<8> - v36 - 8;\n                        v14 = &g_40424c;\n                        v40 = memcpy(rsp<8> - v36 + 15 & -0x10, v32, v35);\n                        rsp<8> = rsp<8> - 8;\n                        v13 = &g_404257;\n                        sub_40abd0();\n                        rsp<8> = rsp<8> - 8;\n                        v12 = &g_40426d;\n                        v44 = (unsigned int)sub_40af00();\n                        rsp<8> = rsp<8> - 8;\n                        v11 = &g_4042a6;\n                        v45 = sub_4034a0();\n                        if (v45 == 0)\n                        {\n                            v52 = g_61b4c9;\n                            v55 = 0;\n                        }\n                        else\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v9 = &g_4043b2;\n                            v55 = (unsigned int)v55 & sub_403a50();\n                            v52 = g_61b4c9;\n                        }\n                        if (v52 != 0)\n                        {\n                            v53 = v4;\n                            if (v4 != 0)\n                            {\n                                while (true)\n                                {\n                                    v4 = v53->field_a0;\n                                    rsp<8> = rsp<8> - 8;\n                                    v8 = &g_4044d3;\n                                    free(v53);\n                                    v53 = v4;\n                                    if (v4 == 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v37 = rsp<8> - v36 + 15 & -0x10;\n                        rsp<8> = rsp<8> - v36 - 8;\n                        v14 = &g_404329;\n                        memcpy(v37, v32, v35);\n                        rsp<8> = rsp<8> - 8;\n                        v13 = &g_404331;\n                        rsp<8> = rsp<8> - 8;\n                        v12 = &g_40433c;\n                        sub_40abd0();\n                        v43 = (unsigned long long)(unsigned int)sub_40ab40();\n                        while (v47 != 0)\n                        {\n                            v47 -= 1;\n                            v48 = *(v43);\n                            v49 = *(v37);\n                            v37 = &v37[v50];\n                            v43 = &v43[v50];\n                            break;\n                        }\n                        if ((v48 > v49) - 0 - (v48 < v49) == 0)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v11 = &g_404364;\n                            v44 = (unsigned int)sub_410310();\n                        }\n                        else\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v11 = &g_4044f9;\n                            v44 = (unsigned int)sub_40af00();\n                        }\n                    }\n                    if (g_61b4c9 == 0 || v45 != 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v10 = &g_404386;\n                        v55 &= sub_409280();\n                    }\n                    v54 = &v54[1];\n                    rsp<8> = rsp<8> - 8;\n                    v8 = &g_4042cc;\n                    free(v44);\n                    if (v1 == v54)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        else\n        {\n            if (v2 == 0)\n            {\n                if ((unsigned int)v17 <= 2)\n                {\n                    sub_4033e0();\n                }\n                else\n                {\n                    v24 = (unsigned int)sub_40ddd0();\n                }\n            }\n            else\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x414d70, 0x5));\n            }\n        }\n        if (v2 == 0 && (v47 == 0 || (unsigned int)v17 <= 2) && (*((long long *)((char *)v54 + 0x8 * v25)) == 0 || (unsigned int)v17 == 1 || v22 == 0 || v47 != 0) && ((unsigned int)v17 == 2 || (unsigned int)v17 == 1 || v47 != 0 || v22 != 0))\n        {\n            if (g_61b4c9 == 0)\n            {\n                if (v28->field_16 != 0 && v28->field_0 != 0 && strcmp(*(v18), *((long long *)&v6)) == 0 && v3 == 0 && ((unsigned short)v7 & 0xf000) == 0x8000)\n                {\n                    sub_40a6f0();\n                    v58 = v28;\n                    v59 = &g_61b480;\n                    for (v60 = 18; v60 != 0; v58 = &(&v58->field_0)[v61])\n                    {\n                        v60 -= 1;\n                        *(v59) = v58->field_0;\n                        v59 = &v59[v61];\n                    }\n                    g_61b480 = 0;\n                }\n                v55 = (unsigned int)sub_409280();\n            }\n            else\n            {\n                v29 = \"with --parents, the destination must be a directory\";\n            }\n        }\n    }\n    else if ((unsigned int)v17 == 1)\n    {\n        v21 = (unsigned int)sub_40ddd0();\n    }\n    else\n    {\n        v29 = \"missing file operand\";\n    }\n    if (((unsigned int)v17 == 1 || rax<4> < (unsigned int)v17) && (v2 == 0 || rax<4> >= (unsigned int)v17) && (v47 != 0 || rax<4> >= (unsigned int)v17) && (rax<4> >= (unsigned int)v17 || (unsigned int)v17 > 2))\n    {\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v18, 0x5));\n    }\n    if ((unsigned int)v17 != 1 && rax<4> >= (unsigned int)v17 || v2 == 0 && rax<4> < (unsigned int)v17 && g_61b4c9 != 0 && (v47 == 0 || (unsigned int)v17 <= 2) && (*((long long *)((char *)v54 + 0x8 * v25)) == 0 || (unsigned int)v17 == 1 || v22 == 0 || v47 != 0) && ((unsigned int)v17 == 2 || (unsigned int)v17 == 1 || v47 != 0 || v22 != 0))\n    {\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v29, 0x5));\n    }\n    if (v47 == 0 && rax<4> < (unsigned int)v17 && (*((long long *)((char *)v54 + 0x8 * v25)) != 0 || v2 != 0) && (v2 != 0 || (unsigned int)v17 != 1) && (v2 != 0 || v22 != 0) || g_61b4c9 == 0 && v2 == 0 && rax<4> < (unsigned int)v17 && (v47 == 0 || (unsigned int)v17 <= 2) && (*((long long *)((char *)v54 + 0x8 * v25)) == 0 || (unsigned int)v17 == 1 || v22 == 0 || v47 != 0) && ((unsigned int)v17 == 2 || (unsigned int)v17 == 1 || v47 != 0 || v22 != 0))\n    {\n        v62 = v55;\n        return v62;\n    }\n    if ((unsigned int)v17 != 1 && rax<4> >= (unsigned int)v17 || ((unsigned int)v17 == 1 || rax<4> < (unsigned int)v17) && (v2 == 0 || rax<4> >= (unsigned int)v17) && (v47 != 0 || rax<4> >= (unsigned int)v17) && (rax<4> >= (unsigned int)v17 || (unsigned int)v17 > 2) || v2 == 0 && rax<4> < (unsigned int)v17 && g_61b4c9 != 0 && (v47 == 0 || (unsigned int)v17 <= 2) && (*((long long *)((char *)v54 + 0x8 * v25)) == 0 || (unsigned int)v17 == 1 || v22 == 0 || v47 != 0) && ((unsigned int)v17 == 2 || (unsigned int)v17 == 1 || v47 != 0 || v22 != 0))\n    {\n        sub_403c80(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40c4a0",
            "funcStartAddr": "0x40c4a0",
            "funcEndAddr": "0x40c57f",
            "decompiledFuncCode": "extern int512_t g_415c86;\nextern int512_t g_415c8a;\n\nint sub_40c4a0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_4115e0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_415c86 : 4283537);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_415c8a : 4283533);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4034a0",
            "funcStartAddr": "0x4034a0",
            "funcEndAddr": "0x403a21",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[28];\n    unsigned int field_1c;\n    char field_1d;\n    char field_1e;\n    char padding_1f[1];\n    char field_20;\n    char padding_21[5];\n    char field_26;\n} struct_0;\n\ntypedef struct struct_1 {\n    uint128_t field_0;\n    uint128_t field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    uint128_t field_20;\n    uint128_t field_30;\n    uint128_t field_40;\n    uint128_t field_50;\n    uint128_t field_60;\n    uint128_t field_70;\n    uint128_t field_80;\n    char field_90;\n    char padding_91[7];\n    unsigned long long field_98;\n    unsigned long long field_a0;\n} struct_1;\n\nextern char g_4034f7;\nextern char g_403502;\nextern char g_403527;\nextern char g_40354e;\nextern char g_40358a;\nextern char g_4035ad;\nextern char g_4035d8;\nextern char g_403658;\nextern char g_403665;\nextern char g_40367b;\nextern char g_40372a;\nextern char g_403774;\nextern char g_4037a1;\nextern char g_4037b5;\nextern char g_40381c;\nextern char g_403874;\nextern char g_403888;\nextern char g_4038a1;\nextern char g_4038ea;\nextern char g_403913;\nextern char g_403985;\nextern char g_403999;\nextern char g_4039aa;\nextern char g_4039cf;\nextern char g_4039e3;\nextern char g_4039eb;\nextern char g_4039fc;\nextern char g_403a1a;\nextern char g_403a36;\nextern unsigned int g_413960;\nextern unsigned int g_413980;\n\nint sub_4034a0()\n{\n    char v0;  // [bp-0x178]\n    unsigned long long v1;  // [bp-0x168]\n    char *v2;  // [bp-0x160]\n    char v3;  // [bp-0x158]\n    unsigned int v4;  // [bp-0x140]\n    char v5;  // [bp-0xc8]\n    void v6;  // [bp-0xb8]\n    unsigned int v7;  // [bp-0xb0]\n    void v8;  // [bp-0xa8]\n    void v9;  // [bp-0x98]\n    void v10;  // [bp-0x88]\n    unsigned long v11;  // [bp-0x80]\n    unsigned long|void v12;  // [bp-0x78]\n    unsigned long v13;  // [bp-0x70]\n    unsigned long|void v14;  // [bp-0x68]\n    unsigned long v15;  // [bp-0x60]\n    unsigned long v16;  // [bp-0x58]\n    unsigned long v17;  // [bp-0x50]\n    unsigned long|void v18;  // [bp-0x48]\n    unsigned long v19;  // [bp-0x40]\n    unsigned long v20;  // [bp-0x38]\n    unsigned long v21;  // [bp-0x30]\n    unsigned long v22;  // [bp-0x28]\n    unsigned long v23;  // [bp-0x20]\n    unsigned long v24;  // [bp-0x18]\n    unsigned long v25;  // [bp-0x10]\n    unsigned long v26;  // [bp-0x8]\n    unsigned int|char * v28;  // rsi\n    char *v29;  // r15\n    void *v30;  // rdi\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // r12\n    char *v33;  // r14\n    unsigned long long *v36;  // rcx\n    unsigned long long v37;  // rax\n    char *v38;  // rdi\n    char v39[2];  // rbx\n    unsigned long long v40;  // rax\n    unsigned int v41;  // r14d\n    struct_0 *v42;  // r9\n    unsigned long long v43;  // rax\n    unsigned int *v44;  // rax\n    struct_1 *v45;  // r15\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rax\n    unsigned int v49;  // esi\n    unsigned long long v50;  // r14\n    unsigned long long v51;  // rax\n    unsigned long long v52;  // rax\n    char *v53;  // rdx\n    unsigned long long v55;  // rax\n    unsigned long long v56;  // rax\n    unsigned long long v57;  // rax\n    char v58;  // cc_dep1\n    unsigned long long v59;  // r8\n    unsigned long long v60;  // r12\n    unsigned long long v61;  // r12\n    unsigned long long v62;  // r12\n    unsigned long long v63;  // rbx\n    unsigned long long v64;  // rbx\n    unsigned long long v65;  // rax\n    unsigned long v66;  // rsi\n\n    v29 = v28;\n    v1 = v59;\n    v31 = strlen(v30);\n    rsp<8> = &(&v0)[-1 * (v31 + 24 & -0x10) + -8];\n    v26 = &g_4034f7;\n    v32 = memcpy(&(&v0)[-1 * (v31 + 24 & -0x10) + 15] & -0x10, v30, v31 + 1);\n    rsp<8> = rsp<8> - 8;\n    v25 = &g_403502;\n    v33 = (unsigned long long)(unsigned int)sub_40aa80();\n    rsp<8> = rsp<8> - (&v33[24] & -0x10) - 8;\n    v26 = &g_403527;\n    memcpy(rsp<8> - (&v33[24] & -0x10) + 15 & -0x10, v28, v33);\n    *((char *)(v28 + v33)) = 0;\n    *(v36) = 0;\n    rsp<8> = rsp<8> - 8;\n    v25 = &g_40354e;\n    v37 = __xstat(0x1, (unsigned int)v28, (unsigned int)&v3);\n    if (v37 != 0)\n    {\n        v38 = v28 + v29;\n        v2 = v28 + v29;\n        if (*((char *)(v28 + v29)) == 47)\n        {\n            do\n            {\n                v38 = &v38[1];\n            }\n            while (*(v38) == 47);\n        }\n        else\n        {\n            v38 = v2;\n        }\n        while (true)\n        {\n            rsp<8> = rsp<8> - 8;\n            v24 = &g_40358a;\n            v39 = strchr(v38, 0x2f);\n            if (v39 == 0)\n            {\n                break;\n            }\n            v39[0] = 0;\n            rsp<8> = rsp<8> - 8;\n            v23 = &g_4035ad;\n            v40 = __xstat(0x1, v4, (unsigned int)&v3);\n            v41 = v40;\n            if ((unsigned int)v40 != 0 || (v42->field_1c & -0x100) != 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v22 = &g_403658;\n                v43 = __xstat(0x1, (unsigned int)v2, (unsigned int)&v5);\n                if (v43 != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v21 = &g_403665;\n                    v44 = __errno_location();\n                    v59 = *(v44);\n                }\n                else if (((unsigned short)v7 & 0xf000) != 0x4000)\n                {\n                    v59 = 20;\n                }\n                if (v43 == 0 && ((unsigned short)v7 & 0xf000) == 0x4000 || *(v44) == 0 && v43 != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v21 = &g_40367b;\n                    v45 = (unsigned long long)(unsigned int)sub_4100e0();\n                    v45->field_0 = *((int128_t *)&v5);\n                    v45->field_10 = (int128_t)v6;\n                    *((int128_t *)&v45->field_18) = (int128_t)v8;\n                    v45->field_20 = (int128_t)v9;\n                    v45->field_30 = (int128_t)v10;\n                    v45->field_40 = (int128_t)v12;\n                    v45->field_50 = (int128_t)v14;\n                    v45->field_60 = *((int128_t *)&(&v24)[-8]);\n                    v45->field_70 = (int128_t)v18;\n                    *((char *)&v45->field_80) = 0;\n                    *((char *[2])&((char *)&v45->field_80)[8]) = &v39[-1 * (unsigned long long)v4];\n                    v46 = *(v36);\n                    *(v36) = v45;\n                    *((unsigned long long *)&v45->field_90) = v46;\n                    if (v41 != 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v20 = &g_40372a;\n                        v47 = sub_404fc0();\n                        if (v47 != 0)\n                        {\n                            v49 = *((int *)&((char *)&v45->field_10)[8]);\n                            *((char *)v1) = 1;\n                            if (*(&((char *)&v42->field_1c)[1]) != 0)\n                            {\n                                v50 = v49 & 63;\n                                v51 = !(v49 & 63);\n                            }\n                            else\n                            {\n                                v50 = 0;\n                                v51 = -18446744069414584321;\n                                if (*(&((char *)&v42->field_1c)[2]) != 0)\n                                {\n                                    v50 = v49 & 18;\n                                    v51 = !(v49 & 18);\n                                }\n                            }\n                            v28 = (v42->field_1d != 0? 511 : (unsigned int)rsi<8>) & v51 & 4095;\n                            rsp<8> = rsp<8> - 8;\n                            v19 = &g_403774;\n                            v52 = mkdir((unsigned int)v28, v28);\n                            if (v52 == 0)\n                            {\n                                if (v53 != 0)\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v18 = &g_4037a1;\n                                    __printf_chk(0x1, v53);\n                                }\n                                rsp<8> = rsp<8> - 8;\n                                v17 = &g_4037b5;\n                                v55 = __lxstat();\n                                if (v55 != 0)\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v16 = &g_4039cf;\n                                    v61 = (unsigned int)sub_40ddd0();\n                                }\n                                else if (*(&((char *)&v42->field_1c)[2]) == 0)\n                                {\n                                    if (((unsigned int)v50 & !(v4)) != 0)\n                                    {\n                                        rsp<8> = rsp<8> - 8;\n                                        v16 = &g_403913;\n                                        v50 = (unsigned int)v50 & !(sub_4053d0());\n                                        if ((v50 & !(v4)) != 0)\n                                        {\n                                            *((char *)&v45->field_80) = 1;\n                                            *((unsigned long long *)&((char *)&v45->field_10)[8]) = v50 | v4;\n                                        }\n                                    }\n                                }\n                            }\n                            else\n                            {\n                                rsp<8> = rsp<8> - 8;\n                                v18 = &g_403a1a;\n                                v60 = (unsigned int)sub_40ddd0();\n                            }\n                        }\n                    }\n                }\n                if ((v43 == 0 || *(v44) != 0) && (v43 != 0 || ((unsigned short)v7 & 0xf000) != 0x4000))\n                {\n                    v1 = v59;\n                    rsp<8> = rsp<8> - 8;\n                    v13 = &g_403874;\n                    v63 = (unsigned int)sub_40ddd0();\n                    rsp<8> = rsp<8> - 8;\n                    v12 = &g_403888;\n                    rsp<8> = rsp<8> - 8;\n                    v11 = &g_4038a1;\n                    error(0x0, v1, (unsigned long long)dcgettext(0x0, 0x413960, 0x5));\n                    v65 = 0;\n                }\n            }\n            if (((unsigned int)v40 == 0 || v41 == 0) && ((v42->field_1c & -0x100) == 0 || v41 == 0) && ((unsigned int)v40 == 0 || *(v44) == 0 || v43 == 0) && (*(v44) == 0 || (v42->field_1c & -0x100) == 0 || v43 == 0) && ((unsigned int)v40 == 0 || ((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && ((v42->field_1c & -0x100) == 0 || ((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0))\n            {\n                rsp<8> = rsp<8> - 8;\n                v20 = &g_4035d8;\n                v48 = sub_404fc0();\n                if (((unsigned short)v4 & 0xf000) == 0x4000 && v48 != 0)\n                {\n                    *((char *)v1) = 0;\n                }\n            }\n            if ((v52 == 0 && v47 != 0 && v41 != 0 && (*(v44) == 0 || v43 == 0) && (((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && ((unsigned int)v40 != 0 || (v42->field_1c & -0x100) != 0) && v55 == 0 && *(&((char *)&v42->field_1c)[2]) == 0 && ((unsigned int)v50 & !(v4)) != 0 && (v50 & !(v4)) == 0 || v52 == 0 && v47 != 0 && v41 != 0 && (*(v44) == 0 || v43 == 0) && (((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && ((unsigned int)v40 != 0 || (v42->field_1c & -0x100) != 0) && v55 == 0 && *(&((char *)&v42->field_1c)[2]) == 0 && ((unsigned int)v50 & !(v4)) == 0) && ((unsigned short)v4 & 448) != 448)\n            {\n                *((char *)&v45->field_80) = 1;\n                *((unsigned long long *)&((char *)&v45->field_10)[8]) = v50 | v4;\n            }\n            if (...)\n            {\n                rsp<8> = rsp<8> - 8;\n                v16 = &g_40381c;\n                v56 = chmod(v4 | 448, v4 | 448);\n                if (v56 != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v15 = &g_403a36;\n                    v62 = (unsigned int)sub_40ddd0();\n                }\n            }\n            if (...)\n            {\n                rsp<8> = rsp<8> - 8;\n                v14 = &g_4039e3;\n                rsp<8> = rsp<8> - 8;\n                v13 = &g_4039eb;\n                v66 = (unsigned int)*(__errno_location());\n                rsp<8> = rsp<8> - 8;\n                v12 = &g_4039fc;\n                error(0x0, v66, (unsigned long long)dcgettext(0x0, v66, 0x5));\n                return 0;\n            }\n            if (...)\n            {\n                rsp<8> = rsp<8> - 8;\n                v19 = &g_4038ea;\n                v57 = sub_405090();\n            }\n            if (...)\n            {\n                v58 = v39[1];\n                v38 = &v39[1];\n                v39[0] = 47;\n                do\n                {\n                    v38 = &v38[1];\n                }\n                while (*(v38) == 47);\n            }\n        }\n        if (v57 == 0 && (0xff000000ff00 & *((long long *)&v42->field_1d)) != 0 && v42->padding_21[2] != 0 || v39 != 0 && ((unsigned int)v40 == 0 || v41 == 0) && ((v42->field_1c & -0x100) == 0 || v41 == 0) && ((unsigned int)v40 == 0 || *(v44) == 0 || v43 == 0) && (*(v44) == 0 || (v42->field_1c & -0x100) == 0 || v43 == 0) && ((unsigned int)v40 == 0 || ((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && ((v42->field_1c & -0x100) == 0 || ((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && v48 == 0 || v41 != 0 && v47 == 0)\n        {\n            return 0;\n        }\n        else if (v48 != 0 && v39 != 0 && ((unsigned int)v40 == 0 || v41 == 0) && ((v42->field_1c & -0x100) == 0 || v41 == 0) && ((unsigned int)v40 == 0 || *(v44) == 0 || v43 == 0) && (*(v44) == 0 || (v42->field_1c & -0x100) == 0 || v43 == 0) && ((unsigned int)v40 == 0 || ((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && ((v42->field_1c & -0x100) == 0 || ((unsigned short)v7 & 0xf000) == 0x4000 || v43 != 0) && ((unsigned short)v4 & 0xf000) != 0x4000)\n        {\n            rsp<8> = rsp<8> - 8;\n            v13 = &g_403985;\n            v64 = (unsigned int)sub_40ddd0();\n            rsp<8> = rsp<8> - 8;\n            v12 = &g_403999;\n            rsp<8> = rsp<8> - 8;\n            v11 = &g_4039aa;\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x413980, 0x5));\n        }\n        else if (true)\n        {\n            v65 = 1;\n        }\n        else if (v39 != 0 && (v43 == 0 || *(v44) != 0) && ((unsigned int)v40 != 0 || (v42->field_1c & -0x100) != 0) && (v43 != 0 || ((unsigned short)v7 & 0xf000) != 0x4000))\n        {\n            return v65;\n        }\n    }\n    else if (((unsigned short)v4 & 0xf000) == 0x4000)\n    {\n        *((char *)v1) = 0;\n    }\n    if (((unsigned short)v4 & 0xf000) == 0x4000 || v37 != 0)\n    {\n        v65 = 1;\n        return v65;\n    }\n    if (((unsigned short)v4 & 0xf000) != 0x4000 || v37 != 0)\n    {\n        rsp<8> = rsp<8> - 8;\n        v13 = &g_403985;\n        v64 = (unsigned int)sub_40ddd0();\n        rsp<8> = rsp<8> - 8;\n        v12 = &g_403999;\n        rsp<8> = rsp<8> - 8;\n        v11 = &g_4039aa;\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x413980, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4113a0",
            "funcStartAddr": "0x4113a0",
            "funcEndAddr": "0x4113b8",
            "decompiledFuncCode": "int sub_4113a0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_410cf0();\n}\n"
        },
        {
            "funcName": "sub_404740",
            "funcStartAddr": "0x404740",
            "funcEndAddr": "0x404772",
            "decompiledFuncCode": "int sub_404740()\n{\n    unsigned long v2;  // rax\n    unsigned int v3;  // eax\n    unsigned long long v4;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v3 = *(__errno_location());\n        if (v3 == 95 || v3 == 38)\n        {\n            return 0;\n        }\n    }\n    if ((unsigned int)v2 >= 0 || v3 != 95 && v3 != 38)\n    {\n        v2 = fallocate();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b170",
            "funcStartAddr": "0x40b170",
            "funcEndAddr": "0x40b275",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_40b170()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_40b140();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v8 != v1 && v1 != *(v11))\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c0f0",
            "funcStartAddr": "0x40c0f0",
            "funcEndAddr": "0x40c2af",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_40c0f0()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned int|unsigned long|uint128_t|unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned int|unsigned long|uint128_t v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_40b170() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_40b290();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_40bc30() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40f8a0",
            "funcStartAddr": "0x40f8a0",
            "funcEndAddr": "0x40f8b0",
            "decompiledFuncCode": "int sub_40f8a0()\n{\n}\n"
        },
        {
            "funcName": "sub_40eb40",
            "funcStartAddr": "0x40eb40",
            "funcEndAddr": "0x40eb4c",
            "decompiledFuncCode": "int sub_40eb40()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40eae0",
            "funcStartAddr": "0x40eae0",
            "funcEndAddr": "0x40eaeb",
            "decompiledFuncCode": "int sub_40eae0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b140",
            "funcStartAddr": "0x40b140",
            "funcEndAddr": "0x40b166",
            "decompiledFuncCode": "int sub_40b140()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_40a6ba",
            "funcStartAddr": "0x40a6ba",
            "funcEndAddr": "0x40a6ec",
            "decompiledFuncCode": "extern int512_t g_415b00;\n\nint sub_40a6ba()\n{\n    return *((int *)&((char *)&g_415b00)[4 * (unsigned long long)(unsigned int)sub_409ff0()]);\n}\n"
        },
        {
            "funcName": "sub_40dbd0",
            "funcStartAddr": "0x40dbd0",
            "funcEndAddr": "0x40dbda",
            "decompiledFuncCode": "int sub_40dbd0()\n{\n}\n"
        },
        {
            "funcName": "sub_412750",
            "funcStartAddr": "0x412750",
            "funcEndAddr": "0x41275e",
            "decompiledFuncCode": "int sub_412750()\n{\n}\n"
        },
        {
            "funcName": "sub_4113c0",
            "funcStartAddr": "0x4113c0",
            "funcEndAddr": "0x41142f",
            "decompiledFuncCode": "extern unsigned long long g_416f77;\n\nint sub_4113c0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_416f77;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_411540() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40f460",
            "funcStartAddr": "0x40f460",
            "funcEndAddr": "0x40f868",
            "decompiledFuncCode": "extern unsigned int g_61ba88;\nextern unsigned int g_61ba8c;\n\nint sub_40f460()\n{\n    unsigned long long v0;  // [bp-0x120]\n    void tmp_77;  // tmp #77\n    void tmp_84;  // tmp #84\n    void v1;  // [bp-0x118]\n    void v2;  // [bp-0x108]\n    char|unsigned long v3;  // [bp-0xf8]\n    unsigned long v4;  // [bp-0xf0]\n    unsigned long v5;  // [bp-0xe8]\n    unsigned long v6;  // [bp-0xe0]\n    unsigned long|void v7;  // [bp-0xd8]\n    unsigned long|unsigned long long v8;  // [bp-0xd0]\n    void v9;  // [bp-0xc8]\n    unsigned long long v10;  // [bp-0xc0]\n    char v11;  // [bp-0xb8]\n    unsigned long v12;  // [bp-0x70]\n    unsigned long v13;  // [bp-0x68]\n    unsigned long v14;  // [bp-0x60]\n    unsigned long v15;  // [bp-0x58]\n    unsigned long v17;  // rsi\n    unsigned long long v18;  // rbp\n    unsigned int v19;  // edi\n    unsigned int v20;  // ebx\n    uint128_t v21[2];  // rdx\n    char v22;  // al\n    unsigned long long v23;  // rsi\n    unsigned int|unsigned long long v24;  // r13\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep1\n    unsigned int *v30;  // rax\n    char v31;  // al\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rsi\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // rdi\n    unsigned long long v36;  // rsi\n    char v37;  // bpl\n    char v38;  // r14b\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // rax\n    unsigned int v43;  // edx\n    char v44;  // dl\n    unsigned long v45;  // r14\n    unsigned long long v46;  // r14\n    unsigned long long v47;  // rax\n\n    v18 = v17;\n    v20 = v19;\n    if (v21 != 0)\n    {\n        v0 = stack_base + -280;\n        *((int128_t *)&v1) = *((int128_t *)&v21);\n        *((int128_t *)&v2) = *((int128_t *)&v21[2]);\n        v24 = (unsigned int)sub_40f3a0();\n    }\n    else\n    {\n        v0 = 0;\n        v24 = 0;\n    }\n    if (v21 == 0 || (unsigned int)v24 >= 0)\n    {\n        if (v19 < 0)\n        {\n            if (v17 == 0)\n            {\n                *(__errno_location()) = 9;\n            }\n            if (g_61ba8c >= 0 && v17 != 0 && (v22 == 0 || (unsigned int)v24 != 2))\n            {\n                v25 = utimensat(0xffffff9c, v18);\n                v27 = v25;\n                v28 = v25;\n            }\n        }\n        if (g_61ba8c >= 0)\n        {\n            if ((v19 >= 0 || v17 != 0) && (unsigned int)v24 == 2)\n            {\n                if (v19 >= 0)\n                {\n                    v22 = __fxstat(0x1, v19) != 0;\n                }\n                else\n                {\n                    v22 = __xstat(0x1, v17, (unsigned int)&v11) != 0;\n                }\n                if (v22 == 0)\n                {\n                    v23 = v0;\n                    if (*((long long *)(v0 + 8)) != 1073741822)\n                    {\n                        v24 = 3;\n                        if (*((long long *)(v23 + 24)) == 1073741822)\n                        {\n                            *((unsigned long *)(v23 + 24)) = v15;\n                            *((unsigned long *)(v23 + 16)) = v14;\n                        }\n                    }\n                    else\n                    {\n                        v24 = 3;\n                        *((unsigned long *)v23) = v12;\n                        *((unsigned long *)(v23 + 8)) = v13;\n                    }\n                }\n            }\n            if (v19 >= 0 && (v22 == 0 || (unsigned int)v24 != 2))\n            {\n                v26 = futimens(v19);\n                v27 = v26;\n                v29 = v26;\n            }\n        }\n    }\n    if ((g_61ba8c >= 0 && v19 >= 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v26 <= 0 || v19 < 0 && g_61ba8c >= 0 && v17 != 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v30 = __errno_location();\n    }\n    if (g_61ba8c >= 0 && v19 >= 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v26 > 0 || v19 < 0 && g_61ba8c >= 0 && v17 != 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v25 > 0)\n    {\n        *(__errno_location()) = 38;\n    }\n    if ((g_61ba8c >= 0 && v19 >= 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v26 <= 0 || v19 < 0 && g_61ba8c >= 0 && v17 != 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)) && *(v30) != 38 || (g_61ba8c >= 0 && v19 >= 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v26 <= 0 || v19 < 0 && g_61ba8c >= 0 && v17 != 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v25 <= 0) && (char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>))\n    {\n        g_61ba8c = 1;\n    }\n    if ((g_61ba8c >= 0 && v19 >= 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v26 <= 0 || v19 < 0 && g_61ba8c >= 0 && v17 != 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v25 <= 0) && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, cc_dep1<8>, 0x0<64>, cc_ndep<8>)) && *(v30) == 38 || g_61ba8c >= 0 && v19 >= 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v26 > 0 || v19 < 0 && g_61ba8c >= 0 && v17 != 0 && (v21 == 0 || (unsigned int)v24 >= 0) && (v22 == 0 || (unsigned int)v24 != 2) && (unsigned int)v25 > 0 || (v21 == 0 && v19 >= 0 || v21 == 0 && v17 != 0 || (unsigned int)v24 >= 0 && v19 >= 0 || (unsigned int)v24 >= 0 && v17 != 0) && g_61ba8c < 0)\n    {\n        g_61ba8c = -1;\n        g_61ba88 = -1;\n        if (v24 != 0 && v24 != 3)\n        {\n            if (v19 >= 0)\n            {\n                v31 = __fxstat(0x1, v19) != 0;\n            }\n            else\n            {\n                v31 = __xstat(0x1, v18, (unsigned int)&v11) != 0;\n            }\n        }\n    }\n    if (...)\n    {\n        v27 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v27 = 0;\n        v32 = sub_40f2d0();\n    }\n    if (...)\n    {\n        v33 = v0;\n        if (v0 != 0)\n        {\n            v34 = &v3;\n            v3 = *((long long *)v33);\n            v35 = *((long long *)(v33 + 8)) >> 63;\n            tmp_77 = *((long long *)(v33 + 8)) * 2361183241434822607 >> 64;\n            tmp_84 = *((long long *)(v33 + 24));\n            v5 = *((long long *)(v33 + 16));\n            v36 = *((long long *)(v33 + 24)) >> 63;\n            v4 = (tmp_77 >> 7) - v35;\n            v6 = ((unsigned long long)(tmp_84 * 2361183241434822607 >> 64) >> 7) - v36;\n        }\n    }\n    if (...)\n    {\n        v34 = 0;\n    }\n    if (...)\n    {\n        v27 = futimesat(0xffffff9c, v18);\n    }\n    if (...)\n    {\n        v27 = futimesat(v20, 0x0);\n        if ((unsigned int)v27 != 0)\n        {\n            v27 = -18446744069414584321;\n            if (v18 != 0)\n            {\n                v39 = v0;\n                if (v0 != 0)\n                {\n                    v41 = *((long long *)(v39 + 16));\n                    v7 = *((long long *)v39);\n                    v8 = v41;\n                }\n                v27 = utime(v18);\n            }\n        }\n        else if (v34 != 0)\n        {\n            v37 = 499999 < *((long long *)(v34 + 8));\n            v38 = 499999 < *((long long *)(v34 + 24));\n            if ((499999 < *((long long *)(v34 + 8)) || v38 != 0) && __fxstat(0x1, v20) == 0)\n            {\n                v43 = v14 - *((long long *)(v34 + 16));\n                v44 = v14 - *((long long *)(v34 + 16)) == 1;\n                *((int128_t *)&v7) = *((int128_t *)v34);\n                *((int128_t *)&v9) = *((int128_t *)(v34 + 16));\n                v46 = (unsigned int)v45 & rdx<4>;\n                if (v12 - *((long long *)v34) == 1 && v37 != 0 && v13 == 0)\n                {\n                    v8 = 0;\n                }\n                if (v15 == 0 && v46 != 0)\n                {\n                    v10 = 0;\n                }\n                if ((v13 == 0 || v15 == 0) && (v12 - *((long long *)v34) == 1 || v15 == 0) && (v13 == 0 || v46 != 0) && (v12 - *((long long *)v34) == 1 || v46 != 0) && (v15 == 0 || v37 != 0) && (v37 != 0 || v46 != 0))\n                {\n                    futimesat(v20, 0x0);\n                }\n                v27 = 0;\n            }\n        }\n    }\n    v47 = v27;\n    return v47;\n}\n"
        },
        {
            "funcName": "sub_40eb60",
            "funcStartAddr": "0x40eb60",
            "funcEndAddr": "0x40f29f",
            "decompiledFuncCode": "int sub_40eb60() { crash_skku;\n}"
        },
        {
            "funcName": "sub_411360",
            "funcStartAddr": "0x411360",
            "funcEndAddr": "0x411375",
            "decompiledFuncCode": "int sub_411360()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_410cf0();\n}\n"
        },
        {
            "funcName": "sub_40a710",
            "funcStartAddr": "0x40a710",
            "funcEndAddr": "0x40a722",
            "decompiledFuncCode": "int sub_40a710()\n{\n    char *v1;  // rsi\n\n    if (*(v1) == 0 || v1 == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b130",
            "funcStartAddr": "0x40b130",
            "funcEndAddr": "0x40b137",
            "decompiledFuncCode": "int sub_40b130()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40b470",
            "funcStartAddr": "0x40b470",
            "funcEndAddr": "0x40b475",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40b470()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_4033e0",
            "funcStartAddr": "0x4033e0",
            "funcEndAddr": "0x403494",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_0;\n\nextern unsigned int g_41295d;\n\nint sub_4033e0()\n{\n    unsigned long v1;  // rdi\n    struct_0 *v2;  // rsi\n    unsigned int *v3;  // rax\n    unsigned int v4;  // r12d\n    char *v5;  // rdx\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rbx\n\n    v3 = __xstat(0x1, v1, (unsigned int)v2);\n    if (!((unsigned int)v3 == 0))\n    {\n        v3 = __errno_location();\n        v4 = *(v3);\n        if (*(v3) == 0)\n        {\n            v3 = (unsigned int)(char)((v2->field_18 & 0xf000) == 0x4000);\n        }\n        else\n        {\n            if (v4 == 2)\n            {\n                *(v5) = 1;\n                v6 = 0;\n            }\n            else\n            {\n                v7 = (unsigned int)sub_40ddd0();\n                error(0x1, v4, (unsigned long long)dcgettext(0x0, 0x41295d, 0x5));\n            }\n        }\n    }\n    else if (((unsigned short)v2->field_18 & 0xf000) == 0x4000)\n    {\n        v6 = 1;\n    }\n    if ((unsigned int)v3 == 0 && ((unsigned short)v2->field_18 & 0xf000) != 0x4000 || *(v3) == 0 && (unsigned int)v3 != 0)\n    {\n        v6 = v3 & 1;\n    }\n    if ((unsigned int)v3 == 0 || *(v3) == 0 || v4 == 2)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40dca0",
            "funcStartAddr": "0x40dca0",
            "funcEndAddr": "0x40dcaa",
            "decompiledFuncCode": "int sub_40dca0()\n{\n}\n"
        },
        {
            "funcName": "sub_40df80",
            "funcStartAddr": "0x40df80",
            "funcEndAddr": "0x40df89",
            "decompiledFuncCode": "int sub_40df80()\n{\n}\n"
        },
        {
            "funcName": "sub_4098e0",
            "funcStartAddr": "0x4098e0",
            "funcEndAddr": "0x4098f1",
            "decompiledFuncCode": "int sub_4098e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40dcb0",
            "funcStartAddr": "0x40dcb0",
            "funcEndAddr": "0x40dcc6",
            "decompiledFuncCode": "int sub_40dcb0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b120",
            "funcStartAddr": "0x40b120",
            "funcEndAddr": "0x40b130",
            "decompiledFuncCode": "int sub_40b120()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40c440",
            "funcStartAddr": "0x40c440",
            "funcEndAddr": "0x40c479",
            "decompiledFuncCode": "int sub_40c440()\n{\n    unsigned long long v2;  // rax\n\n    if (sub_411440() == 0)\n    {\n        v2 = sub_411470();\n    }\n    else\n    {\n        v2 = -18446744069414584322;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ac20",
            "funcStartAddr": "0x40ac20",
            "funcEndAddr": "0x40ac3c",
            "decompiledFuncCode": "int sub_40ac20()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a76d",
            "decompiledFuncCode": "int sub_40a730()\n{\n    char *v1;  // rsi\n    char *v2;  // rax\n\n    if (*(v1) == 0 || v1 == 0)\n    {\n        v2 = getenv(\"VERSION_CONTROL\");\n    }\n    if (v2 == 0 && *(v1) == 0 || v2 == 0 && v1 == 0 || *(v1) == 0 && *(v2) == 0 || v1 == 0 && *(v2) == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4112c0",
            "funcStartAddr": "0x4112c0",
            "funcEndAddr": "0x411316",
            "decompiledFuncCode": "extern unsigned int g_61b434;\nextern unsigned int g_61b438;\nextern unsigned int g_61b43c;\nextern unsigned int g_61baa0;\nextern unsigned int g_61baa4;\nextern unsigned int g_61baa8;\nextern unsigned long long g_61bab0;\nextern unsigned long long g_61bae0;\n\nint sub_4112c0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_61baa0 = g_61b43c;\n    g_61baa4 = g_61b438;\n    v1 = (unsigned int)v2;\n    v0 = &g_61baa0;\n    g_61b43c = g_61baa0;\n    g_61bae0 = g_61bab0;\n    g_61b434 = g_61baa8;\n    return sub_410cf0();\n}\n"
        },
        {
            "funcName": "sub_4049c0",
            "funcStartAddr": "0x4049c0",
            "funcEndAddr": "0x404ab8",
            "decompiledFuncCode": "extern unsigned int g_415108;\nextern unsigned int g_4156b3;\n\nint sub_4049c0()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long v2;  // rbp\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v6;  // bl\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rbp\n\n    v2 = v1;\n    v4 = v3;\n    if ((unsigned int)sub_409900() >= 0)\n    {\n        v6 = (char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) & v2;\n        if (((char)[D] amd64g_calculate_condition(0xf<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>) & v2) == 0)\n        {\n            return 1;\n        }\n        v9 = (unsigned int)sub_40ddd0();\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4156b3, 0x5));\n        return rbx<8>;\n    }\n    v7 = (unsigned int)sub_40dcf0();\n    v8 = (unsigned int)sub_40dcf0();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x415108, 0x5));\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40da30",
            "funcStartAddr": "0x40da30",
            "funcEndAddr": "0x40da5b",
            "decompiledFuncCode": "extern char g_61ba40;\n\nint sub_40da30()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_61ba40 : v2);\n    *((int *)(tmp_11? &g_61ba40 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_61ba40;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_61ba40;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40d9b0",
            "funcStartAddr": "0x40d9b0",
            "funcEndAddr": "0x40d9bf",
            "decompiledFuncCode": "extern int512_t g_61ba40;\n\nint sub_40d9b0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_61ba40 : v1));\n}\n"
        },
        {
            "funcName": "sub_409280",
            "funcStartAddr": "0x409280",
            "funcEndAddr": "0x409396",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[8];\n    unsigned int field_c;\n    char padding_10[7];\n    char field_17;\n    char padding_18[20];\n    char field_2c;\n    char padding_2d[7];\n    unsigned int field_34;\n} struct_0;\n\nextern unsigned long long g_61b8e8;\nextern unsigned long long g_61b8f0;\n\nint sub_409280()\n{\n    unsigned long long v0;  // [bp-0x38]\n    unsigned long v1;  // [bp-0x30]\n    unsigned long v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    char v4;  // [bp-0x9]\n    struct_0 *v6;  // rcx\n    unsigned long v7;  // r9\n    unsigned long v8;  // r8\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rsi\n\n    if (!(v6 != 0))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (!(v6->field_0 <= 3))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (!((unsigned int)((unsigned long long)v6->field_c - 1) <= 2))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (v6->field_34 <= 2)\n    {\n        if (v6->field_17 != 0 && v6->field_2c != 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n        if (v6->field_2c == 0 || v6->field_17 == 0)\n        {\n            if (v6->field_c != 2 && v6->field_34 == 2)\n            {\n                __assert_fail(); /* do not return */\n            }\n            if (v6->field_c == 2 || v6->field_34 != 2)\n            {\n                v4 = 0;\n                v3 = v7;\n                v2 = v8;\n                g_61b8f0 = v9;\n                g_61b8e8 = v10;\n                v1 = stack_base + -9;\n                v0 = 1;\n                return sub_405400();\n            }\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_410370",
            "funcStartAddr": "0x410370",
            "funcEndAddr": "0x4103d8",
            "decompiledFuncCode": "extern unsigned long long stdin;\n\nint sub_410370()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    char|unsigned long|unsigned long long v3;  // rbx\n    char *v5;  // rax\n    unsigned long long v6;  // rax\n\n    v3 = 0;\n    v0 = 0;\n    v1 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v5 = v0 + __getdelim(&v0, &v1, 0xa, stdin) - 1;\n        if (*(v5) == 10)\n        {\n            *(v5) = 0;\n        }\n        v3 = [D] amd64g_calculate_condition(0xf<64>, 0x13<64>, Call (target: 0x402750<64>, prototype: () -> None, args: []), 0x0<64>, cc_ndep<8>);\n    }\n    free(v0);\n    v6 = v3;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40a6f0",
            "funcStartAddr": "0x40a6f0",
            "funcEndAddr": "0x40a70a",
            "decompiledFuncCode": "int sub_40a6f0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40a1e0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40e040",
            "funcStartAddr": "0x40e040",
            "funcEndAddr": "0x40e278",
            "decompiledFuncCode": "int sub_40e040()\n{\n    unsigned int *|unsigned int v0;  // [bp-0x160]\n    char v1;  // [bp-0x158]\n    unsigned int v2;  // [bp-0x140]\n    char v3;  // [bp-0xc8]\n    unsigned int v4;  // [bp-0xb0]\n    char v5;  // [bp-0x30]\n    char v6;  // [bp-0x20]\n    char v7;  // [bp+0x0]\n    unsigned long v9;  // rdi\n    unsigned int v10;  // r14d\n    unsigned long v11;  // rdx\n    unsigned int v12;  // r13d\n    char *v13;  // rsi\n    char *v14;  // rcx\n    unsigned int v15;  // r8d\n    unsigned int v16;  // r13\n    unsigned long v17;  // r14\n    unsigned long long v18;  // rdx\n    unsigned int *v19;  // r9\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15b\n    unsigned long long v22;  // rax\n    unsigned int v23;  // eax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v10 = v9;\n    v12 = v11;\n    v18 = syscall(0x13c, v9, (unsigned int)v13, v11, (unsigned int)v14, v15, *((int *)&v5), (unsigned int)&v7, *((int *)&v6), v16, v17, v21);\n    if ((unsigned int)v18 < 0)\n    {\n        v0 = v18;\n        v19 = __errno_location();\n        v20 = *(v19);\n        v21 = ((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95;\n        if ((((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95) == 0)\n        {\n            if (v15 != 0)\n            {\n                if ((v15 & -2) != 0)\n                {\n                    *(v19) = 95;\n                    v18 = -18446744069414584321;\n                }\n                else\n                {\n                    v0 = v19;\n                    v22 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                    v19 = v0;\n                    if (v22 != 0)\n                    {\n                        v23 = *(v19);\n                        if (*(v19) != 75 && v23 == 2)\n                        {\n                            v21 = 1;\n                        }\n                    }\n                    if (v22 == 0 || *(v19) == 75)\n                    {\n                        *(v0) = 17;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (v15 == 0 || v23 == 2 && (v15 & -2) == 0 && v22 != 0 && *(v19) != 75)\n            {\n                v0 = v19;\n                v24 = strlen(v13);\n                v25 = strlen(v14);\n            }\n            if (v13[v24 + -1] == 47 && v25 != 0 && v24 != 0 && (v15 == 0 || v23 == 2) && (v15 == 0 || (v15 & -2) == 0) && (v15 == 0 || v22 != 0) && (v15 == 0 || *(v19) != 75) || v14[v25 + -1] == 47 && v25 != 0 && v24 != 0 && v13[v24 + -1] != 47 && (v15 == 0 || v23 == 2) && (v15 == 0 || (v15 & -2) == 0) && (v15 == 0 || v22 != 0) && (v15 == 0 || *(v19) != 75))\n            {\n                v0 = v0;\n                v26 = __fxstatat(0x1, v9, (unsigned int)v13, (unsigned int)&v1, 0x100);\n                if (v26 == 0)\n                {\n                    if (!(v21 != 0))\n                    {\n                        v0 = v0;\n                        v27 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                        if (v27 == 0)\n                        {\n                            if (((unsigned short)v4 & 0xf000) != 0x4000)\n                            {\n                                *(v0) = 20;\n                            }\n                            else\n                            {\n                                if (((unsigned short)v2 & 0xf000) != 0x4000)\n                                {\n                                    *(v0) = 21;\n                                    v18 = -18446744069414584321;\n                                }\n                            }\n                        }\n                    }\n                    else if (((unsigned short)v2 & 0xf000) != 0x4000)\n                    {\n                        *(v0) = 2;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (...)\n            {\n                v18 = -18446744069414584321;\n            }\n            if (...)\n            {\n                v18 = renameat(v9, (unsigned int)v13, v16, (unsigned int)v14);\n            }\n        }\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_40d7d0",
            "funcStartAddr": "0x40d7d0",
            "funcEndAddr": "0x40d970",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_61b418;\nextern uint128_t g_61b420;\nextern unsigned int g_61b430;\nextern int512_t g_61b940;\n\nint sub_40d7d0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_61b418;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_61b430 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_61b418 != 6403104)\n            {\n                v16 = sub_410140();\n                g_61b418 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_410140();\n                v17 = v15;\n                g_61b418 = v15;\n                *(v15) = g_61b420;\n            }\n            memset(&v17[(long long)(int)g_61b430], 0x0, (int)((unsigned int)v13 + 1 - g_61b430) * 16);\n            g_61b430 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_410330(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_61b430 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_40c5a0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6404416)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4100e0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_40c5a0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_410520",
            "funcStartAddr": "0x410520",
            "funcEndAddr": "0x41055b",
            "decompiledFuncCode": "int sub_410520()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_410590();\n    }\n}\n"
        },
        {
            "funcName": "sub_40b750",
            "funcStartAddr": "0x40b750",
            "funcEndAddr": "0x40b7a9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b750()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_40b140();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_40dd60",
            "funcStartAddr": "0x40dd60",
            "funcEndAddr": "0x40ddc9",
            "decompiledFuncCode": "int sub_40dd60()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_40d7d0();\n}\n"
        },
        {
            "funcName": "sub_4031cb",
            "funcStartAddr": "0x4031cb",
            "funcEndAddr": "0x4031ea",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4031cb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403a50",
            "funcStartAddr": "0x403a50",
            "funcEndAddr": "0x403c5c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n    char padding_1c[44];\n    unsigned long long field_48;\n    unsigned long long field_50;\n    unsigned long long field_58;\n    unsigned long long field_60;\n    char padding_68[40];\n    char field_90;\n    char padding_91[7];\n    unsigned long long field_98;\n    unsigned long long field_a0;\n} struct_0;\n\nextern char g_403a92;\nextern char g_403b29;\nextern char g_403b41;\nextern char g_403b55;\nextern char g_403b5d;\nextern char g_403b6e;\nextern char g_403b86;\nextern char g_403b96;\nextern char g_403bb1;\nextern char g_403bd6;\nextern char g_403bf3;\nextern char g_403c08;\nextern char g_403c1c;\nextern char g_403c24;\nextern char g_403c35;\nextern char g_403c65;\nextern unsigned int g_4139a8;\n\nint sub_403a50()\n{\n    char|unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned long v3;  // [bp-0x40]\n    unsigned long v4;  // [bp-0x38]\n    unsigned long v5;  // [bp-0x30]\n    unsigned long v6;  // [bp-0x28]\n    unsigned long v7;  // [bp-0x20]\n    unsigned long v8;  // [bp-0x18]\n    unsigned long v9;  // [bp-0x10]\n    unsigned long v10;  // [bp-0x8]\n    char v12[32];  // rcx\n    char v13[32];  // r13\n    unsigned long long v14;  // rdx\n    void *v15;  // rdi\n    unsigned long long v16;  // rax\n    char *v18;  // r12\n    char v19;  // cc_dep1\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // r14\n    unsigned long long v23;  // rax\n    unsigned long v24;  // rsi\n    unsigned long long v25;  // rax\n    struct_0 *v26;  // rbx\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // r12\n    unsigned long long v29;  // r12\n    unsigned long v30;  // rsi\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rax\n\n    v13 = v12;\n    v26 = v14;\n    v16 = strlen(v15);\n    rsp<8> = &(&v0)[-1 * (v16 + 24 & -0x10) + -8];\n    v10 = &g_403a92;\n    if (v14 != 0)\n    {\n        v18 = memcpy(&(&v0)[-1 * (v16 + 24 & -0x10) + 15] & -0x10, v15, v16 + 1);\n        while (true)\n        {\n            v19 = v12[3 + 7];\n            v18[v26->field_98] = 0;\n            if (v19 != 0)\n            {\n                v0 = v26->field_48;\n                v1 = v26->field_50;\n                v2 = v26->field_58;\n                v3 = v26->field_60;\n                rsp<8> = rsp<8> - 8;\n                v9 = &g_403b29;\n                v20 = sub_40f8a0();\n                if (v20 != 0)\n                {\n                    v22 = 0;\n                    rsp<8> = rsp<8> - 8;\n                    v7 = &g_403b41;\n                    v27 = (unsigned int)sub_40ddd0();\n                    rsp<8> = rsp<8> - 8;\n                    v6 = &g_403b55;\n                    rsp<8> = rsp<8> - 8;\n                    v5 = &g_403b5d;\n                    v30 = (unsigned int)*(__errno_location());\n                    rsp<8> = rsp<8> - 8;\n                    v4 = &g_403b6e;\n                    error(0x0, v30, (unsigned long long)dcgettext(0x0, 0x4139a8, 0x5));\n                }\n            }\n            if (v20 == 0 || v19 == 0)\n            {\n                if (v12[3 + 5] != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v8 = &g_403b86;\n                    v21 = lchown((unsigned int)v18);\n                    if (v21 != 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v7 = &g_403b96;\n                        v22 = (unsigned int)sub_4051b0();\n                        if ((char)v22 != 0)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v6 = &g_403bb1;\n                            lchown((unsigned int)v18);\n                            v22 = v13[3 + 6];\n                        }\n                        else\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v6 = &g_403c65;\n                            v29 = (unsigned int)sub_40ddd0();\n                        }\n                    }\n                }\n                if (v21 == 0 || v12[3 + 5] == 0)\n                {\n                    v22 = v13[3 + 6];\n                }\n                if (v13[3 + 6] == 0 || v21 != 0 && v12[3 + 5] != 0)\n                {\n                    if (v26->field_90 != 0 && (v21 == 0 || v13[3 + 6] == 0 || v12[3 + 5] == 0) && (v21 == 0 || v12[3 + 5] == 0 || (char)v22 != 0))\n                    {\n                        v24 = v26->field_18;\n                        rsp<8> = rsp<8> - 8;\n                        v8 = &g_403bf3;\n                        v25 = chmod((unsigned int)v18, v24);\n                        if (v25 != 0)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v7 = &g_403c08;\n                            v28 = (unsigned int)sub_40ddd0();\n                        }\n                    }\n                    if (((char)v22 == 0 || v25 != 0) && ((char)v22 == 0 || v26->field_90 != 0) && (v25 != 0 || v21 != 0) && (v25 != 0 || v12[3 + 5] != 0) && (v21 != 0 || v26->field_90 != 0) && (v26->field_90 != 0 || v12[3 + 5] != 0) && ((char)v22 == 0 || v21 == 0 || v13[3 + 6] == 0 || v12[3 + 5] == 0))\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v6 = &g_403c1c;\n                        rsp<8> = rsp<8> - 8;\n                        v5 = &g_403c24;\n                        v31 = (unsigned int)*(__errno_location());\n                        rsp<8> = rsp<8> - 8;\n                        v4 = &g_403c35;\n                        error(0x0, v31, (unsigned long long)dcgettext(0x0, v31, 0x5));\n                    }\n                }\n                if ((v21 != 0 || v13[3 + 6] != 0) && (v13[3 + 6] != 0 || v12[3 + 5] != 0) && (v21 == 0 || v12[3 + 5] == 0 || (char)v22 != 0) && (v21 == 0 || v12[3 + 5] == 0 || v13[3 + 6] != 0))\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v8 = &g_403bd6;\n                    v23 = sub_409b40();\n                    if (v23 != 0)\n                    {\n                        v22 = 0;\n                    }\n                }\n                if (v25 == 0 && v21 == 0 && v13[3 + 6] == 0 || v25 == 0 && v13[3 + 6] == 0 && v12[3 + 5] == 0 || v21 == 0 && v26->field_90 == 0 && v13[3 + 6] == 0 || v26->field_90 == 0 && v13[3 + 6] == 0 && v12[3 + 5] == 0 || v21 == 0 && v23 == 0 && v13[3 + 6] != 0 || v23 == 0 && v12[3 + 5] == 0 && v13[3 + 6] != 0 || v25 == 0 && v13[3 + 6] == 0 && (char)v22 != 0 && v21 != 0 && v12[3 + 5] != 0 || v26->field_90 == 0 && v13[3 + 6] == 0 && (char)v22 != 0 && v21 != 0 && v12[3 + 5] != 0 || v23 == 0 && (char)v22 != 0 && v21 != 0 && v13[3 + 6] != 0 && v12[3 + 5] != 0)\n                {\n                    v18[v26->field_98] = 47;\n                    v26 = v26->field_a0;\n                    if (v26 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        if (v25 == 0 || v26->field_90 == 0 || v23 == 0 && v13[3 + 6] != 0 || v23 == 0 && v13[3 + 6] != 0)\n        {\n            v22 = 1;\n        }\n        else if (v23 != 0 && (v13[3 + 6] != 0 || v13[3 + 6] != 0) || v20 != 0 && v19 != 0 || (char)v22 == 0 && v21 != 0 && v12[3 + 5] != 0 && (v20 == 0 || v19 == 0) || v26->field_90 != 0 && (v20 == 0 || v19 == 0) && (v13[3 + 6] == 0 || v21 != 0) && (v13[3 + 6] == 0 || v12[3 + 5] != 0) && (v21 == 0 || v13[3 + 6] == 0 || v12[3 + 5] == 0) && (v21 == 0 || v12[3 + 5] == 0 || (char)v22 != 0) && v25 != 0)\n        {\n            v32 = v22;\n            return v32;\n        }\n    }\n    v22 = 1;\n    v32 = v22;\n    return v32;\n}\n"
        },
        {
            "funcName": "sub_412510",
            "funcStartAddr": "0x412510",
            "funcEndAddr": "0x412744",
            "decompiledFuncCode": "int sub_412510()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_409c30",
            "funcStartAddr": "0x409c30",
            "funcEndAddr": "0x409d0b",
            "decompiledFuncCode": "int sub_409c30()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= v4 && v9 <= 9223372036854775806 && v9 > 4611686018427387903 && (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > v4 || v9 > 9223372036854775806 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40b490",
            "funcStartAddr": "0x40b490",
            "funcEndAddr": "0x40b4df",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b490()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40aae0",
            "funcStartAddr": "0x40aae0",
            "funcEndAddr": "0x40ab3a",
            "decompiledFuncCode": "int sub_40aae0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_40aa80();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40b000",
            "funcStartAddr": "0x40b000",
            "funcEndAddr": "0x40b06d",
            "decompiledFuncCode": "int sub_40b000()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v6 = v3;\n        v5 = v1;\n        v2 = 0;\n        while (true)\n        {\n            v4 = sub_40e290();\n            if (v4 == -1)\n            {\n                break;\n            }\n            if (v4 != 0)\n            {\n                v2 += v4;\n                v6 += v4;\n                v5 -= v4;\n                if (v5 == v4)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                *(__errno_location()) = 28;\n                v8 = v2;\n                return v8;\n            }\n        }\n    }\n    else\n    {\n        v2 = 0;\n    }\n    v7 = v2;\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_411b80",
            "funcStartAddr": "0x411b80",
            "funcEndAddr": "0x411baf",
            "decompiledFuncCode": "int sub_411b80()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = (unsigned int)sub_411da0();\n    v2 = 0;\n    if (v1 != 0)\n    {\n        v2 = sub_4100e0();\n        *((unsigned long long *)v2) = v1;\n        *((long long *)(v2 + 16)) = 0;\n        *((long long *)(v2 + 8)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_411bb0",
            "funcStartAddr": "0x411bb0",
            "funcEndAddr": "0x411bb4",
            "decompiledFuncCode": "int sub_411bb0()\n{\n    unsigned long long *v1;  // rdi\n\n    return *(v1);\n}\n"
        },
        {
            "funcName": "sub_40a780",
            "funcStartAddr": "0x40a780",
            "funcEndAddr": "0x40a7e5",
            "decompiledFuncCode": "int sub_40a780()\n{\n    void tmp_5;  // tmp #5\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rax\n    unsigned long v6;  // rdx\n    unsigned long v7;  // r8\n\n    if (v1 != 0 && v2 != 0)\n    {\n        v3 = v2;\n        for (v4 = v1; (0 CONCAT v4) % v3 >> 64 != 0; v3 = tmp_5 >> 64)\n        {\n            v4 = v3;\n        }\n        v5 = (0 CONCAT v1) % v3;\n        v7 = (0 CONCAT v1) % v3 * v2;\n    }\n    if (v2 == 0 || v1 == 0 || (0 CONCAT v7) % v2 != v5 || v7 > v6)\n    {\n        v7 = ((v2 != 0? v2 : 0x2000) <= v6? (v2 != 0? v2 : 0x2000) : v6);\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x4033ad",
            "decompiledFuncCode": "int sub_403280() { crash_skku;\n}"
        },
        {
            "funcName": "sub_410100",
            "funcStartAddr": "0x410100",
            "funcEndAddr": "0x410121",
            "decompiledFuncCode": "int sub_410100()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_410330(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_410590",
            "funcStartAddr": "0x410590",
            "funcEndAddr": "0x4105e6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_410590()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_410240",
            "funcStartAddr": "0x410240",
            "funcEndAddr": "0x41028a",
            "decompiledFuncCode": "int sub_410240() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a060",
            "funcStartAddr": "0x40a060",
            "funcEndAddr": "0x40a0ac",
            "decompiledFuncCode": "int sub_40a060()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40aa60",
            "funcStartAddr": "0x40aa60",
            "funcEndAddr": "0x40aa78",
            "decompiledFuncCode": "int sub_40aa60()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40aae0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_410330(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_411b50",
            "funcStartAddr": "0x411b50",
            "funcEndAddr": "0x411b73",
            "decompiledFuncCode": "int sub_411b50()\n{\n    unsigned long long v1[3];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = sub_4100e0();\n    v1[0] = v2;\n    v1[2] = 0;\n    v1[1] = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40e860",
            "funcStartAddr": "0x40e860",
            "funcEndAddr": "0x40e8b1",
            "decompiledFuncCode": "int sub_40e860()\n{\n    unsigned int v1;  // ebx\n    unsigned int *v2;  // rax\n    unsigned int v4;  // eax\n    char v5;  // al\n\n    v1 = __lxstat();\n    v2 = __errno_location();\n    if (v1 != 0 && *(v2) != 75)\n    {\n        v4 = 0;\n        v5 = *(v2) != 2;\n        return 0 - rax<4>;\n    }\n    if (v1 == 0 || *(v2) == 75)\n    {\n        *(v2) = 17;\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40abd0",
            "funcStartAddr": "0x40abd0",
            "funcEndAddr": "0x40ac03",
            "decompiledFuncCode": "int sub_40abd0()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char *v3;  // rax\n    char v4;  // al\n\n    v2 = (*((char *)(unsigned long long)(unsigned int)sub_40ab40()) == 0? v1 : (unsigned long long)(unsigned int)sub_40ab40());\n    v3 = sub_40aba0();\n    tmp_19 = (char)*((char *)(v2 + v3));\n    *((char *)(v2 + v3)) = 0;\n    v4 = (char)tmp_19 != 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40b8f0",
            "funcStartAddr": "0x40b8f0",
            "funcEndAddr": "0x40b910",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_40b8f0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_40ab40",
            "funcStartAddr": "0x40ab40",
            "funcEndAddr": "0x40ab92",
            "decompiledFuncCode": "int sub_40ab40()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40d9d0",
            "funcStartAddr": "0x40d9d0",
            "funcEndAddr": "0x40da03",
            "decompiledFuncCode": "extern int512_t g_61ba40;\n\nint sub_40d9d0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_61ba40 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_61ba40 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40a1e0",
            "funcStartAddr": "0x40a1e0",
            "funcEndAddr": "0x40a67e",
            "decompiledFuncCode": "extern unsigned long long g_61b900;\n\nint sub_40a1e0()\n{\n    unsigned long long v0;  // [bp-0x90]\n    void *v1;  // [bp-0x88]\n    unsigned short|char|unsigned long|unsigned long long v2;  // [bp-0x80]\n    unsigned long long v3;  // [bp-0x78]\n    unsigned int|unsigned long v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned int v6;  // [bp-0x60]\n    unsigned int v7;  // [bp-0x58]\n    unsigned long v8;  // [bp-0x50]\n    unsigned long|unsigned long long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    void *v12;  // rdi\n    unsigned int *|unsigned short *|void *|unsigned long long v13;  // rbx\n    unsigned int v14;  // esi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v19;  // r12\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long|unsigned long long v29;  // r8b\n    unsigned long long v30;  // rax\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // rsi\n    char v38;  // sil\n    unsigned long long v40;  // rax\n    unsigned int|unsigned long v41;  // rdx\n    char *v42;  // rax\n    unsigned long long v43;  // r15\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rbp\n    char *|unsigned long long v49;  // r14\n    unsigned long long v50;  // rax\n    unsigned int v52;  // ebp\n    unsigned long long v53;  // rdi\n    unsigned int *v54;  // rbx\n    unsigned long long v57;  // rdi\n    unsigned long long v58;  // rax\n\n    v13 = v12;\n    v1 = v12;\n    v7 = v14;\n    v49 = (unsigned long long)(unsigned int)sub_40ab40() - v12;\n    v15 = &v49[strlen(v49)];\n    v0 = v15;\n    if (g_61b900 == 0)\n    {\n        sub_40a180();\n    }\n    v17 = strlen(g_61b900);\n    *((unsigned long long *)&v10) = v17 + 1;\n    *((unsigned long long *)&v6) = v0 + 1;\n    v8 = (9 <= v17 + 1? v17 + 1 : 9) + v0 + 1;\n    v43 = malloc((9 <= v17 + 1? v17 + 1 : 9) + v0 + 1);\n    if (v43 != 0)\n    {\n        v19 = 0;\n        while (true)\n        {\n            memcpy(v43, v1, *((long long *)&v6));\n            if (v7 != 1)\n            {\n                v13 = &v49[v43];\n                v22 = (unsigned int)sub_40aba0();\n                if (v19 != 0)\n                {\n                    rewinddir(v19);\n                }\n                else\n                {\n                    v23 = *(v13);\n                    *(v13) = 46;\n                    *((unsigned long long *)&v2) = v23;\n                    v19 = (unsigned int)sub_40a9c0();\n                    if (v19 != 0)\n                    {\n                        *(v13) = v2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                    else\n                    {\n                        v3 = v44;\n                        __errno_location();\n                        *(v13) = v2;\n                        v46 = (unsigned int)(0 + 2);\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                }\n                if (v19 != 0 || v19 != 0)\n                {\n                    v46 = 2;\n                    v3 = 1;\n                    v4 = v8;\n                    v5 = v22 + 4;\n                    while (true)\n                    {\n                        v25 = readdir();\n                        if (v25 == 0)\n                        {\n                            break;\n                        }\n                        while (true)\n                        {\n                            v13 = v25 + 19;\n                            v26 = strlen(v25 + 19);\n                            if (v26 < v5)\n                            {\n                                break;\n                            }\n                            v2 = v22 + 2;\n                            v27 = memcmp(&v49[v43], v13, v22 + 2);\n                            if (v27 != 0)\n                            {\n                                break;\n                            }\n                            v13 += v2;\n                            v28 = (char)*((char *)v13);\n                            if ((v28 - 49 & 255) > 8)\n                            {\n                                break;\n                            }\n                            v44 = 1;\n                            v29 = (char)(v28 == 57);\n                            v30 = (char)*((char *)(v13 + 1));\n                            if (*((char *)(v13 + v44 + 1)) != 0 || v30 != 126)\n                            {\n                                break;\n                            }\n                            if ((unsigned int)(char)*((char *)(v13 + 1)) - 48 <= 9)\n                            {\n                                do\n                                {\n                                    v44 += 1;\n                                    v29 &= (unsigned int)v30;\n                                    v30 = (char)*((char *)(v13 + v44));\n                                }\n                                while ((unsigned int)(char)*((char *)(v13 + v44)) - 48 <= 9);\n                            }\n                            v45 = v3;\n                            v32 = v3;\n                            if (v3 >= v44)\n                            {\n                                v9 = v44;\n                                *((unsigned long long *)&v2) = v29;\n                                if (v32 != v44)\n                                {\n                                    break;\n                                }\n                                v33 = memcmp(v43 + v0 + 2, v13, v45);\n                                v29 = v2;\n                                v44 = v9;\n                                if (v33 > 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v34 = v29;\n                            v46 = (unsigned int)v29;\n                            v3 = v9 + v44;\n                            v35 = v0 + v9 + v44 + 4;\n                            if (v0 + v9 + v44 + 4 > v4)\n                            {\n                                v37 = 0;\n                                v38 = [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>);\n                                if (rsi<8> == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    *((unsigned long *)&v4) = v4 * 2;\n                                }\n                                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>) || rsi<8> != 0)\n                                {\n                                    *((unsigned long *)&v4) = v35;\n                                }\n                                v9 = v34;\n                                v2 = v44;\n                                v36 = realloc(v43, *((long long *)&v4));\n                                if (v36 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v36 = v43;\n                            }\n                            v9 = v36;\n                            v2 = v44;\n                            *((short *)(v0 + v36)) = 32302;\n                            *((char *)(v0 + v36 + 2)) = 48;\n                            v40 = memcpy(v0 + v36 + v9 + 2, v13, v44 + 2);\n                            v41 = (char)*((char *)(v2 + v40 - 1));\n                            v42 = v2 + v40 - 1;\n                            if (v41 == 57)\n                            {\n                                do\n                                {\n                                    *(v42) = 48;\n                                    v42 = &v42[-1];\n                                    v41 = *(v42);\n                                }\n                                while (*(v42) == 57);\n                            }\n                            v45 = (unsigned long long)v41 + 1;\n                            v43 = v9;\n                            *((unsigned long long *)&v42) = v45;\n                            v25 = readdir();\n                        }\n                        if (true)\n                        {\n                            v25 = readdir();\n                        }\n                        else if (*((char *)(v13 + v44 + 1)) == 0 && v30 == 126 && (v32 == v44 || v3 < v44) && (v33 <= 0 || v3 < v44) && v0 + v9 + v44 + 4 > v4 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)) && rsi<8> == 0 || *((char *)(v13 + v44 + 1)) == 0 && v30 == 126 && (v32 == v44 || v3 < v44) && (v33 <= 0 || v3 < v44) && v0 + v9 + v44 + 4 > v4 && (char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>) || *((char *)(v13 + v44 + 1)) == 0 && v30 == 126 && (v32 == v44 || v3 < v44) && (v33 <= 0 || v3 < v44) && v0 + v9 + v44 + 4 > v4 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)) && rsi<8> != 0)\n                        {\n                            v53 = v43;\n                            v43 = 0;\n                            free(v53);\n                            *(__errno_location()) = 12;\n                        }\n                    }\n                    if (false)\n                    {\n                        v53 = v43;\n                        v43 = 0;\n                        free(v53);\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v7 == 2)\n                {\n                    memcpy(v43 + v0, g_61b900, *((long long *)&v10));\n                    v7 = 1;\n                }\n                if (v46 == 3 || v19 != 0 || v19 != 0)\n                {\n                    v53 = v43;\n                    v43 = 0;\n                    free(v53);\n                    *(__errno_location()) = 12;\n                }\n                sub_40a0b0();\n            }\n            else\n            {\n                memcpy(v43 + v0, g_61b900, *((long long *)&v10));\n            }\n            if (v45 != 0)\n            {\n                if (v19 != 0)\n                {\n                    v45 = dirfd(v19);\n                }\n                if ((unsigned int)v45 < 0 || v19 == 0)\n                {\n                    v49 = 0;\n                }\n                v50 = sub_40e040();\n                if (v50 != 0)\n                {\n                    v52 = *(v13);\n                    v13 = __errno_location();\n                    if (v19 != 0)\n                    {\n                        closedir();\n                    }\n                    v57 = v43;\n                    v43 = 0;\n                    free(v57);\n                    *(v54) = v52;\n                }\n            }\n            if (v45 == 0 || v50 == 0)\n            {\n                if (v19 == 0)\n                {\n                    break;\n                }\n                closedir();\n            }\n        }\n    }\n    v58 = v43;\n    return v58;\n}\n"
        },
        {
            "funcName": "sub_405090",
            "funcStartAddr": "0x405090",
            "funcEndAddr": "0x4050fe",
            "decompiledFuncCode": "extern unsigned int g_415158;\n\nint sub_405090()\n{\n    unsigned int *v1;  // rbp\n    char v2[39];  // rcx\n    unsigned long long v3;  // rbx\n\n    v1 = __errno_location();\n    if (v2[4 + 3] != 0 && v2[4 + 6] == 0)\n    {\n        *(v1) = 95;\n        return 0;\n    }\n    if (v2[4 + 3] == 0 || v2[4 + 6] != 0)\n    {\n        *(v1) = 95;\n        v3 = (unsigned int)sub_40dcf0();\n        error(0x0, *(v1), (unsigned long long)dcgettext(0x0, 0x415158, 0x5));\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405140",
            "funcStartAddr": "0x405140",
            "funcEndAddr": "0x405166",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[64];\n    unsigned long long field_40;\n} struct_0;\n\nint sub_405140()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = sub_40b910();\n    v2->field_40 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40d9c0",
            "funcStartAddr": "0x40d9c0",
            "funcEndAddr": "0x40d9cf",
            "decompiledFuncCode": "extern int512_t g_61ba40;\n\nint sub_40d9c0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_61ba40 : v1)) = v2;\n    return &g_61ba40;\n}\n"
        },
        {
            "funcName": "sub_411ce0",
            "funcStartAddr": "0x411ce0",
            "funcEndAddr": "0x411d31",
            "decompiledFuncCode": "int sub_411ce0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    void *v2;  // rdi\n\n    __explicit_bzero_chk();\n    free(v2);\n    *(__errno_location()) = v1;\n    return sub_412210();\n}\n"
        },
        {
            "funcName": "sub_40df90",
            "funcStartAddr": "0x40df90",
            "funcEndAddr": "0x40dfa7",
            "decompiledFuncCode": "int sub_40df90()\n{\n}\n"
        },
        {
            "funcName": "sub_404640",
            "funcStartAddr": "0x404640",
            "funcEndAddr": "0x40467c",
            "decompiledFuncCode": "int sub_404640()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned int v2;  // esi\n    unsigned long long v4;  // rbx\n    unsigned long long v6;  // rbx\n    unsigned int v7;  // edi\n    unsigned long long v9;  // rbx\n    char v10;  // al\n\n    if ((v2 & 0xf000) == 0xa000)\n    {\n        return 1;\n    }\n    v0 = v4;\n    if (sub_4100a0() != 0)\n    {\n        v6 = v0;\n        return 1;\n    }\n    v9 = v0;\n    v10 = euidaccess(v7, 0x2) == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40b460",
            "funcStartAddr": "0x40b460",
            "funcEndAddr": "0x40b465",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40b460()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_40dde0",
            "funcStartAddr": "0x40dde0",
            "funcEndAddr": "0x40ddef",
            "decompiledFuncCode": "int sub_40dde0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e8d0",
            "funcStartAddr": "0x40e8d0",
            "funcEndAddr": "0x40e8e6",
            "decompiledFuncCode": "int sub_40e8d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e020",
            "funcStartAddr": "0x40e020",
            "funcEndAddr": "0x40e036",
            "decompiledFuncCode": "int sub_40e020()\n{\n}\n"
        },
        {
            "funcName": "sub_4101b0",
            "funcStartAddr": "0x4101b0",
            "funcEndAddr": "0x410228",
            "decompiledFuncCode": "int sub_4101b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409e50",
            "funcStartAddr": "0x409e50",
            "funcEndAddr": "0x409ebc",
            "decompiledFuncCode": "extern unsigned int g_415a46;\nextern unsigned int g_415a61;\n\nint sub_409e50()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x415a46, 0x5);\n    }\n    dcgettext(0x0, 0x415a61, 0x5);\n    sub_40e000();\n    sub_40dcf0();\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402a90",
            "funcEndAddr": "0x403199",
            "decompiledFuncCode": "int main() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409ff0",
            "funcStartAddr": "0x409ff0",
            "funcEndAddr": "0x40a05d",
            "decompiledFuncCode": "int sub_409ff0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_409d30();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_409e50();\n        sub_409ed0();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_411440",
            "funcStartAddr": "0x411440",
            "funcEndAddr": "0x411445",
            "decompiledFuncCode": "int sub_411440()\n{\n    unsigned int *v1;  // rcx\n    unsigned int v2;  // edx\n\n    *(v1) = v2;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409440",
            "funcStartAddr": "0x409440",
            "funcEndAddr": "0x409471",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409440()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rsi\n    struct_0 *v5;  // rax\n\n    v0 = v3;\n    v1 = v4;\n    v5 = sub_40b6a0();\n    if (v5 != 0)\n    {\n        return v5->field_10;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409d20",
            "funcStartAddr": "0x409d20",
            "funcEndAddr": "0x409d2a",
            "decompiledFuncCode": "int sub_409d20()\n{\n}\n"
        },
        {
            "funcName": "sub_40ff60",
            "funcStartAddr": "0x40ff60",
            "funcEndAddr": "0x410018",
            "decompiledFuncCode": "int sub_40ff60()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_40fb00();\n    }\n}\n"
        },
        {
            "funcName": "sub_4128f0",
            "funcStartAddr": "0x4128f0",
            "funcEndAddr": "0x412908",
            "decompiledFuncCode": "extern int512_t g_61b3a8;\n\nint sub_4128f0()\n{\n}\n"
        },
        {
            "funcName": "sub_403278",
            "funcStartAddr": "0x403278",
            "funcEndAddr": "0x4032b4",
            "decompiledFuncCode": "int sub_403278() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409bd0",
            "funcStartAddr": "0x409bd0",
            "funcEndAddr": "0x409c25",
            "decompiledFuncCode": "extern unsigned int g_41298a;\n\nint sub_409bd0()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r12\n\n    if ((unsigned int)v2 == 0)\n    {\n        v2 = (unsigned int)sub_40c480();\n        return v3;\n    }\n    v4 = (unsigned int)sub_40e020();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41298a, 0x5));\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40df10",
            "funcStartAddr": "0x40df10",
            "funcEndAddr": "0x40df7c",
            "decompiledFuncCode": "extern uint128_t g_61ba40;\nextern uint128_t g_61ba50;\nextern uint128_t g_61ba60;\nextern unsigned long long g_61ba70;\n\nint sub_40df10()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_61ba40;\n    *((uint128_t *)&v1) = g_61ba50;\n    *((uint128_t *)&v2) = g_61ba60;\n    v4 = g_61ba70;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_40d7d0();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4127e0",
            "funcStartAddr": "0x4127e0",
            "funcEndAddr": "0x412869",
            "decompiledFuncCode": "int sub_4127e0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_412750();\n            if (v5 >= 0)\n            {\n                v6 = sub_412760();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_412760();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_405400",
            "funcStartAddr": "0x405400",
            "funcEndAddr": "0x409191",
            "decompiledFuncCode": "int sub_405400() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40da60",
            "funcStartAddr": "0x40da60",
            "funcEndAddr": "0x40dad2",
            "decompiledFuncCode": "extern int512_t g_61ba40;\n\nint sub_40da60()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_61ba40 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_40c5a0();\n}\n"
        },
        {
            "funcName": "sub_40a920",
            "funcStartAddr": "0x40a920",
            "funcEndAddr": "0x40a9be",
            "decompiledFuncCode": "extern unsigned int g_415b82;\nextern unsigned int g_61b3d0;\nextern char g_61b910;\nextern unsigned long long g_61b918;\n\nint sub_40a920()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4114a0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_61b910 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x415b82, 0x5);\n            if (g_61b918 != 0)\n            {\n                sub_40de70();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_61b910 != 0)\n    {\n        v3 = sub_4114a0();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_61b910 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_61b3d0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40b910",
            "funcStartAddr": "0x40b910",
            "funcEndAddr": "0x40ba90",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_40b120;\nextern int512_t g_40b130;\nextern int512_t g_415c00;\n\nint sub_40b910()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_40b290();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_415c00;\n            v3 = sub_40b290();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v8;\n        }\n        if ((((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_40b080();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_40b120 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_40b130 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_40e290",
            "funcStartAddr": "0x40e290",
            "funcEndAddr": "0x40e2ed",
            "decompiledFuncCode": "int sub_40e290() { crash_skku;\n}"
        },
        {
            "funcName": "sub_412090",
            "funcStartAddr": "0x412090",
            "funcEndAddr": "0x412095",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_412090()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_409850",
            "funcStartAddr": "0x409850",
            "funcEndAddr": "0x409868",
            "decompiledFuncCode": "int sub_409850()\n{\n}\n"
        },
        {
            "funcName": "sub_40ddef",
            "funcStartAddr": "0x40ddef",
            "funcEndAddr": "0x40de60",
            "decompiledFuncCode": "extern uint128_t g_61ba40;\nextern uint128_t g_61ba50;\nextern uint128_t g_61ba60;\nextern unsigned long long g_61ba70;\n\nint sub_40ddef()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_61ba70;\n    *((uint128_t *)&v0) = g_61ba40;\n    *((uint128_t *)&v1) = g_61ba50;\n    *((uint128_t *)&v2) = g_61ba60;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_40d7d0();\n}\n"
        },
        {
            "funcName": "sub_4115a0",
            "funcStartAddr": "0x4115a0",
            "funcEndAddr": "0x4115d2",
            "decompiledFuncCode": "int sub_4115a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409900",
            "funcStartAddr": "0x409900",
            "funcEndAddr": "0x409a2b",
            "decompiledFuncCode": "int sub_409900()\n{\n    unsigned int *v0;  // [bp-0x160]\n    unsigned int v1;  // [bp-0x158]\n    unsigned long v2;  // [bp-0x150]\n    unsigned int v3;  // [bp-0x148]\n    unsigned int v4;  // [bp-0x144]\n    unsigned long v6;  // rdx\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rbx\n    unsigned int v9;  // r9d\n    void *v11;  // rbx\n    unsigned int v12;  // edi\n    unsigned long v13;  // rsi\n    unsigned int v14;  // r8d\n    unsigned int *v16;  // r9\n    unsigned int|unsigned long long v17;  // r12\n    unsigned long v18;  // rcx\n    unsigned long long v19;  // rax\n\n    v7 = v6;\n    v8 = linkat();\n    if ((char)v9 == 1 && (unsigned int)v8 != 0 && *(v0) == 17)\n    {\n        v0 = __errno_location();\n        v11 = (unsigned long long)(unsigned int)sub_409870();\n        if (v11 != 0)\n        {\n            v1 = v12;\n            v2 = v13;\n            v3 = v6;\n            v4 = v14;\n            v16 = v0;\n            if (sub_40e910() != 0)\n            {\n                v17 = *(v0);\n            }\n            else\n            {\n                v0 = v0;\n                v17 = renameat(v7, (unsigned int)v11, v7, v18);\n                if ((unsigned int)v17 != 0)\n                {\n                    v17 = *(v0);\n                }\n                v0 = v0;\n                unlinkat(v7, (unsigned int)v11, 0x0);\n                v16 = v0;\n            }\n            if (v11 != stack_base + -312)\n            {\n                v0 = v16;\n                free(v11);\n                v16 = v0;\n            }\n            v8 = 1;\n            if (v17 != 0)\n            {\n                *((unsigned long long *)&v16) = v17;\n                v8 = -18446744069414584321;\n            }\n        }\n        else\n        {\n            v8 = -18446744069414584321;\n        }\n    }\n    v19 = v8;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_410130",
            "funcStartAddr": "0x410130",
            "funcEndAddr": "0x410132",
            "decompiledFuncCode": "int sub_410130()\n{\n}\n"
        },
        {
            "funcName": "sub_40e8f0",
            "funcStartAddr": "0x40e8f0",
            "funcEndAddr": "0x40e90d",
            "decompiledFuncCode": "int sub_40e8f0()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404890",
            "funcStartAddr": "0x404890",
            "funcEndAddr": "0x4049b2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    unsigned int field_14;\n    char field_18;\n} struct_0;\n\nextern unsigned int g_4150a0;\nextern unsigned int g_4150d0;\nextern unsigned int g_4156a0;\nextern unsigned long long g_61b920;\nextern unsigned long long stderr;\n\nint sub_404890()\n{\n    unsigned long v0;  // [bp-0x48]\n    char v1;  // [bp-0x2a]\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r13\n    struct_0 *v7;  // rdi\n    unsigned long v8;  // rdx\n\n    if (sub_404640() == 0)\n    {\n        sub_40ad70();\n        v1 = 0;\n        v6 = (unsigned int)sub_40ddd0();\n        if (v7->field_18 == 0 && (v7->field_14 & 0xffff00) == 0)\n        {\n            v8 = dcgettext(0x0, 0x4150d0, 0x5);\n        }\n        if (v7->field_18 != 0 || (v7->field_14 & 0xffff00) != 0)\n        {\n            v8 = dcgettext(0x0, 0x4150a0, 0x5);\n        }\n        v0 = stack_base + -51;\n        __fprintf_chk(stderr, 0x1, v8, g_61b920);\n        return sub_410370();\n    }\n    v5 = (unsigned int)sub_40ddd0();\n    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x4156a0, 0x5), g_61b920);\n    return sub_410370();\n}\n"
        },
        {
            "funcName": "sub_40e910",
            "funcStartAddr": "0x40e910",
            "funcEndAddr": "0x40ea6d",
            "decompiledFuncCode": "extern unsigned int g_415ab5;\n\nint sub_40e910()\n{\n    unsigned int|char * v0;  // [bp-0x60]\n    unsigned int|unsigned long long v1;  // [bp-0x58]\n    unsigned long long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x48]\n    unsigned int v4;  // [bp-0x3c]\n    char *v6;  // rdi\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // r8\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // rbp\n    unsigned long long v12;  // rdx\n    unsigned long v13;  // rcx\n    unsigned int *v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rdx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned int|unsigned long long v21;  // r12\n    unsigned long long v22;  // rbx\n    unsigned long long v23;  // r14\n    unsigned long long v25;  // rsi\n    unsigned long long v26;  // rdi\n    unsigned int v27;  // rdx\n    unsigned int|unsigned long v28;  // rcx\n    unsigned long long v29;  // cc_dep1\n\n    v7 = v6;\n    v9 = v8;\n    v11 = v10;\n    v2 = v12;\n    v0 = v6;\n    v3 = v13;\n    v14 = __errno_location();\n    v4 = *(v14);\n    v15 = strlen(v6);\n    v16 = v11 + v9;\n    if (v11 + v9 <= v15)\n    {\n        v1 = v7 + v15 - v16;\n        v18 = strspn(v7 + v15 - v16, 0x415ab5);\n        if (v9 <= v18)\n        {\n            if ((unsigned long long)(unsigned int)sub_411b80() != 0)\n            {\n                v21 = 238328;\n                v22 = &v0[v9 + v15 + -1 * v16];\n                while (true)\n                {\n                    v23 = v1;\n                    if (v9 != 0)\n                    {\n                        while (true)\n                        {\n                            v23 += 1;\n                            *((unsigned long long *)(v23 - 1)) = (char)*((char *)(4287104 + (unsigned long long)(unsigned int)sub_411bc0()));\n                            if (v23 == v22)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v25 = v2;\n                    v26 = v0;\n                    v27 = (long long)(stack_base)[-72]();\n                    if (v27 < 0)\n                    {\n                        v28 = *(v14);\n                        if (*(v14) == 17)\n                        {\n                            v29 = v21;\n                            v21 -= 1;\n                            sub_411ce0();\n                            *(v14) = 17;\n                            v19 = -18446744069414584321;\n                        }\n                        else\n                        {\n                            v27 = -1;\n                        }\n                    }\n                    else\n                    {\n                        *(v14) = v4;\n                        v28 = v4;\n                    }\n                    if (v27 >= 0 || *(v14) != 17)\n                    {\n                        v1 = v27;\n                        *((unsigned long *)&v0) = v28;\n                        sub_411ce0();\n                        v19 = v1;\n                        *(v14) = v0;\n                    }\n                }\n            }\n            else\n            {\n                v19 = -18446744069414584321;\n            }\n        }\n    }\n    if (v11 + v9 > v15 || v9 > v18)\n    {\n        *(v14) = 22;\n        v19 = -18446744069414584321;\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_40fb00",
            "funcStartAddr": "0x40fb00",
            "funcEndAddr": "0x40fea9",
            "decompiledFuncCode": "extern unsigned int g_416abf;\nextern unsigned int g_416acb;\nextern unsigned int g_416ad2;\nextern unsigned int g_416ad6;\nextern unsigned int g_416ae6;\nextern unsigned int g_416afd;\nextern unsigned int g_416b58;\nextern unsigned int g_416c28;\nextern unsigned int g_416c48;\nextern unsigned int g_416c70;\nextern unsigned int g_416c98;\nextern unsigned int g_416cc8;\nextern unsigned int g_416e20;\n\nint sub_40fb00()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x416abf, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x416acb, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x416e20, dcgettext(0x0, 0x416ad2, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416b58, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x416ad6, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x416ae6, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x416afd, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x416c28, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x416c48, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x416c70, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x416c98, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x416cc8, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_40dfe0",
            "funcStartAddr": "0x40dfe0",
            "funcEndAddr": "0x40dff2",
            "decompiledFuncCode": "int sub_40dfe0()\n{\n}\n"
        },
        {
            "funcName": "sub_40de90",
            "funcStartAddr": "0x40de90",
            "funcEndAddr": "0x40de9a",
            "decompiledFuncCode": "int sub_40de90()\n{\n}\n"
        },
        {
            "funcName": "sub_4120a0",
            "funcStartAddr": "0x4120a0",
            "funcEndAddr": "0x4120a5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4120a0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_411540",
            "funcStartAddr": "0x411540",
            "funcEndAddr": "0x411596",
            "decompiledFuncCode": "int sub_411540()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404780",
            "funcStartAddr": "0x404780",
            "funcEndAddr": "0x404796",
            "decompiledFuncCode": "int sub_404780()\n{\n}\n"
        },
        {
            "funcName": "sub_41035c",
            "funcStartAddr": "0x41035c",
            "funcEndAddr": "0x410361",
            "decompiledFuncCode": "int sub_41035c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a180",
            "funcStartAddr": "0x40a180",
            "funcEndAddr": "0x40a1c6",
            "decompiledFuncCode": "extern char *g_61b900;\n\nint sub_40a180()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    char *v3;  // rax\n\n    v2 = v1;\n    if (v1 == 0)\n    {\n        v3 = getenv(\"SIMPLE_BACKUP_SUFFI\");\n        v2 = v3;\n    }\n    if ((v3 != 0 || v1 != 0) && *(v2) != 0)\n    {\n        v3 = sub_40ab40();\n        if (v3 == v2)\n        {\n            g_61b900 = v2;\n            return v3;\n        }\n    }\n    if (*(v2) == 0 || v3 != v2 || v3 == 0 && v1 == 0)\n    {\n        g_61b900 = \"~\";\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_411320",
            "funcStartAddr": "0x411320",
            "funcEndAddr": "0x411338",
            "decompiledFuncCode": "int sub_411320()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_4112c0();\n}\n"
        },
        {
            "funcName": "sub_40dafb",
            "funcStartAddr": "0x40dafb",
            "funcEndAddr": "0x40dbc1",
            "decompiledFuncCode": "int sub_40dafb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_40c5a0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4100e0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_40c5a0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409550",
            "funcStartAddr": "0x409550",
            "funcEndAddr": "0x409578",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned int field_10;\n    char padding_14[4];\n    unsigned long long field_18;\n    unsigned short field_20;\n    char padding_22[6];\n    unsigned long long field_28;\n} struct_0;\n\nint sub_409550()\n{\n    struct_0 *v1;  // rsi\n    unsigned int v2;  // edi\n\n    v1->field_0 = v2;\n    v1->field_28 = 0;\n    v1->field_8 = 0;\n    v1->field_18 = 0;\n    v1->field_20 = 0;\n    v1->field_10 = 1;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4093f0",
            "funcStartAddr": "0x4093f0",
            "funcEndAddr": "0x409435",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4093f0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rax\n    struct_0 *v7;  // rbx\n\n    v0 = v4;\n    v1 = v5;\n    v2 = 0;\n    v6 = sub_40c0f0();\n    if (v6 != 0)\n    {\n        v7 = v6;\n        free(v6->field_10);\n        v6 = free(v7);\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40b4e0",
            "funcStartAddr": "0x40b4e0",
            "funcEndAddr": "0x40b542",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b4e0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4120b0",
            "funcStartAddr": "0x4120b0",
            "funcEndAddr": "0x4121f2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_4120b0()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_412260();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_412260();\n                        }\n                    }\n                    sub_412260();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_cp.elf"
}