{
    "funcInfo": [
        {
            "funcName": "sub_403ef0",
            "funcStartAddr": "0x403ef0",
            "funcEndAddr": "0x403ef2",
            "decompiledFuncCode": "int sub_403ef0()\n{\n}\n"
        },
        {
            "funcName": "sub_401d19",
            "funcStartAddr": "0x401d19",
            "funcEndAddr": "0x401d1e",
            "decompiledFuncCode": "int sub_401d19()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4036bf",
            "funcStartAddr": "0x4036bf",
            "funcEndAddr": "0x403730",
            "decompiledFuncCode": "extern uint128_t g_6074a0;\nextern uint128_t g_6074b0;\nextern uint128_t g_6074c0;\nextern unsigned long long g_6074d0;\n\nint sub_4036bf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6074d0;\n    *((uint128_t *)&v0) = g_6074a0;\n    *((uint128_t *)&v1) = g_6074b0;\n    *((uint128_t *)&v2) = g_6074c0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4030a0();\n}\n"
        },
        {
            "funcName": "sub_403580",
            "funcStartAddr": "0x403580",
            "funcEndAddr": "0x403596",
            "decompiledFuncCode": "int sub_403580()\n{\n}\n"
        },
        {
            "funcName": "sub_403fe0",
            "funcStartAddr": "0x403fe0",
            "funcEndAddr": "0x40402a",
            "decompiledFuncCode": "int sub_403fe0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long *v3;  // rsi\n    unsigned long long *v4;  // rsi\n\n    if (!(v2 != 0))\n    {\n        *((int *)v3) = (*(v4) == 0? 128 : *(v4));\n    }\n    else if (*(v4) <= 12297829382473034409)\n    {\n        *(v4) = (*(v4) >> 1) + *(v4) + 1;\n    }\n    else\n    {\n        v0 = *(v4);\n        sub_4040d0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403910",
            "funcStartAddr": "0x403910",
            "funcEndAddr": "0x403cbd",
            "decompiledFuncCode": "extern unsigned int g_40598b;\nextern unsigned int g_40598f;\nextern unsigned int g_40599f;\nextern unsigned int g_4059b6;\nextern unsigned int g_405a18;\nextern unsigned int g_405ae8;\nextern unsigned int g_405b08;\nextern unsigned int g_405b30;\nextern unsigned int g_405b58;\nextern unsigned int g_405b88;\n\nint sub_403910()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    unsigned int v14;  // edx\n    unsigned int v15;  // ecx\n    unsigned int v17;  // edx\n    unsigned int v18;  // ecx\n    void *v20;  // rdi\n    unsigned long v23;  // r9\n    unsigned long v24;  // rsi\n    unsigned long long v25;  // r14\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // r15\n    char *v29;  // rax\n    char *v30;  // rax\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        fprintf(v20, \"%s (%s) \", (unsigned int)v13, v17, v18);\n    }\n    else\n    {\n        fprintf(v20, \"%s %s\\n\", v14, v15);\n    }\n    fprintf(v20, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(0x0, 0x40598b, 0x5), 2015);\n    fputs((unsigned long long)dcgettext(0x0, 0x405a18, 0x5), v20);\n    switch (v23)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40598f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40599f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x4059b6, 0x5);\n        break;\n    case 4:\n        dcgettext(0x0, 0x405ae8, 0x5);\n        break;\n    case 5:\n        v30 = dcgettext(0x0, 0x405b08, 0x5);\n        *((unsigned long long [9])&v4) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        v30 = dcgettext(0x0, 0x405b30, 0x5);\n        *((unsigned long long [9])&v5) = v11[5];\n        *((unsigned long long [9])&v4) = v11[4];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        v29 = dcgettext(0x0, 0x405b58, 0x5);\n        *((unsigned long long [9])&v4) = v11[6];\n        *((unsigned long long [9])&v3) = v11[5];\n        *((unsigned long long [9])&v2) = v11[4];\n    case 8:\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        v29 = dcgettext(0x0, 0x405b88, 0x5);\n        *((unsigned long long [9])&v5) = v11[7];\n        *((unsigned long long [9])&v4) = v11[6];\n        *((unsigned long long [9])&v3) = v11[5];\n        *((unsigned long long [9])&v2) = v11[4];\n    case 9:\n        v24 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v25 = v12[7];\n        v26 = v12[6];\n        *((unsigned long long [9])&v9) = v12[8];\n        v27 = v12[5];\n        v28 = v12[4];\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v11[1];\n    default:\n        v24 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v25 = v12[7];\n        v26 = v12[6];\n        *((unsigned long long [9])&v9) = v12[8];\n        v27 = v12[5];\n        v28 = v12[4];\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v11[1];\n    }\n    v4 = v9;\n    v3 = v25;\n    v2 = v26;\n    v1 = v27;\n    v0 = v28;\n    return fprintf(v20, (unsigned long long)dcgettext(0x0, v24, 0x5));\n    fprintf(v20, v30);\n    return v4;\n    return fprintf(v20, v29);\n}\n"
        },
        {
            "funcName": "sub_403ed0",
            "funcStartAddr": "0x403ed0",
            "funcEndAddr": "0x403ee3",
            "decompiledFuncCode": "int sub_403ed0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n    {\n        v0 = v2 * v3;\n        sub_4040d0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_401e50",
            "funcStartAddr": "0x401e50",
            "funcEndAddr": "0x401eee",
            "decompiledFuncCode": "extern unsigned int g_404abb;\nextern unsigned int g_6071d8;\nextern char g_607388;\nextern unsigned long long g_607390;\n\nint sub_401e50()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_404350();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_607388 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x404abb, 0x5);\n            if (g_607390 != 0)\n            {\n                sub_403740();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_607388 != 0)\n    {\n        v3 = sub_404350();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_607388 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6071d8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_4038b0",
            "funcStartAddr": "0x4038b0",
            "funcEndAddr": "0x4038c2",
            "decompiledFuncCode": "int sub_4038b0()\n{\n}\n"
        },
        {
            "funcName": "sub_402090",
            "funcStartAddr": "0x402090",
            "funcEndAddr": "0x402f9b",
            "decompiledFuncCode": "int sub_402090()\n{\n    void tmp_2;  // tmp #2\n    unsigned long long v0;  // [bp-0x1d8]\n    void tmp_1;  // tmp #1\n    unsigned long long v1;  // [bp-0xd8]\n    unsigned long long v2;  // [bp-0xd0]\n    unsigned long v3;  // [bp-0xc8]\n    unsigned int|char v4;  // [bp-0xac]\n    unsigned long|unsigned long long|char v5;  // [bp-0xa8]\n    unsigned long long v6;  // [bp-0xa0]\n    unsigned long long v7;  // [bp-0x98]\n    unsigned long long|unsigned int v8;  // [bp-0x90]\n    unsigned long|unsigned long long v9;  // [bp-0x88]\n    unsigned long long|unsigned int v10;  // [bp-0x80]\n    unsigned long long|unsigned int v11;  // [bp-0x78]\n    unsigned long long v12;  // [bp-0x70]\n    unsigned long v13;  // [bp-0x68]\n    unsigned int v14;  // [bp-0x60]\n    char v15;  // [bp-0x5b]\n    unsigned long long v16;  // [bp-0x5a]\n    char v17;  // [bp-0x59]\n    unsigned long long v18;  // [bp-0x58]\n    unsigned long long v19;  // [bp-0x50]\n    char v20;  // [bp-0x44]\n    unsigned long long v21;  // [bp-0x40]\n    unsigned int *v22;  // [bp+0x8]\n    unsigned long long v23;  // [bp+0x10]\n    void *v24;  // [bp+0x18]\n    unsigned long long v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long v27;  // r9\n    unsigned long long v28;  // rcx\n    unsigned int v29;  // r8d\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v32;  // r11\n    unsigned long v33;  // r11\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r12\n    unsigned long long v38;  // rax\n    unsigned long|unsigned long long v39;  // r10\n    unsigned long long v40;  // r11\n    unsigned long|unsigned long long v41;  // r8\n    unsigned long long v42;  // r12\n    unsigned long|unsigned long long|char v43;  // rax\n    unsigned long long v44;  // r9\n    char v45;  // al\n    unsigned long long v46;  // rbp\n    char v47;  // bpl\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rax\n    char v50;  // al\n    unsigned long|unsigned long long|unsigned int v51;  // rbp\n    unsigned long long v52;  // rcx\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rdx\n    unsigned short v56;  // dx\n    unsigned long long|char v57;  // rdx\n    unsigned long long v58;  // rbx\n    unsigned long long v59;  // r14\n    unsigned long long v60;  // r12\n    unsigned long long v61;  // r15\n    char *v62;  // rdx\n    unsigned long long v63;  // r8\n    unsigned long long v64;  // rcx\n    unsigned long long v65;  // rcx\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rcx\n    unsigned long long|unsigned int v69;  // rax\n    unsigned long long v71;  // rax\n    char v72;  // al\n    unsigned int v73;  // eax\n    char v74;  // al\n    unsigned int v76;  // eax\n    char v77;  // al\n    unsigned long long v79;  // rdx\n    char v80;  // dl\n    unsigned long long v81;  // rbx\n    unsigned int *|unsigned long long v82;  // rsi\n    unsigned long long v83;  // r14\n    unsigned long long v84;  // r13\n    unsigned long long v85;  // rax\n    char v87;  // al\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rax\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v26 = v25;\n    v83 = v82;\n    v51 = (unsigned int)v27 & 2;\n    v6 = v43;\n    v5 = v28;\n    v4 = v29;\n    v14 = v27;\n    v13 = __ctype_get_mb_cur_max();\n    v30 = v4;\n    switch (v4)\n    {\n    case 0:\n        v15 = 0;\n        v81 = 0;\n        v4 = 0;\n        v7 = 0;\n        v12 = 0;\n    case 1:\n        v15 = 1;\n        v81 = 0;\n        v32 = 2;\n        v4 = 0;\n        v7 = 1;\n        v12 = \"'\";\n    case 2:\n        if (((char)v27 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v15 = 1;\n            v81 = 0;\n            v4 = 0;\n            v7 = 1;\n            v12 = \"'\";\n        }\n    case 3:\n        v15 = 1;\n        v81 = 0;\n        v32 = 2;\n        v4 = 1;\n        v7 = 1;\n        v12 = \"'\";\n    case 4:\n        if (((char)v27 & 2) == 0)\n        {\n            v4 = 1;\n            if (v82 != 0)\n            {\n                *((char *)v25) = 39;\n            }\n            v15 = 0;\n            v81 = 1;\n            v32 = 2;\n            v7 = 1;\n            v12 = \"'\";\n        }\n    case 5:\n        if (((char)v27 & 2) == 0)\n        {\n            if (v82 != 0)\n            {\n                *((char *)v25) = 34;\n            }\n            v15 = 0;\n            v81 = 1;\n            v4 = 1;\n            v7 = 1;\n            v12 = \"\\\"\";\n        }\n        else\n        {\n            v15 = 1;\n            v81 = 0;\n            v4 = 1;\n            v7 = 1;\n            v12 = \"\\\"\";\n        }\n    case 6:\n        v15 = 1;\n        v81 = 0;\n        v32 = 5;\n        v4 = 1;\n        v7 = 1;\n        v12 = \"\\\"\";\n    case 7:\n        v15 = 0;\n        v81 = 0;\n        v4 = 1;\n        v7 = 0;\n        v12 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v5 = v5;\n            v4 = v33;\n            v23 = (unsigned int)sub_401f90();\n            v24 = (unsigned long long)(unsigned int)sub_401f90();\n        }\n        v81 = 0;\n        if (((char)v27 & 2) == 0)\n        {\n            v34 = (char)*((char *)v23);\n            if (*((char *)v23) != 0)\n            {\n                do\n                {\n                    if (v82 > v81)\n                    {\n                        *((unsigned long long *)(v25 + v81)) = v34;\n                    }\n                    v81 += 1;\n                    v34 = (char)*((char *)(v23 + v81));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        *((unsigned long *)&v8) = v33;\n        v5 = v33;\n        v15 = ((unsigned int)v27 & 2) != 0;\n        v4 = 1;\n        v7 = strlen(v24);\n        v32 = v8;\n        v12 = v24;\n    default:\n        abort(); /* do not return */\n    }\n    v35 = v32;\n    v33 = v5;\n    v39 = v35;\n    v84 = 0;\n    v41 = 0;\n    while (true)\n    {\n        v51 = (char)(v40 != v84);\n        if (v40 == -1)\n        {\n            v51 = (char)(*((char *)(v6 + v84)) != 0);\n        }\n        if (v51 != 0)\n        {\n            v44 = v6 + v84;\n            v5 = (unsigned int)v39 != 2 & v4;\n            if (((unsigned int)v39 != 2 & v4) != 0)\n            {\n                v36 = v7;\n                if (v7 != 0)\n                {\n                    v37 = v84 + v36;\n                    if (v40 == -1 && v36 > 1)\n                    {\n                        v10 = v39;\n                        v9 = v41;\n                        v8 = v44;\n                        v40 = strlen(v6);\n                    }\n                    if (v37 <= v40)\n                    {\n                        v11 = v39;\n                        v10 = v40;\n                        v9 = v41;\n                        v8 = v44;\n                        v38 = memcmp(v44, v12, v7);\n                        v44 = v8;\n                        v41 = (char)v9;\n                        v40 = v10;\n                        v39 = v11;\n                        if (v38 == 0 && v15 == 0)\n                        {\n                            v42 = (char)*((char *)v44);\n                            switch (*((char *)v44))\n                            {\n                            case 0:\n                                v43 = (char)((unsigned int)v39 == 2);\n                                v49 = (unsigned int)(0 ^ 1);\n                                v50 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                {\n                                    if (v81 < v82)\n                                    {\n                                        *((char *)(v25 + v81)) = 39;\n                                    }\n                                    if (v82 > v81 + 1)\n                                    {\n                                        *((char *)(v25 + v81 + 1)) = 36;\n                                    }\n                                    if (v82 > v81 + 2)\n                                    {\n                                        *((char *)(v25 + v81 + 2)) = 39;\n                                    }\n                                    v52 = v81 + 3;\n                                    v81 += 4;\n                                    v84 = 1;\n                                    v41 = rax<8>;\n                                    v42 = 48;\n                                    v41 = rax<8>;\n                                }\n                                else\n                                {\n                                    v52 = v81;\n                                    *((char *)(v25 + v52)) = 92;\n                                    v81 = v52 + 1;\n                                    v84 = 1;\n                                    v42 = 48;\n                                    v42 = 48;\n                                    if (1 < v40)\n                                    {\n                                        v82 = v6;\n                                        if (((unsigned int)(char)*((char *)(v6 + 1)) - 48 & 255) <= 9)\n                                        {\n                                            if (v83 > v81)\n                                            {\n                                                *((char *)(v25 + v81)) = 48;\n                                            }\n                                            if (v83 > v52 + 2)\n                                            {\n                                                *((char *)(v25 + v52 + 2)) = 48;\n                                            }\n                                            v81 = v52 + 3;\n                                            v42 = 48;\n                                        }\n                                    }\n                                }\n                            case 13:\n                                v42 = 13;\n                                v48 = 114;\n                                v43 = (unsigned int)v39 == 2;\n                            case 32: case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                v43 = 0;\n                            case 35: case 126:\n                                v43 = 0;\n                            case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                v51 = 0;\n                            case 92:\n                                v46 = v4;\n                                v47 = v4 & v15;\n                                v42 = 92;\n                                v48 = 92;\n                                v43 = rbp<8>;\n                                v43 = (char)rbp<8> & v7 != 0;\n                                if (((char)rbp<8> & v7 != 0) != 0)\n                                {\n                                    v84 = 1;\n                                    v51 = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (v7 == 0 || v38 != 0 || v37 > v40)\n                {\n                    v42 = (char)*((char *)v44);\n                    switch (*((char *)v44))\n                    {\n                    case 0:\n                        if (v15 == 0)\n                        {\n                            v5 = 0;\n                        }\n                    case 7:\n                        v42 = 97;\n                        v43 = 0;\n                        break;\n                    case 8:\n                        v42 = 98;\n                        v43 = 0;\n                        break;\n                    case 9:\n                        v42 = 116;\n                        v43 = 0;\n                        break;\n                    case 10:\n                        v42 = 110;\n                        v43 = 0;\n                        break;\n                    case 11:\n                        v42 = 118;\n                        v43 = 0;\n                        break;\n                    case 12:\n                        v42 = 102;\n                        v43 = 0;\n                        break;\n                        if (v15 == 0)\n                        {\n                            v84 += 1;\n                            v79 = (unsigned int)v41 ^ 1;\n                            v80 = (char)((unsigned int)v41 ^ 1) & v43;\n                            if (((char)((unsigned int)v41 ^ 1) & v43) != 0)\n                            {\n                                if (v83 > v81)\n                                {\n                                    *((char *)(v26 + v81)) = 39;\n                                }\n                                if (v83 > v81 + 1)\n                                {\n                                    *((char *)(v26 + v81 + 1)) = 36;\n                                }\n                                if (v83 > v81 + 2)\n                                {\n                                    *((char *)(v26 + v81 + 2)) = 39;\n                                }\n                                v81 += 3;\n                                v41 = rdx<8>;\n                            }\n                            if (v81 < v83)\n                            {\n                                *((char *)(v26 + v81)) = 92;\n                            }\n                            v81 += 1;\n                        }\n                    case 13:\n                        v5 = 0;\n                    case 32: case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v5 = 0;\n                    case 35: case 126:\n                        v5 = 0;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v5 = 0;\n                    case 39:\n                        v5 = 0;\n                    case 63:\n                        v5 = 0;\n                    case 92:\n                        v5 = 0;\n                    case 123: case 125:\n                        v5 = 0;\n                    default:\n                        v5 = 0;\n                    }\n                }\n            }\n            else\n            {\n                v42 = (char)*((char *)v44);\n                switch (*((char *)v44))\n                {\n                case 0:\n                    if (v4 == 0)\n                    {\n                        v84 += 1;\n                        v84 += 1;\n                        v51 = v41;\n                        v42 = 0;\n                        v51 = 0;\n                        v42 = 0;\n                        v5 = 0;\n                        v42 = 0;\n                        v82 = v22;\n                        v43 = (unsigned int)v39 == 2;\n                        v43 = (unsigned int)v39 == 2;\n                        v84 += 1;\n                        v51 = (v51 ^ 1) & (unsigned int)v41;\n                    }\n                case 7:\n                    v42 = 7;\n                    v48 = 97;\n                    v43 = (unsigned int)v39 == 2;\n                case 8:\n                    v42 = 8;\n                    v48 = 98;\n                    v43 = (unsigned int)v39 == 2;\n                case 9:\n                    v42 = 9;\n                    v48 = 116;\n                case 10:\n                    v42 = 10;\n                    v48 = 110;\n                    v43 = (unsigned int)v39 == 2;\n                    v5 = v15 & (unsigned int)v39 == 2;\n                    if ((v15 & (unsigned int)v39 == 2) != 0)\n                    {\n                        tmp_2 = v39;\n                    }\n                case 11:\n                    v42 = 11;\n                    v48 = 118;\n                    v43 = (unsigned int)v39 == 2;\n                case 12:\n                    v42 = 12;\n                    v48 = 102;\n                    v43 = (unsigned int)v39 == 2;\n                    if (v4 == 0)\n                    {\n                        v51 = ((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1;\n                        v51 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1) | v15;\n                        v84 += 1;\n                        v51 = (v51 ^ 1) & (unsigned int)v41;\n                        v43 = (unsigned int)v39 == 2;\n                        if (v51 != 0)\n                        {\n                            if (v81 < v83)\n                            {\n                                *((char *)(v26 + v81)) = 39;\n                            }\n                            if (v83 > v81 + 1)\n                            {\n                                *((char *)(v26 + v81 + 1)) = 39;\n                            }\n                            v81 += 2;\n                            v41 = 0;\n                        }\n                    }\n                    else\n                    {\n                        v43 = v43;\n                        v42 = v48;\n                    }\n                case 13:\n                    v42 = 13;\n                    v48 = 114;\n                case 32: case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                    v43 = (char)((unsigned int)v39 == 2);\n                case 35: case 126:\n                    v43 = (unsigned int)v39 == 2;\n                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                    v43 = (char)((unsigned int)v39 == 2);\n                    break;\n                case 39:\n                    v43 = 0;\n                    v42 = 39;\n                    if ((unsigned int)v39 == 2)\n                    {\n                        if (v81 < v82)\n                        {\n                            *((char *)(v25 + v81)) = 39;\n                        }\n                        if (v82 > v81 + 1)\n                        {\n                            *((char *)(v25 + v81 + 1)) = 92;\n                        }\n                        if (v82 > v81 + 2)\n                        {\n                            *((char *)(v25 + v81 + 2)) = 39;\n                        }\n                        v81 += 3;\n                        v84 = 1;\n                        v41 = 0;\n                        v42 = 39;\n                    }\n                case 63:\n                    if ((unsigned int)v39 != 2)\n                    {\n                        v42 = 63;\n                        v43 = (char)((unsigned int)v39 == 2);\n                        break;\n                        v43 = 0;\n                        v42 = 63;\n                        break;\n                        v43 = 0;\n                        v42 = 63;\n                        v82 = v6;\n                        v42 = (char)*((char *)(v82 + 2));\n                        v82 = 0x7000a38200000000;\n                        v0 = 0x7000a38200000000;\n                        v42 = 63;\n                        break;\n                        if (v81 < v83)\n                        {\n                            *((char *)(v25 + v81)) = 63;\n                        }\n                        if (v83 > v81 + 1)\n                        {\n                            *((char *)(v25 + v81 + 1)) = 34;\n                        }\n                        if (v83 > v81 + 2)\n                        {\n                            *((char *)(v25 + v81 + 2)) = 34;\n                        }\n                        if (v83 > v81 + 3)\n                        {\n                            *((char *)(v25 + v81 + 3)) = 63;\n                        }\n                        v81 += 4;\n                        v43 = 0;\n                        v51 = 0;\n                        v84 = 2;\n                    }\n                    else\n                    {\n                        v51 = 0;\n                        v42 = 63;\n                    }\n                case 92:\n                    if ((unsigned int)v39 == 2)\n                    {\n                        v84 += 1;\n                        v51 = v41;\n                        v42 = 92;\n                        tmp_1 = v39;\n                    }\n                case 123: case 125:\n                    v45 = v40 != 1;\n                    if (v40 == -1)\n                    {\n                        v45 = *((char *)(v6 + 1)) != 0;\n                    }\n                    v43 = (char)((unsigned int)v39 == 2);\n                    if (v45 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        else\n        {\n            v85 = v39;\n            v87 = (unsigned int)v39 == 2;\n            v88 = rax<8> & (unsigned int)v15;\n            if ((v88 & (char)(v81 == 0)) == 0)\n            {\n                v89 = v12;\n                if ((unsigned long long)v15 == 0 && v12 != 0)\n                {\n                    v90 = (char)*((char *)v89);\n                    if (*((char *)v89) != 0)\n                    {\n                        v91 = v89 - v81;\n                        do\n                        {\n                            if (v83 > v81)\n                            {\n                                *((unsigned long long *)(v26 + v81)) = v90;\n                            }\n                            v81 += 1;\n                            v90 = (char)*((char *)(v91 + v81));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v81 < v83)\n                {\n                    *((char *)(v26 + v81)) = 0;\n                }\n            }\n        }\n        if (v13 == 1)\n        {\n            v10 = v39;\n            v9 = v40;\n            v8 = v41;\n            v39 = v10;\n            v54 = 1;\n            v55 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v42 * 2));\n            v56 = (unsigned short)v55 % 0x4000;\n            v57 = (unsigned int)rdx<8> ^ 1;\n            v57 &= v4;\n            if (v57 != 0)\n            {\n                v57 = v4;\n            }\n        }\n        else\n        {\n            v21 = 0;\n            if (v40 == -1)\n            {\n                v10 = v39;\n                v9 = v41;\n                v8 = v44;\n                v40 = strlen(v6);\n            }\n            v18 = v81;\n            v16 = v41;\n            v58 = 0;\n            *((unsigned long long *)&v17) = v42;\n            v19 = v44;\n            v10 = v26;\n            v11 = v83;\n            v8 = v40;\n            v9 = v39;\n            do\n            {\n                v59 = v84 + v58;\n                v60 = v6 + v84 + v58;\n                v61 = (unsigned int)sub_4041b0();\n                if (v61 == 0)\n                {\n                    v51 = (unsigned int)v51 ^ 1;\n                    v54 = v58;\n                    v26 = v10;\n                    v41 = (char)v16;\n                    v42 = v17;\n                    v81 = v18;\n                    v83 = v11;\n                    v57 = v4 & (unsigned int)v51;\n                    v40 = v8;\n                    v39 = (unsigned int)v9;\n                }\n                else if (v61 == -1)\n                {\n                    v54 = v58;\n                    v41 = (char)v16;\n                    v42 = v17;\n                    v81 = v18;\n                    v26 = v10;\n                    v83 = v11;\n                    v40 = v8;\n                    v39 = (unsigned int)v9;\n                    v57 = v4;\n                }\n                else if (v61 != -2)\n                {\n                    if (v61 != 1 && ((int)v9 == 2 & v15) != 0)\n                    {\n                        v82 = v6;\n                        v62 = v6 + v82 + 1;\n                        v63 = v6 + v61 + v82;\n                        while (true)\n                        {\n                            v64 = (unsigned int)*(v62) - 91;\n                            if (((unsigned int)*(v62) - 91 & 255) <= 33)\n                            {\n                                v65 = 1 << (v64 & 63);\n                            }\n                            if ((8589934635 & v65) == 0 || ((unsigned int)*(v62) - 91 & 255) > 33)\n                            {\n                                v62 = &v62[1];\n                                if (v63 == v62)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((8589934635 & v65) == 0 || ((unsigned int)*(v62) - 91 & 255) > 33)\n                        {\n                            v51 = (unsigned int)(iswprint(*((int *)&v20)) == 0? 0 : (unsigned int)rbp<8>);\n                            v58 += v61;\n                        }\n                    }\n                    v51 = (unsigned int)(iswprint(*((int *)&v20)) == 0? 0 : (unsigned int)rbp<8>);\n                    v58 += v61;\n                    v54 = v58;\n                    v41 = (char)v16;\n                    v81 = v18;\n                    v57 = (unsigned int)v51 ^ 1;\n                    v42 = v17;\n                    v26 = v10;\n                    v83 = v11;\n                    v40 = v8;\n                    v39 = (unsigned int)v9;\n                    v57 = (char)((unsigned int)v51 ^ 1) & v4;\n                }\n                else\n                {\n                    v40 = v8;\n                    v82 = v59;\n                    v25 = v60;\n                    v67 = v58;\n                    v54 = v58;\n                    v41 = (char)v16;\n                    v42 = v17;\n                    v81 = v18;\n                    v26 = v10;\n                    v83 = v11;\n                    v39 = (unsigned int)v9;\n                    if (v82 < v8 && *((char *)v25) != 0)\n                    {\n                        do\n                        {\n                            v67 += 1;\n                        }\n                        while (v8 > v67 && *((char *)(v19 + v67)) != 0);\n                        v54 = v67;\n                    }\n                    v57 = v4;\n                }\n            }\n            while (v54 <= 1);\n            if (v61 == -2 || v61 == -1 || v61 == 0 || mbsinit((unsigned int)&v21) != 0)\n            {\n                v68 = v54 + v84;\n                v69 = 0;\n                v82 = v5;\n            }\n        }\n        if (v13 != 1 || v57 != 0)\n        {\n            v68 = v54 + v84;\n            v69 = 0;\n            v82 = v5;\n            while (true)\n            {\n                if (v57 != 0)\n                {\n                    if ((unsigned long long)v15 != 0)\n                    {\n                        break;\n                    }\n                    v71 = (unsigned int)v41 ^ 1;\n                    v72 = (char)((unsigned int)v41 ^ 1) & v51;\n                    if (((char)((unsigned int)v41 ^ 1) & v51) != 0)\n                    {\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 39;\n                        }\n                        if (v83 > v81 + 1)\n                        {\n                            *((char *)(v26 + v81 + 1)) = 36;\n                        }\n                        if (v83 > v81 + 2)\n                        {\n                            *((char *)(v26 + v81 + 2)) = 39;\n                        }\n                        v81 += 3;\n                        v41 = rax<8>;\n                    }\n                    if (v81 < v83)\n                    {\n                        *((char *)(v26 + v81)) = 92;\n                    }\n                    if (v83 > v81 + 1)\n                    {\n                        v73 = v42;\n                        v74 = (char)v42 % 64;\n                        *((unsigned long long *)(v26 + v81 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                    }\n                    if (v83 > v81 + 2)\n                    {\n                        v76 = v42;\n                        v77 = (char)v42 % 8;\n                        *((unsigned long long *)(v26 + v81 + 2)) = (unsigned int)((rax<4> & 7) + 48);\n                    }\n                    v84 += 1;\n                    v81 += 3;\n                    v42 = ((unsigned int)v42 & 7) + 48;\n                    if (v68 <= v84)\n                    {\n                        break;\n                    }\n                    v69 = v57;\n                }\n                else\n                {\n                    v51 = (v69 ^ 1) & (unsigned int)v41;\n                    if (v82 != 0)\n                    {\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 92;\n                        }\n                        v81 += 1;\n                    }\n                    v84 += 1;\n                    if (v84 >= v68)\n                    {\n                        break;\n                    }\n                    if (v51 != 0)\n                    {\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 39;\n                        }\n                        if (v83 > v81 + 1)\n                        {\n                            *((char *)(v26 + v81 + 1)) = 39;\n                        }\n                        v81 += 2;\n                        v82 = 0;\n                        v41 = 0;\n                    }\n                    else\n                    {\n                        v82 = 0;\n                    }\n                }\n                if (v81 < v83)\n                {\n                    *((unsigned long long *)(v26 + v81)) = v42;\n                }\n                v42 = (char)*((char *)(v6 + v84));\n                v81 += 1;\n            }\n        }\n        if (v51 == 0 || v15 != 0)\n        {\n            if (v15 != 0 || (v88 & (char)(v81 == 0)) != 0)\n            {\n                v3 = v24;\n                v2 = v23;\n                v1 = 0;\n                v81 = (unsigned int)sub_402090();\n            }\n            v92 = v81;\n            return v92;\n        }\n        if ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1) == 0 && v5 == 0 && v4 == 0 && v15 == 0 || v15 == 0 || v5 == 0 && v15 == 0 && (unsigned int)v39 == 2 || (v13 != 1 || v57 != 0) && v81 >= v83)\n        {\n            if (v81 < v83)\n            {\n                *((unsigned long long *)(v26 + v81)) = v42;\n            }\n            v81 += 1;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_401af1",
            "funcStartAddr": "0x401af1",
            "funcEndAddr": "0x401b48",
            "decompiledFuncCode": "extern char g_607268;\nextern unsigned long long g_607270;\n\nint sub_401af1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_607268 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_607270 >= 0)\n            {\n                break;\n            }\n            g_607270 = g_607270 + 1;\n            *((long long *)(6319680 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_607268 = 1;\n        return sub_401a9b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_401bcf",
            "funcStartAddr": "0x401bcf",
            "funcEndAddr": "0x401bd4",
            "decompiledFuncCode": "int sub_401bcf()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4032a0",
            "funcStartAddr": "0x4032a0",
            "funcEndAddr": "0x4032d3",
            "decompiledFuncCode": "extern int512_t g_6074a0;\n\nint sub_4032a0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6074a0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6074a0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_401d46",
            "funcStartAddr": "0x401d46",
            "funcEndAddr": "0x401d48",
            "decompiledFuncCode": "int sub_401d46()\n{\n}\n"
        },
        {
            "funcName": "sub_404350",
            "funcStartAddr": "0x404350",
            "funcEndAddr": "0x4043b0",
            "decompiledFuncCode": "int sub_404350()\n{\n    unsigned long long v1;  // r12\n    unsigned int v2;  // edi\n    unsigned int v3;  // ebp\n    void *v4;  // rdi\n    unsigned long long v5;  // rax\n\n    v1 = __fpending();\n    v3 = ferror(v2);\n    v5 = fclose(v4);\n    if (v3 == 0)\n    {\n        if ((unsigned int)v5 != 0 && v1 == 0)\n        {\n            v5 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v5 == 0)\n        {\n            *(__errno_location()) = 0;\n            v5 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v5 != 0 && (v1 != 0 || v3 != 0))\n    {\n        v5 = -18446744069414584321;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_4037e0",
            "funcStartAddr": "0x4037e0",
            "funcEndAddr": "0x40384c",
            "decompiledFuncCode": "extern uint128_t g_6074a0;\nextern uint128_t g_6074b0;\nextern uint128_t g_6074c0;\nextern unsigned long long g_6074d0;\n\nint sub_4037e0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6074a0;\n    *((uint128_t *)&v1) = g_6074b0;\n    *((uint128_t *)&v2) = g_6074c0;\n    v4 = g_6074d0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4030a0();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403eb0",
            "funcStartAddr": "0x403eb0",
            "funcEndAddr": "0x403eca",
            "decompiledFuncCode": "int sub_403eb0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4040d0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_404110",
            "funcStartAddr": "0x404110",
            "funcEndAddr": "0x40414b",
            "decompiledFuncCode": "int sub_404110()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_404150();\n    }\n}\n"
        },
        {
            "funcName": "sub_4040fc",
            "funcStartAddr": "0x4040fc",
            "funcEndAddr": "0x404101",
            "decompiledFuncCode": "int sub_4040fc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_401c10",
            "funcStartAddr": "0x401c10",
            "funcEndAddr": "0x401d37",
            "decompiledFuncCode": "extern unsigned int g_404ae2;\nextern unsigned int g_404af7;\nextern unsigned int g_404b20;\n\nint sub_401c10()\n{\n    char v0;  // [bp-0x2c]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned int *v5;  // r8\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rbp\n    unsigned long long v9;  // r12\n\n    clearerr();\n    if (fread(&v0, 0x4, 0x1, v2) == 1)\n    {\n        v4 = (unsigned int)*((int *)&v0);\n        if (!(*(v5) == 0))\n        {\n            v4 = (unsigned int)(*(v5) == 2? *((int *)&v0) << 24 | *((int *)&v0) << 8 & 0xff0000 | *((int *)&v0) >> 8 & 0xff00 | *((int *)&v0) >> 24 & 255 : *((int *)&v0));\n        }\n        else if (v6 < *((int *)&v0))\n        {\n            if (v6 >= (*((int *)&v0) << 24 | *((int *)&v0) << 8 & 0xff0000 | *((int *)&v0) >> 8 & 0xff00 | *((int *)&v0) >> 24 & 255))\n            {\n                v9 = (unsigned int)sub_4035c0();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x404b20, 0x5));\n                *(v5) = 2;\n                return *((int *)&v0) * 0x1000000 | *((int *)&v0) * 0x100 & 0xff0000 | *((int *)&v0) >> 8 & 0xff00 | *((int *)&v0) >> 24 & 255;\n            }\n        }\n        else\n        {\n            if (v6 < (*((int *)&v0) << 24 | *((int *)&v0) << 8 & 0xff0000 | *((int *)&v0) >> 8 & 0xff00 | *((int *)&v0) >> 24 & 255))\n            {\n                *(v5) = 1;\n            }\n        }\n        if (v6 < (*((int *)&v0) << 24 | *((int *)&v0) << 8 & 0xff0000 | *((int *)&v0) >> 8 & 0xff00 | *((int *)&v0) >> 24 & 255) || v6 >= *((int *)&v0) || *(v5) != 0)\n        {\n            return v4;\n        }\n    }\n    else\n    {\n        v7 = (unsigned int)sub_4035c0();\n        if (feof(v2) != 0)\n        {\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x404ae2, 0x5));\n        }\n        else\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x404af7, 0x5));\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4034b0",
            "funcStartAddr": "0x4034b0",
            "funcEndAddr": "0x403545",
            "decompiledFuncCode": "extern struct_0 *g_607218;\nextern unsigned long long g_607220;\nextern unsigned long long g_607228;\nextern unsigned int g_607230;\nextern unsigned long long g_6073a0;\n\nint sub_4034b0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_607230;\n    if (g_607230 > 1)\n    {\n        v2 = &g_607218[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_607218[(unsigned long long)(g_607230 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_607218->field_8 != 6321056)\n    {\n        v1 = free(g_607218->field_8);\n        g_607220 = 0x100;\n        g_607228 = &g_6073a0;\n    }\n    if (g_607218 != 6320672)\n    {\n        v1 = free(g_607218);\n        g_607218 = &g_607220;\n    }\n    g_607230 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4038d0",
            "funcStartAddr": "0x4038d0",
            "funcEndAddr": "0x4038e1",
            "decompiledFuncCode": "int sub_4038d0()\n{\n}\n"
        },
        {
            "funcName": "sub_4036b0",
            "funcStartAddr": "0x4036b0",
            "funcEndAddr": "0x4036bf",
            "decompiledFuncCode": "int sub_4036b0()\n{\n}\n"
        },
        {
            "funcName": "sub_403630",
            "funcStartAddr": "0x403630",
            "funcEndAddr": "0x403699",
            "decompiledFuncCode": "int sub_403630()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4030a0();\n}\n"
        },
        {
            "funcName": "sub_4049a0",
            "funcStartAddr": "0x4049a0",
            "funcEndAddr": "0x4049b8",
            "decompiledFuncCode": "extern int512_t g_6071c8;\n\nint sub_4049a0()\n{\n}\n"
        },
        {
            "funcName": "sub_403f60",
            "funcStartAddr": "0x403f60",
            "funcEndAddr": "0x403fcf",
            "decompiledFuncCode": "int sub_403f60() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403280",
            "funcStartAddr": "0x403280",
            "funcEndAddr": "0x40328f",
            "decompiledFuncCode": "extern int512_t g_6074a0;\n\nint sub_403280()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6074a0 : v1));\n}\n"
        },
        {
            "funcName": "sub_401be0",
            "funcStartAddr": "0x401be0",
            "funcEndAddr": "0x401c0b",
            "decompiledFuncCode": "extern unsigned int g_404abb;\n\nint sub_401be0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x404abb, 0x5));\n}\n"
        },
        {
            "funcName": "sub_4034a0",
            "funcStartAddr": "0x4034a0",
            "funcEndAddr": "0x4034aa",
            "decompiledFuncCode": "int sub_4034a0()\n{\n}\n"
        },
        {
            "funcName": "sub_403f00",
            "funcStartAddr": "0x403f00",
            "funcEndAddr": "0x403f30",
            "decompiledFuncCode": "int sub_403f00()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4040d0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4038a0",
            "funcStartAddr": "0x4038a0",
            "funcEndAddr": "0x4038aa",
            "decompiledFuncCode": "int sub_4038a0()\n{\n}\n"
        },
        {
            "funcName": "sub_401b48",
            "funcStartAddr": "0x401b48",
            "funcEndAddr": "0x401b84",
            "decompiledFuncCode": "int sub_401b48() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403330",
            "funcStartAddr": "0x403330",
            "funcEndAddr": "0x4033a2",
            "decompiledFuncCode": "extern int512_t g_6074a0;\n\nint sub_403330()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6074a0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_402090();\n}\n"
        },
        {
            "funcName": "sub_4035a0",
            "funcStartAddr": "0x4035a0",
            "funcEndAddr": "0x4035b2",
            "decompiledFuncCode": "int sub_4035a0()\n{\n}\n"
        },
        {
            "funcName": "sub_4033cb",
            "funcStartAddr": "0x4033cb",
            "funcEndAddr": "0x403491",
            "decompiledFuncCode": "int sub_4033cb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_402090();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_403eb0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_402090();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4032e0",
            "funcStartAddr": "0x4032e0",
            "funcEndAddr": "0x4032f3",
            "decompiledFuncCode": "extern int512_t g_6074a0;\n\nint sub_4032e0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6074a0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6074a0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403850",
            "funcStartAddr": "0x403850",
            "funcEndAddr": "0x403859",
            "decompiledFuncCode": "int sub_403850()\n{\n}\n"
        },
        {
            "funcName": "sub_403570",
            "funcStartAddr": "0x403570",
            "funcEndAddr": "0x40357a",
            "decompiledFuncCode": "int sub_403570()\n{\n}\n"
        },
        {
            "funcName": "sub_404030",
            "funcStartAddr": "0x404030",
            "funcEndAddr": "0x404047",
            "decompiledFuncCode": "int sub_404030()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_403eb0();\n}\n"
        },
        {
            "funcName": "sub_404150",
            "funcStartAddr": "0x404150",
            "funcEndAddr": "0x4041a6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_404150()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4041e0",
            "funcStartAddr": "0x4041e0",
            "funcEndAddr": "0x404251",
            "decompiledFuncCode": "extern unsigned long long stderr;\n\nint sub_4041e0()\n{\n    char v0;  // [bp-0x108]\n    char v1;  // [bp-0x8]\n    char *v5;  // rdi\n\n    __errno_location();\n    if (sub_404260() == 34)\n    {\n        abort(); /* do not return */\n    }\n    if (v5 != 0 && *(v5) != 0)\n    {\n        return fprintf(stderr, \"%s: %s\\n\", (unsigned int)*((long long *)&v1), (unsigned int)&v0);\n    }\n    if (v5 == 0 || *(v5) == 0)\n    {\n        return fprintf(stderr, \"%s\\n\", (unsigned int)&v0);\n    }\n}\n"
        },
        {
            "funcName": "sub_403300",
            "funcStartAddr": "0x403300",
            "funcEndAddr": "0x40332b",
            "decompiledFuncCode": "extern char g_6074a0;\n\nint sub_403300()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6074a0 : v2);\n    *((int *)(tmp_11? &g_6074a0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6074a0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_6074a0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_401bb0",
            "funcStartAddr": "0x401bb0",
            "funcEndAddr": "0x401bcf",
            "decompiledFuncCode": "int sub_401bb0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    error(0x1, *(__errno_location()), \"%s\");\n}\n"
        },
        {
            "funcName": "sub_403760",
            "funcStartAddr": "0x403760",
            "funcEndAddr": "0x40376a",
            "decompiledFuncCode": "int sub_403760()\n{\n}\n"
        },
        {
            "funcName": "sub_401d50",
            "funcStartAddr": "0x401d50",
            "funcEndAddr": "0x401da7",
            "decompiledFuncCode": "int sub_401d50()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // esi\n    unsigned int v3;  // edx\n    void *v4;  // rdi\n    char v6;  // al\n\n    v0 = v2;\n    if (v3 != 0)\n    {\n        if (v3 == 2)\n        {\n            v0 = v0 * 0x1000000 | v0 * 0x100 & 0xff0000 | v0 >> 8 & 0xff00 | v0 >> 24 & 255;\n        }\n        v6 = fwrite(&v0, 0x4, 0x1, v4) == 1;\n        return rax<8>;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403e40",
            "funcStartAddr": "0x403e40",
            "funcEndAddr": "0x403eaa",
            "decompiledFuncCode": "extern unsigned int g_4059d2;\nextern unsigned int g_4059fd;\nextern unsigned int g_405c58;\n\nint sub_403e40()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    printf((unsigned long long)dcgettext(0x0, 0x4059d2, 0x5));\n    printf((unsigned long long)dcgettext(0x0, 0x4059fd, 0x5));\n    dcgettext(0x0, 0x405c58, 0x5);\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401680",
            "funcEndAddr": "0x401a4e",
            "decompiledFuncCode": "int main() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4036a0",
            "funcStartAddr": "0x4036a0",
            "funcEndAddr": "0x4036ac",
            "decompiledFuncCode": "int sub_4036a0()\n{\n}\n"
        },
        {
            "funcName": "sub_404260",
            "funcStartAddr": "0x404260",
            "funcEndAddr": "0x40433e",
            "decompiledFuncCode": "int sub_404260()\n{\n    void *v0;  // [bp-0x40]\n    unsigned int v2;  // rdx\n    unsigned long long v3;  // r12\n    char *v4;  // rsi\n    unsigned int v5;  // edi\n    unsigned int v6;  // ebp\n    char *v7;  // rsi\n    unsigned int *v8;  // r13\n    unsigned int v9;  // r15d\n    unsigned long long v10;  // rax\n    unsigned long long v14;  // rax\n\n    if (v2 > 1)\n    {\n        *(v4) = 0;\n        v6 = v5;\n        v8 = __errno_location();\n        v9 = *(v8);\n        v3 = __xpg_strerror_r(v5, v4, v2);\n        if ((unsigned int)v3 >= 0)\n        {\n        }\n        else\n        {\n            v3 = *(v8);\n        }\n        if (*(v4) == 0 && (unsigned int)v3 < 0 || *(v4) == 0 && (unsigned int)v3 >= 0)\n        {\n            v0 = (unsigned long long)strerror_r(v6, (unsigned int)v4, v2);\n            v10 = strlen(v0);\n            if (v2 > v10)\n            {\n                memcpy(v4, v0, v10 + 1);\n            }\n            else\n            {\n                memcpy(v4, v0, v2 - 1);\n                v4[v2 + -1] = 0;\n            }\n            if ((unsigned int)v3 == 22 && *(v4) == 0)\n            {\n                snprintf(v4, v2, \"Unknown error %d\", v6);\n            }\n        }\n        *(v8) = v9;\n    }\n    else\n    {\n        v3 = 34;\n        if (v2 != 0)\n        {\n            *(v7) = 0;\n        }\n    }\n    v14 = v3;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_4041b0",
            "funcStartAddr": "0x4041b0",
            "funcEndAddr": "0x4041d3",
            "decompiledFuncCode": "int sub_4041b0()\n{\n    unsigned long v1;  // rsi\n    unsigned long v2;  // rdx\n\n    if (v1 != 0 && v2 == 0)\n    {\n        return -2;\n    }\n}\n"
        },
        {
            "funcName": "sub_401a9b",
            "funcStartAddr": "0x401a9b",
            "funcEndAddr": "0x401aba",
            "decompiledFuncCode": "extern unsigned long long g_607238;\n\nint sub_401a9b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_607238;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_401f90",
            "funcStartAddr": "0x401f90",
            "funcEndAddr": "0x40206f",
            "decompiledFuncCode": "extern int512_t g_404c2e;\nextern int512_t g_404c32;\n\nint sub_401f90()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_4043c0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_404c2e : 4213817);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_404c32 : 4213813);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4033a2",
            "funcStartAddr": "0x4033a2",
            "funcEndAddr": "0x4033cb",
            "decompiledFuncCode": "int sub_4033a2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_403770",
            "funcStartAddr": "0x403770",
            "funcEndAddr": "0x4037e3",
            "decompiledFuncCode": "int sub_403770()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4030a0();\n}\n"
        },
        {
            "funcName": "sub_403d00",
            "funcStartAddr": "0x403d00",
            "funcEndAddr": "0x403d20",
            "decompiledFuncCode": "int sub_403d00()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4043c0",
            "funcStartAddr": "0x4043c0",
            "funcEndAddr": "0x404914",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_4059d1;\nextern char g_6074d8[2];\n\nint sub_4043c0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // r12\n    char *v14;  // r13\n    unsigned long long v15;  // r14\n    unsigned long long v16;  // rbp\n    struct_1 *v19;  // r12\n    unsigned short v20;  // dx\n    unsigned int v21;  // r12d\n    void *v23;  // rbx\n    unsigned long long v26;  // rax\n    unsigned int *v27;  // rcx\n    unsigned int v28;  // eax\n    unsigned long v29;  // rax\n    unsigned int *v30;  // rdx\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // rax\n    unsigned long v33;  // rax\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rsi\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rdx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rsi\n    unsigned long long v41;  // r9\n    unsigned long long v42;  // r10\n    unsigned int v43;  // ecx\n    unsigned long long v45;  // r8\n    void *v46;  // rcx\n    unsigned long long v48;  // rcx\n    unsigned int v50;  // edx\n    unsigned long long v53;  // rcx\n    unsigned long long v54;  // rsi\n    char *v55;  // rax\n    char *v56;  // rax\n    unsigned long long v57;  // rax\n    unsigned long long v58;  // rdx\n    unsigned long long v59;  // r13\n    void *v60;  // rdi\n    unsigned long long v64;  // rbp\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n\n    v9 = g_6074d8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_4059d1 : (unsigned long long)nl_langinfo(0xe));\n    if (g_6074d8 == 0)\n    {\n        v14 = getenv(\"CHARSETALIASDIR\");\n        if (v14 != 0 && *(v14) != 0)\n        {\n            v11 = strlen(v14);\n            v13 = v11;\n            v15 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v14[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v12 = v11 + 15;\n                v13 += 1;\n            }\n            if (v11 == 0 || v14[v11 + -1] == 47)\n            {\n                v16 = malloc(v12);\n                if (v16 != 0)\n                {\n                    memcpy(v16, v14, v15);\n                }\n            }\n        }\n        if (v14 == 0 || *(v14) == 0)\n        {\n            v12 = 116;\n            v13 = 102;\n            v15 = 101;\n            v14 = \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v14 == 0 || *(v14) == 0 || v11 != 0 && v14[v11 + -1] != 47)\n        {\n            v16 = malloc(v12);\n        }\n        if (v16 == 0 || v16 == 0)\n        {\n            v9 = &g_4059d1;\n        }\n        if (v16 != 0 && (v14 == 0 || *(v14) == 0 || v11 != 0) && (v14 == 0 || *(v14) == 0 || v14[v11 + -1] != 47))\n        {\n            memcpy(v16, v14, v15);\n            *((char *)(v16 + v15)) = 47;\n        }\n        if (v14 == 0 && v16 != 0 || *(v14) == 0 && v16 != 0 || v11 != 0 && v14[v11 + -1] != 47 && v16 != 0 || v11 == 0 && v14 != 0 && v16 != 0 && *(v14) != 0 || v14[v11 + -1] == 47 && v14 != 0 && v16 != 0 && *(v14) != 0)\n        {\n            v19 = v13 + v16;\n            v19->field_0 = 3347411969557751907;\n            v19->field_c = 115;\n            v19->field_8 = 1634298977;\n            v21 = open(v16, 0x0, v20);\n            if (v21 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v21, \"r\");\n                    while (true)\n                    {\n                        v55 = *((long long *)(v12 + 8));\n                        if (*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)))\n                        {\n                            v12 = __uflow(v12);\n                        }\n                        if ((unsigned int)v12 != 32 && (unsigned int)v12 != 35)\n                        {\n                            ungetc(v12, v12);\n                            v26 = fscanf(v12, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v26 > 1)\n                            {\n                                v27 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v27 = &v4;\n                                    v28 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v29 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v30 = &v5;\n                                v31 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v27 + 2) : v27) + -1 * ((v29 + v29 <= v29? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v30 = &v6;\n                                    v32 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v31;\n                                tmp_56 = (unsigned int)v32 % 0x10000;\n                                v33 = (unsigned int)(((unsigned int)v32 & 32896) == 0? (unsigned int)(v32 >> 16) : (unsigned int)v32);\n                                v34 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v30)[2] : v30) + -1 * ((v33 + v33 <= v33? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v30)[2] : v30) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v34 + 2;\n                                    v35 = malloc(v34 + 3);\n                                    v37 = v1;\n                                    v38 = v2;\n                                }\n                                else\n                                {\n                                    v36 = v34 + v0 + 3;\n                                    v0 = v34 + v0 + 2;\n                                    v35 = realloc(NULL, v36);\n                                    v38 = v2;\n                                    v37 = v1;\n                                }\n                                if (v35 != 0)\n                                {\n                                    tmp_1 = -2 - v37;\n                                    v39 = v37 + 1;\n                                    v12 = v0 - v38;\n                                    v40 = tmp_1 + v0 - v38 + v35;\n                                    if ((unsigned int)v39 >= 8)\n                                    {\n                                        *((long long *)v40) = *((long long *)&v3);\n                                        *((long long *)(v40 + v39 - 8)) = *((long long *)&(&v3)[v39 + -8]);\n                                        v41 = v40 + 8 & -8;\n                                        v40 -= v40 + 8 & -8;\n                                        v42 = &(&v3)[-1 * v40];\n                                        v43 = (unsigned int)(v39 + v40) & -8;\n                                        if (v43 >= 8)\n                                        {\n                                            v40 = 0;\n                                            do\n                                            {\n                                                v45 = v40;\n                                                v40 = (unsigned int)v40 + 8;\n                                                *((long long *)(v41 + v45)) = *((long long *)(v42 + v45));\n                                            }\n                                            while ((unsigned int)v40 < (v43 & -8));\n                                        }\n                                    }\n                                    else if ((v39 & 4) != 0)\n                                    {\n                                        *((int *)v40) = *((int *)&v3);\n                                        *((int *)(v40 + v39 - 4)) = *((int *)&(&v3)[v39 + -4]);\n                                    }\n                                    else if ((unsigned int)v39 != 0)\n                                    {\n                                        *((char *)v40) = v3;\n                                        if ((v39 & 2) != 0)\n                                        {\n                                            *((short *)(v40 + v39 - 2)) = *((short *)&(&v3)[v39 + -2]);\n                                        }\n                                    }\n                                    v58 = v38 + 1;\n                                    v46 = v35 + v12 - 1;\n                                    if ((unsigned int)v40 >= 8)\n                                    {\n                                        *((long long *)v46) = *((long long *)&v5);\n                                        v40 = v58;\n                                        *((long long *)&((char *)v46)[v40 + -8]) = *((long long *)&(&v5)[v40 + -8]);\n                                        v12 = v46 + 8 & -8;\n                                        v48 = v46 - (v46 + 8 & -8);\n                                        v50 = (unsigned int)(v40 + v48) & -8;\n                                        if (v50 >= 8)\n                                        {\n                                            v53 = 0;\n                                            do\n                                            {\n                                                v54 = v53;\n                                                v53 = (unsigned int)v53 + 8;\n                                                *((long long *)(v12 + v54)) = *((long long *)&(&v5)[v54 + -1 * v48]);\n                                            }\n                                            while ((unsigned int)v53 < (v50 & -8));\n                                        }\n                                    }\n                                    else if (((char)v40 & 4) != 0)\n                                    {\n                                        *((int *)v46) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v46)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v40 != 0)\n                                    {\n                                        *((char *)v46) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v46)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v35;\n                                    v55 = *((long long *)(v12 + 8));\n                                }\n                                else\n                                {\n                                    v59 = v12;\n                                    v9 = &g_4059d1;\n                                    v10 = (tmp_10 == 0? &g_4059d1 : tmp_10);\n                                    free(NULL);\n                                    fclose(v59);\n                                }\n                            }\n                        }\n                        if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) && v35 != 0 && (unsigned int)v12 != 32 && v26 > 1 && (unsigned int)v12 != 35)\n                        {\n                            *((char **)(v12 + 8)) = &v55[1];\n                            v12 = *(v55);\n                        }\n                        if ((unsigned int)v12 == 35)\n                        {\n                            do\n                            {\n                                v56 = *((long long *)(v12 + 8));\n                                if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)))\n                                {\n                                    *((char **)(v12 + 8)) = &v56[1];\n                                    v57 = *(v56);\n                                    v58 = 1;\n                                }\n                                else\n                                {\n                                    v57 = __uflow(v12);\n                                    v58 = (char)(v57 != -1);\n                                }\n                            }\n                            while (v57 != 10 && v58 != 0);\n                        }\n                        if (v57 == -1 && (unsigned int)v12 == 35 || (unsigned int)v12 == -1 && *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || (unsigned int)v12 == -1 && *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || v26 <= 1 && (unsigned int)v12 != 32 && (unsigned int)v12 != 35)\n                        {\n                            v12 = v23;\n                            v10 = (tmp_10 == 0? &g_4059d1 : tmp_10);\n                            fclose(v60);\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_4059d1;\n                    }\n                    else if (...)\n                    {\n                        free(v16);\n                    }\n                }\n                else\n                {\n                    close(v21);\n                }\n            }\n            v9 = &g_4059d1;\n            free(v16);\n        }\n        *((char *[2])&g_6074d8[0]) = v9;\n    }\n    v64 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v65 = strcmp((tmp_10 == 0? &g_4059d1 : tmp_10), v9);\n            if (v65 != 0 && (v9[1] != 0 || v64 != 42))\n            {\n                v66 = strlen(v9);\n                v67 = &((char [2])&v9[v66])[1];\n                v68 = strlen(&((char [2])&v9[v66])[1]);\n                v9 = v67 + v68 + 1;\n                v64 = (char)*((char *)(v67 + v68 + 1));\n                if (v64 == 0)\n                {\n                    break;\n                }\n            }\n            if (v65 == 0 || v9[1] == 0 && v64 == 42)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_403880",
            "funcStartAddr": "0x403880",
            "funcEndAddr": "0x403893",
            "decompiledFuncCode": "int sub_403880()\n{\n}\n"
        },
        {
            "funcName": "sub_403550",
            "funcStartAddr": "0x403550",
            "funcEndAddr": "0x403561",
            "decompiledFuncCode": "int sub_403550()\n{\n}\n"
        },
        {
            "funcName": "sub_401e30",
            "funcStartAddr": "0x401e30",
            "funcEndAddr": "0x401e38",
            "decompiledFuncCode": "extern unsigned long long g_607390;\n\nint sub_401e30()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_607390 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4030a0",
            "funcStartAddr": "0x4030a0",
            "funcEndAddr": "0x40323f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_607218;\nextern uint128_t g_607220;\nextern unsigned int g_607230;\nextern int512_t g_6073a0;\n\nint sub_4030a0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v14;  // rax\n    unsigned long long v15;  // rax\n    uint128_t *v16;  // rbx\n    unsigned long long v17;  // rdx\n    unsigned long v18;  // rdx\n    unsigned long long v20[2];  // rbx\n    void *v21;  // r12\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    unsigned long long v25;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v16 = g_607218;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_607230 <= (unsigned int)v13)\n    {\n        if (g_607218 != 6320672)\n        {\n            v4 = v13 + 1;\n            v15 = sub_403f00();\n            v17 = v4;\n            g_607218 = v15;\n            v16 = v15;\n        }\n        else\n        {\n            v4 = v13 + 1;\n            v14 = sub_403f00();\n            v17 = v4;\n            v16 = v14;\n            g_607218 = v14;\n            *(v14) = g_607220;\n        }\n        v18 = (v17 - g_607230) * 16;\n        memset(&v16[(unsigned long long)g_607230], 0x0, v18);\n        g_607230 = (unsigned int)v13 + 1;\n    }\n    v20 = &v16[v13];\n    v21 = v20[1];\n    v6 = v9->field_4 | 1;\n    v2 = v9->field_30;\n    v1 = v9->field_28;\n    v0 = &v9->padding_8;\n    *((unsigned long long [2])&v4) = *(v20);\n    v22 = sub_402090();\n    if (v4 <= v22)\n    {\n        v23 = v22 + 1;\n        v20[0] = v22 + 1;\n        if (v21 != 6321056)\n        {\n            v4 = v23;\n            free(v21);\n            v23 = v4;\n        }\n        v4 = v23;\n        v20[1] = v21;\n        v21 = (unsigned long long)(unsigned int)sub_403eb0();\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = v8 + 8;\n        sub_402090();\n    }\n    *(v11) = v5;\n    v25 = v21;\n    return v25;\n}\n"
        },
        {
            "funcName": "sub_404070",
            "funcStartAddr": "0x404070",
            "funcEndAddr": "0x404098",
            "decompiledFuncCode": "int sub_404070()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_403eb0();\n}\n"
        },
        {
            "funcName": "sub_403240",
            "funcStartAddr": "0x403240",
            "funcEndAddr": "0x403274",
            "decompiledFuncCode": "int sub_403240()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_404070();\n}\n"
        },
        {
            "funcName": "sub_403730",
            "funcStartAddr": "0x403730",
            "funcEndAddr": "0x40373d",
            "decompiledFuncCode": "int sub_403730()\n{\n}\n"
        },
        {
            "funcName": "sub_403f40",
            "funcStartAddr": "0x403f40",
            "funcEndAddr": "0x403f53",
            "decompiledFuncCode": "int sub_403f40()\n{\n    void tmp_8;  // tmp #8\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long v4;  // rdx\n\n    v4 = v2 * v3 >> 64;\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>))\n    {\n        v0 = tmp_8;\n        sub_4040d0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_401c0b",
            "funcStartAddr": "0x401c0b",
            "funcEndAddr": "0x401c10",
            "decompiledFuncCode": "int sub_401c0b()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4038f0",
            "funcStartAddr": "0x4038f0",
            "funcEndAddr": "0x403906",
            "decompiledFuncCode": "int sub_4038f0()\n{\n}\n"
        },
        {
            "funcName": "sub_403290",
            "funcStartAddr": "0x403290",
            "funcEndAddr": "0x40329f",
            "decompiledFuncCode": "extern int512_t g_6074a0;\n\nint sub_403290()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6074a0 : v1)) = v2;\n    return &g_6074a0;\n}\n"
        },
        {
            "funcName": "sub_403d80",
            "funcStartAddr": "0x403d80",
            "funcEndAddr": "0x403e38",
            "decompiledFuncCode": "int sub_403d80()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_403910();\n    }\n}\n"
        },
        {
            "funcName": "sub_401b50",
            "funcStartAddr": "0x401b50",
            "funcEndAddr": "0x401ba6",
            "decompiledFuncCode": "extern unsigned int g_404a08;\nextern unsigned int g_404a68;\n\nint sub_401b50()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    void *v3;  // rdi\n\n    v0 = v2;\n    fprintf(v3, (unsigned long long)dcgettext(0x0, 0x404a08, 0x5));\n    dcgettext(0x0, 0x404a68, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4040a0",
            "funcStartAddr": "0x4040a0",
            "funcEndAddr": "0x4040ce",
            "decompiledFuncCode": "int sub_4040a0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n    sub_403eb0();\n}\n"
        },
        {
            "funcName": "sub_4049b8",
            "funcStartAddr": "0x4049b8",
            "funcEndAddr": "0x4049d8",
            "decompiledFuncCode": "extern unsigned long long g_606e30;\n\nint sub_4049b8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_606e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404050",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x404068",
            "decompiledFuncCode": "int sub_404050()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    v3 = calloc(v1, v2);\n    if (v3 != 0)\n    {\n        return v3;\n    }\n    sub_4040d0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403860",
            "funcStartAddr": "0x403860",
            "funcEndAddr": "0x403877",
            "decompiledFuncCode": "int sub_403860()\n{\n}\n"
        },
        {
            "funcName": "sub_403740",
            "funcStartAddr": "0x403740",
            "funcEndAddr": "0x403751",
            "decompiledFuncCode": "int sub_403740()\n{\n}\n"
        },
        {
            "funcName": "sub_401e40",
            "funcStartAddr": "0x401e40",
            "funcEndAddr": "0x401e48",
            "decompiledFuncCode": "extern char g_607388;\n\nint sub_401e40()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_607388 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4040d0",
            "funcStartAddr": "0x4040d0",
            "funcEndAddr": "0x4040fc",
            "decompiledFuncCode": "extern unsigned int g_405d2f;\nextern unsigned int g_6071d8;\n\nint sub_4040d0()\n{\n    dcgettext(0x0, 0x405d2f, 0x5);\n    error(g_6071d8, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_4035c0",
            "funcStartAddr": "0x4035c0",
            "funcEndAddr": "0x40362d",
            "decompiledFuncCode": "int sub_4035c0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4030a0();\n}\n"
        },
        {
            "funcName": "sub_401ef0",
            "funcStartAddr": "0x401ef0",
            "funcEndAddr": "0x401f89",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_607398;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_401ef0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_607398 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_401db0",
            "funcStartAddr": "0x401db0",
            "funcEndAddr": "0x401e2a",
            "decompiledFuncCode": "extern unsigned int g_404ba0;\nextern unsigned int g_404bad;\nextern unsigned int g_404bbc;\n\nint sub_401db0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v4;  // rbp\n\n    sub_404110();\n    v4 = dcgettext(0x0, 0x404bad, 0x5);\n    dcgettext(0x0, 0x404bbc, 0x5);\n    v1 = 0;\n    v0 = dcgettext(0x0, 0x404ba0, 0x5);\n    sub_403d80();\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_403d20",
            "funcStartAddr": "0x403d20",
            "funcEndAddr": "0x403d79",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_403d20()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_403910();\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_code.elf"
}