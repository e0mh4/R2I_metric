{
    "funcInfo": [
        {
            "funcName": "sub_404e40",
            "funcStartAddr": "0x404e40",
            "funcEndAddr": "0x404e58",
            "decompiledFuncCode": "int sub_404e40()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_404de0();\n}\n"
        },
        {
            "funcName": "sub_404e80",
            "funcStartAddr": "0x404e80",
            "funcEndAddr": "0x404e95",
            "decompiledFuncCode": "int sub_404e80()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_404810();\n}\n"
        },
        {
            "funcName": "sub_404110",
            "funcStartAddr": "0x404110",
            "funcEndAddr": "0x4041e5",
            "decompiledFuncCode": "int sub_404110()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_4032d0",
            "funcStartAddr": "0x4032d0",
            "funcEndAddr": "0x4032fb",
            "decompiledFuncCode": "extern char g_6093a0;\n\nint sub_4032d0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6093a0 : v2);\n    *((int *)(tmp_11? &g_6093a0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6093a0;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_6093a0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403ea0",
            "funcStartAddr": "0x403ea0",
            "funcEndAddr": "0x403ec1",
            "decompiledFuncCode": "int sub_403ea0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4040d0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403270",
            "funcStartAddr": "0x403270",
            "funcEndAddr": "0x4032a3",
            "decompiledFuncCode": "extern int512_t g_6093a0;\n\nint sub_403270()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6093a0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6093a0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_403680",
            "funcStartAddr": "0x403680",
            "funcEndAddr": "0x40368f",
            "decompiledFuncCode": "int sub_403680()\n{\n}\n"
        },
        {
            "funcName": "sub_4040fc",
            "funcStartAddr": "0x4040fc",
            "funcEndAddr": "0x404101",
            "decompiledFuncCode": "int sub_4040fc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403550",
            "funcStartAddr": "0x403550",
            "funcEndAddr": "0x403566",
            "decompiledFuncCode": "int sub_403550()\n{\n}\n"
        },
        {
            "funcName": "sub_403570",
            "funcStartAddr": "0x403570",
            "funcEndAddr": "0x403582",
            "decompiledFuncCode": "int sub_403570()\n{\n}\n"
        },
        {
            "funcName": "sub_403fe0",
            "funcStartAddr": "0x403fe0",
            "funcEndAddr": "0x40402a",
            "decompiledFuncCode": "int sub_403fe0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4018c0",
            "funcStartAddr": "0x4018c0",
            "funcEndAddr": "0x401bd5",
            "decompiledFuncCode": "extern unsigned int g_4057ec;\nextern unsigned int g_405858;\nextern unsigned int g_405880;\nextern unsigned int g_405928;\nextern unsigned int g_405968;\nextern unsigned int g_405998;\nextern unsigned int g_4059d0;\nextern unsigned int g_405ab8;\nextern unsigned int g_405b00;\nextern unsigned int g_405b20;\nextern unsigned long long stdout;\n\nint sub_4018c0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v26[2];  // rax\n    char *v27;  // rdi\n    char *v28;  // rsi\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v31;  // cc_dep2\n    unsigned long v32;  // d\n    char *v36;  // rax\n    char *v37;  // rax\n    unsigned long long v38;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x405858, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405880, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x405928, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x405968, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x405998, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4059d0, 0x5));\n        v0 = \"[\";\n        v26 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v26 = &v2;\n            v27 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v28 = \"printenv\";\n            v29 = 9;\n            if ((v30 > v31) - 0 - (v30 < v31) == 0)\n            {\n                break;\n            }\n            while (v29 != 0)\n            {\n                v29 -= 1;\n                v30 = *(v28);\n                v31 = *(v27);\n                v27 = &v27[v32];\n                v28 = &v28[v32];\n                break;\n            }\n        }\n        if (v26[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4057ec, 0x5));\n            v37 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4057ec, 0x5));\n            v36 = setlocale(0x5, 0x0);\n            if (v36 != 0)\n            {\n                v38 = strncmp(v36, \"en_\", 0x3);\n            }\n            if (v38 == 0 || v36 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405b00, 0x5));\n            }\n        }\n        if ((v26[1] == 0 || v37 != 0) && (v26[1] == 0 || strncmp(v37, \"en_\", 0x3) != 0) && (v38 != 0 || v26[1] != 0) && (v26[1] != 0 || v36 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405ab8, 0x5));\n        }\n        if (v26[1] != 0 || v38 != 0 && v36 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405b00, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405b20, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403e00",
            "funcStartAddr": "0x403e00",
            "funcEndAddr": "0x403e74",
            "decompiledFuncCode": "extern unsigned int g_406a52;\nextern unsigned int g_406a7d;\nextern unsigned int g_406cb0;\n\nint sub_403e00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406a52, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406a7d, 0x5));\n    dcgettext(0x0, 0x406cb0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_404810",
            "funcStartAddr": "0x404810",
            "funcEndAddr": "0x404d77",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_406e68;\nextern unsigned int g_406eac;\n\nint sub_404810()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long long *|char *[3] v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!(v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v17 == 0 || v0->field_18 == 0)\n        {\n            v0->field_30 = v17;\n            v0->field_2c = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v19 == 0 && v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_404110();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_404110();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_4041f0();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x406e68, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x406eac, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x406e68, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_4041f0();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_403600",
            "funcStartAddr": "0x403600",
            "funcEndAddr": "0x403669",
            "decompiledFuncCode": "int sub_403600()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403070();\n}\n"
        },
        {
            "funcName": "sub_401ca0",
            "funcStartAddr": "0x401ca0",
            "funcEndAddr": "0x401d39",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_609288;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_401ca0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_609288 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40368f",
            "funcStartAddr": "0x40368f",
            "funcEndAddr": "0x403700",
            "decompiledFuncCode": "extern uint128_t g_6093a0;\nextern uint128_t g_6093b0;\nextern uint128_t g_6093c0;\nextern unsigned long long g_6093d0;\n\nint sub_40368f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6093d0;\n    *((uint128_t *)&v0) = g_6093a0;\n    *((uint128_t *)&v1) = g_6093b0;\n    *((uint128_t *)&v2) = g_6093c0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_403070();\n}\n"
        },
        {
            "funcName": "sub_40339b",
            "funcStartAddr": "0x40339b",
            "funcEndAddr": "0x403461",
            "decompiledFuncCode": "int sub_40339b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_401e40();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_403e80();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_401e40();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404de0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x404e36",
            "decompiledFuncCode": "extern unsigned int g_609214;\nextern unsigned int g_609218;\nextern unsigned int g_60921c;\nextern unsigned int g_6093e0;\nextern unsigned int g_6093e4;\nextern unsigned int g_6093e8;\nextern unsigned long long g_6093f0;\nextern unsigned long long g_609420;\n\nint sub_404de0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_6093e0 = g_60921c;\n    g_6093e4 = g_609218;\n    v1 = (unsigned int)v2;\n    v0 = &g_6093e0;\n    g_60921c = g_6093e0;\n    g_609420 = g_6093f0;\n    g_609214 = g_6093e8;\n    return sub_404810();\n}\n"
        },
        {
            "funcName": "sub_403710",
            "funcStartAddr": "0x403710",
            "funcEndAddr": "0x403721",
            "decompiledFuncCode": "int sub_403710()\n{\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x405608",
            "decompiledFuncCode": "int sub_405590()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_405610() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404ec0",
            "funcStartAddr": "0x404ec0",
            "funcEndAddr": "0x404ed8",
            "decompiledFuncCode": "int sub_404ec0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_404810();\n}\n"
        },
        {
            "funcName": "sub_404fc0",
            "funcStartAddr": "0x404fc0",
            "funcEndAddr": "0x405016",
            "decompiledFuncCode": "int sub_404fc0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404ee0",
            "funcStartAddr": "0x404ee0",
            "funcEndAddr": "0x404f4f",
            "decompiledFuncCode": "extern unsigned long long g_406ec7;\n\nint sub_404ee0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_406ec7;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_404fc0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x40564b",
            "decompiledFuncCode": "int sub_405610()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_405650();\n    }\n}\n"
        },
        {
            "funcName": "sub_403540",
            "funcStartAddr": "0x403540",
            "funcEndAddr": "0x40354a",
            "decompiledFuncCode": "int sub_403540()\n{\n}\n"
        },
        {
            "funcName": "sub_403470",
            "funcStartAddr": "0x403470",
            "funcEndAddr": "0x40347a",
            "decompiledFuncCode": "int sub_403470()\n{\n}\n"
        },
        {
            "funcName": "sub_403730",
            "funcStartAddr": "0x403730",
            "funcEndAddr": "0x40373a",
            "decompiledFuncCode": "int sub_403730()\n{\n}\n"
        },
        {
            "funcName": "sub_4038e0",
            "funcStartAddr": "0x4038e0",
            "funcEndAddr": "0x403c89",
            "decompiledFuncCode": "extern unsigned int g_406a0b;\nextern unsigned int g_406a0f;\nextern unsigned int g_406a1f;\nextern unsigned int g_406a36;\nextern unsigned int g_406a98;\nextern unsigned int g_406b68;\nextern unsigned int g_406b88;\nextern unsigned int g_406bb0;\nextern unsigned int g_406bd8;\nextern unsigned int g_406c08;\n\nint sub_4038e0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x406a0b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x406a98, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x406a0f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x406a1f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x406a36, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x406b68, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x406b88, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x406bb0, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x406bd8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x406c08, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_403520",
            "funcStartAddr": "0x403520",
            "funcEndAddr": "0x403531",
            "decompiledFuncCode": "int sub_403520()\n{\n}\n"
        },
        {
            "funcName": "sub_404050",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x40407e",
            "decompiledFuncCode": "int sub_404050()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4040d0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4038a0",
            "funcStartAddr": "0x4038a0",
            "funcEndAddr": "0x4038b1",
            "decompiledFuncCode": "int sub_4038a0()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x4015e0",
            "funcEndAddr": "0x4017ce",
            "decompiledFuncCode": "extern unsigned long long __environ;\nextern unsigned int g_405807;\nextern unsigned int g_405b58;\nextern unsigned int g_406ec7;\nextern unsigned int g_6091b8;\nextern unsigned int g_60921c;\n\nint main()\n{\n    void tmp_14;  // tmp #14\n    unsigned long long v0;  // [bp-0x48]\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v4;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long v8;  // rdi\n    unsigned long long v10;  // r12\n    unsigned long long *v11;  // rbx\n    unsigned int v12;  // ebp\n    unsigned long long v15;  // rax\n    unsigned long long *v16;  // r15\n    unsigned long long|unsigned int v17;  // r8d\n    char v18[2];  // rcx\n    char *v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rsi\n    unsigned long long v22;  // rax\n    unsigned long long *v23;  // r14\n    unsigned long long v24;  // rdx\n    unsigned int v26;  // al\n    unsigned long long v27;  // rax\n\n    v2 = 0;\n    v4 = v3;\n    sub_401ca0();\n    setlocale(0x6, 0x406ec7);\n    bindtextdomain(0x405807, 0x405b58);\n    textdomain(0x405807);\n    g_6091b8 = 2;\n    sub_405720();\n    while (true)\n    {\n        v7 = sub_404e60();\n        if (v7 == -1)\n        {\n            v23 = (long long)(int)g_60921c;\n            if (g_60921c >= (unsigned int)v8)\n            {\n                v11 = __environ;\n                v12 = 0 - (unsigned int)(char)(v2 < 1) & 10;\n                while (true)\n                {\n                    v24 = *(v11);\n                    if (*(v11) == 0)\n                    {\n                        break;\n                    }\n                    __printf_chk(0x1, \"%s%c\", v24, v12);\n                    v11 = &v11[1];\n                }\n                v26 = 1;\n            }\n            else\n            {\n                v10 = 0;\n                do\n                {\n                    v15 = strchr(*((long long *)((char *)v4 + 0x8 * v23)), 0x3d);\n                    if (v15 == 0)\n                    {\n                        v16 = __environ;\n                        v17 = 0;\n                        while (true)\n                        {\n                            v18 = *(v16);\n                            if (*(v16) == 0)\n                            {\n                                break;\n                            }\n                            v19 = *((long long *)((char *)v4 + 0x8 * v23));\n                            for (v20 = v18[0]; v20 != 0; v16 = &v16[1])\n                            {\n                                v21 = *(v19);\n                                if (*(v19) == 0)\n                                {\n                                    break;\n                                }\n                                while (true)\n                                {\n                                    v19 = &v19[1];\n                                    if (v21 != v20)\n                                    {\n                                        break;\n                                    }\n                                    v20 = v18[1];\n                                    if (v18[1] == 61)\n                                    {\n                                        if (*(v19) != 0)\n                                        {\n                                            v21 = *(v19);\n                                            if (*(v19) == 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v22 = __printf_chk(0x1, \"%s%c\", (unsigned int)v18 + 2, 0 - (unsigned int)(char)((tmp_14 & 255) < 1) & 10);\n                                            v17 = 1;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        v10 = 0 + v17;\n                    }\n                    v23 = (char *)v23 + 1;\n                }\n                while ((unsigned int)v8 > (unsigned int)v23);\n                v26 = (char)((unsigned int)v8 - g_60921c == v10);\n            }\n        }\n        else if (v7 != -130)\n        {\n            v2 = 1;\n            if (v7 != -131)\n            {\n                sub_4018c0(); /* do not return */\n            }\n            v0 = 0;\n            sub_403d40();\n            exit(0x0); /* do not return */\n        }\n        else\n        {\n            sub_4018c0(); /* do not return */\n        }\n    }\n    v27 = v26 ^ 1;\n    return v27;\n}\n"
        },
        {
            "funcName": "sub_4018b8",
            "funcStartAddr": "0x4018b8",
            "funcEndAddr": "0x4018f4",
            "decompiledFuncCode": "int sub_4018b8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x4032c3",
            "decompiledFuncCode": "extern int512_t g_6093a0;\n\nint sub_4032b0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6093a0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6093a0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40180b",
            "funcStartAddr": "0x40180b",
            "funcEndAddr": "0x40182a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_40180b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403700",
            "funcStartAddr": "0x403700",
            "funcEndAddr": "0x40370d",
            "decompiledFuncCode": "int sub_403700()\n{\n}\n"
        },
        {
            "funcName": "sub_403cc0",
            "funcStartAddr": "0x403cc0",
            "funcEndAddr": "0x403ce0",
            "decompiledFuncCode": "int sub_403cc0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_403210",
            "funcStartAddr": "0x403210",
            "funcEndAddr": "0x403244",
            "decompiledFuncCode": "int sub_403210()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_404080();\n}\n"
        },
        {
            "funcName": "sub_405738",
            "funcStartAddr": "0x405738",
            "funcEndAddr": "0x405758",
            "decompiledFuncCode": "extern unsigned long long g_608e30;\n\nint sub_405738()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_608e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403850",
            "funcStartAddr": "0x403850",
            "funcEndAddr": "0x403863",
            "decompiledFuncCode": "int sub_403850()\n{\n}\n"
        },
        {
            "funcName": "sub_403ee0",
            "funcStartAddr": "0x403ee0",
            "funcEndAddr": "0x403f10",
            "decompiledFuncCode": "int sub_403ee0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4040d0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404ea0",
            "funcStartAddr": "0x404ea0",
            "funcEndAddr": "0x404eb6",
            "decompiledFuncCode": "int sub_404ea0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_404de0();\n}\n"
        },
        {
            "funcName": "sub_405020",
            "funcStartAddr": "0x405020",
            "funcEndAddr": "0x405574",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_406ec7;\nextern char g_609418[2];\n\nint sub_405020()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_609418;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_406ec7 : (unsigned long long)nl_langinfo(0xe));\n    if (g_609418 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_406ec7;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v63 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v63;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_406ec7;\n                                        v10 = (tmp_10 == 0? &g_406ec7 : tmp_10);\n                                        free(NULL);\n                                        sub_405590();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v62 = (unsigned int)*(v62);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)((unsigned int)v62 != -1);\n                                    }\n                                }\n                                while (v63 != 0 && v62 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_406ec7 : tmp_10);\n                            sub_405590();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1)\n                    {\n                        v9 = &g_406ec7;\n                    }\n                    else if (((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1) && v0 != 0 || ((unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v0 != 0 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v0 == 0) && v38 == 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_406ec7;\n            free(v17);\n        }\n        *((char *[2])&g_609418[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_406ec7 : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_403250",
            "funcStartAddr": "0x403250",
            "funcEndAddr": "0x40325f",
            "decompiledFuncCode": "extern int512_t g_6093a0;\n\nint sub_403250()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6093a0 : v1));\n}\n"
        },
        {
            "funcName": "sub_403820",
            "funcStartAddr": "0x403820",
            "funcEndAddr": "0x403829",
            "decompiledFuncCode": "int sub_403820()\n{\n}\n"
        },
        {
            "funcName": "sub_403070",
            "funcStartAddr": "0x403070",
            "funcEndAddr": "0x403210",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6091f8;\nextern uint128_t g_609200;\nextern unsigned int g_609210;\nextern int512_t g_6092a0;\n\nint sub_403070()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_6091f8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_609210 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_6091f8 != 0x609200)\n            {\n                v16 = sub_403ee0();\n                g_6091f8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_403ee0();\n                v17 = v15;\n                g_6091f8 = v15;\n                *(v15) = g_609200;\n            }\n            memset(&v17[(long long)(int)g_609210], 0x0, (int)((unsigned int)v13 + 1 - g_609210) * 16);\n            g_609210 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4040d0(); /* do not return */\n        }\n    }\n    if (g_609210 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_401e40();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6328992)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_403e80();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_401e40();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_403372",
            "funcStartAddr": "0x403372",
            "funcEndAddr": "0x40339b",
            "decompiledFuncCode": "int sub_403372()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_4040b0",
            "funcStartAddr": "0x4040b0",
            "funcEndAddr": "0x4040c3",
            "decompiledFuncCode": "int sub_4040b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_403d40",
            "funcStartAddr": "0x403d40",
            "funcEndAddr": "0x403df8",
            "decompiledFuncCode": "int sub_403d40()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4038e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_403f50",
            "funcStartAddr": "0x403f50",
            "funcEndAddr": "0x403fc8",
            "decompiledFuncCode": "int sub_403f50() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403830",
            "funcStartAddr": "0x403830",
            "funcEndAddr": "0x403847",
            "decompiledFuncCode": "int sub_403830()\n{\n}\n"
        },
        {
            "funcName": "sub_404f60",
            "funcStartAddr": "0x404f60",
            "funcEndAddr": "0x404fbc",
            "decompiledFuncCode": "int sub_404f60()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_405590();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4037b0",
            "funcStartAddr": "0x4037b0",
            "funcEndAddr": "0x40381c",
            "decompiledFuncCode": "extern uint128_t g_6093a0;\nextern uint128_t g_6093b0;\nextern uint128_t g_6093c0;\nextern unsigned long long g_6093d0;\n\nint sub_4037b0()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6093a0;\n    *((uint128_t *)&v1) = g_6093b0;\n    *((uint128_t *)&v2) = g_6093c0;\n    v4 = g_6093d0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_403070();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403870",
            "funcStartAddr": "0x403870",
            "funcEndAddr": "0x40387a",
            "decompiledFuncCode": "int sub_403870()\n{\n}\n"
        },
        {
            "funcName": "sub_401be0",
            "funcStartAddr": "0x401be0",
            "funcEndAddr": "0x401be8",
            "decompiledFuncCode": "extern unsigned long long g_609280;\n\nint sub_401be0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_609280 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x405738",
            "decompiledFuncCode": "extern int512_t g_6091a8;\n\nint sub_405720()\n{\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056a6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_405650()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_403880",
            "funcStartAddr": "0x403880",
            "funcEndAddr": "0x403892",
            "decompiledFuncCode": "int sub_403880()\n{\n}\n"
        },
        {
            "funcName": "sub_401e40",
            "funcStartAddr": "0x401e40",
            "funcEndAddr": "0x402f78",
            "decompiledFuncCode": "int sub_401e40()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long|unsigned long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rbp\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r8\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // r11\n    unsigned long long|unsigned long v41;  // rbp\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    char v44;  // al\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rcx\n    unsigned long long|unsigned short|unsigned long v47;  // rax\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rdx\n    unsigned long long v50;  // rbx\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbp\n    unsigned long long v53;  // r14\n    char *v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // r13\n    unsigned long long v58;  // rcx\n    char v59;  // al\n    char v60;  // al\n    unsigned int v61;  // eax\n    char v62;  // al\n    unsigned int v64;  // eax\n    char v65;  // al\n    unsigned long v66;  // rdx\n    unsigned long long v67;  // rax\n    char v68;  // al\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rbx\n    unsigned long long|unsigned int|char v71;  // rsi\n    unsigned long long|char v72;  // r13\n    unsigned long long v73;  // r14\n    unsigned long long v74;  // r12\n    unsigned int v75;  // r13d\n    unsigned long long v76;  // r11\n    char v77;  // dl\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // dl\n    unsigned long long v81;  // rax\n    unsigned long long v82;  // rax\n    unsigned long long v83;  // rdx\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // rax\n\n    v29 = v28;\n    v73 = v71;\n    v72 = v30;\n    v7 = v71;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v71 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v70 = 1;\n                v72 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v78 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v71 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v70 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_401d40();\n            v27 = (unsigned long long)(unsigned int)sub_401d40();\n        }\n        v70 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v34 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v71 > v70)\n                    {\n                        *((unsigned long long *)(v28 + v70)) = v34;\n                    }\n                    v70 += 1;\n                    v34 = (char)*((char *)(v26 + v70));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        v5 = v76;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v76 = v4;\n    while (true)\n    {\n        v39 = v76;\n        v74 = 0;\n        v40 = v72;\n        while (true)\n        {\n            v72 = (char)(v39 != v74);\n            if (v39 == -1)\n            {\n                v72 = (char)(*((char *)(v7 + v74)) != 0);\n            }\n            if (v72 != 0)\n            {\n                v38 = v7 + v74;\n                v5 = (unsigned int)v40 != 2 & v4;\n                if (((unsigned int)v40 != 2 & v4) != 0)\n                {\n                    v35 = v8;\n                    if (v8 != 0)\n                    {\n                        v36 = v74 + v35;\n                        if (v39 == -1 && v35 > 1)\n                        {\n                            v11 = v40;\n                            v10 = v33;\n                            v9 = v38;\n                            v39 = strlen(v7);\n                        }\n                        if (v36 <= v39)\n                        {\n                            v12 = v40;\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v38;\n                            v37 = memcmp(v38, v13, v8);\n                            v38 = v9;\n                            v33 = (char)v10;\n                            v39 = v11;\n                            v40 = v12;\n                            if (v37 == 0 && v17 == 0)\n                            {\n                                v41 = (char)*((char *)v38);\n                                switch (*((char *)v38))\n                                {\n                                case 0:\n                                    v71 = (char)((unsigned int)v40 == 2);\n                                    v72 = (unsigned int)(0 ^ 1);\n                                    v72 = (char)(0 ^ 1) & (unsigned int)v40 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0)\n                                    {\n                                        if (v71 > v70)\n                                        {\n                                            *((char *)(v28 + v70)) = 39;\n                                        }\n                                        if (v71 > v70 + 1)\n                                        {\n                                            *((char *)(v28 + v70 + 1)) = 36;\n                                        }\n                                        if (v71 > v70 + 2)\n                                        {\n                                            *((char *)(v28 + v70 + 2)) = 39;\n                                        }\n                                        v48 = v70 + 3;\n                                        v70 += 4;\n                                        v33 = rax<8>;\n                                        v72 = 0;\n                                        v41 = 48;\n                                    }\n                                    else\n                                    {\n                                        v48 = v70;\n                                        v72 = 0;\n                                        v70 = v48 + 1;\n                                        v72 = (unsigned int)v72;\n                                        v41 = 48;\n                                        v72 = 0;\n                                        v41 = 48;\n                                        if (1 < v39)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v71 > v70)\n                                                {\n                                                    *((char *)(v28 + v70)) = 48;\n                                                }\n                                                if (v71 > v48 + 2)\n                                                {\n                                                    *((char *)(v28 + v48 + 2)) = 48;\n                                                }\n                                                v70 = v48 + 3;\n                                                v41 = 48;\n                                            }\n                                        }\n                                        v72 = v72;\n                                        v72 = 0;\n                                    }\n                                    if ((v71 > v70 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) == 0 || v71 > v70 + 3))\n                                    {\n                                        *((char *)(v28 + v48)) = 92;\n                                        v33 = v72;\n                                    }\n                                case 7:\n                                    v41 = 97;\n                                case 8:\n                                    v71 = 0;\n                                    v72 = 0;\n                                    v41 = 98;\n                                case 13:\n                                    v41 = 13;\n                                    v46 = 114;\n                                    v71 = (unsigned int)v40 == 2;\n                                case 32:\n                                    v42 = v5;\n                                    v41 = 32;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v71 = 0;\n                                    v72 = 0;\n                                case 35: case 126:\n                                    v43 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v42 = v5;\n                                    v72 = v5;\n                                    v5 = v42;\n                                    v72 = 0;\n                                case 92:\n                                    v45 = v4;\n                                    v41 = 92;\n                                    v46 = 92;\n                                    v71 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v74 = 1;\n                                        v47 = 0;\n                                        v72 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v36 > v39 || v37 != 0)\n                    {\n                        v41 = (char)*((char *)v38);\n                        switch (*((char *)v38))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v40 == 2;\n                            }\n                        case 7:\n                            v41 = 97;\n                            break;\n                        case 8:\n                            v41 = 98;\n                        case 9:\n                            v41 = 116;\n                        case 10:\n                            v41 = 110;\n                            v71 = 0;\n                            v72 = 0;\n                        case 11:\n                            v41 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v72 = 0;\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 92;\n                                }\n                                v70 += 1;\n                                v74 += 1;\n                            }\n                            else\n                            {\n                                v81 = 0;\n                                *((unsigned long long *)&v4) = v4 & v81;\n                            }\n                        case 12:\n                            v41 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v42 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v43 = 0;\n                            v72 = v5;\n                            v71 = 0;\n                            v5 = v43;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v42 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v41 = (char)*((char *)v38);\n                    switch (*((char *)v38))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            v41 = 0;\n                            break;\n                            v74 += 1;\n                        }\n                    case 7:\n                        v41 = 7;\n                        v46 = 97;\n                        v71 = (unsigned int)v40 == 2;\n                    case 8:\n                        v41 = 8;\n                        v46 = 98;\n                        v71 = (unsigned int)v40 == 2;\n                        if (v4 != 0)\n                        {\n                            v41 = v46;\n                            v72 = 0;\n                        }\n                    case 9:\n                        v41 = 9;\n                        v46 = 116;\n                        v71 = (unsigned int)v40 == 2;\n                        v5 = v17 & (unsigned int)v40 == 2;\n                    case 10:\n                        v41 = 10;\n                        v46 = 110;\n                    case 11:\n                        v41 = 11;\n                        v46 = 118;\n                        v71 = (unsigned int)v40 == 2;\n                    case 12:\n                        v41 = 12;\n                        v46 = 102;\n                        v71 = (unsigned int)v40 == 2;\n                    case 13:\n                        v41 = 13;\n                        v46 = 114;\n                    case 32:\n                        v41 = 32;\n                        v71 = (char)((unsigned int)v40 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        v72 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v71 = (unsigned int)v40 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            if (v71 != 0)\n                            {\n                                v49 = 0;\n                            }\n                            if (v71 == 0 || v14 != 0)\n                            {\n                                if (v71 > v70)\n                                {\n                                    *((char *)(v28 + v70)) = 39;\n                                }\n                                if (v71 > v70 + 1)\n                                {\n                                    *((char *)(v28 + v70 + 1)) = 92;\n                                }\n                                if (v71 > v70 + 2)\n                                {\n                                    v49 = v71;\n                                    *((char *)(v28 + v70 + 2)) = 39;\n                                    v73 = v14;\n                                }\n                                else\n                                {\n                                    v49 = v71;\n                                    v73 = v14;\n                                }\n                            }\n                            v18 = v72;\n                            v70 += 3;\n                            v72 = 0;\n                            v33 = 0;\n                            v14 = v73;\n                            v41 = 39;\n                            v73 = v49;\n                        }\n                        else\n                        {\n                            v18 = v72;\n                            v71 = 0;\n                            v41 = 39;\n                            break;\n                            v72 = ((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1;\n                            v72 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) | v17;\n                            v72 = 0;\n                            v66 = (unsigned int)((unsigned long long)v25[v41 % 32] >> ((char)v41 & 31)) & 1;\n                            v71 = (unsigned int)v40 == 2;\n                        }\n                        if (v17 == 0)\n                        {\n                            v71 = (unsigned int)v40 == 2;\n                            v74 += 1;\n                            v47 = (v72 ^ 1) & (unsigned int)v33;\n                            if (v47 != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 39;\n                                }\n                                v70 += 2;\n                                v33 = 0;\n                            }\n                            v67 = (unsigned int)v33 ^ 1;\n                            v68 = (char)((unsigned int)v33 ^ 1) & v71;\n                            if (((char)((unsigned int)v33 ^ 1) & v71) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v70 + 1 < v73)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v69 = v70 + 2;\n                                if (v70 + 2 < v73)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = rax<8>;\n                            }\n                        }\n                    case 63:\n                        if ((unsigned int)v40 != 2)\n                        {\n                            v41 = 63;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            break;\n                            v71 = v7;\n                            v41 = (char)*((char *)(v71 + 2));\n                            v71 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v71 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                            break;\n                            if (v73 > v70)\n                            {\n                                *((char *)(v28 + v70)) = 63;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v28 + v70 + 1)) = 34;\n                            }\n                            if (v73 > v70 + 2)\n                            {\n                                *((char *)(v28 + v70 + 2)) = 34;\n                            }\n                            if (v73 > v70 + 3)\n                            {\n                                *((char *)(v28 + v70 + 3)) = 63;\n                            }\n                            v70 += 4;\n                            v71 = 0;\n                            v72 = 0;\n                            v74 = 2;\n                        }\n                        else\n                        {\n                            v72 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            v74 += 1;\n                            v47 = v33;\n                            v72 = 0;\n                            v41 = 92;\n                        }\n                    case 123: case 125:\n                        v44 = v39 != 1;\n                        if (v39 == -1)\n                        {\n                            v44 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v71 = (unsigned int)v40 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v75 = v40;\n                v76 = v39;\n                v77 = v75 == 2;\n                if ((v75 == 2 & v17) == 0 || v70 != 0)\n                {\n                    v78 = (unsigned int)v17 ^ 1;\n                    v79 = v77 & (char)((unsigned int)v17 ^ 1);\n                    v80 = v77 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v79 == 0)\n                    {\n                        v80 = v78;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v78 = v73 == 0 & v14 != 0;\n                            if ((v73 == 0 & v14 != 0) == 0)\n                            {\n                                v80 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v70 = (unsigned int)sub_401e40();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v72 == 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0)\n            {\n                v82 = v13;\n                if (v13 != 0 && v80 != 0)\n                {\n                    v83 = (char)*((char *)v82);\n                    if (*((char *)v82) != 0)\n                    {\n                        v84 = v82 - v70;\n                        do\n                        {\n                            if (v73 > v70)\n                            {\n                                *((unsigned long long *)(v29 + v70)) = v83;\n                            }\n                            v70 += 1;\n                            v83 = (char)*((char *)(v84 + v70));\n                        }\n                        while ((char)v83 != 0);\n                    }\n                }\n                if (v73 > v70)\n                {\n                    *((char *)(v29 + v70)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v40;\n                v10 = v39;\n                v9 = v33;\n                v47 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v41 * 2));\n                tmp_38 = v47 & 0x4000;\n                v47 &= 0x4000;\n                v72 = (tmp_38 & 65535) != 0;\n                v71 = (tmp_38 & 65535) == 0 & v4;\n                if (v71 != 0)\n                {\n                    v71 = v4;\n                    v72 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v39 == -1)\n                {\n                    v11 = v40;\n                    v10 = v33;\n                    v9 = v38;\n                    v39 = strlen(v7);\n                }\n                v21 = v70;\n                v22 = v38;\n                v50 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v41;\n                v11 = v29;\n                v12 = v73;\n                v9 = v39;\n                v10 = v40;\n                do\n                {\n                    v51 = v74 + v50;\n                    v52 = v7 + v74 + v50;\n                    v47 = sub_404ee0();\n                    v53 = v47;\n                    if (v47 != -2 && v47 != 0 && v47 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v47 != 1)\n                        {\n                            v54 = v7 + v71 + 1;\n                            v71 = v7 + v53 + v71;\n                            while (true)\n                            {\n                                v55 = (unsigned int)*(v54) - 91;\n                                if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                                {\n                                    v54 = &v54[1];\n                                    if (v71 == v54)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                            {\n                                v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v50 += v53;\n                                v47 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v50 += v53;\n                        v47 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v47 == -1)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v72 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = v4;\n                    }\n                    if (v47 == -2)\n                    {\n                        v39 = v9;\n                        v71 = v51;\n                        v47 = v50;\n                        v28 = v50;\n                        v33 = (char)v19;\n                        v41 = v20;\n                        v70 = v21;\n                        v29 = v11;\n                        v73 = v12;\n                        v40 = (unsigned int)v10;\n                        if (v71 < v9 && *((char *)v52) != 0)\n                        {\n                            do\n                            {\n                                v47 += 1;\n                            }\n                            while (v47 < v9 && *((char *)(v22 + v47)) != 0);\n                            v28 = v47;\n                        }\n                        v71 = v4;\n                        v72 = 0;\n                    }\n                    if (v47 == 0 || v47 != -2 && v47 != -1 && (unsigned int)v47 != 0)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v71 = (unsigned int)v72 ^ 1;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = (char)((unsigned int)v72 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v47 == -2 || v47 == 0 || v47 == -1 || (unsigned int)v47 != 0)\n                {\n                    v9 = v72;\n                    v71 = 0;\n                    v57 = v17;\n                    v58 = v28 + v74;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v43;\n                v72 = 0;\n                v81 = v71;\n            }\n            if (v15 != 1 || v71 != 0)\n            {\n                v9 = v72;\n                v71 = 0;\n                v57 = v17;\n                v58 = v28 + v74;\n                v28 = v5;\n                while (true)\n                {\n                    if (v71 != 0)\n                    {\n                        v59 = (unsigned int)v40 == 2;\n                        if (v57 == 0)\n                        {\n                            v71 = (unsigned int)v33 ^ 1;\n                            v60 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v71 = v70 + 2;\n                                if (v73 > v70 + 2)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = v47;\n                            }\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                v61 = v41;\n                                v62 = (char)v41 % 64;\n                                *((unsigned long long *)(v29 + v70 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v47 = v70 + 2;\n                            if (v73 > v70 + 2)\n                            {\n                                v64 = v41;\n                                v65 = (char)v41 % 8;\n                                v47 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v70 + 2)) = v47;\n                            }\n                            v74 += 1;\n                            v70 += 3;\n                            v41 = ((unsigned int)v41 & 7) + 48;\n                            if (v74 < v58)\n                            {\n                                v71 = v71;\n                            }\n                            else\n                            {\n                                v72 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v59;\n                        }\n                    }\n                    else\n                    {\n                        v47 = (v71 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                        }\n                        v74 += 1;\n                        if (v74 >= v58)\n                        {\n                            v72 = (char)v9;\n                        }\n                        else if (v47 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 39;\n                            }\n                            v47 = v70 + 1;\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v29 + v70 + 1)) = 39;\n                            }\n                            v70 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v74 < v58 || v71 == 0) && (v71 == 0 || v57 == 0) && (v74 < v58 || v71 != 0))\n                    {\n                        if (v73 > v70)\n                        {\n                            *((unsigned long long *)(v29 + v70)) = v41;\n                        }\n                        v41 = (char)*((char *)(v7 + v74));\n                        v70 += 1;\n                    }\n                }\n            }\n            if ((v72 == 0 || v17 != 0) && (v70 == 0 || v17 != 0) && (v17 != 0 || (v75 == 2 & v17) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v70 = (unsigned int)sub_401e40();\n            }\n            if (v17 == 0 && v5 == 0 && ((unsigned int)v40 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) == 0) || v17 == 0 || (v15 != 1 || v71 != 0) && v47 == 0)\n            {\n                if (v70 < v73)\n                {\n                    *((unsigned long long *)(v29 + v70)) = v41;\n                }\n                v70 += 1;\n                v6 = (v72 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v72 == 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0 || (v72 == 0 || v17 != 0) && (v70 == 0 || v17 != 0) && (v17 != 0 || (v75 == 2 & v17) != 0) || v72 == 0 && v6 != 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0))\n            {\n                v85 = v70;\n                return v85;\n            }\n        }\n        *((char *)v29) = 39;\n        v72 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v78;\n    }\n}\n"
        },
        {
            "funcName": "sub_401bf0",
            "funcStartAddr": "0x401bf0",
            "funcEndAddr": "0x401bf8",
            "decompiledFuncCode": "extern char g_609278;\n\nint sub_401bf0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_609278 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_401861",
            "funcStartAddr": "0x401861",
            "funcEndAddr": "0x4018b8",
            "decompiledFuncCode": "extern char g_609268;\nextern unsigned long long g_609270;\n\nint sub_401861()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_609268 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_609270 >= 0)\n            {\n                break;\n            }\n            g_609270 = g_609270 + 1;\n            *((long long *)(6327872 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_609268 = 1;\n        return sub_40180b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_401c00",
            "funcStartAddr": "0x401c00",
            "funcEndAddr": "0x401c9e",
            "decompiledFuncCode": "extern unsigned int g_405c65;\nextern unsigned int g_6091b8;\nextern char g_609278;\nextern unsigned long long g_609280;\n\nint sub_401c00()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_404f60();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_609278 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x405c65, 0x5);\n            if (g_609280 != 0)\n            {\n                sub_403710();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_609278 != 0)\n    {\n        v3 = sub_404f60();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_609278 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6091b8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_403ce0",
            "funcStartAddr": "0x403ce0",
            "funcEndAddr": "0x403d39",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_403ce0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4038e0();\n}\n"
        },
        {
            "funcName": "sub_403670",
            "funcStartAddr": "0x403670",
            "funcEndAddr": "0x40367c",
            "decompiledFuncCode": "int sub_403670()\n{\n}\n"
        },
        {
            "funcName": "sub_403740",
            "funcStartAddr": "0x403740",
            "funcEndAddr": "0x4037b3",
            "decompiledFuncCode": "int sub_403740()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403070();\n}\n"
        },
        {
            "funcName": "sub_401d40",
            "funcStartAddr": "0x401d40",
            "funcEndAddr": "0x401e1f",
            "decompiledFuncCode": "extern int512_t g_405cbe;\nextern int512_t g_405cc2;\n\nint sub_401d40()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_405020();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_405cbe : 4218057);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_405cc2 : 4218053);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_404080",
            "funcStartAddr": "0x404080",
            "funcEndAddr": "0x4040a8",
            "decompiledFuncCode": "int sub_404080()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_403e80();\n}\n"
        },
        {
            "funcName": "sub_404030",
            "funcStartAddr": "0x404030",
            "funcEndAddr": "0x404047",
            "decompiledFuncCode": "int sub_404030()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_403e80();\n}\n"
        },
        {
            "funcName": "sub_403480",
            "funcStartAddr": "0x403480",
            "funcEndAddr": "0x403515",
            "decompiledFuncCode": "extern struct_0 *g_6091f8;\nextern unsigned long long g_609200;\nextern unsigned long long g_609208;\nextern unsigned int g_609210;\nextern unsigned long long g_6092a0;\n\nint sub_403480()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_609210;\n    if (g_609210 > 1)\n    {\n        v2 = &g_6091f8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6091f8[(unsigned long long)(g_609210 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_6091f8->field_8 != 6328992)\n    {\n        v1 = free(g_6091f8->field_8);\n        g_609200 = 0x100;\n        g_609208 = &g_6092a0;\n    }\n    if (g_6091f8 != 0x609200)\n    {\n        v1 = free(g_6091f8);\n        g_6091f8 = &g_609200;\n    }\n    g_609210 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403ed0",
            "funcStartAddr": "0x403ed0",
            "funcEndAddr": "0x403ed2",
            "decompiledFuncCode": "int sub_403ed0()\n{\n}\n"
        },
        {
            "funcName": "sub_403f20",
            "funcStartAddr": "0x403f20",
            "funcEndAddr": "0x403f41",
            "decompiledFuncCode": "int sub_403f20()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4040d0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403590",
            "funcStartAddr": "0x403590",
            "funcEndAddr": "0x4035fd",
            "decompiledFuncCode": "int sub_403590()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403070();\n}\n"
        },
        {
            "funcName": "sub_404e60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404e73",
            "decompiledFuncCode": "int sub_404e60()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_404de0();\n}\n"
        },
        {
            "funcName": "sub_4041f0",
            "funcStartAddr": "0x4041f0",
            "funcEndAddr": "0x4047ee",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_406da0;\nextern unsigned int g_406dc0;\nextern unsigned int g_406df0;\nextern unsigned int g_406e10;\nextern unsigned int g_406e40;\nextern unsigned long long stderr;\n\nint sub_4041f0()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x406da0, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x406dc0, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x406e40, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x406e10, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x406df0, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_403300",
            "funcStartAddr": "0x403300",
            "funcEndAddr": "0x403372",
            "decompiledFuncCode": "extern int512_t g_6093a0;\n\nint sub_403300()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6093a0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_401e40();\n}\n"
        },
        {
            "funcName": "sub_403260",
            "funcStartAddr": "0x403260",
            "funcEndAddr": "0x40326f",
            "decompiledFuncCode": "extern int512_t g_6093a0;\n\nint sub_403260()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6093a0 : v1)) = v2;\n    return &g_6093a0;\n}\n"
        },
        {
            "funcName": "sub_403e80",
            "funcStartAddr": "0x403e80",
            "funcEndAddr": "0x403e9a",
            "decompiledFuncCode": "int sub_403e80()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4040d0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4040d0",
            "funcStartAddr": "0x4040d0",
            "funcEndAddr": "0x4040fc",
            "decompiledFuncCode": "extern unsigned int g_406d8f;\nextern unsigned int g_6091b8;\n\nint sub_4040d0()\n{\n    dcgettext(0x0, 0x406d8f, 0x5);\n    error(g_6091b8, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_4038c0",
            "funcStartAddr": "0x4038c0",
            "funcEndAddr": "0x4038d6",
            "decompiledFuncCode": "int sub_4038c0()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_printenv.elf"
}