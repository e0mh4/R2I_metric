{
    "funcInfo": [
        {
            "funcName": "sub_404e40",
            "funcStartAddr": "0x404e40",
            "funcEndAddr": "0x404e58",
            "decompiledFuncCode": "int sub_404e40()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_404e60();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_408ca0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40821b",
            "funcStartAddr": "0x40821b",
            "funcEndAddr": "0x408220",
            "decompiledFuncCode": "int sub_40821b()\n{\n}\n"
        },
        {
            "funcName": "sub_406260",
            "funcStartAddr": "0x406260",
            "funcEndAddr": "0x4062f9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_611410;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_406260()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_611410 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408f00",
            "funcStartAddr": "0x408f00",
            "funcEndAddr": "0x408f28",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n} struct_0;\n\nint sub_408f00()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 0;\n    if (v2->field_28 <= v2->field_20)\n    {\n        v1 = v2->field_10 - v2->field_8;\n        if (((unsigned short)v2->field_0 & 0x100) != 0)\n        {\n            v1 = v2->field_10 - v2->field_8 + v2->field_58 - v2->field_48;\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405410",
            "funcStartAddr": "0x405410",
            "funcEndAddr": "0x40554c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_405410()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long long|unsigned long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_404ff0",
            "funcStartAddr": "0x404ff0",
            "funcEndAddr": "0x404ff7",
            "decompiledFuncCode": "int sub_404ff0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_408290",
            "funcStartAddr": "0x408290",
            "funcEndAddr": "0x4082a6",
            "decompiledFuncCode": "int sub_408290()\n{\n}\n"
        },
        {
            "funcName": "sub_407cf0",
            "funcStartAddr": "0x407cf0",
            "funcEndAddr": "0x407cfa",
            "decompiledFuncCode": "int sub_407cf0()\n{\n}\n"
        },
        {
            "funcName": "sub_407df0",
            "funcStartAddr": "0x407df0",
            "funcEndAddr": "0x407e07",
            "decompiledFuncCode": "int sub_407df0()\n{\n}\n"
        },
        {
            "funcName": "sub_407d70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x407ddc",
            "decompiledFuncCode": "extern uint128_t g_611520;\nextern uint128_t g_611530;\nextern uint128_t g_611540;\nextern unsigned long long g_611550;\n\nint sub_407d70()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_611520;\n    *((uint128_t *)&v1) = g_611530;\n    *((uint128_t *)&v2) = g_611540;\n    v4 = g_611550;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_407630();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403c10",
            "funcStartAddr": "0x403c10",
            "funcEndAddr": "0x403cc6",
            "decompiledFuncCode": "int sub_403c10()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    unsigned long long v3;  // rdi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rdx\n    char *v12;  // rsi\n    unsigned long long v13;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = (unsigned int)sub_404ca0();\n    v10 = sub_404d00();\n    if (v10 > 14)\n    {\n        v6 = (unsigned short)*((short *)v5);\n        v7 = v10;\n        *((short *)v5) = 46;\n        *(v8) = 0;\n        v10 = pathconf(v3, 0x3);\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n        {\n            v11 = 255;\n        }\n        if (*(__errno_location()) == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v11 = v10;\n        }\n        *((unsigned long long *)v5) = v6;\n        if (v7 > v11)\n        {\n            v12 = v4 + v1;\n            v13 = v4 + v2 - v5;\n            if (v4 + v2 - v5 < v11)\n            {\n                v11 = v13 + 1;\n            }\n            else\n            {\n                v12 = v5 + v11 - 1;\n            }\n            *(v12) = 126;\n            *((char *)(v5 + v11)) = 0;\n            return v13;\n        }\n    }\n    if (v10 <= 14 || v7 <= v11)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4084b0",
            "funcStartAddr": "0x4084b0",
            "funcEndAddr": "0x408859",
            "decompiledFuncCode": "extern unsigned int g_40de52;\nextern unsigned int g_40de56;\nextern unsigned int g_40de66;\nextern unsigned int g_40de7d;\nextern unsigned int g_40ded8;\nextern unsigned int g_40dfa8;\nextern unsigned int g_40dfc8;\nextern unsigned int g_40dff0;\nextern unsigned int g_40e018;\nextern unsigned int g_40e048;\n\nint sub_4084b0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40de52, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ded8, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40de56, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40de66, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40de7d, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40dfa8, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40dfc8, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40dff0, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40e018, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40e048, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_40af30",
            "funcStartAddr": "0x40af30",
            "funcEndAddr": "0x40af81",
            "decompiledFuncCode": "int sub_40af30()\n{\n    unsigned int v1;  // [bp+0x100008]\n    void *v2;  // rdi\n\n    __explicit_bzero_chk();\n    free(v2);\n    *(__errno_location()) = v1;\n    return sub_40b460();\n}\n"
        },
        {
            "funcName": "sub_407c30",
            "funcStartAddr": "0x407c30",
            "funcEndAddr": "0x407c3c",
            "decompiledFuncCode": "int sub_407c30()\n{\n}\n"
        },
        {
            "funcName": "sub_4089d0",
            "funcStartAddr": "0x4089d0",
            "funcEndAddr": "0x408a44",
            "decompiledFuncCode": "extern unsigned int g_40de99;\nextern unsigned int g_40dec4;\nextern unsigned int g_40e0f0;\n\nint sub_4089d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40de99, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40dec4, 0x5));\n    dcgettext(0x0, 0x40e0f0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_408ce0",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408d06",
            "decompiledFuncCode": "int sub_408ce0()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_408ca0(); /* do not return */\n        }\n    }\n    if (v2 != 0 || *(v3) != 12)\n    {\n        v2 = (unsigned int)sub_408f90();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_407b50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407bbd",
            "decompiledFuncCode": "int sub_407b50()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_40a1f0",
            "funcStartAddr": "0x40a1f0",
            "funcEndAddr": "0x40a206",
            "decompiledFuncCode": "int sub_40a1f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40a130();\n}\n"
        },
        {
            "funcName": "sub_40b460",
            "funcStartAddr": "0x40b460",
            "funcEndAddr": "0x40b4a1",
            "decompiledFuncCode": "int sub_40b460()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4061c0",
            "funcStartAddr": "0x4061c0",
            "funcEndAddr": "0x4061cd",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4061c0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x408a91",
            "decompiledFuncCode": "int sub_408a70()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_408ca0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_407bc0",
            "funcStartAddr": "0x407bc0",
            "funcEndAddr": "0x407c29",
            "decompiledFuncCode": "int sub_407bc0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_404f40",
            "funcStartAddr": "0x404f40",
            "funcEndAddr": "0x404fd1",
            "decompiledFuncCode": "int sub_404f40()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v2 > 9 && v3 != 0)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40ba20",
            "funcStartAddr": "0x40ba20",
            "funcEndAddr": "0x40baa9",
            "decompiledFuncCode": "int sub_40ba20()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_40bac0();\n            if (v5 >= 0)\n            {\n                v6 = sub_40b9a0();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_40b9a0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_405350",
            "funcStartAddr": "0x405350",
            "funcEndAddr": "0x40539f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_405350()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_407830",
            "funcStartAddr": "0x407830",
            "funcEndAddr": "0x407863",
            "decompiledFuncCode": "extern int512_t g_611520;\n\nint sub_407830()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_611520 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_611520 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_408c20",
            "funcStartAddr": "0x408c20",
            "funcEndAddr": "0x408c4e",
            "decompiledFuncCode": "int sub_408c20()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_408ca0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408d80",
            "funcStartAddr": "0x408d80",
            "funcEndAddr": "0x408eac",
            "decompiledFuncCode": "extern unsigned int g_611558;\n\nint sub_408d80()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_611558 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_408d80();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_611558 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_611558 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_408d80();\n        }\n        if ((*(v12) == 22 || g_611558 < 0) && ((unsigned int)v15 < 0 || g_611558 < 0) && (g_611558 == -1 || g_611558 >= 0) && (g_611558 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_611558 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_408af0",
            "funcStartAddr": "0x408af0",
            "funcEndAddr": "0x408b11",
            "decompiledFuncCode": "int sub_408af0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_408ca0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404bc0",
            "funcStartAddr": "0x404bc0",
            "funcEndAddr": "0x404bd8",
            "decompiledFuncCode": "int sub_404bc0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_404c40();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_408ca0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4082d0",
            "funcStartAddr": "0x4082d0",
            "funcEndAddr": "0x40842d",
            "decompiledFuncCode": "extern unsigned int g_40ce40;\n\nint sub_4082d0()\n{\n    unsigned int|char * v0;  // [bp-0x60]\n    unsigned long long|unsigned int v1;  // [bp-0x58]\n    unsigned long long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x48]\n    unsigned int v4;  // [bp-0x3c]\n    char *v6;  // rdi\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // r8\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // rbp\n    unsigned long long v12;  // rdx\n    unsigned long v13;  // rcx\n    unsigned int *v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rdx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long|unsigned int v21;  // r12d\n    unsigned long long v22;  // rbx\n    unsigned long long v23;  // r14\n    unsigned long long v25;  // rsi\n    unsigned long long v26;  // rdi\n    unsigned int v27;  // rdx\n    unsigned int|unsigned long v28;  // rcx\n    unsigned int v29;  // cc_dep1\n\n    v7 = v6;\n    v9 = v8;\n    v11 = v10;\n    v2 = v12;\n    v0 = v6;\n    v3 = v13;\n    v14 = __errno_location();\n    v4 = *(v14);\n    v15 = strlen(v6);\n    v16 = v11 + v9;\n    if (v11 + v9 <= v15)\n    {\n        v1 = v7 + v15 - v16;\n        v18 = strspn(v7 + v15 - v16, 0x40ce40);\n        if (v9 <= v18)\n        {\n            if ((unsigned long long)(unsigned int)sub_40add0() != 0)\n            {\n                v21 = 238328;\n                v22 = &v0[v9 + v15 + -1 * v16];\n                while (true)\n                {\n                    v23 = v1;\n                    if (v9 != 0)\n                    {\n                        while (true)\n                        {\n                            v23 += 1;\n                            *((unsigned long long *)(v23 - 1)) = (char)*((char *)(0x40de00 + (unsigned long long)(unsigned int)sub_40ae10()));\n                            if (v23 == v22)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v25 = v2;\n                    v26 = v0;\n                    v27 = (long long)(stack_base)[-72]();\n                    if (v27 < 0)\n                    {\n                        v28 = *(v14);\n                        if (*(v14) == 17)\n                        {\n                            v29 = v21;\n                            v21 = (unsigned long long)v21 - 1;\n                            sub_40af30();\n                            *(v14) = 17;\n                            v19 = -18446744069414584321;\n                        }\n                        else\n                        {\n                            v27 = -1;\n                        }\n                    }\n                    else\n                    {\n                        *(v14) = v4;\n                        v28 = v4;\n                    }\n                    if (*(v14) != 17 || v27 >= 0)\n                    {\n                        v1 = v27;\n                        *((unsigned long *)&v0) = v28;\n                        sub_40af30();\n                        v19 = v1;\n                        *(v14) = v0;\n                    }\n                }\n            }\n            else\n            {\n                v19 = -18446744069414584321;\n            }\n        }\n    }\n    if (v9 > v18 || v11 + v9 > v15)\n    {\n        *(v14) = 22;\n        v19 = -18446744069414584321;\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_404fe0",
            "funcStartAddr": "0x404fe0",
            "funcEndAddr": "0x404ff0",
            "decompiledFuncCode": "int sub_404fe0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_408ab0",
            "funcStartAddr": "0x408ab0",
            "funcEndAddr": "0x408ae0",
            "decompiledFuncCode": "int sub_408ab0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_408ca0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a790",
            "funcStartAddr": "0x40a790",
            "funcEndAddr": "0x40a7e6",
            "decompiledFuncCode": "int sub_40a790()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404a70",
            "funcStartAddr": "0x404a70",
            "funcEndAddr": "0x404a78",
            "decompiledFuncCode": "extern char g_611400;\n\nint sub_404a70()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_611400 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404d00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d27",
            "decompiledFuncCode": "int sub_404d00()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a1b0",
            "funcStartAddr": "0x40a1b0",
            "funcEndAddr": "0x40a1c3",
            "decompiledFuncCode": "int sub_40a1b0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40a130();\n}\n"
        },
        {
            "funcName": "sub_40a230",
            "funcStartAddr": "0x40a230",
            "funcEndAddr": "0x40a29f",
            "decompiledFuncCode": "extern unsigned long long g_40e307;\n\nint sub_40a230()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40e307;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40a790() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404960",
            "funcStartAddr": "0x404960",
            "funcEndAddr": "0x404a52",
            "decompiledFuncCode": "extern unsigned int g_40cf08;\nextern unsigned int g_611300;\nextern unsigned long long g_6113f8;\n\nint sub_404960()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // rbp\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n\n    v1 = v3;\n    v0 = v4;\n    v5 = sub_408f00();\n    if (v5 != 0 || sub_40a730() != 0)\n    {\n        while (true)\n        {\n            v11 = sub_408f30();\n            if (v11 == 0)\n            {\n                v12 = sub_408ec0();\n                if (v12 != 0)\n                {\n                    sub_40a730();\n                }\n            }\n            if (v12 == 0 || v11 != 0)\n            {\n                if (sub_40a730() == 0)\n                {\n                    break;\n                }\n            }\n            v7 = dcgettext(0x0, 0x40cf08, 0x5);\n            v8 = __errno_location();\n            if (g_6113f8 != 0)\n            {\n                sub_407cd0();\n                error(0x0, *(v8), \"%s: %s\");\n            }\n            else\n            {\n                error(0x0, *(v8), \"%s\");\n            }\n            sub_404a80();\n            _exit(g_611300);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a3b0",
            "funcStartAddr": "0x40a3b0",
            "funcEndAddr": "0x40a4b3",
            "decompiledFuncCode": "int sub_40a3b0()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (v13 != 0 || v0 != -1 || *((long long *)(v5 + (v12 << 3))) != 0))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x4078bb",
            "decompiledFuncCode": "extern char g_611520;\n\nint sub_407890()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_611520 : v2);\n    *((int *)(tmp_11? &g_611520 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_611520;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_611520;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404b20",
            "funcStartAddr": "0x404b20",
            "funcEndAddr": "0x404bb0",
            "decompiledFuncCode": "int sub_404b20()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned int *v6;  // rbp\n    unsigned long long v7;  // r13\n    unsigned int|unsigned long v9;  // r14\n    unsigned long long v10;  // rbx\n\n    if (v2 != 0)\n    {\n        v3 = dirfd(v2);\n        if (v3 <= 2)\n        {\n            v5 = sub_408d80();\n            v6 = __errno_location();\n            if (v5 < 0)\n            {\n                v9 = *(v6);\n                v7 = 0;\n            }\n            else\n            {\n                v9 = *(v6);\n                v7 = fdopendir(v5);\n                if (v7 == 0)\n                {\n                    close(v5);\n                }\n            }\n            v10 = v7;\n            closedir();\n            *((unsigned long *)&v6) = v9;\n            return v10;\n        }\n    }\n    if (v2 == 0 || v3 > 2)\n    {\n        v2 = opendir();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_407ea0",
            "funcStartAddr": "0x407ea0",
            "funcEndAddr": "0x4080d8",
            "decompiledFuncCode": "int sub_407ea0()\n{\n    unsigned int *|unsigned int v0;  // [bp-0x160]\n    char v1;  // [bp-0x158]\n    unsigned int v2;  // [bp-0x140]\n    char v3;  // [bp-0xc8]\n    unsigned int v4;  // [bp-0xb0]\n    char v5;  // [bp-0x30]\n    char v6;  // [bp-0x20]\n    char v7;  // [bp+0x0]\n    unsigned long v9;  // rdi\n    unsigned int v10;  // r14d\n    unsigned long v11;  // rdx\n    unsigned int v12;  // r13d\n    char *v13;  // rsi\n    char *v14;  // rcx\n    unsigned int v15;  // r8d\n    unsigned int v16;  // r13\n    unsigned long v17;  // r14\n    unsigned long long v18;  // rdx\n    unsigned int *v19;  // r9\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15b\n    unsigned long long v22;  // rax\n    unsigned int v23;  // eax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v10 = v9;\n    v12 = v11;\n    v18 = syscall(0x13c, v9, (unsigned int)v13, v11, (unsigned int)v14, v15, *((int *)&v5), (unsigned int)&v7, *((int *)&v6), v16, v17, v21);\n    if ((unsigned int)v18 < 0)\n    {\n        v0 = v18;\n        v19 = __errno_location();\n        v20 = *(v19);\n        v21 = ((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95;\n        if ((((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95) == 0)\n        {\n            if (v15 != 0)\n            {\n                if ((v15 & -2) != 0)\n                {\n                    *(v19) = 95;\n                    v18 = -18446744069414584321;\n                }\n                else\n                {\n                    v0 = v19;\n                    v22 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                    v19 = v0;\n                    if (v22 != 0)\n                    {\n                        v23 = *(v19);\n                        if (*(v19) != 75 && v23 == 2)\n                        {\n                            v21 = 1;\n                        }\n                    }\n                    if (v22 == 0 || *(v19) == 75)\n                    {\n                        *(v0) = 17;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (v15 == 0 || (v15 & -2) == 0 && v23 == 2 && v22 != 0 && *(v19) != 75)\n            {\n                v0 = v19;\n                v24 = strlen(v13);\n                v25 = strlen(v14);\n            }\n            if (v13[v24 + -1] == 47 && v25 != 0 && v24 != 0 && ((v15 & -2) == 0 || v15 == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || v22 != 0) && (v15 == 0 || *(v19) != 75) || v14[v25 + -1] == 47 && v25 != 0 && v24 != 0 && v13[v24 + -1] != 47 && ((v15 & -2) == 0 || v15 == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || v22 != 0) && (v15 == 0 || *(v19) != 75))\n            {\n                v0 = v0;\n                v26 = __fxstatat(0x1, v9, (unsigned int)v13, (unsigned int)&v1, 0x100);\n                if (v26 == 0)\n                {\n                    if (!(v21 != 0))\n                    {\n                        v0 = v0;\n                        v27 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                        if (v27 == 0)\n                        {\n                            if (((unsigned short)v4 & 0xf000) != 0x4000)\n                            {\n                                *(v0) = 20;\n                            }\n                            else\n                            {\n                                if (((unsigned short)v2 & 0xf000) != 0x4000)\n                                {\n                                    *(v0) = 21;\n                                    v18 = -18446744069414584321;\n                                }\n                            }\n                        }\n                    }\n                    else if (((unsigned short)v2 & 0xf000) != 0x4000)\n                    {\n                        *(v0) = 2;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (...)\n            {\n                v18 = -18446744069414584321;\n            }\n            if (...)\n            {\n                v18 = renameat(v9, (unsigned int)v13, v16, (unsigned int)v14);\n            }\n        }\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_4036a0",
            "funcStartAddr": "0x4036a0",
            "funcEndAddr": "0x4036b8",
            "decompiledFuncCode": "int sub_4036a0()\n{\n}\n"
        },
        {
            "funcName": "sub_408f30",
            "funcStartAddr": "0x408f30",
            "funcEndAddr": "0x408f86",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_408f30()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_407b30",
            "funcStartAddr": "0x407b30",
            "funcEndAddr": "0x407b42",
            "decompiledFuncCode": "int sub_407b30()\n{\n}\n"
        },
        {
            "funcName": "sub_407c4f",
            "funcStartAddr": "0x407c4f",
            "funcEndAddr": "0x407cc0",
            "decompiledFuncCode": "extern uint128_t g_611520;\nextern uint128_t g_611530;\nextern uint128_t g_611540;\nextern unsigned long long g_611550;\n\nint sub_407c4f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_611550;\n    *((uint128_t *)&v0) = g_611520;\n    *((uint128_t *)&v1) = g_611530;\n    *((uint128_t *)&v2) = g_611540;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_405330",
            "funcStartAddr": "0x405330",
            "funcEndAddr": "0x405335",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_405330()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_405680",
            "funcStartAddr": "0x405680",
            "funcEndAddr": "0x4056e0",
            "decompiledFuncCode": "int sub_405680()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_404ca0",
            "funcStartAddr": "0x404ca0",
            "funcEndAddr": "0x404cf2",
            "decompiledFuncCode": "int sub_404ca0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_407de0",
            "funcStartAddr": "0x407de0",
            "funcEndAddr": "0x407de9",
            "decompiledFuncCode": "int sub_407de0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a2b0",
            "funcStartAddr": "0x40a2b0",
            "funcEndAddr": "0x40a38b",
            "decompiledFuncCode": "int sub_40a2b0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= 9223372036854775806 && v9 <= v4 && v9 > 4611686018427387903)\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > 9223372036854775806 || v9 > v4 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404d70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404dfd",
            "decompiledFuncCode": "int sub_404d70()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long|unsigned long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_408c80();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_405f70();\n        if (!(v13 != 0))\n        {\n            sub_408ca0(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_408a50();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_408ec0",
            "funcStartAddr": "0x408ec0",
            "funcEndAddr": "0x408efb",
            "decompiledFuncCode": "int sub_408ec0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_408f30();\n    }\n}\n"
        },
        {
            "funcName": "sub_40af90",
            "funcStartAddr": "0x40af90",
            "funcEndAddr": "0x40afed",
            "decompiledFuncCode": "extern unsigned int g_40e3f8;\nextern unsigned int g_40e408;\nextern unsigned int g_611300;\n\nint sub_40af90()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_407e80();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x40e408, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x40e3f8, 0x5);\n    }\n    error(g_611300, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_408c80",
            "funcStartAddr": "0x408c80",
            "funcEndAddr": "0x408c93",
            "decompiledFuncCode": "int sub_408c80()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_40a730",
            "funcStartAddr": "0x40a730",
            "funcEndAddr": "0x40a78c",
            "decompiledFuncCode": "int sub_40a730()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40b9a0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4051d0",
            "funcStartAddr": "0x4051d0",
            "funcEndAddr": "0x40530a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_4051d0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_405000();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_405000();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x405669",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_405610()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_405000();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_407a30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407a3a",
            "decompiledFuncCode": "int sub_407a30()\n{\n}\n"
        },
        {
            "funcName": "sub_403750",
            "funcStartAddr": "0x403750",
            "funcEndAddr": "0x40387b",
            "decompiledFuncCode": "int sub_403750()\n{\n    unsigned int *v0;  // [bp-0x160]\n    unsigned int v1;  // [bp-0x158]\n    unsigned long v2;  // [bp-0x150]\n    unsigned int v3;  // [bp-0x148]\n    unsigned int v4;  // [bp-0x144]\n    unsigned int v6;  // edx\n    unsigned int v7;  // ebp\n    unsigned long long v8;  // rbx\n    unsigned int v9;  // r9d\n    void *v11;  // rbx\n    unsigned int v12;  // edi\n    unsigned long v13;  // rsi\n    unsigned int v14;  // r8d\n    unsigned int *v16;  // r9\n    unsigned long long|unsigned int v17;  // r12\n    unsigned long v18;  // rcx\n    unsigned long long v19;  // rax\n\n    v7 = v6;\n    v8 = linkat();\n    if ((char)v9 == 1 && (unsigned int)v8 != 0 && *(v0) == 17)\n    {\n        v0 = __errno_location();\n        v11 = (unsigned long long)(unsigned int)sub_4036c0();\n        if (v11 != 0)\n        {\n            v1 = v12;\n            v2 = v13;\n            v3 = v6;\n            v4 = v14;\n            v16 = v0;\n            if (sub_4082d0() != 0)\n            {\n                v17 = *(v0);\n            }\n            else\n            {\n                v0 = v0;\n                v17 = renameat(v7, (unsigned int)v11, v7, v18);\n                if (v17 != 0)\n                {\n                    v17 = *(v0);\n                }\n                v0 = v0;\n                unlinkat(v7, (unsigned int)v11, 0x0);\n                v16 = v0;\n            }\n            if (v11 != stack_base + -312)\n            {\n                v0 = v16;\n                free(v11);\n                v16 = v0;\n            }\n            v8 = 1;\n            if (v17 != 0)\n            {\n                *((unsigned long long *)&v16) = v17;\n                v8 = -18446744069414584321;\n            }\n        }\n        else\n        {\n            v8 = -18446744069414584321;\n        }\n    }\n    v19 = v8;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_4082b0",
            "funcStartAddr": "0x4082b0",
            "funcEndAddr": "0x4082cd",
            "decompiledFuncCode": "int sub_4082b0()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4081fb",
            "funcStartAddr": "0x4081fb",
            "funcEndAddr": "0x4081fd",
            "decompiledFuncCode": "int sub_4081fb()\n{\n}\n"
        },
        {
            "funcName": "sub_405000",
            "funcStartAddr": "0x405000",
            "funcEndAddr": "0x405026",
            "decompiledFuncCode": "int sub_405000()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_405340",
            "funcStartAddr": "0x405340",
            "funcEndAddr": "0x405345",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_405340()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_4088b0",
            "funcStartAddr": "0x4088b0",
            "funcEndAddr": "0x408909",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4088b0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4084b0();\n}\n"
        },
        {
            "funcName": "sub_408d10",
            "funcStartAddr": "0x408d10",
            "funcEndAddr": "0x408d78",
            "decompiledFuncCode": "extern unsigned long long stdin;\n\nint sub_408d10()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long|char|unsigned long v3;  // rbx\n    char *v5;  // rax\n    unsigned long long v6;  // rax\n\n    v3 = 0;\n    v0 = 0;\n    v1 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v5 = v0 + __getdelim(&v0, &v1, 0xa, stdin) - 1;\n        if (*(v5) == 10)\n        {\n            *(v5) = 0;\n        }\n        v3 = [D] amd64g_calculate_condition(0xf<64>, 0x13<64>, Call (target: 0x401f70<64>, prototype: () -> None, args: []), 0x0<64>, cc_ndep<8>);\n    }\n    free(v0);\n    v6 = v3;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_404c40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404c9a",
            "decompiledFuncCode": "int sub_404c40()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_404be0();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404a80",
            "funcStartAddr": "0x404a80",
            "funcEndAddr": "0x404b1e",
            "decompiledFuncCode": "extern unsigned int g_40cf22;\nextern unsigned int g_611300;\nextern char g_611400;\nextern unsigned long long g_611408;\n\nint sub_404a80()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40a730();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_611400 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40cf22, 0x5);\n            if (g_611408 != 0)\n            {\n                sub_407cd0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_611400 != 0)\n    {\n        v3 = sub_40a730();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_611400 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_611300);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_403890",
            "funcStartAddr": "0x403890",
            "funcEndAddr": "0x403984",
            "decompiledFuncCode": "int sub_403890()\n{\n    unsigned long v0;  // [bp-0x148]\n    unsigned int v1;  // [bp-0x140]\n    unsigned long v3;  // rsi\n    unsigned int v4;  // ebp\n    char v5;  // cl\n    unsigned int *v6;  // r14\n    void *v7;  // rbx\n    unsigned long v8;  // rdi\n    unsigned long long v9;  // rax\n    unsigned long v10;  // rdx\n    unsigned long long v11;  // rax\n    unsigned int|unsigned long v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rax\n\n    v4 = v3;\n    v13 = symlinkat();\n    if (v5 == 1 && (unsigned int)v13 != 0)\n    {\n        v6 = __errno_location();\n        if (*(v6) == 17)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_4036c0();\n            if (v7 != 0)\n            {\n                v0 = v8;\n                v1 = v3;\n                v9 = sub_4082d0();\n                if (v9 != 0)\n                {\n                    v12 = *(v6);\n                }\n                else\n                {\n                    v11 = renameat(v4, (unsigned int)v7, v4, v10);\n                    if (!(v11 == 0))\n                    {\n                        v12 = *(v6);\n                        unlinkat(v4, (unsigned int)v7, 0x0);\n                    }\n                    else if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                }\n                if (v9 != 0 || v11 != 0)\n                {\n                    if (v7 != stack_base + -312)\n                    {\n                        free(v7);\n                    }\n                    if (v12 != 0)\n                    {\n                        *((unsigned long *)&v6) = v12;\n                        v13 = -18446744069414584321;\n                    }\n                }\n                if (v12 == 0 || v9 == 0 && v11 == 0)\n                {\n                    v13 = 1;\n                }\n            }\n            else\n            {\n                v13 = -18446744069414584321;\n            }\n        }\n    }\n    v14 = v13;\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_407870",
            "funcStartAddr": "0x407870",
            "funcEndAddr": "0x407883",
            "decompiledFuncCode": "extern int512_t g_611520;\n\nint sub_407870()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_611520 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_611520 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407c40",
            "funcStartAddr": "0x407c40",
            "funcEndAddr": "0x407c4f",
            "decompiledFuncCode": "int sub_407c40()\n{\n}\n"
        },
        {
            "funcName": "sub_4056f0",
            "funcStartAddr": "0x4056f0",
            "funcEndAddr": "0x40575b",
            "decompiledFuncCode": "int sub_4056f0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40bb58",
            "funcStartAddr": "0x40bb58",
            "funcEndAddr": "0x40bb78",
            "decompiledFuncCode": "extern unsigned long long g_610e30;\n\nint sub_40bb58()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_610e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x406400",
            "funcEndAddr": "0x407538",
            "decompiledFuncCode": "int sub_406400()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned int|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long|unsigned long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int|unsigned long v77;  // rsi\n    unsigned long long|unsigned int|char|unsigned long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long|unsigned long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    char|unsigned long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    char|unsigned long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char|unsigned long v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_406300();\n            v27 = (unsigned long long)(unsigned int)sub_406300();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v50 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                            if (v25 != 0)\n                            {\n                                v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                                v89 = (unsigned int)v39 == 2;\n                            }\n                            else\n                            {\n                                v89 = (unsigned int)v39 == 2;\n                                v80 += 1;\n                                v46 = (v78 ^ 1) & (unsigned int)v33;\n                                if (v46 != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v79 > v76 + 1)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 39;\n                                    }\n                                    v76 += 2;\n                                    v33 = 0;\n                                }\n                                v87 = v89;\n                                v73 = (unsigned int)v33 ^ 1;\n                                v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v76 + 1 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 36;\n                                    }\n                                    v75 = v76 + 2;\n                                    if (v76 + 2 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 2)) = 39;\n                                    }\n                                    v76 += 3;\n                                    v33 = rax<8>;\n                                }\n                                *((unsigned long long *)&v4) = v4 & v87;\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 92;\n                                }\n                                v76 += 1;\n                                v80 += 1;\n                            }\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_406400();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40a230();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v89 == 0) && (v89 == 0 || v80 < v64) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v25 == 0 || v78 == 0) && (v25 == 0 || v76 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_406400();\n            }\n            if ((v46 == 0 || v25 == 0) && (v25 == 0 || v89 != 0) && (v46 == 0 || v17 == 0 || v5 == 0) && (v17 == 0 || v5 == 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v25 == 0 || v78 == 0) && (v25 == 0 || v76 == 0) && (v25 == 0 || (v81 == 2 & v17) != 0) && (v78 == 0 || v17 != 0) && (v78 == 0 || v5 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v5 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v5 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_407cc0",
            "funcStartAddr": "0x407cc0",
            "funcEndAddr": "0x407ccd",
            "decompiledFuncCode": "int sub_407cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_408f90",
            "funcStartAddr": "0x408f90",
            "funcEndAddr": "0x409435",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[11];\n    char field_13;\n    char field_14;\n} struct_0;\n\nextern unsigned int g_40ce0a;\n\nint sub_408f90()\n{\n    unsigned int|unsigned long v0;  // [bp-0x120]\n    unsigned long v1;  // [bp-0x118]\n    unsigned long long|void * v2;  // [bp-0x110]\n    void *v3;  // [bp-0x108]\n    unsigned long long v4;  // [bp-0x100]\n    char v5;  // [bp-0xe9]\n    char *|unsigned long v6;  // [bp-0xe8]\n    unsigned long v7;  // [bp-0xe0]\n    unsigned long v8;  // [bp-0xd8]\n    unsigned long v9;  // [bp-0xd0]\n    unsigned long v10;  // [bp-0xc8]\n    unsigned long long v11;  // [bp-0xc0]\n    unsigned int v12;  // [bp-0xb0]\n    void *v14;  // rdi\n    unsigned int v15;  // rsi\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r14\n    unsigned long long v19;  // rax\n    unsigned int v20;  // r15d\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rbp\n    unsigned long long v24;  // r13\n    struct_0 *v25;  // rax\n    unsigned long long v26;  // rdx\n    void *v27;  // rbx\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // r13\n    unsigned long v30;  // r14\n    unsigned int v31;  // rax\n    unsigned long long v33;  // r8\n    unsigned long v38;  // rbx\n    unsigned long v39;  // rdx\n    unsigned long long|unsigned int v41;  // rbx\n    unsigned int *v42;  // r12\n\n    v3 = v14;\n    if (v15 == 0)\n    {\n        v4 = 0x1000;\n        if (v14 != 0)\n        {\n            v2 = 0;\n            *(__errno_location()) = 22;\n        }\n    }\n    else\n    {\n        *((unsigned int *)&v4) = v15;\n        if (v3 != 0)\n        {\n            v2 = v3;\n        }\n    }\n    if (v14 == 0 && v15 == 0 || v3 == 0 && v15 != 0)\n    {\n        v2 = malloc(v4);\n    }\n    if (v14 == 0 && v2 != 0 || v3 != 0 && v15 != 0 || v2 != 0 && v15 != 0)\n    {\n        v16 = v2 + v4;\n        *((char *)(v2 + v4 - 1)) = 0;\n        v17 = __lxstat();\n        if (v17 >= 0)\n        {\n            v20 = v10;\n            v18 = v11;\n            v0 = v10;\n            v19 = __lxstat();\n            if (v19 >= 0)\n            {\n                v6 = v16 - 1;\n                v8 = v11;\n                v7 = v10;\n                v5 = v10 != v10 | v11 != v11;\n                if (v20 != v10 || v18 != v11)\n                {\n                    v23 = 0;\n                    v20 = -100;\n                    v42 = __errno_location();\n                    while (true)\n                    {\n                        v20 = openat(v20, 0x40ce0a, 0x0);\n                        if (v20 >= 0)\n                        {\n                            v21 = __fxstat(0x1, v20, (unsigned int)&v10);\n                            if (v21 == 0)\n                            {\n                                if (v23 != 0)\n                                {\n                                    v22 = closedir();\n                                }\n                                if (v22 == 0 || v23 == 0)\n                                {\n                                    v1 = v10;\n                                    v9 = v11;\n                                    v23 = fdopendir(v20);\n                                    if (v23 != 0)\n                                    {\n                                        v24 = v5;\n                                        while (true)\n                                        {\n                                            *(v42) = 0;\n                                            v25 = readdir();\n                                            if (v25 == 0)\n                                            {\n                                                v41 = *(v42);\n                                                if (*(v42) == 0 && v24 != 0)\n                                                {\n                                                    rewinddir(v23);\n                                                    v25 = readdir();\n                                                    if (v25 != 0)\n                                                    {\n                                                        v24 = 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v41 = *(v42);\n                                                    }\n                                                }\n                                                if (v25 == 0 || v24 == 0 || *(v42) != 0)\n                                                {\n                                                    if ((unsigned int)v41 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    *(v42) = 2;\n                                                    v41 = 2;\n                                                }\n                                            }\n                                            if (v25 != 0 || *(v42) == 0 && v25 != 0 && v24 != 0)\n                                            {\n                                                if (v24 != 0 && (v25->field_13 == 46 || v25 != 0) && (v25->field_13 != 46 || *((short *)&v25->field_14) != 46) && (v25->field_13 != 46 || v25->field_14 != 0) && (v25 != 0 || *((short *)&v25->field_14) != 46) && (v25 != 0 || v25->field_14 != 0))\n                                                {\n                                                    v24 = v26;\n                                                }\n                                                if ((v25 == 0 || v25->field_13 != 46 || *((short *)&v25->field_14) != 46) && (v25 == 0 || v25->field_13 != 46 || v25->field_14 != 0) && (v25 != 0 || *((short *)&v25->field_14) != 46 || v25->field_13 != 46) && (v25 != 0 || v25->field_13 != 46 || v25->field_14 != 0))\n                                                {\n                                                    v27 = &v25->field_13;\n                                                    v28 = __fxstatat(0x1, v20, (unsigned int)v25 + 19, (unsigned int)&v10, 0x100);\n                                                    v29 = &v6[-1 * v2];\n                                                    v30 = strlen(v27);\n                                                    if (v29 <= v30)\n                                                    {\n                                                        if (v15 == 0)\n                                                        {\n                                                            v31 = v4 + (v4 <= v30? v30 : v4);\n                                                            *((int *)&v6) = (v4 <= v30? v30 : v4);\n                                                            *((unsigned long long *)&v0) = v4 + (v4 <= v30? v30 : v4);\n                                                            if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                            {\n                                                                v2 = realloc(v2, v31);\n                                                                v6 = memcpy(v2 + v6 + v29, v2 + v29, v4 - v29);\n                                                                v4 = *((long long *)&v0);\n                                                            }\n                                                            if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0)\n                                                            {\n                                                                *(v42) = 12;\n                                                                v41 = 12;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v42) = 34;\n                                                            v41 = 34;\n                                                        }\n                                                    }\n                                                    if (v29 > v30 || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                    {\n                                                        v33 = memcpy(&v6[-1 * v30], v27, v30);\n                                                        v6 = v33 - 1;\n                                                        *((char *)(v33 - 1)) = 47;\n                                                        v0 = v1;\n                                                        if (v7 != v1 || v8 != v9)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (closedir() != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v16 = v2 + v4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (((unsigned short)v12 & 0xf000) == 0x4000 && v10 == v0 && (v15 == 0 || v29 > v30) && (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) || v29 > v30) && (v29 > v30 || v2 != 0) && v7 == v1 && v8 == v9)\n                                        {\n                                            v41 = *(v42);\n                                        }\n                                        else if (((unsigned short)v12 & 0xf000) == 0x4000 && v10 == v0 && (v15 == 0 || v29 > v30) && (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) || v29 > v30) && (v29 > v30 || v2 != 0) && v7 == v1 || ((unsigned short)v12 & 0xf000) == 0x4000 && v10 == v0 && (v15 == 0 || v29 > v30) && (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) || v29 > v30) && (v29 > v30 || v2 != 0))\n                                        {\n                                            v20 = openat(v20, 0x40ce0a, 0x0);\n                                        }\n                                        else if (v29 <= v30 && ((unsigned short)v12 & 0xf000) == 0x4000 && v10 == v0 && v15 == 0 && ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0) || (unsigned int)v41 == 0 && v25 == 0 && (v25 == 0 || v24 == 0 || *(v42) != 0) || v25 == 0 && (v25 == 0 || v24 == 0 || *(v42) != 0) || v29 <= v30 && ((unsigned short)v12 & 0xf000) == 0x4000 && v10 == v0 && v15 != 0)\n                                        {\n                                            closedir();\n                                        }\n                                    }\n                                }\n                                if ((v23 == 0 || v22 != 0) && (v23 == 0 || v23 != 0))\n                                {\n                                    v41 = *(v42);\n                                }\n                            }\n                            else\n                            {\n                                v41 = *(v42);\n                                if (v23 != 0)\n                                {\n                                    closedir();\n                                }\n                            }\n                            if ((v23 == 0 || v22 != 0 || v21 != 0) && (v23 == 0 || v23 != 0 || v21 != 0))\n                            {\n                                close(v20);\n                            }\n                        }\n                        else\n                        {\n                            v41 = *(v42);\n                        }\n                        if ((v20 < 0 || v21 == 0) && (v20 < 0 || v23 != 0) && (v22 == 0 || v23 == 0 || v20 < 0) && (v23 != 0 || v20 >= 0))\n                        {\n                            closedir();\n                        }\n                        break;\n                    }\n                    if (v21 == 0 && v20 >= 0 && v23 != 0 && (v22 == 0 || v23 == 0))\n                    {\n                        v41 = *(v42);\n                    }\n                    else if (v20 < 0 || v23 == 0 || v3 != 0 || v21 != 0 || v22 != 0 && v23 != 0)\n                    {\n                        free(v2);\n                    }\n                    else if (v20 < 0 || v23 == 0 || v21 != 0 || v22 != 0 && v23 != 0)\n                    {\n                        if (v20 < 0 || v23 == 0 || v3 != 0 || v21 != 0 || v22 != 0 && v23 != 0)\n                        {\n                            *(v42) = v41;\n                            v2 = 0;\n                        }\n                    }\n                }\n                v6[-1] = 47;\n                v6 = &v6[-1];\n                v38 = v16 + -0x1 * v6;\n                v39 = v38;\n                memmove(v2, v6, v39);\n                if (v15 == 0)\n                {\n                    v3 = realloc(v2, v39);\n                }\n                *((int *)&v2) = (v3 == 0? v2 : v3);\n            }\n        }\n        if (v17 < 0 || v19 < 0)\n        {\n            v42 = __errno_location();\n        }\n        if (v17 < 0 || v19 < 0 || v20 != v10 || v18 != v11)\n        {\n            v41 = *(v42);\n            free(v2);\n            *(v42) = v41;\n            v2 = 0;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a6e0",
            "funcStartAddr": "0x40a6e0",
            "funcEndAddr": "0x40a72c",
            "decompiledFuncCode": "int sub_40a6e0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4055c0",
            "funcStartAddr": "0x4055c0",
            "funcEndAddr": "0x4055ff",
            "decompiledFuncCode": "int sub_4055c0()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_407a40",
            "funcStartAddr": "0x407a40",
            "funcEndAddr": "0x407ad5",
            "decompiledFuncCode": "extern struct_0 *g_611358;\nextern unsigned long long g_611360;\nextern unsigned long long g_611368;\nextern unsigned int g_611370;\nextern unsigned long long g_611420;\n\nint sub_407a40()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_611370;\n    if (g_611370 > 1)\n    {\n        v2 = &g_611358[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_611358[(unsigned long long)(g_611370 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_611358->field_8 != 6362144)\n    {\n        v1 = free(g_611358->field_8);\n        g_611360 = 0x100;\n        g_611368 = &g_611420;\n    }\n    if (g_611358 != 6361952)\n    {\n        v1 = free(g_611358);\n        g_611358 = &g_611360;\n    }\n    g_611370 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4042d0",
            "funcStartAddr": "0x4042d0",
            "funcEndAddr": "0x4048fb",
            "decompiledFuncCode": "extern unsigned int g_40d01e;\n\nint sub_4042d0()\n{\n    unsigned long long|unsigned int|unsigned long|unsigned int * v0;  // [bp-0x100]\n    unsigned int v1;  // [bp-0xf4]\n    unsigned long long|unsigned long v2;  // [bp-0xf0]\n    char [2]|unsigned long v3;  // [bp-0xe8]\n    unsigned long long v4;  // [bp-0xe0]\n    unsigned long long|unsigned long v5;  // [bp-0xd8]\n    unsigned int v6;  // [bp-0xd0]\n    unsigned int v7;  // [bp-0xcc]\n    char v8;  // [bp-0xc8]\n    unsigned int v9;  // [bp-0xb0]\n    unsigned int v11;  // esi\n    char v12[2];  // rdi\n    char v13[2];  // r15\n    unsigned long long v14;  // rbx\n    char *v15;  // rbx\n    unsigned long long|char * v16;  // rbp\n    unsigned long long v17;  // rdx\n    char v18[2];  // r13\n    unsigned long v19;  // r8\n    char v20[2];  // r15\n    char *v21;  // rdx\n    unsigned long long v22;  // rbx\n    unsigned long v23;  // rbp\n    char v25[2];  // r15\n    unsigned long long v26;  // rsi\n    char v27;  // al\n    char v28[2];  // rax\n    unsigned long long v29;  // rax\n    char *v31;  // r15\n    unsigned long v32;  // r13\n    unsigned long long v33;  // rdx\n    char v35[2];  // r15\n    void *v38;  // rax\n    char *v39;  // rdx\n    unsigned long long v40;  // rdx\n    char v41;  // cc_dep1\n    char v42[2];  // r14\n    unsigned long long v43;  // rax\n    char v44[2];  // r15\n    unsigned long long v45;  // r12\n    unsigned int *v47;  // rdx\n    unsigned int *v48;  // rdx\n    char *v49;  // rax\n    unsigned long long v50;  // rcx\n    unsigned int *v51;  // rdx\n    unsigned int|unsigned long v52;  // rcx\n    unsigned long long v55;  // rax\n\n    v1 = v11 & 3;\n    if (((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) == 0)\n    {\n        v13 = v12;\n        if (v12 != 0)\n        {\n            if (v12[0] != 0)\n            {\n                if (v12[0] != 47)\n                {\n                    v45 = (unsigned int)sub_408ce0();\n                    if (v45 != 0)\n                    {\n                        v14 = strlen(v45);\n                        if (v14 > 4095)\n                        {\n                            v15 = v14 + v45;\n                            v16 = v15;\n                        }\n                        else\n                        {\n                            v45 = (unsigned int)sub_408ab0();\n                            v15 = v14 + v45;\n                            v16 = v45 + 0x1000;\n                        }\n                    }\n                }\n                else\n                {\n                    v45 = (unsigned int)sub_408a50();\n                    v16 = v45 + 0x1000;\n                    v15 = v45 + 1;\n                    *((char *)v45) = 47;\n                }\n                if (v12[0] == 47 || v45 != 0)\n                {\n                    *((char *[2])&v3[0]) = v13;\n                    v43 = v13[0];\n                    v6 = v11 & 4;\n                    v2 = 0;\n                    v5 = 0;\n                    v4 = 0;\n                    while (true)\n                    {\n                        if (v43 != 0)\n                        {\n                            v17 = v43;\n                        }\n                        if (v43 == 47)\n                        {\n                            do\n                            {\n                                v13 = &v13[1];\n                                v17 = v13[0];\n                            }\n                            while (v13[0] == 47);\n                        }\n                        if (v43 == 47 && v17 != 0 || v43 != 47 && v43 != 0)\n                        {\n                            v18 = v13;\n                            while (true)\n                            {\n                                v43 = v18[1];\n                                v42 = &v18[1];\n                                if (v18[1] == 0 || v43 == 47)\n                                {\n                                    break;\n                                }\n                                v18 = v42;\n                            }\n                        }\n                        if (v43 == 0 || v42 == v13 || v17 == 0 && v43 == 47)\n                        {\n                            if (v15[-1] == 47 && v15 > v45 + 1)\n                            {\n                                v49 = v15;\n                                v15 = &v15[-1];\n                            }\n                            if (v15 <= v45 + 1 || v15[-1] != 47)\n                            {\n                                v49 = &v15[1];\n                            }\n                            *(v15) = 0;\n                            if (v16 != v49)\n                            {\n                                v45 = (unsigned int)sub_408ab0();\n                            }\n                            free(v4);\n                            if (v2 == 0)\n                            {\n                                break;\n                            }\n                            sub_405a10();\n                        }\n                        if (v42 != v13 && (v43 == 47 || v43 != 0) && (v17 != 0 || v43 != 47))\n                        {\n                            v19 = v42 - v13;\n                            if (v17 == 46 && v0 == 2 && v13[1] == 46 && v42 - v13 != 1)\n                            {\n                                v20 = v42;\n                                if (v15 > v45 + 1)\n                                {\n                                    v21 = &v15[-1];\n                                    if (v15[-2] == 47 || v45 >= &v15[-1])\n                                    {\n                                        v15 = v21;\n                                    }\n                                }\n                            }\n                            if (v17 != 46 || v0 != 2 && v42 - v13 != 1 || v13[1] != 46 && v42 - v13 != 1)\n                            {\n                                if (v15[-1] != 47)\n                                {\n                                    *(v15) = 47;\n                                    v15 = &v15[1];\n                                }\n                                if (v16 <= &v15[v0])\n                                {\n                                    v22 = &v15[-1 * v45];\n                                    v0 = v19;\n                                    v23 = (0x1000 <= v0? &v16[-1 * v45 + v0 + 1] : &v16[-1 * v45 + 0x1000]);\n                                    v45 = (unsigned int)sub_408ab0();\n                                    v16 = v23 + v45;\n                                    v15 = v22 + v45;\n                                }\n                                *((unsigned long *)&v0) = v0;\n                                memcpy(v15, v13, v0);\n                                v15 = &v15[*((long long *)&v0)];\n                                *(v15) = 0;\n                                if (v6 == 0 || v1 != 2)\n                                {\n                                    v26 = v45;\n                                    if (v6 != 0)\n                                    {\n                                        v27 = __xstat(0x1, v26, (unsigned int)&v8) != 0;\n                                    }\n                                    else\n                                    {\n                                        v27 = __lxstat() != 0;\n                                    }\n                                    if (v27 != 0)\n                                    {\n                                        v47 = __errno_location();\n                                        v50 = *(v47);\n                                        if (v1 == 1)\n                                        {\n                                            v7 = v50;\n                                            v0 = v47;\n                                            v28 = strspn((unsigned int)v42, 0x40d01e);\n                                            v47 = v0;\n                                            v50 = v7;\n                                        }\n                                    }\n                                    else if (((unsigned short)v9 & 0xf000) == 0xa000)\n                                    {\n                                        if (v2 != 0)\n                                        {\n                                            v29 = sub_404e00();\n                                            if (v29 == 0)\n                                            {\n                                                sub_404d70();\n                                                v31 = (unsigned long long)(unsigned int)sub_40a2b0();\n                                                if (v31 != 0)\n                                                {\n                                                    v32 = strlen(v31);\n                                                    v33 = strlen(v42);\n                                                    if (v5 == 0)\n                                                    {\n                                                        v0 = v33;\n                                                        *((int *)&v5) = (0x1000 <= v0? v0 : 0x1000);\n                                                        v4 = (unsigned int)sub_408a50();\n                                                    }\n                                                    else if (v0 > v5)\n                                                    {\n                                                        v0 = v32 + v33 + 1;\n                                                        v3 = v33;\n                                                        v4 = (unsigned int)sub_408ab0();\n                                                        v5 = v0;\n                                                    }\n                                                    memmove(v4 + v32, v42, v33 + 1);\n                                                    v38 = memcpy(v4, v31, v32);\n                                                    v39 = v45 + 1;\n                                                    v42 = v38;\n                                                    *((void **)&v3[0]) = v38;\n                                                    if (*(v31) == 47)\n                                                    {\n                                                        *((char *)v45) = 47;\n                                                        v15 = v39;\n                                                    }\n                                                    else if (v15 > v15)\n                                                    {\n                                                        v40 = &v15[-1];\n                                                        if (v45 < &v15[-1])\n                                                        {\n                                                            v41 = v15[-2];\n                                                            v15 = v40;\n                                                            if (v41 != 47)\n                                                            {\n                                                                do\n                                                                {\n                                                                    v15 = &v15[-1];\n                                                                }\n                                                                while (v45 != v15 && v15[-1] != 47);\n                                                            }\n                                                        }\n                                                    }\n                                                    free(v31);\n                                                }\n                                                else\n                                                {\n                                                    v48 = __errno_location();\n                                                    v52 = *(v48);\n                                                }\n                                            }\n                                            if ((v29 == 0 || v1 != 2) && (v31 == 0 || v29 != 0) && (v1 == 12 || v1 != 2))\n                                            {\n                                                *((unsigned long *)&v1) = v52;\n                                                v0 = v48;\n                                                free(v4);\n                                                free(v45);\n                                                v51 = v0;\n                                                v52 = v1;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v2 = (unsigned int)sub_4057d0();\n                                            sub_408ca0(); /* do not return */\n                                        }\n                                    }\n                                }\n                                if ((v1 == 2 || v1 != 0) && (v1 == 2 || v1 != 1) && (v1 == 2 || v27 != 0) && (v6 != 0 || v1 != 0) && (v6 != 0 || v1 != 1) && (v6 != 0 || v27 != 0))\n                                {\n                                    v9 = 0;\n                                }\n                                if (v1 != 2)\n                                {\n                                    if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v29 != 0)\n                                    {\n                                        v48 = __errno_location();\n                                    }\n                                    if (v42[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000))\n                                    {\n                                        v47 = __errno_location();\n                                    }\n                                }\n                                if (((unsigned short)v9 & 0xf000) == 0x4000 && v27 == 0 && ((unsigned short)v9 & 0xf000) != 0xa000 && (v6 == 0 || v1 != 2) || v29 == 0 && v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v31 != 0 && (v6 == 0 || v1 != 2) || v42[0] == 0 && (v1 == 2 || v27 == 0 || v1 != 0) && (v1 == 2 || v27 == 0 || v1 != 1) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000) && (v27 == 0 || v6 != 0 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v6 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000) || v1 == 2 && v42[0] != 0 && (v1 == 2 || v27 == 0 || v1 != 0) && (v1 == 2 || v27 == 0 || v1 != 1) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000) && (v27 == 0 || v6 != 0 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v6 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000))\n                                {\n                                    v43 = v42[0];\n                                    v44 = v42;\n                                }\n                                if (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v42 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v42 + v28)) == 0 && (unsigned int)v50 != 2 && v1 != 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v42[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000))\n                                {\n                                    *((unsigned long long *)&v1) = v50;\n                                    v0 = v47;\n                                    free(v4);\n                                    free(v45);\n                                    v51 = v0;\n                                    v52 = v1;\n                                }\n                                if (v6 == 0 && v1 == 2 && v29 == 0 && v31 == 0 && v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v1 != 12 || v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v29 != 0 && (v6 == 0 || v1 != 2) && v1 == 2 || v1 == 1 && *((char *)(v42 + v28)) == 0 && v1 != 0 && v27 != 0 && (v6 == 0 || v1 != 2) && (unsigned int)v50 == 2)\n                                {\n                                    v43 = v18[1];\n                                    v35 = v42;\n                                }\n                                if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && (v6 == 0 || v1 != 2) && (v29 == 0 || v1 != 2) && (v31 == 0 || v29 != 0) && (v1 == 12 || v1 != 2) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v42 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v42 + v28)) == 0 && (unsigned int)v50 != 2 && v1 != 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v42[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000)))\n                                {\n                                    *((unsigned long *)&v1) = v52;\n                                    v0 = v51;\n                                    sub_405a10();\n                                    v52 = v1;\n                                    v51 = v0;\n                                }\n                                if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && (v6 == 0 || v1 != 2) && (v29 == 0 || v1 != 2) && (v31 == 0 || v29 != 0) && (v1 == 12 || v1 != 2) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v42 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v42 + v28)) == 0 && (unsigned int)v50 != 2 && v1 != 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v42[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000)) || (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v42 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v42 + v28)) == 0 && (unsigned int)v50 != 2 && v1 != 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && v42[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000)) && v2 == 0)\n                                {\n                                    *((unsigned long *)&v51) = v52;\n                                    v45 = 0;\n                                }\n                            }\n                            if (v17 == 46 && (v45 < &v15[-1] || v42 - v13 == 1) && (v0 == 2 || v42 - v13 == 1) && (v13[1] == 46 || v42 - v13 == 1) && (v42 - v13 == 1 || v15 > v45 + 1) && (v42 - v13 == 1 || v15[-2] != 47))\n                            {\n                                v25 = v42;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v45 = 0;\n                *(__errno_location()) = 2;\n            }\n        }\n    }\n    if (v12 == 0 || ((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) != 0)\n    {\n        v45 = 0;\n        *(__errno_location()) = 22;\n    }\n    v55 = v45;\n    return v55;\n}\n"
        },
        {
            "funcName": "sub_407e80",
            "funcStartAddr": "0x407e80",
            "funcEndAddr": "0x407e96",
            "decompiledFuncCode": "int sub_407e80()\n{\n}\n"
        },
        {
            "funcName": "sub_405fb0",
            "funcStartAddr": "0x405fb0",
            "funcEndAddr": "0x40616f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_405fb0()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    uint128_t|unsigned long long|unsigned int|unsigned long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_3 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    uint128_t|unsigned int|unsigned long v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_2 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_405030() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_405150();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_405af0() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403730",
            "funcStartAddr": "0x403730",
            "funcEndAddr": "0x403741",
            "decompiledFuncCode": "int sub_403730()\n{\n}\n"
        },
        {
            "funcName": "sub_404950",
            "funcStartAddr": "0x404950",
            "funcEndAddr": "0x404958",
            "decompiledFuncCode": "extern unsigned long long g_6113f8;\n\nint sub_404950()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6113f8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404201",
            "funcStartAddr": "0x404201",
            "funcEndAddr": "0x40423c",
            "decompiledFuncCode": "extern int512_t g_40cea0;\n\nint sub_404201()\n{\n    return *((int *)&((char *)&g_40cea0)[4 * (unsigned long long)(unsigned int)sub_40a670()]);\n}\n"
        },
        {
            "funcName": "sub_40b2e0",
            "funcStartAddr": "0x40b2e0",
            "funcEndAddr": "0x40b2e5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40b2e0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4084a0",
            "funcStartAddr": "0x4084a0",
            "funcEndAddr": "0x4084ab",
            "decompiledFuncCode": "int sub_4084a0()\n{\n}\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e34",
            "decompiledFuncCode": "int sub_404e00()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_405560() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406190",
            "funcStartAddr": "0x406190",
            "funcEndAddr": "0x4061b7",
            "decompiledFuncCode": "int sub_406190()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_40a7f0() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_403a10",
            "funcStartAddr": "0x403a10",
            "funcEndAddr": "0x403bea",
            "decompiledFuncCode": "extern unsigned int g_40ce0d;\n\nint sub_403a10()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // r8\n    unsigned long v5;  // rdi\n    unsigned long v6;  // rcx\n    unsigned long v7;  // rdx\n    unsigned long long v9;  // al\n    unsigned long v10;  // rcx\n    unsigned int|unsigned long v11;  // edx\n    unsigned long v12;  // r11\n    char v13;  // r10b\n    unsigned long long v14;  // r11\n    unsigned long long v15;  // r9\n    unsigned long long v16;  // r10\n    char *|char [2] v17;  // rbp\n    char *v18;  // rbx\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rdx\n    char v21;  // dl\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // rax\n\n    v4 = (char)*((char *)(v3 + 1));\n    v15 = (char)*((char *)(v5 + 1));\n    v0 = v6;\n    v1 = v7;\n    v9 = 0;\n    if (*((char *)(v3 + 1)) == 47 == *((char *)(v5 + 1)) == 47)\n    {\n        v11 = (char)*((char *)v5);\n        v16 = (char)*((char *)v3);\n        if (*((char *)v3) != 0)\n        {\n            v9 = *((char *)v3) != *((char *)v5) | *((char *)v5) == 0;\n            if (*((char *)v5) == 0 == 0 && v16 == v11)\n            {\n                v10 = 2;\n                v11 = 0;\n                while (true)\n                {\n                    v12 = v10 - 1;\n                    v11 = (unsigned int)(v16 == 47? (unsigned int)(v10 - 1) : (unsigned int)rdx<8>);\n                    v13 = v15 == 0;\n                    if (v13 == 0 && v4 == v15 && v4 != 0)\n                    {\n                        v14 = (char)*((char *)(v3 + v10));\n                        v15 = (char)*((char *)(v5 + v10));\n                        v16 = v4;\n                        v10 += 1;\n                        v4 = v14;\n                    }\n                    if ((unsigned int)v11 == 0 && (v13 == 0 || v4 != 0) && (v13 == 0 || v4 != 47) && (v15 != 47 || v4 != 0) && (v4 == 0 || v13 != 0 || v4 != v15))\n                    {\n                        break;\n                    }\n                    if (v15 == 47 && v4 == 0 || v4 == 0 && v13 != 0 || v4 == 47 && v13 != 0)\n                    {\n                        v11 = v12;\n                    }\n                    if (v15 == 47 && v4 == 0 || v4 == 0 && v13 != 0 || v4 == 0 && (unsigned int)v11 != 0 || v4 == 47 && v13 != 0 || v13 != 0 && (unsigned int)v11 != 0 || (unsigned int)v11 != 0 && v4 != v15)\n                    {\n                        v17 = v3 + v11;\n                        v18 = v5 + v11;\n                        v19 = (char)*((char *)(v3 + v11));\n                        if (*((char *)(v3 + v11)) == 47)\n                        {\n                            v19 = v17[1];\n                            v17 = &v17[1];\n                        }\n                        v20 = 0;\n                        v21 = *(v18) == 47;\n                        if (v19 == 0)\n                        {\n                            v23 = (unsigned int)sub_403990();\n                        }\n                        else\n                        {\n                            v23 = (unsigned int)sub_403990();\n                            v24 = v17[0];\n                            if (v17[0] != 0)\n                            {\n                                do\n                                {\n                                    if (v24 == 47)\n                                    {\n                                        v23 = (unsigned int)v23 | sub_403990();\n                                    }\n                                    v17 = &v17[1];\n                                    v24 = *(v17);\n                                }\n                                while ((char)v24 != 0);\n                            }\n                            if (v18[rdx<8>] != 0)\n                            {\n                                v23 = (unsigned int)v23 | sub_403990() | sub_403990();\n                            }\n                        }\n                        if (v23 != 0)\n                        {\n                            dcgettext(0x0, 0x40ce0d, 0x5);\n                            error(0x0, 0x24, \"%s\");\n                        }\n                        v9 = (unsigned int)v23 ^ 1;\n                    }\n                }\n            }\n            else\n            {\n                v9 = 0;\n            }\n        }\n    }\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4029d1",
            "funcStartAddr": "0x4029d1",
            "funcEndAddr": "0x402a28",
            "decompiledFuncCode": "extern char g_6113c8;\nextern unsigned long long g_6113d0;\n\nint sub_4029d1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_6113c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_6113d0 >= 0)\n            {\n                break;\n            }\n            g_6113d0 = g_6113d0 + 1;\n            *((long long *)(6360640 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_6113c8 = 1;\n        return sub_40297b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b9a0",
            "funcStartAddr": "0x40b9a0",
            "funcEndAddr": "0x40ba18",
            "decompiledFuncCode": "int sub_40b9a0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_408ec0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4080f0",
            "funcStartAddr": "0x4080f0",
            "funcEndAddr": "0x408208",
            "decompiledFuncCode": "int sub_4080f0()\n{\n    char v0;  // [bp-0x158]\n    unsigned long v1;  // [bp-0x150]\n    char v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long long|char v5;  // rbx\n    unsigned long v8;  // r13\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    void *v11;  // rbp\n    void *v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n\n    v5 = 0;\n    v8 = (unsigned int)sub_404d00();\n    v9 = sub_404d00();\n    if (v8 == v9)\n    {\n        v10 = memcmp((unsigned long long)(unsigned int)sub_404ca0(), (unsigned long long)(unsigned int)sub_404ca0(), v8);\n        if (v10 == 0)\n        {\n            v11 = (unsigned long long)(unsigned int)sub_404bc0();\n            v12 = (unsigned long long)(unsigned int)sub_404bc0();\n            v13 = __xstat(0x1, (unsigned int)v11, (unsigned int)&v0);\n            if (v13 == 0)\n            {\n                v14 = __xstat(0x1, (unsigned int)v12, (unsigned int)&v2);\n                if (v14 == 0)\n                {\n                    v5 = 0;\n                    if (v1 == v3)\n                    {\n                        v5 = *((long long *)&v0) == *((long long *)&v2);\n                    }\n                    free(v11);\n                    free(v12);\n                }\n                else\n                {\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v10 != 0 || v8 != v9 || v14 == 0 && v13 == 0)\n    {\n        v15 = v5;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_405cf0",
            "funcStartAddr": "0x405cf0",
            "funcEndAddr": "0x405f46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_4 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_2;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_4;\n\nint sub_405cf0()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_3 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_2 *v12;  // rdx\n    uint128_t|unsigned int|unsigned long v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_4 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    uint128_t|unsigned int|unsigned long v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_405030();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_405150();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_405af0();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_405030();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0 && v33 != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_404be0",
            "funcStartAddr": "0x404be0",
            "funcEndAddr": "0x404c38",
            "decompiledFuncCode": "int sub_404be0()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_404ca0();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_407ae0",
            "funcStartAddr": "0x407ae0",
            "funcEndAddr": "0x407af1",
            "decompiledFuncCode": "int sub_407ae0()\n{\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4051ca",
            "decompiledFuncCode": "extern int512_t g_40cfa0;\n\nint sub_405150()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4247456)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || ((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n        {\n            *(v1) = &g_40cfa0;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402210",
            "funcEndAddr": "0x40290a",
            "decompiledFuncCode": "extern unsigned int g_40bba4;\nextern unsigned int g_40bcb9;\nextern unsigned int g_40bcc7;\nextern unsigned int g_40bd11;\nextern unsigned int g_40bd37;\nextern unsigned int g_40cab8;\nextern unsigned int g_40cb28;\nextern unsigned int g_40cb50;\nextern unsigned int g_40cbc0;\nextern unsigned int g_40e307;\nextern char g_6112f0;\nextern unsigned int g_61137c;\nextern unsigned long long g_6113d8;\nextern char g_6113e0;\nextern char g_6113e1;\nextern char g_6113e2;\nextern char g_6113e3;\nextern char g_6113e4;\nextern char g_6113e5;\nextern char g_6113e6;\nextern unsigned int g_6113e8;\nextern unsigned long long g_6115a0;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x208]\n    unsigned long long v1;  // [bp-0xf8]\n    unsigned long long|unsigned long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    unsigned int v4;  // [bp-0xd0]\n    char v5;  // [bp-0xc9]\n    char v6;  // [bp-0xc8]\n    unsigned int v7;  // [bp-0xb0]\n    unsigned long long v9;  // r15\n    unsigned long v10;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // r12\n    unsigned long long v16;  // r13\n    unsigned long v17;  // rdi\n    unsigned long long v18;  // rbx\n    unsigned int v19;  // rsi\n    unsigned long long v20;  // rbp\n    unsigned long long v23;  // rbx\n    unsigned long long v24;  // rbp\n    unsigned long v25;  // r13\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rcx\n    char *v28;  // rdi\n    unsigned long long v30;  // rax\n    char v31;  // cc_dep2\n    unsigned long v32;  // d\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rbx\n    unsigned int v36;  // eax\n    unsigned long long v38;  // rax\n    unsigned int *v40;  // rax\n    unsigned int v41;  // r12\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rbx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // rbx\n    unsigned long long v47;  // r15\n    unsigned int|unsigned long v51;  // r14\n    unsigned long long v52;  // r14\n\n    v9 = 0;\n    v10 = 0;\n    v16 = 0;\n    v14 = 0;\n    sub_406260();\n    setlocale(0x6, 0x40e307);\n    bindtextdomain(0x40bcb9, 0x40cab8);\n    textdomain(0x40bcb9);\n    sub_40bb40();\n    g_6113e0 = 0;\n    g_6113e1 = 0;\n    g_6113e3 = 0;\n    g_6113e2 = 0;\n    g_6113e6 = 0;\n    v2 = 0;\n    while (true)\n    {\n        v13 = sub_40a1b0();\n        if ((unsigned int)v13 == -1)\n        {\n            v18 = (unsigned int)v17 - g_61137c;\n            v20 = v19 + (int)g_61137c * 8;\n            if ((unsigned int)v17 - g_61137c <= 0)\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40bd11, 0x5));\n            }\n            else if (v14 == 0)\n            {\n                if (v16 == 0)\n                {\n                    v16 = \".\";\n                    if ((unsigned int)v17 - g_61137c != 1)\n                    {\n                        v25 = *((long long *)(v20 + v18 * 8 - 8));\n                        v3 = v20 + v18 * 8 - 8;\n                        v26 = sub_404ca0();\n                        v27 = -1;\n                        v28 = v26;\n                        v30 = v14;\n                        while (v27 != 0)\n                        {\n                            v27 -= 1;\n                            v31 = *(v28);\n                            v28 = &v28[v32];\n                            break;\n                        }\n                        v4 = 1;\n                        if (!(rcx<8>) != 1)\n                        {\n                            v36 = (char)(*((char *)(v26 + !(rcx<8>) - 1 - 1)) == 47);\n                            v4 = v36;\n                        }\n                        v5 = (char)v4 & 1;\n                        if (g_6112f0 != 0)\n                        {\n                            v38 = __xstat(0x1, v25, (unsigned int)&v6);\n                        }\n                        else\n                        {\n                            v38 = __lxstat();\n                        }\n                        if (v38 != 0)\n                        {\n                            v40 = __errno_location();\n                            v41 = *(v40);\n                            if (v41 <= 40 && *(v40) != 0)\n                            {\n                                v0 = 1168232153092;\n                            }\n                        }\n                        if (v38 == 0 || *(v40) == 0)\n                        {\n                            if ((char)((v7 & 0xf000) == 0x4000) < (unsigned long long)v5)\n                            {\n                                v41 = 0;\n                            }\n                            else if (((unsigned short)v7 & 0xf000) == 0x4000)\n                            {\n                                v18 = (unsigned int)v18 - 1;\n                                v16 = *((long long *)(v20 + v18 * 8));\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if (v16 != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cb50, 0x5));\n                }\n                else if ((unsigned int)v17 - g_61137c != 2)\n                {\n                    if ((unsigned int)v17 - g_61137c != 1)\n                    {\n                        v34 = (unsigned int)sub_407c30();\n                    }\n                    else\n                    {\n                        v33 = (unsigned int)sub_407c30();\n                    }\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v19, 0x5));\n                }\n            }\n        }\n        else if ((unsigned int)v13 != 98)\n        {\n            if (v13 > 98)\n            {\n                if ((unsigned int)v13 == 110)\n                {\n                    g_6112f0 = 0;\n                }\n                else if (v13 <= 110)\n                {\n                    if ((unsigned int)v13 == 102)\n                    {\n                        g_6113e2 = 1;\n                        g_6113e3 = 0;\n                    }\n                    if ((unsigned int)v13 == 105)\n                    {\n                        g_6113e2 = 0;\n                        g_6113e3 = 1;\n                    }\n                }\n                else if ((unsigned int)v13 == 115)\n                {\n                    g_6113e6 = 1;\n                }\n                else if (v13 > 115)\n                {\n                    if ((unsigned int)v13 == 116)\n                    {\n                        if (!(v16 == 0))\n                        {\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cb28, 0x5));\n                        }\n                        else if (__xstat(0x1, g_6115a0, (unsigned int)&v6) == 0)\n                        {\n                            v16 = g_6115a0;\n                            v23 = (unsigned int)sub_407c30();\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40bcc7, 0x5));\n                        }\n                        else\n                        {\n                            v24 = (unsigned int)sub_407c30();\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40bba4, 0x5));\n                        }\n                    }\n                    if ((unsigned int)v13 == 118)\n                    {\n                        g_6113e1 = 1;\n                    }\n                }\n                else if ((unsigned int)v13 == 114)\n                {\n                    g_6113e5 = 1;\n                }\n            }\n            else\n            {\n                if ((unsigned int)v13 == 76)\n                {\n                    g_6113e4 = 1;\n                }\n                else if (v13 > 76)\n                {\n                    if ((unsigned int)v13 == 83)\n                    {\n                        v10 = 1;\n                        v2 = g_6115a0;\n                    }\n                    if ((unsigned int)v13 == 84)\n                    {\n                        v14 = 1;\n                    }\n                    if ((unsigned int)v13 == 80)\n                    {\n                        g_6113e4 = 0;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v13 == -130)\n                    {\n                        sub_4032b0(); /* do not return */\n                    }\n                    if ((unsigned int)v13 == -131)\n                    {\n                        v1 = 0;\n                        sub_408910();\n                        exit(0x0); /* do not return */\n                    }\n                }\n            }\n        }\n        if ((unsigned int)v13 == 98)\n        {\n            v10 = 1;\n            v9 = (g_6115a0 != 0? g_6115a0 : r15<8>);\n        }\n        if (v13 <= 98 && (unsigned int)v13 == 70 && v13 <= 76 && (unsigned int)v13 != -1 && (unsigned int)v13 != -130 && (unsigned int)v13 != 76 && (unsigned int)v13 != 98 || v13 <= 110 && (unsigned int)v13 == 100 && v13 > 98 && (unsigned int)v13 != -1 && (unsigned int)v13 != 105 && (unsigned int)v13 != 102 && (unsigned int)v13 != 110 && (unsigned int)v13 != 98)\n        {\n            g_6113e0 = 1;\n        }\n        if ((unsigned int)v17 - g_61137c <= 0 && (unsigned int)v13 == -1 || (unsigned int)v13 == -1 && v16 == 0 && (unsigned int)v17 - g_61137c > 0 && (unsigned int)v17 - g_61137c != 2 && v14 != 0 || v13 <= 98 && v13 <= 76 && (unsigned int)v13 != -1 && (unsigned int)v13 != 70 && (unsigned int)v13 != -130 && (unsigned int)v13 != 76 && (unsigned int)v13 != 98 && (unsigned int)v13 != -131 || v13 <= 98 && (unsigned int)v13 != -1 && (unsigned int)v13 != 84 && (unsigned int)v13 != 80 && v13 > 76 && (unsigned int)v13 != 76 && (unsigned int)v13 != 83 && (unsigned int)v13 != 98 || v13 <= 110 && v13 > 98 && (unsigned int)v13 != -1 && (unsigned int)v13 != 105 && (unsigned int)v13 != 100 && (unsigned int)v13 != 102 && (unsigned int)v13 != 110 && (unsigned int)v13 != 98 || v13 <= 115 && v13 > 98 && (unsigned int)v13 != -1 && (unsigned int)v13 != 115 && v13 > 110 && (unsigned int)v13 != 114 && (unsigned int)v13 != 110 && (unsigned int)v13 != 98 || (unsigned int)v13 != 116 && v13 > 98 && (unsigned int)v13 != -1 && (unsigned int)v13 != 115 && v13 > 110 && (unsigned int)v13 != 118 && (unsigned int)v13 != 110 && (unsigned int)v13 != 98 && v13 > 115)\n        {\n            sub_4032b0(); /* do not return */\n        }\n        if ((unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && v41 <= 40 && (unsigned int)v17 - g_61137c > 0 && v38 != 0 && *(v40) != 0 && (unsigned int)v17 - g_61137c != 1 && ((char)((char)*(&((char *)stack_base)[((v41 & 63) >> 3) + -520]) >> (unsigned long long)(char)(v41 & 63 & 7)) & 1) == 0 || (unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && (unsigned int)v17 - g_61137c > 0 && v38 != 0 && *(v40) != 0 && (unsigned int)v17 - g_61137c != 1 && v41 > 40)\n        {\n            v42 = (unsigned int)sub_407c30();\n            error(0x1, v41, (unsigned long long)dcgettext(0x0, 0x40bba4, 0x5));\n        }\n        if (((unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && v41 <= 40 && (unsigned int)v17 - g_61137c > 0 && v38 != 0 && *(v40) != 0 && (unsigned int)v17 - g_61137c != 1 && ((char)((char)*(&((char *)stack_base)[((v41 & 63) >> 3) + -520]) >> (unsigned long long)(char)(v41 & 63 & 7)) & 1) != 0 && v4 == 0 || (unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && (unsigned int)v17 - g_61137c > 0 && (unsigned int)v17 - g_61137c != 1 && (v38 == 0 || *(v40) == 0) && (char)((v7 & 0xf000) == 0x4000) >= (unsigned long long)v5 && ((unsigned short)v7 & 0xf000) != 0x4000) && (unsigned int)v18 != 2)\n        {\n            v45 = (unsigned int)sub_407c30();\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40bcc7, 0x5));\n        }\n        if ((unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && v41 <= 40 && (unsigned int)v17 - g_61137c > 0 && v38 != 0 && *(v40) != 0 && (unsigned int)v17 - g_61137c != 1 && ((char)((char)*(&((char *)stack_base)[((v41 & 63) >> 3) + -520]) >> (unsigned long long)(char)(v41 & 63 & 7)) & 1) != 0 && v4 != 0 || (unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && (unsigned int)v17 - g_61137c > 0 && (unsigned int)v17 - g_61137c != 1 && (v38 == 0 || *(v40) == 0) && (char)((v7 & 0xf000) == 0x4000) < (unsigned long long)v5)\n        {\n            v43 = (unsigned int)sub_407c30();\n            error(0x1, v41, (unsigned long long)dcgettext(0x0, 0x40bcc7, 0x5));\n        }\n        if (((unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && v41 <= 40 && (unsigned int)v17 - g_61137c > 0 && v38 != 0 && *(v40) != 0 && (unsigned int)v17 - g_61137c != 1 && ((char)((char)*(&((char *)stack_base)[((v41 & 63) >> 3) + -520]) >> (unsigned long long)(char)(v41 & 63 & 7)) & 1) != 0 && v4 == 0 || (unsigned int)v13 == -1 && v14 == 0 && v16 == 0 && (unsigned int)v17 - g_61137c > 0 && (unsigned int)v17 - g_61137c != 1 && (v38 == 0 || *(v40) == 0) && (char)((v7 & 0xf000) == 0x4000) >= (unsigned long long)v5 && ((unsigned short)v7 & 0xf000) != 0x4000) && (unsigned int)v18 == 2 || (unsigned int)v13 == -1 && v16 == 0 && (unsigned int)v17 - g_61137c > 0 && v14 != 0 && (unsigned int)v17 - g_61137c == 2)\n        {\n            v18 = 2;\n            v16 = 0;\n        }\n        if (...)\n        {\n            v44 = 0;\n            if (v10 == 0)\n            {\n                break;\n            }\n            dcgettext(0x0, 0x40bd37, 0x5);\n            v44 = sub_404280();\n        }\n    }\n    g_6113e8 = v44;\n    sub_403ce0();\n    if (g_6113e5 != 0 && g_6113e6 == 0)\n    {\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cbc0, 0x5));\n    }\n    if (g_6113e5 == 0 || g_6113e6 != 0)\n    {\n        if (v16 != 0)\n        {\n            if ((unsigned int)v18 != 1 && g_6113e2 != 0 && g_6113e6 == 0 && g_6113e8 != 3)\n            {\n                g_6113d8 = (unsigned int)sub_4057d0();\n                if (g_6113d8 == 0)\n                {\n                    sub_408ca0(); /* do not return */\n                }\n            }\n            if ((unsigned int)v18 == 1 || g_6113e8 == 3 || g_6113e2 == 0 || g_6113d8 != 0 || g_6113e6 != 0)\n            {\n                v51 = 1;\n                v47 = v20 + (v18 - 1) * 8 + 8;\n                while (true)\n                {\n                    v20 += 8;\n                    sub_404ca0();\n                    sub_404d30();\n                    v51 &= sub_402a30();\n                    free((unsigned long long)(unsigned int)sub_404e40());\n                    if (v20 == v47)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        else\n        {\n            v51 = sub_402a30();\n        }\n        if (g_6113d8 != 0)\n        {\n            v52 = v51 ^ 1;\n            return v52;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405560",
            "funcStartAddr": "0x405560",
            "funcEndAddr": "0x4055ab",
            "decompiledFuncCode": "int sub_405560()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_405000();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_407820",
            "funcStartAddr": "0x407820",
            "funcEndAddr": "0x40782f",
            "decompiledFuncCode": "extern int512_t g_611520;\n\nint sub_407820()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_611520 : v1)) = v2;\n    return &g_611520;\n}\n"
        },
        {
            "funcName": "sub_404280",
            "funcStartAddr": "0x404280",
            "funcEndAddr": "0x4042bd",
            "decompiledFuncCode": "int sub_404280()\n{\n    char *v1;  // rsi\n    char *v2;  // rax\n\n    if (v1 == 0 || *(v1) == 0)\n    {\n        v2 = getenv(\"VERSION_CONTROL\");\n    }\n    if (v2 == 0 && v1 == 0 || v2 == 0 && *(v1) == 0 || *(v2) == 0 && v1 == 0 || *(v2) == 0 && *(v1) == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4078c0",
            "funcStartAddr": "0x4078c0",
            "funcEndAddr": "0x407932",
            "decompiledFuncCode": "extern int512_t g_611520;\n\nint sub_4078c0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_611520 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_406400();\n}\n"
        },
        {
            "funcName": "sub_40af10",
            "funcStartAddr": "0x40af10",
            "funcEndAddr": "0x40af2e",
            "decompiledFuncCode": "int sub_40af10()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __explicit_bzero_chk();\n}\n"
        },
        {
            "funcName": "sub_40b4b0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b755",
            "decompiledFuncCode": "int sub_40b4b0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x4061f2",
            "decompiledFuncCode": "int sub_4061d0()\n{\n    unsigned long long v1[3];  // rdi\n    unsigned long long v2[3];  // rsi\n\n    if (v1[1] != v2[1] || v1[2] != v2[2])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d63",
            "decompiledFuncCode": "int sub_404d30()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char *v3;  // rax\n    char v4;  // al\n\n    v2 = (*((char *)(unsigned long long)(unsigned int)sub_404ca0()) == 0? v1 : (unsigned long long)(unsigned int)sub_404ca0());\n    v3 = sub_404d00();\n    tmp_19 = (char)*((char *)(v2 + v3));\n    *((char *)(v2 + v3)) = 0;\n    v4 = (char)tmp_19 != 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_408890",
            "funcStartAddr": "0x408890",
            "funcEndAddr": "0x4088b0",
            "decompiledFuncCode": "int sub_408890()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x40369d",
            "decompiledFuncCode": "extern unsigned int g_40bc9e;\nextern unsigned int g_40bed8;\nextern unsigned int g_40bf00;\nextern unsigned int g_40bfe8;\nextern unsigned int g_40c1f0;\nextern unsigned int g_40c240;\nextern unsigned int g_40c400;\nextern unsigned int g_40c5f8;\nextern unsigned int g_40c738;\nextern unsigned int g_40c768;\nextern unsigned int g_40c7a0;\nextern unsigned int g_40c880;\nextern unsigned int g_40c960;\nextern unsigned int g_40ca18;\nextern unsigned int g_40ca60;\nextern unsigned int g_40ca80;\nextern unsigned long long stdout;\n\nint sub_4032b0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v32;  // rax\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // cc_dep2\n    unsigned long v38;  // d\n    char *v42;  // rax\n    char *v43;  // rax\n    unsigned long long v44;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x40bed8, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bf00, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40bfe8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c1f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c240, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c400, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c5f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c738, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c768, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c7a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c880, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c960, 0x5));\n        v0 = \"[\";\n        v32 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v32 = &v2;\n            v33 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v34 = \"ln\";\n            v35 = 3;\n            if ((v36 > v37) - 0 - (v36 < v37) == 0)\n            {\n                break;\n            }\n            while (v35 != 0)\n            {\n                v35 -= 1;\n                v36 = *(v34);\n                v37 = *(v33);\n                v33 = &v33[v38];\n                v34 = &v34[v38];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bc9e, 0x5));\n            v43 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40bc9e, 0x5));\n            v42 = setlocale(0x5, 0x0);\n            if (v42 != 0)\n            {\n                v44 = strncmp(v42, \"en_\", 0x3);\n            }\n            if (v44 == 0 || v42 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ca60, 0x5));\n            }\n        }\n        if ((v3 == 0 || strncmp(v43, \"en_\", 0x3) != 0) && (v3 == 0 || v43 != 0) && (v44 != 0 || v3 != 0) && (v42 != 0 || v3 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ca18, 0x5));\n        }\n        if (v3 != 0 || v44 != 0 && v42 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ca60, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ca80, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40afda",
            "funcStartAddr": "0x40afda",
            "funcEndAddr": "0x40afdf",
            "decompiledFuncCode": "int sub_40afda()\n{\n}\n"
        },
        {
            "funcName": "sub_405a10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405ae0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_405a10()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((*(v4) < v4[1] || v4[8] == 0 || v4[4] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_402a30",
            "funcStartAddr": "0x402a30",
            "funcEndAddr": "0x403236",
            "decompiledFuncCode": "extern unsigned int g_40bba4;\nextern unsigned int g_40bbb8;\nextern unsigned int g_40bbd4;\nextern unsigned int g_40bbe5;\nextern unsigned int g_40bc07;\nextern unsigned int g_40bc25;\nextern unsigned int g_40bde8;\nextern unsigned int g_40be38;\nextern unsigned int g_40be60;\nextern unsigned int g_40be88;\nextern unsigned int g_40beb0;\nextern unsigned long long g_6113d8;\nextern char g_6113e0;\nextern char g_6113e1;\nextern char g_6113e2;\nextern char g_6113e3;\nextern char g_6113e4;\nextern char g_6113e5;\nextern char g_6113e6;\nextern unsigned int g_6113e8;\n\nint sub_402a30()\n{\n    unsigned int *|void * v0;  // [bp-0x170]\n    void *|unsigned long v1;  // [bp-0x168]\n    void *|unsigned long v2;  // [bp-0x160]\n    char v3;  // [bp-0x158]\n    unsigned long v4;  // [bp-0x150]\n    unsigned long v5;  // [bp-0x148]\n    unsigned int v6;  // [bp-0x140]\n    unsigned long v7;  // [bp-0xc8]\n    unsigned long v8;  // [bp-0xc0]\n    unsigned int v9;  // [bp-0xb0]\n    unsigned long long v11;  // rdi\n    unsigned long long v12;  // r12\n    unsigned int v13;  // esi\n    unsigned int v14;  // ebp\n    char v17;  // al\n    char v18;  // al\n    unsigned long long v19;  // r15\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // r13\n    unsigned long long v22;  // rbx\n    unsigned long long v23;  // rax\n    unsigned int v24;  // r14d\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rbx\n    unsigned long long v28;  // r12\n    unsigned long long v29;  // rbx\n    char *v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rbp\n    unsigned long long v34;  // rbx\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // r14\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r13\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // rbp\n    unsigned long long v42;  // r14\n    unsigned long v43;  // rsi\n    void *v44;  // rax\n    unsigned long long v45;  // r14\n    unsigned long long v46;  // rax\n    void *v47;  // rax\n    unsigned int v51;  // eax\n    char *v53;  // rdx\n    unsigned int v54;  // eax\n    unsigned long long v56;  // rax\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // rbx\n    unsigned long long v59;  // rax\n\n    v12 = v11;\n    v14 = v13;\n    v58 = g_6113e6;\n    if (g_6113e6 == 0)\n    {\n        if (g_6113e4 != 0)\n        {\n            v18 = __xstat(0x1, v11, (unsigned int)&v3) != 0;\n        }\n        else\n        {\n            v17 = __lxstat() != 0;\n        }\n        if ((g_6113e4 == 0 && rax<4> == 0 || rax<4> == 0 && g_6113e4 != 0) && ((unsigned short)v6 & 0xf000) == 0x4000)\n        {\n            v19 = g_6113e0;\n            if (g_6113e0 == 0)\n            {\n                v22 = (unsigned int)sub_407d00();\n            }\n        }\n        if ((g_6113e4 == 0 || rax<4> != 0) && (g_6113e4 != 0 || rax<4> != 0))\n        {\n            v20 = (unsigned int)sub_407c30();\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40bba4, 0x5));\n        }\n    }\n    if (g_6113e6 != 0 || g_6113e4 == 0 && rax<4> == 0 && ((unsigned short)v6 & 0xf000) != 0x4000 || rax<4> == 0 && g_6113e4 != 0 && ((unsigned short)v6 & 0xf000) != 0x4000)\n    {\n        v19 = 0;\n    }\n    if (rax<4> == 0 || rax<4> == 0 || g_6113e0 != 0)\n    {\n        v21 = g_6113e2;\n    }\n    if (g_6113e3 == 0 && g_6113e2 == 0 && (g_6113e4 == 0 || rax<4> == 0 || g_6113e6 != 0) && (rax<4> == 0 || g_6113e4 != 0 || g_6113e6 != 0) && (g_6113e0 != 0 || ((unsigned short)v6 & 0xf000) != 0x4000 || g_6113e6 != 0) && g_6113e8 != 0 || g_6113e2 == 0 && (g_6113e4 == 0 || rax<4> == 0 || g_6113e6 != 0) && (rax<4> == 0 || g_6113e4 != 0 || g_6113e6 != 0) && (g_6113e0 != 0 || ((unsigned short)v6 & 0xf000) != 0x4000 || g_6113e6 != 0) && g_6113e3 != 0 || (g_6113e6 != 0 || g_6113e4 == 0 && rax<4> == 0 && g_6113e0 != 0 || g_6113e4 == 0 && rax<4> == 0 && ((unsigned short)v6 & 0xf000) != 0x4000 || rax<4> == 0 && g_6113e4 != 0 && g_6113e0 != 0 || rax<4> == 0 && g_6113e4 != 0 && ((unsigned short)v6 & 0xf000) != 0x4000) && g_6113e2 != 0)\n    {\n        v23 = __lxstat();\n        v24 = v23;\n        if ((unsigned int)v23 != 0)\n        {\n            if (*(v0) == 2)\n            {\n            }\n            else\n            {\n                v0 = __errno_location();\n                v27 = (unsigned int)sub_407c30();\n                v58 = 0;\n                error(0x0, *(v0), (unsigned long long)dcgettext(0x0, 0x40bba4, 0x5));\n            }\n        }\n        else\n        {\n            if (g_6113d8 != 0)\n            {\n                v26 = sub_404e00();\n                if (v26 == 0)\n                {\n                    v21 = g_6113e2;\n                }\n                else\n                {\n                    v28 = (unsigned int)sub_407b50();\n                    v29 = (unsigned int)sub_407b50();\n                    v30 = dcgettext(0x0, 0x40bde8, 0x5);\n                }\n            }\n        }\n    }\n    if (((g_6113e3 == 0 && g_6113e2 == 0 && (g_6113e4 == 0 || rax<4> == 0 || g_6113e6 != 0) && (rax<4> == 0 || g_6113e4 != 0 || g_6113e6 != 0) && (g_6113e0 != 0 || ((unsigned short)v6 & 0xf000) != 0x4000 || g_6113e6 != 0) && g_6113e8 != 0 || g_6113e2 == 0 && (g_6113e4 == 0 || rax<4> == 0 || g_6113e6 != 0) && (rax<4> == 0 || g_6113e4 != 0 || g_6113e6 != 0) && (g_6113e0 != 0 || ((unsigned short)v6 & 0xf000) != 0x4000 || g_6113e6 != 0) && g_6113e3 != 0 || (g_6113e6 != 0 || g_6113e4 == 0 && rax<4> == 0 && g_6113e0 != 0 || g_6113e4 == 0 && rax<4> == 0 && ((unsigned short)v6 & 0xf000) != 0x4000 || rax<4> == 0 && g_6113e4 != 0 && g_6113e0 != 0 || rax<4> == 0 && g_6113e4 != 0 && ((unsigned short)v6 & 0xf000) != 0x4000) && g_6113e2 != 0) && (unsigned int)v23 == 0 && g_6113d8 != 0 && v26 == 0 || (g_6113e3 == 0 && g_6113e2 == 0 && (g_6113e4 == 0 || rax<4> == 0 || g_6113e6 != 0) && (rax<4> == 0 || g_6113e4 != 0 || g_6113e6 != 0) && (g_6113e0 != 0 || ((unsigned short)v6 & 0xf000) != 0x4000 || g_6113e6 != 0) && g_6113e8 != 0 || g_6113e2 == 0 && (g_6113e4 == 0 || rax<4> == 0 || g_6113e6 != 0) && (rax<4> == 0 || g_6113e4 != 0 || g_6113e6 != 0) && (g_6113e0 != 0 || ((unsigned short)v6 & 0xf000) != 0x4000 || g_6113e6 != 0) && g_6113e3 != 0 || (g_6113e6 != 0 || g_6113e4 == 0 && rax<4> == 0 && g_6113e0 != 0 || g_6113e4 == 0 && rax<4> == 0 && ((unsigned short)v6 & 0xf000) != 0x4000 || rax<4> == 0 && g_6113e4 != 0 && g_6113e0 != 0 || rax<4> == 0 && g_6113e4 != 0 && ((unsigned short)v6 & 0xf000) != 0x4000) && g_6113e2 != 0) && (unsigned int)v23 == 0 && g_6113d8 == 0) && v21 != 0 && g_6113e8 == 0 && g_6113e6 != 0)\n    {\n        v31 = __xstat(0x1, v11, (unsigned int)&v3);\n    }\n    if (...)\n    {\n        v32 = sub_4080f0();\n    }\n    if (...)\n    {\n        if (((unsigned short)v9 & 0xf000) != 0x4000)\n        {\n            v58 = g_6113e3;\n            if (g_6113e3 != 0)\n            {\n                v36 = (unsigned int)sub_407c30();\n                dcgettext(0x0, 0x40bbd4, 0x5);\n                __fprintf_chk();\n                v37 = sub_408d10();\n                if (v37 != 0)\n                {\n                    g_6113e2 = 1;\n                }\n            }\n        }\n        else\n        {\n            v34 = (unsigned int)sub_407d00();\n        }\n    }\n    if (...)\n    {\n        v33 = (unsigned int)sub_407b50();\n        v35 = (unsigned int)sub_407b50();\n        v30 = dcgettext(0x0, 0x40bbb8, 0x5);\n    }\n    if (...)\n    {\n        v58 = 0;\n        error(0x0, 0x0, v30);\n    }\n    if (...)\n    {\n        v58 = 0;\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v13, 0x5));\n    }\n    if (...)\n    {\n        v38 = (unsigned int)sub_404240();\n        v39 = rename(v14, v38);\n        if (v39 != 0)\n        {\n            free(v38);\n            if ((unsigned int)v11 != 2)\n            {\n                v41 = (unsigned int)sub_407c30();\n                v43 = (unsigned int)*(__errno_location());\n                v58 = 0;\n                error(0x0, v43, (unsigned long long)dcgettext(0x0, 0x40bbe5, 0x5));\n            }\n        }\n    }\n    if (...)\n    {\n        v38 = 0;\n    }\n    if (...)\n    {\n        v42 = 0;\n        if (g_6113e5 != 0)\n        {\n            v2 = (unsigned long long)(unsigned int)sub_404bc0();\n            v44 = sub_4042d0();\n            v45 = v44;\n            v0 = v44;\n            v1 = (unsigned long long)(unsigned int)sub_4042d0();\n            if (v45 != 0 && v1 != 0)\n            {\n                v42 = (unsigned int)sub_408a50();\n                v46 = sub_403a10();\n                if (v46 != 0)\n                {\n                    free(v2);\n                    free(v0);\n                    free(v1);\n                    if (v42 != 0)\n                    {\n                        v12 = v42;\n                    }\n                }\n                else\n                {\n                    free(v42);\n                }\n            }\n            if (v1 == 0 || v45 == 0 || v46 == 0)\n            {\n                free(v2);\n                free(v0);\n                free(v1);\n            }\n            if (v1 == 0 || v42 == 0 || v45 == 0 || v46 == 0)\n            {\n                v47 = sub_408c80();\n                v12 = v47;\n                v42 = v47;\n            }\n        }\n        if (g_6113e6 == 0)\n        {\n            v58 = (unsigned long long)(unsigned int)!(sub_403750()) % 0x80000000;\n        }\n        else\n        {\n            v58 = (unsigned long long)(unsigned int)!(sub_403890()) % 0x80000000;\n        }\n        if (v58 != 0)\n        {\n            if (g_6113e6 == 0)\n            {\n                sub_404d70();\n            }\n            if (g_6113e1 != 0)\n            {\n                if (v38 != 0)\n                {\n                    __printf_chk(0x1, \"%s ~ \", sub_407c30());\n                }\n                __printf_chk(0x1, \"%s %c> %s\\n\", sub_407b50(), (g_6113e6 != 0? 45 : 61), sub_407b50());\n            }\n        }\n        else\n        {\n            v1 = (unsigned int)sub_407b50();\n            v2 = (unsigned int)sub_407b50();\n            v0 = __errno_location();\n            if (g_6113e6 != 0)\n            {\n                if (*(v0) != 36 && *((char *)v12) != 0)\n                {\n                    v53 = (unsigned long long)dcgettext(0x0, 0x40be38, 0x5);\n                }\n                if (*((char *)v12) == 0 || *(v0) == 36)\n                {\n                    v53 = (unsigned long long)dcgettext(0x0, 0x40be60, 0x5);\n                }\n            }\n            else\n            {\n                v51 = *(v0);\n                if (*(v0) != 31)\n                {\n                    if (v51 != 122 && v51 != 17)\n                    {\n                        v54 = v51 & -3;\n                    }\n                    if (v51 == 122 || v51 == 17 || v54 == 28)\n                    {\n                        v53 = (unsigned long long)dcgettext(0x0, 0x40bc07, 0x5);\n                    }\n                }\n                else if (v19 == 0)\n                {\n                    v53 = (unsigned long long)dcgettext(0x0, 0x40be88, 0x5);\n                }\n                if ((*(v0) == 31 || v51 != 122) && (*(v0) == 31 || v51 != 17) && (*(v0) == 31 || v54 != 28) && (*(v0) != 31 || v19 != 0))\n                {\n                    v53 = (unsigned long long)dcgettext(0x0, 0x40beb0, 0x5);\n                }\n            }\n            error(0x0, *(v0), v53);\n            if (v38 != 0)\n            {\n                v56 = rename(v38, v14);\n                if (v56 != 0)\n                {\n                    v57 = (unsigned int)sub_407c30();\n                    error(0x0, *(v0), (unsigned long long)dcgettext(0x0, 0x40bc25, 0x5));\n                }\n            }\n        }\n        free(v38);\n        free(v42);\n    }\n    v59 = v58;\n    return v59;\n}\n"
        },
        {
            "funcName": "sub_40795b",
            "funcStartAddr": "0x40795b",
            "funcEndAddr": "0x407a21",
            "decompiledFuncCode": "int sub_40795b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_406400();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_408a50();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_406400();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b300",
            "funcStartAddr": "0x40b300",
            "funcEndAddr": "0x40b442",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40b300()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_40b4b0();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_40b4b0();\n                        }\n                    }\n                    sub_40b4b0();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_409460",
            "funcStartAddr": "0x409460",
            "funcEndAddr": "0x409535",
            "decompiledFuncCode": "int sub_409460()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_407b00",
            "funcStartAddr": "0x407b00",
            "funcEndAddr": "0x407b0a",
            "decompiledFuncCode": "int sub_407b00()\n{\n}\n"
        },
        {
            "funcName": "sub_405f70",
            "funcStartAddr": "0x405f70",
            "funcEndAddr": "0x405fa4",
            "decompiledFuncCode": "int sub_405f70()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_405cf0();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40a550",
            "funcStartAddr": "0x40a550",
            "funcEndAddr": "0x40a65f",
            "decompiledFuncCode": "extern unsigned int g_40e344;\nextern unsigned long long stderr[7];\n\nint sub_40a550()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40e344, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_407e80();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_407e80();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_408c50",
            "funcStartAddr": "0x408c50",
            "funcEndAddr": "0x408c78",
            "decompiledFuncCode": "int sub_408c50()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_408a50();\n}\n"
        },
        {
            "funcName": "sub_40a830",
            "funcStartAddr": "0x40a830",
            "funcEndAddr": "0x40ad84",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40e307;\nextern char g_611598[2];\n\nint sub_40a830()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_611598;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40e307 : (unsigned long long)nl_langinfo(0xe));\n    if (g_611598 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40e307;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v63 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v63;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40e307;\n                                        v10 = (tmp_10 == 0? &g_40e307 : tmp_10);\n                                        free(NULL);\n                                        sub_40b9a0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v62 = (unsigned int)*(v62);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)((unsigned int)v62 != -1);\n                                    }\n                                }\n                                while (v63 != 0 && v62 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40e307 : tmp_10);\n                            sub_40b9a0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && v62 == -1)\n                    {\n                        v9 = &g_40e307;\n                    }\n                    else if (((unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && v62 == -1) && v0 != 0 || v38 == 0 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40e307;\n            free(v17);\n        }\n        *((char *[2])&g_611598[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_40e307 : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_4057b0",
            "funcStartAddr": "0x4057b0",
            "funcEndAddr": "0x4057d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_4057b0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_408910",
            "funcStartAddr": "0x408910",
            "funcEndAddr": "0x4089c8",
            "decompiledFuncCode": "int sub_408910()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4084b0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40a3a0",
            "funcStartAddr": "0x40a3a0",
            "funcEndAddr": "0x40a3aa",
            "decompiledFuncCode": "int sub_40a3a0()\n{\n}\n"
        },
        {
            "funcName": "sub_407cd0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407ce1",
            "decompiledFuncCode": "int sub_407cd0()\n{\n}\n"
        },
        {
            "funcName": "sub_405af0",
            "funcStartAddr": "0x405af0",
            "funcEndAddr": "0x405ce0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_405af0()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_404f40();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_4051d0();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_4051d0();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_4051d0();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 && v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v0 == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_28->field_10 != 0 && v11->field_10 != *((long long *)&v2))\n    {\n        v21 = 0;\n    }\n    if (v11->field_10 != *((long long *)&v2) || (char)v21 != 0)\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a210",
            "funcStartAddr": "0x40a210",
            "funcEndAddr": "0x40a228",
            "decompiledFuncCode": "int sub_40a210()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409b60();\n}\n"
        },
        {
            "funcName": "sub_40add0",
            "funcStartAddr": "0x40add0",
            "funcEndAddr": "0x40adff",
            "decompiledFuncCode": "int sub_40add0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = (unsigned int)sub_40aff0();\n    v2 = 0;\n    if (v1 != 0)\n    {\n        v2 = sub_408a50();\n        *((unsigned long long *)v2) = v1;\n        *((long long *)(v2 + 16)) = 0;\n        *((long long *)(v2 + 8)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40a130",
            "funcStartAddr": "0x40a130",
            "funcEndAddr": "0x40a186",
            "decompiledFuncCode": "extern unsigned int g_611374;\nextern unsigned int g_611378;\nextern unsigned int g_61137c;\nextern unsigned int g_611560;\nextern unsigned int g_611564;\nextern unsigned int g_611568;\nextern unsigned long long g_611570;\nextern unsigned long long g_6115a0;\n\nint sub_40a130()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_611560 = g_61137c;\n    g_611564 = g_611378;\n    v1 = (unsigned int)v2;\n    v0 = &g_611560;\n    g_61137c = g_611560;\n    g_6115a0 = g_611570;\n    g_611374 = g_611568;\n    return sub_409b60();\n}\n"
        },
        {
            "funcName": "sub_40297b",
            "funcStartAddr": "0x40297b",
            "funcEndAddr": "0x40299a",
            "decompiledFuncCode": "extern unsigned long long g_611388;\n\nint sub_40297b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_611388;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40b2f0",
            "funcStartAddr": "0x40b2f0",
            "funcEndAddr": "0x40b2f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40b2f0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_403d40",
            "funcStartAddr": "0x403d40",
            "funcEndAddr": "0x4041de",
            "decompiledFuncCode": "extern unsigned long long g_6113f0;\n\nint sub_403d40()\n{\n    unsigned long long v0;  // [bp-0x90]\n    void *v1;  // [bp-0x88]\n    unsigned long long|unsigned short|char|unsigned long v2;  // [bp-0x80]\n    unsigned long long v3;  // [bp-0x78]\n    unsigned int|unsigned long v4;  // [bp-0x70]\n    unsigned long v5;  // [bp-0x68]\n    unsigned int v6;  // [bp-0x60]\n    unsigned int v7;  // [bp-0x58]\n    unsigned long v8;  // [bp-0x50]\n    unsigned long long|unsigned long v9;  // [bp-0x48]\n    unsigned int v10;  // [bp-0x40]\n    void *v12;  // rdi\n    unsigned long long|unsigned int *|unsigned short *|void * v13;  // rbx\n    unsigned int v14;  // esi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v19;  // r12\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    char|unsigned long v29;  // r8b\n    unsigned long long v30;  // rax\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rdx\n    unsigned long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // rsi\n    char v38;  // sil\n    unsigned long long v40;  // rax\n    unsigned int|unsigned long v41;  // rdx\n    char *v42;  // rax\n    unsigned long long v43;  // r15\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rbp\n    unsigned long long|char * v49;  // r14\n    unsigned long long v50;  // rax\n    unsigned int v52;  // ebp\n    unsigned long long v53;  // rdi\n    unsigned int *v54;  // rbx\n    unsigned long long v57;  // rdi\n    unsigned long long v58;  // rax\n\n    v13 = v12;\n    v1 = v12;\n    v7 = v14;\n    v49 = (unsigned long long)(unsigned int)sub_404ca0() - v12;\n    v15 = &v49[strlen(v49)];\n    v0 = v15;\n    if (g_6113f0 == 0)\n    {\n        sub_403ce0();\n    }\n    v17 = strlen(g_6113f0);\n    *((unsigned long long *)&v10) = v17 + 1;\n    *((unsigned long long *)&v6) = v0 + 1;\n    v8 = (9 <= v17 + 1? v17 + 1 : 9) + v0 + 1;\n    v43 = malloc((9 <= v17 + 1? v17 + 1 : 9) + v0 + 1);\n    if (v43 != 0)\n    {\n        v19 = 0;\n        while (true)\n        {\n            memcpy(v43, v1, *((long long *)&v6));\n            if (v7 != 1)\n            {\n                v13 = &v49[v43];\n                v22 = (unsigned int)sub_404d00();\n                if (v19 != 0)\n                {\n                    rewinddir(v19);\n                }\n                else\n                {\n                    v23 = *(v13);\n                    *(v13) = 46;\n                    *((unsigned long long *)&v2) = v23;\n                    v19 = (unsigned int)sub_404b20();\n                    if (v19 != 0)\n                    {\n                        *(v13) = v2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                    else\n                    {\n                        v3 = v44;\n                        __errno_location();\n                        *(v13) = v2;\n                        v46 = 0 + 2;\n                        *((int *)v3) = 2117172782;\n                        *((char *)(v3 + 4)) = 0;\n                    }\n                }\n                if (v19 != 0 || v19 != 0)\n                {\n                    v46 = 2;\n                    v3 = 1;\n                    v4 = v8;\n                    v5 = v22 + 4;\n                    while (true)\n                    {\n                        v25 = readdir();\n                        if (v25 == 0)\n                        {\n                            break;\n                        }\n                        while (true)\n                        {\n                            v13 = v25 + 19;\n                            v26 = strlen(v25 + 19);\n                            if (v26 < v5)\n                            {\n                                break;\n                            }\n                            v2 = v22 + 2;\n                            v27 = memcmp(&v49[v43], v13, v22 + 2);\n                            if (v27 != 0)\n                            {\n                                break;\n                            }\n                            v13 += v2;\n                            v28 = (char)*((char *)v13);\n                            if ((v28 - 49 & 255) > 8)\n                            {\n                                break;\n                            }\n                            v44 = 1;\n                            v29 = v28 == 57;\n                            v30 = (char)*((char *)(v13 + 1));\n                            if (*((char *)(v13 + v44 + 1)) != 0 || v30 != 126)\n                            {\n                                break;\n                            }\n                            if ((unsigned int)(char)*((char *)(v13 + 1)) - 48 <= 9)\n                            {\n                                do\n                                {\n                                    v44 += 1;\n                                    v29 &= (unsigned int)v30;\n                                    v30 = (char)*((char *)(v13 + v44));\n                                }\n                                while ((unsigned int)(char)*((char *)(v13 + v44)) - 48 <= 9);\n                            }\n                            v45 = v3;\n                            v32 = v3;\n                            if (v3 >= v44)\n                            {\n                                v9 = v44;\n                                *((unsigned long *)&v2) = v29;\n                                if (v32 != v44)\n                                {\n                                    break;\n                                }\n                                v33 = memcmp(v43 + v0 + 2, v13, v45);\n                                v29 = v2;\n                                v44 = v9;\n                                if (v33 > 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v34 = v29;\n                            v46 = v29;\n                            v3 = v9 + v44;\n                            v35 = v0 + v9 + v44 + 4;\n                            if (v0 + v9 + v44 + 4 > v4)\n                            {\n                                v37 = 0;\n                                v38 = [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>);\n                                if (rsi<8> == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    *((unsigned long *)&v4) = v4 * 2;\n                                }\n                                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=stack_base-112, size=8, endness=Iend_LE), Load(addr=stack_base-112, size=8, endness=Iend_LE), cc_ndep<8>) || rsi<8> != 0)\n                                {\n                                    *((unsigned long *)&v4) = v35;\n                                }\n                                v9 = v34;\n                                v2 = v44;\n                                v36 = realloc(v43, *((long long *)&v4));\n                                if (v36 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v36 = v43;\n                            }\n                            v9 = v36;\n                            v2 = v44;\n                            *((short *)(v0 + v36)) = 32302;\n                            *((char *)(v0 + v36 + 2)) = 48;\n                            v40 = memcpy(v0 + v36 + v9 + 2, v13, v44 + 2);\n                            v41 = (char)*((char *)(v2 + v40 - 1));\n                            v42 = v2 + v40 - 1;\n                            if (v41 == 57)\n                            {\n                                do\n                                {\n                                    *(v42) = 48;\n                                    v42 = &v42[-1];\n                                    v41 = *(v42);\n                                }\n                                while (*(v42) == 57);\n                            }\n                            v45 = (unsigned long long)v41 + 1;\n                            v43 = v9;\n                            *((unsigned long long *)&v42) = v45;\n                            v25 = readdir();\n                        }\n                        if (true)\n                        {\n                            v25 = readdir();\n                        }\n                        else\n                        {\n                            v53 = v43;\n                            v43 = 0;\n                            free(v53);\n                            *(__errno_location()) = 12;\n                        }\n                    }\n                    if (false)\n                    {\n                        v53 = v43;\n                        v43 = 0;\n                        free(v53);\n                        *(__errno_location()) = 12;\n                    }\n                }\n                if (v7 == 2)\n                {\n                    memcpy(v43 + v0, g_6113f0, *((long long *)&v10));\n                    v7 = 1;\n                }\n                if (v46 == 3 || v19 != 0 || v19 != 0)\n                {\n                    v53 = v43;\n                    v43 = 0;\n                    free(v53);\n                    *(__errno_location()) = 12;\n                }\n                sub_403c10();\n            }\n            else\n            {\n                memcpy(v43 + v0, g_6113f0, *((long long *)&v10));\n            }\n            if (v45 != 0)\n            {\n                if (v19 != 0)\n                {\n                    v45 = dirfd(v19);\n                }\n                if (v19 == 0 || (unsigned int)v45 < 0)\n                {\n                    v49 = 0;\n                }\n                v50 = sub_407ea0();\n                if (v50 != 0)\n                {\n                    v52 = *(v13);\n                    v13 = __errno_location();\n                    if (v19 != 0)\n                    {\n                        closedir();\n                    }\n                    v57 = v43;\n                    v43 = 0;\n                    free(v57);\n                    *(v54) = v52;\n                }\n            }\n            if (v45 == 0 || v50 == 0)\n            {\n                if (v19 == 0)\n                {\n                    break;\n                }\n                closedir();\n            }\n        }\n    }\n    v58 = v43;\n    return v58;\n}\n"
        },
        {
            "funcName": "sub_40621a",
            "funcStartAddr": "0x40621a",
            "funcEndAddr": "0x406233",
            "decompiledFuncCode": "int sub_40621a()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4057d0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x405950",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_404fe0;\nextern int512_t g_404ff0;\nextern int512_t g_40cfa0;\n\nint sub_4057d0()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t|void v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_405150();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_40cfa0;\n            v3 = sub_405150();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v2 != 0 || v3 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v5;\n        }\n        if ((v2 == 0 || v4 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 != 0 || v3 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (v2->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0))\n        {\n            v13 = (unsigned int)sub_404f40();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_404fe0 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_404ff0 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_40ae10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40aefb",
            "decompiledFuncCode": "int sub_40ae10()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3f]\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // r15\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    char *v11;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned long v15;  // rsi\n    unsigned long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rbp\n\n    v4 = v3;\n    v6 = v5 + 1;\n    v7 = v5;\n    v14 = v3[1];\n    v13 = v3[2];\n    while (true)\n    {\n        if (v13 < v7)\n        {\n            v8 = v13;\n            v9 = 0;\n            do\n            {\n                v9 += 1;\n                v8 = v8 * 0x100 + 255;\n            }\n            while (v7 > v8);\n            sub_40b300();\n            v11 = &v0;\n            do\n            {\n                v11 = &v1;\n                v13 = v13 * 0x100 + 255;\n                v14 = v14 * 0x100 + v0;\n            }\n            while (v7 > v13);\n        }\n        if (v13 == v7 && v13 < v7 || v13 == v7 && v13 >= v7)\n        {\n            v4[2] = 0;\n            v4[1] = 0;\n        }\n        if (v13 < v7 && v13 != v7 || v13 >= v7 && v13 != v7)\n        {\n            v15 = (0 CONCAT v13 - v7) % v6 >> 64;\n            v16 = (0 CONCAT v13 - v7) % v6;\n            v17 = v13 - ((0 CONCAT v13 - v7) % v6 >> 64);\n            v18 = (0 CONCAT v14) % v6;\n            v19 = (0 CONCAT v14) % v6 >> 64;\n            if (v14 > v17)\n            {\n                v13 = v15 - 1;\n                v20 = v19;\n            }\n            else\n            {\n                v4[1] = v18;\n                v4[2] = v16;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_408ca0",
            "funcStartAddr": "0x408ca0",
            "funcEndAddr": "0x408ccc",
            "decompiledFuncCode": "extern unsigned int g_40e1cf;\nextern unsigned int g_611300;\n\nint sub_408ca0()\n{\n    dcgettext(0x0, 0x40e1cf, 0x5);\n    error(g_611300, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_408aa0",
            "funcStartAddr": "0x408aa0",
            "funcEndAddr": "0x408aa2",
            "decompiledFuncCode": "int sub_408aa0()\n{\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x4063df",
            "decompiledFuncCode": "extern int512_t g_40d026;\nextern int512_t g_40d02a;\n\nint sub_406300()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40a830();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40d026 : 4247601);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40d02a : 4247597);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_407932",
            "funcStartAddr": "0x407932",
            "funcEndAddr": "0x40795b",
            "decompiledFuncCode": "int sub_407932()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_408c00",
            "funcStartAddr": "0x408c00",
            "funcEndAddr": "0x408c17",
            "decompiledFuncCode": "int sub_408c00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_408a50();\n}\n"
        },
        {
            "funcName": "sub_408430",
            "funcStartAddr": "0x408430",
            "funcEndAddr": "0x40845b",
            "decompiledFuncCode": "int sub_408430()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_4082d0();\n    }\n    sub_4082b0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a7f0",
            "funcStartAddr": "0x40a7f0",
            "funcEndAddr": "0x40a822",
            "decompiledFuncCode": "int sub_40a7f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407e40",
            "funcStartAddr": "0x407e40",
            "funcEndAddr": "0x407e52",
            "decompiledFuncCode": "int sub_407e40()\n{\n}\n"
        },
        {
            "funcName": "sub_409540",
            "funcStartAddr": "0x409540",
            "funcEndAddr": "0x409b3e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_2 *field_20;\n} struct_1;\n\nextern unsigned int g_40e1e0;\nextern unsigned int g_40e200;\nextern unsigned int g_40e230;\nextern unsigned int g_40e250;\nextern unsigned int g_40e280;\nextern unsigned long long stderr;\n\nint sub_409540()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_1 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_2 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40e1e0, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40e200, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40e280, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40e250, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40e230, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bb40",
            "funcStartAddr": "0x40bb40",
            "funcEndAddr": "0x40bb58",
            "decompiledFuncCode": "extern int512_t g_6112e8;\n\nint sub_40bb40()\n{\n}\n"
        },
        {
            "funcName": "sub_40aff0",
            "funcStartAddr": "0x40aff0",
            "funcEndAddr": "0x40b2cc",
            "decompiledFuncCode": "extern char g_40af90;\n\nint sub_40aff0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    void *v7;  // r13\n    unsigned short v8;  // dx\n    unsigned int v9;  // r15d\n    unsigned long long v10;  // r14\n    unsigned long long v12[2];  // rbx\n    unsigned long long v13;  // rbx\n    unsigned long long v15;  // rbp\n    unsigned long long v17;  // r15\n    unsigned long v18;  // rbp\n    char *v20;  // rdi\n    char *v21;  // rsi\n    unsigned long long v22;  // rcx\n    unsigned long v23;  // d\n    unsigned long long v24;  // r14\n    char *v26;  // rsi\n    unsigned long long v27;  // rcx\n    char *v28;  // rdi\n    unsigned long v29;  // rbp\n    unsigned long long v31;  // rsi\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rbp\n    unsigned long v36;  // r14\n    unsigned long long v38;  // rsi\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rbp\n    unsigned long long v44;  // rsi\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rdx\n    unsigned long long v49;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_40ba20();\n            if (v7 != 0)\n            {\n                v12[0] = v7;\n                v12[1] = &g_40af90;\n                v12 = (unsigned long long)(unsigned int)sub_408a50();\n                v12[2] = v5;\n                setvbuf(v7, &v12[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v13 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_408a50();\n            v6[1] = &g_40af90;\n            v6[2] = 0;\n            v6[3] = 0;\n            v9 = open(\"/dev/urandom\", 0x0, v8);\n            if (v9 >= 0)\n            {\n                v15 = __read_chk(v9, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v9);\n                if (v15 <= 2047)\n                {\n                    tmp_2 = v15;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v17 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15);\n                    v18 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v20 = v17;\n                    v21 = &v1;\n                    for (v22 = v0; v22 != 0; v21 = &v21[v23])\n                    {\n                        v22 -= 1;\n                        *(v20) = v1;\n                        v20 = &v20[v23];\n                    }\n                    if (v18 <= 2047)\n                    {\n                        v24 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v26 = &v1;\n                        v1 = getpid();\n                        v27 = v24;\n                        v10 = v24 + v18;\n                        for (v28 = (char *)&v6[4] + v18; v27 != 0; v26 = &v26[v23])\n                        {\n                            v27 -= 1;\n                            *(v28) = v1;\n                            v28 = &v28[v23];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v10 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v13 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v13 + 48)) = v1;\n            }\n            if (v9 < 0 || v10 <= 2047 && v18 <= 2047 && v15 <= 2047)\n            {\n                v29 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v31 = (char *)&v6[4] + v10;\n                v1 = getppid();\n                if ((unsigned int)v29 != 0)\n                {\n                    v33 = 0;\n                    do\n                    {\n                        v34 = v33;\n                        v33 = (unsigned int)v33 + 1;\n                        *((char *)(v31 + v34)) = v1;\n                    }\n                    while ((unsigned int)v33 < (unsigned int)v29);\n                }\n                v35 = v29 + v10;\n                if (v35 <= 2047)\n                {\n                    v36 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v38 = (char *)&v6[4] + v35;\n                    v1 = getuid();\n                    if ((unsigned int)v36 != 0)\n                    {\n                        v40 = 0;\n                        do\n                        {\n                            v41 = v40;\n                            v40 = (unsigned int)v40 + 1;\n                            *((char *)(v38 + v41)) = v1;\n                        }\n                        while ((unsigned int)v40 < (unsigned int)v36);\n                    }\n                    v42 = v35 + v36;\n                    if (v42 <= 2047)\n                    {\n                        v44 = (char *)&v6[4] + v42;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v42 <= 4)? 4 : 0x800 - v42) != 0)\n                        {\n                            v46 = 0;\n                            do\n                            {\n                                v47 = v46;\n                                v46 = (unsigned int)v46 + 1;\n                                *((char *)(v44 + v47)) = v1;\n                            }\n                            while ((unsigned int)v46 < (!(0x800 - v42 <= 4)? 4 : 0x800 - v42));\n                        }\n                    }\n                }\n            }\n            sub_40b760();\n        }\n    }\n    else\n    {\n        v13 = (unsigned int)sub_408a50();\n        *((long long *)v13) = 0;\n        *((char **)(v13 + 8)) = &g_40af90;\n        *((long long *)(v13 + 16)) = 0;\n    }\n    v49 = v13;\n    return v49;\n}\n"
        },
        {
            "funcName": "sub_407e10",
            "funcStartAddr": "0x407e10",
            "funcEndAddr": "0x407e23",
            "decompiledFuncCode": "int sub_407e10()\n{\n}\n"
        },
        {
            "funcName": "sub_404240",
            "funcStartAddr": "0x404240",
            "funcEndAddr": "0x40425a",
            "decompiledFuncCode": "int sub_404240()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_403d40();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_408ca0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4053a0",
            "funcStartAddr": "0x4053a0",
            "funcEndAddr": "0x405402",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4053a0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v2[1] == 0 || *(v2) == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406200",
            "funcStartAddr": "0x406200",
            "funcEndAddr": "0x406217",
            "decompiledFuncCode": "int sub_406200()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408a50",
            "funcStartAddr": "0x408a50",
            "funcEndAddr": "0x408a6a",
            "decompiledFuncCode": "int sub_408a50()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_408ca0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a1d0",
            "funcStartAddr": "0x40a1d0",
            "funcEndAddr": "0x40a1e5",
            "decompiledFuncCode": "int sub_40a1d0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409b60();\n}\n"
        },
        {
            "funcName": "sub_403ce0",
            "funcStartAddr": "0x403ce0",
            "funcEndAddr": "0x403d26",
            "decompiledFuncCode": "extern char *g_6113f0;\n\nint sub_403ce0()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    unsigned long long v3;  // rax\n\n    v2 = v1;\n    if (v1 == 0)\n    {\n        v3 = getenv(\"SIMPLE_BACKUP_SUFFI\");\n        v2 = v3;\n    }\n    if ((v3 != 0 || v1 != 0) && *(v2) != 0)\n    {\n        v3 = sub_404ca0();\n        if (v3 == v2)\n        {\n            g_6113f0 = v2;\n            return v3;\n        }\n    }\n    if (*(v2) == 0 || v3 != v2 || v3 == 0 && v1 == 0)\n    {\n        g_6113f0 = \"~\";\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_403990",
            "funcStartAddr": "0x403990",
            "funcEndAddr": "0x4039fe",
            "decompiledFuncCode": "extern unsigned long long stdout;\n\nint sub_403990()\n{\n    unsigned long long *v1;  // rsi\n    char *v2;  // rdi\n    unsigned long long *v5;  // rdx\n    unsigned long long *v7;  // rdi\n    unsigned long long v8;  // rbx\n\n    if (*(v1) != 0)\n    {\n        v8 = strlen(v7);\n        if (*(v5) <= v8)\n        {\n            return 1;\n        }\n        memcpy(*(v7), v7, v8 + 1);\n        *(v1) = *(v1) + v8;\n        *(v5) = *(v5) - v8;\n        return 0;\n    }\n    fputs_unlocked(v2, stdout);\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40a190",
            "funcStartAddr": "0x40a190",
            "funcEndAddr": "0x40a1a8",
            "decompiledFuncCode": "int sub_40a190()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40a130();\n}\n"
        },
        {
            "funcName": "sub_408220",
            "funcStartAddr": "0x408220",
            "funcEndAddr": "0x408271",
            "decompiledFuncCode": "int sub_408220()\n{\n    unsigned int v1;  // ebx\n    unsigned int *v2;  // rax\n    unsigned int v4;  // eax\n    char v5;  // al\n\n    v1 = __lxstat();\n    v2 = __errno_location();\n    if (v1 != 0 && *(v2) != 75)\n    {\n        v4 = 0;\n        v5 = *(v2) != 2;\n        return 0 - rax<4>;\n    }\n    if (*(v2) == 75 || v1 == 0)\n    {\n        *(v2) = 17;\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bac0",
            "funcStartAddr": "0x40bac0",
            "funcEndAddr": "0x40bace",
            "decompiledFuncCode": "int sub_40bac0()\n{\n}\n"
        },
        {
            "funcName": "sub_408b20",
            "funcStartAddr": "0x408b20",
            "funcEndAddr": "0x408b98",
            "decompiledFuncCode": "int sub_408b20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x4057a1",
            "decompiledFuncCode": "int sub_405770()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408460",
            "funcStartAddr": "0x408460",
            "funcEndAddr": "0x408491",
            "decompiledFuncCode": "int sub_408460()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned int v2;  // edx\n    unsigned int v3;  // ecx\n\n    v0 = v2;\n    if (v3 <= 2)\n    {\n        return sub_4082d0();\n    }\n    sub_4082b0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408bb0",
            "funcStartAddr": "0x408bb0",
            "funcEndAddr": "0x408bfa",
            "decompiledFuncCode": "int sub_408bb0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x407630",
            "funcEndAddr": "0x4077d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_611358;\nextern uint128_t g_611360;\nextern unsigned int g_611370;\nextern int512_t g_611420;\n\nint sub_407630()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_611358;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_611370 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_611358 != 6361952)\n            {\n                v16 = sub_408ab0();\n                g_611358 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_408ab0();\n                v17 = v15;\n                g_611358 = v15;\n                *(v15) = g_611360;\n            }\n            memset(&v17[(long long)(int)g_611370], 0x0, (int)((unsigned int)v13 + 1 - g_611370) * 16);\n            g_611370 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_408ca0(); /* do not return */\n        }\n    }\n    if (g_611370 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_406400();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6362144)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_408a50();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_406400();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_409b60",
            "funcStartAddr": "0x409b60",
            "funcEndAddr": "0x40a0c7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40e2a8;\nextern unsigned int g_40e2ec;\n\nint sub_409b60()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char [2]|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long long *|unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long long *v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[2];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_409460();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_409460();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v46;\n                    *((unsigned long long **)&v0->field_0) = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = (unsigned long long)v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if ((v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_409540();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40e2a8, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40e2ec, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40e2a8, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_409540();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40ada0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40adc3",
            "decompiledFuncCode": "int sub_40ada0()\n{\n    unsigned long long v1[3];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = sub_408a50();\n    v1[0] = v2;\n    v1[2] = 0;\n    v1[1] = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40a4d0",
            "funcStartAddr": "0x40a4d0",
            "funcEndAddr": "0x40a53c",
            "decompiledFuncCode": "extern unsigned int g_40e30c;\nextern unsigned int g_40e327;\n\nint sub_40a4d0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x40e30c, 0x5);\n    }\n    dcgettext(0x0, 0x40e327, 0x5);\n    sub_407e60();\n    sub_407b50();\n}\n"
        },
        {
            "funcName": "sub_404e60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404f34",
            "decompiledFuncCode": "int sub_404e60()\n{\n    char v0;  // [bp-0x39]\n    char *v2;  // rsi\n    char *v3;  // r12\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rbx\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // r15\n    char *v11;  // rax\n    unsigned long v12;  // rdi\n    unsigned long long *v13;  // rdx\n    unsigned long long v14;  // rax\n    char v15;  // al\n\n    v3 = v2;\n    v4 = (unsigned int)sub_404ca0();\n    v5 = (unsigned int)sub_404d00();\n    v7 = v4 - v6 + v5;\n    if (v5 != 0)\n    {\n        v5 = (char)(*((char *)(v4 + v5 - 1)) != 47);\n    }\n    v0 = *(v3);\n    if (*(v3) == 47)\n    {\n        do\n        {\n            v3 = &v3[1];\n        }\n        while (*(v3) == 47);\n    }\n    v8 = strlen(v3);\n    v10 = malloc(v5 + v7 + 1 + v8);\n    if (v8 != 0)\n    {\n        v11 = mempcpy(v8, v6, v7);\n        *(v11) = 47;\n        v12 = &v11[v5];\n        if (v13 != 0)\n        {\n            v14 = 0;\n            v15 = v0 == 47;\n            *(v13) = v12 - rax<8>;\n        }\n        *((char *)(unsigned long long)mempcpy(v12, (unsigned int)v3, v8)) = 0;\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_407e60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407e71",
            "decompiledFuncCode": "int sub_407e60()\n{\n}\n"
        },
        {
            "funcName": "sub_404260",
            "funcStartAddr": "0x404260",
            "funcEndAddr": "0x404272",
            "decompiledFuncCode": "int sub_404260()\n{\n    char *v1;  // rsi\n\n    if (*(v1) == 0 || v1 == 0)\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_402a28",
            "funcStartAddr": "0x402a28",
            "funcEndAddr": "0x402a64",
            "decompiledFuncCode": "int sub_402a28() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x405a05",
            "decompiledFuncCode": "int sub_405960()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_407810",
            "funcStartAddr": "0x407810",
            "funcEndAddr": "0x40781f",
            "decompiledFuncCode": "extern int512_t g_611520;\n\nint sub_407810()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_611520 : v1));\n}\n"
        },
        {
            "funcName": "sub_40b760",
            "funcStartAddr": "0x40b760",
            "funcEndAddr": "0x40b994",
            "decompiledFuncCode": "int sub_40b760()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_404a60",
            "funcStartAddr": "0x404a60",
            "funcEndAddr": "0x404a68",
            "decompiledFuncCode": "extern unsigned long long g_611408;\n\nint sub_404a60()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_611408 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x405135",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_405030()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_405000();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v15->field_8 != 0 || v10 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v15->field_8 == 0 && v10 == 0 && v8 != v1 || v10 == 0 && v1 != *(v11) && v8 != v1)\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_408280",
            "funcStartAddr": "0x408280",
            "funcEndAddr": "0x40828a",
            "decompiledFuncCode": "int sub_408280()\n{\n}\n"
        },
        {
            "funcName": "sub_407b10",
            "funcStartAddr": "0x407b10",
            "funcEndAddr": "0x407b26",
            "decompiledFuncCode": "int sub_407b10()\n{\n}\n"
        },
        {
            "funcName": "sub_4036c0",
            "funcStartAddr": "0x4036c0",
            "funcEndAddr": "0x40371d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char field_8;\n} struct_0;\n\nint sub_4036c0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // rax\n    struct_0 *v7;  // rax\n    unsigned long long v8;  // rax\n\n    v4 = v3;\n    v5 = (unsigned int)sub_404ca0() - v1;\n    if (v5 + 9 > 0x100)\n    {\n        v4 = malloc(v5 + 9);\n        if (v4 == 0)\n        {\n            v8 = 0;\n        }\n    }\n    if (v5 + 9 <= 0x100 || v4 != 0)\n    {\n        v7 = mempcpy(v4, v1, v5);\n        v7->field_0 = 6365935209750754627;\n        v7->field_8 = 0x6e6567002e2e2f00;\n        v8 = v4;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_407e30",
            "funcStartAddr": "0x407e30",
            "funcEndAddr": "0x407e3a",
            "decompiledFuncCode": "int sub_407e30()\n{\n}\n"
        },
        {
            "funcName": "sub_408ccc",
            "funcStartAddr": "0x408ccc",
            "funcEndAddr": "0x408cd1",
            "decompiledFuncCode": "int sub_408ccc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4077d0",
            "funcStartAddr": "0x4077d0",
            "funcEndAddr": "0x407804",
            "decompiledFuncCode": "int sub_4077d0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_408c50();\n}\n"
        },
        {
            "funcName": "sub_40a670",
            "funcStartAddr": "0x40a670",
            "funcEndAddr": "0x40a6dd",
            "decompiledFuncCode": "int sub_40a670()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40a3b0();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_40a4d0();\n        sub_40a550();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405320",
            "funcStartAddr": "0x405320",
            "funcEndAddr": "0x405325",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405320()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_407d00",
            "funcStartAddr": "0x407d00",
            "funcEndAddr": "0x407d73",
            "decompiledFuncCode": "int sub_407d00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_40ae00",
            "funcStartAddr": "0x40ae00",
            "funcEndAddr": "0x40ae04",
            "decompiledFuncCode": "int sub_40ae00()\n{\n    unsigned long long *v1;  // rdi\n\n    return *(v1);\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ln.elf"
}