{
    "funcInfo": [
        {
            "funcName": "sub_404b2b",
            "funcStartAddr": "0x404b2b",
            "funcEndAddr": "0x404bf1",
            "decompiledFuncCode": "int sub_404b2b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4035d0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_406790();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4035d0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4082e0",
            "funcStartAddr": "0x4082e0",
            "funcEndAddr": "0x4082f6",
            "decompiledFuncCode": "int sub_4082e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408220();\n}\n"
        },
        {
            "funcName": "sub_405900",
            "funcStartAddr": "0x405900",
            "funcEndAddr": "0x405a42",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_405900()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_405ab0();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_405ab0();\n                        }\n                    }\n                    sub_405ab0();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_408820",
            "funcStartAddr": "0x408820",
            "funcEndAddr": "0x40889a",
            "decompiledFuncCode": "extern int512_t g_40c1a0;\n\nint sub_408820()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4243872)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_40c1a0;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_404c00",
            "funcStartAddr": "0x404c00",
            "funcEndAddr": "0x404c0a",
            "decompiledFuncCode": "int sub_404c00()\n{\n}\n"
        },
        {
            "funcName": "sub_4090e0",
            "funcStartAddr": "0x4090e0",
            "funcEndAddr": "0x4091b0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4090e0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((*(v4) < v4[1] || v4[8] == 0 || v4[4] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_4084b0",
            "funcStartAddr": "0x4084b0",
            "funcEndAddr": "0x40850c",
            "decompiledFuncCode": "int sub_4084b0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_407390();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4082a0",
            "funcStartAddr": "0x4082a0",
            "funcEndAddr": "0x4082b3",
            "decompiledFuncCode": "int sub_4082a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_408220();\n}\n"
        },
        {
            "funcName": "sub_403130",
            "funcStartAddr": "0x403130",
            "funcEndAddr": "0x4032b9",
            "decompiledFuncCode": "int sub_403130()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v2;  // rdi\n    void *v3;  // rdx\n    unsigned int *v4;  // r14\n    unsigned long long|unsigned int|char v5;  // bl\n    unsigned long|unsigned long long v6;  // bpl\n    unsigned long long v7;  // rax\n    unsigned long|unsigned long long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned long|unsigned long long|unsigned int v10;  // r15\n    unsigned long long v15;  // rax\n\n    v0 = v2;\n    v5 = fileno(v3);\n    v4 = __errno_location();\n    if (!(v5 != 1))\n    {\n        v5 = 0;\n        v6 = 0;\n    }\n    else if (v5 != 2)\n    {\n        if (v5 != 0)\n        {\n            v5 = dup2(0x2, 0x2) != 2;\n        }\n    }\n    if (v5 == 2)\n    {\n        v5 = 0;\n    }\n    if (v5 == 0)\n    {\n        v5 = 0;\n        v6 = 0;\n        v8 = 0;\n    }\n    if (v5 == 2 || v5 != 0 && v5 != 1)\n    {\n        v6 = (char)(dup2(0x1, 0x1) != 1);\n    }\n    if (v5 == 1 || v5 == 2 || v5 != 0)\n    {\n        v7 = dup2(0x0, 0x0);\n        if (v7 != 0)\n        {\n            v8 = (unsigned int)sub_4030e0();\n            if ((char)v8 != 0)\n            {\n            }\n            else\n            {\n                v8 = 1;\n                v9 = 0;\n            }\n        }\n        else\n        {\n            v8 = 0;\n        }\n        if (v6 != 0 && (v7 == 0 || (char)v8 != 0))\n        {\n            v6 = (unsigned int)sub_4030e0();\n            if ((char)v6 == 0)\n            {\n                v10 = *(v4);\n                v9 = 0;\n                if (v5 != 0)\n                {\n                    close(0x2);\n                }\n            }\n        }\n        if ((v6 == 0 && v7 == 0 || v6 == 0 && (char)v8 != 0 || v7 == 0 && (char)v6 != 0 || (char)v6 != 0 && (char)v8 != 0) && v5 != 0)\n        {\n            v5 = (unsigned int)sub_4030e0();\n            if ((char)v5 == 0)\n            {\n                v10 = *(v4);\n                v9 = 0;\n            }\n        }\n    }\n    if (v5 == 0 || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))\n    {\n        v9 = (unsigned int)sub_407450();\n    }\n    if ((char)v6 != 0 || (char)v5 != 0)\n    {\n        v10 = *(v4);\n    }\n    if ((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)))\n    {\n        close(0x2);\n    }\n    if ((char)v6 == 0 && v6 != 0 && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || ((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 != 0)\n    {\n        close(0x1);\n    }\n    if (((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 == 0 && v8 != 0 || ((char)v6 == 0 && v6 != 0 && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || ((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 != 0) && v8 != 0)\n    {\n        close(0x0);\n    }\n    if (...)\n    {\n        *((unsigned long *)&v4) = v10;\n    }\n    v15 = v9;\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_409030",
            "funcStartAddr": "0x409030",
            "funcEndAddr": "0x4090d5",
            "decompiledFuncCode": "int sub_409030()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_406940",
            "funcStartAddr": "0x406940",
            "funcEndAddr": "0x406957",
            "decompiledFuncCode": "int sub_406940()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406790();\n}\n"
        },
        {
            "funcName": "sub_402c60",
            "funcStartAddr": "0x402c60",
            "funcEndAddr": "0x402fdd",
            "decompiledFuncCode": "extern unsigned int g_40a048;\nextern unsigned int g_40a178;\nextern unsigned int g_40a1a0;\nextern unsigned int g_40a200;\nextern unsigned int g_40a248;\nextern unsigned int g_40a280;\nextern unsigned int g_40a2d0;\nextern unsigned int g_40a450;\nextern unsigned int g_40a490;\nextern unsigned int g_40a4c0;\nextern unsigned int g_40a520;\nextern unsigned int g_40a568;\nextern unsigned int g_40a588;\nextern unsigned long long stdout;\n\nint sub_402c60()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v29;  // rax\n    char *v30;  // rdi\n    char *v31;  // rsi\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // cc_dep1\n    unsigned long long v34;  // cc_dep2\n    unsigned long v35;  // d\n    char *v39;  // rax\n    char *v40;  // rax\n    unsigned long long v41;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x40a178, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a1a0, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a200, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a248, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a280, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a2d0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a450, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a490, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a4c0, 0x5), stdout);\n        v0 = \"[\";\n        v29 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v29 = &v2;\n            v30 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v31 = \"shuf\";\n            v32 = 5;\n            if ((v33 > v34) - 0 - (v33 < v34) == 0)\n            {\n                break;\n            }\n            while (v32 != 0)\n            {\n                v32 -= 1;\n                v33 = *(v31);\n                v34 = *(v30);\n                v30 = &v30[v35];\n                v31 = &v31[v35];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a048, 0x5));\n            v40 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a048, 0x5));\n            v39 = setlocale(0x5, 0x0);\n            if (v39 != 0)\n            {\n                v41 = strncmp(v39, \"en_\", 0x3);\n            }\n            if (v41 == 0 || v39 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a568, 0x5));\n            }\n        }\n        if ((v3 == 0 || strncmp(v40, \"en_\", 0x3) != 0) && (v3 == 0 || v40 != 0) && (v3 != 0 || v41 != 0) && (v3 != 0 || v39 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a520, 0x5));\n        }\n        if (v3 != 0 || v41 != 0 && v39 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a568, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a588, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402fe0",
            "funcStartAddr": "0x402fe0",
            "funcEndAddr": "0x402fe8",
            "decompiledFuncCode": "extern unsigned long long g_60f320;\n\nint sub_402fe0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60f320 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e0c",
            "decompiledFuncCode": "int sub_404e00()\n{\n}\n"
        },
        {
            "funcName": "sub_408ce0",
            "funcStartAddr": "0x408ce0",
            "funcEndAddr": "0x408d39",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_408ce0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_4086d0();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x4058e5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_4058e0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x4055ed",
            "decompiledFuncCode": "extern unsigned int g_40b578;\nextern unsigned int g_40b588;\nextern unsigned int g_60f278;\n\nint sub_405590()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_405050();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x40b588, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x40b578, 0x5);\n    }\n    error(g_60f278, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_405fa0",
            "funcStartAddr": "0x405fa0",
            "funcEndAddr": "0x406125",
            "decompiledFuncCode": "int sub_405fa0()\n{\n    unsigned long long *v0;  // [bp-0xd0]\n    char v1;  // [bp-0xc8]\n    unsigned int v2;  // [bp-0xb0]\n    unsigned long v3;  // [bp-0x98]\n    unsigned long v5;  // rsi\n    void *v6;  // rdi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbp\n    unsigned int *v10;  // r14\n    unsigned long long v11;  // rax\n    unsigned int v12;  // rsi\n    unsigned long long v13;  // rbx\n    void *v14;  // rax\n    unsigned long long v15;  // r12\n    unsigned int *v16;  // r14\n    unsigned long|unsigned int v17;  // r15d\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // rdi\n    unsigned long long v21;  // rax\n\n    v0 = v5;\n    v7 = __fxstat(0x1, fileno(v6), (unsigned int)&v1);\n    if (v7 >= 0 && ((unsigned short)v2 & 0xf000) == 0x8000)\n    {\n        v8 = ftello(v6);\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 > v8)\n        {\n            v13 = v3 - v8 + 1;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v7 < 0 || v3 <= v8 || ((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v13 = 0x2000;\n    }\n    v15 = malloc(v13);\n    if (v15 != 0)\n    {\n        v9 = 0;\n        while (true)\n        {\n            v10 = v13 - v9;\n            v11 = fread(v15 + v9, 0x1, v13 - v9, v6);\n            v9 += v11;\n            if (v10 != v11)\n            {\n                v16 = __errno_location();\n                v17 = *(v16);\n                v18 = ferror((unsigned int)v6);\n                if (v18 == 0)\n                {\n                    v19 = v13 - 1;\n                    if (v19 > v9)\n                    {\n                        v15 = (realloc(v15, v9 + 1) != 0? v18 : r12<8>);\n                    }\n                    *((char *)(v15 + v9)) = 0;\n                    *(v0) = v9;\n                }\n            }\n            else if (v13 != -1)\n            {\n                v12 = (!(v13 >> 1) <= v13? -1 : (v13 >> 1) + v13);\n                v13 = (!(v13 >> 1) <= v13? -1 : (v13 >> 1) + v13);\n                v14 = realloc(v15, v12);\n                if (v15 != 0)\n                {\n                    v15 = v14;\n                }\n                else\n                {\n                    v17 = *(v10);\n                    v10 = __errno_location();\n                }\n            }\n            else\n            {\n                v15 = 0;\n                free(v6);\n                *(__errno_location()) = 12;\n            }\n            if ((v15 == 0 || v10 != v11) && (v10 == v11 || v18 != 0) && (v13 != -1 || v10 != v11))\n            {\n                v20 = v15;\n                v15 = 0;\n                free(v20);\n                *((unsigned long *)&v16) = v17;\n            }\n        }\n    }\n    v21 = v15;\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x407630",
            "funcEndAddr": "0x407c2e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40bff8;\nextern unsigned int g_40c018;\nextern unsigned int g_40c048;\nextern unsigned int g_40c068;\nextern unsigned int g_40c098;\nextern unsigned long long stderr;\n\nint sub_407630()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40bff8, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40c018, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (*(v18) == 0 || v22 == v16) && (v22 == v16 || v4 == 0) && (v22 == v16 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40c098, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40c068, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v17) != 0 || v34 != 0))\n        {\n            return v42;\n        }\n    }\n    if (*((long long *)v17) == 0 && v28 == 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0 || v34 == 0 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40c048, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_406790",
            "funcStartAddr": "0x406790",
            "funcEndAddr": "0x4067aa",
            "decompiledFuncCode": "int sub_406790()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4069e0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_404a40",
            "funcStartAddr": "0x404a40",
            "funcEndAddr": "0x404a53",
            "decompiledFuncCode": "extern int512_t g_60f440;\n\nint sub_404a40()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60f440 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60f440 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401da0",
            "funcEndAddr": "0x402b54",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_40a063;\nextern unsigned int g_40a071;\nextern unsigned int g_40a08f;\nextern unsigned int g_40a0aa;\nextern unsigned int g_40a0d7;\nextern unsigned int g_40a0e8;\nextern unsigned int g_40a0fd;\nextern unsigned int g_40a116;\nextern unsigned int g_40a5c0;\nextern unsigned int g_40a630;\nextern unsigned int g_40a650;\nextern unsigned int g_40a678;\nextern unsigned int g_40b58c;\nextern unsigned int g_40c11f;\nextern unsigned int g_60f2dc;\nextern unsigned long long g_60f4c8;\nextern int512_t g_800000;\nextern char *stdin;\nextern unsigned long long stdout;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x100]\n    unsigned long long v1;  // [bp-0xf8]\n    unsigned long long v2;  // [bp-0xf0]\n    unsigned long long|unsigned int|char|unsigned long long * v3;  // [bp-0xe8]\n    char *|unsigned long long|char v4;  // [bp-0xe0]\n    unsigned long|unsigned long long v5;  // [bp-0xd8]\n    char v6;  // [bp-0xcf]\n    char v7;  // [bp-0xce]\n    unsigned long long|char v8;  // [bp-0xcd]\n    unsigned int v9;  // [bp-0xcc]\n    unsigned long long v10;  // [bp-0xc8]\n    unsigned int v11;  // [bp-0xb0]\n    unsigned long v12;  // [bp-0x98]\n    unsigned long|unsigned long long v14;  // r14\n    unsigned long long v15;  // r13\n    unsigned long long v18;  // rax\n    unsigned long long v21;  // rax\n    char *v22;  // r15\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rcx\n    unsigned long long v26;  // rax\n    unsigned int v27;  // cc_dep1\n    unsigned long v28;  // rdi\n    unsigned long long v32;  // rbx\n    unsigned long long v33;  // rbp\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // rdx\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rax\n    char *v39;  // rdi\n    unsigned long long v40;  // rcx\n    char v41;  // cc_dep2\n    unsigned long v42;  // d\n    unsigned long long v45;  // rbp\n    unsigned long long v46;  // r14\n    char *v47;  // r13\n    unsigned long long v49;  // rax\n    char *v50;  // rax\n    unsigned long v51;  // rsi\n    unsigned long long v53;  // rbx\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rax\n    char *v56;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned long long v58;  // rbp\n    unsigned long long v59;  // r8\n    unsigned long long v60;  // r15\n    unsigned long long v61;  // rbx\n    unsigned long v62;  // rax\n    unsigned long v63;  // rdx\n    unsigned long long v64;  // r13\n    char *v66;  // rbx\n    unsigned long long v67;  // rbx\n    char *v68;  // rdi\n    unsigned long long v69;  // rax\n    unsigned long long v71;  // r12\n    unsigned long long v73;  // rbp\n    char *v74;  // rcx\n    unsigned long long v75;  // r15\n    unsigned long long v76;  // r12\n    unsigned long long v77;  // r13\n    unsigned long long v78;  // rbx\n    unsigned long long v79;  // rax\n    unsigned long long v80;  // rax\n    unsigned long long *v82;  // rbp\n    unsigned long long v83;  // r12\n    unsigned long long v85;  // r12\n    unsigned long long|unsigned long long * v86;  // rbp\n    unsigned long long v87;  // rax\n    unsigned long long v89;  // rcx\n    char v90;  // cl\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rbx\n    unsigned long long v93;  // rax\n    unsigned long long v94;  // rbx\n    unsigned long long v95;  // rax\n    unsigned long long v96;  // rax\n    unsigned long long v97;  // rax\n    unsigned long long v98;  // r12\n    struct_0 *v99;  // rbp\n    unsigned long long v100;  // rax\n    unsigned long long v101;  // rbx\n    unsigned long long v102;  // r13\n    unsigned long long v105;  // r12\n    unsigned long long v107;  // r13\n    unsigned long long v108;  // r14\n    unsigned long long v110;  // rbp\n    unsigned long long v111;  // r13\n    unsigned long long v112;  // rax\n    unsigned long long v113;  // rbx\n    unsigned long long v114;  // rax\n    unsigned long long v115;  // rax\n    unsigned long long v116;  // r12\n    unsigned long long v117;  // rax\n    unsigned long long v118;  // rax\n\n    v14 = -1;\n    v15 = 0;\n    v85 = 0;\n    sub_403430();\n    setlocale(0x6, 0x40c11f);\n    bindtextdomain(0x40a063, 0x40a5c0);\n    textdomain(0x40a063);\n    sub_409f90();\n    v8 = 0;\n    v6 = 10;\n    v1 = 0;\n    v0 = -1;\n    v2 = 0;\n    v7 = 0;\n    while (true)\n    {\n        v18 = sub_4082a0();\n        if ((unsigned int)v18 == -1)\n        {\n            v59 = (unsigned int)v28 - g_60f2dc;\n            if (!(v85 != 0))\n            {\n                if (v7 == 0)\n                {\n                    if (v9 <= 1)\n                    {\n                        if ((unsigned int)v28 - g_60f2dc == 1)\n                        {\n                            v38 = strcmp(*((long long *)v85), \"-\");\n                            if (v38 != 0)\n                            {\n                                if (v0 == 0)\n                                {\n                                    sub_4030b0();\n                                }\n                                else\n                                {\n                                    v49 = sub_403130();\n                                    if (v49 != 0)\n                                    {\n                                        sub_4030b0();\n                                    }\n                                    else\n                                    {\n                                        v53 = (unsigned int)sub_404ed0();\n                                        error(0x1, *(__errno_location()), \"%s\");\n                                    }\n                                }\n                            }\n                        }\n                        if (v38 == 0 || (unsigned int)v28 - g_60f2dc != 1)\n                        {\n                            sub_4030b0();\n                        }\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v28 - g_60f2dc <= 0)\n                    {\n                        v86 = 0;\n                        v75 = v2 + 1 - v14;\n                    }\n                }\n                if ((v7 == 0 || (unsigned int)v28 - g_60f2dc > 0) && (v9 > 1 || v7 != 0))\n                {\n                    v37 = (unsigned int)sub_405050();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a0d7, 0x5));\n                    sub_402c60(); /* do not return */\n                }\n            }\n            else if (v7 == 0)\n            {\n                v75 = v9;\n                v36 = 0;\n                while (v9 > (unsigned int)v36)\n                {\n                    v39 = *((long long *)(v85 + v36 * 8));\n                    v40 = -1;\n                    v36 += 1;\n                    while (v40 != 0)\n                    {\n                        v40 -= 1;\n                        v41 = *(v39);\n                        v39 = &v39[v42];\n                        break;\n                    }\n                }\n                v9 = v59;\n                v3 = v85;\n                v4 = v14;\n                v45 = v6;\n                v46 = 0;\n                v5 = v15;\n                for (v47 = (unsigned long long)(unsigned int)sub_406790(); v9 > (unsigned int)v46; v47 = &v50[1])\n                {\n                    v50 = stpcpy(v47, *((long long *)(v45 + v46 * 8)));\n                    *((char **)(v45 + v46 * 8)) = v47;\n                    v46 += 1;\n                    *((unsigned long long *)&v50) = v45;\n                }\n                v45 = v51 + (int)g_60f2dc * 8;\n                v14 = v4;\n                v85 = (char)v3;\n                *((char **)(v51 + (int)g_60f2dc * 8 + v75 * 8)) = v47;\n            }\n            else\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a678, 0x5));\n            }\n        }\n        else if ((unsigned int)v18 != 110)\n        {\n            if (v18 > 110)\n            {\n                if ((unsigned int)v18 == 114)\n                {\n                    v8 = 1;\n                }\n                else if (v18 > 114)\n                {\n                    if ((unsigned int)v18 == 122)\n                    {\n                        v6 = 0;\n                    }\n                    if ((unsigned int)v18 == 128)\n                    {\n                        if (v15 != 0)\n                        {\n                            v23 = strcmp(v15, g_60f4c8);\n                            if (v23 != 0)\n                            {\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a650, 0x5));\n                            }\n                        }\n                        if (v15 == 0 || v23 == 0)\n                        {\n                            v15 = g_60f4c8;\n                        }\n                    }\n                }\n                else if ((unsigned int)v18 == 111)\n                {\n                    if (v1 != 0)\n                    {\n                        v21 = strcmp(v1, g_60f4c8);\n                        if (v21 != 0)\n                        {\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a630, 0x5));\n                        }\n                    }\n                    if (v1 == 0 || v21 == 0)\n                    {\n                        v1 = g_60f4c8;\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v18 == -130)\n                {\n                    sub_402c60(); /* do not return */\n                }\n                else if (v18 > -18446744069414584450)\n                {\n                    if ((unsigned int)v18 == 101)\n                    {\n                        v85 = 1;\n                    }\n                    if ((unsigned int)v18 == 105)\n                    {\n                        v22 = strchr(g_60f4c8, 0x2d);\n                        v3 = v22 == 0;\n                        if (v7 == 0)\n                        {\n                            if (v22 != 0)\n                            {\n                                *(v22) = 0;\n                                dcgettext(0x0, 0x40a08f, 0x5);\n                                *(v22) = 45;\n                                v14 = (unsigned int)sub_406af0();\n                                dcgettext(0x0, 0x40a08f, 0x5);\n                                v24 = sub_406af0();\n                                v25 = v24;\n                                v2 = v24;\n                                v26 = v24 - v14;\n                                if (v26 == -1 == !(v14 <= v25) && v3 == 0)\n                                {\n                                    v7 = 1;\n                                }\n                            }\n                            else\n                            {\n                                dcgettext(0x0, 0x40a08f, 0x5);\n                                sub_406af0();\n                            }\n                            if (v22 == 0 || v26 == -1 != !(v14 <= v25) || v3 != 0)\n                            {\n                                v33 = (unsigned int)sub_405050();\n                                v35 = dcgettext(0x0, 0x40a08f, 0x5);\n                                error(0x1, *(__errno_location()), \"%s: \");\n                            }\n                        }\n                        else\n                        {\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a071, 0x5));\n                        }\n                    }\n                }\n                else if ((unsigned int)v18 == -131)\n                {\n                    sub_406650();\n                    exit(0x0); /* do not return */\n                }\n            }\n        }\n        if ((unsigned int)v18 == 110)\n        {\n            if (v27 == 0)\n            {\n                *((int *)&v0) = (v0 <= v10? v0 : v10);\n            }\n            else\n            {\n                v27 = sub_406b20();\n                v32 = (unsigned int)sub_405050();\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a0aa, 0x5));\n            }\n        }\n        if ((unsigned int)v18 == -1 && v85 != 0 && v7 != 0 || v18 <= -18446744069414584450 && v18 <= 110 && (unsigned int)v18 != -1 && (unsigned int)v18 != -131 && (unsigned int)v18 != 110 && (unsigned int)v18 != -130 || v18 <= 114 && (unsigned int)v18 != 114 && (unsigned int)v18 != -1 && (unsigned int)v18 != 111 && (unsigned int)v18 != 110 && v18 > 110 || v18 <= 110 && (unsigned int)v18 != -1 && v18 > -18446744069414584450 && (unsigned int)v18 != 110 && (unsigned int)v18 != -130 && (unsigned int)v18 != 105 && (unsigned int)v18 != 101 || (unsigned int)v18 != 114 && (unsigned int)v18 != -1 && (unsigned int)v18 != 122 && (unsigned int)v18 != 110 && (unsigned int)v18 != 128 && v18 > 110 && v18 > 114)\n        {\n            sub_402c60(); /* do not return */\n        }\n        if ((unsigned int)v18 == -1 && v85 == 0 && (unsigned int)v28 - g_60f2dc == 1 && v9 <= 1 && v7 == 0 && v38 != 0 && v0 != 0 && v49 != 0 && v8 == 0 && v0 != -1 || (unsigned int)v18 == -1 && v85 == 0 && v8 == 0 && v9 <= 1 && v7 == 0 && (v38 == 0 || (unsigned int)v28 - g_60f2dc != 1) && v0 != -1 && v0 != 0)\n        {\n            v54 = __fxstat(0x1, 0x0, (unsigned int)&v10);\n            if (v54 == 0 && ((unsigned short)v11 & 0xd000) == 0x8000)\n            {\n                v55 = lseek(0x0, 0x0, 0x1);\n            }\n        }\n        if (...)\n        {\n            v5 = (unsigned int)sub_4050a0();\n            if (v5 != 0)\n            {\n                v3 = v6;\n                v61 = (v0 <= 0x400? v0 : 0x400);\n                v60 = 0;\n                v64 = (unsigned int)sub_406960();\n                while (true)\n                {\n                    if (v0 != v60)\n                    {\n                        v58 = v60 * 24;\n                        v59 = (unsigned int)sub_4032f0();\n                        if (v59 != 0)\n                        {\n                            v60 += 1;\n                            v61 += 0x400;\n                            v4 = v59;\n                            v62 = 24 * v61;\n                            v63 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x18<64>, rbx<8>, cc_ndep<8>);\n                            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v63 != 0)\n                            {\n                                break;\n                            }\n                            v64 = (unsigned int)sub_4067f0();\n                            memset(v64 + v58 + 24, 0x0, 0x6000);\n                            v59 = v4;\n                        }\n                    }\n                    else if (v59 != 0)\n                    {\n                        sub_4032e0();\n                        v4 = v14;\n                        v3 = v64;\n                        v77 = v0;\n                        while (true)\n                        {\n                            v78 = v60 + 1;\n                            v79 = sub_4050e0();\n                            v80 = sub_4032f0();\n                            if (v80 == 0)\n                            {\n                                v14 = v4;\n                                v64 = v3;\n                                if (v60 == 0)\n                                {\n                                    error(0x1, 0x4b, (unsigned long long)dcgettext(0x0, 0x40a0e8, 0x5));\n                                }\n                            }\n                            else if (v60 != 0)\n                            {\n                                v60 = v78;\n                            }\n                            else\n                            {\n                                v14 = v4;\n                                v64 = v3;\n                                v60 = 1;\n                            }\n                            if (v60 == 0 && v80 != 0 || v80 == 0 && v60 != 0)\n                            {\n                                sub_403420();\n                            }\n                        }\n                    }\n                    if (v59 == 0 || v0 == v60)\n                    {\n                        if ((*(stdin) & 32) == 0)\n                        {\n                            *((int *)&v0) = (v0 <= v60? v0 : v60);\n                            v87 = sub_407390();\n                            if (v87 != 0)\n                            {\n                                break;\n                            }\n                            v86 = 0;\n                            v75 = v0;\n                            if (v8 != 0)\n                            {\n                                break;\n                            }\n                            v89 = 1;\n                        }\n                        else\n                        {\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40b58c, 0x5));\n                        }\n                    }\n                }\n                if ((*(stdin) & 32) == 0 && (v59 == 0 || v0 == v60))\n                {\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40b58c, 0x5));\n                }\n                else if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v59 != 0 && v0 != v60 && v60 >= v61)\n                {\n                    sub_4069e0(); /* do not return */\n                }\n                else if (v8 == 0 && v87 == 0 && (*(stdin) & 32) == 0 && (v59 == 0 || v0 == v60))\n                {\n                    v8 = v89;\n                    v94 = (unsigned int)sub_4052b0();\n                }\n            }\n        }\n        if (...)\n        {\n            v3 = v6;\n            v56 = (unsigned long long)(unsigned int)sub_405fa0();\n            if (v56 != 0)\n            {\n                v66 = v10;\n                if (v10 != 0)\n                {\n                    v57 = v6;\n                    if (v6 != v56[v10 + -1])\n                    {\n                        v10 += 1;\n                        *((unsigned long long *)(v56 + v66)) = v57;\n                        v66 = v10;\n                    }\n                }\n                v67 = v66 + v56;\n                v68 = v56;\n                v69 = 0;\n                v4 = v85;\n                while (true)\n                {\n                    v71 = v69 + 1;\n                    if (v67 <= v68)\n                    {\n                        break;\n                    }\n                    v68 = (unsigned long long)(unsigned int)sub_4083a0() + 1;\n                    v69 = v71;\n                }\n                v73 = v69;\n                v74 = v56;\n                v75 = v69;\n                v76 = (char)v4;\n                if ([D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x8<64>, rbp<8>, cc_ndep<8>) == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    v4 = v74;\n                    v5 = v14;\n                    v82 = (unsigned long long)(unsigned int)sub_406790();\n                    *((unsigned long long *)&v4) = v76;\n                    *(v82) = v68;\n                    v3 = v82;\n                    for (v83 = &v82[v75]; v82 != v83; *(v82) = (unsigned long long)(unsigned int)sub_4083a0() + 1)\n                    {\n                        v82 = &v82[1];\n                    }\n                    v85 = v4;\n                    v14 = v5;\n                    v86 = v3;\n                }\n            }\n        }\n        if (...)\n        {\n            sub_4069e0(); /* do not return */\n        }\n        if (...)\n        {\n            if (v8 != 0)\n            {\n                v5 = (unsigned int)sub_4050a0();\n                if (v7 == 0 && v85 == 0 && v5 != 0)\n                {\n                    v93 = sub_407390();\n                }\n            }\n            else\n            {\n                *((int *)&v0) = (!((long long)(stack_base)[-0x100] <= r15<8>)? r15<8> : (long long)(stack_base)[-0x100]);\n                sub_405280();\n                v5 = (unsigned int)sub_4050a0();\n                if (v5 != 0)\n                {\n                    v90 = (char)v85 | v7;\n                    if (!((char)v85 == 0 && v7 == 0))\n                    {\n                        v94 = (unsigned int)sub_4052b0();\n                        if (v1 != 0)\n                        {\n                            v95 = sub_403130();\n                        }\n                    }\n                    else\n                    {\n                        v8 = v90;\n                        v64 = 0;\n                        v91 = sub_407390();\n                        v89 = v8;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v92 = (unsigned int)sub_404ed0();\n            error(0x1, *(__errno_location()), \"%s\");\n        }\n        if (...)\n        {\n            v8 = v89;\n            v94 = (unsigned int)sub_4052b0();\n            if (v1 != 0)\n            {\n                *((char *)&v8) = v8;\n                v97 = sub_403130();\n                v89 = (char)v8;\n            }\n        }\n        if (...)\n        {\n            v96 = sub_403130();\n        }\n        if (...)\n        {\n            v98 = 0;\n            if (v89 != 0)\n            {\n                while (true)\n                {\n                    if (v75 != v98)\n                    {\n                        v99 = *((long long *)(v94 + v98 * 8)) * 24 + v64;\n                        v100 = fwrite_unlocked(*((long long *)(*((long long *)(v94 + v98 * 8)) * 24 + v64 + 16)), 0x1, *((long long *)(*((long long *)(v94 + v98 * 8)) * 24 + v64 + 8)), stdout);\n                        if (v100 != v99->field_8)\n                        {\n                            break;\n                        }\n                        v98 += 1;\n                    }\n                }\n                if (v75 != v98)\n                {\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a116, 0x5));\n                }\n                else if (v75 == v98)\n                {\n                    return 0;\n                }\n            }\n        }\n        if (...)\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40b58c, 0x5));\n        }\n        if (...)\n        {\n            if (v75 == 0)\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a0fd, 0x5));\n            }\n            else if (v7 != 0)\n            {\n                v105 = 0;\n                while (true)\n                {\n                    v115 = __printf_chk(0x1, \"%lu%c\", (unsigned int)(v14 + (unsigned long long)(unsigned int)sub_4050e0()), (unsigned int)v6);\n                    if (v115 < 0)\n                    {\n                        break;\n                    }\n                    v105 += 1;\n                }\n                if (true)\n                {\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a116, 0x5));\n                }\n                else if (v105 == v0 && v115 >= 0)\n                {\n                    return 0;\n                }\n            }\n            else\n            {\n                v102 = 0;\n                do\n                {\n                    v112 = sub_4050e0();\n                    v113 = *((long long *)(v86 + v112 * 8 + 8)) - *((long long *)(v86 + v112 * 8));\n                    v114 = fwrite_unlocked(*((long long *)(v86 + v112 * 8)), 0x1, *((long long *)(v86 + v112 * 8 + 8)) - *((long long *)(v86 + v112 * 8)), stdout);\n                    if (v113 != v114)\n                    {\n                        break;\n                    }\n                    v102 += 1;\n                }\n                while (v0 != v102);\n                if (true)\n                {\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a116, 0x5));\n                }\n                else if (v113 == v114)\n                {\n                    return 0;\n                }\n            }\n        }\n        if (...)\n        {\n            v101 = (unsigned int)sub_404ed0();\n            error(0x1, *(__errno_location()), \"%s\");\n        }\n        if (...)\n        {\n            if (v7 != 0)\n            {\n                v110 = 0;\n                for (v111 = v0; v110 != v111; v110 += 1)\n                {\n                    v118 = __printf_chk(0x1, \"%lu%c\", (unsigned int)(*((long long *)(v94 + v110 * 8)) + v14), (unsigned int)v6);\n                    if (v118 < 0)\n                    {\n                        break;\n                    }\n                }\n                if (v110 != v111)\n                {\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a116, 0x5));\n                }\n                else\n                {\n                    return 0;\n                }\n            }\n            else\n            {\n                v107 = 0;\n                for (v108 = v0; v107 != v108; v107 += 1)\n                {\n                    v116 = *((long long *)(v86 + *((long long *)(v94 + v107 * 8)) * 8 + 8)) - *((long long *)(v86 + *((long long *)(v94 + v107 * 8)) * 8));\n                    v117 = fwrite_unlocked(*((long long *)(v86 + *((long long *)(v94 + v107 * 8)) * 8)), 0x1, *((long long *)(v86 + *((long long *)(v94 + v107 * 8)) * 8 + 8)) - *((long long *)(v86 + *((long long *)(v94 + v107 * 8)) * 8)), stdout);\n                }\n                if (v116 != v117 && v107 != v108)\n                {\n                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a116, 0x5));\n                }\n                else\n                {\n                    return 0;\n                }\n            }\n        }\n        if (...)\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40b58c, 0x5));\n        }\n        if (...)\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a116, 0x5));\n        }\n        if (...)\n        {\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4050a0",
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x4050cf",
            "decompiledFuncCode": "int sub_4050a0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = (unsigned int)sub_4055f0();\n    v2 = 0;\n    if (v1 != 0)\n    {\n        v2 = sub_406790();\n        *((unsigned long long *)v2) = v1;\n        *((long long *)(v2 + 16)) = 0;\n        *((long long *)(v2 + 8)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407390",
            "funcStartAddr": "0x407390",
            "funcEndAddr": "0x407408",
            "decompiledFuncCode": "int sub_407390()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_407410() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x405041",
            "decompiledFuncCode": "int sub_405030()\n{\n}\n"
        },
        {
            "funcName": "sub_405a60",
            "funcStartAddr": "0x405a60",
            "funcEndAddr": "0x405aa1",
            "decompiledFuncCode": "int sub_405a60()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_406a20",
            "funcStartAddr": "0x406a20",
            "funcEndAddr": "0x406ae3",
            "decompiledFuncCode": "int sub_406a20()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    v2 = sub_406f50();\n    if ((unsigned int)v2 == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            *(v6) = (0 - (unsigned int)(char)(v0 < 0x40000000) & -41) + 75;\n        }\n    }\n    else\n    {\n        v4 = v2;\n        v6 = __errno_location();\n        if (!(v4 != 1))\n        {\n            *(v6) = 75;\n        }\n        else if (v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || (unsigned int)v2 != 0 || v0 > v5)\n    {\n        sub_405050();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: \");\n    }\n}\n"
        },
        {
            "funcName": "sub_4067f0",
            "funcStartAddr": "0x4067f0",
            "funcEndAddr": "0x406820",
            "decompiledFuncCode": "int sub_4067f0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4069e0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409fa8",
            "funcStartAddr": "0x409fa8",
            "funcEndAddr": "0x409fc8",
            "decompiledFuncCode": "extern unsigned long long g_60ee30;\n\nint sub_409fa8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60ee30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404ea0",
            "funcStartAddr": "0x404ea0",
            "funcEndAddr": "0x404eb1",
            "decompiledFuncCode": "int sub_404ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_404e10",
            "funcStartAddr": "0x404e10",
            "funcEndAddr": "0x404e1f",
            "decompiledFuncCode": "int sub_404e10()\n{\n}\n"
        },
        {
            "funcName": "sub_4067b0",
            "funcStartAddr": "0x4067b0",
            "funcEndAddr": "0x4067d1",
            "decompiledFuncCode": "int sub_4067b0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4069e0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404cb0",
            "funcStartAddr": "0x404cb0",
            "funcEndAddr": "0x404cc1",
            "decompiledFuncCode": "int sub_404cb0()\n{\n}\n"
        },
        {
            "funcName": "sub_404e1f",
            "funcStartAddr": "0x404e1f",
            "funcEndAddr": "0x404e90",
            "decompiledFuncCode": "extern uint128_t g_60f440;\nextern uint128_t g_60f450;\nextern uint128_t g_60f460;\nextern unsigned long long g_60f470;\n\nint sub_404e1f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60f470;\n    *((uint128_t *)&v0) = g_60f440;\n    *((uint128_t *)&v1) = g_60f450;\n    *((uint128_t *)&v2) = g_60f460;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_404800();\n}\n"
        },
        {
            "funcName": "sub_404b02",
            "funcStartAddr": "0x404b02",
            "funcEndAddr": "0x404b2b",
            "decompiledFuncCode": "int sub_404b02()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_404f40",
            "funcStartAddr": "0x404f40",
            "funcEndAddr": "0x404fac",
            "decompiledFuncCode": "extern uint128_t g_60f440;\nextern uint128_t g_60f450;\nextern uint128_t g_60f460;\nextern unsigned long long g_60f470;\n\nint sub_404f40()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60f440;\n    *((uint128_t *)&v1) = g_60f450;\n    *((uint128_t *)&v2) = g_60f460;\n    v4 = g_60f470;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_404800();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4051e0",
            "funcStartAddr": "0x4051e0",
            "funcEndAddr": "0x4051fe",
            "decompiledFuncCode": "int sub_4051e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __explicit_bzero_chk();\n}\n"
        },
        {
            "funcName": "sub_405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x40526c",
            "decompiledFuncCode": "int sub_405260()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_403000",
            "funcStartAddr": "0x403000",
            "funcEndAddr": "0x40309e",
            "decompiledFuncCode": "extern unsigned int g_40a116;\nextern unsigned int g_60f278;\nextern char g_60f318;\nextern unsigned long long g_60f320;\n\nint sub_403000()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4084b0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60f318 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40a116, 0x5);\n            if (g_60f320 != 0)\n            {\n                sub_404ea0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60f318 != 0)\n    {\n        v3 = sub_4084b0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60f318 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60f278);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_4067e0",
            "funcStartAddr": "0x4067e0",
            "funcEndAddr": "0x4067e2",
            "decompiledFuncCode": "int sub_4067e0()\n{\n}\n"
        },
        {
            "funcName": "sub_409680",
            "funcStartAddr": "0x409680",
            "funcEndAddr": "0x40983f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\nint sub_409680()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned long|uint128_t|unsigned long long|unsigned int v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_3 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned long|uint128_t|unsigned int v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_2 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_408700() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_408820();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_4091c0() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_408c90",
            "funcStartAddr": "0x408c90",
            "funcEndAddr": "0x408ccf",
            "decompiledFuncCode": "int sub_408c90()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4030e0",
            "funcStartAddr": "0x4030e0",
            "funcEndAddr": "0x403129",
            "decompiledFuncCode": "int sub_4030e0()\n{\n    unsigned long long v1;  // rbx\n    unsigned short v2;  // dx\n    unsigned long v3;  // rax\n    unsigned int v4;  // edi\n    unsigned long long v6;  // rax\n\n    v1 = 1;\n    v3 = open(\"/dev/null\", 0x0, v2);\n    if (v4 != v3)\n    {\n        v1 = 0;\n        if (v3 >= 0)\n        {\n            close(v3);\n            *(__errno_location()) = 9;\n            return 0;\n        }\n    }\n    if (v3 < 0 || v4 == v3)\n    {\n        v6 = v1;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4086d0",
            "funcStartAddr": "0x4086d0",
            "funcEndAddr": "0x4086f6",
            "decompiledFuncCode": "int sub_4086d0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_407550",
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x407625",
            "decompiledFuncCode": "int sub_407550()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_4065d0",
            "funcStartAddr": "0x4065d0",
            "funcEndAddr": "0x4065f0",
            "decompiledFuncCode": "int sub_4065d0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_406860",
            "funcStartAddr": "0x406860",
            "funcEndAddr": "0x4068d8",
            "decompiledFuncCode": "int sub_406860() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405280",
            "funcStartAddr": "0x405280",
            "funcEndAddr": "0x4052a6",
            "decompiledFuncCode": "int sub_405280()\n{\n    unsigned long v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rsi\n    unsigned long v4;  // cc_dep1\n    unsigned long v5;  // rdi\n    unsigned long long v6;  // rdi\n\n    v2 = v1 - 1;\n    if (v1 != 1)\n    {\n        v3 = 0;\n        do\n        {\n            v3 += 1;\n            v4 = v2 % 2;\n            v2 = v2 % 2;\n        }\n        while (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, cc_dep1<8>, rax<8>, cc_ndep<8>)));\n        v6 = v3 * v5;\n        v2 = v6 + 7 >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405070",
            "funcStartAddr": "0x405070",
            "funcEndAddr": "0x405093",
            "decompiledFuncCode": "int sub_405070()\n{\n    unsigned long long v1[3];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = sub_406790();\n    v1[0] = v2;\n    v1[2] = 0;\n    v1[1] = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4052b0",
            "funcStartAddr": "0x4052b0",
            "funcEndAddr": "0x40556a",
            "decompiledFuncCode": "int sub_4052b0()\n{\n    unsigned int v0;  // [bp-0x74]\n    void tmp_9;  // tmp #9\n    unsigned long|unsigned long long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long long v3[2];  // [bp-0x60]\n    unsigned long long v4;  // [bp-0x58]\n    unsigned long long v5;  // [bp-0x50]\n    unsigned long long v6;  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbp\n    unsigned long v14;  // rax\n    unsigned long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rbp\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // rsi\n    unsigned long long v20[2];  // r14\n    unsigned long long v21[2];  // r8\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long v25;  // rax\n    unsigned long long v27;  // rax\n\n    if (v9 != 0)\n    {\n        v12 = v11;\n        if (v9 != 1)\n        {\n            if (!(v11 > 131071))\n            {\n                v10 = (unsigned int)sub_406790();\n            }\n            else if ((0 CONCAT v11) % v9 <= 31)\n            {\n                v14 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rbp<8>, 0x3d<8>), Shr(rbp<8>, 0x3c<8>), cc_ndep<8>);\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>)) && v14 == 0)\n                {\n                    v10 = (unsigned int)sub_406790();\n                }\n            }\n            else\n            {\n                v1 = (unsigned int)sub_408ea0();\n                if (v1 != 0)\n                {\n                    v15 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(r12<8>, 0x3d<8>), Shr(r12<8>, 0x3c<8>), cc_ndep<8>);\n                    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>)) && v15 == 0)\n                    {\n                        v0 = 1;\n                        v10 = (unsigned int)sub_406790();\n                    }\n                }\n            }\n            if (((0 CONCAT v11) % v9 <= 31 || v11 <= 131071) && (v11 <= 131071 || v14 == 0) && (v11 <= 131071 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>))))\n            {\n                if (v11 != 0 || v11 > 131071)\n                {\n                    v16 = 0;\n                    do\n                    {\n                        *((unsigned long long *)(v10 + v16 * 8)) = v16;\n                        v16 += 1;\n                    }\n                    while (v11 > v16);\n                }\n                v0 = 0;\n                v1 = 0;\n            }\n            if ((v11 <= 131071 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>))) && ((0 CONCAT v11) % v9 <= 31 || v11 <= 131071 || v15 == 0) && ((0 CONCAT v11) % v9 <= 31 || v11 <= 131071 || v1 != 0) && (v11 <= 131071 || v14 == 0 || (0 CONCAT v11) % v9 > 31))\n            {\n                v17 = 0;\n                v2 = v11 - 1;\n                while (true)\n                {\n                    v18 = (unsigned int)sub_4050e0() + v17;\n                    if (v0 == 0)\n                    {\n                        v19 = *((long long *)(v10 + v17 * 8));\n                        *((long long *)(v10 + v17 * 8)) = *((long long *)(v10 + v18 * 8));\n                        v17 += 1;\n                        *((unsigned long long *)(v10 + v18 * 8)) = v19;\n                    }\n                    else\n                    {\n                        v6 = v17;\n                        v7 = 0;\n                        v4 = v18;\n                        v5 = 0;\n                        v20 = (unsigned long long)(unsigned int)sub_409680();\n                        v21 = (unsigned long long)(unsigned int)sub_409680();\n                        if (v20 == 0)\n                        {\n                            v3[0] = v21;\n                            v20 = (unsigned long long)(unsigned int)sub_406790();\n                            v20[1] = v17;\n                            v20[0] = v17;\n                        }\n                        if (v21 != 0)\n                        {\n                            v18 = v21[1];\n                        }\n                        else\n                        {\n                            v21 = (unsigned long long)(unsigned int)sub_406790();\n                            v21[1] = v18;\n                            v21[0] = v18;\n                        }\n                        tmp_9 = v20[1];\n                        v20[1] = v18;\n                        v3[0] = v21;\n                        v21[1] = tmp_9;\n                        v22 = sub_409640();\n                        if (v22 == 0)\n                        {\n                            break;\n                        }\n                        v23 = sub_409640();\n                        if (v23 == 0)\n                        {\n                            break;\n                        }\n                        *((unsigned long long [2])(v10 + v17 * 8)) = v20[1];\n                        v17 += 1;\n                    }\n                    if (v0 == 0)\n                    {\n                        v25 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(r12<8>, 0x3d<8>), Shr(r12<8>, 0x3c<8>), cc_ndep<8>);\n                        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>) || v25 != 0)\n                        {\n                            break;\n                        }\n                        v10 = (unsigned int)sub_4067f0();\n                    }\n                    else\n                    {\n                        sub_4090e0();\n                    }\n                }\n                if ((v9 <= v17 || v0 == 0) && (v9 <= v17 || v9 <= v17) && (v25 == 0 || v0 != 0) && (v0 == 0 || v22 != 0) && (v0 == 0 || v23 != 0) && (v9 <= v17 || v22 != 0) && (v9 <= v17 || v23 != 0) && (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>)) || v0 != 0))\n                {\n                    v27 = v10;\n                    return v27;\n                }\n                sub_4069e0(); /* do not return */\n            }\n            sub_4069e0(); /* do not return */\n        }\n    }\n    else\n    {\n        v10 = 0;\n    }\n    if (v9 == 1)\n    {\n        v10 = (unsigned int)sub_406790();\n        *((unsigned long long *)v10) = (unsigned int)sub_4050e0();\n    }\n    if (v9 == 1 || v11 <= 131071 || v9 == 0 || (0 CONCAT v11) % v9 <= 31 && v14 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>)) || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(r12<8>, 0x3<8>), Shl(r12<8>, 0x2<8>), cc_ndep<8>)) && (0 CONCAT v11) % v9 > 31 && v1 != 0)\n    {\n        v27 = v10;\n        return v27;\n    }\n}\n"
        },
        {
            "funcName": "sub_4049a0",
            "funcStartAddr": "0x4049a0",
            "funcEndAddr": "0x4049d4",
            "decompiledFuncCode": "int sub_4049a0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_406990();\n}\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a05",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_408a00()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_4061e0",
            "funcStartAddr": "0x4061e0",
            "funcEndAddr": "0x4061ea",
            "decompiledFuncCode": "int sub_4061e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4030b0",
            "funcStartAddr": "0x4030b0",
            "funcEndAddr": "0x4030cc",
            "decompiledFuncCode": "int sub_4030b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_4032e0",
            "funcStartAddr": "0x4032e0",
            "funcEndAddr": "0x4032f0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4032e0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rax\n\n    v1->field_10 = 0;\n    v1->field_0 = 0;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406f50",
            "funcStartAddr": "0x406f50",
            "funcEndAddr": "0x40735d",
            "decompiledFuncCode": "int sub_406f50()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4242616)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v40 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v39 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n                break;\n            case 18: case 50:\n                v34 = v30;\n                v35 = 4;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 23:\n                v36 = v30;\n                v37 = 8;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n            case 24:\n                v38 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 32:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402ff0",
            "funcStartAddr": "0x402ff0",
            "funcEndAddr": "0x402ff8",
            "decompiledFuncCode": "extern char g_60f318;\n\nint sub_402ff0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60f318 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4055da",
            "funcStartAddr": "0x4055da",
            "funcEndAddr": "0x4055df",
            "decompiledFuncCode": "int sub_4055da()\n{\n}\n"
        },
        {
            "funcName": "sub_4074f0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407546",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4074f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d90",
            "funcStartAddr": "0x404d90",
            "funcEndAddr": "0x404df9",
            "decompiledFuncCode": "int sub_404d90()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404800();\n}\n"
        },
        {
            "funcName": "sub_4093c0",
            "funcStartAddr": "0x4093c0",
            "funcEndAddr": "0x409616",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_4 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_2;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_4;\n\nint sub_4093c0()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_3 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_2 *v12;  // rdx\n    unsigned long|uint128_t|unsigned int v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_4 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned long|uint128_t|unsigned int v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_408700();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_408820();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_4091c0();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_408700();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4050d0",
            "funcStartAddr": "0x4050d0",
            "funcEndAddr": "0x4050d4",
            "decompiledFuncCode": "int sub_4050d0()\n{\n    unsigned long long *v1;  // rdi\n\n    return *(v1);\n}\n"
        },
        {
            "funcName": "sub_408510",
            "funcStartAddr": "0x408510",
            "funcEndAddr": "0x408599",
            "decompiledFuncCode": "int sub_408510()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_409dd0();\n            if (v5 >= 0)\n            {\n                v6 = sub_407390();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_407390();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_408700",
            "funcStartAddr": "0x408700",
            "funcEndAddr": "0x408805",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_408700()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_4086d0();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v10 == 0 || (char)v20 == 0 || v15->field_8 == 0) && ((char)v20 == 0 || v15->field_8 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v1 != *(v11) && v8 != v1)\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_408ea0",
            "funcStartAddr": "0x408ea0",
            "funcEndAddr": "0x409020",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_4086b0;\nextern int512_t g_4086c0;\nextern int512_t g_40c1a0;\n\nint sub_408ea0()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    void|uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_408820();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_40c1a0;\n            v3 = sub_408820();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v2 != 0 || v3 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v5;\n        }\n        if ((v2 == 0 || v4 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (v2 != 0 || v3 != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_408610();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_4086b0 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_4086c0 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_4030a0",
            "funcStartAddr": "0x4030a0",
            "funcEndAddr": "0x4030a5",
            "decompiledFuncCode": "int sub_4030a0()\n{\n}\n"
        },
        {
            "funcName": "sub_405270",
            "funcStartAddr": "0x405270",
            "funcEndAddr": "0x40527a",
            "decompiledFuncCode": "int sub_405270()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // rax\n    unsigned long long *v3;  // rdi\n    char v4;  // al\n\n    v2 = *(v1);\n    v4 = *(v3) == *(v1);\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_4032f0",
            "funcStartAddr": "0x4032f0",
            "funcEndAddr": "0x4033f6",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_2;\n\ntypedef struct struct_1 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_1;\n\nint sub_4032f0()\n{\n    unsigned long|char v0;  // [bp-0x48]\n    void tmp_7;  // tmp #7\n    char v1;  // [bp-0x3d]\n    unsigned int v2;  // [bp-0x3c]\n    unsigned long long v5;  // r13\n    unsigned long long v6;  // rsi\n    struct_2 *v7;  // rbx\n    unsigned long long v8[3];  // rdi\n    unsigned long v9;  // rdx\n    char *v10;  // rdx\n    unsigned long long|unsigned int v11;  // rbp\n    unsigned long long v12;  // rdx\n    struct_1 *v13;  // rax\n    unsigned long long *v14;  // r14\n    unsigned long long v15;  // rsi\n    struct_1 *v16;  // r15\n    struct_1 *v17;  // rax\n\n    v5 = v9;\n    v7 = v6;\n    v14 = v8[2];\n    v2 = v9;\n    *((unsigned long *)&v1) = v9;\n    v15 = *(v8) + v8[2];\n    v16 = v8[2];\n    if ((v7->field_0 & 16) == 0)\n    {\n        while (true)\n        {\n            v10 = v7->field_8;\n            if (v7->field_8 < v7->field_10)\n            {\n                v7->field_8 = &v10[1];\n                v11 = *(v10);\n            }\n            else\n            {\n                v0 = v15;\n                v11 = __uflow((unsigned int)v7);\n                if ((unsigned int)v11 == -1)\n                {\n                    if (v14 == v16 || (v7->field_0 & 32) != 0)\n                    {\n                        break;\n                    }\n                    if ((v7->field_0 & 32) == 0 && *(&((char *)&v16[-1].field_8)[7]) != v1)\n                    {\n                        v11 = v5;\n                        if (v16 == v0)\n                        {\n                            v12 = v1;\n                        }\n                        else\n                        {\n                            v17 = &v16->padding_1;\n                            v16->field_0 = v2;\n                        }\n                    }\n                }\n            }\n            if (v7->field_8 < v7->field_10 || (unsigned int)v11 != -1)\n            {\n                v12 = v11;\n                if (v16 != v15)\n                {\n                    v13 = v16;\n                }\n            }\n            if ((unsigned int)v11 == -1 && (v7->field_0 & 32) == 0 && v16 == v0 && *(&((char *)&v16[-1].field_8)[7]) != v1 && v7->field_8 >= v7->field_10 || (v7->field_8 < v7->field_10 || (unsigned int)v11 != -1) && v16 == v15)\n            {\n                *((unsigned long long *)&v0) = v12;\n                tmp_7 = *(v14);\n                v14 = (unsigned long long)(unsigned int)sub_4068f0();\n                v13 = (char *)v14 + *(v8);\n                *((unsigned long long **)&((char *)v14)[16 + *(v8)]) = v14;\n                v15 = tmp_7 + (char *)v14;\n            }\n            if ((unsigned int)v11 == -1 && (v7->field_0 & 32) == 0 && v16 == v0 && *(&((char *)&v16[-1].field_8)[7]) != v1 && v7->field_8 >= v7->field_10 || (v7->field_8 < v7->field_10 || (unsigned int)v11 != -1) && v16 == v15 || v16 != v15 && (v7->field_8 < v7->field_10 || (unsigned int)v11 != -1))\n            {\n                v16 = &v13->padding_1;\n                *((unsigned long long *)&v13->field_0) = v12;\n            }\n            if (((unsigned int)v11 == -1 && (v7->field_0 & 32) == 0 && v16 == v0 && *(&((char *)&v16[-1].field_8)[7]) != v1 && v7->field_8 >= v7->field_10 || (v7->field_8 < v7->field_10 || (unsigned int)v11 != -1) && v16 == v15 || v16 != v15 && (v7->field_8 < v7->field_10 || (unsigned int)v11 != -1)) && v11 == (unsigned int)v5 || (unsigned int)v11 == -1 && (v7->field_0 & 32) == 0 && v7->field_8 >= v7->field_10 && *(&((char *)&v16[-1].field_8)[7]) == v1)\n            {\n                v17 = v16;\n            }\n            v17->field_8 = v17 - v14;\n            return v8;\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406aad",
            "funcStartAddr": "0x406aad",
            "funcEndAddr": "0x406ab2",
            "decompiledFuncCode": "int sub_406aad()\n{\n}\n"
        },
        {
            "funcName": "sub_409860",
            "funcStartAddr": "0x409860",
            "funcEndAddr": "0x409db4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40c11f;\nextern char g_60f4b8[2];\n\nint sub_409860()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_60f4b8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40c11f : (unsigned long long)nl_langinfo(0xe));\n    if (g_60f4b8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40c11f;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 35 && (unsigned int)v26 != 32)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v63 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v63;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40c11f;\n                                        v10 = (tmp_10 == 0? &g_40c11f : tmp_10);\n                                        free(NULL);\n                                        sub_407390();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v62 = *(v61);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)(v62 != -1);\n                                    }\n                                }\n                                while (v62 != 10 && v63 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v37 != 0 && (unsigned int)v26 != 35 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v28 > 1 && (unsigned int)v26 != 32)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v26 != 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v37 != 0 && (unsigned int)v26 != 35 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v28 > 1 && (unsigned int)v26 != 32) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40c11f : tmp_10);\n                            sub_407390();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1)\n                    {\n                        v9 = &g_40c11f;\n                    }\n                    else if (((unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 != 0 || (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 == 0) && v37 == 0 || ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40c11f;\n            free(v17);\n        }\n        *((char *[2])&g_60f4b8[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_40c11f : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40614c",
            "funcStartAddr": "0x40614c",
            "funcEndAddr": "0x4061c5",
            "decompiledFuncCode": "int sub_40614c()\n{\n    unsigned long long v0;  // [bp+0x0]\n    unsigned long long v2;  // [bp+0x10]\n    unsigned long long v3;  // [bp+0x18]\n    char *v4;  // rdi\n    char *v5;  // rsi\n    unsigned long v7;  // rbx\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // r12\n    unsigned long long v10;  // r13\n    unsigned long long v11;  // rbp\n    unsigned int *v12;  // r12\n    void *v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long|unsigned int v18;  // r13\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // r13\n\n    fopen(v4, v5);\n    if (v7 != 0)\n    {\n        v11 = (unsigned int)sub_405fa0();\n        v12 = __errno_location();\n        v18 = *(v12);\n        v13 = sub_407390();\n        if (v13 == 0)\n        {\n            v14 = v11;\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v11;\n        }\n        if (v14 != 0)\n        {\n            v18 = *(v12);\n            free(v14);\n        }\n        *((unsigned long *)&v12) = v18;\n        v19 = v0;\n        v20 = v2;\n        v21 = v3;\n        return 0;\n    }\n    v8 = v0;\n    v9 = v2;\n    v10 = v3;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x4081b7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40c0c0;\nextern unsigned int g_40c104;\n\nint sub_407c50()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char *v53;  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_407550();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_407550();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_407630();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40c0c0, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40c104, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40c0c0, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_407630();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_408300",
            "funcStartAddr": "0x408300",
            "funcEndAddr": "0x408318",
            "decompiledFuncCode": "int sub_408300()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_407c50();\n}\n"
        },
        {
            "funcName": "sub_408ae0",
            "funcStartAddr": "0x408ae0",
            "funcEndAddr": "0x408c1c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_408ae0()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long|unsigned long long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x4061da",
            "decompiledFuncCode": "int sub_4061d0()\n{\n}\n"
        },
        {
            "funcName": "sub_404e90",
            "funcStartAddr": "0x404e90",
            "funcEndAddr": "0x404e9d",
            "decompiledFuncCode": "int sub_404e90()\n{\n}\n"
        },
        {
            "funcName": "sub_4069c0",
            "funcStartAddr": "0x4069c0",
            "funcEndAddr": "0x4069d3",
            "decompiledFuncCode": "int sub_4069c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_404800",
            "funcStartAddr": "0x404800",
            "funcEndAddr": "0x4049a0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60f2b8;\nextern uint128_t g_60f2c0;\nextern unsigned int g_60f2d0;\nextern int512_t g_60f340;\n\nint sub_404800()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60f2b8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60f2d0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60f2b8 != 6353600)\n            {\n                v16 = sub_4067f0();\n                g_60f2b8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4067f0();\n                v17 = v15;\n                g_60f2b8 = v15;\n                *(v15) = g_60f2c0;\n            }\n            memset(&v17[(long long)(int)g_60f2d0], 0x0, (int)((unsigned int)v13 + 1 - g_60f2d0) * 16);\n            g_60f2d0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4069e0(); /* do not return */\n        }\n    }\n    if (g_60f2d0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4035d0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6353728)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_406790();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4035d0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_406133",
            "funcStartAddr": "0x406133",
            "funcEndAddr": "0x40614c",
            "decompiledFuncCode": "int sub_406133()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long v3;  // [bp-0x8]\n    unsigned long v5;  // r13\n    unsigned long v6;  // r12\n    unsigned long v7;  // rbx\n\n    v3 = v5;\n    v2 = v6;\n    v1 = stack_base + 0;\n    v0 = v7;\n}\n"
        },
        {
            "funcName": "sub_4091c0",
            "funcStartAddr": "0x4091c0",
            "funcEndAddr": "0x4093b0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_4091c0()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long|unsigned int v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_408610();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_4088a0();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_4088a0();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_4088a0();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v0 == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_28->field_10 != 0 && v11->field_10 != *((long long *)&v2))\n    {\n        v21 = 0;\n    }\n    if ((char)v21 != 0 || v11->field_10 != *((long long *)&v2))\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_404a60",
            "funcStartAddr": "0x404a60",
            "funcEndAddr": "0x404a8b",
            "decompiledFuncCode": "extern char g_60f440;\n\nint sub_404a60()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60f440 : v2);\n    *((int *)(tmp_11? &g_60f440 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60f440;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60f440;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4035d0",
            "funcStartAddr": "0x4035d0",
            "funcEndAddr": "0x404708",
            "decompiledFuncCode": "int sub_4035d0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long|unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4034d0();\n            v27 = (unsigned int)sub_4034d0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                    v78 = 0;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                    if (v4 == 0)\n                                    {\n                                        v55 = 0;\n                                    }\n                                    else\n                                    {\n                                        v40 = v45;\n                                        v78 = 0;\n                                    }\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                            v89 = 0;\n                            v78 = 0;\n                        case 10:\n                            v40 = 110;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 != 0)\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v48 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                        v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                        v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                        if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) != 0)\n                        {\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                        }\n                        if ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0)\n                        {\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_4035d0();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_4035d0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_408320();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v46 != 1 && v17 != 0)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && (unsigned int)v46 != 0 && v46 != -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v63 == 0 || v89 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if (v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v5 != 0 || v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v5 == 0 || (v15 != 1 || v89 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && v6 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v76 == 0 && (v81 == 2 & v17) != 0)\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_408220",
            "funcStartAddr": "0x408220",
            "funcEndAddr": "0x408276",
            "decompiledFuncCode": "extern unsigned int g_60f2d4;\nextern unsigned int g_60f2d8;\nextern unsigned int g_60f2dc;\nextern unsigned int g_60f480;\nextern unsigned int g_60f484;\nextern unsigned int g_60f488;\nextern unsigned long long g_60f490;\nextern unsigned long long g_60f4c8;\n\nint sub_408220()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60f480 = g_60f2dc;\n    g_60f484 = g_60f2d8;\n    v1 = (unsigned int)v2;\n    v0 = &g_60f480;\n    g_60f2dc = g_60f480;\n    g_60f4c8 = g_60f490;\n    g_60f2d4 = g_60f488;\n    return sub_407c50();\n}\n"
        },
        {
            "funcName": "sub_404d00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d12",
            "decompiledFuncCode": "int sub_404d00()\n{\n}\n"
        },
        {
            "funcName": "sub_404ec0",
            "funcStartAddr": "0x404ec0",
            "funcEndAddr": "0x404eca",
            "decompiledFuncCode": "int sub_404ec0()\n{\n}\n"
        },
        {
            "funcName": "sub_404c10",
            "funcStartAddr": "0x404c10",
            "funcEndAddr": "0x404ca5",
            "decompiledFuncCode": "extern struct_0 *g_60f2b8;\nextern unsigned long long g_60f2c0;\nextern unsigned long long g_60f2c8;\nextern unsigned int g_60f2d0;\nextern unsigned long long g_60f340;\n\nint sub_404c10()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60f2d0;\n    if (g_60f2d0 > 1)\n    {\n        v2 = &g_60f2b8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60f2b8[(unsigned long long)(g_60f2d0 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60f2b8->field_8 != 6353728)\n    {\n        v1 = free(g_60f2b8->field_8);\n        g_60f2c0 = 0x100;\n        g_60f2c8 = &g_60f340;\n    }\n    if (g_60f2b8 != 6353600)\n    {\n        v1 = free(g_60f2b8);\n        g_60f2b8 = &g_60f2c0;\n    }\n    g_60f2d0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409f90",
            "funcStartAddr": "0x409f90",
            "funcEndAddr": "0x409fa8",
            "decompiledFuncCode": "extern int512_t g_60f268;\n\nint sub_409f90()\n{\n}\n"
        },
        {
            "funcName": "sub_406af0",
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406b11",
            "decompiledFuncCode": "int sub_406af0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_406a20();\n}\n"
        },
        {
            "funcName": "sub_404ce0",
            "funcStartAddr": "0x404ce0",
            "funcEndAddr": "0x404cf6",
            "decompiledFuncCode": "int sub_404ce0()\n{\n}\n"
        },
        {
            "funcName": "sub_402c01",
            "funcStartAddr": "0x402c01",
            "funcEndAddr": "0x402c58",
            "decompiledFuncCode": "extern char g_60f308;\nextern unsigned long long g_60f310;\n\nint sub_402c01()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60f308 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60f310 >= 0)\n            {\n                break;\n            }\n            g_60f310 = g_60f310 + 1;\n            *((long long *)(6352448 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60f308 = 1;\n        return sub_402bab();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4049f0",
            "funcStartAddr": "0x4049f0",
            "funcEndAddr": "0x4049ff",
            "decompiledFuncCode": "extern int512_t g_60f440;\n\nint sub_4049f0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60f440 : v1)) = v2;\n    return &g_60f440;\n}\n"
        },
        {
            "funcName": "sub_408320",
            "funcStartAddr": "0x408320",
            "funcEndAddr": "0x40838f",
            "decompiledFuncCode": "extern unsigned long long g_40c11f;\n\nint sub_408320()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40c11f;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_4085b0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4065f0",
            "funcStartAddr": "0x4065f0",
            "funcEndAddr": "0x406649",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4065f0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4061f0();\n}\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x4058f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4058f0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4088a0",
            "funcStartAddr": "0x4088a0",
            "funcEndAddr": "0x4089da",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_4088a0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_4086d0();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_4086d0();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v14 != 0 || v6[9] != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_408e80",
            "funcStartAddr": "0x408e80",
            "funcEndAddr": "0x408ea0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_408e80()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_4034d0",
            "funcStartAddr": "0x4034d0",
            "funcEndAddr": "0x4035af",
            "decompiledFuncCode": "extern int512_t g_40a836;\nextern int512_t g_40a83a;\n\nint sub_4034d0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_409860();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40a836 : 4237377);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40a83a : 4237373);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_408280",
            "funcStartAddr": "0x408280",
            "funcEndAddr": "0x408298",
            "decompiledFuncCode": "int sub_408280()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_408220();\n}\n"
        },
        {
            "funcName": "sub_403410",
            "funcStartAddr": "0x403410",
            "funcEndAddr": "0x40341a",
            "decompiledFuncCode": "int sub_403410()\n{\n}\n"
        },
        {
            "funcName": "sub_408c30",
            "funcStartAddr": "0x408c30",
            "funcEndAddr": "0x408c7b",
            "decompiledFuncCode": "int sub_408c30()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_4086d0();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408e40",
            "funcStartAddr": "0x408e40",
            "funcEndAddr": "0x408e71",
            "decompiledFuncCode": "int sub_408e40()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408610",
            "funcStartAddr": "0x408610",
            "funcEndAddr": "0x4086a1",
            "decompiledFuncCode": "int sub_408610()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v2 > 9 && v3 != 0)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404a90",
            "funcStartAddr": "0x404a90",
            "funcEndAddr": "0x404b02",
            "decompiledFuncCode": "extern int512_t g_60f440;\n\nint sub_404a90()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60f440 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4035d0();\n}\n"
        },
        {
            "funcName": "sub_402c58",
            "funcStartAddr": "0x402c58",
            "funcEndAddr": "0x402c94",
            "decompiledFuncCode": "int sub_402c58() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405200",
            "funcStartAddr": "0x405200",
            "funcEndAddr": "0x405251",
            "decompiledFuncCode": "int sub_405200()\n{\n    unsigned int v1;  // [bp+0x100008]\n    void *v2;  // rdi\n\n    __explicit_bzero_chk();\n    free(v2);\n    *(__errno_location()) = v1;\n    return sub_405a60();\n}\n"
        },
        {
            "funcName": "sub_4082c0",
            "funcStartAddr": "0x4082c0",
            "funcEndAddr": "0x4082d5",
            "decompiledFuncCode": "int sub_4082c0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_407c50();\n}\n"
        },
        {
            "funcName": "sub_406830",
            "funcStartAddr": "0x406830",
            "funcEndAddr": "0x406851",
            "decompiledFuncCode": "int sub_406830()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4069e0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x408ad2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_408a70()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409640",
            "funcStartAddr": "0x409640",
            "funcEndAddr": "0x409674",
            "decompiledFuncCode": "int sub_409640()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_4093c0();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405010",
            "funcStartAddr": "0x405010",
            "funcEndAddr": "0x405022",
            "decompiledFuncCode": "int sub_405010()\n{\n}\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x4058cc",
            "decompiledFuncCode": "extern char g_405590;\n\nint sub_4055f0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    unsigned short v7;  // dx\n    unsigned long long v8;  // rax\n    void *v9;  // r13\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r14\n    unsigned long long v14[2];  // rbx\n    unsigned long long v16;  // rbp\n    unsigned long long v18;  // r15\n    unsigned long v19;  // rbp\n    char *v21;  // rdi\n    char *v22;  // rsi\n    unsigned long long v23;  // rcx\n    unsigned long v24;  // d\n    unsigned long long v25;  // r14\n    char *v27;  // rsi\n    unsigned long long v28;  // rcx\n    char *v29;  // rdi\n    unsigned long v30;  // rbp\n    unsigned long long v32;  // rsi\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rdx\n    unsigned long long v36;  // rbp\n    unsigned long v37;  // r14\n    unsigned long long v39;  // rsi\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rdx\n    unsigned long long v43;  // rbp\n    unsigned long long v45;  // rsi\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rdx\n    unsigned long long v50;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v9 = (unsigned long long)(unsigned int)sub_408510();\n            if (v9 != 0)\n            {\n                v14[0] = v9;\n                v14[1] = &g_405590;\n                v14 = (unsigned long long)(unsigned int)sub_406790();\n                v14[2] = v5;\n                setvbuf(v9, &v14[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v11 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_406790();\n            v6[1] = &g_405590;\n            v6[2] = 0;\n            v6[3] = 0;\n            v8 = open(\"/dev/urandom\", 0x0, v7);\n            if ((unsigned int)v8 >= 0)\n            {\n                v16 = __read_chk(v8, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v8);\n                if (v16 <= 2047)\n                {\n                    tmp_2 = v16;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v18 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16);\n                    v19 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v16));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v21 = v18;\n                    v22 = &v1;\n                    for (v23 = v0; v23 != 0; v22 = &v22[v24])\n                    {\n                        v23 -= 1;\n                        *(v21) = v1;\n                        v21 = &v21[v24];\n                    }\n                    if (v19 <= 2047)\n                    {\n                        v25 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v27 = &v1;\n                        v1 = getpid();\n                        v28 = v25;\n                        v12 = v25 + v19;\n                        for (v29 = (char *)&v6[4] + v19; v28 != 0; v27 = &v27[v24])\n                        {\n                            v28 -= 1;\n                            *(v29) = v1;\n                            v29 = &v29[v24];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v12 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v11 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v11 + 48)) = v1;\n            }\n            if ((unsigned int)v8 < 0 || v16 <= 2047 && v12 <= 2047 && v19 <= 2047)\n            {\n                v30 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v32 = (char *)&v6[4] + v12;\n                v1 = getppid();\n                if ((unsigned int)v30 != 0)\n                {\n                    v34 = 0;\n                    do\n                    {\n                        v35 = v34;\n                        v34 = (unsigned int)v34 + 1;\n                        *((char *)(v32 + v35)) = v1;\n                    }\n                    while ((unsigned int)v34 < (unsigned int)v30);\n                }\n                v36 = v30 + v12;\n                if (v36 <= 2047)\n                {\n                    v37 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v39 = (char *)&v6[4] + v36;\n                    v1 = getuid();\n                    if ((unsigned int)v37 != 0)\n                    {\n                        v41 = 0;\n                        do\n                        {\n                            v42 = v41;\n                            v41 = (unsigned int)v41 + 1;\n                            *((char *)(v39 + v42)) = v1;\n                        }\n                        while ((unsigned int)v41 < (unsigned int)v37);\n                    }\n                    v43 = v36 + v37;\n                    if (v43 <= 2047)\n                    {\n                        v45 = (char *)&v6[4] + v43;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v43 <= 4)? 4 : 0x800 - v43) != 0)\n                        {\n                            v47 = 0;\n                            do\n                            {\n                                v48 = v47;\n                                v47 = (unsigned int)v47 + 1;\n                                *((char *)(v45 + v48)) = v1;\n                            }\n                            while ((unsigned int)v47 < (!(0x800 - v43 <= 4)? 4 : 0x800 - v43));\n                        }\n                    }\n                }\n            }\n            sub_405d60();\n        }\n    }\n    else\n    {\n        v11 = (unsigned int)sub_406790();\n        *((long long *)v11) = 0;\n        *((char **)(v11 + 8)) = &g_405590;\n        *((long long *)(v11 + 16)) = 0;\n    }\n    v50 = v11;\n    return v50;\n}\n"
        },
        {
            "funcName": "sub_407450",
            "funcStartAddr": "0x407450",
            "funcEndAddr": "0x4074ea",
            "decompiledFuncCode": "int sub_407450()\n{\n    void *v2;  // rax\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r13d\n    unsigned long long v6;  // rax\n    unsigned int *v7;  // rax\n    unsigned short v8;  // dx\n    unsigned long long v10;  // rax\n    unsigned long v11;  // rdi\n    unsigned long long v14;  // rax\n\n    if (v2 != 0 && v3 != 0)\n    {\n        v4 = fileno(v2);\n        v5 = v4;\n        v6 = dup2(v4, v4);\n        if (v6 < 0)\n        {\n            v7 = __errno_location();\n            if (*(v7) == 9 && v5 != (unsigned int)v3)\n            {\n                v10 = dup2(v3, v5);\n                v3 = (unsigned int)open(\"/dev/null\", 0x80000, v8);\n                if (v10 >= 0)\n                {\n                    close(v11);\n                }\n                else\n                {\n                    close(v11);\n                }\n            }\n        }\n    }\n    if (v2 == 0 || v3 == 0 || v6 >= 0 || *(v7) != 9 || v10 < 0 && v5 != (unsigned int)v3)\n    {\n        v2 = (unsigned long long)freopen();\n        return v14;\n    }\n}\n"
        },
        {
            "funcName": "sub_404fc0",
            "funcStartAddr": "0x404fc0",
            "funcEndAddr": "0x404fd7",
            "decompiledFuncCode": "int sub_404fc0()\n{\n}\n"
        },
        {
            "funcName": "sub_4083a0",
            "funcStartAddr": "0x4083a0",
            "funcEndAddr": "0x408483",
            "decompiledFuncCode": "int sub_4083a0()\n{\n    unsigned long long v1;  // rdx\n    void *|char v2;  // dil\n    unsigned long|char v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while ((v2 & 7) != 0 && v1 != 1 && *((char *)v2) != (char)v3);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if (*((char *)(v6 - 1)) == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v3 == *((char *)v2) && v1 != 0 && (v2 & 7) != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_408dc0",
            "funcStartAddr": "0x408dc0",
            "funcEndAddr": "0x408e2b",
            "decompiledFuncCode": "int sub_408dc0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_408a20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x408a6f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_408a20()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_403420",
            "funcStartAddr": "0x403420",
            "funcEndAddr": "0x403429",
            "decompiledFuncCode": "int sub_403420()\n{\n}\n"
        },
        {
            "funcName": "sub_408a10",
            "funcStartAddr": "0x408a10",
            "funcEndAddr": "0x408a15",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_408a10()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_405ab0",
            "funcStartAddr": "0x405ab0",
            "funcEndAddr": "0x405d55",
            "decompiledFuncCode": "int sub_405ab0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_406b20",
            "funcStartAddr": "0x406b20",
            "funcEndAddr": "0x406f2b",
            "decompiledFuncCode": "int sub_406b20()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // cc_dep1\n    unsigned int v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = strtoul();\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4241784)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v1[0] != 0 && v9 != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v34 = v30;\n                v35 = 6;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v42 = v35;\n                    v35 -= 1;\n                }\n                while (v42 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v47 = tmp_11 * v28 * v28;\n                    v33 = v47;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v38 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 18: case 50:\n                v39 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 23:\n                v36 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v43 != 1);\n            case 24:\n                v37 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v37;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v44 != 1);\n                break;\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v48 = &v32[v31];\n                *(v12) = v48;\n            case 53:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409de0",
            "funcStartAddr": "0x409de0",
            "funcEndAddr": "0x409f0c",
            "decompiledFuncCode": "extern unsigned int g_60f4c0;\n\nint sub_409de0()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60f4c0 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_409de0();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60f4c0 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_60f4c0 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_409de0();\n        }\n        if ((g_60f4c0 < 0 || *(v12) == 22) && (g_60f4c0 < 0 || (unsigned int)v15 < 0) && (g_60f4c0 < 0 || (unsigned int)v15 >= 0) && (g_60f4c0 == -1 || g_60f4c0 >= 0) && (g_60f4c0 >= 0 || (unsigned int)v15 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_4068f0",
            "funcStartAddr": "0x4068f0",
            "funcEndAddr": "0x40693a",
            "decompiledFuncCode": "int sub_4068f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404cd0",
            "funcStartAddr": "0x404cd0",
            "funcEndAddr": "0x404cda",
            "decompiledFuncCode": "int sub_404cd0()\n{\n}\n"
        },
        {
            "funcName": "sub_406990",
            "funcStartAddr": "0x406990",
            "funcEndAddr": "0x4069b8",
            "decompiledFuncCode": "int sub_406990()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406790();\n}\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x406599",
            "decompiledFuncCode": "extern unsigned int g_40b5ba;\nextern unsigned int g_40b5be;\nextern unsigned int g_40b5ce;\nextern unsigned int g_40b5e5;\nextern unsigned int g_40b640;\nextern unsigned int g_40b710;\nextern unsigned int g_40b730;\nextern unsigned int g_40b758;\nextern unsigned int g_40b780;\nextern unsigned int g_40b7b0;\n\nint sub_4061f0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40b5ba, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b640, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40b5be, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40b5ce, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40b5e5, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40b710, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40b730, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40b758, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40b780, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40b7b0, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_405050",
            "funcStartAddr": "0x405050",
            "funcEndAddr": "0x405066",
            "decompiledFuncCode": "int sub_405050()\n{\n}\n"
        },
        {
            "funcName": "sub_4049e0",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x4049ef",
            "decompiledFuncCode": "extern int512_t g_60f440;\n\nint sub_4049e0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60f440 : v1));\n}\n"
        },
        {
            "funcName": "sub_404d20",
            "funcStartAddr": "0x404d20",
            "funcEndAddr": "0x404d8d",
            "decompiledFuncCode": "int sub_404d20()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404800();\n}\n"
        },
        {
            "funcName": "sub_4050e0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x4051cb",
            "decompiledFuncCode": "int sub_4050e0()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3f]\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // r15\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    char *v11;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned long v15;  // rsi\n    unsigned long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rbp\n\n    v4 = v3;\n    v6 = v5 + 1;\n    v7 = v5;\n    v14 = v3[1];\n    v13 = v3[2];\n    while (true)\n    {\n        if (v13 < v7)\n        {\n            v8 = v13;\n            v9 = 0;\n            do\n            {\n                v9 += 1;\n                v8 = v8 * 0x100 + 255;\n            }\n            while (v7 > v8);\n            sub_405900();\n            v11 = &v0;\n            do\n            {\n                v11 = &v1;\n                v13 = v13 * 0x100 + 255;\n                v14 = v14 * 0x100 + v0;\n            }\n            while (v7 > v13);\n        }\n        if (v13 == v7 && v13 < v7 || v13 == v7 && v13 >= v7)\n        {\n            v4[2] = 0;\n            v4[1] = 0;\n        }\n        if (v13 < v7 && v13 != v7 || v13 != v7 && v13 >= v7)\n        {\n            v15 = (0 CONCAT v13 - v7) % v6 >> 64;\n            v16 = (0 CONCAT v13 - v7) % v6;\n            v17 = v13 - ((0 CONCAT v13 - v7) % v6 >> 64);\n            v18 = (0 CONCAT v14) % v6;\n            v19 = (0 CONCAT v14) % v6 >> 64;\n            if (v14 > v17)\n            {\n                v13 = v15 - 1;\n                v20 = v19;\n            }\n            else\n            {\n                v4[1] = v18;\n                v4[2] = v16;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4089f0",
            "funcStartAddr": "0x4089f0",
            "funcEndAddr": "0x4089f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4089f0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_403430",
            "funcStartAddr": "0x403430",
            "funcEndAddr": "0x4034c9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60f328;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403430()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60f328 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405000",
            "funcStartAddr": "0x405000",
            "funcEndAddr": "0x40500a",
            "decompiledFuncCode": "int sub_405000()\n{\n}\n"
        },
        {
            "funcName": "sub_406710",
            "funcStartAddr": "0x406710",
            "funcEndAddr": "0x406784",
            "decompiledFuncCode": "extern unsigned int g_40b601;\nextern unsigned int g_40b62c;\nextern unsigned int g_40b858;\n\nint sub_406710()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b601, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b62c, 0x5));\n    dcgettext(0x0, 0x40b858, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4085b0",
            "funcStartAddr": "0x4085b0",
            "funcEndAddr": "0x408606",
            "decompiledFuncCode": "int sub_4085b0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4086c0",
            "funcStartAddr": "0x4086c0",
            "funcEndAddr": "0x4086c7",
            "decompiledFuncCode": "int sub_4086c0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4069e0",
            "funcStartAddr": "0x4069e0",
            "funcEndAddr": "0x406a0c",
            "decompiledFuncCode": "extern unsigned int g_40b92f;\nextern unsigned int g_60f278;\n\nint sub_4069e0()\n{\n    dcgettext(0x0, 0x40b92f, 0x5);\n    error(g_60f278, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x40744b",
            "decompiledFuncCode": "int sub_407410()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4074f0();\n    }\n}\n"
        },
        {
            "funcName": "sub_404fb0",
            "funcStartAddr": "0x404fb0",
            "funcEndAddr": "0x404fb9",
            "decompiledFuncCode": "int sub_404fb0()\n{\n}\n"
        },
        {
            "funcName": "sub_404ed0",
            "funcStartAddr": "0x404ed0",
            "funcEndAddr": "0x404f43",
            "decompiledFuncCode": "int sub_404ed0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404800();\n}\n"
        },
        {
            "funcName": "sub_404a00",
            "funcStartAddr": "0x404a00",
            "funcEndAddr": "0x404a33",
            "decompiledFuncCode": "extern int512_t g_60f440;\n\nint sub_404a00()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60f440 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60f440 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_402bab",
            "funcStartAddr": "0x402bab",
            "funcEndAddr": "0x402bca",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_402bab()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_408d50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x408db0",
            "decompiledFuncCode": "int sub_408d50()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409dd0",
            "funcStartAddr": "0x409dd0",
            "funcEndAddr": "0x409dde",
            "decompiledFuncCode": "int sub_409dd0()\n{\n}\n"
        },
        {
            "funcName": "sub_404fe0",
            "funcStartAddr": "0x404fe0",
            "funcEndAddr": "0x404ff3",
            "decompiledFuncCode": "int sub_404fe0()\n{\n}\n"
        },
        {
            "funcName": "sub_4086b0",
            "funcStartAddr": "0x4086b0",
            "funcEndAddr": "0x4086c0",
            "decompiledFuncCode": "int sub_4086b0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_406650",
            "funcStartAddr": "0x406650",
            "funcEndAddr": "0x406708",
            "decompiledFuncCode": "int sub_406650()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4061f0();\n    }\n}\n"
        },
        {
            "funcName": "sub_406a0c",
            "funcStartAddr": "0x406a0c",
            "funcEndAddr": "0x406a11",
            "decompiledFuncCode": "int sub_406a0c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405d60",
            "funcStartAddr": "0x405d60",
            "funcEndAddr": "0x405f94",
            "decompiledFuncCode": "int sub_405d60()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_406960",
            "funcStartAddr": "0x406960",
            "funcEndAddr": "0x40698e",
            "decompiledFuncCode": "int sub_406960()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4069e0(); /* do not return */\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shuf.elf"
}