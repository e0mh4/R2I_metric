{
    "funcInfo": [
        {
            "funcName": "sub_401ad8",
            "funcStartAddr": "0x401ad8",
            "funcEndAddr": "0x401b14",
            "decompiledFuncCode": "int sub_401ad8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403e60",
            "funcStartAddr": "0x403e60",
            "funcEndAddr": "0x403e8e",
            "decompiledFuncCode": "int sub_403e60()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n    sub_403c70();\n}\n"
        },
        {
            "funcName": "sub_405230",
            "funcStartAddr": "0x405230",
            "funcEndAddr": "0x405784",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_406cd4;\nextern char g_6083f8[2];\n\nint sub_405230()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // r12\n    char *v14;  // r13\n    unsigned long long v15;  // r14\n    unsigned long long v16;  // rbp\n    struct_1 *v19;  // r12\n    unsigned short v20;  // dx\n    unsigned long long v21;  // rax\n    void *v24;  // rbx\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rsi\n    unsigned long long v42;  // r9\n    unsigned long long v43;  // r10\n    unsigned int v44;  // ecx\n    unsigned long long v46;  // r8\n    void *v47;  // rcx\n    unsigned long long v49;  // rcx\n    unsigned int v51;  // edx\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rsi\n    char *v56;  // rax\n    char *v57;  // rax\n    unsigned long long v58;  // rdx\n    unsigned long long v59;  // r13\n    void *v60;  // rdi\n    unsigned long long v64;  // rbp\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n\n    v9 = g_6083f8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_406cd4 : (unsigned long long)nl_langinfo(0xe));\n    if (g_6083f8 == 0)\n    {\n        v14 = getenv(\"CHARSETALIASDIR\");\n        if (v14 != 0 && *(v14) != 0)\n        {\n            v11 = strlen(v14);\n            v13 = v11;\n            v15 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v14[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v12 = v11 + 15;\n                v13 += 1;\n            }\n            if (v11 == 0 || v14[v11 + -1] == 47)\n            {\n                v16 = malloc(v12);\n                if (v16 != 0)\n                {\n                    memcpy(v16, v14, v15);\n                }\n            }\n        }\n        if (v14 == 0 || *(v14) == 0)\n        {\n            v12 = 116;\n            v13 = 102;\n            v15 = 101;\n            v14 = \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v14 == 0 || *(v14) == 0 || v11 != 0 && v14[v11 + -1] != 47)\n        {\n            v16 = malloc(v12);\n        }\n        if (v16 == 0 || v16 == 0)\n        {\n            v9 = &g_406cd4;\n        }\n        if (v16 != 0 && (v14 == 0 || *(v14) == 0 || v11 != 0) && (v14 == 0 || *(v14) == 0 || v14[v11 + -1] != 47))\n        {\n            memcpy(v16, v14, v15);\n            *((char *)(v16 + v15)) = 47;\n        }\n        if (v14 == 0 && v16 != 0 || *(v14) == 0 && v16 != 0 || v11 != 0 && v14[v11 + -1] != 47 && v16 != 0 || v11 == 0 && v14 != 0 && v16 != 0 && *(v14) != 0 || v14[v11 + -1] == 47 && v14 != 0 && v16 != 0 && *(v14) != 0)\n        {\n            v19 = v13 + v16;\n            v19->field_0 = 3347411969557751907;\n            v19->field_c = 115;\n            v19->field_8 = 1634298977;\n            v21 = open(v16, 0x0, v20);\n            if ((unsigned int)v21 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v21, \"r\");\n                    while (true)\n                    {\n                        v56 = *((long long *)(v12 + 8));\n                        if (*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)))\n                        {\n                            v12 = __uflow(v12);\n                        }\n                        if ((unsigned int)v12 != 32 && (unsigned int)v12 != 35)\n                        {\n                            ungetc(v12, v12);\n                            v27 = fscanf(v12, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v27 > 1)\n                            {\n                                v28 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v28 = &v4;\n                                    v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v31 = &v5;\n                                v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v31 = &v6;\n                                    v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v32;\n                                tmp_56 = (unsigned int)v33 % 0x10000;\n                                v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v35 + 2;\n                                    v36 = malloc(v35 + 3);\n                                    v38 = v1;\n                                    v39 = v2;\n                                }\n                                else\n                                {\n                                    v37 = v35 + v0 + 3;\n                                    v0 = v35 + v0 + 2;\n                                    v36 = realloc(NULL, v37);\n                                    v39 = v2;\n                                    v38 = v1;\n                                }\n                                if (v36 != 0)\n                                {\n                                    tmp_1 = -2 - v38;\n                                    v40 = v38 + 1;\n                                    v12 = v0 - v39;\n                                    v41 = tmp_1 + v0 - v39 + v36;\n                                    if ((unsigned int)v40 >= 8)\n                                    {\n                                        *((long long *)v41) = *((long long *)&v3);\n                                        *((long long *)(v41 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                        v42 = v41 + 8 & -8;\n                                        v41 -= v41 + 8 & -8;\n                                        v43 = &(&v3)[-1 * v41];\n                                        v44 = (unsigned int)(v40 + v41) & -8;\n                                        if (v44 >= 8)\n                                        {\n                                            v41 = 0;\n                                            do\n                                            {\n                                                v46 = v41;\n                                                v41 = (unsigned int)v41 + 8;\n                                                *((long long *)(v42 + v46)) = *((long long *)(v43 + v46));\n                                            }\n                                            while ((unsigned int)v41 < (v44 & -8));\n                                        }\n                                    }\n                                    else if ((v40 & 4) != 0)\n                                    {\n                                        *((int *)v41) = *((int *)&v3);\n                                        *((int *)(v41 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                    }\n                                    else if ((unsigned int)v40 != 0)\n                                    {\n                                        *((char *)v41) = v3;\n                                        if ((v40 & 2) != 0)\n                                        {\n                                            *((short *)(v41 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                        }\n                                    }\n                                    v58 = v39 + 1;\n                                    v47 = v36 + v12 - 1;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v47) = *((long long *)&v5);\n                                        v41 = v58;\n                                        *((long long *)&((char *)v47)[v41 + -8]) = *((long long *)&(&v5)[v41 + -8]);\n                                        v12 = v47 + 8 & -8;\n                                        v49 = v47 - (v47 + 8 & -8);\n                                        v51 = (unsigned int)(v41 + v49) & -8;\n                                        if (v51 >= 8)\n                                        {\n                                            v54 = 0;\n                                            do\n                                            {\n                                                v55 = v54;\n                                                v54 = (unsigned int)v54 + 8;\n                                                *((long long *)(v12 + v55)) = *((long long *)&(&v5)[v55 + -1 * v49]);\n                                            }\n                                            while ((unsigned int)v54 < (v51 & -8));\n                                        }\n                                    }\n                                    else if (((char)v41 & 4) != 0)\n                                    {\n                                        *((int *)v47) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v47)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v47) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v47)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v36;\n                                    v56 = *((long long *)(v12 + 8));\n                                }\n                                else\n                                {\n                                    v59 = v12;\n                                    v9 = &g_406cd4;\n                                    v10 = (tmp_10 == 0? &g_406cd4 : tmp_10);\n                                    free(NULL);\n                                    fclose(v59);\n                                }\n                            }\n                        }\n                        if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) && (unsigned int)v12 != 32 && (unsigned int)v12 != 35 && v27 > 1 && v36 != 0)\n                        {\n                            *((char **)(v12 + 8)) = &v56[1];\n                            v12 = *(v56);\n                        }\n                        if ((unsigned int)v12 == 35)\n                        {\n                            do\n                            {\n                                v57 = *((long long *)(v12 + 8));\n                                if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)))\n                                {\n                                    *((char **)(v12 + 8)) = &v57[1];\n                                    v57 = (unsigned int)*(v57);\n                                    v58 = 1;\n                                }\n                                else\n                                {\n                                    v57 = __uflow(v12);\n                                    v58 = (char)((unsigned int)v57 != -1);\n                                }\n                            }\n                            while (v58 != 0 && v57 != 10);\n                        }\n                        if ((unsigned int)v12 == 35 && v57 == -1 || (unsigned int)v12 == -1 && *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || (unsigned int)v12 == -1 && *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || v27 <= 1 && (unsigned int)v12 != 32 && (unsigned int)v12 != 35)\n                        {\n                            v12 = v24;\n                            v10 = (tmp_10 == 0? &g_406cd4 : tmp_10);\n                            fclose(v60);\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v12 == 35 && (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1) && v57 == -1 || (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && (unsigned int)v12 != 35 && (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1) && v27 <= 1 || (*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16))) && (unsigned int)v12 == -1)\n                    {\n                        v9 = &g_406cd4;\n                    }\n                    else if (((unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && (unsigned int)v12 != 35 && v27 > 1 && (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1) && v0 != 0 || (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && (unsigned int)v12 != 35 && v27 > 1 && (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1) && v0 == 0) && v36 == 0 || ((unsigned int)v12 == 35 && (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1) && v57 == -1 || (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && (unsigned int)v12 != 35 && (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1) && v27 <= 1 || (*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16))) && (unsigned int)v12 == -1) && v0 != 0)\n                    {\n                        free(v16);\n                    }\n                }\n                else\n                {\n                    close(v21);\n                }\n            }\n            v9 = &g_406cd4;\n            free(v16);\n        }\n        *((char *[2])&g_6083f8[0]) = v9;\n    }\n    v64 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v65 = strcmp((tmp_10 == 0? &g_406cd4 : tmp_10), v9);\n            if (v65 != 0 && (v64 != 42 || v9[1] != 0))\n            {\n                v66 = strlen(v9);\n                v67 = &((char [2])&v9[v66])[1];\n                v68 = strlen(&((char [2])&v9[v66])[1]);\n                v9 = v67 + v68 + 1;\n                v64 = (char)*((char *)(v67 + v68 + 1));\n                if (v64 == 0)\n                {\n                    break;\n                }\n            }\n            if (v65 == 0 || v64 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_4051c0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x405220",
            "decompiledFuncCode": "int sub_4051c0()\n{\n    unsigned long long v1;  // r12\n    unsigned int v2;  // edi\n    unsigned int v3;  // ebp\n    void *v4;  // rdi\n    unsigned long long v5;  // rax\n\n    v1 = __fpending();\n    v3 = ferror(v2);\n    v5 = fclose(v4);\n    if (v3 == 0)\n    {\n        if ((unsigned int)v5 != 0 && v1 == 0)\n        {\n            v5 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v5 == 0)\n        {\n            *(__errno_location()) = 0;\n            v5 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v5 != 0 && (v1 != 0 || v3 != 0))\n    {\n        v5 = -18446744069414584321;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_401b10",
            "funcStartAddr": "0x401b10",
            "funcEndAddr": "0x401b63",
            "decompiledFuncCode": "extern unsigned int g_4058b8;\nextern unsigned int g_4058e8;\n\nint sub_401b10()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    void *v3;  // rdi\n\n    v0 = v2;\n    fprintf(v3, (unsigned long long)dcgettext(0x0, 0x4058b8, 0x5));\n    dcgettext(0x0, 0x4058e8, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4036b0",
            "funcStartAddr": "0x4036b0",
            "funcEndAddr": "0x4036c6",
            "decompiledFuncCode": "int sub_4036b0()\n{\n}\n"
        },
        {
            "funcName": "sub_403380",
            "funcStartAddr": "0x403380",
            "funcEndAddr": "0x4033ed",
            "decompiledFuncCode": "int sub_403380()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_402e60();\n}\n"
        },
        {
            "funcName": "sub_403340",
            "funcStartAddr": "0x403340",
            "funcEndAddr": "0x403356",
            "decompiledFuncCode": "int sub_403340()\n{\n}\n"
        },
        {
            "funcName": "sub_401615",
            "funcStartAddr": "0x401615",
            "funcEndAddr": "0x40161a",
            "decompiledFuncCode": "int sub_401615()\n{\n}\n"
        },
        {
            "funcName": "sub_401d50",
            "funcStartAddr": "0x401d50",
            "funcEndAddr": "0x401e2f",
            "decompiledFuncCode": "extern int512_t g_405b6e;\nextern int512_t g_405b72;\n\nint sub_401d50()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_405230();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_405b6e : 4217721);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_405b72 : 4217717);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_401976",
            "funcStartAddr": "0x401976",
            "funcEndAddr": "0x40197b",
            "decompiledFuncCode": "int sub_401976()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401510",
            "funcEndAddr": "0x4019cc",
            "decompiledFuncCode": "extern unsigned int g_0;\nextern unsigned int g_405918;\nextern unsigned int g_405940;\nextern unsigned int g_405980;\nextern unsigned int g_4059b8;\nextern unsigned int g_4059e8;\nextern unsigned int g_405a18;\nextern void g_405a40;\nextern unsigned int g_60821c;\nextern unsigned long long g_608400;\nextern unsigned long long stdin;\nextern unsigned long long stdout;\n\nint main()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x68]\n    unsigned long long v1;  // [bp-0x60]\n    char *v2;  // [bp-0x50]\n    unsigned long long v3;  // [bp-0x48]\n    char v4;  // [bp-0x40]\n    char v5;  // [bp+0x0]\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // r14\n    unsigned long long v12;  // r8\n    unsigned long|unsigned int v13;  // r12\n    unsigned int v14;  // edi\n    unsigned long long v16;  // rax\n    unsigned long long v21;  // rax\n    char *v22;  // rsi\n    unsigned long long v23;  // rdx\n    char *v24;  // rax\n    char *v25;  // rdi\n    unsigned long long v26;  // rcx\n    unsigned long long v27;  // rdx\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r14\n    unsigned long long v30;  // rbx\n    unsigned int v32;  // cc_dep1\n    unsigned int v34;  // cc_dep1\n    unsigned int v35;  // cc_dep1\n    unsigned int v37;  // cc_dep1\n    char *v40;  // rax\n    char *v41;  // rbp\n    unsigned long long v42;  // r13\n    unsigned long|unsigned long long|unsigned int v43;  // r15\n    unsigned long long v44;  // rax\n\n    sub_401cb0();\n    if (sub_405810() == 0)\n    {\n        v11 = &g_0;\n        v43 = &g_0;\n        v13 = 10;\n        v3 = 1026;\n        v2 = (unsigned long long)(unsigned int)sub_403c70();\n        *((unsigned int **)&v5) = &g_0;\n        v41 = (unsigned long long)(unsigned int)sub_403c70();\n        while (true)\n        {\n            v10 = sub_405110();\n            if ((unsigned int)v10 != -1)\n            {\n                if ((unsigned int)v10 != 83)\n                {\n                    if (v10 > 83)\n                    {\n                        if ((unsigned int)v10 == 104)\n                        {\n                            sub_401b10();\n                            v44 = &g_0;\n                        }\n                        if ((unsigned int)v10 == 118)\n                        {\n                            sub_401b70();\n                            v44 = &g_0;\n                        }\n                    }\n                    else\n                    {\n                        v13 = &g_0;\n                    }\n                }\n            }\n            else\n            {\n                if (g_60821c == v14)\n                {\n                    if (v43 != 0)\n                    {\n                        fputc((unsigned int *)((char *)&((unsigned int *)((char *)&g_0 + -1 * (char)(v11 < &g_0)))[12] + 1), stdout);\n                        fputc(0x0, stdout);\n                    }\n                    else\n                    {\n                        v16 = fwrite(&g_405a40, 0x1, 0xa, stdout);\n                        if (v16 != 10)\n                        {\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x405a18, 0x5));\n                        }\n                    }\n                    if (v16 == 10 || v43 != 0)\n                    {\n                        v0 = 1026;\n                        v42 = &g_0;\n                        while (true)\n                        {\n                            v21 = getdelim((unsigned int)&v2, (unsigned int)&v3, v13, stdin);\n                            if ((unsigned int)v21 > 0)\n                            {\n                                *((unsigned int **)(&v2[v21] - &g_0)) = &g_0;\n                                v22 = v2;\n                                v23 = *(v41);\n                                v24 = v2;\n                                if (*(v2) == *(v41) && v23 != 0)\n                                {\n                                    v26 = &v41[2147483646];\n                                    v25 = v41;\n                                    do\n                                    {\n                                        v25 += &g_0;\n                                        v24 += &g_0;\n                                        v27 = *(v25);\n                                    }\n                                    while (*(v24) == *(v25) && v27 != 0 && v25 != v26);\n                                }\n                                if (v23 == 0 || *(v2) != *(v41))\n                                {\n                                    v25 = v41;\n                                }\n                                v28 = v25 - v41;\n                                v29 = v28;\n                                v30 = v29 - v42;\n                                if ((unsigned int)(v29 - v42 + 0x8000) > 65535)\n                                {\n                                    v29 = &g_0;\n                                    v30 = (char *)&g_0 + -1 * (unsigned int)v42;\n                                }\n                                if (v43 == 0)\n                                {\n                                    if ((unsigned int)(v30 + 127) > 254)\n                                    {\n                                        if ((char)(_IO_putc(0x80, stdout) + (char *)&g_0 == &g_0))\n                                        {\n                                            sub_401ae0();\n                                        }\n                                        if ((unsigned int)v30 > 32767)\n                                        {\n                                            __assert_fail(); /* do not return */\n                                        }\n                                        else if ((unsigned int)v30 >= -0x8000)\n                                        {\n                                            v34 = _IO_putc(v30 >> 8, stdout);\n                                            if (!((char)(&((char *)&g_0)[v34] == &g_0)))\n                                            {\n                                                v35 = _IO_putc(v30, stdout);\n                                            }\n                                        }\n                                        else\n                                        {\n                                            __assert_fail(); /* do not return */\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v32 = _IO_putc(v30, stdout);\n                                    }\n                                    if ((unsigned int)(v30 + 127) <= 254 || (unsigned int)v30 <= 32767 && (unsigned int)v30 >= -0x8000)\n                                    {\n                                        if ((&((char *)&g_0)[v32] == &g_0 || (unsigned int)(v30 + 127) > 254) && (&((char *)&g_0)[v34] == &g_0 || (unsigned int)(v30 + 127) <= 254 || &((char *)&g_0)[v35] == &g_0))\n                                        {\n                                            sub_401ae0();\n                                            v22 = v2;\n                                        }\n                                        if (((unsigned int)(v30 + 127) <= 254 || !((char)(&((char *)&g_0)[v34] == &g_0))) && ((unsigned int)(v30 + 127) <= 254 || !((char)(&((char *)&g_0)[v35] == &g_0))) && ((unsigned int)(v30 + 127) > 254 || !((char)(&((char *)&g_0)[v32] == &g_0))))\n                                        {\n                                            v22 = v2;\n                                        }\n                                    }\n                                }\n                                if ((unsigned int)(v30 + 127) <= 254 || v43 != 0 || (unsigned int)v30 <= 32767 && (unsigned int)v30 >= -0x8000)\n                                {\n                                    v37 = fputs(&v22[v29], stdout);\n                                    if (_IO_putc(0x0, stdout) + (char *)&g_0 == &g_0 || v37 + (char *)&g_0 == &g_0)\n                                    {\n                                        sub_401ae0();\n                                    }\n                                    v40 = v2;\n                                    v43 = &g_0;\n                                    v42 = v29;\n                                    v2 = v41;\n                                    v0 = v3;\n                                    v41 = v40;\n                                    v3 = 1026;\n                                }\n                            }\n                            else\n                            {\n                                free(v2);\n                                free(v41);\n                                v44 = &g_0;\n                            }\n                        }\n                    }\n                }\n            }\n            if ((unsigned int)v10 == 83)\n            {\n                v0 = g_608400;\n                *((unsigned int **)v43) = &g_0;\n                v43 = __errno_location();\n                v11 = strtol(g_608400, &v4, 0xa);\n                if (v11 != 0)\n                {\n                    if (9223372036854775807 + v11 <= -3)\n                    {\n                        v12 = *((long long *)&v4);\n                    }\n                    else if (*((int *)v43) == 0)\n                    {\n                        v12 = *((long long *)&v4);\n                    }\n                    else\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x405980, 0x5));\n                    }\n                    if ((*((int *)v43) == 0 || 9223372036854775807 + v11 <= -3) && (9223372036854775807 + v11 <= -3 || *((char *)*((long long *)&v4)) == 0) && (*((char *)*((long long *)&v4)) == 0 || 9223372036854775807 + v11 > -3) && (v11 != 1 || 9223372036854775807 + v11 > -3))\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4059e8, 0x5));\n                    }\n                }\n                else\n                {\n                    v12 = *((long long *)&v4);\n                    if (*((long long *)&v4) == g_608400)\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x405940, 0x5));\n                    }\n                }\n                if (*((long long *)&v4) != g_608400 || v11 != 0)\n                {\n                    if ((*((int *)v43) == 0 || v11 == 0 || 9223372036854775807 + v11 <= -3) && (*((char *)*((long long *)&v4)) != 0 || v11 != 0) && (v11 == 0 || 9223372036854775807 + v11 <= -3 || *((char *)*((long long *)&v4)) != 0) && (v11 == 0 || *((char *)*((long long *)&v4)) != 0 || 9223372036854775807 + v11 > -3))\n                    {\n                        v1 = v12;\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4059b8, 0x5));\n                    }\n                    if ((v11 == 1 || v11 == 0) && (*((char *)*((long long *)&v4)) == 0 || v11 == 0) && (v11 == 0 || 9223372036854775807 + v11 <= -3) && (*((char *)*((long long *)&v4)) == 0 || v11 != 0))\n                    {\n                        v43 = &g_0;\n                    }\n                }\n            }\n            if (((unsigned int)v10 == -1 || (unsigned int)v10 != 83) && (g_60821c != v14 || (unsigned int)v10 != -1) && (v10 <= 83 || (unsigned int)v10 == -1 || (unsigned int)v10 != 104) && (v10 <= 83 || (unsigned int)v10 == -1 || (unsigned int)v10 != 118) && ((unsigned int)v10 == -1 || v10 > 83 || (unsigned int)v10 != 48))\n            {\n                sub_401b10();\n                v44 = &g_0;\n            }\n        }\n        return v44;\n    }\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x405918, 0x5));\n}\n"
        },
        {
            "funcName": "sub_4033f0",
            "funcStartAddr": "0x4033f0",
            "funcEndAddr": "0x403459",
            "decompiledFuncCode": "int sub_4033f0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_402e60();\n}\n"
        },
        {
            "funcName": "sub_403c00",
            "funcStartAddr": "0x403c00",
            "funcEndAddr": "0x403c6a",
            "decompiledFuncCode": "extern unsigned int g_406912;\nextern unsigned int g_40693d;\nextern unsigned int g_406b98;\n\nint sub_403c00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    printf((unsigned long long)dcgettext(0x0, 0x406912, 0x5));\n    printf((unsigned long long)dcgettext(0x0, 0x40693d, 0x5));\n    dcgettext(0x0, 0x406b98, 0x5);\n}\n"
        },
        {
            "funcName": "sub_403690",
            "funcStartAddr": "0x403690",
            "funcEndAddr": "0x4036a1",
            "decompiledFuncCode": "int sub_403690()\n{\n}\n"
        },
        {
            "funcName": "sub_401cb0",
            "funcStartAddr": "0x401cb0",
            "funcEndAddr": "0x401d49",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_608268;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_401cb0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_608268 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_401ae0",
            "funcStartAddr": "0x401ae0",
            "funcEndAddr": "0x401b0c",
            "decompiledFuncCode": "extern unsigned int g_405864;\n\nint sub_401ae0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    dcgettext(0x0, 0x405864, 0x5);\n    __errno_location();\n}\n"
        },
        {
            "funcName": "sub_403310",
            "funcStartAddr": "0x403310",
            "funcEndAddr": "0x403321",
            "decompiledFuncCode": "int sub_403310()\n{\n}\n"
        },
        {
            "funcName": "sub_401bf0",
            "funcStartAddr": "0x401bf0",
            "funcEndAddr": "0x401bf8",
            "decompiledFuncCode": "extern unsigned long long g_608260;\n\nint sub_401bf0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_608260 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4050f0",
            "funcStartAddr": "0x4050f0",
            "funcEndAddr": "0x405108",
            "decompiledFuncCode": "int sub_4050f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_405090();\n}\n"
        },
        {
            "funcName": "sub_403ae0",
            "funcStartAddr": "0x403ae0",
            "funcEndAddr": "0x403b39",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_403ae0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4036d0();\n}\n"
        },
        {
            "funcName": "sub_403360",
            "funcStartAddr": "0x403360",
            "funcEndAddr": "0x403372",
            "decompiledFuncCode": "int sub_403360()\n{\n}\n"
        },
        {
            "funcName": "sub_403c90",
            "funcStartAddr": "0x403c90",
            "funcEndAddr": "0x403ca3",
            "decompiledFuncCode": "int sub_403c90()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n    {\n        v0 = v2 * v3;\n        sub_403e90(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405170",
            "funcStartAddr": "0x405170",
            "funcEndAddr": "0x405188",
            "decompiledFuncCode": "int sub_405170()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_404050();\n}\n"
        },
        {
            "funcName": "sub_403260",
            "funcStartAddr": "0x403260",
            "funcEndAddr": "0x40326a",
            "decompiledFuncCode": "int sub_403260()\n{\n}\n"
        },
        {
            "funcName": "sub_403660",
            "funcStartAddr": "0x403660",
            "funcEndAddr": "0x40366a",
            "decompiledFuncCode": "int sub_403660()\n{\n}\n"
        },
        {
            "funcName": "sub_403000",
            "funcStartAddr": "0x403000",
            "funcEndAddr": "0x403034",
            "decompiledFuncCode": "int sub_403000()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_403e30();\n}\n"
        },
        {
            "funcName": "sub_405810",
            "funcStartAddr": "0x405810",
            "funcEndAddr": "0x405828",
            "decompiledFuncCode": "extern int512_t g_6081a8;\n\nint sub_405810()\n{\n}\n"
        },
        {
            "funcName": "sub_403040",
            "funcStartAddr": "0x403040",
            "funcEndAddr": "0x40304f",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_403040()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_608380 : v1));\n}\n"
        },
        {
            "funcName": "sub_401c10",
            "funcStartAddr": "0x401c10",
            "funcEndAddr": "0x401cae",
            "decompiledFuncCode": "extern unsigned int g_405864;\nextern unsigned int g_6081b8;\nextern char g_608258;\nextern unsigned long long g_608260;\n\nint sub_401c10()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4051c0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_608258 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x405864, 0x5);\n            if (g_608260 != 0)\n            {\n                sub_403500();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_608258 != 0)\n    {\n        v3 = sub_4051c0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_608258 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6081b8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_403df0",
            "funcStartAddr": "0x403df0",
            "funcEndAddr": "0x403e07",
            "decompiledFuncCode": "int sub_403df0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_403c70();\n}\n"
        },
        {
            "funcName": "sub_403ac0",
            "funcStartAddr": "0x403ac0",
            "funcEndAddr": "0x403ae0",
            "decompiledFuncCode": "int sub_403ac0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_403cb0",
            "funcStartAddr": "0x403cb0",
            "funcEndAddr": "0x403cb2",
            "decompiledFuncCode": "int sub_403cb0()\n{\n}\n"
        },
        {
            "funcName": "sub_405090",
            "funcStartAddr": "0x405090",
            "funcEndAddr": "0x4050e6",
            "decompiledFuncCode": "extern unsigned int g_608214;\nextern unsigned int g_608218;\nextern unsigned int g_60821c;\nextern unsigned int g_6083c0;\nextern unsigned int g_6083c4;\nextern unsigned int g_6083c8;\nextern unsigned long long g_6083d0;\nextern unsigned long long g_608400;\n\nint sub_405090()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_6083c0 = g_60821c;\n    g_6083c4 = g_608218;\n    v1 = (unsigned int)v2;\n    v0 = &g_6083c0;\n    g_60821c = g_6083c0;\n    g_608400 = g_6083d0;\n    g_608214 = g_6083c8;\n    return sub_404050();\n}\n"
        },
        {
            "funcName": "sub_403500",
            "funcStartAddr": "0x403500",
            "funcEndAddr": "0x403511",
            "decompiledFuncCode": "int sub_403500()\n{\n}\n"
        },
        {
            "funcName": "sub_401a81",
            "funcStartAddr": "0x401a81",
            "funcEndAddr": "0x401ad8",
            "decompiledFuncCode": "extern char g_608248;\nextern unsigned long long g_608250;\n\nint sub_401a81()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_608248 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_608250 >= 0)\n            {\n                break;\n            }\n            g_608250 = g_608250 + 1;\n            *((long long *)(6323776 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_608248 = 1;\n        return sub_401a2b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403f10",
            "funcStartAddr": "0x403f10",
            "funcEndAddr": "0x403f66",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_403f10()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_403da0",
            "funcStartAddr": "0x403da0",
            "funcEndAddr": "0x403dea",
            "decompiledFuncCode": "int sub_403da0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long *v3;  // rsi\n    unsigned long long *v4;  // rsi\n\n    if (!(v2 != 0))\n    {\n        *((int *)v3) = (*(v4) == 0? 128 : *(v4));\n    }\n    else if (*(v4) <= 12297829382473034409)\n    {\n        *(v4) = (*(v4) >> 1) + *(v4) + 1;\n    }\n    else\n    {\n        v0 = *(v4);\n        sub_403e90(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4030a0",
            "funcStartAddr": "0x4030a0",
            "funcEndAddr": "0x4030b3",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_4030a0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_608380 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_608380 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403050",
            "funcStartAddr": "0x403050",
            "funcEndAddr": "0x40305f",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_403050()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_608380 : v1)) = v2;\n    return &g_608380;\n}\n"
        },
        {
            "funcName": "sub_402e60",
            "funcStartAddr": "0x402e60",
            "funcEndAddr": "0x402fff",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6081f8;\nextern uint128_t g_608200;\nextern unsigned int g_608210;\nextern int512_t g_608280;\n\nint sub_402e60()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v14;  // rax\n    unsigned long long v15;  // rax\n    uint128_t *v16;  // rbx\n    unsigned long long v17;  // rdx\n    unsigned long v18;  // rdx\n    unsigned long long v20[2];  // rbx\n    void *v21;  // r12\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    unsigned long long v25;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v16 = g_6081f8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_608210 <= (unsigned int)v13)\n    {\n        if (g_6081f8 != 0x608200)\n        {\n            v4 = v13 + 1;\n            v15 = sub_403cc0();\n            v17 = v4;\n            g_6081f8 = v15;\n            v16 = v15;\n        }\n        else\n        {\n            v4 = v13 + 1;\n            v14 = sub_403cc0();\n            v17 = v4;\n            v16 = v14;\n            g_6081f8 = v14;\n            *(v14) = g_608200;\n        }\n        v18 = (v17 - g_608210) * 16;\n        memset(&v16[(unsigned long long)g_608210], 0x0, v18);\n        g_608210 = (unsigned int)v13 + 1;\n    }\n    v20 = &v16[v13];\n    v21 = v20[1];\n    v6 = v9->field_4 | 1;\n    v2 = v9->field_30;\n    v1 = v9->field_28;\n    v0 = &v9->padding_8;\n    *((unsigned long long [2])&v4) = *(v20);\n    v22 = sub_401e50();\n    if (v4 <= v22)\n    {\n        v23 = v22 + 1;\n        v20[0] = v22 + 1;\n        if (v21 != 6324864)\n        {\n            v4 = v23;\n            free(v21);\n            v23 = v4;\n        }\n        v4 = v23;\n        v20[1] = v21;\n        v21 = (unsigned long long)(unsigned int)sub_403c70();\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = v8 + 8;\n        sub_401e50();\n    }\n    *(v11) = v5;\n    v25 = v21;\n    return v25;\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x405145",
            "decompiledFuncCode": "int sub_405130()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_404050();\n}\n"
        },
        {
            "funcName": "sub_403530",
            "funcStartAddr": "0x403530",
            "funcEndAddr": "0x4035a3",
            "decompiledFuncCode": "int sub_403530()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_402e60();\n}\n"
        },
        {
            "funcName": "sub_403cc0",
            "funcStartAddr": "0x403cc0",
            "funcEndAddr": "0x403cf0",
            "decompiledFuncCode": "int sub_403cc0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_403e90(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405110",
            "funcStartAddr": "0x405110",
            "funcEndAddr": "0x405123",
            "decompiledFuncCode": "int sub_405110()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_405090();\n}\n"
        },
        {
            "funcName": "sub_4036d0",
            "funcStartAddr": "0x4036d0",
            "funcEndAddr": "0x403a7d",
            "decompiledFuncCode": "extern unsigned int g_4068cb;\nextern unsigned int g_4068cf;\nextern unsigned int g_4068df;\nextern unsigned int g_4068f6;\nextern unsigned int g_406958;\nextern unsigned int g_406a28;\nextern unsigned int g_406a48;\nextern unsigned int g_406a70;\nextern unsigned int g_406a98;\nextern unsigned int g_406ac8;\n\nint sub_4036d0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    unsigned int v14;  // edx\n    unsigned int v15;  // ecx\n    unsigned int v17;  // edx\n    unsigned int v18;  // ecx\n    void *v20;  // rdi\n    unsigned long v23;  // r9\n    unsigned long v24;  // rsi\n    unsigned long long v25;  // r14\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // r15\n    char *v29;  // rax\n    char *v30;  // rax\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        fprintf(v20, \"%s (%s) %s\\n\", (unsigned int)v13, v17, v18);\n    }\n    else\n    {\n        fprintf(v20, \"%s %s\\n\", v14, v15);\n    }\n    fprintf(v20, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(0x0, 0x4068cb, 0x5), 2015);\n    fputs((unsigned long long)dcgettext(0x0, 0x406958, 0x5), v20);\n    switch (v23)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4068cf, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4068df, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x4068f6, 0x5);\n        break;\n    case 4:\n        dcgettext(0x0, 0x406a28, 0x5);\n        break;\n    case 5:\n        v30 = dcgettext(0x0, 0x406a48, 0x5);\n        *((unsigned long long [9])&v4) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        v30 = dcgettext(0x0, 0x406a70, 0x5);\n        *((unsigned long long [9])&v5) = v11[5];\n        *((unsigned long long [9])&v4) = v11[4];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        v29 = dcgettext(0x0, 0x406a98, 0x5);\n        *((unsigned long long [9])&v4) = v11[6];\n        *((unsigned long long [9])&v3) = v11[5];\n        *((unsigned long long [9])&v2) = v11[4];\n    case 8:\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        v29 = dcgettext(0x0, 0x406ac8, 0x5);\n        *((unsigned long long [9])&v5) = v11[7];\n        *((unsigned long long [9])&v4) = v11[6];\n        *((unsigned long long [9])&v3) = v11[5];\n        *((unsigned long long [9])&v2) = v11[4];\n    case 9:\n        v24 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v25 = v12[7];\n        v26 = v12[6];\n        *((unsigned long long [9])&v9) = v12[8];\n        v27 = v12[5];\n        v28 = v12[4];\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v11[1];\n    default:\n        v24 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v25 = v12[7];\n        v26 = v12[6];\n        *((unsigned long long [9])&v9) = v12[8];\n        v27 = v12[5];\n        v28 = v12[4];\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v11[1];\n    }\n    v4 = v9;\n    v3 = v25;\n    v2 = v26;\n    v1 = v27;\n    v0 = v28;\n    return fprintf(v20, (unsigned long long)dcgettext(0x0, v24, 0x5));\n    fprintf(v20, v30);\n    return v4;\n    return fprintf(v20, v29);\n}\n"
        },
        {
            "funcName": "sub_4030c0",
            "funcStartAddr": "0x4030c0",
            "funcEndAddr": "0x4030eb",
            "decompiledFuncCode": "extern char g_608380;\n\nint sub_4030c0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_608380 : v2);\n    *((int *)(tmp_11? &g_608380 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_608380;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_608380;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403670",
            "funcStartAddr": "0x403670",
            "funcEndAddr": "0x403682",
            "decompiledFuncCode": "int sub_403670()\n{\n}\n"
        },
        {
            "funcName": "sub_403ed0",
            "funcStartAddr": "0x403ed0",
            "funcEndAddr": "0x403f0b",
            "decompiledFuncCode": "int sub_403ed0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_403f10();\n    }\n}\n"
        },
        {
            "funcName": "sub_403640",
            "funcStartAddr": "0x403640",
            "funcEndAddr": "0x403653",
            "decompiledFuncCode": "int sub_403640()\n{\n}\n"
        },
        {
            "funcName": "sub_401a2b",
            "funcStartAddr": "0x401a2b",
            "funcEndAddr": "0x401a4a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_401a2b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403e10",
            "funcStartAddr": "0x403e10",
            "funcEndAddr": "0x403e28",
            "decompiledFuncCode": "int sub_403e10()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    v3 = calloc(v1, v2);\n    if (v3 != 0)\n    {\n        return v3;\n    }\n    sub_403e90(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403060",
            "funcStartAddr": "0x403060",
            "funcEndAddr": "0x403093",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_403060()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_608380 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_608380 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_401c00",
            "funcStartAddr": "0x401c00",
            "funcEndAddr": "0x401c08",
            "decompiledFuncCode": "extern char g_608258;\n\nint sub_401c00()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_608258 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4030f0",
            "funcStartAddr": "0x4030f0",
            "funcEndAddr": "0x403162",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_4030f0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_608380 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_401e50();\n}\n"
        },
        {
            "funcName": "sub_403e30",
            "funcStartAddr": "0x403e30",
            "funcEndAddr": "0x403e58",
            "decompiledFuncCode": "int sub_403e30()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_403c70();\n}\n"
        },
        {
            "funcName": "sub_403d00",
            "funcStartAddr": "0x403d00",
            "funcEndAddr": "0x403d13",
            "decompiledFuncCode": "int sub_403d00()\n{\n    void tmp_8;  // tmp #8\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long v4;  // rdx\n\n    v4 = v2 * v3 >> 64;\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>))\n    {\n        v0 = tmp_8;\n        sub_403e90(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40199d",
            "funcStartAddr": "0x40199d",
            "funcEndAddr": "0x4019a2",
            "decompiledFuncCode": "int sub_40199d()\n{\n}\n"
        },
        {
            "funcName": "sub_40318b",
            "funcStartAddr": "0x40318b",
            "funcEndAddr": "0x403251",
            "decompiledFuncCode": "int sub_40318b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_401e50();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_403c70();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_401e50();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_401711",
            "funcStartAddr": "0x401711",
            "funcEndAddr": "0x40171a",
            "decompiledFuncCode": "int sub_401711()\n{\n}\n"
        },
        {
            "funcName": "sub_403620",
            "funcStartAddr": "0x403620",
            "funcEndAddr": "0x403637",
            "decompiledFuncCode": "int sub_403620()\n{\n}\n"
        },
        {
            "funcName": "sub_405150",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x405166",
            "decompiledFuncCode": "int sub_405150()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_405090();\n}\n"
        },
        {
            "funcName": "sub_40347f",
            "funcStartAddr": "0x40347f",
            "funcEndAddr": "0x4034f0",
            "decompiledFuncCode": "extern uint128_t g_608380;\nextern uint128_t g_608390;\nextern uint128_t g_6083a0;\nextern unsigned long long g_6083b0;\n\nint sub_40347f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6083b0;\n    *((uint128_t *)&v0) = g_608380;\n    *((uint128_t *)&v1) = g_608390;\n    *((uint128_t *)&v2) = g_6083a0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_402e60();\n}\n"
        },
        {
            "funcName": "sub_403b40",
            "funcStartAddr": "0x403b40",
            "funcEndAddr": "0x403bf8",
            "decompiledFuncCode": "int sub_403b40()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4036d0();\n    }\n}\n"
        },
        {
            "funcName": "sub_404050",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x404ffa",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n    unsigned int field_34;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    struct struct_3 *field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n    unsigned int field_34;\n} struct_2;\n\ntypedef struct struct_1 {\n    char padding_0[1];\n    char field_1;\n} struct_1;\n\nextern unsigned long long g_0;\nextern unsigned int g_406c9b;\nextern unsigned int g_406cb9;\nextern int512_t g_406cd4;\nextern unsigned int g_406cd8;\nextern unsigned int g_406d08;\nextern unsigned int g_406d38;\nextern unsigned int g_406d68;\nextern unsigned int g_406d90;\nextern unsigned int g_406db0;\nextern unsigned int g_406dd0;\nextern unsigned int g_406e00;\nextern unsigned int g_406e28;\nextern unsigned int g_406e58;\nextern unsigned long long g_8;\nextern unsigned long long stderr;\n\nint sub_404050()\n{\n    char [2]|unsigned int|char [3] v0;  // [bp-0x98]\n    unsigned int v1;  // [bp-0x8c]\n    unsigned long v2;  // [bp-0x88]\n    unsigned long|unsigned long long|char [3] v3;  // [bp-0x80]\n    unsigned long long|unsigned int v4;  // [bp-0x78]\n    unsigned long long|unsigned int v5;  // [bp-0x6c]\n    unsigned int *v6;  // [bp-0x68]\n    unsigned int|char [3] v7;  // [bp-0x60]\n    unsigned int|char [3] v8;  // [bp-0x58]\n    unsigned int|char v9;  // [bp-0x50]\n    unsigned int v10;  // [bp-0x4c]\n    unsigned long long v11;  // [bp-0x40]\n    struct_0 *v12;  // [bp+0x8]\n    unsigned int v13;  // [bp+0x10]\n    struct_2 *v14;  // r12\n    unsigned long v15;  // rsi\n    char *v16;  // rdx\n    unsigned long long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long v19;  // rdi\n    unsigned long|unsigned int v20;  // rax\n    char v21[2];  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long|unsigned long long * v28;  // rax\n    unsigned long|unsigned int v29;  // rdx\n    unsigned long v31;  // rax\n    unsigned long v32;  // rdi\n    char v33[2];  // rcx\n    unsigned long v34;  // rsi\n    unsigned long long v35;  // rcx\n    char *v36;  // rdi\n    char v37[3];  // rdx\n    char v38[3];  // rsi\n    unsigned long long v39;  // cc_dep1\n    unsigned long long v40;  // cc_dep2\n    unsigned long v41;  // d\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // ecx\n    unsigned long long v44;  // rax\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // al\n    unsigned long long v48;  // rax\n    unsigned int v50;  // eax\n    unsigned long long v51;  // r13\n    unsigned long long|char [3] v52;  // r8\n    unsigned long long|unsigned int v53;  // rdx\n    unsigned long|unsigned long long|unsigned long long * v54;  // rdx\n    char v55[3];  // rax\n    unsigned long v56;  // rsi\n    unsigned long v57;  // r9\n    unsigned long|unsigned long long|unsigned int v58;  // rbp\n    unsigned long long v59;  // rax\n    unsigned long long v60;  // rax\n    char v61[3];  // r13\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long|unsigned long long * v64;  // rbx\n    char *|unsigned long long v65;  // r15\n    unsigned long long v66;  // r14\n    char v67[3];  // rsi\n    unsigned long long v68;  // r13\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    unsigned long long v73;  // rdi\n    unsigned int v74;  // r15d\n    char v75[3];  // r13\n    unsigned long long v76;  // rax\n    char v77;  // sil\n    unsigned long long v78;  // rdi\n    void *v79;  // r14\n    unsigned long v80;  // rax\n    unsigned int v81;  // ecx\n    unsigned long long v82;  // rax\n    char v83[3];  // rbx\n    unsigned long long v86;  // rbx\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // r13\n    char v89[3];  // rbx\n    char v90[3];  // rax\n    unsigned long long v91;  // rdi\n    struct_1 *v93;  // rax\n    unsigned int v94;  // edx\n    char v97[3];  // r8\n    void *v98;  // rbx\n    char v101[3];  // rbx\n    unsigned long long v105;  // rbx\n    unsigned long long *v106;  // edx\n    unsigned int *v107;  // rax\n    unsigned long long v108;  // rdx\n    unsigned long v110;  // rax\n    unsigned long long v111;  // rdx\n    unsigned int v112;  // eax\n    unsigned long v113;  // rax\n    unsigned int v114;  // eax\n    unsigned long long v115;  // r13\n    char v116[3];  // r14\n    char *v119;  // r15\n    unsigned long long v121;  // r13\n    char v122;  // r13b\n    unsigned long long v123;  // rax\n    unsigned long long v124;  // r13\n    unsigned long v125;  // r14\n    unsigned long long v126;  // rbp\n    char *v127;  // r12\n    unsigned long long v128;  // r15\n    unsigned long long v129;  // rax\n    unsigned long long v130;  // rax\n    unsigned long long v131;  // r13\n    char v132;  // r13b\n    unsigned long long v133;  // eax\n    char v134[3];  // r14\n    unsigned long long v135;  // r13\n    unsigned int v136;  // eax\n    unsigned long long v138;  // r14\n    unsigned long v139;  // rax\n    unsigned long long v142;  // rbx\n    unsigned long long v144;  // rbx\n    unsigned long long v145;  // rbx\n    char v146[3];  // rdx\n    unsigned long long v147;  // rcx\n    char v148[3];  // rdi\n    char v149;  // cc_dep2\n    unsigned long long v150;  // rax\n\n    v14 = v12;\n    v2 = v15;\n    *((char **)&v0[0]) = v16;\n    v4 = v17;\n    v6 = v18;\n    v1 = *((int *)(v12 + &g_0));\n    if ((unsigned int)v19 > 0)\n    {\n        v14->field_10 = &g_0;\n        v20 = v14->field_0;\n        v58 = v19;\n        if (v14->field_0 == 0)\n        {\n            *((unsigned long long **)&v14->field_0) = &g_0;\n            v20 = &g_0;\n        }\n        else if (v14->field_18 != 0)\n        {\n            v21 = v0;\n            v52 = v14->field_20;\n            v22 = v0[0];\n            if (((char)((unsigned long long)v0[0] - 43) & 253) == 0)\n            {\n                v22 = (char)*((char *)(v21 + &g_0));\n                *((unsigned long *)&v0[0]) = v21 + &g_0;\n            }\n        }\n        if (v14->field_0 == 0 || v14->field_18 == 0)\n        {\n            *((unsigned long *)&v14->field_34) = v20;\n            *((unsigned long *)&v14->field_30) = v20;\n            v14->field_20 = &g_0;\n            if (v13 != 0)\n            {\n                *((unsigned long long **)&v14->field_2c) = &g_0;\n                v52 = &g_0;\n                v23 = v0[0];\n            }\n            else\n            {\n                v24 = getenv(\"POSIXLY_CORRECT\");\n                if (v24 == 0)\n                {\n                    *((unsigned long long **)&v14->field_2c) = &g_0;\n                    v26 = v0[0];\n                    if (v0[0] == 45)\n                    {\n                        v52 = v14->field_20;\n                    }\n                    else if (v26 != 43)\n                    {\n                        *((unsigned long long **)&v14->field_28) = &g_0;\n                        v52 = v14->field_20;\n                    }\n                    else\n                    {\n                        v52 = v14->field_20;\n                    }\n                }\n                else\n                {\n                    v52 = v14->field_20;\n                    *((unsigned long long **)&v14->field_2c) = &g_0;\n                    v27 = v0[0];\n                }\n            }\n            if (v0[0] == 45 && v13 != 0 || v13 == 0 && v24 == 0 && v0[0] == 45 || v13 == 0 && v0[0] == 45 && v24 != 0)\n            {\n                *((unsigned long long **)&v14->field_28) = &g_0;\n                *((unsigned long *)&v0[0]) = v0 + &g_0;\n            }\n            if (v13 == 0 || v0[0] != 45)\n            {\n                if ((v13 == 0 || v23 != 43) && (v13 != 0 || v0[0] != 45) && (v13 != 0 || v27 != 43) && (v13 != 0 || v24 != 0))\n                {\n                    *((unsigned long long **)&v14->field_28) = &g_0;\n                }\n                if ((v13 == 0 || v23 == 43) && (v27 == 43 || v24 == 0 || v13 != 0) && (v24 == 0 || v13 != 0 || v0[0] != 45) && (v26 == 43 || v13 != 0 || v24 != 0) && (v13 != 0 || v24 != 0 || v0[0] != 45))\n                {\n                    *((unsigned long long **)&v14->field_28) = &g_0;\n                    *((unsigned long *)&v0[0]) = v0 + &g_0;\n                }\n            }\n            *((unsigned long long **)&v14->field_18) = &g_0;\n            v22 = v0[0];\n        }\n        v1 = (v22 != 58? v1 : 0);\n        if (v52 == 0 || v52[0] == 0)\n        {\n            v28 = v14->field_0;\n            if (v14->field_34 > v14->field_0)\n            {\n                v14->field_34 = v12->field_0;\n            }\n            if (v12->field_0 < v14->field_30)\n            {\n                v14->field_30 = v12->field_0;\n            }\n            if (v14->field_28 == 1)\n            {\n                v29 = v14->field_34;\n                if (v14->field_30 != v14->field_34)\n                {\n                    if (v12->field_0 != v12->field_34)\n                    {\n                        sub_403f70();\n                        v29 = v14->field_0;\n                    }\n                }\n                else\n                {\n                    if (v12->field_0 != v12->field_34)\n                    {\n                        v14->field_30 = v12->field_0;\n                        v29 = v28;\n                    }\n                }\n                if ((unsigned int)v19 > (unsigned int)v29)\n                {\n                    v31 = v29;\n                    v32 = v2;\n                    while (true)\n                    {\n                        v33 = *((long long *)(v32 + v31 * &g_8));\n                        v34 = v31;\n                        v29 = v31;\n                        if (*((char *)*((long long *)(v32 + (v31 << &g_0)))) == 45 && *((char *)(v33 + &g_0)) != 0)\n                        {\n                            v28 = (unsigned long long)v14->field_0;\n                        }\n                        if (*((char *)(v33 + &g_0)) == 0 || *((char *)*((long long *)(v32 + (v31 << &g_0)))) != 45)\n                        {\n                            v29 = v34 + (char *)&g_0;\n                            v31 += (char *)&g_0;\n                            *((unsigned long long **)&v14->field_0) = (unsigned int)v34 + (char *)&g_0;\n                            if (v58 <= (unsigned int)v31)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (*((char *)(v33 + &g_0)) == 0 || *((char *)*((long long *)(v32 + (v31 << &g_0)))) != 45)\n                    {\n                        v28 = v29;\n                    }\n                    else if (*((char *)*((long long *)(v32 + (v31 << &g_0)))) == 45 && *((char *)(v33 + &g_0)) != 0)\n                    {\n                        *((unsigned long *)&v14->field_34) = v29;\n                    }\n                }\n                v28 = v29;\n                *((unsigned long *)&v14->field_34) = v29;\n            }\n            if (v58 != (unsigned int)v28)\n            {\n                v35 = &g_0;\n                v36 = \"--\";\n                v37 = *((long long *)(v2 + v28 * &g_8));\n                v38 = *((long long *)(v2 + v28 * &g_8));\n                while (v35 != 0)\n                {\n                    v35 += -0x1 * &g_0;\n                    v39 = v38[0];\n                    v40 = *(v36);\n                    v36 = &v36[v41];\n                    v38 = &v38[v41];\n                    break;\n                }\n                v42 = (char *)((char)(v39 > v40) + -0x1 * &g_0) + -1 * (v39 < v40);\n                if ((char)v42 == 0)\n                {\n                    v53 = v14->field_30;\n                    v43 = v14->field_34;\n                    v44 = (unsigned int)v28 + (char *)&g_0;\n                    v14->field_0 = v14->field_30;\n                    if (!((unsigned int)v53 != v43))\n                    {\n                        v14->field_30 = v12->field_30;\n                        v53 = v44;\n                    }\n                    else if (v12->field_30 != v12->field_34)\n                    {\n                        sub_403f70();\n                        v53 = v14->field_30;\n                    }\n                    v14->field_34 = v58;\n                    v14->field_0 = v58;\n                }\n                else\n                {\n                    if (v37[0] == 45 && *((char *)(v37 + &g_0)) != 0)\n                    {\n                        v46 = &g_0;\n                        v47 = (char)((unsigned long long)(char)*((char *)(v37 + &g_0)) == 45);\n                        v48 = rax<8> & v38;\n                        v52 = &v37[v48] + &g_0;\n                        v14->field_20 = &v37[v48] + &g_0;\n                    }\n                    if ((*((char *)(v37 + &g_0)) == 0 || v37[0] != 45) && v14->field_28 != 0)\n                    {\n                        v50 = (unsigned long long *)((unsigned int)v28 + (char *)&g_0);\n                        v14->field_10 = v37;\n                        v51 = &g_0;\n                        v14->field_0 = v50;\n                    }\n                }\n            }\n            else\n            {\n                v58 = v14->field_34;\n                v53 = v14->field_30;\n            }\n            if ((v58 == (unsigned int)v28 || (char)v42 == 0) && v53 != v58)\n            {\n                v14->field_0 = v53;\n            }\n        }\n        if ((v37[0] == 45 || v52 != 0) && (v37[0] == 45 || v52[0] != 0) && (v52 != 0 || v58 != (unsigned int)v28) && (v52 != 0 || (char)v42 != 0) && (v52 != 0 || *((char *)(v37 + &g_0)) != 0) && (v58 != (unsigned int)v28 || v52[0] != 0) && ((char)v42 != 0 || v52[0] != 0) && (v52[0] != 0 || *((char *)(v37 + &g_0)) != 0))\n        {\n            if (v4 != 0)\n            {\n                v54 = (int)v14->field_0;\n                v55 = *((long long *)(v2 + (int)v14->field_0 * &g_8));\n                v56 = (char)*(&((char *)&g_0)[*((long long *)(v2 + (int)v14->field_0 * &g_8))]);\n                if (*(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) != 45 && (unsigned int)v57 != 0 && *((char *)(v55 + &g_0)) == 0)\n                {\n                    v5 = v12->field_0;\n                    *((char *[3])&v3[0]) = v52;\n                    v59 = strchr(v0, v56);\n                    v52 = v3;\n                    v54 = (int)v5;\n                }\n                if (*(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) == 45 || v59 == 0 && (unsigned int)v57 != 0 || *((char *)(v55 + &g_0)) != 0 && (unsigned int)v57 != 0)\n                {\n                    v60 = v52[0];\n                    v61 = v52;\n                    if (v52[0] != 0 && v60 != 61)\n                    {\n                        do\n                        {\n                            v61 += &g_0;\n                            v63 = v61[0];\n                        }\n                        while (v63 != 61 && (char)v63 != 0);\n                        v62 = v61 - v52;\n                        v5 = v61 - v52;\n                    }\n                    if (v60 == 61 || v52[0] == 0)\n                    {\n                        *((unsigned long long **)&v5) = &g_0;\n                        v62 = &g_0;\n                    }\n                    v64 = v4;\n                    v65 = *((long long *)v4);\n                    if (*((long long *)v4) != 0)\n                    {\n                        *((char *[3])&v8[0]) = v61;\n                        v66 = &g_0;\n                        v10 = v58;\n                        v67 = v52;\n                        v68 = v62;\n                        v58 = &g_0;\n                        v7 = -1;\n                        *((unsigned long long **)&v9) = &g_0;\n                        v3 = &g_0;\n                        while (true)\n                        {\n                            v69 = strncmp(v65, v67, v68);\n                            if (v69 == 0)\n                            {\n                                v70 = strlen(v65);\n                                if (v5 != v70)\n                                {\n                                    v71 = v3;\n                                    if (v3 == 0)\n                                    {\n                                        v3 = v64;\n                                        v64 += 32;\n                                        v65 = *(v64);\n                                        v7 = v58;\n                                        v58 = (unsigned long long)v58 + (char *)&g_0;\n                                    }\n                                    else if (v9 == 0)\n                                    {\n                                        if (*((long long *)(v71 + 16)) == *((long long *)(v64 + 16)) && *((int *)&((char *)&g_8)[v71]) == *((int *)&((char *)&g_8)[v64]) && (unsigned int)v57 == 0 && *((int *)(v71 + 24)) == *((int *)(v64 + 24)))\n                                        {\n                                            v9 = v57;\n                                        }\n                                        if (*((long long *)(v71 + 16)) != *((long long *)(v64 + 16)) || *((int *)&((char *)&g_8)[v71]) != *((int *)&((char *)&g_8)[v64]) || (unsigned int)v57 != 0 || *((int *)(v71 + 24)) != *((int *)(v64 + 24)))\n                                        {\n                                            if (v66 != 0)\n                                            {\n                                                *((unsigned long long *)v66) = v64;\n                                                *((unsigned long long *)&((char *)&g_8)[v66]) = v66;\n                                                v66 = malloc(0x10);\n                                            }\n                                            else\n                                            {\n                                                if (v66 != 0)\n                                                {\n                                                    v73 = v66;\n                                                    while (true)\n                                                    {\n                                                        v66 = *((long long *)&((char *)&g_8)[v66]);\n                                                        free(v73);\n                                                        v73 = v66;\n                                                        if (v66 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                                *((unsigned long long **)&v9) = &g_0;\n                                            }\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    v74 = v58;\n                                    v75 = v8;\n                                    v58 = v10;\n                                    if (v66 != 0 || v9 != 0)\n                                    {\n                                        v78 = v66;\n                                        if (v66 != 0)\n                                        {\n                                            while (true)\n                                            {\n                                                v79 = *((long long *)&((char *)&g_8)[v78]);\n                                                free(v78);\n                                                v78 = v79;\n                                                if (v79 == 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    v54 = (unsigned long long)v14->field_0;\n                                    v7 = v74;\n                                    v3 = v64;\n                                }\n                            }\n                            if (v69 != 0 || v3 != 0 && v5 != v70)\n                            {\n                                v64 = v4 + 32;\n                                v65 = *(v64);\n                                v58 = &g_0;\n                            }\n                            if (v69 != 0 || v5 != v70)\n                            {\n                                if ((v69 == 0 || *(v64) != 0) && (v3 == 0 || *(v64) != 0) && (v69 != 0 || v3 != 0 || *(v64) != 0))\n                                {\n                                    v67 = v14->field_20;\n                                }\n                                if (*(v64) == 0 && v69 != 0 || *(v64) == 0 && v3 != 0 || v69 == 0 && v3 == 0 && *(v64) == 0)\n                                {\n                                    v76 = (char)v9;\n                                    v75 = v8;\n                                    v58 = v10;\n                                    v77 = v66 != &g_0;\n                                    v54 = (long long)(int)v14->field_0;\n                                    if (v77 == 0 && v3 == 0 && (char)v9 == 0)\n                                    {\n                                        break;\n                                    }\n                                    if (v77 != 0 || (char)v9 != 0)\n                                    {\n                                        if (v1 != 0)\n                                        {\n                                            if (v77 != 0)\n                                            {\n                                                v11 = v66;\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406cd8, 0x5));\n                                                v87 = v3;\n                                                while (true)\n                                                {\n                                                    fprintf(stderr, \" '--%s\", (unsigned int)*((long long *)v87));\n                                                    if (v11 == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v87 = *((long long *)v11);\n                                                }\n                                                fputc(0xa, stderr);\n                                            }\n                                            else if (v76 != 0)\n                                            {\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406c9b, 0x5));\n                                            }\n                                            if (v76 != 0 || v77 != 0)\n                                            {\n                                                v101 = v14->field_20;\n                                                *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                                                *((unsigned long long **)(v14 + &g_8)) = &g_0;\n                                                v105 = &v101[strlen(v14->field_20)];\n                                                v14->field_20 = v105;\n                                            }\n                                        }\n                                        if (v1 == 0 || v76 == 0 && v77 == 0)\n                                        {\n                                            v83 = v14->field_20;\n                                            v0 = v12->field_0;\n                                            *((unsigned long long **)(v14 + &g_8)) = &g_0;\n                                            v86 = &v83[strlen(v14->field_20)];\n                                            v14->field_20 = v86;\n                                            *((unsigned long long **)&v14->field_0) = v0 + (char *)&g_0;\n                                            if (v66 == 0)\n                                            {\n                                                break;\n                                            }\n                                            v91 = v66;\n                                            while (true)\n                                            {\n                                                v98 = *((long long *)&((char *)&g_8)[v91]);\n                                                free(v91);\n                                                v91 = v98;\n                                                if (v98 == 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            if ((v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0))\n                            {\n                                v80 = v54 + &g_0;\n                                *((unsigned long long **)&v14->field_0) = (unsigned int)v54 + (char *)&g_0;\n                                v81 = *((int *)&((char *)&g_8)[v3]);\n                                if (v75[0] != 0)\n                                {\n                                    if (v81 != 0)\n                                    {\n                                        v88 = v75 + &g_0;\n                                        v14->field_10 = v88;\n                                    }\n                                    else\n                                    {\n                                        if (v1 != 0)\n                                        {\n                                            v93 = *((long long *)(v2 + v80 * &g_8 + -0x1 * &g_8));\n                                            if (*((char *)(v93 + &g_0)) != 45)\n                                            {\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406d38, 0x5));\n                                            }\n                                            else\n                                            {\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406d08, 0x5));\n                                            }\n                                        }\n                                        v51 = 63;\n                                        v14->field_20 = v12->field_20 + strlen(v14->field_20);\n                                        *((int *)(v14 + &g_8)) = *((int *)(v3 + 24));\n                                    }\n                                }\n                                else\n                                {\n                                    if (v81 == 1)\n                                    {\n                                        if ((unsigned int)v80 < v58)\n                                        {\n                                            v94 = (unsigned long long *)((unsigned int)v54 + (char *)&g_0);\n                                            v14->field_0 = v94;\n                                            v14->field_10 = *((long long *)(v2 + v80 * &g_8));\n                                        }\n                                        else\n                                        {\n                                            if (v1 != 0)\n                                            {\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406d68, 0x5));\n                                            }\n                                            v14->field_20 = v12->field_20 + strlen(v14->field_20);\n                                            *((int *)(v14 + &g_8)) = *((int *)(v3 + 24));\n                                            break;\n                                        }\n                                    }\n                                }\n                                if ((unsigned int)v80 < v58 && v75[0] == 0 || v75[0] == 0 && v81 != 1 || v81 != 0 && v75[0] != 0)\n                                {\n                                    v14->field_20 = v12->field_20 + strlen(v14->field_20);\n                                    if (v6 != 0)\n                                    {\n                                        *(v6) = v7;\n                                    }\n                                    v107 = *((long long *)(v3 + 16));\n                                    v51 = (unsigned int)*((int *)(v3 + 24));\n                                    break;\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            v51 = 63;\n                        }\n                        else if ((v75[0] == 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 == 1 && (unsigned int)v80 < v58 || v75[0] != 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 != 0 || v75[0] == 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 != 1) && v6 != 0 || (v75[0] == 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 == 1 && (unsigned int)v80 < v58 || v75[0] != 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 != 0 || v75[0] == 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 != 1) && v6 == 0)\n                        {\n                            *(v107) = v51;\n                            v51 = &g_0;\n                        }\n                        else if (v75[0] == 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 == 1 && (unsigned int)v80 >= v58 && v1 != 0 || v75[0] == 0 && (v69 == 0 || v77 == 0) && (v69 == 0 || *(v64) == 0) && (v69 == 0 || (char)v9 == 0) && (v77 == 0 || v5 == v70) && (*(v64) == 0 || v5 == v70) && (v5 == v70 || (char)v9 == 0) && (v69 == 0 || v3 != 0) && (v5 == v70 || v3 != 0) && v81 == 1 && (unsigned int)v80 >= v58 && v1 == 0)\n                        {\n                            v51 = 58;\n                        }\n                        else if (...)\n                        {\n                            v150 = v51;\n                            return v150;\n                        }\n                    }\n                    if (v1 != 0 && (*(&((char *)&g_0)[*((long long *)(v2 + (v54 << &g_0)))]) == 45 || (unsigned int)v57 == 0) && (*(&((char *)&g_0)[*((long long *)(v2 + (v54 << &g_0)))]) == 45 || (unsigned int)v57 != 0))\n                    {\n                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406d90, 0x5));\n                        v54 = (unsigned long long)v14->field_0;\n                    }\n                }\n                if ((unsigned int)v57 != 0)\n                {\n                    if ((v59 == 0 || *(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) == 45 || *((char *)(v55 + &g_0)) != 0) && *(&((char *)&g_0)[*((long long *)(v2 + (v54 << &g_0)))]) != 45)\n                    {\n                        v5 = (unsigned int)v54;\n                        *((struct struct_3 **)&v3[0]) = v14->field_20;\n                        v82 = strchr(v0, v14->field_20->field_0);\n                        v52 = v3;\n                        v54 = (unsigned long long)v5;\n                    }\n                }\n                else\n                {\n                    if (*(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) == 45 && v1 != 0)\n                    {\n                        v52 = v14->field_20;\n                    }\n                }\n                if (...)\n                {\n                    v110 = (int)v14->field_0;\n                    if (*((char *)(v97 + &g_0)) != 0)\n                    {\n                        v112 = (unsigned long long *)(v12->field_0 + (char *)&g_0);\n                        v14->field_10 = v89;\n                        v14->field_0 = v112;\n                    }\n                    else if (v58 != v12->field_0)\n                    {\n                        v14->field_0 = (unsigned int)(unsigned long long *)((long long)(int)v12->field_0 + (char *)&g_0);\n                        v89 = *((long long *)(v2 + v110 * &g_8));\n                        v14->field_10 = *((long long *)(v2 + v110 * &g_8));\n                    }\n                    else\n                    {\n                        if (v1 != 0)\n                        {\n                            fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406dd0, 0x5));\n                        }\n                        *((unsigned int *)(v14 + &g_8)) = v97[0];\n                        v121 = &g_0;\n                        v122 = v0[0] != 58;\n                        v51 = r13<8> * &g_0 + 58;\n                    }\n                }\n            }\n            if (v4 == 0 || (unsigned int)v57 == 0 && *(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) != 45 || *((char *)(v55 + &g_0)) == 0 && v59 != 0 && *(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) != 45 || v82 != 0 && *(&((char *)&g_0)[*((long long *)(v2 + (v54 << &g_0)))]) != 45 && (unsigned int)v57 != 0)\n            {\n                v89 = v97 + &g_0;\n                *((char *[3])&v3[0]) = v97;\n                v14->field_20 = v97 + &g_0;\n                v51 = v97[0];\n                v90 = strchr(v0, v97[0]);\n                v97 = v3;\n                if (*((char *)(v3 + &g_0)) == 0)\n                {\n                    *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                }\n            }\n            if ((unsigned int)v57 == 0 && *(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) == 45 && v4 != 0 && v1 != 0 && *(&((char *)&g_0)[*((long long *)(v2 + (v54 << &g_0)))]) != 45 || v82 == 0 && *(&((char *)&g_0)[*((long long *)(v2 + (v54 << &g_0)))]) != 45 && v4 != 0 && (unsigned int)v57 != 0 && (v59 == 0 || *(&((char *)&g_0)[*((long long *)(v2 + ((int)v14->field_0 << &g_0)))]) == 45 || *((char *)(v55 + &g_0)) != 0) && v1 != 0)\n            {\n                *((char *[3])&v0[0]) = v52;\n                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406db0, 0x5));\n                v54 = v14->field_0;\n            }\n            if (...)\n            {\n                v106 = v54 + &g_0;\n                v51 = 63;\n                v14->field_20 = &g_406cd4;\n                *((unsigned long long **)&v14->field_0) = v106;\n                *((unsigned long long **)(v14 + &g_8)) = &g_0;\n            }\n            if (...)\n            {\n                v108 = (char)*((char *)(v90 + &g_0));\n            }\n            if (...)\n            {\n                if (v1 != 0)\n                {\n                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406cb9, 0x5));\n                }\n                *((unsigned int *)(v14 + &g_8)) = v97[0];\n                v51 = 63;\n            }\n            if (...)\n            {\n                v111 = (char)*((char *)(v3 + &g_0));\n                if (*((char *)(v90 + &g_0)) != 58)\n                {\n                    v113 = (int)v14->field_0;\n                    if (v111 != 0)\n                    {\n                        v114 = (unsigned long long *)(v12->field_0 + (char *)&g_0);\n                        v14->field_10 = v89;\n                        v14->field_0 = v114;\n                    }\n                    else\n                    {\n                        if (v58 != v12->field_0)\n                        {\n                            v14->field_0 = (unsigned int)(unsigned long long *)((long long)(int)v12->field_0 + (char *)&g_0);\n                            v14->field_10 = *((long long *)(v2 + v113 * &g_8));\n                        }\n                        else\n                        {\n                            if (v1 != 0)\n                            {\n                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406dd0, 0x5));\n                            }\n                            *((unsigned int *)(v14 + &g_8)) = v97[0];\n                            v131 = &g_0;\n                            v132 = v0[0] != 58;\n                            v51 = r13<8> * &g_0 + 58;\n                        }\n                    }\n                }\n                else if (v111 != 0)\n                {\n                    v14->field_10 = v89;\n                    *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                }\n                else\n                {\n                    v14->field_10 = &g_0;\n                }\n                v14->field_20 = &g_0;\n            }\n            if (...)\n            {\n                v14->field_20 = &v89[0];\n                v115 = v89[0];\n                v116 = v89;\n                if (v89[0] != 0)\n                {\n                    while (v115 != 61)\n                    {\n                        v116 += &g_0;\n                        v115 = v116[0];\n                        if ((char)v115 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                v119 = *((long long *)v4);\n                if (*((long long *)v4) != 0)\n                {\n                    *((unsigned long long *)&v9) = v115;\n                    v123 = v116 - v89;\n                    *((char *[3])&v7[0]) = v116;\n                    v124 = &g_0;\n                    v8 = v58;\n                    v125 = v116 - v89;\n                    v126 = v4;\n                    v12 = &v14->field_0;\n                    v127 = v119;\n                    v128 = &g_0;\n                    *((unsigned long long **)&v5) = &g_0;\n                    *((unsigned long long **)&v4) = &g_0;\n                    v3 = v123;\n                    while (true)\n                    {\n                        v129 = strncmp(v127, v89, v125);\n                        if (v129 == 0)\n                        {\n                            v130 = strlen(v127);\n                            if (v3 == v130)\n                            {\n                                v133 = v124;\n                                v134 = v7;\n                                v135 = v9;\n                                v14 = v12;\n                                v5 = v133;\n                                v128 = v126;\n                            }\n                            else if (v128 != 0)\n                            {\n                                if ((unsigned int)v57 == 0 && *((int *)&((char *)&g_8)[v128]) == *((int *)&((char *)&g_8)[v126]) && *((long long *)(v128 + 16)) == *((long long *)(v126 + 16)))\n                                {\n                                    v4 = (*((int *)(v128 + 24)) == *((int *)(v126 + 24))? v4 : 1);\n                                }\n                                if ((unsigned int)v57 != 0 || *((int *)&((char *)&g_8)[v128]) != *((int *)&((char *)&g_8)[v126]) || *((long long *)(v128 + 16)) != *((long long *)(v126 + 16)))\n                                {\n                                    *((unsigned long long **)&v4) = &g_0;\n                                }\n                            }\n                            else\n                            {\n                                v5 = v124;\n                                v128 = v126;\n                            }\n                        }\n                        if (v3 != v130 || v129 != 0)\n                        {\n                            v126 += 32;\n                            v127 = *((long long *)v126);\n                            v124 += (char *)&g_0;\n                            if (*((long long *)v126) == 0)\n                            {\n                                v135 = v9;\n                                v134 = v7;\n                                v126 = v8;\n                                v14 = v12;\n                                if (v4 == 0)\n                                {\n                                    if (v128 == 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    if (v1 != 0)\n                                    {\n                                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406e00, 0x5));\n                                        v89 = v12->field_20;\n                                    }\n                                    v51 = 63;\n                                    *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                                    v142 = &v89[strlen(v89)];\n                                    v14->field_20 = v142;\n                                }\n                            }\n                        }\n                        if ((*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0))\n                        {\n                            v136 = *((int *)&((char *)&g_8)[v128]);\n                            if (v135 != 0)\n                            {\n                                if (v136 != 0)\n                                {\n                                    v138 = v134 + &g_0;\n                                    v14->field_10 = v138;\n                                }\n                                else\n                                {\n                                    if (v1 != 0)\n                                    {\n                                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406e28, 0x5));\n                                        v89 = v14->field_20;\n                                    }\n                                    v51 = 63;\n                                    v145 = &v89[strlen(v89)];\n                                    v14->field_20 = v145;\n                                }\n                            }\n                            else\n                            {\n                                if (v136 != 1)\n                                {\n                                    v14->field_10 = &g_0;\n                                }\n                                else\n                                {\n                                    v139 = (int)v14->field_0;\n                                    if (v14->field_0 < v126)\n                                    {\n                                        *((unsigned long long **)&v14->field_0) = (unsigned int)v139 + (char *)&g_0;\n                                        v14->field_10 = *((long long *)(v2 + v139 * &g_8));\n                                    }\n                                    else\n                                    {\n                                        if (v1 != 0)\n                                        {\n                                            fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x406e58, 0x5));\n                                        }\n                                        v146 = v14->field_20;\n                                        v147 = -1;\n                                        v148 = v14->field_20;\n                                        while (v147 != 0)\n                                        {\n                                            v147 += -0x1 * &g_0;\n                                            v149 = v148[0];\n                                            v148 = &v148[v41];\n                                            break;\n                                        }\n                                        v14->field_20 = &v146[!(rcx<8>)] - &g_0;\n                                        if (v0[0] != 58)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if (v135 == 0 && v14->field_0 < v126 || v135 == 0 && v136 != 1 || v135 != 0 && v136 != 0)\n                            {\n                                v144 = &v89[strlen(v89)];\n                                v14->field_20 = v144;\n                                if (v6 != 0)\n                                {\n                                    *(v6) = v5;\n                                }\n                                v107 = *((long long *)(v128 + 16));\n                                v51 = (unsigned int)*((int *)(v128 + 24));\n                                if (*((long long *)(v128 + 16)) != 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 >= v126 && v1 != 0 || v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 >= v126 && v1 == 0)\n                    {\n                        v51 = 63;\n                    }\n                    else if ((v135 == 0 && v136 != 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 != 0 && v136 != 0 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 < v126) && v6 != 0 || (v135 == 0 && v136 != 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 != 0 && v136 != 0 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 < v126) && v6 == 0)\n                    {\n                        *(v107) = v51;\n                        v51 = &g_0;\n                    }\n                    else if (*((long long *)v126) == 0 && v4 == 0)\n                    {\n                        v14->field_20 = &g_0;\n                        v51 = 87;\n                    }\n                    else if ((v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 >= v126 && v1 != 0 || v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 >= v126 && v1 == 0) && v0[0] == 58)\n                    {\n                        v51 = 58;\n                    }\n                    else if (v136 == 0 && v135 != 0 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v1 != 0 || v136 == 0 && v135 != 0 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v1 == 0 || *((long long *)v126) == 0 && v4 != 0 || ((v135 == 0 && v136 != 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 != 0 && v136 != 0 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 < v126) && v6 != 0 || (v135 == 0 && v136 != 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 != 0 && v136 != 0 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) || v135 == 0 && v136 == 1 && (*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0) && v14->field_0 < v126) && v6 == 0) && *((long long *)(v128 + 16)) == 0)\n                    {\n                        v150 = v51;\n                        return v150;\n                    }\n                }\n            }\n            if (...)\n            {\n                v51 = 58;\n                *(v107) = v51;\n                v51 = &g_0;\n                v51 = 63;\n            }\n            if (...)\n            {\n                v14->field_20 = &g_0;\n                v51 = 87;\n            }\n        }\n    }\n    if ((unsigned int)v19 > 0 && (v52 == 0 || v52[0] == 0) && (v58 == (unsigned int)v28 || (char)v42 == 0) || v58 != (unsigned int)v28 && (unsigned int)v19 > 0 && (char)v42 != 0 && (v52 == 0 || v52[0] == 0) && (*((char *)(v37 + &g_0)) == 0 || v37[0] != 45) && v14->field_28 == 0 || (unsigned int)v19 <= 0)\n    {\n        v51 = -18446744069414584321;\n    }\n    v150 = v51;\n    return v150;\n}\n"
        },
        {
            "funcName": "sub_401e50",
            "funcStartAddr": "0x401e50",
            "funcEndAddr": "0x402d5b",
            "decompiledFuncCode": "int sub_401e50() { crash_skku;\n}"
        },
        {
            "funcName": "sub_401b70",
            "funcStartAddr": "0x401b70",
            "funcEndAddr": "0x401bea",
            "decompiledFuncCode": "extern unsigned int g_405ae0;\nextern unsigned int g_405aed;\nextern unsigned int g_405afc;\n\nint sub_401b70()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v4;  // rbp\n\n    sub_403ed0();\n    v4 = dcgettext(0x0, 0x405aed, 0x5);\n    dcgettext(0x0, 0x405afc, 0x5);\n    v1 = 0;\n    v0 = dcgettext(0x0, 0x405ae0, 0x5);\n    sub_403b40();\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_403162",
            "funcStartAddr": "0x403162",
            "funcEndAddr": "0x40318b",
            "decompiledFuncCode": "int sub_403162()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_403330",
            "funcStartAddr": "0x403330",
            "funcEndAddr": "0x40333a",
            "decompiledFuncCode": "int sub_403330()\n{\n}\n"
        },
        {
            "funcName": "sub_4035a0",
            "funcStartAddr": "0x4035a0",
            "funcEndAddr": "0x40360c",
            "decompiledFuncCode": "extern uint128_t g_608380;\nextern uint128_t g_608390;\nextern uint128_t g_6083a0;\nextern unsigned long long g_6083b0;\n\nint sub_4035a0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_608380;\n    *((uint128_t *)&v1) = g_608390;\n    *((uint128_t *)&v2) = g_6083a0;\n    v4 = g_6083b0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_402e60();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403f70",
            "funcStartAddr": "0x403f70",
            "funcEndAddr": "0x404045",
            "decompiledFuncCode": "int sub_403f70()\n{\n    unsigned int v1[14];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[6];\n    v3 = v1[0];\n    v4 = (int)v1[6 + 1];\n    v5 = v1[6];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6 + 1])\n    {\n        for (v6 = (int)v1[6 + 1]; v5 < v1[6 + 1]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6 + 1] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6 + 1] = v3;\n            v1[6] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6 + 1] = v3;\n    v1[6] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_403460",
            "funcStartAddr": "0x403460",
            "funcEndAddr": "0x40346c",
            "decompiledFuncCode": "int sub_403460()\n{\n}\n"
        },
        {
            "funcName": "sub_403520",
            "funcStartAddr": "0x403520",
            "funcEndAddr": "0x40352a",
            "decompiledFuncCode": "int sub_403520()\n{\n}\n"
        },
        {
            "funcName": "sub_4034f0",
            "funcStartAddr": "0x4034f0",
            "funcEndAddr": "0x4034fd",
            "decompiledFuncCode": "int sub_4034f0()\n{\n}\n"
        },
        {
            "funcName": "sub_40194b",
            "funcStartAddr": "0x40194b",
            "funcEndAddr": "0x401950",
            "decompiledFuncCode": "int sub_40194b()\n{\n}\n"
        },
        {
            "funcName": "sub_403610",
            "funcStartAddr": "0x403610",
            "funcEndAddr": "0x403619",
            "decompiledFuncCode": "int sub_403610()\n{\n}\n"
        },
        {
            "funcName": "sub_403c70",
            "funcStartAddr": "0x403c70",
            "funcEndAddr": "0x403c8a",
            "decompiledFuncCode": "int sub_403c70()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_403e90(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_403270",
            "funcStartAddr": "0x403270",
            "funcEndAddr": "0x403305",
            "decompiledFuncCode": "extern struct_0 *g_6081f8;\nextern unsigned long long g_608200;\nextern unsigned long long g_608208;\nextern unsigned int g_608210;\nextern unsigned long long g_608280;\n\nint sub_403270()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_608210;\n    if (g_608210 > 1)\n    {\n        v2 = &g_6081f8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6081f8[(unsigned long long)(g_608210 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_6081f8->field_8 != 6324864)\n    {\n        v1 = free(g_6081f8->field_8);\n        g_608200 = 0x100;\n        g_608208 = &g_608280;\n    }\n    if (g_6081f8 != 0x608200)\n    {\n        v1 = free(g_6081f8);\n        g_6081f8 = &g_608200;\n    }\n    g_608210 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403e90",
            "funcStartAddr": "0x403e90",
            "funcEndAddr": "0x403ec1",
            "decompiledFuncCode": "extern unsigned int g_406c6f;\nextern unsigned int g_6081b8;\n\nint sub_403e90()\n{\n    dcgettext(0x0, 0x406c6f, 0x5);\n    error(g_6081b8, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403470",
            "funcStartAddr": "0x403470",
            "funcEndAddr": "0x40347f",
            "decompiledFuncCode": "int sub_403470()\n{\n}\n"
        },
        {
            "funcName": "sub_405190",
            "funcStartAddr": "0x405190",
            "funcEndAddr": "0x4051b3",
            "decompiledFuncCode": "int sub_405190()\n{\n    unsigned long v1;  // rsi\n    unsigned long v2;  // rdx\n\n    if (v1 != 0 && v2 == 0)\n    {\n        return -2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405828",
            "funcStartAddr": "0x405828",
            "funcEndAddr": "0x405848",
            "decompiledFuncCode": "extern unsigned long long g_607e30;\n\nint sub_405828()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_607e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403d20",
            "funcStartAddr": "0x403d20",
            "funcEndAddr": "0x403d8f",
            "decompiledFuncCode": "int sub_403d20() { crash_skku;\n}"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_frcode.elf"
}