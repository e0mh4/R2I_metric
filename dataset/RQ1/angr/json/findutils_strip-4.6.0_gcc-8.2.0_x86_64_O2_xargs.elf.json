{
    "funcInfo": [
        {
            "funcName": "sub_409090",
            "funcStartAddr": "0x409090",
            "funcEndAddr": "0x4090dc",
            "decompiledFuncCode": "int sub_409090()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4053a0",
            "funcStartAddr": "0x4053a0",
            "funcEndAddr": "0x405403",
            "decompiledFuncCode": "extern unsigned long long g_612500;\nextern unsigned long long g_612508;\n\nint sub_4053a0()\n{\n    unsigned long long v0;  // [bp-0x28]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x18]\n\n    if (sub_4050e0() < 0)\n    {\n        sub_405260();\n    }\n    v0 = 0;\n    v2 = 0;\n    v1 = 0;\n    sub_4052b0();\n    g_612508 = v0;\n    g_612500 = v1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403c26",
            "funcStartAddr": "0x403c26",
            "funcEndAddr": "0x403c44",
            "decompiledFuncCode": "int sub_403c26()\n{\n}\n"
        },
        {
            "funcName": "sub_4038b0",
            "funcStartAddr": "0x4038b0",
            "funcEndAddr": "0x403e4b",
            "decompiledFuncCode": "extern unsigned int g_40c8a8;\nextern unsigned int g_40c900;\nextern unsigned int g_40d18a;\nextern unsigned int g_40d1a1;\nextern unsigned int g_40d1a8;\nextern char g_6122b4;\nextern char g_6123a0;\nextern char *g_6123f8;\nextern unsigned int g_612400;\nextern unsigned long long g_612438;\nextern unsigned long long g_612450;\nextern unsigned long long g_6124a8;\nextern unsigned long long g_6124d0;\nextern char *g_6124e0;\nextern unsigned long long g_6124e8;\n\nint sub_4038b0()\n{\n    void tmp_4;  // tmp #4\n    unsigned long v0;  // [bp-0x58]\n    unsigned int v1;  // [bp-0x40]\n    char v2;  // [bp-0x39]\n    char *v4;  // rbx\n    unsigned long|unsigned long long v5;  // r14\n    char *|unsigned long long v6;  // rbp\n    char *v8;  // r15\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // rax\n    char *v14;  // rax\n    unsigned long long v16;  // cc_dep1\n    char *v17;  // rax\n    unsigned long long v19;  // cc_dep1\n    char *v21;  // rax\n    unsigned long long|unsigned int v22;  // r12\n    char *v23;  // r15\n    char *|unsigned long long v24;  // rbp\n    unsigned long long v26;  // rbx\n    unsigned long long v27;  // r14\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rbp\n    unsigned long long v32;  // rbp\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rbx\n    unsigned long long v35;  // rbx\n    unsigned long long v38;  // rax\n\n    v4 = g_6124e0;\n    if (g_6123a0 == 0)\n    {\n        v5 = 0;\n        v2 = 1;\n        v6 = -1;\n        v22 = 1;\n        v1 = 0;\n        while (true)\n        {\n            v8 = (unsigned long long)(unsigned int)_IO_getc(g_6124e8);\n            if ((unsigned int)v8 == -1)\n            {\n                g_6123a0 = 1;\n                if (g_6124e0 == v4)\n                {\n                    break;\n                }\n                if (g_6124e0 != v4)\n                {\n                    *(v4) = 0;\n                    v27 = &v4[1] - g_6124e0;\n                }\n            }\n            if (v1 == (unsigned int)v8 && (v22 == 2 || (unsigned int)v21 != 10) && ((unsigned int)v8 != -1 || (unsigned int)v21 != 10) && ((unsigned int)v8 != 10 || (unsigned int)v21 != 10) && (v22 != 1 || (unsigned int)v21 != 10))\n            {\n                v5 = 1;\n                if ((unsigned int)v8 != -1)\n                {\n                    v6 = v8;\n                    v8 = _IO_getc(g_6124e8);\n                }\n            }\n            if (v1 != (unsigned int)v8 && (v22 == 2 || (unsigned int)v21 != 10) && ((unsigned int)v8 != -1 || (unsigned int)v21 != 10) && ((unsigned int)v8 != 10 || (unsigned int)v21 != 10) && (v22 != 1 || (unsigned int)v21 != 10))\n            {\n                tmp_4 = v8;\n                v24 = v8;\n                v22 = 2;\n                v23 = g_6124e0;\n            }\n            if (g_612450 == 0 && ((unsigned int)v8 != 10 || (unsigned int)v8 != 10 && (v1 == (unsigned int)v8 || (unsigned int)v8 != -1) && (v1 == (unsigned int)v8 || v22 != 2) && (v1 == (unsigned int)v8 || v22 != 1) && ((unsigned int)v8 != -1 || (unsigned int)v8 != -1) && ((unsigned int)v8 != -1 || v22 != 2) && ((unsigned int)v8 != -1 || v22 != 1) && ((unsigned int)v8 != -1 || (unsigned int)v21 != 10) && (v22 != 1 || (unsigned int)v21 != 10) && (v22 != 2 || (unsigned int)v8 != 10 || (unsigned int)v21 != 10)) && ((unsigned int)v8 & -128) == 0)\n            {\n                v10 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v8 * 2)) & 1);\n                if ((char)v10 != 0)\n                {\n                    *(v4) = 0;\n                    v11 = &v4[1] - g_6124e0;\n                    v27 = v11;\n                    if (*(g_6123f8) == *(g_6124e0) && g_6123f8 != 0)\n                    {\n                        v12 = strcmp(g_6123f8, g_6124e0);\n                    }\n                }\n            }\n            if (...)\n            {\n                v0 = g_6122b4;\n                sub_4047a0();\n                v4 = g_6124e0;\n                v14 = _IO_getc(g_6124e8);\n                v2 = 0;\n                if ((unsigned int)v8 != -1)\n                {\n                    v6 = v8;\n                    v5 = 1;\n                    v8 = v14;\n                }\n            }\n            if (((unsigned int)v17 & -128) == 0 || ((unsigned int)v8 & -128) == 0)\n            {\n                v16 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v8 * 2)) & 1);\n            }\n            if ((unsigned int)&v8[-11] <= 1 || ((unsigned int)v17 & -128) == 0 && (unsigned int)v8 == 13 || ((unsigned int)v17 & -128) == 0 && (unsigned int)v8 == 10 || (unsigned int)v8 == 13 && ((unsigned int)v8 & -128) == 0 || ((unsigned int)v8 & -128) == 0 && (unsigned int)v8 == 10 || ((unsigned int)v17 & -128) == 0 && (char)v16 != 0 || ((unsigned int)v8 & -128) == 0 && (char)v16 != 0)\n            {\n                v17 = _IO_getc(g_6124e8);\n            }\n            if ((unsigned int)v8 != -1 && (((unsigned int)v17 & -128) == 0 || ((unsigned int)v8 & -128) == 0 || (unsigned int)&v8[-11] <= 1) && ((unsigned int)v8 == 13 || (unsigned int)v8 == 10 || (unsigned int)&v8[-11] <= 1 || (char)v16 != 0))\n            {\n                v6 = v8;\n                v8 = v17;\n            }\n            if ((unsigned int)&v8[-11] > 1 && ((char)v16 == 0 || ((unsigned int)v17 & -128) != 0 || ((unsigned int)v8 & -128) != 0) && ((char)v16 == 0 || (unsigned int)v8 != -1 || ((unsigned int)v8 & -128) != 0) && (((unsigned int)v17 & -128) != 0 || (unsigned int)v8 != 13 || ((unsigned int)v8 & -128) != 0) && (((unsigned int)v17 & -128) != 0 || ((unsigned int)v8 & -128) != 0 || (unsigned int)v8 != 10) && ((unsigned int)v8 != 13 || (unsigned int)v8 != -1 || ((unsigned int)v8 & -128) != 0) && ((unsigned int)v8 != -1 || ((unsigned int)v8 & -128) != 0 || (unsigned int)v8 != 10) && (unsigned int)v8 == 10 || (v1 == (unsigned int)v8 || (unsigned int)v8 != -1) && (v1 == (unsigned int)v8 || v22 != 2) && (v1 == (unsigned int)v8 || v22 != 1) && ((unsigned int)v8 != -1 || (unsigned int)v8 != -1) && ((unsigned int)v8 != -1 || v22 != 2) && ((unsigned int)v8 != -1 || v22 != 1) && ((unsigned int)v8 != -1 || (unsigned int)v21 != 10) && (v22 != 1 || (unsigned int)v21 != 10) && (v22 != 2 || (unsigned int)v8 != 10 || (unsigned int)v21 != 10) && (unsigned int)v8 == 10)\n            {\n                if (((unsigned int)v6 & -128) == 0)\n                {\n                    v19 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v6 * 2)) & 1);\n                }\n                if ((char)v19 == 0 || ((unsigned int)v6 & -128) != 0)\n                {\n                    g_6124d0 = g_6124d0 + 1;\n                }\n                if (g_6124e0 == v4 && v5 == 0 && (unsigned int)v8 != -1)\n                {\n                    v8 = _IO_getc(g_6124e8);\n                }\n                if (!(v5 == 0 && g_6124e0 == v4))\n                {\n                    *(v4) = 0;\n                    v26 = &v4[1] - g_6124e0;\n                    v27 = v26;\n                    if (*(g_6123f8) == *(g_6124e0) && g_6123f8 != 0)\n                    {\n                        v30 = strcmp(g_6123f8, g_6124e0);\n                    }\n                }\n            }\n            if (...)\n            {\n                if ((unsigned int)v8 != 34 && (unsigned int)v8 != 92 && (unsigned int)v8 != 39)\n                {\n                    v24 = v8;\n                }\n                if ((unsigned int)v8 == 92)\n                {\n                    v24 = (unsigned long long)(unsigned int)_IO_getc(g_6124e8);\n                }\n            }\n            if (...)\n            {\n                v21 = _IO_getc(g_6124e8);\n                if ((unsigned int)v8 != -1)\n                {\n                    v1 = (unsigned int)v8;\n                    v8 = v21;\n                }\n                else\n                {\n                    g_6123a0 = 1;\n                    if (v4 == g_6124e0)\n                    {\n                        break;\n                    }\n                    *(v4) = 0;\n                    v1 = (unsigned int)v8;\n                }\n            }\n            if (...)\n            {\n                sub_403740();\n                if (v1 != 34)\n                {\n                    v32 = dcgettext(0x0, 0x40d1a8, 0x5);\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40c8a8, 0x5));\n                }\n                else\n                {\n                    v31 = dcgettext(0x0, 0x40d1a1, 0x5);\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40c8a8, 0x5));\n                }\n            }\n            if (...)\n            {\n                g_6123a0 = 1;\n                if (v4 == g_6124e0)\n                {\n                    break;\n                }\n                *(v4) = 0;\n                v27 = &v4[1] - g_6124e0;\n            }\n            if (...)\n            {\n                sub_403740();\n                if (v1 != 34)\n                {\n                    v35 = dcgettext(0x0, 0x40d1a8, 0x5);\n                }\n                else\n                {\n                    v34 = dcgettext(0x0, 0x40d1a1, 0x5);\n                }\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40c8a8, 0x5));\n            }\n            if (...)\n            {\n                v22 = 0;\n                v23 = v4;\n            }\n            if (...)\n            {\n                if (*(g_6123f8) == *(g_6124e0) && v2 != 0 && g_6123f8 != 0)\n                {\n                    v33 = strcmp(g_6123f8, g_6124e0);\n                    if (v33 == 0)\n                    {\n                        break;\n                    }\n                }\n                if (g_612450 != 0)\n                {\n                    break;\n                }\n                v0 = g_6122b4;\n                sub_4047a0();\n            }\n            if (...)\n            {\n                v24 = 0;\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40c900, 0x5));\n                g_612400 = 1;\n            }\n            if (...)\n            {\n                g_6123a0 = 1;\n                break;\n            }\n            if (...)\n            {\n                if (g_612450 != 0)\n                {\n                    break;\n                }\n                v0 = g_6122b4;\n                sub_4047a0();\n            }\n            if (...)\n            {\n                *((unsigned long long *)&v23) = v24;\n                v4 = &v4[1];\n            }\n            if (...)\n            {\n                sub_403740();\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d18a, 0x5));\n            }\n        }\n        if (...)\n        {\n            v27 = -18446744069414584321;\n        }\n        else if (...)\n        {\n            v38 = v27;\n            return v38;\n        }\n    }\n    v27 = -18446744069414584321;\n    v38 = v27;\n    return v38;\n}\n"
        },
        {
            "funcName": "sub_404c00",
            "funcStartAddr": "0x404c00",
            "funcEndAddr": "0x404e12",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n} struct_0;\n\nextern unsigned int g_40da10;\n\nint sub_404c00()\n{\n    unsigned long long v0;  // [bp-0x58]\n    void tmp_24;  // tmp #24\n    unsigned long|unsigned long long v1;  // [bp-0x40]\n    unsigned long long v3[8];  // rsi\n    unsigned long long v4[8];  // r12\n    unsigned long long v6;  // r13\n    struct_0 *v7;  // rdi\n    unsigned long long v8;  // r15\n    unsigned long long v10;  // rax\n    unsigned long v11;  // rcx\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // r8\n    unsigned long long v16;  // rsi\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rbp\n    unsigned long long v21;  // rdx\n    void *v22;  // rcx\n\n    v4 = v3;\n    v0 = 0;\n    sub_4047a0();\n    if (!(*(v3) != 0))\n    {\n        __assert_fail(); /* do not return */\n    }\n    else if (*((long long *)(v3[1] + (*(v3) << 3) - 8)) == 0)\n    {\n        v6 = 0;\n        v20 = v7->field_38;\n        v8 = (unsigned int)sub_409680();\n        v21 = *(v3);\n        while (true)\n        {\n            if (v20 != 0)\n            {\n                v10 = 0;\n                do\n                {\n                    v10 += 1;\n                    *((long long *)(v11 + v10 * 8 - 8)) = *((long long *)(v4[1] + v10 * 8 - 8));\n                }\n                while (v10 != v20);\n                v12 = 0 + v20;\n                v13 = v20;\n            }\n            else\n            {\n                v12 = v6;\n                v13 = 0;\n            }\n            if (v12 < v21 && v14 > v13)\n            {\n                do\n                {\n                    v12 += 1;\n                    v13 += 1;\n                    *((long long *)(v11 + v13 * 8 - 8)) = *((long long *)(v4[1] + v12 * 8 - 8));\n                }\n                while (v12 < v21 && v14 > v13);\n                if (v13 < v20)\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n            if (v14 <= v13 || v12 >= v21 || v13 >= v20)\n            {\n                v1 = v14;\n                v16 = v4[6];\n                v11 = v8;\n                v18 = v13;\n                *((long long *)(v8 + v13 * 8)) = 0;\n                v19 = *((long long *)(rdi<8> + 64))();\n                if (v19 != 0)\n                {\n                    v20 = *((long long *)(rdi<8> + 56));\n                    v14 = (unsigned int)sub_404600();\n                    v6 = 0 - *((long long *)(rdi<8> + 56)) + v13;\n                }\n                else if (*((long long *)(rdi<8> + 56)) + 1 >= v1)\n                {\n                    v1 = v1;\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40da10, 0x5));\n                }\n                else\n                {\n                    v20 = *((long long *)(rdi<8> + 56));\n                    v14 = (unsigned int)sub_404600();\n                }\n                if (*((long long *)(rdi<8> + 56)) + 1 < v1 || v19 != 0)\n                {\n                    v21 = *(v4);\n                    v22 = v6 + 1;\n                    free(v11);\n                    tmp_24 = v4[5];\n                    v4[0] = v20;\n                    v4[4] = tmp_24;\n                    v4[7] = -0x100000000;\n                    return -0x100000000;\n                }\n            }\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4049f2",
            "funcStartAddr": "0x4049f2",
            "funcEndAddr": "0x4049ff",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    unsigned long long field_30;\n} struct_0;\n\nint sub_4049f2()\n{\n}\n"
        },
        {
            "funcName": "sub_4066f0",
            "funcStartAddr": "0x4066f0",
            "funcEndAddr": "0x407539",
            "decompiledFuncCode": "extern unsigned int g_40f520[4];\n\nint sub_4066f0()\n{\n    char *|unsigned long long|char [2] v0;  // [bp-0x188]\n    unsigned long long v1;  // [bp-0x180]\n    char v2;  // [bp-0x178]\n    unsigned long long v3;  // [bp-0x174]\n    char v4;  // [bp-0x16c]\n    char *v5;  // [bp-0x168]\n    unsigned long|unsigned long long v6;  // [bp-0x160]\n    char v7;  // [bp-0x158]\n    unsigned int v8;  // [bp-0x154]\n    char v9;  // [bp-0x138]\n    unsigned long long v10;  // [bp-0x134]\n    char v11;  // [bp-0x12c]\n    char *v12;  // [bp-0x128]\n    unsigned long|unsigned long long v13;  // [bp-0x120]\n    char v14;  // [bp-0x118]\n    unsigned int v15;  // [bp-0x114]\n    char v16;  // [bp-0xf8]\n    unsigned long v17;  // [bp-0xf4]\n    char v18;  // [bp-0xec]\n    unsigned long|unsigned long long v19;  // [bp-0xe8]\n    unsigned long|unsigned long long v20;  // [bp-0xe0]\n    char v21;  // [bp-0xd8]\n    unsigned int v22;  // [bp-0xd4]\n    void v23;  // [bp-0xc8]\n    uint128_t|char v24;  // [bp-0xb8]\n    char v25;  // [bp-0xac]\n    unsigned long|uint128_t|char * v26;  // [bp-0xa8]\n    unsigned long|void|unsigned long long v27;  // [bp-0xa0]\n    void|uint128_t|char v28;  // [bp-0x98]\n    unsigned int v29;  // [bp-0x94]\n    void v30;  // [bp-0x88]\n    char v31;  // [bp-0x78]\n    unsigned long long v32;  // [bp-0x74]\n    char v33;  // [bp-0x6c]\n    char *v34;  // [bp-0x68]\n    unsigned long|unsigned long long v35;  // [bp-0x60]\n    char v36;  // [bp-0x58]\n    unsigned int v37;  // [bp-0x54]\n    void *v39;  // rdi\n    unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    char *v42;  // r9\n    unsigned long long v43;  // r15\n    unsigned int v45;  // eax\n    char v46;  // al\n    unsigned long long v48;  // rax\n    char *v49;  // rsi\n    unsigned long long|char [2] v50;  // r9\n    unsigned long long v51;  // r12\n    unsigned long long v52;  // rdx\n    unsigned long long v53;  // r8\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rbx\n    unsigned long long v56;  // r14\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    unsigned long long v59;  // rdi\n    unsigned long long v60;  // rcx\n    unsigned long long v61;  // rsi\n    unsigned long long v62;  // rbp\n    char v63[2];  // rax\n    unsigned long long v65;  // rcx\n    unsigned long long v68;  // rdx\n    unsigned int v69;  // eax\n    char v70;  // al\n    unsigned long long v71;  // rax\n    unsigned long|unsigned long long v73;  // rax\n    unsigned long long v74;  // al\n    unsigned long|unsigned long long v75;  // rbx\n    unsigned long long v76;  // r14\n    unsigned long long v77;  // rax\n    char v78;  // al\n    unsigned long long v79;  // rax\n    unsigned long long v80;  // r14\n    char *v81;  // rdx\n    unsigned int v82;  // eax\n    char v83;  // al\n    unsigned long long v84;  // rax\n    char *v87;  // rdx\n    unsigned int v88;  // eax\n    char v89;  // al\n    unsigned long long v90;  // rax\n    unsigned long long v92;  // rax\n    unsigned long long v93;  // rdx\n    unsigned long v94;  // r15\n    unsigned long long v95;  // rax\n    unsigned int v96;  // eax\n    char v97;  // al\n    unsigned long long v98;  // rax\n    unsigned long long v100;  // rax\n    char *v101;  // rdx\n    unsigned int v102;  // eax\n    char v103;  // al\n    unsigned long long v104;  // rax\n    unsigned long long v106;  // rax\n    char *v107;  // rdx\n    unsigned int v108;  // eax\n    char v109;  // al\n    unsigned long long v110;  // rax\n    unsigned int v111;  // rax\n    char v114;  // al\n    unsigned long long v115;  // rdx\n    unsigned long long v116;  // r12\n    unsigned long long v118;  // rax\n\n    v40 = v39;\n    v41 = __ctype_get_mb_cur_max();\n    if (v41 <= 1)\n    {\n        v43 = *(v42);\n        v118 = v39;\n        if (*(v42) != 0)\n        {\n            v65 = (char)*((char *)v40);\n            if (*((char *)v40) != 0)\n            {\n                v42 = v49;\n                v51 = 0;\n                v52 = 0;\n                v53 = 0;\n                v54 = 1;\n                while (true)\n                {\n                    v51 += 1;\n                    v55 = v52 + 1;\n                    v56 = v40 + 1;\n                    if (v43 != v65)\n                    {\n                        if (*((char *)(v40 + 1)) == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v57 = v42[1];\n                        v58 = (char)*((char *)v40);\n                        if (v42[1] == 0 || *((char *)v40) == 0)\n                        {\n                            break;\n                        }\n                        v55 = v52 + 2;\n                        if (v57 == v58)\n                        {\n                            v59 = &v42[-1 * v52];\n                            v52 = 0 - v52 + v40;\n                            while (true)\n                            {\n                                v60 = (char)*((char *)(v59 + v55));\n                                if (*((char *)(v59 + v55)) != 0)\n                                {\n                                    v61 = (char)*((char *)(v52 + v55));\n                                    v55 += 1;\n                                    if (*((char *)(v52 + v55)) == 0 || v60 != v61)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (*((char *)(v52 + v55)) != 0 && *((char *)(v59 + v55)) != 0)\n                            {\n                                v62 = v52;\n                            }\n                            else if (*((char *)(v59 + v55)) != 0)\n                            {\n                                v118 = 0;\n                            }\n                            else if (*((char *)(v59 + v55)) == 0)\n                            {\n                                v118 = v40;\n                            }\n                        }\n                    }\n                    v62 = v52;\n                    if (((char)!(r12<8> <= 9) & v54) != 0)\n                    {\n                        if (v55 >= v51 + (v51 << 2))\n                        {\n                            if (v50 != 0)\n                            {\n                                *((char *[2])&v0[0]) = v50;\n                                v63 = strnlen(v50, v55 - v53);\n                                v53 = v55;\n                                v50 = v0 + v63;\n                            }\n                            if (*((char *)(v0 + v63)) == 0 || v50 == 0)\n                            {\n                                v0 = v53;\n                                strlen(v42);\n                                v54 = sub_405b80();\n                                v53 = v0;\n                                if (v54 != 0)\n                                {\n                                    break;\n                                }\n                                v50 = 0;\n                            }\n                        }\n                        if (v55 < v51 + (v51 << 2) || *((char *)(v0 + v63)) != 0 && v50 != 0)\n                        {\n                            v54 = v62;\n                        }\n                    }\n                    v65 = (char)*((char *)v54);\n                    v40 = v56;\n                    v52 = v55;\n                }\n                if (v43 == v65)\n                {\n                    v118 = v40;\n                }\n                else if (v50 != 0 && *((char *)(v0 + v63)) == 0 || (v43 != v65 && *((char *)(v40 + 1)) != 0 || v43 == v65 && v42[1] != 0 && *((char *)v40) != 0 && v57 != v58 || v43 == v65 && v57 == v58 && v42[1] != 0 && *((char *)v40) != 0 && ((char)!(r12<8> <= 9) & v54) != 0) && ((char)!(r12<8> <= 9) & v54) != 0 && v55 >= v51 + (v51 << 2) && v50 == 0)\n                {\n                    v118 = *((long long *)&v31);\n                }\n                else if (v42[1] != 0 || v43 != v65)\n                {\n                    v118 = 0;\n                }\n            }\n        }\n    }\n    else\n    {\n        v5 = v42;\n        v2 = 0;\n        v45 = *(v42);\n        v4 = 0;\n        v3 = 0;\n        v46 = (unsigned long long)*(v42) >> 5;\n        if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0)\n        {\n            v6 = 1;\n            v8 = *(v49);\n            v7 = 1;\n            v4 = 1;\n        }\n        else\n        {\n            v48 = mbsinit((unsigned int)&v3);\n            if (v48 != 0)\n            {\n                v2 = 1;\n                __ctype_get_mb_cur_max();\n                sub_409040();\n                v6 = (unsigned int)sub_40b170();\n                if (v6 == -1)\n                {\n                    v6 = 1;\n                    v7 = 0;\n                    v4 = 1;\n                }\n                else if (v6 != -2)\n                {\n                    if ((*(v5) == 0 || v6 != 0) && (v8 == 0 || v6 != 0))\n                    {\n                        v7 = 1;\n                        if (mbsinit((unsigned int)&v3) != 0)\n                        {\n                            v2 = 0;\n                        }\n                        v4 = 1;\n                    }\n                }\n                if (v6 == -2)\n                {\n                    v7 = 0;\n                    v6 = strlen(v5);\n                    v4 = 1;\n                }\n                if (v6 == 0)\n                {\n                    v6 = 1;\n                }\n            }\n        }\n        if ((v48 != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0))\n        {\n            if (v6 == -2 || v6 == -1 || v8 != 0)\n            {\n                if (v6 == -2 || v6 == -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0)\n                {\n                    v12 = v42;\n                    v116 = 0;\n                    v75 = 0;\n                    v76 = 1;\n                    v9 = 0;\n                    v10 = 0;\n                    v11 = 0;\n                    v19 = v39;\n                    v16 = 0;\n                    v17 = 0;\n                    v18 = 0;\n                    v1 = 0;\n                    while (true)\n                    {\n                        if (v16 == 0)\n                        {\n                            v68 = v19;\n                            v69 = (char)*((char *)v19);\n                            v70 = (unsigned long long)(char)*((char *)v19) >> 5;\n                            if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) != 0)\n                            {\n                                v20 = 1;\n                                v77 = (char)*((char *)v68);\n                                v21 = 1;\n                                v22 = (char)*((char *)v68);\n                                v18 = 1;\n                            }\n                            else\n                            {\n                                v71 = mbsinit((unsigned int)&v17);\n                                if (v71 == 0)\n                                {\n                                    break;\n                                }\n                                v16 = 1;\n                            }\n                        }\n                        if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) == 0 || v16 != 0)\n                        {\n                            __ctype_get_mb_cur_max();\n                            v0 = v19;\n                            sub_409040();\n                            v73 = sub_40b170();\n                            v20 = v73;\n                            if (v73 == -1)\n                            {\n                                v20 = 1;\n                                v21 = 0;\n                                v18 = 1;\n                            }\n                            else if (v73 != -2)\n                            {\n                                if (v73 == 0)\n                                {\n                                    v20 = 1;\n                                    if (*((char *)v19) != 0 || v22 != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                                v21 = 1;\n                                v77 = mbsinit((unsigned int)&v17);\n                                if ((unsigned int)v77 != 0)\n                                {\n                                    v16 = 0;\n                                }\n                                v18 = 1;\n                            }\n                            if (v73 == -2)\n                            {\n                                v73 = strlen(v19);\n                                v21 = 0;\n                                v20 = v73;\n                                v18 = 1;\n                            }\n                            if (v73 == -1 || v73 == -2)\n                            {\n                                if (((char)!(r12<8> <= 9) & v76) == 0)\n                                {\n                                    v75 += 1;\n                                }\n                                else if (v75 < v116 + (v116 << 2))\n                                {\n                                    v75 += 1;\n                                    v76 = v73;\n                                }\n                            }\n                        }\n                        if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) == 0 || v73 == -2)\n                        {\n                            v74 = (char)!(r12<8> <= 9) & v76;\n                        }\n                        if ((v16 == 0 || v73 != -1) && (v16 == 0 || v73 != -2) && (v73 != -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) != 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) != 0 || v73 != -2))\n                        {\n                            if (v22 == 0)\n                            {\n                                break;\n                            }\n                            if (v22 != 0)\n                            {\n                                v78 = (char)!(r12<8> <= 9) & v76;\n                                if (((char)!(r12<8> <= 9) & v76) == 0)\n                                {\n                                    v75 += 1;\n                                }\n                                else if (v75 < v116 + (v116 << 2))\n                                {\n                                    v75 += 1;\n                                    v76 = v77;\n                                }\n                            }\n                        }\n                        if (v22 != 0 && ((char)!(r12<8> <= 9) & v76) != 0 && (v16 == 0 || v73 != -1) && (v16 == 0 || v73 != -2) && (v73 != -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) != 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) != 0 || v73 != -2) && v75 >= v116 + (v116 << 2) || ((char)!(r12<8> <= 9) & v76) != 0 && (v73 == -1 || v73 == -2) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v19) & 31)) & 1) == 0 || v16 != 0) && v75 >= v116 + (v116 << 2))\n                        {\n                            v79 = v11;\n                            v80 = v75 - v1;\n                            v11 = 0;\n                            v12 = &v12[v13];\n                            v80 -= 1;\n                            if (v9 == 0)\n                            {\n                                if (v80 != 1 || v79 == 0 && v75 != v1)\n                                {\n                                    v81 = v12;\n                                    v82 = *(v12);\n                                    v83 = (unsigned long long)*(v12) >> 5;\n                                    if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) != 0)\n                                    {\n                                        v13 = 1;\n                                        v14 = 1;\n                                        v15 = *(v81);\n                                        v11 = 1;\n                                    }\n                                    else\n                                    {\n                                        v84 = mbsinit((unsigned int)&v10);\n                                        if (v84 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v9 = 1;\n                                    }\n                                }\n                                if (v80 == 1 || v79 == 0 && v75 == v1 || v11 == 0 && v15 == 0)\n                                {\n                                    v87 = v12;\n                                    v88 = *(v12);\n                                    v89 = (unsigned long long)*(v12) >> 5;\n                                    if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) != 0)\n                                    {\n                                        v13 = 1;\n                                        v14 = 1;\n                                        v15 = *(v87);\n                                        v11 = 1;\n                                    }\n                                    else\n                                    {\n                                        v90 = mbsinit((unsigned int)&v10);\n                                        if (v90 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v9 = 1;\n                                    }\n                                }\n                            }\n                            if ((v79 == 0 || v80 != 1) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 || v9 != 0) && (v75 != v1 || v80 != 1))\n                            {\n                                __ctype_get_mb_cur_max();\n                                sub_409040();\n                                v13 = (unsigned int)sub_40b170();\n                                if (v13 == -1)\n                                {\n                                    v13 = 1;\n                                    v14 = 0;\n                                }\n                                else if (v13 != -2)\n                                {\n                                    if (v13 == 0)\n                                    {\n                                        v13 = 1;\n                                        if (v15 != 0 || *(v12) != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    v14 = 1;\n                                    if (mbsinit((unsigned int)&v10) != 0)\n                                    {\n                                        v9 = 0;\n                                    }\n                                    v11 = 1;\n                                }\n                                if (v13 == -2)\n                                {\n                                    v14 = 0;\n                                    v13 = strlen(v12);\n                                }\n                            }\n                            if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 && v80 == 1 || v80 == 1 && v9 != 0 || v79 == 0 && v75 == v1 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 || v11 == 0 && v15 == 0 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 || v79 == 0 && v75 == v1 && v9 != 0 || v11 == 0 && v15 == 0 && v9 != 0)\n                            {\n                                __ctype_get_mb_cur_max();\n                                sub_409040();\n                                v13 = (unsigned int)sub_40b170();\n                                if (v13 == -1)\n                                {\n                                    v13 = 1;\n                                    v14 = 0;\n                                    v11 = 1;\n                                }\n                                else if (v13 != -2)\n                                {\n                                    if (v13 == 0)\n                                    {\n                                        v13 = 1;\n                                        if (v15 != 0 || *(v12) != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    v14 = 1;\n                                    v92 = mbsinit((unsigned int)&v10);\n                                    if (v92 != 0)\n                                    {\n                                        v9 = 0;\n                                    }\n                                    v11 = 1;\n                                }\n                                if (v13 == -2)\n                                {\n                                    v14 = 0;\n                                    v13 = strlen(v12);\n                                    v11 = 1;\n                                }\n                            }\n                            if (...)\n                            {\n                                v93 = v21;\n                                v76 = 1;\n                            }\n                            if (...)\n                            {\n                                v76 = (unsigned int)sub_405d20();\n                                if ((char)v76 != 0)\n                                {\n                                    break;\n                                }\n                                v93 = v21;\n                            }\n                            v1 = v75;\n                            v75 += 1;\n                        }\n                        if (...)\n                        {\n                            v94 = v20;\n                            if (v20 == v6)\n                            {\n                                v95 = memcmp(v19, v5, v94);\n                            }\n                        }\n                        if (...)\n                        {\n                            v34 = v42;\n                            v31 = 0;\n                            v26 = *((int128_t *)&v19);\n                            v26 = (long long)v26 + *((long long *)&((char *)&v26)[8]);\n                            v96 = *(v42);\n                            v97 = (unsigned long long)*(v42) >> 5;\n                            v24 = *((int128_t *)&v16);\n                            v28 = *((int128_t *)&v21);\n                            *((int128_t *)&v30) = (int128_t)v23;\n                            v25 = 0;\n                            v33 = 0;\n                            v32 = 0;\n                            if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0)\n                            {\n                                v35 = 1;\n                                v37 = *(v42);\n                                v36 = 1;\n                                v33 = 1;\n                            }\n                            else\n                            {\n                                v98 = mbsinit((unsigned int)&v32);\n                                if (v98 == 0)\n                                {\n                                    break;\n                                }\n                                if (v98 != 0)\n                                {\n                                    v31 = 1;\n                                    __ctype_get_mb_cur_max();\n                                    v0 = v34;\n                                    sub_409040();\n                                    v35 = (unsigned int)sub_40b170();\n                                    if (v35 == -1)\n                                    {\n                                        v35 = 1;\n                                        v36 = 0;\n                                    }\n                                    else if (v35 != -2)\n                                    {\n                                        if (v35 == 0)\n                                        {\n                                            v35 = 1;\n                                            if (v37 != 0 || *(v34) != 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        v36 = 1;\n                                        v100 = mbsinit((unsigned int)&v32);\n                                        if (v100 != 0)\n                                        {\n                                            v31 = 0;\n                                        }\n                                        v33 = 1;\n                                    }\n                                    if (v35 == -2)\n                                    {\n                                        v36 = 0;\n                                        v35 = strlen(v34);\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            abort(); /* do not return */\n                        }\n                        if (...)\n                        {\n                            v33 = 0;\n                            v75 += 1;\n                            v34 = &v34[v35];\n                            while (true)\n                            {\n                                if (v31 == 0)\n                                {\n                                    v101 = v34;\n                                    v102 = *(v34);\n                                    v103 = (unsigned long long)*(v34) >> 5;\n                                    if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) != 0)\n                                    {\n                                        v35 = 1;\n                                        v36 = 1;\n                                        v37 = *(v101);\n                                        v33 = 1;\n                                    }\n                                    else\n                                    {\n                                        v104 = mbsinit((unsigned int)&v32);\n                                        if (v104 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v31 = 1;\n                                    }\n                                }\n                                if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0)\n                                {\n                                    __ctype_get_mb_cur_max();\n                                    sub_409040();\n                                    v35 = (unsigned int)sub_40b170();\n                                    if (v35 == -1)\n                                    {\n                                        v35 = 1;\n                                        v36 = 0;\n                                        v33 = 1;\n                                    }\n                                    else if (v35 != -2)\n                                    {\n                                        if (v35 == 0)\n                                        {\n                                            v35 = 1;\n                                            if (v37 != 0 || *(v34) != 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        v36 = 1;\n                                        v106 = mbsinit((unsigned int)&v32);\n                                        if (v106 != 0)\n                                        {\n                                            v31 = 0;\n                                        }\n                                        v33 = 1;\n                                    }\n                                    if (v35 == -2)\n                                    {\n                                        v36 = 0;\n                                        v35 = strlen(v34);\n                                        v33 = 1;\n                                    }\n                                }\n                                if (v37 != 0 || v35 == -1 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v35 == -2 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v35 == -1 && v31 != 0 || v35 == -2 && v31 != 0)\n                                {\n                                    if (v25 == 0)\n                                    {\n                                        if ((char)v24 == 0)\n                                        {\n                                            v107 = v26;\n                                            v108 = *(v26);\n                                            v109 = (unsigned long long)*(v26) >> 5;\n                                            if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0)\n                                            {\n                                                v27 = 1;\n                                                v28 = 1;\n                                                v29 = *(v107);\n                                                v25 = 1;\n                                            }\n                                            else\n                                            {\n                                                v110 = mbsinit((unsigned int)&v24);\n                                                if (v110 == 0)\n                                                {\n                                                    break;\n                                                }\n                                                v24 = 1;\n                                            }\n                                        }\n                                        if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (char)v24 != 0)\n                                        {\n                                            __ctype_get_mb_cur_max();\n                                            sub_409040();\n                                            v27 = (unsigned int)sub_40b170();\n                                            if ((long long)v27 == -1)\n                                            {\n                                                v27 = 1;\n                                                v28 = 0;\n                                                v25 = 1;\n                                            }\n                                            else if ((long long)v27 != -2)\n                                            {\n                                                if ((long long)v27 == 0)\n                                                {\n                                                    v27 = 1;\n                                                    if ((int)(&v28)[4] != 0 || *(v26) != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                v28 = 1;\n                                                v111 = mbsinit((unsigned int)&v24);\n                                                if (v111 != 0)\n                                                {\n                                                    v24 = 0;\n                                                }\n                                                v111 = (int)(&v28)[4];\n                                                v25 = 1;\n                                            }\n                                            if ((long long)v27 == -2)\n                                            {\n                                                v28 = 0;\n                                                v27 = strlen(v26);\n                                                v25 = 1;\n                                            }\n                                        }\n                                    }\n                                    if (v25 == 0 || (char)v28 != 0)\n                                    {\n                                        if (((char)v24 == 0 || v25 != 0) && (v25 != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0))\n                                        {\n                                            v111 = (int)(&v28)[4];\n                                            if ((int)(&v28)[4] == 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        if (v36 != 0 && (int)(&v28)[4] != 0 && ((char)v24 == 0 || (long long)v27 != -2 || v25 != 0) && ((char)v24 == 0 || v25 != 0 || (long long)v27 != -1) && ((long long)v27 != -2 || v25 != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0) && (v25 != 0 || (long long)v27 != -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0))\n                                        {\n                                            v114 = v37 != v111;\n                                        }\n                                    }\n                                    if (v36 == 0 && (int)(&v28)[4] != 0 || (char)v28 == 0 && v25 != 0 || (long long)v27 == -2 && v25 == 0 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || v25 == 0 && (long long)v27 == -1 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (long long)v27 == -2 && v25 == 0 && (char)v24 != 0 || v25 == 0 && (long long)v27 == -1 && (char)v24 != 0)\n                                    {\n                                        if ((long long)v27 != v35)\n                                        {\n                                            break;\n                                        }\n                                        v114 = memcmp(v26, v34, (long long)v27) != 0;\n                                    }\n                                    if ((int)(&v28)[4] != 0 || (char)v28 == 0 && v25 != 0 || (long long)v27 == -2 && v25 == 0 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || v25 == 0 && (long long)v27 == -1 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (long long)v27 == -2 && v25 == 0 && (char)v24 != 0 || v25 == 0 && (long long)v27 == -1 && (char)v24 != 0)\n                                    {\n                                        v115 = v75 + 1;\n                                        if (v114 != 0)\n                                        {\n                                            break;\n                                        }\n                                        v26 = (long long)v26 + *((long long *)&((char *)&v26)[8]);\n                                        v75 = v115;\n                                        v34 = &v34[v35];\n                                        v25 = 0;\n                                        v33 = 0;\n                                    }\n                                }\n                                else\n                                {\n                                    v118 = v19;\n                                }\n                            }\n                            if (v35 == 0 && *(v34) == 0 && v35 != -1 && v35 != -2 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0) && (v31 != 0 || v104 != 0) || v25 == 0 && (long long)v27 == 0 && *(v26) == 0 && (long long)v27 != -2 && (long long)v27 != -1 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (char)v24 != 0) && (v110 != 0 || (char)v24 != 0))\n                            {\n                                sub_405d00(); /* do not return */\n                            }\n                            else if (v35 == 0 && v35 != -1 && v35 != -2 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0) && (v31 != 0 || v104 != 0) || v25 == 0 && (long long)v27 == 0 && (long long)v27 != -2 && (long long)v27 != -1 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (char)v24 != 0) && (v110 != 0 || (char)v24 != 0))\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                            else if ((v25 == 0 || v31 == 0) && (v25 == 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0) && (v31 == 0 || (char)v24 == 0) && (v31 == 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || (char)v24 == 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0))\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                            else if (...)\n                            {\n                                v118 = 0;\n                            }\n                            else if (...)\n                            {\n                                v94 = v20;\n                            }\n                            else if (v37 == 0 && v31 == 0 && ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) != 0 || v37 == 0 && (v106 == 0 && v35 != -1 && v35 != -2 && (v37 == 0 || v35 != 0) && (*(v34) == 0 || v35 != 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0) && (v31 != 0 || v104 != 0) || v35 != -1 && v106 != 0 && v35 != -2 && (v37 == 0 || v35 != 0) && (*(v34) == 0 || v35 != 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0) && (v31 != 0 || v104 != 0)))\n                            {\n                                return v118;\n                            }\n                        }\n                        if (v37 != 0 || v20 == v6 || v95 == 0)\n                        {\n                            v94 = v20;\n                        }\n                        if (...)\n                        {\n                            v19 += v94;\n                            v116 = 1;\n                            v18 = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        sub_405d00(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        v118 = *((long long *)&v31);\n                    }\n                    else if (...)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        v118 = 0;\n                    }\n                    else if (...)\n                    {\n                        return v118;\n                    }\n                }\n                if (*(v5) == 0 || v6 == -2 || v6 == -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0)\n                {\n                    sub_405d00(); /* do not return */\n                }\n            }\n            if ((v6 == -2 || v6 == -1 || v6 == 0 || v8 != 0) && (v6 == -2 || v6 == -1 || *(v5) != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if ((((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0) && (v6 == -2 || v6 == -1 || v48 == 0 || v8 != 0) && (v6 == -2 || v6 == -1 || v48 == 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n        {\n            __assert_fail(); /* do not return */\n        }\n    }\n    if (...)\n    {\n        v118 = v40;\n    }\n    if (*((char *)v40) == 0 && v41 <= 1 && *(v42) != 0 || v41 <= 1 && *((char *)v40) != 0 && *(v42) != 0 || v41 > 1 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0) && (v48 != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0) && (v6 == -2 || v6 == -1 || v8 != 0) && (v6 == -2 || v6 == -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n    {\n        v118 = 0;\n    }\n    if (v41 <= 1 && *((char *)v40) != 0 && *(v42) != 0 || v41 > 1 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0) && (v48 != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0) && (v6 == -2 || v6 == -1 || v8 != 0) && (v6 == -2 || v6 == -1 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n    {\n        v118 = *((long long *)&v31);\n    }\n    if (...)\n    {\n        return v118;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b9c0",
            "funcStartAddr": "0x40b9c0",
            "funcEndAddr": "0x40ba11",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n    char padding_11[3];\n    unsigned int field_14;\n} struct_0;\n\nint sub_40b9c0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // rbx\n    void *v6;  // rsi\n    unsigned long long v8;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v3->field_0;\n    if (v6 != &v3[1])\n    {\n        v1->field_0 = v6;\n    }\n    else\n    {\n        v2->field_0 = memcpy(&v1[1], v6, v4->field_8);\n    }\n    v8 = v4->field_10;\n    v2->field_8 = v4->field_8;\n    *((unsigned long long *)&v2->field_10) = v8;\n    if (v8 != 0)\n    {\n        v8 = v4->field_14;\n        v2->field_14 = v4->field_14;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_4090e0",
            "funcStartAddr": "0x4090e0",
            "funcEndAddr": "0x40948d",
            "decompiledFuncCode": "extern unsigned int g_40eb2b;\nextern unsigned int g_40eb2f;\nextern unsigned int g_40eb3f;\nextern unsigned int g_40eb56;\nextern unsigned int g_40ebb8;\nextern unsigned int g_40ec88;\nextern unsigned int g_40eca8;\nextern unsigned int g_40ecd0;\nextern unsigned int g_40ecf8;\nextern unsigned int g_40ed28;\n\nint sub_4090e0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    unsigned int v14;  // edx\n    unsigned int v15;  // ecx\n    unsigned int v17;  // edx\n    unsigned int v18;  // ecx\n    void *v20;  // rdi\n    unsigned long v23;  // r9\n    unsigned long v24;  // rsi\n    unsigned long long v25;  // r14\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // r15\n    char *v29;  // rax\n    char *v30;  // rax\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        fprintf(v20, \"%s (%s) %s\\n\", (unsigned int)v13, v17, v18);\n    }\n    else\n    {\n        fprintf(v20, \"%s %s\\n\", v14, v15);\n    }\n    fprintf(v20, \"Copyright %s %d Free Software Foundation, Inc.\", dcgettext(0x0, 0x40eb2b, 0x5), 2015);\n    fputs((unsigned long long)dcgettext(0x0, 0x40ebb8, 0x5), v20);\n    switch (v23)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40eb2f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40eb3f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40eb56, 0x5);\n        break;\n    case 4:\n        dcgettext(0x0, 0x40ec88, 0x5);\n        break;\n    case 5:\n        v30 = dcgettext(0x0, 0x40eca8, 0x5);\n        *((unsigned long long [9])&v4) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        v30 = dcgettext(0x0, 0x40ecd0, 0x5);\n        *((unsigned long long [9])&v5) = v11[5];\n        *((unsigned long long [9])&v4) = v11[4];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        v29 = dcgettext(0x0, 0x40ecf8, 0x5);\n        *((unsigned long long [9])&v4) = v11[6];\n        *((unsigned long long [9])&v3) = v11[5];\n        *((unsigned long long [9])&v2) = v11[4];\n    case 8:\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        v29 = dcgettext(0x0, 0x40ed28, 0x5);\n        *((unsigned long long [9])&v5) = v11[7];\n        *((unsigned long long [9])&v4) = v11[6];\n        *((unsigned long long [9])&v3) = v11[5];\n        *((unsigned long long [9])&v2) = v11[4];\n    case 9:\n        v24 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v25 = v12[7];\n        v26 = v12[6];\n        *((unsigned long long [9])&v9) = v12[8];\n        v27 = v12[5];\n        v28 = v12[4];\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v11[1];\n    default:\n        v24 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v25 = v12[7];\n        v26 = v12[6];\n        *((unsigned long long [9])&v9) = v12[8];\n        v27 = v12[5];\n        v28 = v12[4];\n        *((unsigned long long [9])&v8) = v12[3];\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v11[1];\n    }\n    v4 = v9;\n    v3 = v25;\n    v2 = v26;\n    v1 = v27;\n    v0 = v28;\n    return fprintf(v20, (unsigned long long)dcgettext(0x0, v24, 0x5));\n    fprintf(v20, v30);\n    return v4;\n    return fprintf(v20, v29);\n}\n"
        },
        {
            "funcName": "sub_408fe0",
            "funcStartAddr": "0x408fe0",
            "funcEndAddr": "0x40903d",
            "decompiledFuncCode": "int sub_408fe0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409ec0",
            "funcStartAddr": "0x409ec0",
            "funcEndAddr": "0x409ee8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n} struct_0;\n\nint sub_409ec0()\n{\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n\n    v1 = 0;\n    if (v2->field_28 <= v2->field_20)\n    {\n        v1 = v2->field_10 - v2->field_8;\n        if (((unsigned short)v2->field_0 & 0x100) != 0)\n        {\n            v1 = v2->field_10 - v2->field_8 + v2->field_58 - v2->field_48;\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4059e0",
            "funcStartAddr": "0x4059e0",
            "funcEndAddr": "0x4059e8",
            "decompiledFuncCode": "extern unsigned long long g_612520;\n\nint sub_4059e0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_612520 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404e60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404ea0",
            "decompiledFuncCode": "extern unsigned long long *__environ;\n\nint sub_404e60()\n{\n    unsigned long long v1;  // rbp\n    unsigned long long *v2;  // rbx\n    char *v3;  // rdi\n\n    v1 = 0;\n    v2 = __environ;\n    if (*(__environ) != 0)\n    {\n        do\n        {\n            v2 = &v2[1];\n            v3 = *(v2);\n            v1 = v1 + strlen(v3) + 1;\n        }\n        while (*(v2) != 0);\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x4059d2",
            "decompiledFuncCode": "extern unsigned int g_40dcf2;\nextern unsigned int g_6122c0;\nextern unsigned long long g_612510;\n\nint sub_4058e0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // r12\n    unsigned int *v8;  // rbp\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n\n    v1 = v3;\n    v0 = v4;\n    v5 = sub_409ec0();\n    if (v5 != 0 || sub_40b2b0() != 0)\n    {\n        while (true)\n        {\n            v11 = sub_409ef0();\n            if (v11 == 0)\n            {\n                v12 = sub_409e80();\n                if (v12 != 0)\n                {\n                    sub_40b2b0();\n                }\n            }\n            if (v12 == 0 || v11 != 0)\n            {\n                if (sub_40b2b0() == 0)\n                {\n                    break;\n                }\n            }\n            v7 = dcgettext(0x0, 0x40dcf2, 0x5);\n            v8 = __errno_location();\n            if (g_612510 != 0)\n            {\n                sub_408e10();\n                error(0x0, *(v8), \"%s: %s\");\n            }\n            else\n            {\n                error(0x0, *(v8), \"%s\");\n            }\n            sub_405a00();\n            _exit(g_6122c0);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409550",
            "funcStartAddr": "0x409550",
            "funcEndAddr": "0x409608",
            "decompiledFuncCode": "int sub_409550()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4090e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x40356b",
            "decompiledFuncCode": "extern unsigned int g_40bd88;\nextern unsigned int g_40bdc0;\nextern unsigned int g_40be10;\nextern unsigned int g_40be88;\nextern unsigned int g_40bf60;\nextern unsigned int g_40bfb0;\nextern unsigned int g_40c0a0;\nextern unsigned int g_40c188;\nextern unsigned int g_40c220;\nextern unsigned int g_40c258;\nextern unsigned int g_40c318;\nextern unsigned int g_40c398;\nextern unsigned int g_40c438;\nextern unsigned int g_40c488;\nextern unsigned int g_40c4d8;\nextern unsigned int g_40c518;\nextern unsigned int g_40c568;\nextern unsigned int g_40c640;\nextern unsigned int g_40c690;\nextern unsigned int g_40c6d8;\nextern unsigned int g_40c720;\nextern unsigned int g_40c768;\nextern unsigned int g_40c7a8;\nextern unsigned int g_40c7f0;\n\nint sub_4032b0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    void *v3;  // rdi\n    void *v4;  // rbx\n\n    v0 = v2;\n    v4 = v3;\n    fprintf(v3, (unsigned long long)dcgettext(0x0, 0x40bd88, 0x5));\n    fputs((unsigned long long)dcgettext(0x0, 0x40bdc0, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40be10, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40be88, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40bf60, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40bfb0, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c0a0, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c188, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c220, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c258, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c318, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c398, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c438, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c488, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c4d8, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c518, 0x5), v3);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c568, 0x5), v4);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c640, 0x5), v4);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c690, 0x5), v4);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c6d8, 0x5), v4);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c720, 0x5), v4);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c768, 0x5), v4);\n    fputs((unsigned long long)dcgettext(0x0, 0x40c7a8, 0x5), v4);\n    dcgettext(0x0, 0x40c7f0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4094f0",
            "funcStartAddr": "0x4094f0",
            "funcEndAddr": "0x409549",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4094f0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4090e0();\n}\n"
        },
        {
            "funcName": "sub_404114",
            "funcStartAddr": "0x404114",
            "funcEndAddr": "0x404119",
            "decompiledFuncCode": "int sub_404114()\n{\n}\n"
        },
        {
            "funcName": "sub_408a9b",
            "funcStartAddr": "0x408a9b",
            "funcEndAddr": "0x408b61",
            "decompiledFuncCode": "int sub_408a9b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_407760();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_409680();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_407760();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408d80",
            "funcStartAddr": "0x408d80",
            "funcEndAddr": "0x408d8f",
            "decompiledFuncCode": "int sub_408d80()\n{\n}\n"
        },
        {
            "funcName": "sub_404a40",
            "funcStartAddr": "0x404a40",
            "funcEndAddr": "0x404be6",
            "decompiledFuncCode": "extern unsigned int g_40daf8;\nextern unsigned long long g_6124f0;\n\nint sub_404a40()\n{\n    char *v0;  // [bp-0x70]\n    unsigned long v1;  // [bp-0x68]\n    char *v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x48]\n    unsigned int v4;  // [bp-0x3c]\n    unsigned long v5;  // [bp-0x30]\n    unsigned long v6;  // [bp-0x20]\n    unsigned long v7;  // [bp-0x18]\n    unsigned long v8;  // [bp-0x10]\n    unsigned long v9;  // [bp-0x8]\n    char *|unsigned int v10;  // [bp+0x8]\n    unsigned long v11;  // [bp+0x10]\n    unsigned int v12;  // [bp+0x18]\n    unsigned long v13;  // r15\n    char *v14;  // rdx\n    char *v15;  // r15\n    unsigned long v16;  // r14\n    unsigned long long v17[6];  // rdi\n    unsigned long long v18[6];  // r14\n    unsigned long v19;  // r13\n    unsigned long v20;  // r12\n    unsigned long v21;  // rcx\n    unsigned long v22;  // rbx\n    unsigned long long v23;  // rdi\n    char *v24;  // rbx\n    unsigned long v25;  // rsi\n    unsigned long long v26;  // rbp\n    char *v27;  // rax\n    unsigned long v28;  // r13\n    char *v29;  // rsi\n    unsigned long long v31;  // rbp\n    unsigned long long v33;  // r12\n    unsigned long v34;  // r9\n    char *v36;  // r8\n\n    v9 = v13;\n    v15 = v14;\n    v8 = v16;\n    v18 = v17;\n    v7 = v19;\n    v6 = v20;\n    v33 = v21;\n    v5 = v22;\n    v23 = v17[3];\n    v24 = g_6124f0;\n    v3 = v25;\n    v26 = v23 - 1;\n    v2 = v10;\n    v1 = v11;\n    v4 = v12;\n    if (g_6124f0 == 0)\n    {\n        v27 = sub_409680();\n        v24 = v27;\n        g_6124f0 = v27;\n    }\n    while (true)\n    {\n        v0 = (unsigned long long)(unsigned int)sub_4066f0();\n        if (v0 != 0)\n        {\n            v28 = v0 - v15;\n            if (v26 > v0 - v15)\n            {\n                v31 = v26 - v28;\n                strncpy(v24, v15, v28);\n                v24 = &v24[v28];\n                if (v1 + v34 < v31)\n                {\n                    v26 = v31 - (v1 + v34);\n                    if (v36 != 0)\n                    {\n                        strcpy(v24, v36);\n                        v24 = &v24[v34];\n                    }\n                    strcpy(v24, v2);\n                    v24 = &v24[v1];\n                    v15 = &v0[v18[5]];\n                    v33 = v33 - v18[5] - v28;\n                }\n                else\n                {\n                    v15 = v0;\n                }\n            }\n        }\n        else if (v33 < v26)\n        {\n            v29 = v15;\n            v15 = &v15[v33];\n            strncpy(v24, v29, v33);\n            v26 -= v33;\n            v24 = &v24[v33];\n            v33 = 0;\n        }\n        if (*(v15) != 0 && (v33 >= v26 || v0 != 0) && (v26 <= v0 - v15 || v0 == 0 || v1 + v34 >= v31))\n        {\n            break;\n        }\n        *(v24) = 0;\n        v10 = v4;\n    }\n    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40daf8, 0x5));\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402030",
            "funcEndAddr": "0x402daf",
            "decompiledFuncCode": "extern unsigned long long g_402ec0;\nextern char g_402ed0;\nextern unsigned long long g_402f00;\nextern char g_403720;\nextern unsigned long long g_403790;\nextern unsigned long long g_4038b0;\nextern unsigned long long g_404120;\nextern unsigned int g_40cab8;\nextern unsigned int g_40cb28;\nextern unsigned int g_40cb50;\nextern unsigned int g_40cc60;\nextern unsigned int g_40ccc8;\nextern unsigned int g_40cd50;\nextern unsigned int g_40cd98;\nextern unsigned int g_40cdd8;\nextern unsigned int g_40ce20;\nextern unsigned int g_40ce60;\nextern unsigned int g_40ce88;\nextern unsigned int g_40ceb0;\nextern unsigned int g_40cee0;\nextern unsigned int g_40cf20;\nextern unsigned int g_40cf70;\nextern unsigned int g_40cfa8;\nextern unsigned int g_40cfe0;\nextern unsigned int g_40d020;\nextern unsigned int g_40d0d0;\nextern unsigned int g_40d288;\nextern int512_t g_40d6e0;\nextern unsigned int g_40d94f;\nextern unsigned int g_40f2d5;\nextern unsigned int g_6122b0;\nextern char g_6122b4;\nextern unsigned int g_61233c;\nextern unsigned long long g_6123b8;\nextern char g_6123c0;\nextern char g_6123c1;\nextern char g_6123c2;\nextern unsigned int g_6123c4;\nextern unsigned int g_6123c8;\nextern unsigned int g_6123d0;\nextern char g_6123f0;\nextern unsigned long long g_6123f8;\nextern unsigned int g_612420;\nextern unsigned long long g_612428;\nextern unsigned long long g_612438;\nextern unsigned long long g_612448;\nextern unsigned long long g_612450;\nextern unsigned long long g_612458;\nextern unsigned long long g_612460;\nextern unsigned long long g_612468;\nextern unsigned long long g_612470;\nextern unsigned long long g_612480;\nextern unsigned long long g_612498;\nextern unsigned long long g_6124a0;\nextern unsigned long long g_6124a8;\nextern unsigned long long g_6124d0;\nextern unsigned int g_6124d8;\nextern unsigned long long g_6124e0;\nextern unsigned long long g_6124e8;\nextern unsigned long long g_612ec8;\nextern unsigned long long stderr;\nextern unsigned long long stdin;\n\nint main()\n{\n    unsigned long v0;  // [bp-0x138]\n    unsigned long v1;  // [bp-0x130]\n    unsigned long|unsigned long long v2;  // [bp-0x128]\n    unsigned long|unsigned long long v3;  // [bp-0x120]\n    unsigned int v4;  // [bp-0x110]\n    unsigned int v5;  // [bp-0x10c]\n    unsigned long|char *|unsigned long long v6;  // [bp-0x108]\n    unsigned long|unsigned int *|unsigned long long v7;  // [bp-0x100]\n    unsigned int v8;  // [bp-0xec]\n    unsigned int v9;  // [bp-0xe5]\n    char v10;  // [bp-0xe1]\n    unsigned long|char v11;  // [bp-0xe0]\n    unsigned long|unsigned long long v12;  // [bp-0xd8]\n    char v13;  // [bp-0xd0]\n    unsigned int v14;  // [bp-0x50]\n    unsigned long v16;  // rdi\n    unsigned int v17;  // rbp\n    unsigned long long *v18;  // rsi\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned int v24;  // r13d\n    unsigned int v25;  // eax\n    unsigned long long v26;  // rax\n    unsigned long long v28;  // r12\n    unsigned long long v29;  // r15\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // rdi\n    unsigned long long v37;  // r12\n    char v38;  // cc_dep2\n    unsigned long v39;  // d\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rax\n    unsigned long long v44;  // cc_dep1\n    unsigned long v48;  // r9\n    unsigned long v49;  // rsi\n    unsigned long long v53;  // rax\n    unsigned long long v54;  // r14\n    unsigned long long *v55;  // rbx\n    unsigned long long v56;  // r13\n    unsigned long long v60;  // r14\n    unsigned long long v67;  // rcx\n    char *v68;  // rdi\n    char v69;  // cc_dep2\n    unsigned long long v71;  // rdi\n    unsigned long long v72;  // r8\n    unsigned long long *v76;  // rdx\n    char *v77;  // rdi\n    unsigned long long v78;  // rcx\n    char v79;  // cc_dep2\n    unsigned long long *v81;  // rdx\n    char *v82;  // rdi\n    unsigned long long v83;  // rcx\n    char v84;  // cc_dep2\n    unsigned long long v87;  // r14\n    unsigned long long v90;  // r13\n    unsigned long long v93;  // rax\n\n    v17 = v16;\n    v55 = v18;\n    v9 = 1869112165;\n    v10 = 0;\n    sub_4075c0();\n    sub_4053a0();\n    g_6123c4 = 0;\n    g_6123d0 = getpid();\n    setlocale(0x6, 0x40f2d5);\n    bindtextdomain(0x40d94f, 0x40cab8);\n    textdomain(0x40d94f);\n    v21 = sub_40bc80();\n    if (v21 == 0)\n    {\n        v22 = sub_40bc80();\n        if (v22 == 0)\n        {\n            v60 = &g_402f00;\n            v23 = sub_404ea0();\n            v24 = v23;\n            v25 = (unsigned int)v23 - 1;\n            if (v25 > 1)\n            {\n                v26 = sysconf(0x0);\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    if (v26 > 0x800)\n                    {\n                        *((int *)&g_612438) = (!(rax<8> - 0x800 <= g_612438)? g_612438 : rax<8> - 0x800);\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v26 > 0x800)\n                {\n                    if (g_612438 > 2047)\n                    {\n                        v60 = &g_402ec0;\n                        g_612460 = &g_404120;\n                        sub_404f80();\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n            }\n            if (v25 <= 1 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) && g_612438 > 2047 || v26 > 0x800 && g_612438 > 2047)\n            {\n                v5 = 1;\n                v28 = &g_4038b0;\n                v29 = \"-\";\n                v4 = 0;\n                while (true)\n                {\n                    v30 = sub_40b0f0();\n                    if (v30 != -1)\n                    {\n                        switch ((unsigned int)v31)\n                        {\n                        case 0:\n                            g_6123c0 = 0;\n                            v28 = &g_403790;\n                            break;\n                        case 21: case 53:\n                            if (*((char *)g_612ec8) != 0 && g_612ec8 != 0)\n                            {\n                                g_6123f8 = g_612ec8;\n                            }\n                            if (*((char *)g_612ec8) == 0 || g_612ec8 == 0)\n                            {\n                                g_6123f8 = 0;\n                            }\n                        case 25: case 57:\n                            v32 = g_612ec8;\n                            if (g_612ec8 == 0)\n                            {\n                                v32 = \"{}\";\n                            }\n                            g_612450 = v32;\n                            g_612470 = 0;\n                            g_612468 = 0;\n                        case 28:\n                            g_612470 = 0;\n                            g_612468 = (unsigned int)sub_403570();\n                            g_612450 = 0;\n                            break;\n                        case 32:\n                            g_6122b0 = sub_403570();\n                            break;\n                        case 35:\n                            v4 = 1;\n                            break;\n                        case 49:\n                            v29 = g_612ec8;\n                            break;\n                        case 52:\n                            v35 = -1;\n                            v36 = g_612ec8;\n                            v37 = (char)*((char *)g_612ec8);\n                            while (v35 != 0)\n                            {\n                                v35 -= 1;\n                                v38 = *((char *)v36);\n                                v36 += v39;\n                                break;\n                            }\n                            if (v35 != -3)\n                            {\n                                if (*((char *)g_612ec8) == 92)\n                                {\n                                    v37 = (char)*((char *)(g_612ec8 + 1));\n                                    switch ((unsigned long long)(char)*((char *)(g_612ec8 + 1)) - 92 & 255)\n                                    {\n                                    case 0:\n                                        *((unsigned long long *)&g_6123c0) = v37;\n                                        v28 = &g_403790;\n                                    case 5:\n                                        v37 = 7;\n                                        break;\n                                    case 6:\n                                        v37 = 8;\n                                        break;\n                                    case 10:\n                                        v37 = 12;\n                                        break;\n                                    case 18:\n                                        v37 = 10;\n                                        break;\n                                    case 22:\n                                        v37 = 13;\n                                        break;\n                                    case 24:\n                                        v37 = 9;\n                                        break;\n                                    case 26:\n                                        v37 = 11;\n                                        break;\n                                    default:\n                                        v6 = g_612ec8;\n                                    }\n                                }\n                                else\n                                {\n                                    v6 = g_612ec8;\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40ccc8, 0x5));\n                                }\n                            }\n                            if (*((char *)(g_612ec8 + 1)) != 120)\n                            {\n                                v6 = v6;\n                                v7 = __errno_location();\n                                v44 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)(char)*((char *)(g_612ec8 + 1)) * 2 + 1)) & 8);\n                                if ((char)v44 != 0)\n                                {\n                                    v6 = v6;\n                                    *(v7) = 0;\n                                    v12 = 0;\n                                    v37 = strtoul();\n                                    if (v37 > 255)\n                                    {\n                                        v6 = v6;\n                                        v49 = \"Invalid escape sequence %s in input delimiter specification; character values must not exceed %lo.\";\n                                    }\n                                }\n                                else\n                                {\n                                    v7 = v7;\n                                    v6 = v6;\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cb50, 0x5));\n                                }\n                            }\n                            else\n                            {\n                                *(v7) = 0;\n                                v12 = 0;\n                                v37 = strtoul();\n                                if (v37 > 255)\n                                {\n                                    v6 = v6;\n                                    v49 = \"Invalid escape sequence %s in input delimiter specification; character values must not exceed %lx.\";\n                                }\n                                else if (*((char *)v12) != 0)\n                                {\n                                    v7 = 0;\n                                    v6 = v48;\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cc60, 0x5));\n                                }\n                            }\n                            if ((*((char *)(g_612ec8 + 1)) == 120 || (char)v44 != 0) && (*((char *)(g_612ec8 + 1)) == 120 || v37 > 255) && (v37 > 255 || *((char *)(g_612ec8 + 1)) != 120))\n                            {\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, v49, 0x5));\n                            }\n                        case 56:\n                            sub_4032b0();\n                            v93 = 0;\n                        case 60:\n                            if (g_612ec8 != 0)\n                            {\n                                g_612468 = (unsigned int)sub_403570();\n                            }\n                            else\n                            {\n                                g_612468 = 1;\n                            }\n                            g_612470 = 0;\n                            g_612450 = 0;\n                        case 62:\n                            g_612468 = 0;\n                            g_612470 = (unsigned int)sub_403570();\n                            if (g_612470 == 1 && g_612450 != 0)\n                            {\n                                g_612470 = 0;\n                            }\n                            if (g_612450 == 0 || g_612470 != 1)\n                            {\n                                g_612450 = 0;\n                            }\n                        case 64:\n                            g_6123c1 = 1;\n                        case 66:\n                            v5 = 0;\n                            break;\n                        case 67:\n                            r14<8>();\n                            v40 = (unsigned int)sub_403570();\n                            if (g_612428 < v40)\n                            {\n                                v6 = g_612428;\n                                v7 = v40;\n                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40cd50, 0x5));\n                                v40 = g_612428;\n                            }\n                            g_612438 = v40;\n                        case 68:\n                            g_6123c2 = 1;\n                            break;\n                        case 70:\n                            sub_404580();\n                            v93 = 0;\n                        case 72:\n                            g_612420 = 1;\n                            break;\n                        case 80:\n                            if (strchr(g_612ec8, 0x3d) != 0)\n                            {\n                                v6 = (&g_40d6e0)[4 * (long long)(int)v8];\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40cd98, 0x5));\n                            }\n                            else\n                            {\n                                g_6123b8 = g_612ec8;\n                                v6 = g_612ec8;\n                                v41 = unsetenv(g_612ec8);\n                                v7 = v6;\n                                v6 = (unsigned long long)dcgettext(0x0, 0x40cdd8, 0x5);\n                                error(0x1, *(__errno_location()), v6);\n                            }\n                        default:\n                            sub_4032b0();\n                            v93 = 1;\n                        }\n                    }\n                    else\n                    {\n                        if (v28 == 4208528 && g_6123f8 != 0)\n                        {\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40ce20, 0x5));\n                        }\n                        r14<8>();\n                        if (v24 == 0)\n                        {\n                            v12 = &g_402ed0;\n                            sigemptyset((unsigned int)&v13);\n                            v14 = 0;\n                            if (sigaction() != 0)\n                            {\n                                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ce60, 0x5));\n                            }\n                            v12 = &g_403720;\n                            sigemptyset((unsigned int)&v13);\n                            v14 = 0;\n                            if (sigaction() != 0)\n                            {\n                                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ce88, 0x5));\n                            }\n                            v53 = strcmp(v29, \"-\");\n                            if (v53 == 0)\n                            {\n                                g_6124e8 = stdin;\n                            }\n                            else\n                            {\n                                g_6124d8 = 1;\n                                g_6124e8 = (unsigned int)sub_4036c0();\n                                if (g_6124e8 == 0)\n                                {\n                                    v54 = (unsigned int)sub_408c90();\n                                    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d288, 0x5));\n                                }\n                            }\n                            if (v53 == 0 || g_6124e8 != 0)\n                            {\n                                if (g_612468 != 0 || g_612450 != 0)\n                                {\n                                    g_612420 = 1;\n                                }\n                                if (g_61233c == v17)\n                                {\n                                    v55 = &v11;\n                                    v17 = 1;\n                                    g_61233c = 0;\n                                    v11 = stack_base + -229;\n                                }\n                                if (v4 != 0)\n                                {\n                                    v56 = (unsigned int)sub_404e60();\n                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40ceb0, 0x5));\n                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40cee0, 0x5));\n                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40cf20, 0x5));\n                                    v60 = (unsigned int)sub_404e60();\n                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40cf70, 0x5));\n                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40cfa8, 0x5));\n                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40cfe0, 0x5));\n                                    if (isatty(0x0) != 0)\n                                    {\n                                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40d020, 0x5));\n                                        if (v5 != 0)\n                                        {\n                                            fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40d0d0, 0x5));\n                                        }\n                                    }\n                                }\n                                g_6124e0 = (unsigned int)sub_409680();\n                                g_612498 = (unsigned int)sub_409680();\n                                signal(0x11, 0x0);\n                                if (g_612450 != 0)\n                                {\n                                    if (v17 > g_61233c)\n                                    {\n                                        do\n                                        {\n                                            v77 = v55[rdx<8>];\n                                            v78 = -1;\n                                            while (v78 != 0)\n                                            {\n                                                v78 -= 1;\n                                                v79 = *(v77);\n                                                v77 = &v77[v39];\n                                                break;\n                                            }\n                                            *((long long *)((unsigned int)sub_409680() + v76 * 8)) = !(rcx<8>) - 1;\n                                            v81 = (char *)v76 + 1;\n                                        }\n                                        while (v17 > (unsigned int)((int)g_61233c + 1));\n                                    }\n                                    v82 = g_612450;\n                                    v83 = -1;\n                                    while (v83 != 0)\n                                    {\n                                        v83 -= 1;\n                                        v84 = *(v82);\n                                        v82 = &v82[v39];\n                                        break;\n                                    }\n                                    g_612448 = !(rcx<8>) - 1;\n                                    while (true)\n                                    {\n                                        if ((unsigned int)v60 == -1)\n                                        {\n                                            break;\n                                        }\n                                        v60 = r12<8>();\n                                        sub_405050();\n                                        v60 = v87 - 1;\n                                        g_6124a0 = 0;\n                                        v3 = (int)g_61233c;\n                                        v2 = g_6122b4;\n                                        sub_4047a0();\n                                        g_6122b4 = 0;\n                                        v90 = (int)(g_61233c + 1);\n                                        if (v17 > g_61233c + 1)\n                                        {\n                                            while (true)\n                                            {\n                                                v90 += 1;\n                                                v2 = g_6122b4;\n                                                v1 = v60;\n                                                v0 = g_6124e0;\n                                                sub_404a40();\n                                                if (v17 <= (unsigned int)v90)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        sub_404c00();\n                                    }\n                                }\n                                else\n                                {\n                                    for (; g_61233c < v17; v72 = v3)\n                                    {\n                                        v67 = -1;\n                                        v68 = v55[(long long)(int)g_61233c];\n                                        while (v67 != 0)\n                                        {\n                                            v67 -= 1;\n                                            v69 = *(v68);\n                                            v68 = &v68[v39];\n                                            break;\n                                        }\n                                        v3 = 0;\n                                        v2 = g_6122b4;\n                                        sub_4047a0();\n                                        g_61233c = g_61233c + 1;\n                                        v71 = v2;\n                                    }\n                                    g_6122b4 = 0;\n                                    g_612458 = g_612480;\n                                    g_6124a8 = g_6124a0;\n                                    while (true)\n                                    {\n                                        if (!((char)(r12<8>() + 1 == 0)))\n                                        {\n                                            sub_404c00();\n                                            g_6124d0 = 0;\n                                        }\n                                        else\n                                        {\n                                            if (g_612480 == g_612458 && (v5 == 0 || g_6123f0 != 0))\n                                            {\n                                                break;\n                                            }\n                                            sub_404c00();\n                                        }\n                                    }\n                                }\n                                g_6123c4 = g_6123c8;\n                                v93 = g_6123c8;\n                            }\n                        }\n                        else\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                    }\n                    if (*((long long *)(rax<8> * 8 + 4248384)) == 4203665 && v30 != -1 || *((long long *)(rax<8> * 8 + 4248384)) == 4203304 && v30 != -1 || *((long long *)(rax<8> * 8 + 4248384)) == 4203646 && v30 != -1 || v53 == 0 && v24 == 0 && v30 == -1 || (unsigned int)(v30 - 48) > 80 && v30 != -1 || v24 == 0 && v30 == -1 && g_6124e8 != 0)\n                    {\n                        return v93;\n                    }\n                }\n            }\n        }\n    }\n    if (v21 != 0 || v22 != 0)\n    {\n        error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40cb28, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_408e10",
            "funcStartAddr": "0x408e10",
            "funcEndAddr": "0x408e21",
            "decompiledFuncCode": "int sub_408e10()\n{\n}\n"
        },
        {
            "funcName": "sub_408f70",
            "funcStartAddr": "0x408f70",
            "funcEndAddr": "0x408f7a",
            "decompiledFuncCode": "int sub_408f70()\n{\n}\n"
        },
        {
            "funcName": "sub_402c66",
            "funcStartAddr": "0x402c66",
            "funcEndAddr": "0x402c6b",
            "decompiledFuncCode": "int sub_402c66()\n{\n}\n"
        },
        {
            "funcName": "sub_402d78",
            "funcStartAddr": "0x402d78",
            "funcEndAddr": "0x402d89",
            "decompiledFuncCode": "int sub_402d78()\n{\n}\n"
        },
        {
            "funcName": "sub_404ea0",
            "funcStartAddr": "0x404ea0",
            "funcEndAddr": "0x404f6b",
            "decompiledFuncCode": "int sub_404ea0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40572f",
            "funcStartAddr": "0x40572f",
            "funcEndAddr": "0x40573e",
            "decompiledFuncCode": "int sub_40572f()\n{\n    unsigned long long v1;  // [bp+0x10]\n    unsigned long long v2;  // [bp+0x20]\n    unsigned long long v3;  // [bp+0x28]\n    unsigned long long v4;  // [bp+0x30]\n    unsigned long long v5;  // rbx\n    unsigned long long v7;  // rbx\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // r14\n\n    v7 = v1;\n    v8 = v2;\n    v9 = v3;\n    v10 = v4;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_408970",
            "funcStartAddr": "0x408970",
            "funcEndAddr": "0x4089a3",
            "decompiledFuncCode": "extern int512_t g_612640;\n\nint sub_408970()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_612640 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_612640 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40b890",
            "funcStartAddr": "0x40b890",
            "funcEndAddr": "0x40b8fc",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    char padding_8[4];\n    unsigned int field_c;\n} struct_1;\n\nextern int512_t g_6126c0;\n\nint sub_40b890()\n{\n    unsigned long v1;  // rdi\n    struct_1 *v3;  // rsi\n    unsigned long long v5;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rdi<8>, 0x10<64>, cc_ndep<8>)))\n    {\n        v3 = malloc(v1 + 16);\n        if (v3 != 0)\n        {\n            v3->field_c = 336984906;\n            v5 = *((long long *)&((char *)(0x8 * v3 + -2056 * ((unsigned long long)(&v3[1] * -71777214294589695 >> 64) >> 8) + (char *)&g_6126c0))[128]);\n            *((struct_1 **)&((char *)(0x8 * v3 + -2056 * ((unsigned long long)(&v3[1] * -71777214294589695 >> 64) >> 8) + (char *)&g_6126c0))[128]) = &v3[1];\n            v3->field_0 = v5;\n        }\n        return &v3[1];\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b070",
            "funcStartAddr": "0x40b070",
            "funcEndAddr": "0x40b0c6",
            "decompiledFuncCode": "extern unsigned int g_612334;\nextern unsigned int g_612338;\nextern unsigned int g_61233c;\nextern unsigned int g_612680;\nextern unsigned int g_612684;\nextern unsigned int g_612688;\nextern unsigned long long g_612690;\nextern unsigned long long g_612ec8;\n\nint sub_40b070()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_612680 = g_61233c;\n    g_612684 = g_612338;\n    v1 = (unsigned int)v2;\n    v0 = &g_612680;\n    g_61233c = g_612680;\n    g_612ec8 = g_612690;\n    g_612334 = g_612688;\n    return sub_40a030();\n}\n"
        },
        {
            "funcName": "sub_408c50",
            "funcStartAddr": "0x408c50",
            "funcEndAddr": "0x408c66",
            "decompiledFuncCode": "int sub_408c50()\n{\n}\n"
        },
        {
            "funcName": "sub_405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x4052a5",
            "decompiledFuncCode": "int sub_405260()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v4;  // rdx\n\n    v4 = ((unsigned long long)sysconf(0x4) == -1? 20 : (unsigned long long)sysconf(0x4));\n    if (getrlimit(0x7, (unsigned int)&v0) == 0)\n    {\n        v4 = (unsigned int)(*((long long *)&v0) == -1? (unsigned int)v4 : (unsigned int)*((long long *)&v0));\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4094d0",
            "funcStartAddr": "0x4094d0",
            "funcEndAddr": "0x4094f0",
            "decompiledFuncCode": "int sub_4094d0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_403a27",
            "funcStartAddr": "0x403a27",
            "funcEndAddr": "0x403a2c",
            "decompiledFuncCode": "int sub_403a27()\n{\n}\n"
        },
        {
            "funcName": "sub_4058d0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x4058d8",
            "decompiledFuncCode": "extern unsigned long long g_612510;\n\nint sub_4058d0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_612510 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403ec0",
            "funcStartAddr": "0x403ec0",
            "funcEndAddr": "0x403f2d",
            "decompiledFuncCode": "extern char g_6123a1;\nextern unsigned int g_6123c4;\nextern unsigned int g_6123c8;\nextern unsigned int g_6123d0;\n\nint sub_403ec0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = getpid();\n    if ((unsigned int)v1 == g_6123d0)\n    {\n        if (g_6123a1 == 0)\n        {\n            g_6123a1 = 1;\n            sub_402f30();\n            v1 = g_6123c8;\n            g_6123a1 = 0;\n            if (g_6123c4 != g_6123c8)\n            {\n                _exit(g_6123c8);\n            }\n        }\n        if (g_6123c4 == g_6123c8 || g_6123a1 != 0)\n        {\n            return v1;\n        }\n    }\n    if ((unsigned int)v1 != g_6123d0 || g_6123a1 == 0 && g_6123c4 != g_6123c8)\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403f30",
            "funcStartAddr": "0x403f30",
            "funcEndAddr": "0x4040ec",
            "decompiledFuncCode": "extern unsigned int g_40c990;\nextern unsigned int g_40d1c7;\nextern unsigned int g_40d1ef;\nextern unsigned long long g_6123a8;\nextern unsigned long long g_612480;\nextern unsigned long long *g_612488;\nextern unsigned long long stderr;\n\nint sub_403f30()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rdi\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n\n    if (g_612480 != 1)\n    {\n        v1 = 0;\n        while (true)\n        {\n            v2 = fprintf(stderr, \"%s \", (unsigned int)g_612488[v1]);\n            if (v2 >= 0)\n            {\n                v1 += 1;\n                if (g_612480 - 1 <= v1)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d1c7, 0x5));\n            }\n        }\n    }\n    if (!((char)v3 != 0))\n    {\n        _IO_putc(0xa, stderr);\n        return 0;\n    }\n    else if (g_6123a8 != 0)\n    {\n        fwrite(\"?...\", 0x1, 0x4, stderr);\n        v6 = sub_409e80();\n        if (v6 == 0)\n        {\n            if ((unsigned int)v6 != 10 && (unsigned int)v6 != -1)\n            {\n                do\n                {\n                    v8 = _IO_getc(g_6123a8);\n                    if ((unsigned int)v8 == -1)\n                    {\n                        break;\n                    }\n                }\n                while ((unsigned int)v8 != 10);\n            }\n            if ((unsigned int)v6 == -1 || (unsigned int)v6 == 10)\n            {\n                v6 = (unsigned int)_IO_getc(g_6123a8);\n            }\n            if ((unsigned int)v8 != -1)\n            {\n                return v8;\n            }\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d1ef, 0x5));\n        }\n        else\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d1c7, 0x5));\n        }\n    }\n    else\n    {\n        g_6123a8 = (unsigned int)sub_4036c0();\n        error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40c990, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_409680",
            "funcStartAddr": "0x409680",
            "funcEndAddr": "0x40969a",
            "decompiledFuncCode": "int sub_409680()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4098a0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40478d",
            "funcStartAddr": "0x40478d",
            "funcEndAddr": "0x404798",
            "decompiledFuncCode": "int sub_40478d()\n{\n    unsigned long long v1;  // [bp+0x10]\n    unsigned long long v2;  // [bp+0x20]\n    unsigned long long v3;  // rbx\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // r12\n\n    v5 = v1;\n    v6 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_408c90",
            "funcStartAddr": "0x408c90",
            "funcEndAddr": "0x408cfd",
            "decompiledFuncCode": "int sub_408c90()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_408770();\n}\n"
        },
        {
            "funcName": "sub_409040",
            "funcStartAddr": "0x409040",
            "funcEndAddr": "0x409071",
            "decompiledFuncCode": "int sub_409040()\n{\n    unsigned long v1;  // rdi\n\n    return (sub_40b1a0() != 0? (unsigned int)sub_40b1a0() - v1 + 1 : rsi<8>);\n}\n"
        },
        {
            "funcName": "sub_40ba20",
            "funcStartAddr": "0x40ba20",
            "funcEndAddr": "0x40ba37",
            "decompiledFuncCode": "extern int512_t g_40f520;\n\nint sub_40ba20()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n\n    v2 = v1;\n    v3 = (char)v1 % 32;\n    return (unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)&g_40f520)[4 * (unsigned long long)(unsigned int)(rax<4> & 7)]) >> ((char)v1 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_408910",
            "funcStartAddr": "0x408910",
            "funcEndAddr": "0x408944",
            "decompiledFuncCode": "int sub_408910()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_409840();\n}\n"
        },
        {
            "funcName": "sub_4096d0",
            "funcStartAddr": "0x4096d0",
            "funcEndAddr": "0x409700",
            "decompiledFuncCode": "int sub_4096d0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4098a0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404710",
            "funcStartAddr": "0x404710",
            "funcEndAddr": "0x404788",
            "decompiledFuncCode": "extern unsigned int g_40d960;\n\nint sub_404710()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long long v2;  // rbx\n    char *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned long v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = 0;\n    v4 = getenv(v3);\n    if (v4 != 0)\n    {\n        v5 = sub_4098e0();\n        if (v5 == 0)\n        {\n            v2 = 0;\n            v2 = (char)(v0 < v6);\n        }\n        else\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d960, 0x5));\n        }\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v7 = v2;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_402e61",
            "funcStartAddr": "0x402e61",
            "funcEndAddr": "0x402eb8",
            "decompiledFuncCode": "extern char g_612388;\nextern unsigned long long g_612390;\n\nint sub_402e61()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_612388 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_612390 >= 0)\n            {\n                break;\n            }\n            g_612390 = g_612390 + 1;\n            *((long long *)(6364736 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_612388 = 1;\n        return sub_402e0b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409ef0",
            "funcStartAddr": "0x409ef0",
            "funcEndAddr": "0x409f46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_409ef0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4096a0",
            "funcStartAddr": "0x4096a0",
            "funcEndAddr": "0x4096b3",
            "decompiledFuncCode": "int sub_4096a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>))\n    {\n        v0 = v2 * v3;\n        sub_4098a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405070",
            "funcStartAddr": "0x405070",
            "funcEndAddr": "0x4050d3",
            "decompiledFuncCode": "int sub_405070()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v5;  // rbx\n    char *v6;  // rdi\n\n    v2 = v1;\n    v3 = 0;\n    v5 = 0;\n    if (*((long long *)v1) != 0)\n    {\n        do\n        {\n            v5 += 1;\n            v6 = *((long long *)(v2 + v5 * 8));\n            v3 += strlen(v6);\n        }\n        while (*((long long *)(v2 + (v5 << 3))) != 0);\n    }\n    if (sub_404710() != 0)\n    {\n        return 1;\n    }\n    sub_404710();\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40311e",
            "funcStartAddr": "0x40311e",
            "funcEndAddr": "0x403127",
            "decompiledFuncCode": "int sub_40311e()\n{\n}\n"
        },
        {
            "funcName": "sub_4052b0",
            "funcStartAddr": "0x4052b0",
            "funcEndAddr": "0x40538f",
            "decompiledFuncCode": "int sub_4052b0()\n{\n    unsigned int|char v0;  // [bp-0x238]\n    unsigned short v1;  // [bp-0x234]\n    unsigned short v2;  // [bp-0x232]\n    char v3;  // [bp-0x230]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned long long v8;  // [bp-0x10]\n    unsigned long long v9;  // [bp-0x8]\n    unsigned long long v11;  // rdi\n    unsigned long long v12;  // r15\n    unsigned long long v13;  // r14\n    unsigned long long v14;  // r14\n    unsigned long long v15;  // r13\n    unsigned long long v16;  // rsi\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rdx\n    unsigned long long v21;  // rbp\n    unsigned long long v22;  // rbx\n    unsigned long v23;  // r15\n    unsigned long v24;  // rsi\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rdx\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rcx\n    unsigned int v29;  // edi\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rbx\n    unsigned long long v32;  // rdi\n    unsigned long long v33;  // rsi\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // r13\n    unsigned long long v38;  // r14\n    unsigned long long v39;  // r15\n\n    if ((unsigned int)v11 > 0)\n    {\n        v9 = v12;\n        v8 = v13;\n        v14 = v11;\n        v7 = v15;\n        v17 = v16;\n        v6 = v18;\n        v5 = stack_base + 0;\n        v21 = 0;\n        v4 = v22;\n        while (true)\n        {\n            v23 = (unsigned int)((unsigned int)(v14 - v21) <= 64? (unsigned int)(v14 - v21) : 64);\n            v24 = ((unsigned int)(v14 - v21) <= 64? (unsigned int)(v14 - v21) : 64);\n            if ((unsigned int)(v14 - v21) > 0)\n            {\n                v25 = &v0;\n                v26 = 0;\n                do\n                {\n                    v28 = 5;\n                    v25 = &v3;\n                    v2 = 0;\n                    v29 = v21 + v26;\n                    v26 = (unsigned int)v26 + 1;\n                    v1 = 5;\n                    v0 = v29;\n                }\n                while ((unsigned int)v26 < (unsigned int)v23);\n                v30 = poll();\n                if (v30 != -1)\n                {\n                    v31 = 0;\n                    do\n                    {\n                        if (v2 != 32)\n                        {\n                            v32 = v0;\n                            v33 = v19;\n                            v34 = r13<8>();\n                            if ((unsigned int)v34 != 0)\n                            {\n                                break;\n                            }\n                        }\n                        v31 += 1;\n                    }\n                    while ((unsigned int)v23 > (unsigned int)v31);\n                    if (v2 == 32 || (unsigned int)v34 == 0)\n                    {\n                        v21 += v23;\n                    }\n                    else if (v2 != 32)\n                    {\n                        v35 = v4;\n                        v36 = v6;\n                        v37 = v7;\n                        v38 = v8;\n                        v39 = v9;\n                        return v34;\n                    }\n                }\n            }\n            else\n            {\n                v27 = poll();\n            }\n            if (v27 == -1 && (unsigned int)(v14 - v21) <= 0 || v30 == -1 && (unsigned int)(v14 - v21) > 0)\n            {\n                v34 = -18446744069414584321;\n            }\n            if ((unsigned int)(v14 - v21) <= 0 && v27 != -1 || (unsigned int)(v14 - v21) > 0 && v30 != -1)\n            {\n                v21 += v23;\n                v34 = 0;\n            }\n        }\n        v35 = v4;\n        v36 = v6;\n        v37 = v7;\n        v38 = v8;\n        v39 = v9;\n        return v34;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408eb0",
            "funcStartAddr": "0x408eb0",
            "funcEndAddr": "0x408f1c",
            "decompiledFuncCode": "extern uint128_t g_612640;\nextern uint128_t g_612650;\nextern uint128_t g_612660;\nextern unsigned long long g_612670;\n\nint sub_408eb0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_612640;\n    *((uint128_t *)&v1) = g_612650;\n    *((uint128_t *)&v2) = g_612660;\n    v4 = g_612670;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_408770();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a72",
            "decompiledFuncCode": "extern int512_t g_612640;\n\nint sub_408a00()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_612640 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_407760();\n}\n"
        },
        {
            "funcName": "sub_4089b0",
            "funcStartAddr": "0x4089b0",
            "funcEndAddr": "0x4089c3",
            "decompiledFuncCode": "extern int512_t g_612640;\n\nint sub_4089b0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_612640 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_612640 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4058c0",
            "funcStartAddr": "0x4058c0",
            "funcEndAddr": "0x4058ce",
            "decompiledFuncCode": "int sub_4058c0()\n{\n}\n"
        },
        {
            "funcName": "sub_405a00",
            "funcStartAddr": "0x405a00",
            "funcEndAddr": "0x405a9e",
            "decompiledFuncCode": "extern unsigned int g_40dd0c;\nextern unsigned int g_6122c0;\nextern char g_612518;\nextern unsigned long long g_612520;\n\nint sub_405a00()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40b2b0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_612518 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40dd0c, 0x5);\n            if (g_612520 != 0)\n            {\n                sub_408e10();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_612518 != 0)\n    {\n        v3 = sub_40b2b0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_612518 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6122c0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_403570",
            "funcStartAddr": "0x403570",
            "funcEndAddr": "0x4036ad",
            "decompiledFuncCode": "extern unsigned int g_40c820;\nextern unsigned int g_40c848;\nextern unsigned int g_40c878;\nextern unsigned long long stderr;\n\nint sub_403570()\n{\n    char v0;  // [bp-0x30]\n    char *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rdx\n    unsigned long long v6;  // rcx\n    unsigned int v11;  // r8d\n\n    v3 = strtol(v2, &v0, 0xa);\n    if (*((long long *)&v0) != v2 && *((char *)*((long long *)&v0)) == 0)\n    {\n        if (v3 >= v4)\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v3 > v6)\n            {\n                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40c878, 0x5));\n                if (v11 == 0)\n                {\n                    v3 = v6;\n                }\n            }\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>) || v11 == 0 || v3 <= v6)\n            {\n                return v3;\n            }\n        }\n        else\n        {\n            fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40c848, 0x5));\n            if (v11 == 0)\n            {\n                return stack_base + 0;\n            }\n        }\n        if (v11 != 0 && (v3 < v4 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>))) && (v3 < v4 || v3 > v6))\n        {\n            sub_4032b0();\n            exit(0x1); /* do not return */\n        }\n    }\n    if (*((long long *)&v0) == v2 || *((char *)*((long long *)&v0)) != 0)\n    {\n        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40c820, 0x5));\n        sub_4032b0();\n        exit(0x1); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4026d7",
            "funcStartAddr": "0x4026d7",
            "funcEndAddr": "0x4026dc",
            "decompiledFuncCode": "int sub_4026d7()\n{\n}\n"
        },
        {
            "funcName": "sub_402e0b",
            "funcStartAddr": "0x402e0b",
            "funcEndAddr": "0x402e2a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_402e0b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405160",
            "funcStartAddr": "0x405160",
            "funcEndAddr": "0x4051c6",
            "decompiledFuncCode": "int sub_405160()\n{\n    void tmp_18;  // tmp #18\n    unsigned long long v1;  // rsi\n    unsigned long long v2[2];  // rbp\n    unsigned long v3;  // rax\n    unsigned int v4;  // cc_dep1\n    unsigned long long v6;  // rbx\n    unsigned int *v7;  // rax\n    unsigned int v8;  // edi\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v2 = v1;\n    v3 = sub_409d40();\n    v4 = v3 & 1;\n    if (v4 != 0)\n    {\n        v10 = 0;\n    }\n    else\n    {\n        v6 = v3 & 1;\n        v7 = sub_405740();\n        if (v7 != 0)\n        {\n            tmp_18 = v2[1];\n            v2[0] = v7;\n            v7[tmp_18] = v8;\n            v9 = v6;\n            v2[1] = tmp_18 + 1;\n            return v9;\n        }\n        v10 = -18446744069414584321;\n    }\n    if (v7 == 0 || v4 != 0)\n    {\n        v11 = v10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_4097b0",
            "funcStartAddr": "0x4097b0",
            "funcEndAddr": "0x4097fa",
            "decompiledFuncCode": "int sub_4097b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long *v3;  // rsi\n    unsigned long long *v4;  // rsi\n\n    if (!(v2 != 0))\n    {\n        *((int *)v3) = (*(v4) == 0? 128 : *(v4));\n    }\n    else if (*(v4) <= 12297829382473034409)\n    {\n        *(v4) = (*(v4) >> 1) + *(v4) + 1;\n    }\n    else\n    {\n        v0 = *(v4);\n        sub_4098a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409840",
            "funcStartAddr": "0x409840",
            "funcEndAddr": "0x409868",
            "decompiledFuncCode": "int sub_409840()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409680();\n}\n"
        },
        {
            "funcName": "sub_4025c3",
            "funcStartAddr": "0x4025c3",
            "funcEndAddr": "0x4025c8",
            "decompiledFuncCode": "int sub_4025c3()\n{\n}\n"
        },
        {
            "funcName": "sub_4089d0",
            "funcStartAddr": "0x4089d0",
            "funcEndAddr": "0x4089fb",
            "decompiledFuncCode": "extern char g_612640;\n\nint sub_4089d0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_612640 : v2);\n    *((int *)(tmp_11? &g_612640 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_612640;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_612640;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409870",
            "funcStartAddr": "0x409870",
            "funcEndAddr": "0x40989e",
            "decompiledFuncCode": "int sub_409870()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n    sub_409680();\n}\n"
        },
        {
            "funcName": "sub_408f20",
            "funcStartAddr": "0x408f20",
            "funcEndAddr": "0x408f29",
            "decompiledFuncCode": "int sub_408f20()\n{\n}\n"
        },
        {
            "funcName": "sub_40b170",
            "funcStartAddr": "0x40b170",
            "funcEndAddr": "0x40b193",
            "decompiledFuncCode": "int sub_40b170()\n{\n    unsigned long v1;  // rsi\n    unsigned long v2;  // rdx\n\n    if (v1 != 0 && v2 == 0)\n    {\n        return -2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4075c0",
            "funcStartAddr": "0x4075c0",
            "funcEndAddr": "0x407659",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_612528;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4075c0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_612528 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405b80",
            "funcStartAddr": "0x405b80",
            "funcEndAddr": "0x405ce0",
            "decompiledFuncCode": "extern char g_405c64;\n\nint sub_405b80()\n{\n    unsigned long v0;  // [bp-0x48]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long v3;  // [bp-0x8]\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rdi\n    char *v8;  // rbx\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // rsi\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r8\n    unsigned long long v15;  // r9\n    unsigned long long v16;  // rax\n    unsigned long long *v17;  // rcx\n    unsigned long long v18;  // r8\n    char v19[2];  // r9\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v23;  // rbx\n\n    if (v5 <= 2305843009213693951)\n    {\n        v3 = stack_base + 0;\n        v2 = v6;\n        v8 = v7;\n        v9 = v5 * 8;\n        if (v5 << 3 <= 4015)\n        {\n            rsp<8> = stack_base + -56 - (v9 + 39 & -0x10);\n            v13 = (stack_base + -56 - (v9 + 39 & -0x10) + 15 & -0x10) + 16;\n        }\n        else\n        {\n            v1 = v10;\n            rsp<8> = stack_base + -64;\n            v13 = (unsigned int)sub_40b890();\n            v11 = v1;\n        }\n        if (v5 << 3 > 4015 && v13 == 0 || v5 << 3 <= 4015 && (stack_base + -56 - ((v5 << 3) + 39 & -0x10) + 15 & -0x10) + 16 == 0)\n        {\n            v12 = v2;\n            return 0;\n        }\n        if (v5 << 3 > 4015 && v13 != 0 || v5 << 3 <= 4015 && (stack_base + -56 - ((v5 << 3) + 39 & -0x10) + 15 & -0x10) + 16 != 0)\n        {\n            *((long long *)(v13 + 8)) = 1;\n            v14 = 0;\n            v15 = 2;\n            if (v5 > 2)\n            {\n                while (true)\n                {\n                    v16 = (char)*((char *)(v11 + v15 - 1));\n                    if (*((char *)(v11 + v15 - 1)) != *((char *)(v11 + v14)))\n                    {\n                        while (true)\n                        {\n                            if (v14 != 0)\n                            {\n                                v14 -= *((long long *)(v13 + v14 * 8));\n                                if (*((char *)(v11 + v14)) == v16)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                *((long long *)(v13 + 2 * 8)) = 2;\n                                v14 = 0;\n                            }\n                        }\n                        if (v14 != 0)\n                        {\n                            v14 += 1;\n                            *((unsigned long long *)(v13 + v15 * 8)) = v15 - v14;\n                        }\n                        else if (v14 == 0)\n                        {\n                            v15 += 1;\n                            if (v5 == v15)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v14 += 1;\n                    *((unsigned long long *)(v13 + v15 * 8)) = v15 - v14;\n                }\n            }\n            *(v17) = 0;\n            v18 = *(v8);\n            v19 = v8;\n            v20 = 0;\n            while (v18 != 0)\n            {\n                while (true)\n                {\n                    if (*((char *)(v1 + v20)) == v18)\n                    {\n                        v21 = v20 + 1;\n                        if (v5 != v21)\n                        {\n                            v18 = v19[1];\n                        }\n                        else\n                        {\n                            *(v17) = v8;\n                        }\n                    }\n                    else if (v20 != 0)\n                    {\n                        v8 = &v8[*((long long *)(v13 + v20 * 8))];\n                        v20 -= *((long long *)(v13 + v20 * 8));\n                        if (v18 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v18 = v19[1];\n                    }\n                }\n                if (v5 == v21 && *((char *)(v1 + v20)) == v18 || *((char *)(v1 + v20)) != v18 && v20 != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v0 = &g_405c64;\n                    sub_40b900();\n                    v23 = v2;\n                    return 1;\n                }\n            }\n            rsp<8> = rsp<8> - 8;\n            v0 = &g_405c64;\n            sub_40b900();\n            v23 = v2;\n            return 1;\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4030b2",
            "funcStartAddr": "0x4030b2",
            "funcEndAddr": "0x4030b6",
            "decompiledFuncCode": "int sub_4030b2()\n{\n}\n"
        },
        {
            "funcName": "sub_40b0f0",
            "funcStartAddr": "0x40b0f0",
            "funcEndAddr": "0x40b103",
            "decompiledFuncCode": "int sub_40b0f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40b070();\n}\n"
        },
        {
            "funcName": "sub_408e00",
            "funcStartAddr": "0x408e00",
            "funcEndAddr": "0x408e0d",
            "decompiledFuncCode": "int sub_408e00()\n{\n}\n"
        },
        {
            "funcName": "sub_407760",
            "funcStartAddr": "0x407760",
            "funcEndAddr": "0x40866b",
            "decompiledFuncCode": "int sub_407760()\n{\n    void tmp_2;  // tmp #2\n    void tmp_1;  // tmp #1\n    unsigned long long v0;  // [bp-0x1d8]\n    unsigned long long v1;  // [bp-0xd8]\n    unsigned long long v2;  // [bp-0xd0]\n    unsigned long long v3;  // [bp-0xc8]\n    unsigned int|char v4;  // [bp-0xac]\n    unsigned long|unsigned long long|char v5;  // [bp-0xa8]\n    unsigned long long v6;  // [bp-0xa0]\n    unsigned long long v7;  // [bp-0x98]\n    unsigned long long|unsigned int v8;  // [bp-0x90]\n    unsigned long|unsigned long long v9;  // [bp-0x88]\n    unsigned long long|unsigned int v10;  // [bp-0x80]\n    unsigned long long|unsigned int v11;  // [bp-0x78]\n    unsigned long long v12;  // [bp-0x70]\n    unsigned long v13;  // [bp-0x68]\n    unsigned int v14;  // [bp-0x60]\n    char v15;  // [bp-0x5b]\n    unsigned long long v16;  // [bp-0x5a]\n    char v17;  // [bp-0x59]\n    unsigned long long v18;  // [bp-0x58]\n    unsigned long long v19;  // [bp-0x50]\n    char v20;  // [bp-0x44]\n    unsigned long long v21;  // [bp-0x40]\n    unsigned int *v22;  // [bp+0x8]\n    unsigned long long v23;  // [bp+0x10]\n    void *v24;  // [bp+0x18]\n    unsigned long long v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long v27;  // r9\n    unsigned long long v28;  // rcx\n    unsigned int v29;  // r8d\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v32;  // r11\n    unsigned long v33;  // r11\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r12\n    unsigned long long v38;  // rax\n    unsigned long|unsigned long long v39;  // r10\n    unsigned long long v40;  // r11\n    unsigned long|unsigned long long v41;  // r8\n    unsigned long long v42;  // r12\n    unsigned long|unsigned long long|char v43;  // rax\n    unsigned long long v44;  // r9\n    char v45;  // al\n    unsigned long long v46;  // rbp\n    char v47;  // bpl\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rax\n    char v50;  // al\n    unsigned long|unsigned long long|unsigned int v51;  // rbp\n    unsigned long long v52;  // rcx\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rdx\n    unsigned short v56;  // dx\n    unsigned long long|char v57;  // rdx\n    unsigned long long v58;  // rbx\n    unsigned long long v59;  // r14\n    unsigned long long v60;  // r12\n    unsigned long long v61;  // r15\n    char *v62;  // rdx\n    unsigned long long v63;  // r8\n    unsigned long long v64;  // rcx\n    unsigned long long v65;  // rcx\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rcx\n    unsigned long long|unsigned int v69;  // rax\n    unsigned long long v71;  // rax\n    char v72;  // al\n    unsigned int v73;  // eax\n    char v74;  // al\n    unsigned int v76;  // eax\n    char v77;  // al\n    unsigned long long v79;  // rdx\n    char v80;  // dl\n    unsigned long long v81;  // rbx\n    unsigned int *|unsigned long long v82;  // rsi\n    unsigned long long v83;  // r14\n    unsigned long long v84;  // r13\n    unsigned long long v85;  // rax\n    char v87;  // al\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rax\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v26 = v25;\n    v83 = v82;\n    v51 = (unsigned int)v27 & 2;\n    v6 = v43;\n    v5 = v28;\n    v4 = v29;\n    v14 = v27;\n    v13 = __ctype_get_mb_cur_max();\n    v30 = v4;\n    switch (v4)\n    {\n    case 0:\n        v15 = 0;\n        v81 = 0;\n        v4 = 0;\n        v7 = 0;\n        v12 = 0;\n    case 1:\n        v15 = 1;\n        v81 = 0;\n        v32 = 2;\n        v4 = 0;\n        v7 = 1;\n        v12 = \"'\";\n    case 2:\n        if (((char)v27 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v15 = 1;\n            v81 = 0;\n            v4 = 0;\n            v7 = 1;\n            v12 = \"'\";\n        }\n    case 3:\n        v15 = 1;\n        v81 = 0;\n        v32 = 2;\n        v4 = 1;\n        v7 = 1;\n        v12 = \"'\";\n    case 4:\n        if (((char)v27 & 2) == 0)\n        {\n            v4 = 1;\n            if (v82 != 0)\n            {\n                *((char *)v25) = 39;\n            }\n            v15 = 0;\n            v81 = 1;\n            v32 = 2;\n            v7 = 1;\n            v12 = \"'\";\n        }\n    case 5:\n        if (((char)v27 & 2) == 0)\n        {\n            if (v82 != 0)\n            {\n                *((char *)v25) = 34;\n            }\n            v15 = 0;\n            v81 = 1;\n            v4 = 1;\n            v7 = 1;\n            v12 = \"\\\"\";\n        }\n        else\n        {\n            v15 = 1;\n            v81 = 0;\n            v4 = 1;\n            v7 = 1;\n            v12 = \"\\\"\";\n        }\n    case 6:\n        v15 = 1;\n        v81 = 0;\n        v32 = 5;\n        v4 = 1;\n        v7 = 1;\n        v12 = \"\\\"\";\n    case 7:\n        v15 = 0;\n        v81 = 0;\n        v4 = 1;\n        v7 = 0;\n        v12 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v5 = v5;\n            v4 = v33;\n            v23 = (unsigned int)sub_407660();\n            v24 = (unsigned long long)(unsigned int)sub_407660();\n        }\n        v81 = 0;\n        if (((char)v27 & 2) == 0)\n        {\n            v34 = (char)*((char *)v23);\n            if (*((char *)v23) != 0)\n            {\n                do\n                {\n                    if (v82 > v81)\n                    {\n                        *((unsigned long long *)(v25 + v81)) = v34;\n                    }\n                    v81 += 1;\n                    v34 = (char)*((char *)(v23 + v81));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        *((unsigned long *)&v8) = v33;\n        v5 = v33;\n        v15 = ((unsigned int)v27 & 2) != 0;\n        v4 = 1;\n        v7 = strlen(v24);\n        v32 = v8;\n        v12 = v24;\n    default:\n        abort(); /* do not return */\n    }\n    v35 = v32;\n    v33 = v5;\n    v39 = v35;\n    v84 = 0;\n    v41 = 0;\n    while (true)\n    {\n        v51 = (char)(v40 != v84);\n        if (v40 == -1)\n        {\n            v51 = (char)(*((char *)(v6 + v84)) != 0);\n        }\n        if (v51 != 0)\n        {\n            v44 = v6 + v84;\n            v5 = (unsigned int)v39 != 2 & v4;\n            if (((unsigned int)v39 != 2 & v4) != 0)\n            {\n                v36 = v7;\n                if (v7 != 0)\n                {\n                    v37 = v84 + v36;\n                    if (v40 == -1 && v36 > 1)\n                    {\n                        v10 = v39;\n                        v9 = v41;\n                        v8 = v44;\n                        v40 = strlen(v6);\n                    }\n                    if (v37 <= v40)\n                    {\n                        v11 = v39;\n                        v10 = v40;\n                        v9 = v41;\n                        v8 = v44;\n                        v38 = memcmp(v44, v12, v7);\n                        v44 = v8;\n                        v41 = (char)v9;\n                        v40 = v10;\n                        v39 = v11;\n                        if (v38 == 0 && v15 == 0)\n                        {\n                            v42 = (char)*((char *)v44);\n                            switch (*((char *)v44))\n                            {\n                            case 0:\n                                v43 = (char)((unsigned int)v39 == 2);\n                                v49 = (unsigned int)(0 ^ 1);\n                                v50 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                {\n                                    if (v81 < v82)\n                                    {\n                                        *((char *)(v25 + v81)) = 39;\n                                    }\n                                    if (v82 > v81 + 1)\n                                    {\n                                        *((char *)(v25 + v81 + 1)) = 36;\n                                    }\n                                    if (v82 > v81 + 2)\n                                    {\n                                        *((char *)(v25 + v81 + 2)) = 39;\n                                    }\n                                    v52 = v81 + 3;\n                                    v81 += 4;\n                                    v84 = 1;\n                                    v41 = rax<8>;\n                                    v42 = 48;\n                                    v41 = rax<8>;\n                                }\n                                else\n                                {\n                                    v52 = v81;\n                                    *((char *)(v25 + v52)) = 92;\n                                    v81 = v52 + 1;\n                                    v84 = 1;\n                                    v42 = 48;\n                                    v42 = 48;\n                                    if (1 < v40)\n                                    {\n                                        v82 = v6;\n                                        if (((unsigned int)(char)*((char *)(v6 + 1)) - 48 & 255) <= 9)\n                                        {\n                                            if (v83 > v81)\n                                            {\n                                                *((char *)(v25 + v81)) = 48;\n                                            }\n                                            if (v83 > v52 + 2)\n                                            {\n                                                *((char *)(v25 + v52 + 2)) = 48;\n                                            }\n                                            v81 = v52 + 3;\n                                            v42 = 48;\n                                        }\n                                    }\n                                    v82 = v22;\n                                    v43 = (unsigned int)v39 == 2;\n                                    v43 = (unsigned int)v39 == 2;\n                                    v84 += 1;\n                                    v51 = (v51 ^ 1) & (unsigned int)v41;\n                                }\n                            case 13:\n                                v42 = 13;\n                                v48 = 114;\n                                v43 = (unsigned int)v39 == 2;\n                            case 32: case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                v43 = 0;\n                            case 35: case 126:\n                                v43 = 0;\n                            case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                v51 = 0;\n                            case 92:\n                                v46 = v4;\n                                v47 = v4 & v15;\n                                v42 = 92;\n                                v48 = 92;\n                                v43 = rbp<8>;\n                                v43 = (char)rbp<8> & v7 != 0;\n                                if (((char)rbp<8> & v7 != 0) == 0)\n                                {\n                                    v43 = v43;\n                                    v42 = v48;\n                                    v84 += 1;\n                                }\n                                else\n                                {\n                                    v84 = 1;\n                                    v51 = 0;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (v7 == 0 || v38 != 0 || v37 > v40)\n                {\n                    v42 = (char)*((char *)v44);\n                    switch (*((char *)v44))\n                    {\n                    case 0:\n                        if (v15 == 0)\n                        {\n                            v5 = 0;\n                        }\n                    case 7:\n                        v42 = 97;\n                        v43 = 0;\n                        break;\n                    case 8:\n                        v42 = 98;\n                        v43 = 0;\n                        break;\n                    case 9:\n                        v42 = 116;\n                        v43 = 0;\n                        break;\n                    case 10:\n                        v42 = 110;\n                        v43 = 0;\n                        break;\n                    case 11:\n                        v42 = 118;\n                        v43 = 0;\n                        break;\n                    case 12:\n                        v42 = 102;\n                        v43 = 0;\n                        break;\n                    case 13:\n                        v5 = 0;\n                    case 32: case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v5 = 0;\n                    case 35: case 126:\n                        v5 = 0;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v5 = 0;\n                    case 39:\n                        v5 = 0;\n                    case 63:\n                        v5 = 0;\n                    case 92:\n                        v5 = 0;\n                    case 123: case 125:\n                        v5 = 0;\n                    default:\n                        v5 = 0;\n                    }\n                }\n            }\n            else\n            {\n                v42 = (char)*((char *)v44);\n                switch (*((char *)v44))\n                {\n                case 0:\n                    if (v4 == 0)\n                    {\n                        v84 += 1;\n                        v84 += 1;\n                        v51 = v41;\n                        v42 = 0;\n                        v51 = 0;\n                        v42 = 0;\n                        v5 = 0;\n                        v42 = 0;\n                    }\n                case 7:\n                    v42 = 7;\n                    v48 = 97;\n                    v43 = (unsigned int)v39 == 2;\n                case 8:\n                    v42 = 8;\n                    v48 = 98;\n                    v43 = (unsigned int)v39 == 2;\n                case 9:\n                    v42 = 9;\n                    v48 = 116;\n                case 10:\n                    v42 = 10;\n                    v48 = 110;\n                    v43 = (unsigned int)v39 == 2;\n                    v5 = v15 & (unsigned int)v39 == 2;\n                    if ((v15 & (unsigned int)v39 == 2) != 0)\n                    {\n                        tmp_2 = v39;\n                    }\n                case 11:\n                    v42 = 11;\n                    v48 = 118;\n                    v43 = (unsigned int)v39 == 2;\n                case 12:\n                    v42 = 12;\n                    v48 = 102;\n                    v43 = (unsigned int)v39 == 2;\n                case 13:\n                    v42 = 13;\n                    v48 = 114;\n                case 32: case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                    v43 = (char)((unsigned int)v39 == 2);\n                    if ((v15 & v43) == 0)\n                    {\n                        break;\n                    }\n                case 35: case 126:\n                    v43 = (unsigned int)v39 == 2;\n                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                    v43 = (char)((unsigned int)v39 == 2);\n                    break;\n                case 39:\n                    v43 = 0;\n                    v42 = 39;\n                    if ((unsigned int)v39 != 2)\n                    {\n                        v51 = ((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1;\n                        v51 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1) | v15;\n                        v84 += 1;\n                        v51 = (v51 ^ 1) & (unsigned int)v41;\n                        if (v51 != 0)\n                        {\n                            if (v81 < v83)\n                            {\n                                *((char *)(v26 + v81)) = 39;\n                            }\n                            if (v83 > v81 + 1)\n                            {\n                                *((char *)(v26 + v81 + 1)) = 39;\n                            }\n                            v81 += 2;\n                            v41 = 0;\n                        }\n                    }\n                    else\n                    {\n                        if (v81 < v82)\n                        {\n                            *((char *)(v25 + v81)) = 39;\n                        }\n                        if (v82 > v81 + 1)\n                        {\n                            *((char *)(v25 + v81 + 1)) = 92;\n                        }\n                        if (v82 > v81 + 2)\n                        {\n                            *((char *)(v25 + v81 + 2)) = 39;\n                        }\n                        v81 += 3;\n                        v84 = 1;\n                        v41 = 0;\n                        v42 = 39;\n                        tmp_1 = v39;\n                    }\n                    if (v5 != 0)\n                    {\n                        v43 = (unsigned int)v39 == 2;\n                        v79 = (unsigned int)v41 ^ 1;\n                        v80 = (char)((unsigned int)v41 ^ 1) & v43;\n                        if (((char)((unsigned int)v41 ^ 1) & v43) != 0)\n                        {\n                            if (v83 > v81)\n                            {\n                                *((char *)(v26 + v81)) = 39;\n                            }\n                            if (v83 > v81 + 1)\n                            {\n                                *((char *)(v26 + v81 + 1)) = 36;\n                            }\n                            if (v83 > v81 + 2)\n                            {\n                                *((char *)(v26 + v81 + 2)) = 39;\n                            }\n                            v81 += 3;\n                            v41 = rdx<8>;\n                        }\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 92;\n                        }\n                        v81 += 1;\n                    }\n                case 63:\n                    if ((unsigned int)v39 != 2)\n                    {\n                        v42 = 63;\n                        v43 = (char)((unsigned int)v39 == 2);\n                        break;\n                        v43 = 0;\n                        v42 = 63;\n                        break;\n                        v43 = 0;\n                        v42 = 63;\n                        v82 = v6;\n                        v42 = (char)*((char *)(v82 + 2));\n                        v82 = 0x7000a38200000000;\n                        v0 = 0x7000a38200000000;\n                        v42 = 63;\n                        break;\n                        if (v81 < v83)\n                        {\n                            *((char *)(v25 + v81)) = 63;\n                        }\n                        if (v83 > v81 + 1)\n                        {\n                            *((char *)(v25 + v81 + 1)) = 34;\n                        }\n                        if (v83 > v81 + 2)\n                        {\n                            *((char *)(v25 + v81 + 2)) = 34;\n                        }\n                        if (v83 > v81 + 3)\n                        {\n                            *((char *)(v25 + v81 + 3)) = 63;\n                        }\n                        v81 += 4;\n                        v43 = 0;\n                        v51 = 0;\n                        v84 = 2;\n                    }\n                    else\n                    {\n                        v51 = 0;\n                        v42 = 63;\n                    }\n                case 92:\n                    if ((unsigned int)v39 == 2)\n                    {\n                        v84 += 1;\n                        v51 = v41;\n                        v42 = 92;\n                    }\n                case 123: case 125:\n                    v45 = v40 != 1;\n                    if (v40 == -1)\n                    {\n                        v45 = *((char *)(v6 + 1)) != 0;\n                    }\n                    v43 = (char)((unsigned int)v39 == 2);\n                }\n            }\n        }\n        else\n        {\n            v85 = v39;\n            v87 = (unsigned int)v39 == 2;\n            v88 = rax<8> & (unsigned int)v15;\n            if ((v88 & (char)(v81 == 0)) == 0)\n            {\n                v89 = v12;\n                if ((unsigned long long)v15 == 0 && v12 != 0)\n                {\n                    v90 = (char)*((char *)v89);\n                    if (*((char *)v89) != 0)\n                    {\n                        v91 = v89 - v81;\n                        do\n                        {\n                            if (v83 > v81)\n                            {\n                                *((unsigned long long *)(v26 + v81)) = v90;\n                            }\n                            v81 += 1;\n                            v90 = (char)*((char *)(v91 + v81));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v81 < v83)\n                {\n                    *((char *)(v26 + v81)) = 0;\n                }\n            }\n        }\n        if (v13 == 1)\n        {\n            v10 = v39;\n            v9 = v40;\n            v8 = v41;\n            v39 = v10;\n            v54 = 1;\n            v55 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v42 * 2));\n            v56 = (unsigned short)v55 % 0x4000;\n            v57 = (unsigned int)rdx<8> ^ 1;\n            v57 &= v4;\n            if (v57 != 0)\n            {\n                v57 = v4;\n            }\n        }\n        else\n        {\n            v21 = 0;\n            if (v40 == -1)\n            {\n                v10 = v39;\n                v9 = v41;\n                v8 = v44;\n                v40 = strlen(v6);\n            }\n            v18 = v81;\n            v16 = v41;\n            v58 = 0;\n            *((unsigned long long *)&v17) = v42;\n            v19 = v44;\n            v10 = v26;\n            v11 = v83;\n            v8 = v40;\n            v9 = v39;\n            do\n            {\n                v59 = v84 + v58;\n                v60 = v6 + v84 + v58;\n                v61 = (unsigned int)sub_40b170();\n                if (v61 == 0)\n                {\n                    v51 = (unsigned int)v51 ^ 1;\n                    v54 = v58;\n                    v26 = v10;\n                    v41 = (char)v16;\n                    v42 = v17;\n                    v81 = v18;\n                    v83 = v11;\n                    v57 = v4 & (unsigned int)v51;\n                    v40 = v8;\n                    v39 = (unsigned int)v9;\n                }\n                else if (v61 == -1)\n                {\n                    v54 = v58;\n                    v41 = (char)v16;\n                    v42 = v17;\n                    v81 = v18;\n                    v26 = v10;\n                    v83 = v11;\n                    v40 = v8;\n                    v39 = (unsigned int)v9;\n                    v57 = v4;\n                }\n                else if (v61 != -2)\n                {\n                    if (v61 != 1 && ((int)v9 == 2 & v15) != 0)\n                    {\n                        v82 = v6;\n                        v62 = v6 + v82 + 1;\n                        v63 = v6 + v61 + v82;\n                        while (true)\n                        {\n                            v64 = (unsigned int)*(v62) - 91;\n                            if (((unsigned int)*(v62) - 91 & 255) <= 33)\n                            {\n                                v65 = 1 << (v64 & 63);\n                            }\n                            if ((8589934635 & v65) == 0 || ((unsigned int)*(v62) - 91 & 255) > 33)\n                            {\n                                v62 = &v62[1];\n                                if (v63 == v62)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((8589934635 & v65) == 0 || ((unsigned int)*(v62) - 91 & 255) > 33)\n                        {\n                            v51 = (unsigned int)(iswprint(*((int *)&v20)) == 0? 0 : (unsigned int)rbp<8>);\n                            v58 += v61;\n                        }\n                    }\n                    v51 = (unsigned int)(iswprint(*((int *)&v20)) == 0? 0 : (unsigned int)rbp<8>);\n                    v58 += v61;\n                    v54 = v58;\n                    v41 = (char)v16;\n                    v81 = v18;\n                    v57 = (unsigned int)v51 ^ 1;\n                    v42 = v17;\n                    v26 = v10;\n                    v83 = v11;\n                    v40 = v8;\n                    v39 = (unsigned int)v9;\n                    v57 = (char)((unsigned int)v51 ^ 1) & v4;\n                }\n                else\n                {\n                    v40 = v8;\n                    v82 = v59;\n                    v25 = v60;\n                    v67 = v58;\n                    v54 = v58;\n                    v41 = (char)v16;\n                    v42 = v17;\n                    v81 = v18;\n                    v26 = v10;\n                    v83 = v11;\n                    v39 = (unsigned int)v9;\n                    if (v82 < v8 && *((char *)v25) != 0)\n                    {\n                        do\n                        {\n                            v67 += 1;\n                        }\n                        while (v8 > v67 && *((char *)(v19 + v67)) != 0);\n                        v54 = v67;\n                    }\n                    v57 = v4;\n                }\n            }\n            while (v54 <= 1);\n            if (v61 == -2 || v61 == -1 || v61 == 0 || mbsinit((unsigned int)&v21) != 0)\n            {\n                v68 = v54 + v84;\n                v69 = 0;\n                v82 = v5;\n            }\n        }\n        if (v57 != 0)\n        {\n            v68 = v54 + v84;\n            v69 = 0;\n            v82 = v5;\n            while (true)\n            {\n                if (v57 != 0)\n                {\n                    if ((unsigned long long)v15 != 0)\n                    {\n                        break;\n                    }\n                    v71 = (unsigned int)v41 ^ 1;\n                    v72 = (char)((unsigned int)v41 ^ 1) & v51;\n                    if (((char)((unsigned int)v41 ^ 1) & v51) != 0)\n                    {\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 39;\n                        }\n                        if (v83 > v81 + 1)\n                        {\n                            *((char *)(v26 + v81 + 1)) = 36;\n                        }\n                        if (v83 > v81 + 2)\n                        {\n                            *((char *)(v26 + v81 + 2)) = 39;\n                        }\n                        v81 += 3;\n                        v41 = rax<8>;\n                    }\n                    if (v81 < v83)\n                    {\n                        *((char *)(v26 + v81)) = 92;\n                    }\n                    if (v83 > v81 + 1)\n                    {\n                        v73 = v42;\n                        v74 = (char)v42 % 64;\n                        *((unsigned long long *)(v26 + v81 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                    }\n                    if (v83 > v81 + 2)\n                    {\n                        v76 = v42;\n                        v77 = (char)v42 % 8;\n                        *((unsigned long long *)(v26 + v81 + 2)) = (unsigned int)((rax<4> & 7) + 48);\n                    }\n                    v84 += 1;\n                    v81 += 3;\n                    v42 = ((unsigned int)v42 & 7) + 48;\n                    if (v68 <= v84)\n                    {\n                        break;\n                    }\n                    v69 = v57;\n                }\n                else\n                {\n                    v51 = (v69 ^ 1) & (unsigned int)v41;\n                    if (v82 != 0)\n                    {\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 92;\n                        }\n                        v81 += 1;\n                    }\n                    v84 += 1;\n                    if (v84 >= v68)\n                    {\n                        break;\n                    }\n                    if (v51 != 0)\n                    {\n                        if (v81 < v83)\n                        {\n                            *((char *)(v26 + v81)) = 39;\n                        }\n                        if (v83 > v81 + 1)\n                        {\n                            *((char *)(v26 + v81 + 1)) = 39;\n                        }\n                        v81 += 2;\n                        v82 = 0;\n                        v41 = 0;\n                    }\n                    else\n                    {\n                        v82 = 0;\n                    }\n                }\n                if (v81 < v83)\n                {\n                    *((unsigned long long *)(v26 + v81)) = v42;\n                }\n                v42 = (char)*((char *)(v6 + v84));\n                v81 += 1;\n            }\n        }\n        if ((v51 == 0 || (unsigned int)v39 == 2) && (v51 == 0 || v15 != 0) && ((unsigned int)v39 == 2 || (v88 & (char)(v81 == 0)) != 0) && (v15 != 0 || (v88 & (char)(v81 == 0)) != 0))\n        {\n            v3 = v24;\n            v2 = v23;\n            v1 = 0;\n            v81 = (unsigned int)sub_407760();\n        }\n        if ((v15 == 0 || v81 >= v83) && (v15 == 0 || v57 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1) == 0 || (unsigned int)v39 == 2 || v81 >= v83) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v43) ^ 1) == 0 || (unsigned int)v39 == 2 || v57 != 0))\n        {\n            if (v81 < v83)\n            {\n                *((unsigned long long *)(v26 + v81)) = v42;\n            }\n            v81 += 1;\n        }\n        if (v51 == 0 || (unsigned int)v39 == 2 && v15 != 0)\n        {\n            v92 = v81;\n            return v92;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_402ed0",
            "funcStartAddr": "0x402ed0",
            "funcEndAddr": "0x402ef7",
            "decompiledFuncCode": "extern unsigned int g_6122b0;\nextern unsigned int g_6123cc;\n\nint sub_402ed0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = g_6122b0;\n    if (g_6122b0 != 2147483647)\n    {\n        v1 = g_6122b0 + 1;\n        g_6122b0 = g_6122b0 + 1;\n    }\n    g_6123cc = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4098cc",
            "funcStartAddr": "0x4098cc",
            "funcEndAddr": "0x4098d1",
            "decompiledFuncCode": "int sub_4098cc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408b70",
            "funcStartAddr": "0x408b70",
            "funcEndAddr": "0x408b7a",
            "decompiledFuncCode": "int sub_408b70()\n{\n}\n"
        },
        {
            "funcName": "sub_408c70",
            "funcStartAddr": "0x408c70",
            "funcEndAddr": "0x408c82",
            "decompiledFuncCode": "int sub_408c70()\n{\n}\n"
        },
        {
            "funcName": "sub_409710",
            "funcStartAddr": "0x409710",
            "funcEndAddr": "0x409723",
            "decompiledFuncCode": "int sub_409710()\n{\n    void tmp_8;  // tmp #8\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long v4;  // rdx\n\n    v4 = v2 * v3 >> 64;\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>))\n    {\n        v0 = tmp_8;\n        sub_4098a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404e30",
            "funcStartAddr": "0x404e30",
            "funcEndAddr": "0x404e51",
            "decompiledFuncCode": "int sub_404e30()\n{\n    return ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Call (target: 0x401f30<64>, prototype: (int (32 bits)) -> None, args: [0x0<32>]), 0x0<64>, cc_ndep<8>)? 9223372036854775807 : (unsigned long long)sysconf(0x0));\n}\n"
        },
        {
            "funcName": "sub_40b150",
            "funcStartAddr": "0x40b150",
            "funcEndAddr": "0x40b168",
            "decompiledFuncCode": "int sub_40b150()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40a030();\n}\n"
        },
        {
            "funcName": "sub_402ec0",
            "funcStartAddr": "0x402ec0",
            "funcEndAddr": "0x402ec1",
            "decompiledFuncCode": "int sub_402ec0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403e32",
            "funcStartAddr": "0x403e32",
            "funcEndAddr": "0x403e37",
            "decompiledFuncCode": "int sub_403e32()\n{\n}\n"
        },
        {
            "funcName": "sub_409f50",
            "funcStartAddr": "0x409f50",
            "funcEndAddr": "0x40a025",
            "decompiledFuncCode": "int sub_409f50()\n{\n    unsigned int v1[14];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[6];\n    v3 = v1[0];\n    v4 = (int)v1[6 + 1];\n    v5 = v1[6];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6 + 1])\n    {\n        for (v6 = (int)v1[6 + 1]; v5 < v1[6 + 1]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6 + 1] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6 + 1] = v3;\n            v1[6] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6 + 1] = v3;\n    v1[6] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x40554b",
            "decompiledFuncCode": "extern unsigned long long g_612500;\nextern unsigned long long g_612508;\n\nint sub_405520()\n{\n    g_612508 = 0;\n    g_612500 = 0;\n    return (unsigned long long)free(g_612508);\n}\n"
        },
        {
            "funcName": "sub_408a72",
            "funcStartAddr": "0x408a72",
            "funcEndAddr": "0x408a9b",
            "decompiledFuncCode": "int sub_408a72()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_404600",
            "funcStartAddr": "0x404600",
            "funcEndAddr": "0x4046d9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_404600()\n{\n    void tmp_14;  // tmp #14\n    void tmp_13;  // tmp #13\n    void tmp_21;  // tmp #21\n    unsigned long long v1[10];  // rsi\n    unsigned long long v2;  // rax\n    char v3;  // dl\n    unsigned long long v4;  // rcx\n    unsigned long v5;  // rcx\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdx\n    struct_0 *v9;  // rdi\n    unsigned long long v10;  // rdx\n    struct_0 *v14;  // rdi\n    unsigned long long v15;  // rdx\n\n    v2 = v1[8];\n    if (v3 != 0)\n    {\n        if (v4 > v1[8])\n        {\n            v1[8] = v4;\n            v2 = v4;\n        }\n        if (v2 != 0 && v2 < v1[9])\n        {\n            v7 = v1[9] - v2;\n            v8 = v1[9] - v2 >> 1;\n            v2 = (v7 == 1? v4 + 1 : v8 + v4);\n        }\n        if (v2 == 0 || v2 >= v1[9])\n        {\n            v10 = v9->field_38;\n            v2 = (v4 == -1? -1 : v4 + 1);\n            if (v9->field_38 == 0)\n            {\n                return (tmp_14 == -1? -1 : tmp_13);\n            }\n        }\n    }\n    else\n    {\n        if (v1[9] == 0 || v1[9] > v5)\n        {\n            v1[9] = v5;\n        }\n        if (v1[8] != 0 && v1[9] > v1[8])\n        {\n            tmp_21 = v5;\n            v2 = (v1[9] - v1[8] == 1? v5 - 1 : tmp_21 - (v1[9] - v1[8] >> 1));\n        }\n        if (v1[8] == 0 || v1[9] <= v1[8])\n        {\n            v2 = v5 % 2;\n        }\n    }\n    if (v3 == 0 || v2 < v1[9] && v2 != 0)\n    {\n        v10 = v14->field_38;\n    }\n    if (v14->field_38 == 0 && (v3 == 0 || v2 < v1[9]) && (v3 == 0 || v2 != 0))\n    {\n        return (v2 == 0? 1 : v2);\n    }\n    if (v3 == 0 && v14->field_38 != 0 || v2 == 0 && v9->field_38 != 0 && v3 != 0 || v2 < v1[9] && v14->field_38 != 0 && v2 != 0 || v9->field_38 != 0 && v3 != 0 && v2 >= v1[9])\n    {\n        v15 = v10 + 1;\n        if (v15 >= v2)\n        {\n            return (v15 == 0? 1 : v15);\n        }\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_408e30",
            "funcStartAddr": "0x408e30",
            "funcEndAddr": "0x408e3a",
            "decompiledFuncCode": "int sub_408e30()\n{\n}\n"
        },
        {
            "funcName": "sub_405410",
            "funcStartAddr": "0x405410",
            "funcEndAddr": "0x405507",
            "decompiledFuncCode": "extern char g_6124f8;\nextern char g_6124f9;\n\nint sub_405410()\n{\n    unsigned int v0;  // [bp-0x70]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long v2;  // [bp-0x60]\n    unsigned long v3;  // [bp-0x48]\n    unsigned long v5;  // rdx\n    unsigned int v6;  // esi\n    unsigned int v7;  // r14d\n    unsigned long long v8;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n\n    v3 = v5;\n    if (((char)v6 & 64) != 0)\n    {\n        v0 = 16;\n        v1 = stack_base + 8;\n        v2 = stack_base + -88;\n    }\n    if (g_6124f9 == 0)\n    {\n        v7 = sub_405b30();\n        if (v7 < 0)\n        {\n            g_6124f8 = g_6124f9;\n            g_6124f9 = 1;\n        }\n        else\n        {\n            close(v7);\n            g_6124f9 = 1;\n            *((unsigned long long *)&g_6124f8) = (unsigned int)(sub_409d40() & 1);\n        }\n    }\n    if ((unsigned int)v8 >= 0 && g_6124f8 == 0)\n    {\n        sub_405860();\n        return v11;\n    }\n    if ((unsigned int)v8 < 0 || g_6124f8 != 0)\n    {\n        v8 = (unsigned int)sub_405b30();\n        return v12;\n    }\n}\n"
        },
        {
            "funcName": "sub_405d20",
            "funcStartAddr": "0x405d20",
            "funcEndAddr": "0x40668d",
            "decompiledFuncCode": "int sub_405d20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404120",
            "funcStartAddr": "0x404120",
            "funcEndAddr": "0x404544",
            "decompiledFuncCode": "extern unsigned int g_40c9b8;\nextern unsigned int g_40c9e0;\nextern unsigned int g_40ca08;\nextern unsigned int g_40ca68;\nextern unsigned int g_40d209;\nextern unsigned int g_40d218;\nextern unsigned int g_6122b0;\nextern unsigned long long g_6123b8;\nextern char g_6123c1;\nextern char g_6123c2;\nextern unsigned int g_6123c8;\nextern unsigned long long g_6123e8;\nextern unsigned int g_6124d8;\n\nint sub_404120()\n{\n    unsigned int v0;  // [bp-0x40]\n    char v1;  // [bp-0x3c]\n    char v2;  // [bp-0x38]\n    unsigned long long|char v3;  // [bp-0x34]\n    unsigned short v4;  // [bp-0x2c]\n    unsigned long long v6;  // rcx\n    unsigned long long *v7;  // rbp\n    unsigned long long v9;  // rax\n    unsigned long long v14;  // rax\n    unsigned int v15;  // ebx\n    unsigned long long v21;  // rbp\n    unsigned int v22;  // r13d\n    unsigned long long v23;  // rax\n    void *v27;  // r12\n    unsigned int *v29;  // rbx\n    unsigned long long v30;  // rax\n    unsigned short v35;  // dx\n    unsigned long long v42;  // rdi\n\n    v7 = v6;\n    if (g_6122b0 != 0 && g_6123e8 >= (int)g_6122b0)\n    {\n        while (true)\n        {\n            sub_402f30();\n            if ((int)g_6122b0 > g_6123e8)\n            {\n                break;\n            }\n        }\n    }\n    if (!(g_6123c1 == 0))\n    {\n        v9 = sub_403f30();\n        if (v9 != 0)\n        {\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    else if (g_6123c2 != 0)\n    {\n        sub_403f30();\n    }\n    if (g_6123c1 == 0 || v9 != 0)\n    {\n        sub_402f30();\n        if (pipe((unsigned int)&v1) == 0)\n        {\n            sub_409d40();\n            while (true)\n            {\n                v14 = fork();\n                v15 = v14;\n                if ((unsigned int)v14 >= 0)\n                {\n                    break;\n                }\n                if (*(__errno_location()) != 11)\n                {\n                    break;\n                }\n                if (g_6123e8 == 0)\n                {\n                    break;\n                }\n                sub_402f30();\n            }\n            if (!(v15 != -1))\n            {\n                error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40d209, 0x5));\n            }\n            else if (v15 != 0)\n            {\n                close(*((int *)&v2));\n                v21 = (unsigned int)sub_408fe0();\n                if (!(v21 != 4))\n                {\n                    close(*((int *)&v1));\n                    waitpid(v15, (unsigned int)&v3, 0x0);\n                    if (v0 != 7)\n                    {\n                        if (v0 != 2)\n                        {\n                            exit(0x7e); /* do not return */\n                        }\n                        exit(0x7f); /* do not return */\n                    }\n                    v30 = 0;\n                }\n                else if (v21 != -1)\n                {\n                    if (v21 != 0)\n                    {\n                        error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ca68, 0x5));\n                    }\n                }\n                if (v21 == -1)\n                {\n                    close(*((int *)&v1));\n                    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ca08, 0x5));\n                }\n                if (v21 == 0)\n                {\n                    sub_4031a0();\n                }\n                if (v21 == 0 || v21 == -1)\n                {\n                    close(*((int *)&v1));\n                    v30 = 1;\n                }\n                if (v21 == 0 || v0 == 7)\n                {\n                    return v30;\n                }\n            }\n            else\n            {\n                close(*((int *)&v1));\n                g_6123c8 = 0;\n                sub_405550();\n                v22 = sub_4031a0();\n                v23 = snprintf(NULL, 0x0, \"%u\", v22);\n                v27 = malloc(v23 + 1);\n                v29 = __errno_location();\n                if (v27 != 0)\n                {\n                    snprintf(v27, v23 + 1, \"%u\", v22);\n                    if (g_6123b8 != 0 && setenv(g_6123b8, (unsigned int)v27, 0x1) < 0)\n                    {\n                        error(0x0, *(v29), (unsigned long long)dcgettext(0x0, 0x40c9e0, 0x5));\n                    }\n                    free(v27);\n                }\n                else\n                {\n                    error(0x0, *(v29), (unsigned long long)dcgettext(0x0, 0x40d218, 0x5));\n                }\n                if (g_6124d8 == 0)\n                {\n                    v4 = 108;\n                    v3 = 7815273878500238383;\n                    close(0x0);\n                    if (open(&v3, 0x0, v35) < 0)\n                    {\n                        sub_408c90();\n                        error(0x0, *(v29), \"%s\");\n                    }\n                }\n                if (sub_405070() != 0)\n                {\n                    *(v29) = 7;\n                }\n                while (true)\n                {\n                    write(*((int *)&v2), v29, 0x4);\n                    while (true)\n                    {\n                        close(*((int *)&v2));\n                        if (*(v29) != 7)\n                        {\n                            error(0x0, *(v29), \"%s\");\n                            if (*(v29) == 2)\n                            {\n                                v42 = 127;\n                            }\n                        }\n                        if (*(v29) == 7 || *(v29) != 2)\n                        {\n                            v42 = 126;\n                        }\n                        _exit(v42);\n                        execvp(*(v7), (unsigned int)v7);\n                        if (*(v29) != 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40c9b8, 0x5));\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404700",
            "funcStartAddr": "0x404700",
            "funcEndAddr": "0x404703",
            "decompiledFuncCode": "int sub_404700()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ba40",
            "funcStartAddr": "0x40ba40",
            "funcEndAddr": "0x40bbf0",
            "decompiledFuncCode": "extern unsigned int g_40f520[4];\n\nint sub_40ba40()\n{\n    char v0;  // [bp-0x58]\n    unsigned long long v1;  // [bp-0x54]\n    char v2;  // [bp-0x4c]\n    char *v3;  // [bp-0x48]\n    unsigned long|unsigned long long v4;  // [bp-0x40]\n    char v5;  // [bp-0x38]\n    unsigned int v6;  // [bp-0x34]\n    char *v9;  // rdi\n    char *v10;  // rdx\n    unsigned int v11;  // eax\n    char v12;  // al\n    unsigned long long v13;  // rax\n    unsigned long long v16;  // rbx\n    char *v17;  // rdi\n    unsigned long long v18;  // rax\n\n    if ((unsigned long long)__ctype_get_mb_cur_max() <= 1)\n    {\n        v16 = strlen(v17);\n    }\n    else\n    {\n        v3 = v9;\n        v16 = 0;\n        v0 = 0;\n        v1 = 0;\n        v2 = 0;\n        while (true)\n        {\n            if (v0 == 0)\n            {\n                v10 = v3;\n                v11 = *(v3);\n                v12 = (unsigned long long)*(v3) >> 5;\n                if (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0)\n                {\n                    v4 = 1;\n                    v5 = 1;\n                    v6 = *(v10);\n                }\n                else\n                {\n                    v13 = mbsinit((unsigned int)&v1);\n                    if (v13 != 0)\n                    {\n                        v0 = 1;\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n            }\n            if (v0 != 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) == 0 && v13 != 0)\n            {\n                __ctype_get_mb_cur_max();\n                sub_409040();\n                v4 = (unsigned int)sub_40b170();\n            }\n            if (v4 != -1 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) == 0 || v0 != 0) && (v0 != 0 || v13 != 0))\n            {\n                if (v4 != -2)\n                {\n                    if (v4 == 0)\n                    {\n                        if (*(v3) != 0)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                        else if (v6 != 0)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                    }\n                    if ((*(v3) == 0 || v4 != 0) && (v6 == 0 || v4 != 0))\n                    {\n                        v5 = 1;\n                        if (mbsinit((unsigned int)&v1) != 0)\n                        {\n                            v0 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v5 = 0;\n                    v4 = strlen(v3);\n                }\n                if (v4 == 0)\n                {\n                    v4 = 1;\n                }\n            }\n            if (v4 == -1 && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) == 0 || v0 != 0) && (v0 != 0 || v13 != 0))\n            {\n                v4 = 1;\n                v5 = 0;\n            }\n            if (v6 == 0 && (v0 == 0 || v4 != -1) && (v0 == 0 || v4 != -2) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v4 != -1) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v4 != -2) && (v0 == 0 || *(v3) == 0 || v4 != 0) && (*(v3) == 0 || ((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v4 != 0) && (((char)((unsigned long long)g_40f520[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v0 != 0 || v13 != 0))\n            {\n                break;\n            }\n            if (...)\n            {\n                v3 = &v3[v4];\n                v16 = 1;\n                v2 = 0;\n            }\n        }\n    }\n    v18 = v16;\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x408fb1",
            "decompiledFuncCode": "int sub_408fa0()\n{\n}\n"
        },
        {
            "funcName": "sub_404d38",
            "funcStartAddr": "0x404d38",
            "funcEndAddr": "0x404d41",
            "decompiledFuncCode": "int sub_404d38()\n{\n}\n"
        },
        {
            "funcName": "sub_40a030",
            "funcStartAddr": "0x40a030",
            "funcEndAddr": "0x40afda",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n    unsigned int field_34;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    struct struct_2 *field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n    unsigned int field_34;\n} struct_1;\n\ntypedef struct struct_3 {\n    char padding_0[1];\n    char field_1;\n} struct_3;\n\nextern unsigned long long g_0;\nextern unsigned int g_40f29c;\nextern unsigned int g_40f2ba;\nextern int512_t g_40f2d5;\nextern unsigned int g_40f2d8;\nextern unsigned int g_40f308;\nextern unsigned int g_40f338;\nextern unsigned int g_40f368;\nextern unsigned int g_40f390;\nextern unsigned int g_40f3b0;\nextern unsigned int g_40f3d0;\nextern unsigned int g_40f400;\nextern unsigned int g_40f428;\nextern unsigned int g_40f458;\nextern unsigned long long g_8;\nextern unsigned long long stderr;\n\nint sub_40a030()\n{\n    unsigned int|char *|char [3] v0;  // [bp-0x98]\n    unsigned int v1;  // [bp-0x8c]\n    char *v2[3];  // [bp-0x88]\n    unsigned long|unsigned long long|char [3] v3;  // [bp-0x80]\n    unsigned long long|unsigned int v4;  // [bp-0x78]\n    unsigned int v5;  // [bp-0x6c]\n    unsigned int *v6;  // [bp-0x68]\n    unsigned long long|unsigned int|char [3] v7;  // [bp-0x60]\n    unsigned int|char [3] v8;  // [bp-0x58]\n    unsigned int|char v9;  // [bp-0x50]\n    unsigned int v10;  // [bp-0x4c]\n    unsigned long long v11;  // [bp-0x40]\n    struct_0 *v12;  // [bp+0x8]\n    unsigned int v13;  // [bp+0x10]\n    struct_1 *v14;  // r12\n    unsigned long v15;  // rsi\n    char *v16;  // rdx\n    unsigned long long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long v19;  // rdi\n    unsigned long long v20;  // eax\n    char v21[2];  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    char *[3]|unsigned long long * v28;  // rax\n    unsigned long long *v29;  // rdx\n    char *v31[2];  // rax\n    char *v32[2];  // rdi\n    char v33[2];  // rcx\n    unsigned long long *v34;  // rsi\n    unsigned long long v35;  // rcx\n    char *v36;  // rdi\n    char v37[3];  // rdx\n    char v38[2];  // rsi\n    unsigned long long v39;  // cc_dep1\n    unsigned long long v40;  // cc_dep2\n    unsigned long v41;  // d\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // ecx\n    unsigned long long v44;  // rax\n    unsigned long long v46;  // rax\n    char v47;  // al\n    unsigned long long v48;  // rax\n    unsigned int v50;  // eax\n    unsigned long long v51;  // r13\n    unsigned long long|char [2]|char [3] v52;  // r8\n    unsigned long long|unsigned int v53;  // rdx\n    unsigned long long|unsigned long long * v54;  // rdx\n    char v55[3];  // rax\n    unsigned long v56;  // rsi\n    unsigned long v57;  // r9\n    unsigned long|unsigned int v58;  // rbp\n    unsigned long long v59;  // rax\n    unsigned long long v60;  // rax\n    char v61[3];  // r13\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long|unsigned long long * v64;  // rbx\n    char *|unsigned long long v65;  // r15\n    unsigned long long v66;  // r14\n    char v67[2];  // rsi\n    unsigned long long v68;  // r13\n    unsigned long long|unsigned int v69;  // rbp\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rax\n    unsigned long long v74;  // rdi\n    unsigned long long v75;  // r15d\n    char v76[3];  // r13\n    unsigned long long v77;  // rax\n    char v78;  // sil\n    unsigned long long v79;  // rdi\n    void *v80;  // r14\n    char *v81[3];  // rax\n    unsigned int v82;  // ecx\n    unsigned long long v83;  // rax\n    char v84[3];  // rbx\n    unsigned long long v87;  // rbx\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // r13\n    char v90[3];  // rbx\n    char v91[3];  // rax\n    unsigned long long v92;  // rdi\n    struct_3 *v94;  // rax\n    unsigned int v95;  // edx\n    char v98[2];  // r8\n    void *v99;  // rbx\n    char v102[2];  // rbx\n    unsigned long long v106;  // rbx\n    unsigned long long *v107;  // edx\n    unsigned int *v108;  // rax\n    unsigned long long v109;  // rdx\n    char *v111[3];  // rax\n    unsigned long long v112;  // rdx\n    unsigned int v113;  // eax\n    char *v114[3];  // rax\n    unsigned int v115;  // eax\n    unsigned long long v116;  // r13\n    char v117[3];  // r14\n    char *v120;  // r15\n    unsigned long long v122;  // r13\n    char v123;  // r13b\n    unsigned long long v124;  // rax\n    unsigned long v125;  // r14\n    unsigned long long v126;  // rbp\n    char *v127;  // r12\n    unsigned long long v128;  // r15\n    unsigned long long v129;  // rax\n    unsigned long long v130;  // rax\n    unsigned long long v131;  // r13\n    char v132;  // r13b\n    char v133[3];  // r14\n    unsigned long long v134;  // r13\n    unsigned int v135;  // eax\n    unsigned long long v137;  // r14\n    char *v138[3];  // rax\n    unsigned long long v141;  // rbx\n    unsigned long long v143;  // rbx\n    unsigned long long v144;  // rbx\n    char v145[2];  // rdx\n    unsigned long long v146;  // rcx\n    char v147[2];  // rdi\n    char v148;  // cc_dep2\n    unsigned long long v149;  // rax\n\n    v14 = v12;\n    v2 = v15;\n    v0 = v16;\n    v4 = v17;\n    v6 = v18;\n    v1 = *((int *)(v12 + &g_0));\n    if ((unsigned int)v19 > 0)\n    {\n        v14->field_10 = &g_0;\n        v20 = v14->field_0;\n        v58 = v19;\n        if (v14->field_0 == 0)\n        {\n            *((unsigned long long **)&v14->field_0) = &g_0;\n            v20 = &g_0;\n        }\n        else if (v14->field_18 != 0)\n        {\n            v21 = v0;\n            v52 = v14->field_20;\n            v22 = *(v0);\n            if (((char)((unsigned long long)*(v0) - 43) & 253) == 0)\n            {\n                v22 = (char)*((char *)(v21 + &g_0));\n                v0 = v21 + &g_0;\n            }\n        }\n        if (v14->field_0 == 0 || v14->field_18 == 0)\n        {\n            *((unsigned long long *)&v14->field_34) = v20;\n            *((unsigned long long *)&v14->field_30) = v20;\n            v14->field_20 = &g_0;\n            if (v13 != 0)\n            {\n                *((unsigned long long **)&v14->field_2c) = &g_0;\n                v52 = &g_0;\n                v23 = *(v0);\n            }\n            else\n            {\n                v24 = getenv(\"POSIXLY_CORRECT\");\n                if (v24 == 0)\n                {\n                    *((unsigned long long **)&v14->field_2c) = &g_0;\n                    v26 = *(v0);\n                    if (*(v0) == 45)\n                    {\n                        v52 = v14->field_20;\n                    }\n                    else if (v26 != 43)\n                    {\n                        *((unsigned long long **)&v14->field_28) = &g_0;\n                        v52 = v14->field_20;\n                    }\n                    else\n                    {\n                        v52 = v14->field_20;\n                    }\n                }\n                else\n                {\n                    v52 = v14->field_20;\n                    *((unsigned long long **)&v14->field_2c) = &g_0;\n                    v27 = *(v0);\n                }\n            }\n            if (*(v0) == 45 && v13 != 0 || v13 == 0 && v24 == 0 && *(v0) == 45 || v13 == 0 && *(v0) == 45 && v24 != 0)\n            {\n                *((unsigned long long **)&v14->field_28) = &g_0;\n                v0 += &g_0;\n            }\n            if (v13 == 0 || *(v0) != 45)\n            {\n                if ((v13 == 0 || v23 != 43) && (v13 != 0 || *(v0) != 45) && (v13 != 0 || v27 != 43) && (v13 != 0 || v24 != 0))\n                {\n                    *((unsigned long long **)&v14->field_28) = &g_0;\n                }\n                if ((v13 == 0 || v23 == 43) && (v27 == 43 || v24 == 0 || v13 != 0) && (v24 == 0 || v13 != 0 || *(v0) != 45) && (v26 == 43 || v13 != 0 || v24 != 0) && (v13 != 0 || v24 != 0 || *(v0) != 45))\n                {\n                    *((unsigned long long **)&v14->field_28) = &g_0;\n                    v0 += &g_0;\n                }\n            }\n            *((unsigned long long **)&v14->field_18) = &g_0;\n            v22 = *(v0);\n        }\n        v1 = (v22 != 58? v1 : 0);\n        if (v52 == 0 || v52[0] == 0)\n        {\n            v28 = (unsigned long long)v14->field_0;\n            if (v14->field_34 > v14->field_0)\n            {\n                v14->field_34 = v12->field_0;\n            }\n            if (v12->field_0 < v14->field_30)\n            {\n                v14->field_30 = v12->field_0;\n            }\n            if (v14->field_28 == 1)\n            {\n                v29 = (unsigned long long)v14->field_34;\n                if (v14->field_30 != v14->field_34)\n                {\n                    if (v12->field_0 != v12->field_34)\n                    {\n                        sub_409f50();\n                        v29 = (unsigned long long)v14->field_0;\n                    }\n                }\n                else\n                {\n                    if (v12->field_0 != v12->field_34)\n                    {\n                        v14->field_30 = v12->field_0;\n                        v29 = v28;\n                    }\n                }\n                if ((unsigned int)v19 > (unsigned int)v29)\n                {\n                    v31 = v29;\n                    v32 = v2;\n                    while (true)\n                    {\n                        v33 = *((long long *)&((char *)v32)[v31 * &g_8]);\n                        v34 = v31;\n                        v29 = (unsigned int)v31;\n                        if (*((char *)*((long long *)&((char *)v32)[v31 << &g_0])) == 45 && *((char *)(v33 + &g_0)) != 0)\n                        {\n                            v28 = (unsigned long long)v14->field_0;\n                        }\n                        if (*((char *)(v33 + &g_0)) == 0 || *((char *)*((long long *)&((char *)v32)[v31 << &g_0])) != 45)\n                        {\n                            v29 = v34 + &g_0;\n                            v31 += &g_0;\n                            *((unsigned long long **)&v14->field_0) = (unsigned int)v34 + (char *)&g_0;\n                            if ((unsigned int)v58 <= (unsigned int)v31)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (*((char *)(v33 + &g_0)) == 0 || *((char *)*((long long *)&((char *)v32)[v31 << &g_0])) != 45)\n                    {\n                        v28 = v29;\n                    }\n                    else if (*((char *)*((long long *)&((char *)v32)[v31 << &g_0])) == 45 && *((char *)(v33 + &g_0)) != 0)\n                    {\n                        *((unsigned long long **)&v14->field_34) = v29;\n                    }\n                }\n                v28 = v29;\n                *((unsigned long long **)&v14->field_34) = v29;\n            }\n            if ((unsigned int)v58 != (unsigned int)v28)\n            {\n                v35 = &g_0;\n                v36 = \"-\";\n                v37 = *((long long *)&((char *)v2)[v28 * &g_8]);\n                v38 = *((long long *)&((char *)v2)[v28 * &g_8]);\n                while (v35 != 0)\n                {\n                    v35 += -0x1 * &g_0;\n                    v39 = v38[0];\n                    v40 = *(v36);\n                    v36 = &v36[v41];\n                    v38 = &v38[v41];\n                    break;\n                }\n                v42 = (char *)((char)(v39 > v40) + -0x1 * &g_0) + -1 * (v39 < v40);\n                if ((char)v42 == 0)\n                {\n                    v53 = v14->field_30;\n                    v43 = v14->field_34;\n                    v44 = (unsigned int)v28 + (char *)&g_0;\n                    v14->field_0 = v14->field_30;\n                    if (!((unsigned int)v53 != v43))\n                    {\n                        v14->field_30 = v12->field_30;\n                        v53 = v44;\n                    }\n                    else if (v12->field_30 != v12->field_34)\n                    {\n                        sub_409f50();\n                        v53 = v14->field_30;\n                    }\n                    v14->field_34 = v58;\n                    v14->field_0 = v58;\n                }\n                else\n                {\n                    if (v37[0] == 45 && *((char *)(v37 + &g_0)) != 0)\n                    {\n                        v46 = &g_0;\n                        v47 = (unsigned long long)(char)*((char *)(v37 + &g_0)) == 45;\n                        v48 = rax<8> & v38;\n                        v52 = &v37[v48] + &g_0;\n                        v14->field_20 = &v37[v48] + &g_0;\n                    }\n                    if ((*((char *)(v37 + &g_0)) == 0 || v37[0] != 45) && v14->field_28 != 0)\n                    {\n                        v50 = (unsigned long long *)((unsigned int)v28 + (char *)&g_0);\n                        v14->field_10 = v37;\n                        v51 = &g_0;\n                        v14->field_0 = v50;\n                    }\n                }\n            }\n            else\n            {\n                v58 = v14->field_34;\n                v53 = v14->field_30;\n            }\n            if (((unsigned int)v58 == (unsigned int)v28 || (char)v42 == 0) && v53 != v58)\n            {\n                v14->field_0 = v53;\n            }\n        }\n        if ((v37[0] == 45 || v52 != 0) && (v37[0] == 45 || v52[0] != 0) && (v52 != 0 || (unsigned int)v58 != (unsigned int)v28) && (v52 != 0 || (char)v42 != 0) && (v52 != 0 || *((char *)(v37 + &g_0)) != 0) && ((unsigned int)v58 != (unsigned int)v28 || v52[0] != 0) && ((char)v42 != 0 || v52[0] != 0) && (v52[0] != 0 || *((char *)(v37 + &g_0)) != 0))\n        {\n            if (v4 != 0)\n            {\n                v54 = (long long)(int)v14->field_0;\n                v55 = *((long long *)&((char *)v2)[(int)v14->field_0 * &g_8]);\n                v56 = (char)*(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 * &g_8])]);\n                if (*(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) != 45 && (unsigned int)v57 != 0 && *((char *)(v55 + &g_0)) == 0)\n                {\n                    v5 = v12->field_0;\n                    *((char *[3])&v3[0]) = v52;\n                    v59 = strchr(v0, v56);\n                    v52 = v3;\n                    v54 = (int)v5;\n                }\n                if (*(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) == 45 || v59 == 0 && (unsigned int)v57 != 0 || *((char *)(v55 + &g_0)) != 0 && (unsigned int)v57 != 0)\n                {\n                    v60 = v52[0];\n                    v61 = v52;\n                    if (v52[0] != 0 && v60 != 61)\n                    {\n                        do\n                        {\n                            v61 += &g_0;\n                            v63 = v61[0];\n                        }\n                        while (v63 != 61 && (char)v63 != 0);\n                        v62 = v61 - v52;\n                        v5 = v61 - v52;\n                    }\n                    if (v60 == 61 || v52[0] == 0)\n                    {\n                        *((unsigned long long **)&v5) = &g_0;\n                        v62 = &g_0;\n                    }\n                    v64 = v4;\n                    v65 = *((long long *)v4);\n                    if (*((long long *)v4) != 0)\n                    {\n                        *((char *[3])&v8[0]) = v61;\n                        v66 = &g_0;\n                        v10 = v58;\n                        v67 = v52;\n                        v68 = v62;\n                        v69 = &g_0;\n                        v7 = -1;\n                        *((unsigned long long **)&v9) = &g_0;\n                        v3 = &g_0;\n                        while (true)\n                        {\n                            v70 = strncmp(v65, v67, v68);\n                            if (v70 == 0)\n                            {\n                                v71 = strlen(v65);\n                                if (v5 != v71)\n                                {\n                                    v72 = v3;\n                                    if (v3 == 0)\n                                    {\n                                        v3 = v64;\n                                        v64 += 32;\n                                        v65 = *(v64);\n                                        v7 = v69;\n                                        v69 += (char *)&g_0;\n                                    }\n                                    else if (v9 == 0)\n                                    {\n                                        if (*((long long *)(v72 + 16)) == *((long long *)(v64 + 16)) && *((int *)&((char *)&g_8)[v72]) == *((int *)&((char *)&g_8)[v64]) && (unsigned int)v57 == 0 && *((int *)(v72 + 24)) == *((int *)(v64 + 24)))\n                                        {\n                                            v9 = v57;\n                                        }\n                                        if (*((long long *)(v72 + 16)) != *((long long *)(v64 + 16)) || *((int *)&((char *)&g_8)[v72]) != *((int *)&((char *)&g_8)[v64]) || (unsigned int)v57 != 0 || *((int *)(v72 + 24)) != *((int *)(v64 + 24)))\n                                        {\n                                            if (v66 != 0)\n                                            {\n                                                *((unsigned long long *)v66) = v64;\n                                                *((unsigned long long *)&((char *)&g_8)[v66]) = v66;\n                                                v66 = malloc(0x10);\n                                            }\n                                            else\n                                            {\n                                                if (v66 != 0)\n                                                {\n                                                    v74 = v66;\n                                                    while (true)\n                                                    {\n                                                        v66 = *((long long *)&((char *)&g_8)[v66]);\n                                                        free(v74);\n                                                        v74 = v66;\n                                                        if (v66 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                                *((unsigned long long **)&v9) = &g_0;\n                                            }\n                                        }\n                                    }\n                                }\n                                else\n                                {\n                                    v75 = v69;\n                                    v76 = v8;\n                                    v58 = v10;\n                                    if (v66 != 0 || v9 != 0)\n                                    {\n                                        v79 = v66;\n                                        if (v66 != 0)\n                                        {\n                                            while (true)\n                                            {\n                                                v80 = *((long long *)&((char *)&g_8)[v79]);\n                                                free(v79);\n                                                v79 = v80;\n                                                if (v80 == 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    v54 = (unsigned long long)v14->field_0;\n                                    v7 = v75;\n                                    v3 = v64;\n                                }\n                            }\n                            if (v70 != 0 || v3 != 0 && v5 != v71)\n                            {\n                                v64 = v4 + 32;\n                                v65 = *(v64);\n                                v69 = &g_0;\n                            }\n                            if (*(v64) == 0 || v70 == 0)\n                            {\n                                if (*(v64) == 0 && v70 != 0 || v3 == 0 && v70 != 0 || v3 == 0 && *(v64) == 0 && v5 != v71 || *(v64) == 0 && v3 != 0 && v5 != v71)\n                                {\n                                    v77 = (char)v9;\n                                    v76 = v8;\n                                    v58 = v10;\n                                    v78 = v66 != &g_0;\n                                    v54 = (long long)(int)v14->field_0;\n                                    if (v78 == 0 && v3 == 0 && (char)v9 == 0)\n                                    {\n                                        break;\n                                    }\n                                    if (v78 != 0 || (char)v9 != 0)\n                                    {\n                                        if (v1 != 0)\n                                        {\n                                            if (v78 != 0)\n                                            {\n                                                v11 = v66;\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f2d8, 0x5));\n                                                v88 = v3;\n                                                while (true)\n                                                {\n                                                    fprintf(stderr, \" '--%s'\", (unsigned int)*((long long *)v88));\n                                                    if (v11 == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v88 = *((long long *)v11);\n                                                }\n                                                fputc(0xa, stderr);\n                                            }\n                                            else if (v77 != 0)\n                                            {\n                                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f29c, 0x5));\n                                            }\n                                            if (v77 != 0 || v78 != 0)\n                                            {\n                                                v102 = v14->field_20;\n                                                *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                                                *((unsigned long long **)(v14 + &g_8)) = &g_0;\n                                                v106 = &v102[strlen(v14->field_20)];\n                                                v14->field_20 = v106;\n                                            }\n                                        }\n                                        if (v1 == 0 || v77 == 0 && v78 == 0)\n                                        {\n                                            v84 = v14->field_20;\n                                            v0 = v12->field_0;\n                                            *((unsigned long long **)(v14 + &g_8)) = &g_0;\n                                            v87 = &v84[strlen(v14->field_20)];\n                                            v14->field_20 = v87;\n                                            *((unsigned long long **)&v14->field_0) = v0 + (char *)&g_0;\n                                            if (v66 == 0)\n                                            {\n                                                break;\n                                            }\n                                            v92 = v66;\n                                            while (true)\n                                            {\n                                                v99 = *((long long *)&((char *)&g_8)[v92]);\n                                                free(v92);\n                                                v92 = v99;\n                                                if (v99 == 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((v78 == 0 || v70 == 0) && (v78 == 0 || v5 == v71) && (*(v64) == 0 || v5 == v71) && (v70 == 0 || (char)v9 == 0) && ((char)v9 == 0 || v5 == v71) && (v70 == 0 || v3 != 0) && (v5 == v71 || v3 != 0))\n                                {\n                                    v81 = v54 + &g_0;\n                                    *((unsigned long long **)&v14->field_0) = (unsigned int)v54 + (char *)&g_0;\n                                    v82 = *((int *)&((char *)&g_8)[v3]);\n                                    if (v76[0] != 0)\n                                    {\n                                        if (v82 != 0)\n                                        {\n                                            v89 = v76 + &g_0;\n                                            v14->field_10 = v89;\n                                        }\n                                        else\n                                        {\n                                            if (v1 != 0)\n                                            {\n                                                v94 = *((long long *)((char *)v2 + v81 * &g_8 - &g_8));\n                                                if (*((char *)(v94 + &g_0)) != 45)\n                                                {\n                                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f338, 0x5));\n                                                }\n                                                else\n                                                {\n                                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f308, 0x5));\n                                                }\n                                            }\n                                            v51 = 63;\n                                            v14->field_20 = v12->field_20 + strlen(v14->field_20);\n                                            *((int *)(v14 + &g_8)) = *((int *)(v3 + 24));\n                                        }\n                                    }\n                                    else\n                                    {\n                                        if (v82 == 1)\n                                        {\n                                            if ((unsigned int)v81 < v58)\n                                            {\n                                                v95 = (unsigned long long *)((unsigned int)v54 + (char *)&g_0);\n                                                v14->field_0 = v95;\n                                                v14->field_10 = *((long long *)&((char *)v2)[v81 * &g_8]);\n                                            }\n                                            else\n                                            {\n                                                if (v1 != 0)\n                                                {\n                                                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f368, 0x5));\n                                                }\n                                                v14->field_20 = v12->field_20 + strlen(v14->field_20);\n                                                *((int *)(v14 + &g_8)) = *((int *)(v3 + 24));\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    if (v76[0] == 0 && (unsigned int)v81 < v58 || v76[0] == 0 && v82 != 1 || v76[0] != 0 && v82 != 0)\n                                    {\n                                        v14->field_20 = v12->field_20 + strlen(v14->field_20);\n                                        if (v6 != 0)\n                                        {\n                                            *(v6) = v7;\n                                        }\n                                        v108 = *((long long *)(v3 + 16));\n                                        v51 = (unsigned int)*((int *)(v3 + 24));\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((v70 == 0 || *(v64) != 0) && (v3 == 0 || *(v64) != 0) && (v70 != 0 || v5 != v71) && (v70 != 0 || v3 != 0 || *(v64) != 0))\n                            {\n                                v67 = v14->field_20;\n                            }\n                        }\n                        if (v76[0] == 0 && (v78 == 0 || v70 == 0) && (v78 == 0 || v5 == v71) && (*(v64) == 0 || v70 == 0) && (*(v64) == 0 || v5 == v71) && (v70 == 0 || (char)v9 == 0) && ((char)v9 == 0 || v5 == v71) && (v70 == 0 || v3 != 0) && (v5 == v71 || v3 != 0) && v82 == 1 && (unsigned int)v81 >= v58 && v1 == 0 || v76[0] == 0 && (v78 == 0 || v70 == 0) && (v78 == 0 || v5 == v71) && (*(v64) == 0 || v70 == 0) && (*(v64) == 0 || v5 == v71) && (v70 == 0 || (char)v9 == 0) && ((char)v9 == 0 || v5 == v71) && (v70 == 0 || v3 != 0) && (v5 == v71 || v3 != 0) && v82 == 1 && (unsigned int)v81 >= v58 && v1 != 0)\n                        {\n                            v51 = 58;\n                        }\n                        else if (...)\n                        {\n                            v51 = 63;\n                        }\n                        else if (...)\n                        {\n                            *(v108) = v51;\n                            v51 = &g_0;\n                        }\n                        else if (...)\n                        {\n                            v149 = v51;\n                            return v149;\n                        }\n                    }\n                    if (v1 != 0 && (*(&((char *)&g_0)[*((long long *)&((char *)v2)[v54 << &g_0])]) == 45 || (unsigned int)v57 == 0) && (*(&((char *)&g_0)[*((long long *)&((char *)v2)[v54 << &g_0])]) == 45 || (unsigned int)v57 != 0))\n                    {\n                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f390, 0x5));\n                        v54 = (unsigned long long)v14->field_0;\n                    }\n                }\n                if ((unsigned int)v57 != 0)\n                {\n                    if ((v59 == 0 || *(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) == 45 || *((char *)(v55 + &g_0)) != 0) && *(&((char *)&g_0)[*((long long *)&((char *)v2)[v54 << &g_0])]) != 45)\n                    {\n                        v5 = (unsigned int)v54;\n                        *((struct struct_2 **)&v3[0]) = v14->field_20;\n                        v83 = strchr(v0, v14->field_20->field_0);\n                        v52 = v3;\n                        v54 = v5;\n                    }\n                }\n                else\n                {\n                    if (*(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) == 45 && v1 != 0)\n                    {\n                        v52 = v14->field_20;\n                    }\n                }\n                if (...)\n                {\n                    v111 = (long long)(int)v14->field_0;\n                    if (*((char *)(v98 + &g_0)) != 0)\n                    {\n                        v113 = (unsigned long long *)(v12->field_0 + (char *)&g_0);\n                        v14->field_10 = v90;\n                        v14->field_0 = v113;\n                    }\n                    else if (v58 != v12->field_0)\n                    {\n                        v14->field_0 = (unsigned int)(unsigned long long *)((long long)(int)v12->field_0 + (char *)&g_0);\n                        v90 = *((long long *)&((char *)v2)[v111 * &g_8]);\n                        v14->field_10 = *((long long *)&((char *)v2)[v111 * &g_8]);\n                    }\n                    else\n                    {\n                        if (v1 != 0)\n                        {\n                            fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f3d0, 0x5));\n                        }\n                        *((unsigned int *)(v14 + &g_8)) = v98[0];\n                        v122 = &g_0;\n                        v123 = *(v0) != 58;\n                        v51 = r13<8> * &g_0 + 58;\n                    }\n                }\n            }\n            if (v4 == 0 || (unsigned int)v57 == 0 && *(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) != 45 || *((char *)(v55 + &g_0)) == 0 && v59 != 0 && *(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) != 45 || v83 != 0 && *(&((char *)&g_0)[*((long long *)&((char *)v2)[v54 << &g_0])]) != 45 && (unsigned int)v57 != 0)\n            {\n                v90 = v98 + &g_0;\n                *((char *[2])&v3[0]) = v98;\n                v14->field_20 = v98 + &g_0;\n                v51 = v98[0];\n                v91 = strchr(v0, v98[0]);\n                v98 = v3;\n                if (*((char *)(v3 + &g_0)) == 0)\n                {\n                    *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                }\n            }\n            if ((unsigned int)v57 == 0 && *(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) == 45 && v4 != 0 && v1 != 0 && *(&((char *)&g_0)[*((long long *)&((char *)v2)[v54 << &g_0])]) != 45 || v83 == 0 && *(&((char *)&g_0)[*((long long *)&((char *)v2)[v54 << &g_0])]) != 45 && v4 != 0 && (unsigned int)v57 != 0 && (v59 == 0 || *(&((char *)&g_0)[*((long long *)&((char *)v2)[(int)v14->field_0 << &g_0])]) == 45 || *((char *)(v55 + &g_0)) != 0) && v1 != 0)\n            {\n                *((char *[3])&v0[0]) = v52;\n                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f3b0, 0x5));\n                v54 = (unsigned long long)v14->field_0;\n            }\n            if (...)\n            {\n                v107 = v54 + &g_0;\n                v51 = 63;\n                v14->field_20 = &g_40f2d5;\n                *((unsigned long long **)&v14->field_0) = v107;\n                *((unsigned long long **)(v14 + &g_8)) = &g_0;\n            }\n            if (...)\n            {\n                v109 = (char)*((char *)(v91 + &g_0));\n            }\n            if (...)\n            {\n                if (v1 != 0)\n                {\n                    fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f2ba, 0x5));\n                }\n                *((unsigned int *)(v14 + &g_8)) = v98[0];\n                v51 = 63;\n            }\n            if (...)\n            {\n                v112 = (char)*((char *)(v3 + &g_0));\n                if (*((char *)(v91 + &g_0)) != 58)\n                {\n                    v114 = (long long)(int)v14->field_0;\n                    if (v112 != 0)\n                    {\n                        v115 = (unsigned long long *)(v12->field_0 + (char *)&g_0);\n                        v14->field_10 = v90;\n                        v14->field_0 = v115;\n                    }\n                    else\n                    {\n                        if (v58 != v12->field_0)\n                        {\n                            v14->field_0 = (unsigned int)(unsigned long long *)((long long)(int)v12->field_0 + (char *)&g_0);\n                            v14->field_10 = *((long long *)&((char *)v2)[v114 * &g_8]);\n                        }\n                        else\n                        {\n                            if (v1 != 0)\n                            {\n                                fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f3d0, 0x5));\n                            }\n                            *((unsigned int *)(v14 + &g_8)) = v98[0];\n                            v131 = &g_0;\n                            v132 = *(v0) != 58;\n                            v51 = r13<8> * &g_0 + 58;\n                        }\n                    }\n                }\n                else if (v112 != 0)\n                {\n                    v14->field_10 = v90;\n                    *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                }\n                else\n                {\n                    v14->field_10 = &g_0;\n                }\n                v14->field_20 = &g_0;\n            }\n            if (...)\n            {\n                v14->field_20 = &v90[0];\n                v116 = v90[0];\n                v117 = v90;\n                if (v90[0] != 0)\n                {\n                    while (v116 != 61)\n                    {\n                        v117 += &g_0;\n                        v116 = v117[0];\n                        if ((char)v116 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                v120 = *((long long *)v4);\n                if (*((long long *)v4) != 0)\n                {\n                    *((unsigned long long *)&v9) = v116;\n                    v124 = v117 - v90;\n                    *((char *[3])&v7[0]) = v117;\n                    *((unsigned long *)&v8) = v58;\n                    v125 = v117 - v90;\n                    v126 = v4;\n                    v12 = &v14->field_0;\n                    v127 = v120;\n                    v128 = &g_0;\n                    *((unsigned long long **)&v5) = &g_0;\n                    *((unsigned long long **)&v4) = &g_0;\n                    v3 = v124;\n                    while (true)\n                    {\n                        v129 = strncmp(v127, v90, v125);\n                        if (v129 == 0)\n                        {\n                            v130 = strlen(v127);\n                            if (v3 == v130)\n                            {\n                                v133 = v7;\n                                v134 = v9;\n                                v14 = v12;\n                                *((unsigned long long **)&v5) = &g_0;\n                                v128 = v126;\n                            }\n                            else if (v128 != 0)\n                            {\n                                if ((unsigned int)v57 == 0 && *((int *)&((char *)&g_8)[v128]) == *((int *)&((char *)&g_8)[v126]) && *((long long *)(v128 + 16)) == *((long long *)(v126 + 16)))\n                                {\n                                    v4 = (*((int *)(v128 + 24)) == *((int *)(v126 + 24))? v4 : 1);\n                                }\n                                if ((unsigned int)v57 != 0 || *((int *)&((char *)&g_8)[v128]) != *((int *)&((char *)&g_8)[v126]) || *((long long *)(v128 + 16)) != *((long long *)(v126 + 16)))\n                                {\n                                    *((unsigned long long **)&v4) = &g_0;\n                                }\n                            }\n                            else\n                            {\n                                *((unsigned long long **)&v5) = &g_0;\n                                v128 = v126;\n                            }\n                        }\n                        if (v3 != v130 || v129 != 0)\n                        {\n                            v126 += 32;\n                            v127 = *((long long *)v126);\n                            if (*((long long *)v126) == 0)\n                            {\n                                v134 = v9;\n                                v133 = v7;\n                                v126 = v8;\n                                v14 = v12;\n                                if (v4 == 0)\n                                {\n                                    if (v128 == 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    if (v1 != 0)\n                                    {\n                                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f400, 0x5));\n                                        v90 = v12->field_20;\n                                    }\n                                    v51 = 63;\n                                    *((unsigned long long **)&v14->field_0) = v14->field_0 + (char *)&g_0;\n                                    v141 = &v90[strlen(v90)];\n                                    v14->field_20 = v141;\n                                }\n                            }\n                        }\n                        if ((*((long long *)v126) == 0 || v3 == v130) && (*((long long *)v126) == 0 || v129 == 0) && (v3 == v130 || v4 == 0) && (v129 == 0 || v4 == 0) && (v3 == v130 || v128 != 0) && (v129 == 0 || v128 != 0))\n                        {\n                            v135 = *((int *)&((char *)&g_8)[v128]);\n                            if (v134 != 0)\n                            {\n                                if (v135 != 0)\n                                {\n                                    v137 = v133 + &g_0;\n                                    v14->field_10 = v137;\n                                }\n                                else\n                                {\n                                    if (v1 != 0)\n                                    {\n                                        fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f428, 0x5));\n                                        v90 = v14->field_20;\n                                    }\n                                    v51 = 63;\n                                    v144 = &v90[strlen(v90)];\n                                    v14->field_20 = v144;\n                                }\n                            }\n                            else\n                            {\n                                if (v135 != 1)\n                                {\n                                    v14->field_10 = &g_0;\n                                }\n                                else\n                                {\n                                    v138 = (long long)(int)v14->field_0;\n                                    if (v14->field_0 < v126)\n                                    {\n                                        *((unsigned long long **)&v14->field_0) = (unsigned int)v138 + (char *)&g_0;\n                                        v14->field_10 = *((long long *)&((char *)v2)[v138 * &g_8]);\n                                    }\n                                    else\n                                    {\n                                        if (v1 != 0)\n                                        {\n                                            fprintf(stderr, (unsigned long long)dcgettext(0x0, 0x40f458, 0x5));\n                                        }\n                                        v145 = v14->field_20;\n                                        v146 = -1;\n                                        v147 = v14->field_20;\n                                        while (v146 != 0)\n                                        {\n                                            v146 += -0x1 * &g_0;\n                                            v148 = v147[0];\n                                            v147 = &v147[v41];\n                                            break;\n                                        }\n                                        v14->field_20 = &v145[!(rcx<8>)] - &g_0;\n                                        if (*(v0) != 58)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if (v14->field_0 < v126 && v134 == 0 || v134 == 0 && v135 != 1 || v134 != 0 && v135 != 0)\n                            {\n                                v143 = &v90[strlen(v90)];\n                                v14->field_20 = v143;\n                                if (v6 != 0)\n                                {\n                                    *(v6) = v5;\n                                }\n                                v108 = *((long long *)(v128 + 16));\n                                v51 = (unsigned int)*((int *)(v128 + 24));\n                                if (*((long long *)(v128 + 16)) != 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (...)\n                    {\n                        *(v108) = v51;\n                        v51 = &g_0;\n                    }\n                    else if (...)\n                    {\n                        v51 = 63;\n                    }\n                    else if (...)\n                    {\n                        v51 = 58;\n                    }\n                    else if ((v128 != 0 && v3 != v130 && ((unsigned int)v57 != 0 || *((int *)&((char *)&g_8)[v128]) != *((int *)&((char *)&g_8)[v126]) || *((long long *)(v128 + 16)) != *((long long *)(v126 + 16))) || v128 == 0 && v3 != v130 || (unsigned int)v57 == 0 && *((int *)&((char *)&g_8)[v128]) == *((int *)&((char *)&g_8)[v126]) && *((long long *)(v128 + 16)) == *((long long *)(v126 + 16)) && v128 != 0 && v3 != v130 || v129 != 0) && *((long long *)v126) == 0 && v4 == 0)\n                    {\n                        v14->field_20 = &g_0;\n                        v51 = 87;\n                    }\n                    else if (...)\n                    {\n                        v149 = v51;\n                        return v149;\n                    }\n                }\n            }\n            if (...)\n            {\n                v14->field_20 = &g_0;\n                v51 = 87;\n            }\n            if (...)\n            {\n                v51 = 58;\n                v51 = 63;\n                *(v108) = v51;\n                v51 = &g_0;\n            }\n        }\n    }\n    if ((unsigned int)v19 > 0 && (v52 == 0 || v52[0] == 0) && ((unsigned int)v58 == (unsigned int)v28 || (char)v42 == 0) || (unsigned int)v58 != (unsigned int)v28 && (unsigned int)v19 > 0 && (char)v42 != 0 && (v52 == 0 || v52[0] == 0) && (*((char *)(v37 + &g_0)) == 0 || v37[0] != 45) && v14->field_28 == 0 || (unsigned int)v19 <= 0)\n    {\n        v51 = -18446744069414584321;\n    }\n    v149 = v51;\n    return v149;\n}\n"
        },
        {
            "funcName": "sub_405d00",
            "funcStartAddr": "0x405d00",
            "funcEndAddr": "0x405d1d",
            "decompiledFuncCode": "int sub_405d00()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40bc80",
            "funcStartAddr": "0x40bc80",
            "funcEndAddr": "0x40bc98",
            "decompiledFuncCode": "extern int512_t g_6122a8;\n\nint sub_40bc80()\n{\n}\n"
        },
        {
            "funcName": "sub_408d8f",
            "funcStartAddr": "0x408d8f",
            "funcEndAddr": "0x408e00",
            "decompiledFuncCode": "extern uint128_t g_612640;\nextern uint128_t g_612650;\nextern uint128_t g_612660;\nextern unsigned long long g_612670;\n\nint sub_408d8f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_612670;\n    *((uint128_t *)&v0) = g_612640;\n    *((uint128_t *)&v1) = g_612650;\n    *((uint128_t *)&v2) = g_612660;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_408770();\n}\n"
        },
        {
            "funcName": "sub_405aa0",
            "funcStartAddr": "0x405aa0",
            "funcEndAddr": "0x405b24",
            "decompiledFuncCode": "int sub_405aa0()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned int *v6;  // rbp\n    unsigned long long v7;  // r13\n    unsigned long|unsigned int v9;  // r14\n    unsigned long long v10;  // rbx\n\n    if (v2 != 0)\n    {\n        v3 = dirfd(v2);\n        if (v3 <= 2)\n        {\n            v5 = sub_409080();\n            v6 = __errno_location();\n            if (v5 < 0)\n            {\n                v9 = *(v6);\n                v7 = 0;\n            }\n            else\n            {\n                v9 = *(v6);\n                v7 = fdopendir(v5);\n                if (v7 == 0)\n                {\n                    close(v5);\n                }\n            }\n            v10 = v7;\n            closedir();\n            *((unsigned long *)&v6) = v9;\n            return v10;\n        }\n    }\n    if (v2 == 0 || v3 > 2)\n    {\n        v2 = opendir();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_4056d5",
            "funcStartAddr": "0x4056d5",
            "funcEndAddr": "0x4056d7",
            "decompiledFuncCode": "int sub_4056d5()\n{\n}\n"
        },
        {
            "funcName": "sub_408d00",
            "funcStartAddr": "0x408d00",
            "funcEndAddr": "0x408d69",
            "decompiledFuncCode": "int sub_408d00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_408770();\n}\n"
        },
        {
            "funcName": "sub_408f50",
            "funcStartAddr": "0x408f50",
            "funcEndAddr": "0x408f63",
            "decompiledFuncCode": "int sub_408f50()\n{\n}\n"
        },
        {
            "funcName": "sub_402314",
            "funcStartAddr": "0x402314",
            "funcEndAddr": "0x402319",
            "decompiledFuncCode": "int sub_402314()\n{\n}\n"
        },
        {
            "funcName": "sub_409610",
            "funcStartAddr": "0x409610",
            "funcEndAddr": "0x40967a",
            "decompiledFuncCode": "extern unsigned int g_40eb72;\nextern unsigned int g_40eb9d;\nextern unsigned int g_40edf8;\n\nint sub_409610()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    printf((unsigned long long)dcgettext(0x0, 0x40eb72, 0x5));\n    printf((unsigned long long)dcgettext(0x0, 0x40eb9d, 0x5));\n    dcgettext(0x0, 0x40edf8, 0x5);\n}\n"
        },
        {
            "funcName": "sub_409e80",
            "funcStartAddr": "0x409e80",
            "funcEndAddr": "0x409ebb",
            "decompiledFuncCode": "int sub_409e80()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_409ef0();\n    }\n}\n"
        },
        {
            "funcName": "sub_4042d2",
            "funcStartAddr": "0x4042d2",
            "funcEndAddr": "0x4042d7",
            "decompiledFuncCode": "int sub_4042d2()\n{\n}\n"
        },
        {
            "funcName": "sub_403790",
            "funcStartAddr": "0x403790",
            "funcEndAddr": "0x403898",
            "decompiledFuncCode": "extern unsigned int g_40d18a;\nextern char g_6122b4;\nextern char g_6123b0;\nextern char g_6123c0;\nextern unsigned long long g_612438;\nextern unsigned long long g_612450;\nextern unsigned long long g_6124a8;\nextern unsigned long long g_6124d0;\nextern unsigned long long g_6124e0;\nextern unsigned long long g_6124e8;\n\nint sub_403790()\n{\n    unsigned long v0;  // [bp-0x38]\n    unsigned int v1;  // [bp-0x1c]\n    char *v3;  // rbx\n    unsigned long long v4;  // rbp\n    unsigned long long v5;  // rdx\n    unsigned long long v7;  // rbx\n    unsigned long long v8;  // rax\n\n    v3 = g_6124e0;\n    if (g_6123b0 == 0)\n    {\n        while (true)\n        {\n            v4 = (unsigned int)_IO_getc(g_6124e8);\n            if ((unsigned int)v4 == -1)\n            {\n                v5 = g_6124e0;\n                g_6123b0 = 1;\n                if (g_6124e0 == v3)\n                {\n                    break;\n                }\n                *(v3) = 0;\n            }\n            else if (g_6123c0 == (unsigned int)v4)\n            {\n                g_6124d0 = g_6124d0 + 1;\n                v5 = g_6124e0;\n                *(v3) = 0;\n            }\n            else if (v3 < g_612438 - 1 - g_6124a8 + g_6124e0)\n            {\n                v3 = &v3[1];\n                *((unsigned long long *)&v3[-1]) = v4;\n            }\n            else\n            {\n                sub_403740();\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d18a, 0x5));\n            }\n            if ((unsigned int)v4 == -1 || g_6123c0 == (unsigned int)v4)\n            {\n                v7 = &v3[1 + -1 * v5];\n                v8 = v7;\n                if (g_612450 != 0)\n                {\n                    break;\n                }\n                v1 = v8;\n                v0 = g_6122b4;\n                sub_4047a0();\n                return v1;\n            }\n        }\n        if ((unsigned int)v4 == -1)\n        {\n            v8 = -18446744069414584321;\n        }\n        else if ((unsigned int)v4 == -1 && g_6124e0 != v3 || g_6123c0 == (unsigned int)v4 && (unsigned int)v4 != -1)\n        {\n            return v8;\n        }\n    }\n    v8 = -18446744069414584321;\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_403ea5",
            "funcStartAddr": "0x403ea5",
            "funcEndAddr": "0x403eaa",
            "decompiledFuncCode": "int sub_403ea5()\n{\n}\n"
        },
        {
            "funcName": "sub_408c40",
            "funcStartAddr": "0x408c40",
            "funcEndAddr": "0x408c4a",
            "decompiledFuncCode": "int sub_408c40()\n{\n}\n"
        },
        {
            "funcName": "sub_405840",
            "funcStartAddr": "0x405840",
            "funcEndAddr": "0x40585d",
            "decompiledFuncCode": "int sub_405840()\n{\n    unsigned long long v1;  // rax\n    void *v2;  // rdi\n\n    v1 = sub_405740();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    free(v2);\n    sub_4098a0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408e40",
            "funcStartAddr": "0x408e40",
            "funcEndAddr": "0x408eb3",
            "decompiledFuncCode": "int sub_408e40()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_408770();\n}\n"
        },
        {
            "funcName": "sub_4059f0",
            "funcStartAddr": "0x4059f0",
            "funcEndAddr": "0x4059f8",
            "decompiledFuncCode": "extern char g_612518;\n\nint sub_4059f0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_612518 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408f80",
            "funcStartAddr": "0x408f80",
            "funcEndAddr": "0x408f92",
            "decompiledFuncCode": "int sub_408f80()\n{\n}\n"
        },
        {
            "funcName": "sub_40b130",
            "funcStartAddr": "0x40b130",
            "funcEndAddr": "0x40b146",
            "decompiledFuncCode": "int sub_40b130()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40b070();\n}\n"
        },
        {
            "funcName": "sub_40bc98",
            "funcStartAddr": "0x40bc98",
            "funcEndAddr": "0x40bcb8",
            "decompiledFuncCode": "extern unsigned long long g_611e30;\n\nint sub_40bc98()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_611e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405b30",
            "funcStartAddr": "0x405b30",
            "funcEndAddr": "0x405b76",
            "decompiledFuncCode": "int sub_405b30()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_409090();\n}\n"
        },
        {
            "funcName": "sub_408fc0",
            "funcStartAddr": "0x408fc0",
            "funcEndAddr": "0x408fd6",
            "decompiledFuncCode": "int sub_408fc0()\n{\n}\n"
        },
        {
            "funcName": "sub_402f00",
            "funcStartAddr": "0x402f00",
            "funcEndAddr": "0x402f2a",
            "decompiledFuncCode": "extern unsigned int g_40bce8;\n\nint sub_402f00()\n{\n    dcgettext(0x0, 0x40bce8, 0x5);\n}\n"
        },
        {
            "funcName": "sub_40b1a0",
            "funcStartAddr": "0x40b1a0",
            "funcEndAddr": "0x40b283",
            "decompiledFuncCode": "int sub_40b1a0()\n{\n    unsigned long long v1;  // rdx\n    void *|char v2;  // dil\n    unsigned long|char v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while ((v2 & 7) != 0 && v1 != 1 && *((char *)v2) != (char)v3);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if (*((char *)(v6 - 1)) == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v3 == *((char *)v2) && v1 != 0 && (v2 & 7) != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_4031a0",
            "funcStartAddr": "0x4031a0",
            "funcEndAddr": "0x4032a6",
            "decompiledFuncCode": "int sub_4031a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40b900",
            "funcStartAddr": "0x40b900",
            "funcEndAddr": "0x40b978",
            "decompiledFuncCode": "extern unsigned long long g_6126c0[4];\n\nint sub_40b900()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rcx\n    unsigned long long *v4;  // rcx\n\n    if (v1 != 0 && *((int *)(v1 - 4)) == 336984906)\n    {\n        v2 = v1 - ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) * 257;\n        v3 = g_6126c0[v1 + -257 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)];\n        if (g_6126c0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] != 0)\n        {\n            if (g_6126c0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] != v1)\n            {\n                while (true)\n                {\n                    v2 = *((long long *)(v3 - 16));\n                    if (*((long long *)(v3 - 16)) != 0)\n                    {\n                        if (v1 != v2)\n                        {\n                            v3 = v2;\n                        }\n                        else\n                        {\n                            v4 = v3 - 16;\n                        }\n                    }\n                }\n                if (v1 == v2 && *((long long *)(v3 - 16)) != 0)\n                {\n                    *(v4) = *((long long *)(v1 - 16));\n                }\n                else if (*((long long *)(v3 - 16)) == 0)\n                {\n                    return v2;\n                }\n            }\n            else\n            {\n                v4 = &g_6126c0[v1 + -257 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)];\n            }\n            *(v4) = *((long long *)(v1 - 16));\n        }\n    }\n    if (v1 == 0 || g_6126c0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] == 0 || g_6126c0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] != v1 || *((int *)(v1 - 4)) != 336984906)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_408770",
            "funcStartAddr": "0x408770",
            "funcEndAddr": "0x40890f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_612318;\nextern uint128_t g_612320;\nextern unsigned int g_612330;\nextern int512_t g_612540;\n\nint sub_408770()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v14;  // rax\n    unsigned long long v15;  // rax\n    uint128_t *v16;  // rbx\n    unsigned long long v17;  // rdx\n    unsigned long v18;  // rdx\n    unsigned long long v20[2];  // rbx\n    void *v21;  // r12\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    unsigned long long v25;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v16 = g_612318;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_612330 <= (unsigned int)v13)\n    {\n        if (g_612318 != 6365984)\n        {\n            v4 = v13 + 1;\n            v15 = sub_4096d0();\n            v17 = v4;\n            g_612318 = v15;\n            v16 = v15;\n        }\n        else\n        {\n            v4 = v13 + 1;\n            v14 = sub_4096d0();\n            v17 = v4;\n            v16 = v14;\n            g_612318 = v14;\n            *(v14) = g_612320;\n        }\n        v18 = (v17 - g_612330) * 16;\n        memset(&v16[(unsigned long long)g_612330], 0x0, v18);\n        g_612330 = (unsigned int)v13 + 1;\n    }\n    v20 = &v16[v13];\n    v21 = v20[1];\n    v6 = v9->field_4 | 1;\n    v2 = v9->field_30;\n    v1 = v9->field_28;\n    v0 = &v9->padding_8;\n    *((unsigned long long [2])&v4) = *(v20);\n    v22 = sub_407760();\n    if (v4 <= v22)\n    {\n        v23 = v22 + 1;\n        v20[0] = v22 + 1;\n        if (v21 != 6366528)\n        {\n            v4 = v23;\n            free(v21);\n            v23 = v4;\n        }\n        v4 = v23;\n        v20[1] = v21;\n        v21 = (unsigned long long)(unsigned int)sub_409680();\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = v8 + 8;\n        sub_407760();\n    }\n    *(v11) = v5;\n    v25 = v21;\n    return v25;\n}\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x40979f",
            "decompiledFuncCode": "int sub_409730() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403740",
            "funcStartAddr": "0x403740",
            "funcEndAddr": "0x40377d",
            "decompiledFuncCode": "extern char g_6122b4;\nextern unsigned int g_612420;\nextern unsigned long long g_612450;\nextern unsigned long long g_612458;\nextern unsigned long long g_612480;\n\nint sub_403740()\n{\n    unsigned long long v1;  // rax\n\n    if (g_612450 == 0 && g_6122b4 == 0)\n    {\n        v1 = g_612458;\n        if (g_612480 != g_612458)\n        {\n            v1 = g_612420;\n        }\n    }\n    if (g_612480 == g_612458 || g_612420 != 0 || g_6122b4 != 0 || g_612450 != 0)\n    {\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_404072",
            "funcStartAddr": "0x404072",
            "funcEndAddr": "0x404077",
            "decompiledFuncCode": "int sub_404072()\n{\n}\n"
        },
        {
            "funcName": "sub_408c20",
            "funcStartAddr": "0x408c20",
            "funcEndAddr": "0x408c31",
            "decompiledFuncCode": "int sub_408c20()\n{\n}\n"
        },
        {
            "funcName": "sub_4047a0",
            "funcStartAddr": "0x4047a0",
            "funcEndAddr": "0x404a0b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[20];\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    char padding_40[8];\n    unsigned long long field_48;\n    unsigned long long field_50;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    unsigned int field_38;\n} struct_1;\n\nextern unsigned int g_40d9a0;\nextern char g_40dad5;\nextern unsigned int g_40dae1;\n\nint sub_4047a0()\n{\n    unsigned long v0;  // [bp+0x8]\n    char *v1;  // rdx\n    struct_0 *v2;  // rdi\n    struct_0 *v3;  // r14\n    struct_1 *v4;  // rsi\n    struct_1 *v5;  // rbx\n    char *v6;  // r13\n    unsigned long long v7;  // rcx\n    unsigned long long v9;  // r9\n    unsigned long long v10;  // r15\n    unsigned long long *v11;  // rdx\n    unsigned long long v12;  // rsi\n    unsigned long long|unsigned long long * v13;  // rax\n    unsigned long long v16;  // rcx\n    char *v17;  // r8\n    char *v19;  // rcx\n    unsigned long long v22;  // rbp\n    unsigned long long v23;  // rdx\n\n    if (v1 != 0)\n    {\n        v3 = v2;\n        v5 = v4;\n        v6 = v1;\n        v10 = v9;\n        if (!((int)v0 != 0))\n        {\n            v4->field_38 = 1;\n            if ((((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18) && v11 >= v5->field_10 || v1 == \"do_not_care\" && v5->field_0 >= v5->field_10) && v6 != \"do_not_care\" || ((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18) && v11 < v5->field_10)\n            {\n                v23 = v3->field_50;\n            }\n        }\n        else if (...)\n        {\n            v22 = v5->field_20;\n        }\n        if (!(v1 != \"do_not_care\"))\n        {\n            v11 = v5->field_0;\n            v12 = v5->field_10;\n            v13 = v5->field_8;\n        }\n        else if (v7 + v9 + v4->field_20 > v2->field_18)\n        {\n            if (v4->field_0 == v2->field_38 || (int)v0 != 0)\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40d9a0, 0x5));\n            }\n        }\n        if ((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0)\n        {\n            sub_404c00();\n        }\n        if ((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 != 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 != 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 != 0)\n        {\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40dae1, 0x5));\n        }\n        if ((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18)\n        {\n            v11 = v4->field_0;\n            if (v4->field_0 == v2->field_20 || (int)v0 == 0 && v2->field_50 == v4->field_0 - v2->field_38 && v2->field_50 != 0)\n            {\n                sub_404c00();\n                v11 = v4->field_0;\n            }\n            v12 = v4->field_10;\n            v13 = v5->field_8;\n        }\n        if (((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18) && v11 >= v5->field_10 || v1 == \"do_not_care\" && v5->field_0 >= v5->field_10)\n        {\n            if (v13 != 0)\n            {\n                v5->field_10 = v12 * 2;\n                v13 = sub_4096d0();\n                v5->field_8 = v13;\n            }\n            else\n            {\n                v5->field_10 = 64;\n                v13 = sub_409680();\n                v5->field_8 = v13;\n            }\n            v11 = v5->field_0;\n        }\n        if ((((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18) && v11 >= v5->field_10 || v1 == \"do_not_care\" && v5->field_0 >= v5->field_10) && v6 == \"do_not_care\" || v1 == \"do_not_care\" && v5->field_0 < v5->field_10)\n        {\n            v5->field_0 = (char *)v11 + 1;\n            *((long long *)((char *)v13 + 0x8 * v11)) = 0;\n        }\n        if ((((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18) && v11 >= v5->field_10 || v1 == \"do_not_care\" && v5->field_0 >= v5->field_10) && v6 != \"do_not_care\" || ((int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 != 0 && v2->field_48 == 0 && v2->field_50 == 0 || (int)v0 == 0 && v4->field_0 != v2->field_38 && v7 + v9 + v4->field_20 > v2->field_18 && v1 != \"do_not_care\" && v2->field_30 == 0 && v2->field_0 == 0 || v1 != \"do_not_care\" && v7 + v9 + v4->field_20 <= v2->field_18) && v11 < v5->field_10)\n        {\n            v16 = v5->field_20;\n            v5->field_0 = (char *)v11 + 1;\n            *((unsigned long long *)((char *)v13 + 0x8 * v11)) = v5->field_18 + v16;\n            if (v17 != 0)\n            {\n                strcpy(v5->field_18 + v16, v17);\n                v16 = v5->field_20 + v10;\n                v5->field_20 = v5->field_20 + v10;\n            }\n            v19 = v16 + v5->field_18;\n            strcpy(v19, v6);\n            v22 = v7 + v5->field_20;\n            v13 = v5->field_0;\n            v5->field_20 = v22;\n        }\n        if (...)\n        {\n            v13 = sub_404c00();\n        }\n        if (...)\n        {\n            v5->field_28 = v22;\n        }\n        if (...)\n        {\n            return v13;\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40b320",
            "funcStartAddr": "0x40b320",
            "funcEndAddr": "0x40b874",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40f2d5;\nextern char g_6126b8[2];\n\nint sub_40b320()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // r12\n    char *v14;  // r13\n    unsigned long long v15;  // r14\n    unsigned long long v16;  // rbp\n    struct_1 *v19;  // r12\n    unsigned short v20;  // dx\n    unsigned int v21;  // r12d\n    void *v23;  // rbx\n    unsigned long long v26;  // rax\n    unsigned int *v27;  // rcx\n    unsigned int v28;  // eax\n    unsigned long v29;  // rax\n    unsigned int *v30;  // rdx\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // rax\n    unsigned long v33;  // rax\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rsi\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rdx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rsi\n    unsigned long long v41;  // r9\n    unsigned long long v42;  // r10\n    unsigned int v43;  // ecx\n    unsigned long long v45;  // r8\n    void *v46;  // rcx\n    unsigned long long v48;  // rcx\n    unsigned int v50;  // edx\n    unsigned long long v53;  // rcx\n    unsigned long long v54;  // rsi\n    char *v55;  // rax\n    unsigned long long v56;  // rdi\n    char *v57;  // rax\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // r13\n    void *v61;  // rdi\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n\n    v9 = g_6126b8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40f2d5 : (unsigned long long)nl_langinfo(0xe));\n    if (g_6126b8 == 0)\n    {\n        v14 = getenv(\"CHARSETALIASDIR\");\n        if (v14 != 0 && *(v14) != 0)\n        {\n            v11 = strlen(v14);\n            v13 = v11;\n            v15 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v14[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v12 = v11 + 15;\n                v13 += 1;\n            }\n            if (v11 == 0 || v14[v11 + -1] == 47)\n            {\n                v16 = malloc(v12);\n                if (v16 != 0)\n                {\n                    memcpy(v16, v14, v15);\n                }\n            }\n        }\n        if (v14 == 0 || *(v14) == 0)\n        {\n            v12 = 116;\n            v13 = 102;\n            v15 = 101;\n            v14 = \"/home/dongkwan/data/scripts/gnu_packages/findutils/findutils-4.6.0_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v14 == 0 || *(v14) == 0 || v11 != 0 && v14[v11 + -1] != 47)\n        {\n            v16 = malloc(v12);\n        }\n        if (v16 == 0 || v16 == 0)\n        {\n            v9 = &g_40f2d5;\n        }\n        if (v16 != 0 && (v14 == 0 || *(v14) == 0 || v11 != 0) && (v14 == 0 || *(v14) == 0 || v14[v11 + -1] != 47))\n        {\n            memcpy(v16, v14, v15);\n            *((char *)(v16 + v15)) = 47;\n        }\n        if (v14 == 0 && v16 != 0 || *(v14) == 0 && v16 != 0 || v11 != 0 && v14[v11 + -1] != 47 && v16 != 0 || v11 == 0 && v14 != 0 && v16 != 0 && *(v14) != 0 || v14[v11 + -1] == 47 && v14 != 0 && v16 != 0 && *(v14) != 0)\n        {\n            v19 = v13 + v16;\n            v19->field_0 = 3347411969557751907;\n            v19->field_c = 115;\n            v19->field_8 = 1634298977;\n            v21 = open(v16, 0x0, v20);\n            if (v21 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v21, \"r\");\n                    while (true)\n                    {\n                        v55 = *((long long *)(v12 + 8));\n                        if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)))\n                        {\n                            *((char **)(v12 + 8)) = &v55[1];\n                            v56 = *(v55);\n                        }\n                        if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) < *((long long *)(v12 + 16)) || (unsigned int)v12 != -1)\n                        {\n                            if ((unsigned int)v12 != 35 && (unsigned int)v12 != 32)\n                            {\n                                ungetc(v12, v12);\n                                v26 = fscanf(v12, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v26 > 1)\n                                {\n                                    v27 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v27 = &v4;\n                                        v28 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v29 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v30 = &v5;\n                                    v31 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v27 + 2) : v27) + -1 * ((v29 + v29 <= v29? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v30 = &v6;\n                                        v32 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v31;\n                                    tmp_56 = (unsigned int)v32 % 0x10000;\n                                    v33 = (unsigned int)(((unsigned int)v32 & 32896) == 0? (unsigned int)(v32 >> 16) : (unsigned int)v32);\n                                    v34 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v30)[2] : v30) + -1 * ((v33 + v33 <= v33? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v30)[2] : v30) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v34 + 2;\n                                        v35 = malloc(v34 + 3);\n                                        v37 = v1;\n                                        v38 = v2;\n                                    }\n                                    else\n                                    {\n                                        v36 = v34 + v0 + 3;\n                                        v0 = v34 + v0 + 2;\n                                        v35 = realloc(NULL, v36);\n                                        v38 = v2;\n                                        v37 = v1;\n                                    }\n                                    if (v35 != 0)\n                                    {\n                                        tmp_1 = -2 - v37;\n                                        v39 = v37 + 1;\n                                        v12 = v0 - v38;\n                                        v40 = tmp_1 + v0 - v38 + v35;\n                                        if ((unsigned int)v39 >= 8)\n                                        {\n                                            *((long long *)v40) = *((long long *)&v3);\n                                            *((long long *)(v40 + v39 - 8)) = *((long long *)&(&v3)[v39 + -8]);\n                                            v41 = v40 + 8 & -8;\n                                            v40 -= v40 + 8 & -8;\n                                            v42 = &(&v3)[-1 * v40];\n                                            v43 = (unsigned int)(v39 + v40) & -8;\n                                            if (v43 >= 8)\n                                            {\n                                                v40 = 0;\n                                                do\n                                                {\n                                                    v45 = v40;\n                                                    v40 = (unsigned int)v40 + 8;\n                                                    *((long long *)(v41 + v45)) = *((long long *)(v42 + v45));\n                                                }\n                                                while ((unsigned int)v40 < (v43 & -8));\n                                            }\n                                        }\n                                        else if ((v39 & 4) != 0)\n                                        {\n                                            *((int *)v40) = *((int *)&v3);\n                                            *((int *)(v40 + v39 - 4)) = *((int *)&(&v3)[v39 + -4]);\n                                        }\n                                        else if ((unsigned int)v39 != 0)\n                                        {\n                                            *((char *)v40) = v3;\n                                            if ((v39 & 2) != 0)\n                                            {\n                                                *((short *)(v40 + v39 - 2)) = *((short *)&(&v3)[v39 + -2]);\n                                            }\n                                        }\n                                        v59 = v38 + 1;\n                                        v46 = v35 + v12 - 1;\n                                        if ((unsigned int)v40 >= 8)\n                                        {\n                                            *((long long *)v46) = *((long long *)&v5);\n                                            v40 = v59;\n                                            *((long long *)&((char *)v46)[v40 + -8]) = *((long long *)&(&v5)[v40 + -8]);\n                                            v12 = v46 + 8 & -8;\n                                            v48 = v46 - (v46 + 8 & -8);\n                                            v50 = (unsigned int)(v40 + v48) & -8;\n                                            if (v50 >= 8)\n                                            {\n                                                v53 = 0;\n                                                do\n                                                {\n                                                    v54 = v53;\n                                                    v53 = (unsigned int)v53 + 8;\n                                                    *((long long *)(v12 + v54)) = *((long long *)&(&v5)[v54 + -1 * v48]);\n                                                }\n                                                while ((unsigned int)v53 < (v50 & -8));\n                                            }\n                                        }\n                                        else if (((char)v40 & 4) != 0)\n                                        {\n                                            *((int *)v46) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v46)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v40 != 0)\n                                        {\n                                            *((char *)v46) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v46)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v35;\n                                        v55 = *((long long *)(v12 + 8));\n                                    }\n                                    else\n                                    {\n                                        v60 = v12;\n                                        v9 = &g_40f2d5;\n                                        v10 = (tmp_10 == 0? &g_40f2d5 : tmp_10);\n                                        free(NULL);\n                                        fclose(v60);\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v12 == 35)\n                            {\n                                do\n                                {\n                                    v57 = *((long long *)(v12 + 8));\n                                    if (*((long long *)(v12 + 8)) < *((long long *)(v12 + 16)))\n                                    {\n                                        *((char **)(v12 + 8)) = &v57[1];\n                                        v58 = *(v57);\n                                        v59 = 1;\n                                    }\n                                    else\n                                    {\n                                        v58 = __uflow(v12);\n                                        v59 = (char)(v58 != -1);\n                                    }\n                                }\n                                while (v58 != 10 && v59 != 0);\n                            }\n                        }\n                        if (*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) && (unsigned int)v12 != 35 && v35 != 0 && v26 > 1 && (unsigned int)v12 != 32)\n                        {\n                            v12 = __uflow(v12);\n                        }\n                        if (((unsigned int)v12 == -1 || (unsigned int)v12 != 32) && ((unsigned int)v12 == 35 || (unsigned int)v12 == -1 || v26 <= 1) && (*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || (unsigned int)v12 != 32) && (v58 == -1 || (unsigned int)v12 == -1 || (unsigned int)v12 != 35) && (v58 == -1 || (unsigned int)v12 != 35 || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16))) && ((unsigned int)v12 == 35 || v26 <= 1 || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16))) && ((unsigned int)v12 == 35 || v26 <= 1 || v35 != 0 || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16))))\n                        {\n                            v12 = v23;\n                            v10 = (tmp_10 == 0? &g_40f2d5 : tmp_10);\n                            fclose(v61);\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) && v35 != 0) && (unsigned int)v12 == -1 || (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 35 && (unsigned int)v12 != 32 && v26 <= 1 || (unsigned int)v12 == 35 && (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && v58 == -1)\n                    {\n                        v9 = &g_40f2d5;\n                    }\n                    else if (((*((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) || *((long long *)(v12 + 8)) >= *((long long *)(v12 + 16)) && v35 != 0) && (unsigned int)v12 == -1 || (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 35 && (unsigned int)v12 != 32 && v26 <= 1 || (unsigned int)v12 == 35 && (unsigned int)(v12 - 9) > 1 && (unsigned int)v12 != 32 && v58 == -1) && v0 != 0 || v35 == 0)\n                    {\n                        free(v16);\n                    }\n                }\n                else\n                {\n                    close(v21);\n                }\n            }\n            v9 = &g_40f2d5;\n            free(v16);\n        }\n        *((char *[2])&g_6126b8[0]) = v9;\n    }\n    v65 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v66 = strcmp((tmp_10 == 0? &g_40f2d5 : tmp_10), v9);\n            if (v66 != 0 && (v65 != 42 || v9[1] != 0))\n            {\n                v67 = strlen(v9);\n                v68 = &((char [2])&v9[v67])[1];\n                v69 = strlen(&((char [2])&v9[v67])[1]);\n                v9 = v68 + v69 + 1;\n                v65 = (char)*((char *)(v68 + v69 + 1));\n                if (v65 == 0)\n                {\n                    break;\n                }\n            }\n            if (v66 == 0 || v65 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x405724",
            "decompiledFuncCode": "extern unsigned int g_40dc89;\nextern unsigned int g_40dca4;\n\nint sub_4055f0()\n{\n    char v0;  // [bp-0x30]\n    unsigned int *v2;  // r12\n    unsigned int *v3;  // r12\n    char *v4;  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // r14\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rbp\n\n    *(v2) = 0;\n    v2 = __errno_location();\n    v7 = 9223372036854775807 + v6;\n    if (v6 > -3)\n    {\n        error(0x1, *(v3), \"%s\");\n    }\n    else if (0x80000000 + v6 <= -18446744069414584321)\n    {\n        if (!(*((char *)*((long long *)&v0)) == 0))\n        {\n            v9 = (unsigned int)sub_408c90();\n            v11 = (unsigned int)sub_408c90();\n            error(0x1, *(v3), (unsigned long long)dcgettext(0x0, 0x40dc89, 0x5));\n        }\n        else if (*((long long *)&v0) == v4)\n        {\n            v10 = (unsigned int)sub_408c90();\n            error(0x1, *(v3), (unsigned long long)dcgettext(0x0, 0x40dca4, 0x5));\n        }\n    }\n    if (v6 > -3 || 0x80000000 + v6 > -18446744069414584321)\n    {\n        *(v3) = 34;\n        error(0x1, 0x22, \"%s\");\n    }\n    if (*((long long *)&v0) != v4 || *((char *)*((long long *)&v0)) == 0)\n    {\n        v6 = strtol(v4, &v0, 0xa);\n        return v8;\n    }\n}\n"
        },
        {
            "funcName": "sub_4051d0",
            "funcStartAddr": "0x4051d0",
            "funcEndAddr": "0x405241",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n} struct_0;\n\nint sub_4051d0()\n{\n    unsigned long long v1;  // rsi\n    struct_0 *v2;  // rbp\n    unsigned int v3;  // edi\n    unsigned int v4;  // ebx\n    unsigned long long v5;  // rax\n    unsigned int *v6;  // rax\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdi\n    unsigned long long v9;  // rdx\n    unsigned long|unsigned int v10;  // rcx\n    unsigned long long v11;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = sub_409d40();\n    if ((v5 & 1) == 0)\n    {\n        v6 = v2->field_10;\n        v7 = v2->field_8;\n        if (v2->field_10 < v2->field_8)\n        {\n            v8 = v2->field_0;\n            v10 = *((int *)(v2->field_0 + v6 * 4));\n            if (*((int *)(v2->field_0 + (v6 << 2))) < v4)\n            {\n                v11 = (char *)v6 + 1;\n                while (true)\n                {\n                    if (v7 != v11)\n                    {\n                        v9 = v11 + 1;\n                        v10 = (unsigned int)*((int *)(v8 + (v11 + 1) * 4 - 4));\n                        if (v4 > *((int *)(v8 + (v11 + 1 << 2) - 4)))\n                        {\n                            v11 = v9;\n                        }\n                        else\n                        {\n                            v2->field_10 = v11;\n                        }\n                    }\n                    else\n                    {\n                        v2->field_10 = v7;\n                    }\n                }\n                if (v7 == v11)\n                {\n                    v2->field_18 = v4;\n                    return -18446744069414584321;\n                }\n            }\n        }\n        if (v2->field_10 >= v2->field_8 || v4 != v10)\n        {\n            v2->field_18 = v4;\n            return -18446744069414584321;\n        }\n    }\n    if ((v5 & 1) != 0 || v2->field_10 < v2->field_8 && v4 == v10 && *((int *)(v2->field_0 + (v6 << 2))) >= v4)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405550",
            "funcStartAddr": "0x405550",
            "funcEndAddr": "0x4055f0",
            "decompiledFuncCode": "extern unsigned int g_40dbd8;\nextern unsigned long long g_612500;\nextern unsigned long long g_612508;\n\nint sub_405550()\n{\n    unsigned long v0;  // [bp-0x38]\n    unsigned long v1;  // [bp-0x30]\n    unsigned long long v2;  // [bp-0x28]\n    unsigned int v3;  // [bp-0x20]\n\n    if (sub_4050e0() < 0)\n    {\n        sub_405260();\n    }\n    v1 = g_612500;\n    v0 = g_612508;\n    v2 = 0;\n    v3 = -1;\n    if (v3 < 0)\n    {\n        return sub_4052b0();\n    }\n    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40dbd8, 0x5));\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408f30",
            "funcStartAddr": "0x408f30",
            "funcEndAddr": "0x408f47",
            "decompiledFuncCode": "int sub_408f30()\n{\n}\n"
        },
        {
            "funcName": "sub_408960",
            "funcStartAddr": "0x408960",
            "funcEndAddr": "0x40896f",
            "decompiledFuncCode": "extern int512_t g_612640;\n\nint sub_408960()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_612640 : v1)) = v2;\n    return &g_612640;\n}\n"
        },
        {
            "funcName": "sub_402eb8",
            "funcStartAddr": "0x402eb8",
            "funcEndAddr": "0x402ef4",
            "decompiledFuncCode": "int sub_402eb8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409080",
            "funcStartAddr": "0x409080",
            "funcEndAddr": "0x40908e",
            "decompiledFuncCode": "int sub_409080()\n{\n}\n"
        },
        {
            "funcName": "sub_409d40",
            "funcStartAddr": "0x409d40",
            "funcEndAddr": "0x409e6c",
            "decompiledFuncCode": "extern unsigned int g_612678;\n\nint sub_409d40()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_612678 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_409d40();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_612678 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_612678 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_409d40();\n        }\n        if ((g_612678 < 0 || *(v12) == 22) && (g_612678 < 0 || (unsigned int)v15 < 0) && (g_612678 < 0 || (unsigned int)v15 >= 0) && (g_612678 == -1 || g_612678 >= 0) && (g_612678 >= 0 || (unsigned int)v15 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_40b110",
            "funcStartAddr": "0x40b110",
            "funcEndAddr": "0x40b125",
            "decompiledFuncCode": "int sub_40b110()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40a030();\n}\n"
        },
        {
            "funcName": "sub_402f30",
            "funcStartAddr": "0x402f30",
            "funcEndAddr": "0x403177",
            "decompiledFuncCode": "extern unsigned int g_40bd10;\nextern unsigned int g_40bd30;\nextern unsigned int g_40bd60;\nextern unsigned int g_40d140;\nextern unsigned int g_40d159;\nextern unsigned int g_6123c8;\nextern unsigned int g_6123cc;\nextern unsigned long long g_6123d8;\nextern unsigned int g_6123e0[2];\nextern unsigned long long g_6123e8;\nextern unsigned long long *g_612488;\n\nint sub_402f30()\n{\n    char v0;  // [bp-0x54]\n    unsigned long v1;  // [bp-0x50]\n    char v2;  // [bp-0x3c]\n    unsigned long v3;  // [bp-0x30]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long long v5;  // [bp-0x20]\n    unsigned long long v6;  // [bp-0x18]\n    unsigned long long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp-0x8]\n    unsigned long v10;  // rax\n    unsigned long long v11;  // r15\n    unsigned long long v12;  // r14\n    unsigned long long v13;  // r13\n    unsigned long long v14;  // r12\n    unsigned long v15;  // rdi\n    unsigned int v16;  // ebx\n    unsigned int v17;  // esi\n    char v18;  // bl\n    unsigned long|unsigned int v19;  // ebx\n    unsigned long long v20;  // rax\n    unsigned int *v21;  // r14\n    unsigned long long v22;  // rdx\n    unsigned long long v23;  // rcx\n    unsigned long|unsigned int v24;  // r13d\n    unsigned long long v25;  // rbx\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // r14\n    unsigned long long v29;  // r15\n    unsigned long long v30;  // rbx\n    unsigned long long v31;  // r12\n    unsigned long long v32;  // r13\n    unsigned long long v33;  // r14\n    unsigned long long v34;  // r15\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // r13\n    unsigned long long v38;  // r14\n    unsigned long long v39;  // r15\n\n    if (g_6123e8 != 0)\n    {\n        v8 = v11;\n        v7 = v12;\n        v6 = v13;\n        v24 = 0;\n        v5 = v14;\n        v4 = stack_base + 0;\n        v3 = v19;\n        v0 = (unsigned int)v15 ^ 1;\n        while (true)\n        {\n            g_6123cc = 0;\n            v16 = 0;\n            v18 = v17 <= v24;\n            v19 = rbx<4> & *((int *)&v0);\n            while (true)\n            {\n                v20 = waitpid(0xffffffff, (unsigned int)&v2, v19);\n                if ((unsigned int)v20 == -1)\n                {\n                    v21 = __errno_location();\n                    if (*(v21) != 4)\n                    {\n                        error(0x1, *(v21), (unsigned long long)dcgettext(0x0, 0x40bd10, 0x5));\n                    }\n                    else\n                    {\n                        v19 = (unsigned int)((char)v15 == 0? 1 : (unsigned int)rbx<8>);\n                    }\n                }\n                else if ((unsigned int)v20 == 0)\n                {\n                    if (v19 != 0)\n                    {\n                        v30 = v3;\n                        v31 = v5;\n                        v32 = v6;\n                        v33 = v7;\n                        v34 = v8;\n                        return v20;\n                    }\n                    v35 = v3;\n                    v36 = v5;\n                    v37 = v6;\n                    v38 = v7;\n                    v39 = v8;\n                    return (unsigned long long)error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40bd30, 0x5));\n                }\n                else\n                {\n                    if ((unsigned int)v20 != g_6123e0[0])\n                    {\n                        v22 = 0;\n                        while (true)\n                        {\n                            v23 = v22 + 1;\n                            v22 += 1;\n                            if (v23 < g_6123d8)\n                            {\n                                if (g_6123e0[v23] == (unsigned int)v20)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                if (v23 == g_6123d8)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if (v23 < g_6123d8 || v23 != g_6123d8)\n                        {\n                            g_6123e0[v23] = 0;\n                            v24 = 1;\n                            g_6123e8 = g_6123e8 - 1;\n                        }\n                        else if (v23 >= g_6123d8)\n                        {\n                            v20 = waitpid(0xffffffff, (unsigned int)&v2, v19);\n                        }\n                    }\n                    else\n                    {\n                        v23 = 0;\n                    }\n                }\n            }\n            g_6123e0[v23] = 0;\n            v24 = 1;\n            g_6123e8 = g_6123e8 - 1;\n            error(0x7c, 0x0, (unsigned long long)dcgettext(0x0, 0x40bd60, 0x5));\n            if ((char)*((int *)&v2) == 127)\n            {\n                v1 = *(g_612488);\n                error(0x7d, 0x0, (unsigned long long)dcgettext(0x0, 0x40d140, 0x5));\n            }\n            else if ((*((int *)&v2) & 127) + 1 > 1)\n            {\n                v1 = *(g_612488);\n                error(0x7d, 0x0, (unsigned long long)dcgettext(0x0, 0x40d159, 0x5));\n            }\n            else\n            {\n                if ((char)(*((int *)&v2) >> 8) != 0)\n                {\n                    g_6123c8 = 123;\n                }\n                v25 = v3;\n                v26 = v5;\n                v27 = v6;\n                v28 = v7;\n                v29 = v8;\n                return (*((int *)&v2) & 127) + 1;\n            }\n        }\n    }\n    else\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_403fa8",
            "funcStartAddr": "0x403fa8",
            "funcEndAddr": "0x403faa",
            "decompiledFuncCode": "int sub_403fa8()\n{\n}\n"
        },
        {
            "funcName": "sub_40b990",
            "funcStartAddr": "0x40b990",
            "funcEndAddr": "0x40b9af",
            "decompiledFuncCode": "int sub_40b990()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n\n    v1 = wcwidth();\n    if ((unsigned int)v1 >= 0)\n    {\n        return v1;\n    }\n    return (unsigned long long)(char)(iswcntrl(v2) == 0);\n}\n"
        },
        {
            "funcName": "sub_40381a",
            "funcStartAddr": "0x40381a",
            "funcEndAddr": "0x40381c",
            "decompiledFuncCode": "int sub_40381a()\n{\n}\n"
        },
        {
            "funcName": "sub_404f80",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x404fa4",
            "decompiledFuncCode": "int sub_404f80()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = v1[1];\n    if (v1[1] > 131071)\n    {\n        v2 = (v1[2] < 131073? 0x20000 : v1[2]);\n    }\n    v1[3] = v2;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4098e0",
            "funcStartAddr": "0x4098e0",
            "funcEndAddr": "0x409d1f",
            "decompiledFuncCode": "int sub_4098e0()\n{\n    char *|char [3] v0;  // [bp-0x50]\n    unsigned int v2;  // edx\n    unsigned long|unsigned long long|unsigned int v3;  // rdi\n    unsigned long v4;  // rbp\n    unsigned long long v5;  // rcx\n    unsigned long long *v6;  // r14\n    char *v7;  // r8\n    unsigned long v9;  // rsi\n    unsigned long long *v10;  // r15\n    unsigned int *v11;  // r12\n    unsigned int *v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rsi\n    unsigned long v15;  // rax\n    unsigned int v16;  // eax\n    unsigned long long v17;  // rax\n    char v18[3];  // r8\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    char v21[3];  // r8\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    char v24;  // sil\n    unsigned long long v25;  // r12\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // r12\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rsi\n    unsigned long long v32;  // rdx\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long|unsigned int v36;  // rdi\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned int v39;  // cc_dep1\n    unsigned int v40;  // cc_dep1\n    unsigned long long v41;  // cc_dep1\n    unsigned int v42;  // cc_dep1\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // r8\n\n    if (v2 <= 36)\n    {\n        v4 = v3;\n        v6 = v5;\n        v10 = (v9 == 0? stack_base + -64 : v9);\n        *(v11) = 0;\n        v11 = __errno_location();\n        v13 = (char)*((char *)v3);\n        v14 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v15 = v3; (*((char *)(v14 + (v13 << 1) + 1)) & 32) != 0; v13 = (char)*((char *)v15))\n        {\n            v15 += 1;\n        }\n        if (v13 != 45)\n        {\n            v33 = strtoul();\n            if (*(v10) != v3)\n            {\n                v16 = *(v12);\n                if ((*(v12) == 0 || v16 == 34) && v7 != 0)\n                {\n                    v12 = (unsigned int)*(v0);\n                    if (*(v0) != 0)\n                    {\n                        *((char **)&v0[0]) = v0;\n                        v19 = strchr(v7, v12);\n                        v18 = v0;\n                    }\n                }\n            }\n            else\n            {\n                v0 = v7;\n                if (v7 != 0)\n                {\n                    v12 = (unsigned long long)(char)*((char *)v4);\n                    if (*((char *)v4) != 0)\n                    {\n                        v33 = 1;\n                        v17 = strchr(v7, (char)*((char *)v3));\n                        v18 = v0;\n                    }\n                }\n            }\n        }\n        if (*(v10) == v3 && *((char *)v4) != 0 && v7 != 0 && v13 != 45 && v17 != 0 || *(v10) != v3 && *(v0) != 0 && v7 != 0 && v13 != 45 && (*(v12) == 0 || v16 == 34) && v19 != 0)\n        {\n            *((char *[3])&v0[0]) = v18;\n            v20 = strchr(v7, 0x30);\n            v21 = v0;\n            if (v20 != 0)\n            {\n                v22 = v21[1];\n                if (v21[1] != 68)\n                {\n                    if (!(v22 != 105))\n                    {\n                        v23 = 0;\n                        v34 = 0x400;\n                        v24 = v21[2] == 66;\n                        v31 = rsi<8> * 2 + 1;\n                    }\n                    else if (v22 != 66)\n                    {\n                        v25 = (unsigned long long)v12 - 66;\n                        switch (v25)\n                        {\n                        case 0:\n                            v31 = 1;\n                        case 3:\n                            v31 = 1;\n                            v34 = 0x400;\n                            v3 = 6;\n                            do\n                            {\n                                v33 = v33 * v34;\n                                if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                                {\n                                    v33 = -1;\n                                }\n                                v42 = v3;\n                                v3 = (unsigned long long)v3 - 1;\n                            }\n                            while (v42 != 1);\n                        case 5: case 37:\n                            v31 = 1;\n                            v34 = 0x400;\n                            v30 = v33 * v34;\n                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>)))\n                            {\n                                v38 = v30 * v34;\n                                v44 = v38 * v34;\n                                v33 = v44;\n                            }\n                            else\n                            {\n                                v33 = -1;\n                            }\n                        case 9: case 41:\n                            v31 = 1;\n                            v32 = 0x400;\n                            v33 = v33 * v32;\n                        case 11: case 43:\n                            v31 = 1;\n                            v34 = 0x400;\n                            v29 = v33 * v34;\n                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>)))\n                            {\n                                v37 = v29 * v34;\n                                v33 = v37;\n                                break;\n                            }\n                            else\n                            {\n                                v33 = -1;\n                                break;\n                            }\n                            v45 = &v21[v31];\n                            *(v10) = v45;\n                        case 14:\n                            v31 = 1;\n                            v34 = 0x400;\n                        case 18: case 50:\n                            v31 = 1;\n                            v34 = 0x400;\n                            v36 = 4;\n                            do\n                            {\n                                v33 = v33 * v34;\n                                if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                                {\n                                    v33 = -1;\n                                }\n                                v43 = v36;\n                                v36 -= 1;\n                            }\n                            while (v43 != 1);\n                        case 23:\n                            v31 = 1;\n                            v34 = 0x400;\n                        case 24:\n                            v31 = 1;\n                            v34 = 0x400;\n                        case 32:\n                            v31 = 1;\n                        case 33:\n                            v31 = 1;\n                            break;\n                        case 53:\n                            v31 = 1;\n                        default:\n                            *(v6) = v33;\n                        }\n                        if (v25 <= 53)\n                        {\n                            v27 = v25;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v31 = 1;\n                v34 = 0x400;\n            }\n        }\n        if ((*(v10) == v3 && *((char *)v4) != 0 && v7 != 0 && v13 != 45 && v17 != 0 || *(v10) != v3 && *(v0) != 0 && v7 != 0 && v13 != 45 && (*(v12) == 0 || v16 == 34) && v19 != 0) && v20 != 0 && v21[1] != 68 && v22 != 105 && v22 == 66 || (*(v10) == v3 && *((char *)v4) != 0 && v7 != 0 && v13 != 45 && v17 != 0 || *(v10) != v3 && *(v0) != 0 && v7 != 0 && v13 != 45 && (*(v12) == 0 || v16 == 34) && v19 != 0) && v20 != 0 && v21[1] == 68)\n        {\n            v31 = 2;\n            v34 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned long long)v12 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                {\n                    v33 *= 0x400;\n                }\n            case 9: case 41:\n                v32 = v34;\n            case 14:\n                v3 = 5;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                    {\n                        v33 = -1;\n                    }\n                    v40 = v3;\n                    v3 = (unsigned long long)v3 - 1;\n                }\n                while (v40 != 1);\n            case 23:\n                v35 = 8;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                    {\n                        v33 = -1;\n                    }\n                    v41 = v35;\n                    v35 -= 1;\n                }\n                while (v41 != 1);\n            case 24:\n                v3 = 7;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                    {\n                        v33 = -1;\n                    }\n                    v39 = v3;\n                    v3 = (unsigned long long)v3 - 1;\n                }\n                while (v39 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>))\n                {\n                    v33 *= 0x200;\n                }\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(rbx<8>, 0x37<8>), Shr(rbx<8>, 0x36<8>), cc_ndep<8>)))\n                {\n                    v33 *= 2;\n                }\n            }\n            if (v26 <= 53)\n            {\n                v28 = v26;\n            }\n        }\n        *(v6) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40b2b0",
            "funcStartAddr": "0x40b2b0",
            "funcEndAddr": "0x40b310",
            "decompiledFuncCode": "int sub_40b2b0()\n{\n    unsigned long long v1;  // r12\n    unsigned int v2;  // edi\n    unsigned int v3;  // ebp\n    void *v4;  // rdi\n    unsigned long long v5;  // rax\n\n    v1 = __fpending();\n    v3 = ferror(v2);\n    v5 = fclose(v4);\n    if (v3 == 0)\n    {\n        if ((unsigned int)v5 != 0 && v1 == 0)\n        {\n            v5 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v5 == 0)\n        {\n            *(__errno_location()) = 0;\n            v5 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v5 != 0 && (v1 != 0 || v3 != 0))\n    {\n        v5 = -18446744069414584321;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_408b80",
            "funcStartAddr": "0x408b80",
            "funcEndAddr": "0x408c15",
            "decompiledFuncCode": "extern struct_0 *g_612318;\nextern unsigned long long g_612320;\nextern unsigned long long g_612328;\nextern unsigned int g_612330;\nextern unsigned long long g_612540;\n\nint sub_408b80()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_612330;\n    if (g_612330 > 1)\n    {\n        v2 = &g_612318[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_612318[(unsigned long long)(g_612330 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_612318->field_8 != 6366528)\n    {\n        v1 = free(g_612318->field_8);\n        g_612320 = 0x100;\n        g_612328 = &g_612540;\n    }\n    if (g_612318 != 6365984)\n    {\n        v1 = free(g_612318);\n        g_612318 = &g_612320;\n    }\n    g_612330 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x405832",
            "decompiledFuncCode": "int sub_405740()\n{\n    void *v1;  // rdi\n    unsigned long long *v3;  // rdx\n    unsigned long long *v4;  // rbp\n    unsigned long v5;  // rsi\n    unsigned int *v7;  // r12\n    unsigned int v8;  // r14d\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // r12\n    unsigned long long|void * v11;  // rax\n    unsigned long long v12;  // rdi\n\n    v4 = v3;\n    v11 = __errno_location();\n    v8 = *(v7);\n    if (v5 != 0)\n    {\n        v9 = *(v4);\n        v7 = v11;\n        if (*(v4) != 0)\n        {\n            v11 = v1;\n            if (*(v3) < v1)\n            {\n                v12 = v9 * 2;\n                if (v9 > v9 << 1)\n                {\n                    v12 = *(v3) * 2;\n                }\n            }\n        }\n        else\n        {\n            v12 = 32;\n        }\n        if (false)\n        {\n            v12 = 16;\n        }\n        if (*(v4) == 0 || v9 <= v9 << 1 && *(v3) < v1)\n        {\n            while (true)\n            {\n                if (v12 < v12)\n                {\n                    v11 = v12 * 2;\n                    if (v12 <= v12 << 1)\n                    {\n                        v12 = v11;\n                        v1 = v5;\n                        if (*(v3) == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    if (*(v3) == 0)\n                    {\n                        break;\n                    }\n                }\n                if (*(v3) != 0 && (v12 > v12 << 1 || v12 >= v12))\n                {\n                    v11 = v1;\n                    break;\n                }\n            }\n            if (*(v3) != 0 && (v12 > v12 << 1 || v12 >= v12))\n            {\n                *(v4) = v12;\n                v11 = realloc(v11, v12);\n            }\n        }\n        if (v11 != 0 && (v9 <= v9 << 1 || *(v4) == 0) && (*(v3) < v1 || *(v4) == 0))\n        {\n            if (v11 == 0)\n            {\n                *(v4) = v12;\n                v11 = malloc(v12);\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (v11 != 0 || *(v4) != 0)\n        {\n            if ((*(v3) < v1 || *(v4) == 0) && (v9 > v9 << 1 || v11 != 0))\n            {\n                *(v4) = v12;\n                v11 = realloc(v11, v12);\n            }\n            if ((*(v3) < v1 || v11 == 0) && (v11 == 0 || v11 == 0) && (v9 <= v9 << 1 || v11 == 0 || *(v4) == 0 || *(v3) >= v1) && (v9 > v9 << 1 || *(v3) >= v1 || v11 != 0))\n            {\n                return 0;\n            }\n        }\n        if (*(v3) < v1 && v11 != 0 || *(v4) == 0 && v11 != 0 || *(v3) >= v1 && v11 != 0 && *(v4) != 0)\n        {\n            *((unsigned int *)v10) = v8;\n            return v11;\n        }\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4098a0",
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x4098cc",
            "decompiledFuncCode": "extern unsigned int g_40eecf;\nextern unsigned int g_6122c0;\n\nint sub_4098a0()\n{\n    dcgettext(0x0, 0x40eecf, 0x5);\n    error(g_6122c0, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_409820",
            "funcStartAddr": "0x409820",
            "funcEndAddr": "0x409838",
            "decompiledFuncCode": "int sub_409820()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    v3 = calloc(v1, v2);\n    if (v3 != 0)\n    {\n        return v3;\n    }\n    sub_4098a0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405050",
            "funcStartAddr": "0x405050",
            "funcEndAddr": "0x40506e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_405050()\n{\n    unsigned long long v1[8];  // rsi\n    struct_0 *v2;  // rdi\n\n    v1[0] = v2->field_38;\n    v1[4] = v1[5];\n    v1[7] = -0x100000000;\n    return -0x100000000;\n}\n"
        },
        {
            "funcName": "sub_4050e0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x40515c",
            "decompiledFuncCode": "int sub_4050e0()\n{\n    unsigned long|unsigned int v2;  // r12d\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    char v5[21];  // rax\n    unsigned long|unsigned long long v6;  // rbx\n    unsigned long long v8;  // rax\n\n    sub_405aa0();\n    if (rbp<8> != 0)\n    {\n        v2 = 0;\n        v6 = -18446744069414584321;\n        while (true)\n        {\n            v5 = readdir();\n            if (v5 == 0)\n            {\n                break;\n            }\n            while (true)\n            {\n                if (v5[2 + 3] == 46)\n                {\n                    v3 = v5[2 + 4];\n                    if (v3 == 0 || v5[2 + 4] == 46)\n                    {\n                        break;\n                    }\n                }\n                v2 = 1;\n                v4 = sub_4055f0();\n                v6 = (unsigned int)((unsigned int)v6 < v4? (unsigned int)v4 : (unsigned int)v6);\n                v5 = readdir();\n                if (v5 == 0)\n                {\n                    break;\n                }\n            }\n            if (v5[2 + 3] == 46)\n            {\n                v5 = readdir();\n            }\n            else if (v5[2 + 3] != 46 || v3 != 0 && v5[2 + 4] != 46)\n            {\n                closedir();\n            }\n        }\n        closedir();\n    }\n    v6 = -18446744069414584321;\n    v8 = v6;\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_40b0d0",
            "funcStartAddr": "0x40b0d0",
            "funcEndAddr": "0x40b0e8",
            "decompiledFuncCode": "int sub_40b0d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40b070();\n}\n"
        },
        {
            "funcName": "sub_405860",
            "funcStartAddr": "0x405860",
            "funcEndAddr": "0x4058b7",
            "decompiledFuncCode": "int sub_405860()\n{\n    void tmp_32;  // tmp #32\n    void tmp_34;  // tmp #34\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rsi\n\n    v1 = sub_409d40();\n    if ((unsigned int)v1 >= 0)\n    {\n        tmp_32 = (unsigned int)v1 | 1;\n        tmp_34 = (unsigned int)v1 & -2;\n        v2 = 0;\n        if (((char)v4 != 0? tmp_32 : tmp_34) != (unsigned int)v1)\n        {\n            v2 = 0 - (unsigned int)(char)(sub_409d40() == -1);\n        }\n    }\n    else\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403720",
            "funcStartAddr": "0x403720",
            "funcEndAddr": "0x40373b",
            "decompiledFuncCode": "extern unsigned int g_6122b0;\n\nint sub_403720()\n{\n    unsigned long long v1;  // rax\n\n    v1 = g_6122b0;\n    if (g_6122b0 > 1)\n    {\n        v1 = g_6122b0 - 1;\n        g_6122b0 = g_6122b0 - 1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409800",
            "funcStartAddr": "0x409800",
            "funcEndAddr": "0x409817",
            "decompiledFuncCode": "int sub_409800()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409680();\n}\n"
        },
        {
            "funcName": "sub_404fb0",
            "funcStartAddr": "0x404fb0",
            "funcEndAddr": "0x40504d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_404fb0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rdi\n    unsigned long long v3[10];  // rsi\n    unsigned long long v4[10];  // rbx\n    unsigned long v5;  // rdx\n\n    v2 = v1->field_18;\n    v3[0] = 0;\n    v3[4] = 0;\n    v3[1] = 0;\n    v3[2] = 0;\n    v3[8] = 0;\n    v3[9] = 0;\n    if (v2 <= 9223372036854773759)\n    {\n        v4 = v3;\n        v4[5] = 0;\n        v4[3] = (unsigned int)sub_409680();\n        v4[4] = 0;\n        v4[7] = -0x100000000;\n        v4[6] = v5;\n        return -0x100000000;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403156",
            "funcStartAddr": "0x403156",
            "funcEndAddr": "0x40315f",
            "decompiledFuncCode": "int sub_403156()\n{\n}\n"
        },
        {
            "funcName": "sub_4036c0",
            "funcStartAddr": "0x4036c0",
            "funcEndAddr": "0x403715",
            "decompiledFuncCode": "int sub_4036c0()\n{\n    unsigned long long v1;  // rbx\n    unsigned int v3;  // ebp\n    unsigned int *v5;  // r12\n    unsigned long long v6;  // rax\n\n    v1 = 0;\n    if (rbp<4> >= 0)\n    {\n        rbp<4> = sub_405410();\n        v1 = fdopen(rbp<4>, \"r\");\n        if (v1 == 0)\n        {\n            close(v3);\n            *(__errno_location()) = *(v5);\n        }\n    }\n    v6 = v1;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_408d70",
            "funcStartAddr": "0x408d70",
            "funcEndAddr": "0x408d7c",
            "decompiledFuncCode": "int sub_408d70()\n{\n}\n"
        },
        {
            "funcName": "sub_408950",
            "funcStartAddr": "0x408950",
            "funcEndAddr": "0x40895f",
            "decompiledFuncCode": "extern int512_t g_612640;\n\nint sub_408950()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_612640 : v1));\n}\n"
        },
        {
            "funcName": "sub_404580",
            "funcStartAddr": "0x404580",
            "funcEndAddr": "0x4045fa",
            "decompiledFuncCode": "extern unsigned int g_40d920;\nextern unsigned int g_40d92d;\nextern unsigned int g_40d93c;\n\nint sub_404580()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v4;  // rbp\n\n    sub_409e80();\n    v4 = dcgettext(0x0, 0x40d92d, 0x5);\n    dcgettext(0x0, 0x40d93c, 0x5);\n    v1 = 0;\n    v0 = dcgettext(0x0, 0x40d920, 0x5);\n    sub_409550();\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_407660",
            "funcStartAddr": "0x407660",
            "funcEndAddr": "0x40773f",
            "decompiledFuncCode": "extern int512_t g_40ddce;\nextern int512_t g_40ddd2;\n\nint sub_407660()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40b320();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40ddce : 4251097);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40ddd2 : 4251093);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4096c0",
            "funcStartAddr": "0x4096c0",
            "funcEndAddr": "0x4096c2",
            "decompiledFuncCode": "int sub_4096c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4040ca",
            "funcStartAddr": "0x4040ca",
            "funcEndAddr": "0x4040cf",
            "decompiledFuncCode": "int sub_4040ca()\n{\n}\n"
        },
        {
            "funcName": "sub_404bdd",
            "funcStartAddr": "0x404bdd",
            "funcEndAddr": "0x404bdf",
            "decompiledFuncCode": "int sub_404bdd()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "findutils_strip-4.6.0_gcc-8.2.0_x86_64_O2_xargs.elf"
}