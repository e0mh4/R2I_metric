{
    "funcInfo": [
        {
            "funcName": "sub_407280",
            "funcStartAddr": "0x407280",
            "funcEndAddr": "0x407298",
            "decompiledFuncCode": "int sub_407280()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_407220();\n}\n"
        },
        {
            "funcName": "sub_4063d0",
            "funcStartAddr": "0x4063d0",
            "funcEndAddr": "0x4063e3",
            "decompiledFuncCode": "int sub_4063d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_4061a0",
            "funcStartAddr": "0x4061a0",
            "funcEndAddr": "0x4061ba",
            "decompiledFuncCode": "int sub_4061a0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4063f0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4038b0",
            "funcStartAddr": "0x4038b0",
            "funcEndAddr": "0x4038b5",
            "decompiledFuncCode": "int sub_4038b0()\n{\n}\n"
        },
        {
            "funcName": "sub_4051c0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x4051d3",
            "decompiledFuncCode": "extern int512_t g_60c480;\n\nint sub_4051c0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60c480 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60c480 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4061c0",
            "funcStartAddr": "0x4061c0",
            "funcEndAddr": "0x4061e1",
            "decompiledFuncCode": "int sub_4061c0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4063f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405480",
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x405492",
            "decompiledFuncCode": "int sub_405480()\n{\n}\n"
        },
        {
            "funcName": "sub_406350",
            "funcStartAddr": "0x406350",
            "funcEndAddr": "0x406367",
            "decompiledFuncCode": "int sub_406350()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4061a0();\n}\n"
        },
        {
            "funcName": "sub_4036b0",
            "funcStartAddr": "0x4036b0",
            "funcEndAddr": "0x4036d4",
            "decompiledFuncCode": "int sub_4036b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rbx\n    unsigned long long v3[6];  // rax\n\n    v2 = v1;\n    v3 = malloc(0x30);\n    if (v3 != 0)\n    {\n        v3[0] = 0;\n        v3[4] = v2;\n        v3[5] = v2;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x40558c",
            "decompiledFuncCode": "int sub_405580()\n{\n}\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x405947",
            "decompiledFuncCode": "int sub_4058e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long *v3;  // rdi\n    unsigned long long v4;  // rdi\n\n    v0 = v2;\n    *(v3) = 0;\n    v4 = &v3[3];\n    *((long long *)(v4 - 16)) = 0;\n    *((long long *)(v4 - 8)) = 0;\n    _obstack_begin();\n    _obstack_begin();\n}\n"
        },
        {
            "funcName": "sub_405380",
            "funcStartAddr": "0x405380",
            "funcEndAddr": "0x40538a",
            "decompiledFuncCode": "int sub_405380()\n{\n}\n"
        },
        {
            "funcName": "sub_4052ab",
            "funcStartAddr": "0x4052ab",
            "funcEndAddr": "0x405371",
            "decompiledFuncCode": "int sub_4052ab()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_403d50();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4061a0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_403d50();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x40559f",
            "decompiledFuncCode": "int sub_405590()\n{\n}\n"
        },
        {
            "funcName": "sub_405780",
            "funcStartAddr": "0x405780",
            "funcEndAddr": "0x40578a",
            "decompiledFuncCode": "int sub_405780()\n{\n}\n"
        },
        {
            "funcName": "sub_403c50",
            "funcStartAddr": "0x403c50",
            "funcEndAddr": "0x403d2f",
            "decompiledFuncCode": "extern int512_t g_4089f6;\nextern int512_t g_4089fa;\n\nint sub_403c50()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_4078a0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4089f6 : 4229633);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4089fa : 4229629);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x40561d",
            "decompiledFuncCode": "int sub_405610()\n{\n}\n"
        },
        {
            "funcName": "sub_4037f0",
            "funcStartAddr": "0x4037f0",
            "funcEndAddr": "0x4037f8",
            "decompiledFuncCode": "extern unsigned long long g_60c368;\n\nint sub_4037f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60c368 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401d80",
            "funcEndAddr": "0x40274e",
            "decompiledFuncCode": "extern unsigned int g_407f70;\nextern unsigned int g_407f9f;\nextern unsigned int g_407fb0;\nextern unsigned int g_407fcb;\nextern unsigned int g_407fe3;\nextern unsigned int g_407fe9;\nextern unsigned int g_408810;\nextern unsigned int g_408880;\nextern unsigned int g_4088b8;\nextern unsigned int g_408900;\nextern unsigned int g_409740;\nextern unsigned int g_409c07;\nextern unsigned int g_60c2bc;\nextern char g_60c318;\nextern unsigned long long g_60c320;\nextern char g_60c328;\nextern void g_60c32c;\nextern char g_60c330;\nextern char g_60c331;\nextern char g_60c332;\nextern char g_60c333;\nextern char g_60c334;\nextern unsigned long long g_60c338;\nextern unsigned long long g_60c340;\nextern unsigned long long g_60c348;\nextern unsigned long long g_60c350;\nextern unsigned long long g_60c358;\nextern unsigned long long g_60c500;\nextern unsigned long long stderr;\nextern unsigned long long stdin;\nextern unsigned long long stdout;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x218]\n    unsigned long v1;  // [bp-0x208]\n    unsigned long|unsigned int * v2;  // [bp-0x200]\n    unsigned long|unsigned int *|unsigned long long|char v3;  // [bp-0x1f8]\n    char v4;  // [bp-0x1ed]\n    unsigned int v5;  // [bp-0x1ec]\n    char v6;  // [bp-0x1e8]\n    unsigned int v7;  // [bp-0x1d0]\n    unsigned long v8;  // [bp-0x1b8]\n    unsigned long long v9;  // [bp-0x158]\n    unsigned long v10;  // [bp-0x150]\n    unsigned long long v12;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v19;  // rax\n    unsigned long v20;  // rdi\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r14\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // rbx\n    void *v26;  // rbx\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    uint128_t v31;  // xmm0\n    unsigned long long v33;  // xmm1lq\n    uint128_t v35;  // xmm1\n    unsigned long long v36;  // xmm1lq\n    unsigned long long v38;  // r14\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rbx\n    unsigned long long v41;  // r14\n    unsigned long long v42;  // r12\n    unsigned long long v43;  // r13\n    char *v44;  // r15\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rax\n    unsigned int v47;  // edi\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // rdx\n    unsigned long long v52;  // rbx\n    unsigned long long v53;  // r12\n    unsigned long|unsigned long long|unsigned int v54;  // r13\n    char *v55;  // r15\n    char *v56;  // rdi\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    unsigned long long v59;  // cc_dep1\n    unsigned long long v60;  // cc_dep2\n    unsigned long v61;  // d\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // rax\n    unsigned long long v65;  // r13\n    unsigned long long v66;  // rax\n    unsigned long v67;  // rax\n    unsigned long long v68;  // r15\n    unsigned long long v69;  // r13\n    unsigned long long v72;  // r15\n    unsigned long long v74;  // rbp\n    unsigned long long v80;  // rax\n    unsigned long long v81;  // r13\n\n    v12 = 0;\n    sub_403bb0();\n    setlocale(0x6, 0x409c07);\n    bindtextdomain(0x407f70, 0x408810);\n    textdomain(0x407f70);\n    sub_407e80();\n    g_60c320 = getpagesize();\n    setvbuf(stdout, NULL, 0x1, 0x0);\n    g_60c331 = 0;\n    g_60c332 = 0;\n    g_60c333 = 0;\n    g_60c334 = 0;\n    g_60c330 = 0;\n    g_60c338 = 0;\n    g_60c340 = 0;\n    g_60c348 = 0;\n    g_60c350 = 0;\n    g_60c358 = 0;\n    while (true)\n    {\n        v16 = sub_4072a0();\n        if ((unsigned int)v16 == -1)\n        {\n            if (g_60c333 == 0 && g_60c331 == 0 && g_60c332 == 0 && g_60c330 == 0 && g_60c334 == 0)\n            {\n                g_60c331 = 1;\n                g_60c333 = 1;\n                g_60c334 = 1;\n            }\n            v19 = (int)g_60c2bc;\n            if (v12 != 0)\n            {\n                if ((unsigned int)v20 <= g_60c2bc)\n                {\n                    v22 = strcmp(v12, \"-\");\n                    if (v22 == 0)\n                    {\n                        v26 = stdin;\n                    }\n                    else\n                    {\n                        v26 = fopen(v12, \"r\");\n                        if (v26 == 0)\n                        {\n                            v27 = (unsigned int)sub_405580();\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x407fb0, 0x5));\n                        }\n                    }\n                    if (v22 == 0 || v26 != 0)\n                    {\n                        v1 = stack_base + -488;\n                        v28 = __fxstat(0x1, fileno(v26), (unsigned int)(stack_base + -488));\n                        if (((unsigned short)v7 & 0xf000) == 0x8000 && v28 == 0)\n                        {\n                            v2 = v8;\n                            sub_403ab0();\n                            v33 = 0x4164000000000000;\n                            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1)\n                            {\n                                sub_403ab0();\n                                v35 = 0;\n                                v36 = 0x3fe0000000000000;\n                                v33 = xmm1<16> * xmm0<16>;\n                            }\n                            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n                            {\n                                sub_4058e0();\n                                v4 = sub_405980();\n                                if (v4 != 0)\n                                {\n                                    v39 = sub_406430();\n                                    if (v39 == 0)\n                                    {\n                                        v52 = v9;\n                                        v3 = v10;\n                                        v41 = (unsigned int)sub_4036b0();\n                                        if (v41 != 0 && v9 != 0)\n                                        {\n                                            v51 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x98<64>, rbx<8>, cc_ndep<8>);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v25 = (unsigned int)sub_405580();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x407f9f, 0x5));\n                    __fprintf_chk(stderr, 0x1, 0x409740, dcgettext(0x0, 0x408880, 0x5));\n                }\n            }\n            else\n            {\n                if ((unsigned int)v20 > g_60c2bc)\n                {\n                    v52 = v20 - v19;\n                    v3 = v21 + v19 * 8;\n                    v24 = (unsigned int)sub_4036b0();\n                    if (v24 != 0)\n                    {\n                        v4 = 0;\n                        v1 = stack_base + -488;\n                    }\n                }\n                else\n                {\n                    v23 = (unsigned int)sub_4036b0();\n                    if (v23 != 0)\n                    {\n                        v4 = 0;\n                        v2 = (unsigned long long)(unsigned int)sub_4061a0();\n                        v3 = &g_60c318;\n                        v1 = stack_base + -488;\n                    }\n                }\n            }\n        }\n        else if ((unsigned int)v16 != 99)\n        {\n            if (v16 <= 99)\n            {\n                if ((unsigned int)v16 == -130)\n                {\n                    sub_403350(); /* do not return */\n                }\n                if ((unsigned int)v16 == 76)\n                {\n                    g_60c330 = 1;\n                }\n                if ((unsigned int)v16 == -131)\n                {\n                    v0 = 0;\n                    sub_406060();\n                    exit(0x0); /* do not return */\n                }\n            }\n            else if ((unsigned int)v16 == 109)\n            {\n                g_60c332 = 1;\n            }\n            else if (v16 > 109)\n            {\n                if ((unsigned int)v16 == 119)\n                {\n                    g_60c333 = 1;\n                }\n                if ((unsigned int)v16 == 128)\n                {\n                    v12 = g_60c500;\n                }\n            }\n            else if ((unsigned int)v16 == 108)\n            {\n                g_60c334 = 1;\n            }\n        }\n        if ((unsigned int)v16 == 99)\n        {\n            g_60c331 = 1;\n        }\n        if ((unsigned int)v16 == -1 && (unsigned int)v20 > g_60c2bc && v12 != 0 || v16 <= 99 && (unsigned int)v16 != 99 && (unsigned int)v16 != 76 && (unsigned int)v16 != -131 && (unsigned int)v16 != -130 && (unsigned int)v16 != -1 || v16 <= 109 && v16 > 99 && (unsigned int)v16 != 99 && (unsigned int)v16 != 109 && (unsigned int)v16 != 108 && (unsigned int)v16 != -1 || v16 > 99 && (unsigned int)v16 != 99 && v16 > 109 && (unsigned int)v16 != 128 && (unsigned int)v16 != 119 && (unsigned int)v16 != 109 && (unsigned int)v16 != -1)\n        {\n            sub_403350(); /* do not return */\n        }\n        if ((unsigned int)v20 <= g_60c2bc && ((unsigned short)v7 & 0xf000) == 0x8000 && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((char)(BinaryOp CmpF & 69) & 1) != 0 || (unsigned int)v20 <= g_60c2bc && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((unsigned short)v7 & 0xf000) != 0x8000 || (unsigned int)v20 <= g_60c2bc && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && v28 != 0)\n        {\n            v38 = (unsigned int)sub_4036e0();\n            if (v38 != 0)\n            {\n                v4 = 0;\n            }\n        }\n        if ((unsigned int)v20 <= g_60c2bc && ((unsigned short)v7 & 0xf000) == 0x8000 && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v4 != 0 && v39 != 0 || (unsigned int)v20 <= g_60c2bc && ((unsigned short)v7 & 0xf000) == 0x8000 && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v4 == 0)\n        {\n            v40 = (unsigned int)sub_405580();\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4088b8, 0x5));\n        }\n        if ((unsigned int)v20 <= g_60c2bc && ((unsigned short)v7 & 0xf000) == 0x8000 && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v4 != 0 && v39 == 0 && v41 != 0 && v9 == 0 || ((unsigned int)v20 <= g_60c2bc && ((unsigned short)v7 & 0xf000) == 0x8000 && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((char)(BinaryOp CmpF & 69) & 1) != 0 || (unsigned int)v20 <= g_60c2bc && v28 == 0 && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && ((unsigned short)v7 & 0xf000) != 0x8000 || (unsigned int)v20 <= g_60c2bc && (unsigned int)v16 == -1 && v12 != 0 && (v22 == 0 || v26 != 0) && v28 != 0) && v38 != 0)\n        {\n            v52 = 0;\n            v2 = (unsigned long long)(unsigned int)sub_4061a0();\n            *(v2) = 1;\n        }\n        if (...)\n        {\n            v2 = (unsigned long long)(unsigned int)sub_4061a0();\n        }\n        if (...)\n        {\n            v50 = g_60c334 + g_60c333 + g_60c332 + g_60c331 + g_60c330;\n            if (g_60c334 + g_60c333 + g_60c332 + g_60c331 + g_60c330 != 1)\n            {\n                v52 = 1;\n            }\n            else\n            {\n                v52 = 1;\n                *(v2) = 1;\n            }\n        }\n        if (...)\n        {\n            v42 = 0;\n            v43 = &v2[2];\n            do\n            {\n                v44 = *((long long *)(v3 + v42 * 8));\n                if (*((long long *)(v3 + (v42 << 3))) != 0)\n                {\n                    v45 = strcmp(v44, \"-\");\n                    if (v45 != 0)\n                    {\n                        v46 = __xstat(0x1, (unsigned int)v44, v43);\n                    }\n                }\n                if (*((long long *)(v3 + (v42 << 3))) == 0 || v45 == 0)\n                {\n                    v46 = __fxstat(0x1, 0x0, v43);\n                }\n                v42 += 1;\n                *((unsigned long long *)(v43 - 8)) = v46;\n                v43 += 152;\n            }\n            while (v52 != v42);\n            v51 = v2;\n            v50 = 1;\n            if (*(v2) <= 0)\n            {\n                v47 = 1;\n                v49 = 0;\n                v48 = 0;\n                do\n                {\n                    if (*((int *)v51) == 0)\n                    {\n                        if (((unsigned short)*((int *)(v51 + 32)) & 0xf000) != 0x8000)\n                        {\n                            v47 = 7;\n                        }\n                        else\n                        {\n                            v49 += *((long long *)(v51 + 56));\n                        }\n                    }\n                    v48 += 1;\n                    v51 += 152;\n                }\n                while (v52 != v48);\n                for (v50 = 1; v49 > 9; v49 = (0 CONCAT v49) % 10)\n                {\n                    v50 += 1;\n                }\n                v50 = (v50 < v47? (unsigned int)v47 : (unsigned int)rcx<8>);\n            }\n        }\n        if (...)\n        {\n            *((unsigned long long *)&g_60c32c) = v50;\n            v53 = 0;\n            v54 = 1;\n            while (true)\n            {\n                v55 = (unsigned long long)(unsigned int)sub_403720();\n                if (v55 == 0)\n                {\n                    break;\n                }\n                if (v12 != 0)\n                {\n                    v56 = \"-\";\n                    v57 = 2;\n                    v58 = v12;\n                    while (v57 != 0)\n                    {\n                        v57 -= 1;\n                        v59 = (char)*((char *)v58);\n                        v60 = *(v56);\n                        v56 = &v56[v61];\n                        v58 += v61;\n                        break;\n                    }\n                    v62 = (v59 > v60) - 0 - (v59 < v60);\n                    if ((char)v62 == 0)\n                    {\n                        v63 = strcmp(v55, \"-\");\n                        if (v63 == 0)\n                        {\n                            v65 = (unsigned int)sub_405580();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x408900, 0x5));\n                        }\n                        else if (*(v55) != 0)\n                        {\n                            if (v52 == 0)\n                            {\n                                v3 = v2;\n                            }\n                        }\n                    }\n                    if (((char)v62 == 0 || *(v55) == 0) && (*(v55) == 0 || v63 == 0 || (char)v62 != 0) && (*(v55) == 0 || v63 != 0 || (char)v62 != 0))\n                    {\n                        v68 = (unsigned int)sub_4037b0();\n                        v69 = dcgettext(0x0, 0x407fe9, 0x5);\n                        sub_405650();\n                        error(0x0, 0x0, \"%s:%lu: %s\");\n                        v54 = 0;\n                    }\n                }\n                else if (*(v55) == 0)\n                {\n                    dcgettext(0x0, 0x407fe9, 0x5);\n                    error(0x0, 0x0, \"%s\");\n                }\n                if (*(v55) != 0 || v12 != 0)\n                {\n                    if ((v12 == 0 || (char)v62 != 0) && (v12 == 0 || *(v55) != 0))\n                    {\n                        v64 = 0;\n                    }\n                    if (v12 == 0 || (char)v62 != 0 && *(v55) != 0 || (char)v62 == 0 && *(v55) != 0 && v63 != 0)\n                    {\n                        if (v52 != 0)\n                        {\n                            v64 = v53 * 152;\n                        }\n                        if (v12 == 0 || (char)v62 != 0 || v52 != 0)\n                        {\n                            v3 = v64 + (char *)v2;\n                            v66 = strcmp(v55, \"-\");\n                            if (v66 == 0)\n                            {\n                                g_60c328 = 1;\n                                v51 = (unsigned int)sub_402a20();\n                            }\n                        }\n                        if (((char)v62 == 0 || v66 != 0) && (v52 == 0 || v66 != 0) && (v66 != 0 || v12 != 0))\n                        {\n                            v67 = open(v55, 0x0, v51);\n                            if (v5 != -1)\n                            {\n                                *((unsigned long *)&v5) = v67;\n                                v3 = sub_402a20();\n                                v51 = v3;\n                            }\n                            if (v5 == -1 || close(v5) != 0)\n                            {\n                                v72 = (unsigned int)sub_405650();\n                                error(0x0, *(__errno_location()), \"%s\");\n                                v51 = 0;\n                            }\n                        }\n                        v54 = (unsigned int)v54 & v51;\n                    }\n                }\n                if ((v63 == 0 || v12 == 0) && ((char)v62 == 0 || v12 == 0) && (*(v55) == 0 || v12 != 0) && (v12 == 0 || *(v55) != 0))\n                {\n                    v54 = 0;\n                }\n                if (v52 == 0)\n                {\n                    *(v2) = 1;\n                }\n                v53 += 1;\n            }\n            if (*((int *)&v6) != 3)\n            {\n                if (*((int *)&v6) == 4)\n                {\n                    v54 = 0;\n                    v74 = (unsigned int)sub_405650();\n                    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x407fcb, 0x5));\n                }\n                else if (*((int *)&v6) != 2)\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else\n                {\n                    if (((char)(v12 == 0) & v54) == 0)\n                    {\n                        break;\n                    }\n                    v54 = (unsigned int)*((int *)&v6);\n                    if (sub_4037b0() != 0)\n                    {\n                        break;\n                    }\n                    g_60c328 = 1;\n                    v54 = (unsigned int)sub_402a20();\n                }\n            }\n        }\n        if (...)\n        {\n            sub_4063f0(); /* do not return */\n        }\n    }\n    if (v4 != 0)\n    {\n        sub_405950();\n    }\n    if (sub_4037b0() > 1)\n    {\n        dcgettext(0x0, 0x407fe3, 0x5);\n        sub_402850();\n    }\n    sub_4037d0();\n    free(v2);\n    if (g_60c328 != 0)\n    {\n        v80 = close(0x0);\n        if (v80 != 0)\n        {\n            error(0x1, *(__errno_location()), \"-\");\n        }\n    }\n    if (v80 == 0 || g_60c328 == 0)\n    {\n        v81 = v54 ^ 1;\n        return v81;\n    }\n}\n"
        },
        {
            "funcName": "sub_4072c0",
            "funcStartAddr": "0x4072c0",
            "funcEndAddr": "0x4072d5",
            "decompiledFuncCode": "int sub_4072c0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_406c50();\n}\n"
        },
        {
            "funcName": "sub_4057f0",
            "funcStartAddr": "0x4057f0",
            "funcEndAddr": "0x4058cf",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[24];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    char padding_40[8];\n    unsigned long long field_48;\n    char padding_50[24];\n    char field_68;\n    char padding_69[31];\n    unsigned long long field_88;\n    unsigned long long field_90;\n    char padding_98[72];\n    unsigned long long field_e0;\n    unsigned long long field_e8;\n} struct_0;\n\nint sub_4057f0()\n{\n    void tmp_19;  // tmp #19\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rcx\n    unsigned long long *v7;  // rdx\n    unsigned long long *v8;  // rdx\n    unsigned long long v9;  // rax\n\n    v2 = v1;\n    if (v1->field_30 == v1->field_28)\n    {\n        v1->field_68 = v1->field_68 | 2;\n    }\n    v3 = v2->field_38;\n    v4 = v1->field_30 + v1->field_48 & !(v2->field_48);\n    v5 = v2->field_20;\n    v2->field_30 = v1->field_30 + v1->field_48 & !(v2->field_48);\n    if (v4 - v5 > v4 - v5)\n    {\n        v2->field_30 = v1->field_38;\n        v4 = v3;\n    }\n    v2->field_28 = v4;\n    v7 = v2->field_88;\n    if (v2->field_90 - v2->field_88 <= 7)\n    {\n        _obstack_newchunk();\n        v7 = v2->field_88;\n    }\n    *(v7) = v1->field_28;\n    v8 = v2->field_e0;\n    tmp_19 = v2->field_e8;\n    v2->field_88 = v2->field_88 + 8;\n    v9 = tmp_19 + -0x1 * v8;\n    if (tmp_19 + -0x1 * v8 <= 7)\n    {\n        v9 = _obstack_newchunk();\n        v8 = v2->field_e0;\n    }\n    *(v8) = v1->field_30 - v1->field_28 - 1;\n    v2->field_e0 = v2->field_e0 + 8;\n    v2->field_0 = v2->field_0 + 1;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405282",
            "funcStartAddr": "0x405282",
            "funcEndAddr": "0x4052ab",
            "decompiledFuncCode": "int sub_405282()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_4077e0",
            "funcStartAddr": "0x4077e0",
            "funcEndAddr": "0x40783c",
            "decompiledFuncCode": "int sub_4077e0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_406430();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407320",
            "funcStartAddr": "0x407320",
            "funcEndAddr": "0x40738f",
            "decompiledFuncCode": "extern unsigned long long g_409c07;\n\nint sub_407320()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_409c07;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_407840() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405170",
            "funcStartAddr": "0x405170",
            "funcEndAddr": "0x40517f",
            "decompiledFuncCode": "extern int512_t g_60c480;\n\nint sub_405170()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60c480 : v1)) = v2;\n    return &g_60c480;\n}\n"
        },
        {
            "funcName": "sub_405390",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x405425",
            "decompiledFuncCode": "extern struct_0 *g_60c298;\nextern unsigned long long g_60c2a0;\nextern unsigned long long g_60c2a8;\nextern unsigned int g_60c2b0;\nextern unsigned long long g_60c380;\n\nint sub_405390()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60c2b0;\n    if (g_60c2b0 > 1)\n    {\n        v2 = &g_60c298[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60c298[(unsigned long long)(g_60c2b0 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60c298->field_8 != 6341504)\n    {\n        v1 = free(g_60c298->field_8);\n        g_60c2a0 = 0x100;\n        g_60c2a8 = &g_60c380;\n    }\n    if (g_60c298 != 6341280)\n    {\n        v1 = free(g_60c298);\n        g_60c298 = &g_60c2a0;\n    }\n    g_60c2b0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4038f0",
            "funcStartAddr": "0x4038f0",
            "funcEndAddr": "0x403934",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_4038f0()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405640",
            "funcStartAddr": "0x405640",
            "funcEndAddr": "0x40564a",
            "decompiledFuncCode": "int sub_405640()\n{\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "0x407700",
            "funcEndAddr": "0x40772d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_allocated_p()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rax\n    unsigned long v3;  // rsi\n\n    v2 = v1->field_8;\n    if (v1->field_8 != 0)\n    {\n        while (true)\n        {\n            if (v3 > v2 && *(v2) >= v3)\n            {\n                return 1;\n            }\n            if (v3 <= v2 || *(v2) < v3)\n            {\n                v2 = v2[1];\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405c00",
            "funcStartAddr": "0x405c00",
            "funcEndAddr": "0x405fa9",
            "decompiledFuncCode": "extern unsigned int g_409738;\nextern unsigned int g_409744;\nextern unsigned int g_40974b;\nextern unsigned int g_40974f;\nextern unsigned int g_40975f;\nextern unsigned int g_409776;\nextern unsigned int g_4097d8;\nextern unsigned int g_4098a8;\nextern unsigned int g_4098c8;\nextern unsigned int g_4098f0;\nextern unsigned int g_409918;\nextern unsigned int g_409948;\nextern unsigned int g_409aa0;\n\nint sub_405c00()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x409738, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x409744, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x409aa0, dcgettext(0x0, 0x40974b, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4097d8, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40974f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40975f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x409776, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x4098a8, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x4098c8, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x4098f0, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x409918, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x409948, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x407740",
            "funcEndAddr": "0x4077a5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[40];\n    char field_50;\n} struct_0;\n\nint _obstack_free()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbp\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v8[2];  // rsi\n\n    v2 = v1;\n    v8 = v3->field_8;\n    v4 = v3;\n    if (v3->field_8 != 0)\n    {\n        while (true)\n        {\n            if (v8 < v2)\n            {\n                v5 = *(v8);\n                if (*(v8) >= v2)\n                {\n                    v4->field_18 = v2;\n                    v4->field_10 = v2;\n                    v4->field_20 = v5;\n                    v4->field_8 = v8;\n                    return v5;\n                }\n            }\n            if (*(v8) < v2 || v8 >= v2)\n            {\n                v6 = v8[1];\n                v4->field_50 = v4->field_50 | 2;\n                v8 = v6;\n                if (v6 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v2 != 0)\n    {\n        abort(); /* do not return */\n    }\n    return sub_407510();\n}\n"
        },
        {
            "funcName": "sub_4051e0",
            "funcStartAddr": "0x4051e0",
            "funcEndAddr": "0x40520b",
            "decompiledFuncCode": "extern char g_60c480;\n\nint sub_4051e0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60c480 : v2);\n    *((int *)(tmp_11? &g_60c480 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60c480;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60c480;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4063f0",
            "funcStartAddr": "0x4063f0",
            "funcEndAddr": "0x406421",
            "decompiledFuncCode": "extern unsigned int g_409acf;\nextern unsigned int g_60c258;\n\nint sub_4063f0()\n{\n    dcgettext(0x0, 0x409acf, 0x5);\n    error(g_60c258, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407220",
            "funcStartAddr": "0x407220",
            "funcEndAddr": "0x407276",
            "decompiledFuncCode": "extern unsigned int g_60c2b4;\nextern unsigned int g_60c2b8;\nextern unsigned int g_60c2bc;\nextern unsigned int g_60c4c0;\nextern unsigned int g_60c4c4;\nextern unsigned int g_60c4c8;\nextern unsigned long long g_60c4d0;\nextern unsigned long long g_60c500;\n\nint sub_407220()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60c4c0 = g_60c2bc;\n    g_60c4c4 = g_60c2b8;\n    v1 = (unsigned int)v2;\n    v0 = &g_60c4c0;\n    g_60c2bc = g_60c4c0;\n    g_60c500 = g_60c4d0;\n    g_60c2b4 = g_60c4c8;\n    return sub_406c50();\n}\n"
        },
        {
            "funcName": "sub_405760",
            "funcStartAddr": "0x405760",
            "funcEndAddr": "0x405773",
            "decompiledFuncCode": "int sub_405760()\n{\n}\n"
        },
        {
            "funcName": "sub_405450",
            "funcStartAddr": "0x405450",
            "funcEndAddr": "0x40545a",
            "decompiledFuncCode": "int sub_405450()\n{\n}\n"
        },
        {
            "funcName": "sub_4037b0",
            "funcStartAddr": "0x4037b0",
            "funcEndAddr": "0x4037c8",
            "decompiledFuncCode": "int sub_4037b0()\n{\n    unsigned long long v1[6];  // rdi\n\n    if (*(v1) != 0)\n    {\n        return v1[1];\n    }\n    return v1[5] - v1[4] >> 3;\n}\n"
        },
        {
            "funcName": "sub_40559f",
            "funcStartAddr": "0x40559f",
            "funcEndAddr": "0x405610",
            "decompiledFuncCode": "extern uint128_t g_60c480;\nextern uint128_t g_60c490;\nextern uint128_t g_60c4a0;\nextern unsigned long long g_60c4b0;\n\nint sub_40559f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60c4b0;\n    *((uint128_t *)&v0) = g_60c480;\n    *((uint128_t *)&v1) = g_60c490;\n    *((uint128_t *)&v2) = g_60c4a0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_404f80();\n}\n"
        },
        {
            "funcName": "sub_4027f1",
            "funcStartAddr": "0x4027f1",
            "funcEndAddr": "0x402848",
            "decompiledFuncCode": "extern char g_60c308;\nextern unsigned long long g_60c310;\n\nint sub_4027f1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60c308 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60c310 >= 0)\n            {\n                break;\n            }\n            g_60c310 = g_60c310 + 1;\n            *((long long *)(6340160 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60c308 = 1;\n        return sub_40279b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403bb0",
            "funcStartAddr": "0x403bb0",
            "funcEndAddr": "0x403c49",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60c370;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403bb0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60c370 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406430",
            "funcStartAddr": "0x406430",
            "funcEndAddr": "0x4064a8",
            "decompiledFuncCode": "int sub_406430()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4064b0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_406270",
            "funcStartAddr": "0x406270",
            "funcEndAddr": "0x4062e8",
            "decompiledFuncCode": "int sub_406270() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4056c0",
            "funcStartAddr": "0x4056c0",
            "funcEndAddr": "0x40572c",
            "decompiledFuncCode": "extern uint128_t g_60c480;\nextern uint128_t g_60c490;\nextern uint128_t g_60c4a0;\nextern unsigned long long g_60c4b0;\n\nint sub_4056c0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60c480;\n    *((uint128_t *)&v1) = g_60c490;\n    *((uint128_t *)&v2) = g_60c4a0;\n    v4 = g_60c4b0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_404f80();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406000",
            "funcStartAddr": "0x406000",
            "funcEndAddr": "0x406059",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_406000()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405c00();\n}\n"
        },
        {
            "funcName": "sub_403350",
            "funcStartAddr": "0x403350",
            "funcEndAddr": "0x4036ad",
            "decompiledFuncCode": "extern unsigned int g_407f55;\nextern unsigned int g_408320;\nextern unsigned int g_408348;\nextern unsigned int g_408390;\nextern unsigned int g_408448;\nextern unsigned int g_408480;\nextern unsigned int g_4085b0;\nextern unsigned int g_4086e0;\nextern unsigned int g_408710;\nextern unsigned int g_408770;\nextern unsigned int g_4087b8;\nextern unsigned int g_4087d8;\nextern unsigned long long g_60c370;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_403350()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v28;  // rax\n    char *v29;  // rdi\n    char *v30;  // rsi\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // cc_dep2\n    unsigned long v34;  // d\n    char *v38;  // rax\n    char *v39;  // rax\n    unsigned long long v40;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x408320, 0x5), g_60c370);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408348, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408390, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408448, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408480, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4085b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4086e0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408710, 0x5), stdout);\n        v0 = \"[\";\n        v28 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v28 = &v2;\n            v29 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v30 = \"wc\";\n            v31 = 3;\n            if ((v32 > v33) - 0 - (v32 < v33) == 0)\n            {\n                break;\n            }\n            while (v31 != 0)\n            {\n                v31 -= 1;\n                v32 = *(v30);\n                v33 = *(v29);\n                v29 = &v29[v34];\n                v30 = &v30[v34];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x407f55, 0x5));\n            v39 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x407f55, 0x5));\n            v38 = setlocale(0x5, 0x0);\n            if (v38 != 0)\n            {\n                v40 = strncmp(v38, \"en_\", 0x3);\n            }\n            if (v38 == 0 || v40 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4087b8, 0x5));\n            }\n        }\n        if ((v3 == 0 || strncmp(v39, \"en_\", 0x3) != 0) && (v3 == 0 || v39 != 0) && (v38 != 0 || v3 != 0) && (v3 != 0 || v40 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408770, 0x5));\n        }\n        if (v3 != 0 || v38 != 0 && v40 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4087b8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4087d8, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407300",
            "funcStartAddr": "0x407300",
            "funcEndAddr": "0x407318",
            "decompiledFuncCode": "int sub_407300()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_406c50();\n}\n"
        },
        {
            "funcName": "sub_405950",
            "funcStartAddr": "0x405950",
            "funcEndAddr": "0x405979",
            "decompiledFuncCode": "int sub_405950()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    _obstack_free();\n    _obstack_free();\n}\n"
        },
        {
            "funcName": "sub_405fe0",
            "funcStartAddr": "0x405fe0",
            "funcEndAddr": "0x406000",
            "decompiledFuncCode": "int sub_405fe0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4036e0",
            "funcStartAddr": "0x4036e0",
            "funcEndAddr": "0x403718",
            "decompiledFuncCode": "int sub_4036e0()\n{\n    unsigned long long v1[5];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = malloc(0x30);\n    if (v1 != 0)\n    {\n        v1[0] = v2;\n        v1[2] = 0;\n        v1[3] = 0;\n        v1[1] = 0;\n        v1[4] = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4074f0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x407505",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_4074f0()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_405160",
            "funcStartAddr": "0x405160",
            "funcEndAddr": "0x40516f",
            "decompiledFuncCode": "extern int512_t g_60c480;\n\nint sub_405160()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60c480 : v1));\n}\n"
        },
        {
            "funcName": "sub_403800",
            "funcStartAddr": "0x403800",
            "funcEndAddr": "0x403808",
            "decompiledFuncCode": "extern char g_60c360;\n\nint sub_403800()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60c360 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4038c0",
            "funcStartAddr": "0x4038c0",
            "funcEndAddr": "0x4038dc",
            "decompiledFuncCode": "int sub_4038c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_403810",
            "funcStartAddr": "0x403810",
            "funcEndAddr": "0x4038ae",
            "decompiledFuncCode": "extern unsigned int g_408955;\nextern unsigned int g_60c258;\nextern char g_60c360;\nextern unsigned long long g_60c368;\n\nint sub_403810()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4077e0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60c360 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x408955, 0x5);\n            if (g_60c368 != 0)\n            {\n                sub_405620();\n                error(0x0, *(v2), \"%s:\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60c360 != 0)\n    {\n        v3 = sub_4077e0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60c360 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60c258);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_405430",
            "funcStartAddr": "0x405430",
            "funcEndAddr": "0x405441",
            "decompiledFuncCode": "int sub_405430()\n{\n}\n"
        },
        {
            "funcName": "sub_4078a0",
            "funcStartAddr": "0x4078a0",
            "funcEndAddr": "0x407df4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_409c07;\nextern char g_60c4f8[2];\n\nint sub_4078a0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_60c4f8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_409c07 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60c4f8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_409c07;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 != 35 && (unsigned int)v26 != 32)\n                        {\n                            ungetc(v26, v10);\n                            v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v28 > 1)\n                            {\n                                v29 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v29 = &v4;\n                                    v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v32 = &v5;\n                                v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v32 = &v6;\n                                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v33;\n                                tmp_56 = (unsigned int)v34 % 0x10000;\n                                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v36 + 2;\n                                    v37 = malloc(v36 + 3);\n                                    v39 = v1;\n                                    v40 = v2;\n                                }\n                                else\n                                {\n                                    v38 = v36 + v0 + 3;\n                                    v0 = v36 + v0 + 2;\n                                    v37 = realloc(NULL, v38);\n                                    v40 = v2;\n                                    v39 = v1;\n                                }\n                                if (v37 != 0)\n                                {\n                                    tmp_1 = -2 - v39;\n                                    v41 = v39 + 1;\n                                    v42 = v0 - v40;\n                                    v43 = tmp_1 + v0 - v40 + v37;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v43) = *((long long *)&v3);\n                                        *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                        v44 = v43 + 8 & -8;\n                                        v43 -= v43 + 8 & -8;\n                                        v45 = &(&v3)[-1 * v43];\n                                        v46 = (unsigned int)(v41 + v43) & -8;\n                                        if (v46 >= 8)\n                                        {\n                                            v43 = 0;\n                                            do\n                                            {\n                                                v48 = v43;\n                                                v43 = (unsigned int)v43 + 8;\n                                                *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                            }\n                                            while ((unsigned int)v43 < (v46 & -8));\n                                        }\n                                    }\n                                    else if ((v41 & 4) != 0)\n                                    {\n                                        *((int *)v43) = *((int *)&v3);\n                                        *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v43) = v3;\n                                        if ((v41 & 2) != 0)\n                                        {\n                                            *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                        }\n                                    }\n                                    v62 = v40 + 1;\n                                    v49 = v37 + v42 - 1;\n                                    if ((unsigned int)v43 >= 8)\n                                    {\n                                        *((long long *)v49) = *((long long *)&v5);\n                                        v43 = v62;\n                                        *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                        v52 = v49 - (v49 + 8 & -8);\n                                        v54 = (unsigned int)(v43 + v52) & -8;\n                                        if (v54 >= 8)\n                                        {\n                                            v57 = 0;\n                                            do\n                                            {\n                                                v58 = v57;\n                                                v57 = (unsigned int)v57 + 8;\n                                                *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                            }\n                                            while ((unsigned int)v57 < (v54 & -8));\n                                        }\n                                    }\n                                    else if (((char)v43 & 4) != 0)\n                                    {\n                                        *((int *)v49) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v43 != 0)\n                                    {\n                                        *((char *)v49) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v37;\n                                    v59 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_409c07;\n                                    v10 = (tmp_10 == 0? &g_409c07 : tmp_10);\n                                    free(NULL);\n                                    sub_406430();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 35 && v28 > 1 && (unsigned int)v26 != 32)\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if ((unsigned int)v26 == 35)\n                        {\n                            do\n                            {\n                                v61 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v61[1];\n                                    v61 = (unsigned int)*(v61);\n                                    v62 = 1;\n                                }\n                                else\n                                {\n                                    v61 = __uflow(v10);\n                                    v62 = (char)((unsigned int)v61 != -1);\n                                }\n                            }\n                            while (v61 != 10 && v62 != 0);\n                        }\n                        if (v61 == -1 && (unsigned int)v26 == 35 || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v28 <= 1 && (unsigned int)v26 != 35 && (unsigned int)v26 != 32)\n                        {\n                            v10 = (tmp_10 == 0? &g_409c07 : tmp_10);\n                            sub_406430();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_409c07;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_409c07;\n            free(v17);\n        }\n        *((char *[2])&g_60c4f8[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_409c07 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "0x407600",
            "funcEndAddr": "0x4076f4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nint _obstack_newchunk()\n{\n    void tmp_23;  // tmp #23\n    void tmp_102;  // tmp #102\n    void tmp_108;  // tmp #108\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    unsigned long v3;  // r13\n    struct_1 *v4;  // rbp\n    char v5;  // al\n    unsigned long v6;  // rsi\n    unsigned long v9;  // rbx\n    unsigned long long v10;  // rcx\n    struct_0 *v11;  // r12\n    unsigned long long v12[2];  // r14\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n\n    v1 = 0;\n    v3 = v2->field_18 - v2->field_10;\n    v4 = v2->field_8;\n    v5 = [D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rsi<8>, Sub(Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE), Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE)), cc_ndep<8>);\n    tmp_23 = v6 + v2->field_18 - v2->field_10 + v2->field_30;\n    tmp_102 = v6 + v2->field_18 - v2->field_10 + v2->field_30 + (v2->field_18 - v2->field_10 >> 3) + 100;\n    tmp_108 = v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0;\n    v9 = (tmp_102 <= (tmp_108? v2->field_0 : tmp_23)? (v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0? v2->field_0 : v6 + v2->field_18 - v2->field_10 + v2->field_30) : tmp_102);\n    if (rax<8> == 0)\n    {\n        v10 = (char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Add(rsi<8>, (Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE) - Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE))), Load(addr=(rdi<8> + 0x30<64>), size=8, endness=Iend_LE), cc_ndep<8>);\n        if (v10 == 0)\n        {\n            v11 = v2;\n            v12 = (unsigned long long)(unsigned int)sub_4074f0();\n            if (v12 != 0)\n            {\n                v11->field_8 = v12;\n                v12[1] = v4;\n                v11->field_20 = (char *)v12 + v9;\n                v12[0] = (char *)v12 + v9;\n                v14 = &((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30);\n                v15 = memcpy(&((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30), v11->field_10, v3);\n                if ((v11->field_50 & 2) == 0)\n                {\n                    v15 = !(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1];\n                    if (v11->field_10 == (!(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1]))\n                    {\n                        v12[1] = v4->field_8;\n                        v15 = sub_407510();\n                    }\n                }\n                v11->field_10 = v14;\n                v11->field_18 = v3 + v14;\n                v11->field_50 = v11->field_50 & 253;\n                return v15;\n            }\n        }\n    }\n    if (v12 == 0 || rax<8> != 0 || v10 != 0)\n    {\n        sub_4074b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406120",
            "funcStartAddr": "0x406120",
            "funcEndAddr": "0x406194",
            "decompiledFuncCode": "extern unsigned int g_409792;\nextern unsigned int g_4097bd;\nextern unsigned int g_4099f0;\n\nint sub_406120()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409792, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4097bd, 0x5));\n    dcgettext(0x0, 0x4099f0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_405ba0",
            "funcStartAddr": "0x405ba0",
            "funcEndAddr": "0x405bfd",
            "decompiledFuncCode": "int sub_405ba0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4064f0",
            "funcStartAddr": "0x4064f0",
            "funcEndAddr": "0x406546",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4064f0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056c3",
            "decompiledFuncCode": "int sub_405650()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404f80();\n}\n"
        },
        {
            "funcName": "sub_406550",
            "funcStartAddr": "0x406550",
            "funcEndAddr": "0x406625",
            "decompiledFuncCode": "int sub_406550()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_407e98",
            "funcStartAddr": "0x407e98",
            "funcEndAddr": "0x407eb8",
            "decompiledFuncCode": "extern unsigned long long g_60be30;\n\nint sub_407e98()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60be30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "0x4077b0",
            "funcEndAddr": "0x4077d4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_memory_used()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rdx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n\n    v2 = v1->field_8;\n    v3 = 0;\n    if (v1->field_8 != 0)\n    {\n        do\n        {\n            v4 = (unsigned long long [2])(*(v2) + -0x1 * v2);\n            v2 = v2[1];\n            v3 += v4;\n        }\n        while (v2 != 0);\n        return v3;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405510",
            "funcStartAddr": "0x405510",
            "funcEndAddr": "0x405579",
            "decompiledFuncCode": "int sub_405510()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404f80();\n}\n"
        },
        {
            "funcName": "sub_402848",
            "funcStartAddr": "0x402848",
            "funcEndAddr": "0x402884",
            "decompiledFuncCode": "int sub_402848() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406200",
            "funcStartAddr": "0x406200",
            "funcEndAddr": "0x406230",
            "decompiledFuncCode": "int sub_406200()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4063f0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4039f0",
            "funcStartAddr": "0x4039f0",
            "funcEndAddr": "0x403a9e",
            "decompiledFuncCode": "double sub_4039f0()\n{\n    uint128_t v0;  // [bp-0x80]\n    char v1;  // [bp-0x78]\n    unsigned long long v2;  // [bp-0x58]\n    unsigned int v3;  // [bp-0x10]\n    unsigned long long v5;  // rax\n    uint128_t|unsigned long long v6;  // xmm0\n    unsigned long long v7;  // rax\n    uint128_t v8;  // xmm0\n    unsigned long long v9;  // xmm0lq\n    uint128_t v10;  // xmm0\n    unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n\n    *((unsigned long long *)&v0) = sysconf(0x55);\n    v5 = sysconf(0x1e);\n    v6 = 0;\n    v6 = (long long)v0;\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v12 = 0;\n        v13 = v5;\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        v7 = sysinfo((unsigned int)&v1);\n        v8 = 0;\n        v9 = 0x4190000000000000;\n        if (v7 != 0)\n        {\n            return xmm0<16>;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v6 = 0;\n            v6 = v2;\n        }\n        else\n        {\n            v10 = 0;\n            v11 = v2 >> 1 | (unsigned int)v2 & 1;\n            v6 = xmm0<16> * 2;\n        }\n        v12 = 0;\n        v13 = v3;\n    }\n    if (v7 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v14 = v6 * v13;\n        return v14;\n    }\n}\n"
        },
        {
            "funcName": "sub_405730",
            "funcStartAddr": "0x405730",
            "funcEndAddr": "0x405739",
            "decompiledFuncCode": "int sub_405730()\n{\n}\n"
        },
        {
            "funcName": "sub_4057d0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x4057e6",
            "decompiledFuncCode": "int sub_4057d0()\n{\n}\n"
        },
        {
            "funcName": "sub_4057b0",
            "funcStartAddr": "0x4057b0",
            "funcEndAddr": "0x4057c1",
            "decompiledFuncCode": "int sub_4057b0()\n{\n}\n"
        },
        {
            "funcName": "sub_4072e0",
            "funcStartAddr": "0x4072e0",
            "funcEndAddr": "0x4072f6",
            "decompiledFuncCode": "int sub_4072e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_407220();\n}\n"
        },
        {
            "funcName": "sub_4039d0",
            "funcStartAddr": "0x4039d0",
            "funcEndAddr": "0x4039e7",
            "decompiledFuncCode": "extern int512_t g_408980;\n\nint sub_4039d0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n\n    v2 = v1;\n    v3 = (char)v1 % 32;\n    return (unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)&g_408980)[4 * (unsigned long long)(unsigned int)(rax<4> & 7)]) >> ((char)v1 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_406370",
            "funcStartAddr": "0x406370",
            "funcEndAddr": "0x40639e",
            "decompiledFuncCode": "int sub_406370()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4063f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "0x4075e0",
            "funcEndAddr": "0x4075f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    char field_50;\n} struct_0;\n\nint _obstack_begin_1()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rcx\n    unsigned long v3;  // r8\n    unsigned long v4;  // r9\n\n    v1->field_50 = v1->field_50 | 1;\n    v1->field_38 = v2;\n    v1->field_40 = v3;\n    v1->field_48 = v4;\n}\n"
        },
        {
            "funcName": "sub_405460",
            "funcStartAddr": "0x405460",
            "funcEndAddr": "0x405476",
            "decompiledFuncCode": "int sub_405460()\n{\n}\n"
        },
        {
            "funcName": "sub_4064b0",
            "funcStartAddr": "0x4064b0",
            "funcEndAddr": "0x4064eb",
            "decompiledFuncCode": "int sub_4064b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4064f0();\n    }\n}\n"
        },
        {
            "funcName": "sub_403970",
            "funcStartAddr": "0x403970",
            "funcEndAddr": "0x4039c1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n    char padding_11[3];\n    unsigned int field_14;\n} struct_0;\n\nint sub_403970()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // rbx\n    void *v6;  // rsi\n    unsigned long long v8;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v3->field_0;\n    if (v6 != &v3[1])\n    {\n        v1->field_0 = v6;\n    }\n    else\n    {\n        v2->field_0 = memcpy(&v1[1], v6, v4->field_8);\n    }\n    v8 = v4->field_10;\n    v2->field_8 = v4->field_8;\n    *((unsigned long long *)&v2->field_10) = v8;\n    if (v8 != 0)\n    {\n        v8 = v4->field_14;\n        v2->field_14 = v4->field_14;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_406630",
            "funcStartAddr": "0x406630",
            "funcEndAddr": "0x406c2e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_2 *field_20;\n} struct_1;\n\nextern unsigned int g_409ae0;\nextern unsigned int g_409b00;\nextern unsigned int g_409b30;\nextern unsigned int g_409b50;\nextern unsigned int g_409b80;\nextern unsigned int g_409bd1;\nextern unsigned long long stderr;\n\nint sub_406630()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_1 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long|unsigned long long * v19;  // rbx\n    unsigned long|unsigned long long|unsigned int v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long|unsigned long long * v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_2 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (*((int *)(v19 + 24)) != *((int *)(v27 + 24)) || *((int *)(v19 + 8)) != *((int *)(v27 + 8)) || v29 != 0 || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409ae0, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409b00, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x409bd1, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 = &v40[4];\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((*(v19) == 0 || v22 == 0) && (*(v19) == 0 || v23 == v17) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (v23 == v17 || v4 == 0) && (v23 == v17 || v1 == 0))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409b80, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409b50, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if (*(v15) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v25 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((*((long long *)v18) != 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v18) != 0 || v36 != 0))\n        {\n            return v46;\n        }\n    }\n    if (*((long long *)v18) == 0 && v29 == 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0 || v36 == 0 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409b30, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_4073a0",
            "funcStartAddr": "0x4073a0",
            "funcEndAddr": "0x407483",
            "decompiledFuncCode": "int sub_4073a0()\n{\n    unsigned long long v1;  // rdx\n    void *|char v2;  // dil\n    unsigned long|char v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while ((v2 & 7) != 0 && v1 != 1 && *((char *)v2) != (char)v3);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if (*((char *)(v6 - 1)) == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v3 == *((char *)v2) && v1 != 0 && (v2 & 7) != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_4037d0",
            "funcStartAddr": "0x4037d0",
            "funcEndAddr": "0x4037ec",
            "decompiledFuncCode": "int sub_4037d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long v3[3];  // rdi\n\n    v0 = v2;\n    if (*(v3) != 0)\n    {\n        free(v3[2]);\n    }\n}\n"
        },
        {
            "funcName": "sub_407840",
            "funcStartAddr": "0x407840",
            "funcEndAddr": "0x407896",
            "decompiledFuncCode": "int sub_407840()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_405120",
            "funcStartAddr": "0x405120",
            "funcEndAddr": "0x405154",
            "decompiledFuncCode": "int sub_405120()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4063a0();\n}\n"
        },
        {
            "funcName": "sub_407510",
            "funcStartAddr": "0x407510",
            "funcEndAddr": "0x407525",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_407510()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_406060",
            "funcStartAddr": "0x406060",
            "funcEndAddr": "0x406118",
            "decompiledFuncCode": "int sub_406060()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405c00();\n    }\n}\n"
        },
        {
            "funcName": "sub_402850",
            "funcStartAddr": "0x402850",
            "funcEndAddr": "0x402a03",
            "decompiledFuncCode": "extern char g_60c330;\nextern char g_60c331;\nextern char g_60c332;\nextern char g_60c333;\nextern char g_60c334;\nextern unsigned long long stdout[7];\n\nint sub_402850()\n{\n    char *v1;  // rbp\n    unsigned long v2;  // r9\n    unsigned long|unsigned int v3;  // rbx\n    char *v7;  // rsi\n    char *v10;  // rsi\n    char *v13;  // rsi\n    char *v19;  // rax\n\n    v1 = \"%*s\";\n    v3 = v2;\n    if (g_60c334 != 0)\n    {\n        sub_4038f0();\n        v1 = \" \";\n        __printf_chk(0x1, \"%*s\");\n    }\n    if (g_60c333 != 0)\n    {\n        sub_4038f0();\n        v7 = v1;\n        v1 = \" \";\n        __printf_chk(0x1, v7);\n    }\n    if (g_60c332 != 0)\n    {\n        sub_4038f0();\n        v10 = v1;\n        v1 = \" \";\n        __printf_chk(0x1, v10);\n    }\n    if (g_60c331 != 0)\n    {\n        sub_4038f0();\n        v13 = v1;\n        v1 = \" \";\n        __printf_chk(0x1, v13);\n    }\n    if (g_60c330 != 0)\n    {\n        sub_4038f0();\n        __printf_chk(0x1, v1);\n    }\n    if (v2 != 0)\n    {\n        if (strchr(v2, 0xa) != 0)\n        {\n            v3 = sub_405650();\n        }\n        __printf_chk(0x1, \" \", v3);\n    }\n    v19 = stdout[5];\n    if (stdout[5] < stdout[6])\n    {\n        stdout[5] = stdout[5] + 1;\n        *(v19) = 10;\n    }\n    else\n    {\n        v19 = __overflow();\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_405980",
            "funcStartAddr": "0x405980",
            "funcEndAddr": "0x405b7b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[16];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    char padding_40[56];\n    unsigned long long field_78;\n    unsigned long long field_80;\n    unsigned long long field_88;\n    unsigned long long field_90;\n    char padding_98[8];\n    unsigned long long field_a0;\n    char padding_a8[24];\n    char field_c0;\n    char padding_c1[15];\n    unsigned long long field_d0;\n    unsigned long long field_d8;\n    unsigned long long field_e0;\n    unsigned long long field_e8;\n    char padding_f0[8];\n    unsigned long long field_f8;\n    char padding_100[24];\n    char field_118;\n} struct_0;\n\nint sub_405980()\n{\n    unsigned int v0;  // [bp-0x1c]\n    void tmp_21;  // tmp #21\n    struct_0 *v2;  // rsi\n    struct_0 *v3;  // rbx\n    void *v4;  // rdi\n    char *v5;  // rdx\n    char *v7;  // rdx\n    unsigned long long v9;  // rax\n    char *v10;  // rax\n    unsigned long long *v13;  // rdx\n    unsigned long long v15;  // rsi\n    unsigned long long v16;  // rdx\n    unsigned long long v17;  // rdx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rcx\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rsi\n    unsigned long long v22;  // rdx\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rcx\n    char v26;  // al\n\n    v3 = v2;\n    while (true)\n    {\n        v9 = fgetc(v4);\n        if ((unsigned int)v9 == -1)\n        {\n            break;\n        }\n        while (true)\n        {\n            v5 = v3->field_30;\n            if (v3->field_38 != v3->field_30)\n            {\n                v3->field_30 = v2->field_30 + 1;\n                *((unsigned long long *)&v5) = v9;\n                if ((unsigned int)v9 != 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v0 = v9;\n                _obstack_newchunk();\n                v7 = v3->field_30;\n                v3->field_30 = v3->field_30 + 1;\n                *(v7) = v0;\n                if (v0 != 0)\n                {\n                    break;\n                }\n            }\n            sub_4057f0();\n            v9 = fgetc(v4);\n        }\n        if (true)\n        {\n            v9 = fgetc(v4);\n        }\n        else if ((unsigned int)v9 == -1 && ((unsigned int)v9 == 0 || v0 == 0) && ((unsigned int)v9 == 0 || v3->field_38 == v3->field_30))\n        {\n            v10 = v3->field_30;\n        }\n    }\n    v10 = v3->field_30;\n    if (v2->field_30 == v3->field_38)\n    {\n        _obstack_newchunk();\n        v10 = v3->field_30;\n    }\n    v3->field_30 = &v10[1];\n    *(v10) = 0;\n    sub_4057f0();\n    v13 = v3->field_88;\n    if (v3->field_90 - v3->field_88 <= 7)\n    {\n        _obstack_newchunk();\n        v13 = v3->field_88;\n    }\n    *(v13) = 0;\n    v15 = v3->field_80;\n    v16 = v3->field_88 + 8;\n    v3->field_88 = v3->field_88 + 8;\n    if (v16 == v15)\n    {\n        v3->field_c0 = v3->field_c0 | 2;\n    }\n    tmp_21 = v16 + v3->field_a0;\n    v17 = v3->field_78;\n    v18 = tmp_21 & !(v3->field_a0);\n    v19 = v3->field_90;\n    v3->field_88 = tmp_21 & !(v3->field_a0);\n    if (v18 - v17 > v18 - v17)\n    {\n        v3->field_88 = v18;\n        v18 = v19;\n    }\n    v3->field_8 = v15;\n    v20 = v3->field_e0;\n    v21 = v3->field_d8;\n    v3->field_80 = v18;\n    if (v20 == v21)\n    {\n        v3->field_118 = v3->field_118 | 2;\n    }\n    tmp_21 = v20 + v3->field_f8;\n    v22 = v3->field_d0;\n    v23 = tmp_21 & !(v3->field_f8);\n    v24 = v3->field_e8;\n    v3->field_e0 = tmp_21 & !(v3->field_f8);\n    if (v23 - v22 > v23 - v22)\n    {\n        v3->field_e0 = v23;\n        v23 = v24;\n    }\n    v3->field_d8 = v23;\n    v3->field_10 = v21;\n    v26 = ferror((unsigned int)v4) == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_405180",
            "funcStartAddr": "0x405180",
            "funcEndAddr": "0x4051b3",
            "decompiledFuncCode": "extern int512_t g_60c480;\n\nint sub_405180()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60c480 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60c480 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x405631",
            "decompiledFuncCode": "int sub_405620()\n{\n}\n"
        },
        {
            "funcName": "sub_406240",
            "funcStartAddr": "0x406240",
            "funcEndAddr": "0x406261",
            "decompiledFuncCode": "int sub_406240()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4063f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405492",
            "funcStartAddr": "0x405492",
            "funcEndAddr": "0x40550d",
            "decompiledFuncCode": "int sub_405492()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404f80();\n}\n"
        },
        {
            "funcName": "sub_405790",
            "funcStartAddr": "0x405790",
            "funcEndAddr": "0x4057a2",
            "decompiledFuncCode": "int sub_405790()\n{\n}\n"
        },
        {
            "funcName": "sub_4072a0",
            "funcStartAddr": "0x4072a0",
            "funcEndAddr": "0x4072b3",
            "decompiledFuncCode": "int sub_4072a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_407220();\n}\n"
        },
        {
            "funcName": "sub_406c50",
            "funcStartAddr": "0x406c50",
            "funcEndAddr": "0x4071b7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_409ba8;\nextern unsigned int g_409bec;\nextern unsigned long long stderr;\n\nint sub_406c50()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[3];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_406550();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_406550();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_406630();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409ba8, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409bec, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x409ba8, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_406630();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x40634a",
            "decompiledFuncCode": "int sub_406300() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403d50",
            "funcStartAddr": "0x403d50",
            "funcEndAddr": "0x404e88",
            "decompiledFuncCode": "int sub_403d50()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    unsigned long long v23;  // [bp-0x40]\n    unsigned int *v24;  // [bp+0x8]\n    unsigned long long v25;  // [bp+0x10]\n    unsigned long long v26;  // [bp+0x18]\n    unsigned long long v27;  // rdi\n    unsigned long long v28;  // r15\n    unsigned long v29;  // r8\n    unsigned long long v30;  // rcx\n    unsigned long v31;  // r9\n    unsigned long|unsigned long long|char v32;  // r10\n    unsigned long long v33;  // rbp\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // r9\n    unsigned long long v38;  // r11\n    unsigned long|unsigned long long v39;  // rbp\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    char v42;  // al\n    unsigned long long v43;  // rdx\n    unsigned long long v44;  // rcx\n    unsigned long|unsigned long long|unsigned short v45;  // rax\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // r13\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    char v50;  // r13b\n    unsigned long long v51;  // r13\n    unsigned long long v52;  // rdx\n    unsigned long long v53;  // rbx\n    unsigned long long v54;  // r13\n    unsigned long long v55;  // r15\n    unsigned long long v56;  // rbp\n    unsigned long long v57;  // r14\n    char *v58;  // rax\n    unsigned long long v59;  // rcx\n    unsigned long long v61;  // r13\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // rcx\n    char v64;  // al\n    char v65;  // al\n    unsigned int v66;  // eax\n    char v67;  // al\n    unsigned int v69;  // eax\n    char v70;  // al\n    unsigned long v71;  // rdx\n    unsigned long long v72;  // rax\n    char v73;  // al\n    unsigned long long v74;  // rdx\n    unsigned long long v75;  // rbx\n    unsigned long long|unsigned int|char v76;  // rsi\n    unsigned long long v77;  // r13\n    unsigned long long v78;  // r14\n    unsigned long long v79;  // r12\n    unsigned int v80;  // r13d\n    unsigned long long v81;  // r11\n    char v82;  // dl\n    unsigned long long v83;  // rax\n    unsigned long long v84;  // cc_dep1\n    unsigned long long v85;  // dl\n    unsigned long long v86;  // rax\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rdx\n    unsigned long long v89;  // rax\n    unsigned long long v90;  // rax\n\n    v28 = v27;\n    v78 = v76;\n    v77 = v29;\n    v7 = v76;\n    v4 = v30;\n    v16 = v31;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v31 & 2) != 0;\n    switch ((unsigned int)v29)\n    {\n    case 0:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v31 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v32 = 0;\n            v75 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v31 & 2) == 0)\n        {\n            v4 = 1;\n            if (v76 == 0)\n            {\n                v6 = 1;\n                v32 = 0;\n                v75 = 1;\n                v77 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v83 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v31 & 2) == 0)\n        {\n            if (v76 != 0)\n            {\n                *((char *)v27) = 34;\n                v32 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v32 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v75 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v32 = 0;\n            v75 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v29 != 10)\n        {\n            v4 = v4;\n            v25 = (unsigned int)sub_403c50();\n            v26 = (unsigned int)sub_403c50();\n        }\n        v75 = 0;\n        if (((char)v31 & 2) == 0)\n        {\n            v77 = (char)*((char *)v25);\n            if (*((char *)v25) != 0)\n            {\n                do\n                {\n                    if (v76 > v75)\n                    {\n                        *((unsigned long long *)(v27 + v75)) = v77;\n                    }\n                    v75 += 1;\n                    v77 = (char)*((char *)(v25 + v75));\n                }\n                while ((char)v77 != 0);\n            }\n        }\n        v5 = v81;\n        v6 = 1;\n        v8 = strlen(v26);\n        v18 = 0;\n        v13 = v26;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v81 = v4;\n    while (true)\n    {\n        v37 = v81;\n        v79 = 0;\n        v38 = v77;\n        while (true)\n        {\n            v77 = (char)(v37 != v79);\n            if (v37 == -1)\n            {\n                v77 = (char)(*((char *)(v7 + v79)) != 0);\n            }\n            if (v77 != 0)\n            {\n                v36 = v7 + v79;\n                v5 = (unsigned int)v38 != 2 & v4;\n                if (((unsigned int)v38 != 2 & v4) != 0)\n                {\n                    v77 = v8;\n                    if (v8 != 0)\n                    {\n                        v33 = v79 + v77;\n                        if (v37 == -1 && v77 > 1)\n                        {\n                            v11 = v38;\n                            v10 = v32;\n                            v9 = v36;\n                            v37 = strlen(v7);\n                        }\n                        if (v33 <= v37)\n                        {\n                            v12 = v38;\n                            v11 = v37;\n                            v10 = v32;\n                            v9 = v36;\n                            v77 = memcmp(v36, v13, v8);\n                            v36 = v9;\n                            v32 = (char)v10;\n                            v37 = v11;\n                            v38 = v12;\n                            if (v17 == 0 && v77 == 0)\n                            {\n                                v39 = (char)*((char *)v36);\n                                switch (*((char *)v36))\n                                {\n                                case 0:\n                                    v76 = (char)((unsigned int)v38 == 2);\n                                    v77 = (unsigned int)(0 ^ 1);\n                                    v77 = (char)(0 ^ 1) & (unsigned int)v38 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) != 0)\n                                    {\n                                        if (v76 > v75)\n                                        {\n                                            *((char *)(v27 + v75)) = 39;\n                                        }\n                                        if (v76 > v75 + 1)\n                                        {\n                                            *((char *)(v27 + v75 + 1)) = 36;\n                                        }\n                                        if (v76 > v75 + 2)\n                                        {\n                                            *((char *)(v27 + v75 + 2)) = 39;\n                                        }\n                                        v46 = v75 + 3;\n                                        v75 += 4;\n                                        v32 = rax<8>;\n                                        v77 = 0;\n                                        v39 = 48;\n                                    }\n                                    else\n                                    {\n                                        v46 = v75;\n                                        v77 = 0;\n                                        v75 = v46 + 1;\n                                        v77 = v77;\n                                        v39 = 48;\n                                        v77 = 0;\n                                        v39 = 48;\n                                        if (1 < v37)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v76 > v75)\n                                                {\n                                                    *((char *)(v27 + v75)) = 48;\n                                                }\n                                                if (v76 > v46 + 2)\n                                                {\n                                                    *((char *)(v27 + v46 + 2)) = 48;\n                                                }\n                                                v75 = v46 + 3;\n                                                v39 = 48;\n                                            }\n                                        }\n                                        v77 = v77;\n                                        v77 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) == 0 || v76 > v75 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) != 0 || v76 > v75))\n                                    {\n                                        *((char *)(v27 + v46)) = 92;\n                                        v32 = v77;\n                                    }\n                                case 7:\n                                    v39 = 97;\n                                case 8:\n                                    v76 = 0;\n                                    v77 = 0;\n                                    v39 = 98;\n                                case 13:\n                                    v39 = 13;\n                                    v44 = 114;\n                                    v76 = (unsigned int)v38 == 2;\n                                case 32:\n                                    v40 = v5;\n                                    v39 = 32;\n                                    v47 = v5;\n                                    v5 = v40;\n                                    v77 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v76 = 0;\n                                    v54 = 0;\n                                case 35: case 126:\n                                    v41 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v40 = v5;\n                                case 92:\n                                    v43 = v4;\n                                    v39 = 92;\n                                    v44 = 92;\n                                    v76 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v79 = 1;\n                                        v45 = 0;\n                                        v77 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v33 > v37 || v77 != 0)\n                    {\n                        v39 = (char)*((char *)v36);\n                        switch (*((char *)v36))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v38 == 2;\n                            }\n                        case 7:\n                            v39 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v77 = 0;\n                            }\n                            else\n                            {\n                                v86 = 0;\n                            }\n                        case 8:\n                            v39 = 98;\n                        case 9:\n                            v39 = 116;\n                        case 10:\n                            v39 = 110;\n                            v76 = 0;\n                            v77 = 0;\n                        case 11:\n                            v39 = 118;\n                            break;\n                        case 12:\n                            v39 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v40 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v41 = 0;\n                            v48 = v5;\n                            v76 = 0;\n                            v5 = v41;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v40 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v39 = (char)*((char *)v36);\n                    switch (*((char *)v36))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v79 += 1;\n                            v5 = 0;\n                            v76 = (char)((unsigned int)v38 == 2);\n                            v35 = 0;\n                            v39 = 0;\n                            break;\n                        }\n                    case 7:\n                        v39 = 7;\n                        v44 = 97;\n                        v76 = (unsigned int)v38 == 2;\n                    case 8:\n                        v39 = 8;\n                        v44 = 98;\n                        v76 = (unsigned int)v38 == 2;\n                    case 9:\n                        v39 = 9;\n                        v44 = 116;\n                        v76 = (unsigned int)v38 == 2;\n                        v5 = v17 & (unsigned int)v38 == 2;\n                    case 10:\n                        v39 = 10;\n                        v44 = 110;\n                    case 11:\n                        v39 = 11;\n                        v44 = 118;\n                        v76 = (unsigned int)v38 == 2;\n                    case 12:\n                        v39 = 12;\n                        v44 = 102;\n                        v76 = (unsigned int)v38 == 2;\n                        if (v4 != 0)\n                        {\n                            v39 = v44;\n                            v77 = 0;\n                        }\n                    case 13:\n                        v39 = 13;\n                        v44 = 114;\n                    case 32:\n                        v39 = 32;\n                        v76 = (char)((unsigned int)v38 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v76 = (char)((unsigned int)v38 == 2);\n                        v34 = 0;\n                    case 35: case 126:\n                        v76 = (unsigned int)v38 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v76 = (char)((unsigned int)v38 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v38 == 2)\n                        {\n                            if (v76 != 0)\n                            {\n                                v52 = 0;\n                            }\n                            if (v76 == 0 || v14 != 0)\n                            {\n                                if (v76 > v75)\n                                {\n                                    *((char *)(v27 + v75)) = 39;\n                                }\n                                if (v76 > v75 + 1)\n                                {\n                                    *((char *)(v27 + v75 + 1)) = 92;\n                                }\n                                if (v76 > v75 + 2)\n                                {\n                                    v52 = v76;\n                                    *((char *)(v27 + v75 + 2)) = 39;\n                                    v78 = v14;\n                                }\n                                else\n                                {\n                                    v52 = v76;\n                                    v78 = v14;\n                                }\n                            }\n                            v18 = v77;\n                            v75 += 3;\n                            v77 = 0;\n                            v32 = 0;\n                            v14 = v78;\n                            v39 = 39;\n                            v78 = v52;\n                        }\n                        else\n                        {\n                            v18 = v77;\n                            v76 = 0;\n                            v39 = 39;\n                            break;\n                            v77 = ((unsigned int)v4 ^ 1 | (unsigned int)v76) ^ 1;\n                            v77 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v76) ^ 1) | v17;\n                            v77 = 0;\n                            v71 = (unsigned int)((unsigned long long)v24[v39 % 32] >> ((char)v39 & 31)) & 1;\n                            v76 = (unsigned int)v38 == 2;\n                        }\n                        if (v17 == 0)\n                        {\n                            v76 = (unsigned int)v38 == 2;\n                            v79 += 1;\n                            v45 = (v77 ^ 1) & (unsigned int)v32;\n                            if (v45 != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v78 > v75 + 1)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 39;\n                                }\n                                v75 += 2;\n                                v32 = 0;\n                            }\n                            v72 = (unsigned int)v32 ^ 1;\n                            v73 = (char)((unsigned int)v32 ^ 1) & v76;\n                            if (((char)((unsigned int)v32 ^ 1) & v76) != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v75 + 1 < v78)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 36;\n                                }\n                                v74 = v75 + 2;\n                                if (v75 + 2 < v78)\n                                {\n                                    *((char *)(v28 + v75 + 2)) = 39;\n                                }\n                                v75 += 3;\n                                v32 = rax<8>;\n                            }\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            v75 += 1;\n                            v79 += 1;\n                        }\n                    case 63:\n                        if ((unsigned int)v38 != 2)\n                        {\n                            v39 = 63;\n                            v76 = (char)((unsigned int)v38 == 2);\n                            v51 = 0;\n                            break;\n                            v76 = v7;\n                            v39 = (char)*((char *)(v76 + 2));\n                            v76 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v76 = 0;\n                            v61 = 0;\n                            v39 = 63;\n                            break;\n                            if (v78 > v75)\n                            {\n                                *((char *)(v27 + v75)) = 63;\n                            }\n                            if (v78 > v75 + 1)\n                            {\n                                *((char *)(v27 + v75 + 1)) = 34;\n                            }\n                            if (v78 > v75 + 2)\n                            {\n                                *((char *)(v27 + v75 + 2)) = 34;\n                            }\n                            if (v78 > v75 + 3)\n                            {\n                                *((char *)(v27 + v75 + 3)) = 63;\n                            }\n                            v75 += 4;\n                            v76 = 0;\n                            v77 = 0;\n                            v79 = 2;\n                        }\n                        else\n                        {\n                            v77 = 0;\n                            v77 = 0;\n                            v39 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v38 == 2)\n                        {\n                            v79 += 1;\n                            v45 = v32;\n                            v77 = 0;\n                            v39 = 92;\n                        }\n                    case 123: case 125:\n                        v42 = v37 != 1;\n                        if (v37 == -1)\n                        {\n                            v42 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v76 = (unsigned int)v38 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v80 = v38;\n                v81 = v37;\n                v82 = v80 == 2;\n                if ((v80 == 2 & v17) == 0 || v75 != 0)\n                {\n                    v83 = (unsigned int)v17 ^ 1;\n                    v84 = v82 & (char)((unsigned int)v17 ^ 1);\n                    v85 = v82 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v84 == 0)\n                    {\n                        v85 = v83;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v83 = v78 == 0 & v14 != 0;\n                            if ((v78 == 0 & v14 != 0) == 0)\n                            {\n                                v85 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v26;\n                            v2 = v25;\n                            v1 = v24;\n                            v75 = (unsigned int)sub_403d50();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v77 == 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && (v78 == 0 & v14 != 0) == 0 || (char)v84 == 0 && v77 == 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || v77 == 0 && (char)v84 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && v18 == 0)\n            {\n                v87 = v13;\n                if (v13 != 0 && v85 != 0)\n                {\n                    v88 = (char)*((char *)v87);\n                    if (*((char *)v87) != 0)\n                    {\n                        v89 = v87 - v75;\n                        do\n                        {\n                            if (v78 > v75)\n                            {\n                                *((unsigned long long *)(v28 + v75)) = v88;\n                            }\n                            v75 += 1;\n                            v88 = (char)*((char *)(v89 + v75));\n                        }\n                        while ((char)v88 != 0);\n                    }\n                }\n                if (v78 > v75)\n                {\n                    *((char *)(v28 + v75)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v38;\n                v10 = v37;\n                v9 = v32;\n                v45 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v39 * 2));\n                tmp_38 = v45 & 0x4000;\n                v45 &= 0x4000;\n                v50 = (tmp_38 & 65535) != 0;\n                v76 = (tmp_38 & 65535) == 0 & v4;\n                if (v76 != 0)\n                {\n                    v76 = v4;\n                    v77 = 0;\n                }\n            }\n            else\n            {\n                v23 = 0;\n                if (v37 == -1)\n                {\n                    v11 = v38;\n                    v10 = v32;\n                    v9 = v36;\n                    v37 = strlen(v7);\n                }\n                v21 = v75;\n                v22 = v36;\n                v53 = 0;\n                v19 = v32;\n                *((unsigned long long *)&v20) = v39;\n                v11 = v28;\n                v12 = v78;\n                v9 = v37;\n                v10 = v38;\n                do\n                {\n                    v55 = v79 + v53;\n                    v56 = v7 + v79 + v53;\n                    v45 = sub_407320();\n                    v57 = v45;\n                    if (v45 != 0 && v45 != -2 && v45 != -1)\n                    {\n                        if ((int)v10 == 2 && v45 != 1 && v17 != 0)\n                        {\n                            v58 = v7 + v76 + 1;\n                            v76 = v7 + v57 + v76;\n                            while (true)\n                            {\n                                v59 = (unsigned int)*(v58) - 91;\n                                if ((8589934635 & 1 << (v59 & 63)) == 0 || ((unsigned int)*(v58) - 91 & 255) > 33)\n                                {\n                                    v58 = &v58[1];\n                                    if (v76 == v58)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v59 & 63)) == 0 || ((unsigned int)*(v58) - 91 & 255) > 33)\n                            {\n                                v77 = (unsigned int)(iswprint() == 0? 0 : (unsigned int)r13<8>);\n                                v53 += v57;\n                                v45 = mbsinit((unsigned int)&v23);\n                            }\n                        }\n                        v77 = (unsigned int)(iswprint() == 0? 0 : (unsigned int)r13<8>);\n                        v53 += v57;\n                        v45 = mbsinit((unsigned int)&v23);\n                    }\n                    if (v45 == -1)\n                    {\n                        v27 = v53;\n                        v39 = v20;\n                        v75 = v21;\n                        v77 = 0;\n                        v32 = (char)v19;\n                        v28 = v11;\n                        v78 = v12;\n                        v37 = v9;\n                        v38 = (unsigned int)v10;\n                        v76 = v4;\n                    }\n                    if (v45 == -2)\n                    {\n                        v37 = v9;\n                        v76 = v55;\n                        v45 = v53;\n                        v27 = v53;\n                        v32 = (char)v19;\n                        v39 = v20;\n                        v75 = v21;\n                        v28 = v11;\n                        v78 = v12;\n                        v38 = (unsigned int)v10;\n                        if (v76 < v9 && *((char *)v56) != 0)\n                        {\n                            do\n                            {\n                                v45 += 1;\n                            }\n                            while (v45 < v9 && *((char *)(v22 + v45)) != 0);\n                            v27 = v45;\n                        }\n                        v76 = v4;\n                        v77 = 0;\n                    }\n                    if (v45 == 0 || v45 != -2 && (unsigned int)v45 != 0 && v45 != -1)\n                    {\n                        v27 = v53;\n                        v39 = v20;\n                        v75 = v21;\n                        v32 = (char)v19;\n                        v28 = v11;\n                        v76 = (unsigned int)v77 ^ 1;\n                        v78 = v12;\n                        v37 = v9;\n                        v38 = (unsigned int)v10;\n                        v76 = (char)((unsigned int)v77 ^ 1) & v4;\n                    }\n                }\n                while (v27 <= 1);\n                if (v45 == 0 || v45 == -2 || v45 == -1 || (unsigned int)v45 != 0)\n                {\n                    v9 = v77;\n                    v76 = 0;\n                    v62 = v17;\n                    v63 = v27 + v79;\n                    v27 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v41;\n                v49 = 0;\n                v86 = v76;\n                *((unsigned long long *)&v4) = v4 & v86;\n            }\n            if (v76 != 0)\n            {\n                v9 = v77;\n                v76 = 0;\n                v62 = v17;\n                v63 = v27 + v79;\n                v27 = v5;\n                while (true)\n                {\n                    if (v76 != 0)\n                    {\n                        v64 = (unsigned int)v38 == 2;\n                        if (v62 == 0)\n                        {\n                            v76 = (unsigned int)v32 ^ 1;\n                            v65 = v4 & (char)((unsigned int)v32 ^ 1);\n                            if ((v4 & (char)((unsigned int)v32 ^ 1)) != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v78 > v75 + 1)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 36;\n                                }\n                                v76 = v75 + 2;\n                                if (v78 > v75 + 2)\n                                {\n                                    *((char *)(v28 + v75 + 2)) = 39;\n                                }\n                                v75 += 3;\n                                v32 = v45;\n                            }\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            if (v78 > v75 + 1)\n                            {\n                                v66 = v39;\n                                v67 = (char)v39 % 64;\n                                *((unsigned long long *)(v28 + v75 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v45 = v75 + 2;\n                            if (v78 > v75 + 2)\n                            {\n                                v69 = v39;\n                                v70 = (char)v39 % 8;\n                                v45 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v28 + v75 + 2)) = v45;\n                            }\n                            v79 += 1;\n                            v75 += 3;\n                            v39 = ((unsigned int)v39 & 7) + 48;\n                            if (v79 < v63)\n                            {\n                                v76 = v76;\n                            }\n                            else\n                            {\n                                v77 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v64;\n                        }\n                    }\n                    else\n                    {\n                        v45 = (v76 ^ 1) & (unsigned int)v32;\n                        if (v27 != 0)\n                        {\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            v75 += 1;\n                        }\n                        v79 += 1;\n                        if (v79 >= v63)\n                        {\n                            v77 = (char)v9;\n                        }\n                        else if (v45 != 0)\n                        {\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 39;\n                            }\n                            v45 = v75 + 1;\n                            if (v78 > v75 + 1)\n                            {\n                                *((char *)(v28 + v75 + 1)) = 39;\n                            }\n                            v75 += 2;\n                            v27 = 0;\n                            v32 = 0;\n                        }\n                        else\n                        {\n                            v27 = 0;\n                        }\n                    }\n                    if ((v79 < v63 || v76 == 0) && (v62 == 0 || v76 == 0) && (v79 < v63 || v76 != 0))\n                    {\n                        if (v78 > v75)\n                        {\n                            *((unsigned long long *)(v28 + v75)) = v39;\n                        }\n                        v39 = (char)*((char *)(v7 + v79));\n                        v75 += 1;\n                    }\n                }\n            }\n            if (((unsigned int)v38 == 2 || v77 == 0) && ((unsigned int)v38 == 2 || v75 == 0) && ((unsigned int)v38 == 2 || (v80 == 2 & v17) != 0) && (v77 == 0 || v17 != 0) && (v75 == 0 || v17 != 0) && (v17 != 0 || (v80 == 2 & v17) != 0))\n            {\n                v3 = v26;\n                v2 = v25;\n                v1 = 0;\n                v75 = (unsigned int)sub_403d50();\n            }\n            if ((v17 == 0 || v45 == 0) && (v17 == 0 || v76 != 0) && ((unsigned int)v38 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v76) ^ 1) == 0 || v45 == 0) && ((unsigned int)v38 == 2 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v76) ^ 1) == 0 || v76 != 0))\n            {\n                if (v75 < v78)\n                {\n                    *((unsigned long long *)(v28 + v75)) = v39;\n                }\n                v75 += 1;\n                v6 = (v77 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v77 == 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && (v78 == 0 & v14 != 0) == 0 || (char)v84 == 0 && v77 == 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || v77 == 0 && (char)v84 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && v18 == 0 || ((unsigned int)v38 == 2 || v77 == 0) && ((unsigned int)v38 == 2 || v75 == 0) && ((unsigned int)v38 == 2 || (v80 == 2 & v17) != 0) && (v77 == 0 || v17 != 0) && (v75 == 0 || v17 != 0) && (v17 != 0 || (v80 == 2 & v17) != 0) || v77 == 0 && v6 != 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0))\n            {\n                v90 = v75;\n                return v90;\n            }\n        }\n        *((char *)v28) = 39;\n        v77 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v83;\n    }\n}\n"
        },
        {
            "funcName": "sub_404f80",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x405120",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60c298;\nextern uint128_t g_60c2a0;\nextern unsigned int g_60c2b0;\nextern int512_t g_60c380;\n\nint sub_404f80()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60c298;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60c2b0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60c298 != 6341280)\n            {\n                v16 = sub_406200();\n                g_60c298 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_406200();\n                v17 = v15;\n                g_60c298 = v15;\n                *(v15) = g_60c2a0;\n            }\n            memset(&v17[(long long)(int)g_60c2b0], 0x0, (int)((unsigned int)v13 + 1 - g_60c2b0) * 16);\n            g_60c2b0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4063f0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_60c2b0 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_403d50();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6341504)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4061a0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_403d50();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_403940",
            "funcStartAddr": "0x403940",
            "funcEndAddr": "0x40395f",
            "decompiledFuncCode": "int sub_403940()\n{\n    unsigned int v1;  // edi\n    unsigned long long v2;  // rax\n\n    v2 = wcwidth(v1);\n    if ((unsigned int)v2 >= 0)\n    {\n        return v2;\n    }\n    return (unsigned long long)(char)(iswcntrl(v1) == 0);\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "0x4075c0",
            "funcEndAddr": "0x407651",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[8];\n    char field_50;\n} struct_0;\n\nint _obstack_begin()\n{\n    unsigned long long v0;  // [bp-0x18]\n    void tmp_35;  // tmp #35\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long v5;  // rcx\n    unsigned long v6;  // r8\n    unsigned long long v7;  // r12\n    unsigned long long v8;  // rbx\n    struct_0 *v9;  // rbx\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // r12\n    unsigned long long v12;  // rbp\n    unsigned long v13;  // rsi\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n\n    v4->field_50 = v4->field_50 & 254;\n    v4->field_38 = v5;\n    v4->field_40 = v6;\n    v2 = v7;\n    v1 = stack_base + 0;\n    v0 = v8;\n    v9 = v4;\n    if (v10 != 0)\n    {\n        v12 = v10;\n        v11 = v10 - 1;\n    }\n    else\n    {\n        v11 = 15;\n        v12 = 16;\n    }\n    v9->field_30 = v11;\n    *((int *)&v9->field_0) = (v13 == 0? 4064 : v13);\n    v14 = sub_4074f0();\n    v9->field_8 = v14;\n    if (v14 != 0)\n    {\n        tmp_35 = v9->field_0;\n        v9->field_10 = 0 - v12 & &((unsigned long long [2])&((char *)v14)[v11])[2];\n        v9->field_18 = 0 - v12 & &((unsigned long long [2])&((char *)v14)[v11])[2];\n        v14[0] = tmp_35 + (char *)v14;\n        v9->field_20 = tmp_35 + (char *)v14;\n        v14[1] = 0;\n        v9->field_50 = v9->field_50 & 249;\n        v15 = v0;\n        v16 = v2;\n        return 1;\n    }\n    sub_4074b0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x405757",
            "decompiledFuncCode": "int sub_405740()\n{\n}\n"
        },
        {
            "funcName": "sub_4061f0",
            "funcStartAddr": "0x4061f0",
            "funcEndAddr": "0x4061f2",
            "decompiledFuncCode": "int sub_4061f0()\n{\n}\n"
        },
        {
            "funcName": "sub_407e80",
            "funcStartAddr": "0x407e80",
            "funcEndAddr": "0x407e98",
            "decompiledFuncCode": "extern int512_t g_60c248;\n\nint sub_407e80()\n{\n}\n"
        },
        {
            "funcName": "sub_402a20",
            "funcStartAddr": "0x402a20",
            "funcEndAddr": "0x4032dd",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[28];\n    unsigned int field_20;\n    char padding_24[20];\n    unsigned long long field_38;\n    unsigned long long field_40;\n} struct_0;\n\nextern unsigned int g_407ee4;\nextern unsigned int g_408980[4];\nextern unsigned long long g_60c320;\nextern char g_60c330;\nextern char g_60c331;\nextern char g_60c332;\nextern char g_60c333;\nextern char g_60c334;\nextern unsigned long long g_60c338;\nextern unsigned long long g_60c340;\nextern unsigned long long g_60c348;\nextern unsigned long long g_60c350;\nextern unsigned long long g_60c358;\n\nint sub_402a20()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x40a0]\n    void tmp_9;  // tmp #9\n    unsigned long|unsigned int|char v1;  // [bp-0x4098]\n    unsigned long long v2;  // [bp-0x4090]\n    unsigned long|unsigned long long v3;  // [bp-0x4088]\n    unsigned long|unsigned long long v4;  // [bp-0x4080]\n    unsigned long v5;  // [bp-0x4078]\n    char v6;  // [bp-0x4069]\n    unsigned long v7;  // [bp-0x4068]\n    unsigned long v8;  // [bp-0x4060]\n    unsigned int v9;  // [bp-0x4054]\n    unsigned long long v10;  // [bp-0x4050]\n    char v11;  // [bp-0x4048]\n    char v12;  // [bp-0x4047]\n    struct_0 *v14;  // rdx\n    struct_0 *v15;  // rbx\n    unsigned long v16;  // rsi\n    unsigned long long v18;  // r12\n    unsigned long long v22;  // rax\n    unsigned long long v24;  // r15\n    unsigned int v25;  // edi\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rbx\n    unsigned long long v29;  // r12\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rax\n    unsigned long long v33;  // rcx\n    char v34;  // cl\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned int v38;  // eax\n    char v39;  // al\n    unsigned long long v40;  // rax\n    unsigned long long v42;  // r13\n    unsigned int v43;  // ecx\n    unsigned long long v44;  // r13\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    char *v48;  // r14d\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r15\n    unsigned long long v51;  // rbp\n    unsigned long long v52;  // r12\n    unsigned long long v53;  // rax\n    unsigned long long v54;  // r12\n    unsigned long long v55;  // r14\n    unsigned long long v56;  // r15\n    unsigned long|unsigned long long v57;  // rbx\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // r13\n    unsigned long long v60;  // rbp\n    unsigned long long v61;  // rbx\n    unsigned long long v62;  // r15\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // r12\n    unsigned long long v65;  // r13\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rbx\n    unsigned long long v68;  // r12\n    unsigned long long v69;  // r13\n    unsigned long long v70;  // r14\n    unsigned long v71;  // rcx\n    unsigned long long v72;  // rbp\n    unsigned long long v73;  // rsi\n    unsigned long long v74;  // rbp\n    unsigned long long v75;  // r14\n    unsigned long long v76;  // r12\n    unsigned long long v77;  // rax\n    unsigned long long v78;  // r12\n    unsigned long long v80;  // rbx\n    unsigned long long v81;  // rax\n    unsigned long long v82;  // rbx\n    unsigned long long v83;  // rbx\n    unsigned long v85;  // r12\n    unsigned long long v87;  // rax\n\n    v15 = v14;\n    v7 = v16;\n    v8 = v16;\n    if (v16 == 0)\n    {\n        v8 = dcgettext(0x0, 0x407ee4, 0x5);\n    }\n    v18 = g_60c331;\n    if ((unsigned long long)__ctype_get_mb_cur_max() > 1)\n    {\n        v6 = g_60c332;\n    }\n    else\n    {\n        v6 = 0;\n        v18 = (unsigned int)(g_60c331 == 0? (unsigned int)g_60c332 : (unsigned int)g_60c331);\n    }\n    if (g_60c333 == 0)\n    {\n        v62 = g_60c330;\n        if (g_60c330 == 0)\n        {\n            if (v18 == 1 && v6 == 0 && g_60c334 != 0)\n            {\n                sub_4038b0();\n            }\n            if (v6 != 0 || v18 != 1)\n            {\n                sub_4038b0();\n            }\n            if (v6 == 0 || v18 != 0 && v6 != 1)\n            {\n                if ((v18 == 1 || v18 != 0 && v6 != 1) && g_60c334 == 0)\n                {\n                    v22 = v15->field_0;\n                    if (v15->field_0 > 0)\n                    {\n                        v22 = __fxstat(0x1, v25, (unsigned int)v15 + 8);\n                        *((unsigned long long *)&v15->field_0) = v22;\n                    }\n                    if (v22 == 0 && ((unsigned short)v15->field_20 & 0xd000) == 0x8000)\n                    {\n                        v68 = v15->field_38;\n                        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                        {\n                            v4 = v14->field_38;\n                            if (!(v71 != -1))\n                            {\n                                v72 = lseek(v25, 0x0, 0x1);\n                                if ((0 CONCAT v14->field_38) % g_60c320 >> 64 != 0)\n                                {\n                                    if (v72 > v4)\n                                    {\n                                        v74 = 0;\n                                        v52 = 0;\n                                        v75 = 0;\n                                        v62 = 1;\n                                        v4 = 0;\n                                        v0 = 0;\n                                    }\n                                    else\n                                    {\n                                        v4 -= v72;\n                                    }\n                                }\n                                else\n                                {\n                                    v73 = !(rbp<8>) >> 63;\n                                }\n                            }\n                            else if ((0 CONCAT v14->field_38) % g_60c320 >> 64 == 0)\n                            {\n                                v73 = 1;\n                                v72 = 0;\n                            }\n                            if ((0 CONCAT v14->field_38) % g_60c320 >> 64 == 0)\n                            {\n                                v76 = v68 - ((0 CONCAT v68) % (v15->field_40 - 1 <= 2305843009213693951? v15->field_40 + 1 : 513) >> 64);\n                                if (v76 > v72 && v73 != 0)\n                                {\n                                    v77 = lseek(v25, v76, 0x1);\n                                    v78 = v76 - v72;\n                                    v4 = v78;\n                                }\n                            }\n                        }\n                    }\n                    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v22 != 0 || ((unsigned short)v15->field_20 & 0xd000) != 0x8000 || v73 == 0 && (0 CONCAT v14->field_38) % g_60c320 >> 64 == 0 || (0 CONCAT v14->field_38) % g_60c320 >> 64 == 0 && v76 <= v72)\n                    {\n                        v4 = 0;\n                    }\n                    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || (0 CONCAT v14->field_38) % g_60c320 >> 64 == 0 || v22 != 0 || ((unsigned short)v15->field_20 & 0xd000) != 0x8000)\n                    {\n                        sub_4038b0();\n                        v80 = v4;\n                        while (true)\n                        {\n                            v81 = sub_405ba0();\n                            if (v81 == 0)\n                            {\n                                v4 = v80;\n                            }\n                            else if (v81 != -1)\n                            {\n                                v80 += v81;\n                            }\n                            else\n                            {\n                                v74 = 0;\n                                v4 = v80;\n                                v52 = 0;\n                                v75 = 0;\n                                v82 = (unsigned int)sub_405650();\n                                error(0x0, *(__errno_location()), \"%s\");\n                                v0 = 0;\n                            }\n                        }\n                        if (v81 == 0)\n                        {\n                            v74 = 0;\n                            v52 = 0;\n                            v75 = 0;\n                            v62 = 1;\n                            v0 = 0;\n                        }\n                        else if (v81 == -1)\n                        {\n                            v83 = v4;\n                            v85 = (g_60c332 > (unsigned long long)v6? v4 : r12<8>);\n                            sub_402850();\n                            g_60c358 = g_60c358 + v0;\n                            g_60c350 = g_60c350 + v75;\n                            g_60c348 = g_60c348 + v85;\n                            g_60c340 = g_60c340 + v83;\n                        }\n                    }\n                    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v72 <= v4 || (0 CONCAT v14->field_38) % g_60c320 >> 64 == 0 || v71 != -1 || v22 != 0 || ((unsigned short)v15->field_20 & 0xd000) != 0x8000)\n                    {\n                        v74 = 0;\n                        v52 = 0;\n                        v75 = 0;\n                        v62 = 1;\n                        v0 = 0;\n                    }\n                }\n                if ((v18 == 0 || g_60c334 != 0) && (v18 == 1 || v6 != 1) && (v18 != 1 || g_60c334 != 0))\n                {\n                    v1 = g_60c330;\n                    v4 = 0;\n                    v24 = 0;\n                    v0 = 0;\n                    while (true)\n                    {\n                        v26 = sub_405ba0();\n                        if (v26 == 0)\n                        {\n                            v74 = 0;\n                            v52 = 0;\n                            v75 = 0;\n                            v62 = 1;\n                        }\n                        else if (v26 != -1)\n                        {\n                            v4 += v26;\n                            v27 = stack_base + -16456 + v26;\n                            v28 = v26 * 9838263505978427529 >> 64 >> 3;\n                            if (v24 != 0)\n                            {\n                                v29 = v0;\n                                while (true)\n                                {\n                                    if (sub_4073a0() == 0)\n                                    {\n                                        break;\n                                    }\n                                    v29 += 1;\n                                }\n                                v35 = v29 - v0;\n                                v0 = v29;\n                                v24 = (char)(v35 <= v28);\n                            }\n                            else if (v27 != stack_base + -16456)\n                            {\n                                v30 = v0;\n                                v31 = stack_base + -16456;\n                                do\n                                {\n                                    v31 = &v12;\n                                    v33 = 0;\n                                    v34 = v11 == 10;\n                                    v30 += rcx<8>;\n                                }\n                                while (v27 != v31);\n                                v36 = v30 - v0;\n                                v0 = v30;\n                                v24 = (char)(v36 <= v28);\n                            }\n                            else\n                            {\n                                v24 = 1;\n                            }\n                        }\n                        else\n                        {\n                            v74 = 0;\n                            v62 = v1;\n                            v52 = 0;\n                            v75 = 0;\n                            v61 = (unsigned int)sub_405650();\n                            error(0x0, *(__errno_location()), \"%s\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if (g_60c333 != 0 || g_60c330 != 0)\n    {\n        sub_4038b0();\n    }\n    if (g_60c333 != 0 || g_60c330 != 0 || v18 == 0 && v6 != 0 || v6 == 1 || v6 == 1 && v18 != 1)\n    {\n        if ((unsigned long long)__ctype_get_mb_cur_max() > 1)\n        {\n            v51 = 0;\n            v10 = 0;\n            v52 = 0;\n            v3 = 0;\n            v4 = 0;\n            v2 = 0;\n            v0 = 0;\n            v5 = stack_base + -16456;\n            v49 = 0;\n            v50 = 0;\n            while (true)\n            {\n                v37 = sub_405ba0();\n                if (v37 == 0)\n                {\n                    v62 = 1;\n                }\n                else if (v37 != -1)\n                {\n                    v4 += v37;\n                    v49 += v37;\n                    v48 = v5;\n                    if (v50 == 0 || v49 != 0)\n                    {\n                        v43 = (unsigned long long)*(v48);\n                        v38 = *(v48);\n                        v39 = (unsigned long long)*(v48) >> 5;\n                        if (((char)((unsigned long long)g_408980[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v48) & 31)) & 1) != 0)\n                        {\n                            v9 = v43;\n                            v52 += 1;\n                            v40 = v43 - 9;\n                            v48 = &v48[1];\n                            v49 -= 1;\n                            switch ((unsigned int)(v43 - 9))\n                            {\n                            case 0:\n                                v51 = (v51 & -8) + 8;\n                                break;\n                            case 1:\n                                v0 += 1;\n                            case 2:\n                                v2 += 0;\n                            case 3: case 4:\n                                *((int *)&v3) = (v51 <= v3? v3 : v51);\n                                v51 = 0;\n                                break;\n                            case 23:\n                                v51 += 1;\n                                break;\n                            }\n                        }\n                    }\n                    if (((char)((unsigned long long)g_408980[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v48) & 31)) & 1) == 0 || v50 != 0)\n                    {\n                        if (v1 != -1 && v1 != -2)\n                        {\n                            *((int *)&v1) = sub_407320();\n                            mbsinit((unsigned int)&v10);\n                            if (v1 == 0 && iswprint() != 0)\n                            {\n                                wcwidth(v1);\n                                v46 = iswspace(v9);\n                            }\n                            if (v1 != 0)\n                            {\n                                v47 = v9;\n                            }\n                        }\n                        if (v1 == -1)\n                        {\n                            v42 = v49 - 1;\n                        }\n                        if (v1 == 0)\n                        {\n                            v9 = 0;\n                            v43 = 0;\n                            v44 = v49 - 1;\n                            v1 = v43;\n                        }\n                    }\n                    v10 = 0;\n                    if (v49 != 0)\n                    {\n                        if (v49 == 0x4000)\n                        {\n                            v48 = (unsigned int)v48 + 1;\n                            v49 = 16383;\n                        }\n                        __memmove_chk(v5, v48, v49, 0x4001);\n                    }\n                    v50 = 1;\n                }\n                else\n                {\n                    v62 = 0;\n                    v69 = (unsigned int)sub_405650();\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n            }\n            v74 = (v51 <= v3? v3 : v51);\n            v75 = v2 + 0;\n        }\n        else\n        {\n            v60 = 0;\n            v4 = 0;\n            v56 = 0;\n            v0 = 0;\n            v5 = stack_base + -16456;\n            v57 = 0;\n            v59 = 0;\n            while (true)\n            {\n                v53 = sub_405ba0();\n                if (v53 == 0)\n                {\n                    v63 = v59;\n                    v64 = v60;\n                    v65 = v57;\n                    v66 = v56;\n                    v67 = v63;\n                    v62 = 1;\n                }\n                else if (v53 != -1)\n                {\n                    v4 += v53;\n                    v54 = v5;\n                    v55 = v5 + v53;\n                    do\n                    {\n                        v54 += 1;\n                        switch ((unsigned long long)v11 - 9 & 255)\n                        {\n                        case 0:\n                            v56 = (v56 & -8) + 8;\n                            break;\n                        case 1:\n                            v0 += 1;\n                        case 2:\n                            v60 = 0 + v59;\n                            v59 = 0;\n                        case 3: case 4:\n                            v57 = (v57 < v56? v56 : v57);\n                            v56 = 0;\n                            break;\n                        case 23:\n                            v56 += 1;\n                            break;\n                        default:\n                            v1 = v11;\n                            v58 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)v1 * 2));\n                        }\n                        if ((v58 & 64) != 0 && (*((long long *)(((unsigned long long)v11 - 9) * 8 + 4227360)) == 4206032 || ((unsigned long long)v11 - 9 & 255) > 23))\n                        {\n                            v56 += 1;\n                            if ((v58 & 32) == 0)\n                            {\n                                v59 = 1;\n                            }\n                        }\n                    }\n                    while (v54 != v55);\n                }\n                else\n                {\n                    tmp_9 = v59;\n                    v65 = v57;\n                    v67 = tmp_9;\n                    v64 = v60;\n                    v66 = v56;\n                    v62 = 0;\n                    v70 = (unsigned int)sub_405650();\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n            }\n            v74 = (v66 <= v65? v65 : v66);\n            v75 = v67 + v64;\n            v52 = 0;\n        }\n    }\n    v83 = v4;\n    v85 = (g_60c332 > (unsigned long long)v6? v4 : r12<8>);\n    sub_402850();\n    g_60c358 = g_60c358 + v0;\n    g_60c350 = g_60c350 + v75;\n    g_60c348 = g_60c348 + v85;\n    g_60c340 = g_60c340 + v83;\n    if (g_60c338 < v74)\n    {\n        g_60c338 = v74;\n    }\n    v87 = v62;\n    return v87;\n}\n"
        },
        {
            "funcName": "sub_4063a0",
            "funcStartAddr": "0x4063a0",
            "funcEndAddr": "0x4063c8",
            "decompiledFuncCode": "int sub_4063a0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4061a0();\n}\n"
        },
        {
            "funcName": "sub_405210",
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x405282",
            "decompiledFuncCode": "extern int512_t g_60c480;\n\nint sub_405210()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60c480 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_403d50();\n}\n"
        },
        {
            "funcName": "sub_403720",
            "funcStartAddr": "0x403720",
            "funcEndAddr": "0x40379b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[16];\n    struct struct_1 *field_28;\n} struct_0;\n\nint sub_403720()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rsi\n    unsigned int *v6;  // rbp\n    unsigned long long v8;  // rbx\n    unsigned long long v9[6];  // rbx\n    unsigned long long v11;  // rax\n    unsigned int *v12;  // rsi\n    unsigned long long v13;  // rdx\n    unsigned int *v14;  // rsi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rbx\n\n    if (v3->field_0 != 0)\n    {\n        v1 = stack_base + 0;\n        v6 = v5;\n        v0 = v8;\n        v9 = v3;\n        v11 = getdelim((struct struct_0 *)&v3->field_10, (struct struct_0 *)&v3->padding_18, 0x0);\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            *(v6) = 1;\n            v15 = v9[2];\n            v9[1] = v9[1] + 1;\n        }\n        else\n        {\n            *(v6) = (0 - (unsigned int)(char)(feof(*(v9)) < 1) & 2) + 2;\n            v15 = 0;\n        }\n        v16 = v0;\n        return v15;\n    }\n    v4 = *(v3->field_28);\n    if (*(v3->field_28) != 0)\n    {\n        v13 = &v3->field_28[1];\n        *(v14) = 1;\n        v3->field_28 = v13;\n        return v4;\n    }\n    *(v12) = 2;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40279b",
            "funcStartAddr": "0x40279b",
            "funcEndAddr": "0x4027ba",
            "decompiledFuncCode": "extern unsigned long long g_60c2c8;\n\nint sub_40279b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_60c2c8;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4074b0",
            "funcStartAddr": "0x4074b0",
            "funcEndAddr": "0x4074eb",
            "decompiledFuncCode": "extern unsigned int g_409740;\nextern unsigned int g_409acf;\nextern unsigned int g_60c258;\nextern unsigned long long stderr;\n\nint sub_4074b0()\n{\n    __fprintf_chk(stderr, 0x1, 0x409740, dcgettext(0x0, 0x409acf, 0x5));\n    exit(g_60c258); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403ab0",
            "funcStartAddr": "0x403ab0",
            "funcEndAddr": "0x403b9d",
            "decompiledFuncCode": "double sub_403ab0()\n{\n    unsigned long v0;  // [bp-0x80]\n    void tmp_14;  // tmp #14\n    char v1;  // [bp-0x78]\n    unsigned long long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v4;  // [bp-0x10]\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    void|uint128_t v8;  // xmm1\n    unsigned long long v9;  // rax\n    uint128_t v12;  // xmm0\n    unsigned long v13;  // rdx\n    unsigned long v14;  // rax\n    unsigned long v15;  // xmm0lq\n    void|uint128_t|unsigned long long v16;  // xmm0\n    unsigned long|void v18;  // xmm1\n    unsigned long long v19;  // rax\n    uint128_t v20;  // xmm1\n    unsigned long long v21;  // xmm1lq\n    unsigned long long v22;  // xmm1lq\n    uint128_t v23;  // xmm0\n\n    v0 = sysconf(0x56);\n    v6 = sysconf(0x1e);\n    v7 = 0;\n    v7 = v0;\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v8 = 0;\n        v22 = v6;\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        v9 = sysinfo((unsigned int)&v1);\n        if (v9 == 0)\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=stack_base-64, size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v16 = 0;\n                v16 = v2;\n                v14 = v3;\n                v18 = 0;\n                v18 = v14;\n            }\n            else\n            {\n                v12 = 0;\n                v13 = v2 % 2 | (unsigned int)v2 & 1;\n                v14 = v3;\n                v15 = v13;\n                v16 = xmm0<16> * 2;\n                tmp_14 = v14;\n                v19 = (unsigned int)v14 & 1;\n                v20 = 0;\n                v21 = tmp_14 >> 1 | v19;\n                v18 = xmm1<16> * 2;\n            }\n            v7 = v16 + v18;\n            v8 = 0;\n            v22 = v4;\n        }\n        else\n        {\n            sub_4039f0();\n            return xmm0<16> * 0x3fd0000000000000;\n        }\n    }\n    if (v9 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n    {\n        v23 = v7 * v8;\n        return v23;\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_wc.elf"
}