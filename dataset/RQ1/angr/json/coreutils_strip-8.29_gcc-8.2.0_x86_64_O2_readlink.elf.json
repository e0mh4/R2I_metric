{
    "funcInfo": [
        {
            "funcName": "sub_406240",
            "funcStartAddr": "0x406240",
            "funcEndAddr": "0x40626e",
            "decompiledFuncCode": "int sub_406240()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4062c0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4076d0",
            "funcStartAddr": "0x4076d0",
            "funcEndAddr": "0x407728",
            "decompiledFuncCode": "int sub_4076d0()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_407790();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_403d60",
            "funcStartAddr": "0x403d60",
            "funcEndAddr": "0x403df9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60c2f0;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403d60()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60c2f0 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407fd8",
            "funcStartAddr": "0x407fd8",
            "funcEndAddr": "0x407ff8",
            "decompiledFuncCode": "extern unsigned long long g_60be30;\n\nint sub_407fd8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60be30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_402f10",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x40304c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_402f10()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7[2];  // rdi\n    unsigned long long v8;  // rdi\n    struct_0 *v9;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long long|unsigned long v11;  // rbx\n    unsigned long long v12[2];  // rsi\n    unsigned long v13;  // xmm1lq\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v11 = 0;\n    v12 = *(v7);\n    v8 = v7[1];\n    if (v12 < v8)\n    {\n        while (true)\n        {\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12[1];\n                v10 = 1;\n                if (v12[1] != 0)\n                {\n                    do\n                    {\n                        v9 = v9->field_8;\n                        v10 += 1;\n                    }\n                    while (v9 != 0);\n                }\n                v11 = (v11 < v10? v10 : v11);\n                v12 = &v12[2];\n                if (v12 >= v8)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk();\n    __fprintf_chk();\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n    }\n    else\n    {\n        tmp_14 = v13;\n    }\n    __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_4032d0",
            "funcStartAddr": "0x4032d0",
            "funcEndAddr": "0x403450",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_402ae0;\nextern int512_t g_402af0;\nextern int512_t g_408950;\n\nint sub_4032d0()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t|void v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_402c50();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_408950;\n            v3 = sub_402c50();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v2 != 0 || v3 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v5;\n        }\n        if ((v2 == 0 || v4 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 != 0 || v3 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (v2->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0))\n        {\n            v13 = (unsigned int)sub_402a40();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_402ae0 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_402af0 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_403c90",
            "funcStartAddr": "0x403c90",
            "funcEndAddr": "0x403cb7",
            "decompiledFuncCode": "int sub_403c90()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_407880() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_402ea0",
            "funcStartAddr": "0x402ea0",
            "funcEndAddr": "0x402f02",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_402ea0()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v2[1] == 0 || *(v2) == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_402970",
            "funcStartAddr": "0x402970",
            "funcEndAddr": "0x4029fd",
            "decompiledFuncCode": "int sub_402970()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long|unsigned long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_4062a0();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_403a70();\n        if (!(v13 != 0))\n        {\n            sub_4062c0(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_406070();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405390",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x4053bb",
            "decompiledFuncCode": "extern char g_60c400;\n\nint sub_405390()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60c400 : v2);\n    *((int *)(tmp_11? &g_60c400 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60c400;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_60c400;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4028d0",
            "funcStartAddr": "0x4028d0",
            "funcEndAddr": "0x40296e",
            "decompiledFuncCode": "extern unsigned int g_4088c5;\nextern unsigned int g_60c238;\nextern char g_60c2e0;\nextern unsigned long long g_60c2e8;\n\nint sub_4028d0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_407650();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60c2e0 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x4088c5, 0x5);\n            if (g_60c2e8 != 0)\n            {\n                sub_4057d0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60c2e0 != 0)\n    {\n        v3 = sub_407650();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60c2e0 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60c238);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_406800",
            "funcStartAddr": "0x406800",
            "funcEndAddr": "0x4068d5",
            "decompiledFuncCode": "int sub_406800()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_403270",
            "funcStartAddr": "0x403270",
            "funcEndAddr": "0x4032a1",
            "decompiledFuncCode": "int sub_403270()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406330",
            "funcStartAddr": "0x406330",
            "funcEndAddr": "0x4067d5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[11];\n    char field_13;\n    char field_14;\n} struct_0;\n\nextern unsigned int g_4089ce;\nextern unsigned int g_409ac0;\nextern unsigned int g_409ac1;\n\nint sub_406330()\n{\n    unsigned long long|unsigned int v0;  // [bp-0x120]\n    unsigned long long v1;  // [bp-0x118]\n    unsigned long long|void * v2;  // [bp-0x110]\n    void *v3;  // [bp-0x108]\n    unsigned long long v4;  // [bp-0x100]\n    char v5;  // [bp-0xe9]\n    char *|unsigned long v6;  // [bp-0xe8]\n    unsigned long long v7;  // [bp-0xe0]\n    unsigned long v8;  // [bp-0xd8]\n    unsigned long v9;  // [bp-0xd0]\n    char v10;  // [bp-0xc8]\n    unsigned long long v11;  // [bp-0xc0]\n    unsigned int v12;  // [bp-0xb0]\n    void *v14;  // rdi\n    unsigned int v15;  // rsi\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r14\n    unsigned long long v19;  // rax\n    unsigned int|unsigned long v20;  // r15d\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rbp\n    unsigned long long v24;  // r13\n    struct_0 *v25;  // rax\n    unsigned long long v26;  // rdx\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // r13\n    unsigned long v29;  // r14\n    unsigned int v30;  // rax\n    unsigned long long v32;  // r8\n    unsigned long v37;  // rbx\n    unsigned long v38;  // rdx\n    unsigned long long|unsigned int|void * v40;  // rbx\n    unsigned int *v41;  // r12\n\n    v3 = v14;\n    if (v15 == 0)\n    {\n        v4 = 0x1000;\n        if (v14 != 0)\n        {\n            v2 = 0;\n            *(__errno_location()) = 22;\n        }\n    }\n    else\n    {\n        *((unsigned int *)&v4) = v15;\n        if (v3 != 0)\n        {\n            v2 = v3;\n        }\n    }\n    if (v14 == 0 && v15 == 0 || v3 == 0 && v15 != 0)\n    {\n        v2 = malloc(v4);\n    }\n    if (v14 == 0 && v2 != 0 || v3 != 0 && v15 != 0 || v2 != 0 && v15 != 0)\n    {\n        v16 = v2 + v4;\n        *((char *)(v2 + v4 - 1)) = 0;\n        v17 = __lxstat(0x1, 0x409ac1, (unsigned int)&v10);\n        if (v17 >= 0)\n        {\n            v20 = *((long long *)&v10);\n            v18 = v11;\n            v0 = *((long long *)&v10);\n            v19 = __lxstat(0x1, 0x4089ce, (unsigned int)&v10);\n            if (v19 >= 0)\n            {\n                v6 = v16 - 1;\n                v8 = v11;\n                v7 = *((long long *)&v10);\n                v5 = *((long long *)&v10) != *((long long *)&v10) | v11 != v11;\n                if (v20 != *((long long *)&v10) || v18 != v11)\n                {\n                    v23 = 0;\n                    v20 = -100;\n                    v41 = __errno_location();\n                    while (true)\n                    {\n                        v20 = openat(v20, 0x409ac0, 0x0);\n                        if ((unsigned int)v20 >= 0)\n                        {\n                            v21 = __fxstat(0x1, v20, (unsigned int)&v10);\n                            if (v21 == 0)\n                            {\n                                if (v23 != 0)\n                                {\n                                    v22 = closedir();\n                                }\n                                if (v22 == 0 || v23 == 0)\n                                {\n                                    v1 = *((long long *)&v10);\n                                    v9 = v11;\n                                    v23 = fdopendir(v20);\n                                    if (v23 != 0)\n                                    {\n                                        v24 = v5;\n                                        while (true)\n                                        {\n                                            *(v41) = 0;\n                                            v25 = readdir();\n                                            if (v25 == 0)\n                                            {\n                                                v40 = *(v41);\n                                                if (*(v41) == 0 && v24 != 0)\n                                                {\n                                                    rewinddir(v23);\n                                                    v25 = readdir();\n                                                    if (v25 != 0)\n                                                    {\n                                                        v24 = 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v40 = *(v41);\n                                                    }\n                                                }\n                                                if (v25 == 0 || v24 == 0 || *(v41) != 0)\n                                                {\n                                                    if ((unsigned int)v40 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    *(v41) = 2;\n                                                    v40 = 2;\n                                                }\n                                            }\n                                            if (v25 != 0 || *(v41) == 0 && v25 != 0 && v24 != 0)\n                                            {\n                                                if (v24 != 0 && (v25->field_13 == 46 || v25 != 0) && (v25->field_13 != 46 || *((short *)&v25->field_14) != 46) && (v25->field_13 != 46 || v25->field_14 != 0) && (v25 != 0 || *((short *)&v25->field_14) != 46) && (v25 != 0 || v25->field_14 != 0))\n                                                {\n                                                    v24 = v26;\n                                                }\n                                                if ((v25 == 0 || v25->field_13 != 46 || *((short *)&v25->field_14) != 46) && (v25 == 0 || v25->field_13 != 46 || v25->field_14 != 0) && (v25 != 0 || *((short *)&v25->field_14) != 46 || v25->field_13 != 46) && (v25 != 0 || v25->field_13 != 46 || v25->field_14 != 0))\n                                                {\n                                                    v40 = &v25->field_13;\n                                                    v27 = __fxstatat(0x1, v20, (unsigned int)v25 + 19, (unsigned int)&v10, 0x100);\n                                                    v28 = &v6[-1 * v2];\n                                                    v29 = strlen(v40);\n                                                    if (v28 <= v29)\n                                                    {\n                                                        if (v15 == 0)\n                                                        {\n                                                            v30 = v4 + (v4 <= v29? v29 : v4);\n                                                            *((int *)&v6) = (v4 <= v29? v29 : v4);\n                                                            *((unsigned long long *)&v0) = v4 + (v4 <= v29? v29 : v4);\n                                                            if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                            {\n                                                                v2 = realloc(v2, v30);\n                                                                v6 = memcpy(v2 + v6 + v28, v2 + v28, v4 - v28);\n                                                                v4 = *((long long *)&v0);\n                                                            }\n                                                            if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0)\n                                                            {\n                                                                *(v41) = 12;\n                                                                v40 = 12;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v41) = 34;\n                                                            v40 = 34;\n                                                        }\n                                                    }\n                                                    if (v28 > v29 || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                    {\n                                                        v32 = memcpy(&v6[-1 * v29], v40, v29);\n                                                        v6 = v32 - 1;\n                                                        *((char *)(v32 - 1)) = 47;\n                                                        v0 = v1;\n                                                        if (v7 != v1 || v8 != v9)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (closedir() != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v16 = v2 + v4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if ((v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 > v29 || v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 <= v29 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0) && v7 == v1 && v8 == v9)\n                                        {\n                                            v40 = *(v41);\n                                        }\n                                        else if (v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 > v29 || v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 <= v29 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0 || (v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 > v29 || v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 <= v29 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0) && v7 == v1)\n                                        {\n                                            v20 = openat(v20, 0x409ac0, 0x0);\n                                        }\n                                        else if (v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 <= v29 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 == 0 || v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 <= v29 && v15 == 0 && (char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || (unsigned int)v40 == 0 && v25 == 0 && (v25 == 0 || v24 == 0 || *(v41) != 0) || v27 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v28 <= v29 && v15 != 0 || v25 == 0 && (v25 == 0 || v24 == 0 || *(v41) != 0))\n                                        {\n                                            closedir();\n                                        }\n                                    }\n                                }\n                                if ((v23 == 0 || v22 != 0) && (v23 == 0 || v23 != 0))\n                                {\n                                    v40 = *(v41);\n                                }\n                            }\n                            else\n                            {\n                                v40 = *(v41);\n                                if (v23 != 0)\n                                {\n                                    closedir();\n                                }\n                            }\n                            if ((v23 == 0 || v22 != 0 || v21 != 0) && (v23 == 0 || v23 != 0 || v21 != 0))\n                            {\n                                close(v20);\n                            }\n                        }\n                        else\n                        {\n                            v40 = *(v41);\n                        }\n                        if (((unsigned int)v20 < 0 || v21 == 0) && ((unsigned int)v20 < 0 || v23 != 0) && (v22 == 0 || v23 == 0 || (unsigned int)v20 < 0) && (v23 != 0 || (unsigned int)v20 >= 0))\n                        {\n                            closedir();\n                        }\n                        break;\n                    }\n                    if (v23 == 0 || v22 != 0 && v23 != 0)\n                    {\n                        if (v23 != 0 && (v22 == 0 || v23 == 0))\n                        {\n                            v40 = *(v41);\n                        }\n                        else if ((unsigned int)v20 < 0 || v23 == 0 || v6 != v2 + v4 - 1 || v21 != 0 || v22 != 0 && v23 != 0)\n                        {\n                            free(v2);\n                        }\n                        else if ((unsigned int)v20 < 0 || v23 == 0 || v6 != v2 + v4 - 1 || v21 != 0 || v22 != 0 && v23 != 0)\n                        {\n                            *((unsigned long long *)&v41) = v40;\n                            v2 = 0;\n                        }\n                    }\n                }\n                v6[-1] = 47;\n                v6 = &v6[-1];\n                v37 = v16 + -0x1 * v6;\n                v38 = v37;\n                memmove(v2, v6, v38);\n                if (v15 == 0)\n                {\n                    v3 = realloc(v2, v38);\n                }\n                *((int *)&v2) = (v3 == 0? v2 : v3);\n            }\n        }\n        if (v17 < 0 || v19 < 0)\n        {\n            v41 = __errno_location();\n        }\n        if (v17 < 0 || v19 < 0 || v20 != *((long long *)&v10) || v18 != v11)\n        {\n            v40 = *(v41);\n            free(v2);\n            *((unsigned long long *)&v41) = v40;\n            v2 = 0;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406090",
            "funcStartAddr": "0x406090",
            "funcEndAddr": "0x4060b1",
            "decompiledFuncCode": "int sub_406090()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4062c0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406110",
            "funcStartAddr": "0x406110",
            "funcEndAddr": "0x406131",
            "decompiledFuncCode": "int sub_406110()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4062c0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405980",
            "funcStartAddr": "0x405980",
            "funcEndAddr": "0x405996",
            "decompiledFuncCode": "int sub_405980()\n{\n}\n"
        },
        {
            "funcName": "sub_4052d0",
            "funcStartAddr": "0x4052d0",
            "funcEndAddr": "0x405304",
            "decompiledFuncCode": "int sub_4052d0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_406270();\n}\n"
        },
        {
            "funcName": "sub_4060d0",
            "funcStartAddr": "0x4060d0",
            "funcEndAddr": "0x406100",
            "decompiledFuncCode": "int sub_4060d0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4062c0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_403e00",
            "funcStartAddr": "0x403e00",
            "funcEndAddr": "0x403edf",
            "decompiledFuncCode": "extern int512_t g_4089d6;\nextern int512_t g_4089da;\n\nint sub_403e00()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_4078c0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4089d6 : 4229601);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_4089da : 4229597);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_406140",
            "funcStartAddr": "0x406140",
            "funcEndAddr": "0x4061b8",
            "decompiledFuncCode": "int sub_406140() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402140",
            "funcStartAddr": "0x402140",
            "funcEndAddr": "0x40221b",
            "decompiledFuncCode": "int sub_402140()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= 9223372036854775806 && v9 <= v4 && v9 > 4611686018427387903 && (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > 9223372036854775806 || v9 > v4 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403ab0",
            "funcStartAddr": "0x403ab0",
            "funcEndAddr": "0x403c6f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_403ab0()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    uint128_t|unsigned long long|unsigned int|unsigned long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    uint128_t|unsigned int|unsigned long v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_402b30() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_402c50();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_4035f0() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_405acb",
            "funcStartAddr": "0x405acb",
            "funcEndAddr": "0x405ad0",
            "decompiledFuncCode": "int sub_405acb()\n{\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x40553a",
            "decompiledFuncCode": "int sub_405530()\n{\n}\n"
        },
        {
            "funcName": "sub_4068e0",
            "funcStartAddr": "0x4068e0",
            "funcEndAddr": "0x406ede",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_2 *field_20;\n} struct_1;\n\nextern unsigned int g_409ac8;\nextern unsigned int g_409ae8;\nextern unsigned int g_409b18;\nextern unsigned int g_409b38;\nextern unsigned int g_409b68;\nextern unsigned long long stderr;\n\nint sub_4068e0()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_1 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_2 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x409ac8, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x409ae8, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 += 32;\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x409b68, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x409b38, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x409b18, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_405f30",
            "funcStartAddr": "0x405f30",
            "funcEndAddr": "0x405fe8",
            "decompiledFuncCode": "int sub_405f30()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405ad0();\n    }\n}\n"
        },
        {
            "funcName": "sub_402a00",
            "funcStartAddr": "0x402a00",
            "funcEndAddr": "0x402a34",
            "decompiledFuncCode": "int sub_402a00()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_403060() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40545b",
            "funcStartAddr": "0x40545b",
            "funcEndAddr": "0x405521",
            "decompiledFuncCode": "int sub_40545b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_403f00();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_406070();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_403f00();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405330",
            "funcStartAddr": "0x405330",
            "funcEndAddr": "0x405363",
            "decompiledFuncCode": "extern int512_t g_60c400;\n\nint sub_405330()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60c400 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60c400 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_402cd0",
            "funcStartAddr": "0x402cd0",
            "funcEndAddr": "0x402e0a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_402cd0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_402b00();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_402b00();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40574f",
            "funcStartAddr": "0x40574f",
            "funcEndAddr": "0x4057c0",
            "decompiledFuncCode": "extern uint128_t g_60c400;\nextern uint128_t g_60c410;\nextern uint128_t g_60c420;\nextern unsigned long long g_60c430;\n\nint sub_40574f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60c430;\n    *((uint128_t *)&v0) = g_60c400;\n    *((uint128_t *)&v1) = g_60c410;\n    *((uint128_t *)&v2) = g_60c420;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_405130();\n}\n"
        },
        {
            "funcName": "sub_405eb0",
            "funcStartAddr": "0x405eb0",
            "funcEndAddr": "0x405ed0",
            "decompiledFuncCode": "int sub_405eb0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_402e40",
            "funcStartAddr": "0x402e40",
            "funcEndAddr": "0x402e45",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_402e40()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_405630",
            "funcStartAddr": "0x405630",
            "funcEndAddr": "0x405642",
            "decompiledFuncCode": "int sub_405630()\n{\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x405626",
            "decompiledFuncCode": "int sub_405610()\n{\n}\n"
        },
        {
            "funcName": "sub_4030c0",
            "funcStartAddr": "0x4030c0",
            "funcEndAddr": "0x4030ff",
            "decompiledFuncCode": "int sub_4030c0()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4028c0",
            "funcStartAddr": "0x4028c0",
            "funcEndAddr": "0x4028c8",
            "decompiledFuncCode": "extern char g_60c2e0;\n\nint sub_4028c0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60c2e0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403060",
            "funcStartAddr": "0x403060",
            "funcEndAddr": "0x4030ab",
            "decompiledFuncCode": "int sub_403060()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_402b00();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x4052d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60c278;\nextern uint128_t g_60c280;\nextern unsigned int g_60c290;\nextern int512_t g_60c300;\n\nint sub_405130()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60c278;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60c290 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60c278 != 6341248)\n            {\n                v16 = sub_4060d0();\n                g_60c278 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4060d0();\n                v17 = v15;\n                g_60c278 = v15;\n                *(v15) = g_60c280;\n            }\n            memset(&v17[(long long)(int)g_60c290], 0x0, (int)((unsigned int)v13 + 1 - g_60c290) * 16);\n            g_60c290 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4062c0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_60c290 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_403f00();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 0x60c300)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_406070();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_403f00();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_4074d0",
            "funcStartAddr": "0x4074d0",
            "funcEndAddr": "0x407526",
            "decompiledFuncCode": "extern unsigned int g_60c294;\nextern unsigned int g_60c298;\nextern unsigned int g_60c29c;\nextern unsigned int g_60c440;\nextern unsigned int g_60c444;\nextern unsigned int g_60c448;\nextern unsigned long long g_60c450;\nextern unsigned long long g_60c480;\n\nint sub_4074d0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60c440 = g_60c29c;\n    g_60c444 = g_60c298;\n    v1 = (unsigned int)v2;\n    v0 = &g_60c440;\n    g_60c29c = g_60c440;\n    g_60c480 = g_60c450;\n    g_60c294 = g_60c448;\n    return sub_406f00();\n}\n"
        },
        {
            "funcName": "sub_402e20",
            "funcStartAddr": "0x402e20",
            "funcEndAddr": "0x402e25",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_402e20()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_405730",
            "funcStartAddr": "0x405730",
            "funcEndAddr": "0x40573c",
            "decompiledFuncCode": "int sub_405730()\n{\n}\n"
        },
        {
            "funcName": "sub_4060c0",
            "funcStartAddr": "0x4060c0",
            "funcEndAddr": "0x4060c2",
            "decompiledFuncCode": "int sub_4060c0()\n{\n}\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x4058e9",
            "decompiledFuncCode": "int sub_4058e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4059b2",
            "funcStartAddr": "0x4059b2",
            "funcEndAddr": "0x405ab8",
            "decompiledFuncCode": "int sub_4059b2()\n{\n    unsigned long v0;  // [bp-0x128]\n    unsigned long v1;  // [bp-0x120]\n    unsigned long v2;  // [bp-0x98]\n    unsigned long v3;  // [bp-0x90]\n    unsigned long long v4;  // [bp+0x0]\n    unsigned long long v6;  // [bp+0x10]\n    unsigned long long v7;  // [bp+0x18]\n    unsigned long long v8;  // [bp+0x20]\n    unsigned long long v9;  // [bp+0x28]\n    unsigned long v12;  // r13\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // bl\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v12 = (unsigned int)sub_4077f0();\n    v13 = sub_4077f0();\n    if (v12 == v13)\n    {\n        v14 = memcmp((unsigned long long)(unsigned int)sub_407790(), (unsigned long long)(unsigned int)sub_407790(), v12);\n        if (v14 == 0)\n        {\n            v17 = __xstat();\n            if (v17 == 0)\n            {\n                v18 = __xstat();\n                if (v18 == 0)\n                {\n                    v19 = 0;\n                    if (v1 == v3)\n                    {\n                        v19 = (char)(v0 == v2);\n                    }\n                    free((unsigned long long)(unsigned int)sub_4076b0());\n                    free((unsigned long long)(unsigned int)sub_4076b0());\n                }\n                else\n                {\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v12 != v13 || v14 != 0 || v17 == 0 && v18 == 0)\n    {\n        v20 = v19;\n        v21 = v4;\n        v22 = v6;\n        v23 = v7;\n        v24 = v8;\n        v25 = v9;\n        return v20;\n    }\n}\n"
        },
        {
            "funcName": "sub_401d4b",
            "funcStartAddr": "0x401d4b",
            "funcEndAddr": "0x401d6a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_401d4b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4075d0",
            "funcStartAddr": "0x4075d0",
            "funcEndAddr": "0x40763f",
            "decompiledFuncCode": "extern unsigned long long g_409bef;\n\nint sub_4075d0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_409bef;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_407820() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x40593a",
            "decompiledFuncCode": "int sub_405930()\n{\n}\n"
        },
        {
            "funcName": "sub_405370",
            "funcStartAddr": "0x405370",
            "funcEndAddr": "0x405383",
            "decompiledFuncCode": "extern int512_t g_60c400;\n\nint sub_405370()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60c400 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60c400 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4062c0",
            "funcStartAddr": "0x4062c0",
            "funcEndAddr": "0x4062f1",
            "decompiledFuncCode": "extern unsigned int g_409aaf;\nextern unsigned int g_60c238;\n\nint sub_4062c0()\n{\n    dcgettext(0x0, 0x409aaf, 0x5);\n    error(g_60c238, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401a10",
            "funcEndAddr": "0x401ceb",
            "decompiledFuncCode": "extern unsigned int g_4080a7;\nextern unsigned int g_4080ce;\nextern unsigned int g_4086c0;\nextern unsigned int g_408730;\nextern unsigned int g_409bef;\nextern unsigned int g_60c29c;\nextern char g_60c2d8;\nextern char g_60c2d9;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    void tmp_16;  // tmp #16\n    unsigned long v0;  // [bp-0x48]\n    char v1;  // [bp-0x3d]\n    unsigned int v2;  // [bp-0x3c]\n    unsigned long long v4;  // r13\n    unsigned int|unsigned long v5;  // ebx\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    unsigned long v10;  // rdi\n    unsigned long long v14;  // r13\n    void *v15;  // r14\n    char *v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n\n    v4 = 0;\n    v5 = -1;\n    sub_403d60();\n    setlocale(0x6, 0x409bef);\n    bindtextdomain(0x4080a7, 0x4086c0);\n    textdomain(0x4080a7);\n    sub_407fc0();\n    while (true)\n    {\n        v8 = sub_407550();\n        if ((unsigned int)v8 == -1)\n        {\n            v9 = g_60c29c;\n            if (g_60c29c < (unsigned int)v10)\n            {\n                if ((unsigned int)(v10 - (unsigned long long)g_60c29c) != 1)\n                {\n                    if (g_60c2d9 != 0)\n                    {\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x408730, 0x5));\n                        v9 = g_60c29c;\n                    }\n                    g_60c2d9 = 0;\n                    if ((unsigned int)v10 <= (unsigned int)v9)\n                    {\n                        v14 = 0;\n                    }\n                }\n                if ((unsigned int)(v10 - (unsigned long long)g_60c29c) == 1 || (unsigned int)v10 > (unsigned int)v9)\n                {\n                    tmp_16 = v4;\n                    v14 = 0;\n                    v2 = 0 - (unsigned int)(char)((tmp_16 & 255) < 1) & 10;\n                    v1 = 0 - (unsigned int)(char)((tmp_16 & 255) < 1) & 10;\n                    do\n                    {\n                        if (v5 != -1)\n                        {\n                            v15 = (unsigned long long)(unsigned int)sub_402230();\n                        }\n                        else\n                        {\n                            v15 = (unsigned long long)(unsigned int)sub_402140();\n                        }\n                        if (v15 != 0)\n                        {\n                            fputs_unlocked(v15, stdout);\n                            if (g_60c2d9 == 0)\n                            {\n                                v17 = stdout[5];\n                                if (stdout[6] > stdout[5])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v17) = v1;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                            free(v15);\n                        }\n                        else\n                        {\n                            v14 = 1;\n                            if (g_60c2d8 != 0)\n                            {\n                                v0 = (unsigned int)sub_405800();\n                                error(0x0, *(__errno_location()), \"%s\");\n                            }\n                        }\n                        v18 = g_60c29c + 1;\n                        g_60c29c = g_60c29c + 1;\n                    }\n                    while ((unsigned int)v18 < (unsigned int)v10);\n                }\n            }\n            else\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4080ce, 0x5));\n            }\n        }\n        else if ((unsigned int)v8 != 109)\n        {\n            if (v8 > 109)\n            {\n                if ((unsigned int)v8 != 115)\n                {\n                    if (v8 > 115)\n                    {\n                        if ((unsigned int)v8 == 118)\n                        {\n                            g_60c2d8 = 1;\n                        }\n                        if ((unsigned int)v8 == 122)\n                        {\n                            v4 = 1;\n                        }\n                    }\n                    else if ((unsigned int)v8 == 110)\n                    {\n                        g_60c2d9 = 1;\n                    }\n                }\n                if ((v8 <= 115 || (unsigned int)v8 == 115) && ((unsigned int)v8 == 115 || (unsigned int)v8 == 113) && ((unsigned int)v8 == 115 || (unsigned int)v8 != 110))\n                {\n                    g_60c2d8 = 0;\n                }\n            }\n            else if ((unsigned int)v8 == -130)\n            {\n                sub_401e00(); /* do not return */\n            }\n            else if (v8 > -18446744069414584450)\n            {\n                if ((unsigned int)v8 == 101)\n                {\n                    v5 = 0;\n                }\n                if ((unsigned int)v8 == 102)\n                {\n                    v5 = 1;\n                }\n            }\n            else if ((unsigned int)v8 == -131)\n            {\n                sub_405f30();\n                exit(0x0); /* do not return */\n            }\n        }\n        if ((unsigned int)v8 == 109)\n        {\n            v5 = 2;\n        }\n        if ((unsigned int)v8 == -1 && g_60c29c >= (unsigned int)v10 || v8 <= 109 && v8 <= -18446744069414584450 && (unsigned int)v8 != 109 && (unsigned int)v8 != -130 && (unsigned int)v8 != -131 && (unsigned int)v8 != -1 || v8 <= 109 && (unsigned int)v8 != 102 && (unsigned int)v8 != 109 && v8 > -18446744069414584450 && (unsigned int)v8 != 101 && (unsigned int)v8 != -130 && (unsigned int)v8 != -1 || v8 <= 115 && v8 > 109 && (unsigned int)v8 != 110 && (unsigned int)v8 != 109 && (unsigned int)v8 != 115 && (unsigned int)v8 != -1 && (unsigned int)v8 != 113 || (unsigned int)v8 != 122 && v8 > 109 && (unsigned int)v8 != 109 && (unsigned int)v8 != 118 && v8 > 115 && (unsigned int)v8 != 115 && (unsigned int)v8 != -1)\n        {\n            sub_401e00(); /* do not return */\n        }\n    }\n    v19 = v14;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_407eb0",
            "funcStartAddr": "0x407eb0",
            "funcEndAddr": "0x407eeb",
            "decompiledFuncCode": "int sub_407eb0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_407ef0();\n    }\n}\n"
        },
        {
            "funcName": "sub_407820",
            "funcStartAddr": "0x407820",
            "funcEndAddr": "0x407876",
            "decompiledFuncCode": "int sub_407820()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_403510",
            "funcStartAddr": "0x403510",
            "funcEndAddr": "0x4035e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_403510()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((*(v4) < v4[1] || v4[8] == 0 || v4[4] == 0) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_4078c0",
            "funcStartAddr": "0x4078c0",
            "funcEndAddr": "0x407e14",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_409bef;\nextern char g_60c478[2];\n\nint sub_4078c0()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rdx\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n\n    v9 = g_60c478;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_409bef : (unsigned long long)nl_langinfo(0xe));\n    if (g_60c478 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_409bef;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1)\n                        {\n                            if ((unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                            {\n                                ungetc(v59, v10);\n                                v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v27 > 1)\n                                {\n                                    v28 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v28 = &v4;\n                                        v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v31 = &v5;\n                                    v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v31 = &v6;\n                                        v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v32;\n                                    tmp_56 = (unsigned int)v33 % 0x10000;\n                                    v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                    v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v35 + 2;\n                                        v36 = malloc(v35 + 3);\n                                        v38 = v1;\n                                        v39 = v2;\n                                    }\n                                    else\n                                    {\n                                        v37 = v35 + v0 + 3;\n                                        v0 = v35 + v0 + 2;\n                                        v36 = realloc(NULL, v37);\n                                        v39 = v2;\n                                        v38 = v1;\n                                    }\n                                    if (v36 != 0)\n                                    {\n                                        tmp_1 = -2 - v38;\n                                        v40 = v38 + 1;\n                                        v41 = v0 - v39;\n                                        v42 = tmp_1 + v0 - v39 + v36;\n                                        if ((unsigned int)v40 >= 8)\n                                        {\n                                            *((long long *)v42) = *((long long *)&v3);\n                                            *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                            v43 = v42 + 8 & -8;\n                                            v42 -= v42 + 8 & -8;\n                                            v44 = &(&v3)[-1 * v42];\n                                            v45 = (unsigned int)(v40 + v42) & -8;\n                                            if (v45 >= 8)\n                                            {\n                                                v42 = 0;\n                                                do\n                                                {\n                                                    v47 = v42;\n                                                    v42 = (unsigned int)v42 + 8;\n                                                    *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                                }\n                                                while ((unsigned int)v42 < (v45 & -8));\n                                            }\n                                        }\n                                        else if ((v40 & 4) != 0)\n                                        {\n                                            *((int *)v42) = *((int *)&v3);\n                                            *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                        }\n                                        else if ((unsigned int)v40 != 0)\n                                        {\n                                            *((char *)v42) = v3;\n                                            if ((v40 & 2) != 0)\n                                            {\n                                                *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                            }\n                                        }\n                                        v61 = v39 + 1;\n                                        v48 = v36 + v41 - 1;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v48) = *((long long *)&v5);\n                                            v42 = v61;\n                                            *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                            v51 = v48 - (v48 + 8 & -8);\n                                            v53 = (unsigned int)(v42 + v51) & -8;\n                                            if (v53 >= 8)\n                                            {\n                                                v56 = 0;\n                                                do\n                                                {\n                                                    v57 = v56;\n                                                    v56 = (unsigned int)v56 + 8;\n                                                    *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                                }\n                                                while ((unsigned int)v56 < (v53 & -8));\n                                            }\n                                        }\n                                        else if (((char)v42 & 4) != 0)\n                                        {\n                                            *((int *)v48) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v48) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v36;\n                                        v58 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_409bef;\n                                        v10 = (tmp_10 == 0? &g_409bef : tmp_10);\n                                        free(NULL);\n                                        sub_407e30();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v59 == 35)\n                            {\n                                do\n                                {\n                                    v60 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v60[1];\n                                        v60 = (unsigned int)*(v60);\n                                        v61 = 1;\n                                    }\n                                    else\n                                    {\n                                        v60 = __uflow(v10);\n                                        v61 = (char)((unsigned int)v60 != -1);\n                                    }\n                                }\n                                while (v61 != 0 && v60 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0)\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 == 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1 || (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0) && (unsigned int)v59 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_409bef : tmp_10);\n                            sub_407e30();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1 || (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1)\n                    {\n                        v9 = &g_409bef;\n                    }\n                    else if (((unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1 || (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1) && v0 != 0 || ((unsigned int)(v59 - 9) > 1 && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v0 == 0 || (unsigned int)(v59 - 9) > 1 && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v0 != 0) && v36 == 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_409bef;\n            free(v17);\n        }\n        *((char *[2])&g_60c478[0]) = v9;\n    }\n    v65 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v66 = strcmp((tmp_10 == 0? &g_409bef : tmp_10), v9);\n            if (v66 != 0 && (v65 != 42 || v9[1] != 0))\n            {\n                v67 = strlen(v9);\n                v68 = &((char [2])&v9[v67])[1];\n                v69 = strlen(&((char [2])&v9[v67])[1]);\n                v9 = v68 + v69 + 1;\n                v65 = (char)*((char *)(v68 + v69 + 1));\n                if (v65 == 0)\n                {\n                    break;\n                }\n            }\n            if (v66 == 0 || v65 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_406f00",
            "funcStartAddr": "0x406f00",
            "funcEndAddr": "0x407467",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_409b90;\nextern unsigned int g_409bd4;\n\nint sub_406f00()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long long *|unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[2];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_406800();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_406800();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_4068e0();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x409b90, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x409bd4, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x409b90, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_4068e0();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_405910",
            "funcStartAddr": "0x405910",
            "funcEndAddr": "0x405923",
            "decompiledFuncCode": "int sub_405910()\n{\n}\n"
        },
        {
            "funcName": "sub_4028b0",
            "funcStartAddr": "0x4028b0",
            "funcEndAddr": "0x4028b8",
            "decompiledFuncCode": "extern unsigned long long g_60c2e8;\n\nint sub_4028b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60c2e8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4061d0",
            "funcStartAddr": "0x4061d0",
            "funcEndAddr": "0x40621a",
            "decompiledFuncCode": "int sub_4061d0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x40574f",
            "decompiledFuncCode": "int sub_405740()\n{\n}\n"
        },
        {
            "funcName": "sub_4032b0",
            "funcStartAddr": "0x4032b0",
            "funcEndAddr": "0x4032d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_4032b0()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_403cc0",
            "funcStartAddr": "0x403cc0",
            "funcEndAddr": "0x403ccd",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_403cc0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_407ef0",
            "funcStartAddr": "0x407ef0",
            "funcEndAddr": "0x407f46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_407ef0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402e50",
            "funcStartAddr": "0x402e50",
            "funcEndAddr": "0x402e9f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_402e50()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_4053c0",
            "funcStartAddr": "0x4053c0",
            "funcEndAddr": "0x405432",
            "decompiledFuncCode": "extern int512_t g_60c400;\n\nint sub_4053c0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60c400 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_403f00();\n}\n"
        },
        {
            "funcName": "sub_405870",
            "funcStartAddr": "0x405870",
            "funcEndAddr": "0x4058dc",
            "decompiledFuncCode": "extern uint128_t g_60c400;\nextern uint128_t g_60c410;\nextern uint128_t g_60c420;\nextern unsigned long long g_60c430;\n\nint sub_405870()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60c400;\n    *((uint128_t *)&v1) = g_60c410;\n    *((uint128_t *)&v2) = g_60c420;\n    v4 = g_60c430;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_405130();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4056c0",
            "funcStartAddr": "0x4056c0",
            "funcEndAddr": "0x405729",
            "decompiledFuncCode": "int sub_4056c0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405130();\n}\n"
        },
        {
            "funcName": "sub_405432",
            "funcStartAddr": "0x405432",
            "funcEndAddr": "0x40545b",
            "decompiledFuncCode": "int sub_405432()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_4062a0",
            "funcStartAddr": "0x4062a0",
            "funcEndAddr": "0x4062b3",
            "decompiledFuncCode": "int sub_4062a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_405800",
            "funcStartAddr": "0x405800",
            "funcEndAddr": "0x405873",
            "decompiledFuncCode": "int sub_405800()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405130();\n}\n"
        },
        {
            "funcName": "sub_403f00",
            "funcStartAddr": "0x403f00",
            "funcEndAddr": "0x405038",
            "decompiledFuncCode": "int sub_403f00()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long|unsigned int v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_403e00();\n            v27 = (unsigned int)sub_403e00();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                    v50 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            if (v17 == 0)\n                            {\n                                v89 = (unsigned int)v39 == 2;\n                                v80 += 1;\n                                v46 = (v78 ^ 1) & (unsigned int)v33;\n                                if (v46 != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v79 > v76 + 1)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 39;\n                                    }\n                                    v76 += 2;\n                                    v33 = 0;\n                                }\n                                v73 = (unsigned int)v33 ^ 1;\n                                v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v76 + 1 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 36;\n                                    }\n                                    v75 = v76 + 2;\n                                    if (v76 + 2 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 2)) = 39;\n                                    }\n                                    v76 += 3;\n                                    v33 = rax<8>;\n                                }\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 92;\n                                }\n                                v76 += 1;\n                                v80 += 1;\n                            }\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                        }\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_403f00();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_403f00();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_4075d0();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n                v78 = 0;\n                v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                v89 = (unsigned int)v39 == 2;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v89 == 0) && (v89 == 0 || v80 < v64) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v46 == 0 || v17 == 0) && (v46 == 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0) && (v17 == 0 || v89 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v76 == 0 && (v81 == 2 & v17) != 0)\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_401da1",
            "funcStartAddr": "0x401da1",
            "funcEndAddr": "0x401df8",
            "decompiledFuncCode": "extern char g_60c2c8;\nextern unsigned long long g_60c2d0;\n\nint sub_401da1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60c2c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60c2d0 >= 0)\n            {\n                break;\n            }\n            g_60c2d0 = g_60c2d0 + 1;\n            *((long long *)(6340160 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60c2c8 = 1;\n        return sub_401d4b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_401df8",
            "funcStartAddr": "0x401df8",
            "funcEndAddr": "0x401e34",
            "decompiledFuncCode": "int sub_401df8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402e30",
            "funcStartAddr": "0x402e30",
            "funcEndAddr": "0x402e35",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_402e30()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_403180",
            "funcStartAddr": "0x403180",
            "funcEndAddr": "0x4031e0",
            "decompiledFuncCode": "int sub_403180()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_407570",
            "funcStartAddr": "0x407570",
            "funcEndAddr": "0x407585",
            "decompiledFuncCode": "int sub_407570()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_406f00();\n}\n"
        },
        {
            "funcName": "sub_407790",
            "funcStartAddr": "0x407790",
            "funcEndAddr": "0x4077e2",
            "decompiledFuncCode": "int sub_407790()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_403110",
            "funcStartAddr": "0x403110",
            "funcEndAddr": "0x403169",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_403110()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_402b00();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_405940",
            "funcStartAddr": "0x405940",
            "funcEndAddr": "0x405952",
            "decompiledFuncCode": "int sub_405940()\n{\n}\n"
        },
        {
            "funcName": "sub_4057d0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x4057e1",
            "decompiledFuncCode": "int sub_4057d0()\n{\n}\n"
        },
        {
            "funcName": "sub_4077f0",
            "funcStartAddr": "0x4077f0",
            "funcEndAddr": "0x407817",
            "decompiledFuncCode": "int sub_4077f0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403460",
            "funcStartAddr": "0x403460",
            "funcEndAddr": "0x403505",
            "decompiledFuncCode": "int sub_403460()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x406326",
            "decompiledFuncCode": "int sub_406300()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_4062c0(); /* do not return */\n        }\n    }\n    if (v2 != 0 || *(v3) != 12)\n    {\n        v2 = (unsigned int)sub_406330();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_4076b0",
            "funcStartAddr": "0x4076b0",
            "funcEndAddr": "0x4076c8",
            "decompiledFuncCode": "int sub_4076b0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_407730();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_4062c0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402230",
            "funcStartAddr": "0x402230",
            "funcEndAddr": "0x40285b",
            "decompiledFuncCode": "extern unsigned int g_4089ce;\n\nint sub_402230()\n{\n    unsigned long long|unsigned int *|unsigned int|unsigned long v0;  // [bp-0x100]\n    unsigned int v1;  // [bp-0xf4]\n    unsigned long long|unsigned long v2;  // [bp-0xf0]\n    char [2]|char *|unsigned long v3;  // [bp-0xe8]\n    unsigned long long v4;  // [bp-0xe0]\n    unsigned long long|unsigned long v5;  // [bp-0xd8]\n    unsigned int v6;  // [bp-0xd0]\n    unsigned int v7;  // [bp-0xcc]\n    char v8;  // [bp-0xc8]\n    unsigned int v9;  // [bp-0xb0]\n    unsigned int v11;  // esi\n    char v12[2];  // rdi\n    char v13[2];  // r15\n    unsigned long long v14;  // rbx\n    char *v15;  // rbx\n    unsigned long long|char * v16;  // rbp\n    unsigned long long v17;  // rdx\n    char v18[2];  // r13\n    unsigned long v19;  // r8\n    char v20[2];  // r15\n    char *v21;  // rdx\n    unsigned long long v22;  // rbx\n    unsigned long v23;  // rbp\n    char v25[2];  // r15\n    unsigned long long v26;  // rsi\n    char v27;  // al\n    char v28[2];  // rax\n    unsigned long long v29;  // rax\n    char *v31;  // r15\n    unsigned int v32;  // ecx\n    unsigned long v33;  // r13\n    unsigned long long v34;  // rdx\n    char v36[2];  // r15\n    char v39[2];  // rax\n    char *v40;  // rdx\n    unsigned long long v41;  // rdx\n    char v42;  // cc_dep1\n    char v43[2];  // r14\n    unsigned long long v44;  // rax\n    char v45[2];  // r15\n    unsigned long long v46;  // r12\n    unsigned int *v48;  // rdx\n    unsigned int *v49;  // rdx\n    char *v50;  // rax\n    unsigned int|unsigned long v51;  // rcx\n    unsigned int *v52;  // rdx\n    unsigned int|unsigned long v53;  // rcx\n    unsigned long long v56;  // rax\n\n    v1 = v11 & 3;\n    if (((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) == 0)\n    {\n        v13 = v12;\n        if (v12 != 0)\n        {\n            if (v12[0] != 0)\n            {\n                if (v12[0] != 47)\n                {\n                    v46 = (unsigned int)sub_406300();\n                    if (v46 != 0)\n                    {\n                        v14 = strlen(v46);\n                        if (v14 > 4095)\n                        {\n                            v15 = v14 + v46;\n                            v16 = v15;\n                        }\n                        else\n                        {\n                            v46 = (unsigned int)sub_4060d0();\n                            v15 = v14 + v46;\n                            v16 = v46 + 0x1000;\n                        }\n                    }\n                }\n                else\n                {\n                    v46 = (unsigned int)sub_406070();\n                    v16 = v46 + 0x1000;\n                    v15 = v46 + 1;\n                    *((char *)v46) = 47;\n                }\n                if (v12[0] == 47 || v46 != 0)\n                {\n                    *((char *[2])&v3[0]) = v13;\n                    v44 = v13[0];\n                    v6 = v11 & 4;\n                    v2 = 0;\n                    v5 = 0;\n                    v4 = 0;\n                    while (true)\n                    {\n                        if (v44 != 0)\n                        {\n                            v17 = v44;\n                        }\n                        if (v44 == 47)\n                        {\n                            do\n                            {\n                                v13 = &v13[1];\n                                v17 = v13[0];\n                            }\n                            while (v13[0] == 47);\n                        }\n                        if (v44 == 47 && v17 != 0 || v44 != 47 && v44 != 0)\n                        {\n                            v18 = v13;\n                            while (true)\n                            {\n                                v44 = v18[1];\n                                v43 = &v18[1];\n                                if (v18[1] == 0 || v44 == 47)\n                                {\n                                    break;\n                                }\n                                v18 = v43;\n                            }\n                        }\n                        if (v44 == 0 || v43 == v13 || v17 == 0 && v44 == 47)\n                        {\n                            if (v15[-1] == 47 && v15 > v46 + 1)\n                            {\n                                v50 = v15;\n                                v15 = &v15[-1];\n                            }\n                            if (v15 <= v46 + 1 || v15[-1] != 47)\n                            {\n                                v50 = &v15[1];\n                            }\n                            *(v15) = 0;\n                            if (v16 != v50)\n                            {\n                                v46 = (unsigned int)sub_4060d0();\n                            }\n                            free(v4);\n                            if (v2 == 0)\n                            {\n                                break;\n                            }\n                            sub_403510();\n                        }\n                        if (v43 != v13 && (v44 == 47 || v44 != 0) && (v17 != 0 || v44 != 47))\n                        {\n                            v19 = v43 - v13;\n                            if (v17 == 46 && v0 == 2 && v13[1] == 46 && v43 - v13 != 1)\n                            {\n                                v20 = v43;\n                                if (v15 > v46 + 1)\n                                {\n                                    v21 = &v15[-1];\n                                    if (v15[-2] == 47 || v46 >= &v15[-1])\n                                    {\n                                        v15 = v21;\n                                    }\n                                }\n                            }\n                            if (v17 != 46 || v0 != 2 && v43 - v13 != 1 || v13[1] != 46 && v43 - v13 != 1)\n                            {\n                                if (v15[-1] != 47)\n                                {\n                                    *(v15) = 47;\n                                    v15 = &v15[1];\n                                }\n                                if (v16 <= &v15[v0])\n                                {\n                                    v22 = &v15[-1 * v46];\n                                    v0 = v19;\n                                    v23 = (0x1000 <= v0? &v16[-1 * v46 + v0 + 1] : &v16[-1 * v46 + 0x1000]);\n                                    v46 = (unsigned int)sub_4060d0();\n                                    v16 = v23 + v46;\n                                    v15 = v22 + v46;\n                                }\n                                *((unsigned long *)&v0) = v0;\n                                memcpy(v15, v13, v0);\n                                v15 = &v15[*((long long *)&v0)];\n                                *(v15) = 0;\n                                if (v6 == 0 || v1 != 2)\n                                {\n                                    v26 = v46;\n                                    if (v6 != 0)\n                                    {\n                                        v27 = __xstat() != 0;\n                                    }\n                                    else\n                                    {\n                                        v27 = __lxstat(0x1, v26, (unsigned int)&v8) != 0;\n                                    }\n                                    if (v27 != 0)\n                                    {\n                                        v48 = __errno_location();\n                                        v51 = *(v48);\n                                        if (v1 == 1)\n                                        {\n                                            v7 = v51;\n                                            v0 = v48;\n                                            v28 = strspn((unsigned int)v43, 0x4089ce);\n                                            v48 = v0;\n                                            v51 = v7;\n                                        }\n                                    }\n                                    else if (((unsigned short)v9 & 0xf000) == 0xa000)\n                                    {\n                                        if (v2 != 0)\n                                        {\n                                            v29 = sub_402a00();\n                                            if (v29 == 0)\n                                            {\n                                                sub_402970();\n                                                v31 = (unsigned long long)(unsigned int)sub_402140();\n                                                if (v31 != 0)\n                                                {\n                                                    v33 = strlen(v31);\n                                                    v34 = strlen(v43);\n                                                    if (v5 == 0)\n                                                    {\n                                                        v0 = v34;\n                                                        *((int *)&v5) = (0x1000 <= v0? v0 : 0x1000);\n                                                        v4 = (unsigned int)sub_406070();\n                                                    }\n                                                    else if (v0 > v5)\n                                                    {\n                                                        v0 = v33 + v34 + 1;\n                                                        v3 = v34;\n                                                        v4 = (unsigned int)sub_4060d0();\n                                                        v5 = v0;\n                                                    }\n                                                    memmove(v4 + v33, v43, v34 + 1);\n                                                    v39 = memcpy(v4, v31, v33);\n                                                    v40 = v46 + 1;\n                                                    v43 = v39;\n                                                    v3 = &v39[0];\n                                                    if (*(v31) == 47)\n                                                    {\n                                                        *((char *)v46) = 47;\n                                                        v15 = v40;\n                                                    }\n                                                    else if (v15 > v15)\n                                                    {\n                                                        v41 = &v15[-1];\n                                                        if (v46 < &v15[-1])\n                                                        {\n                                                            v42 = v15[-2];\n                                                            v15 = v41;\n                                                            if (v42 != 47)\n                                                            {\n                                                                do\n                                                                {\n                                                                    v15 = &v15[-1];\n                                                                }\n                                                                while (v46 != v15 && v15[-1] != 47);\n                                                            }\n                                                        }\n                                                    }\n                                                    free(v31);\n                                                }\n                                                else\n                                                {\n                                                    v49 = __errno_location();\n                                                    v32 = *(v49);\n                                                }\n                                            }\n                                            if ((v29 == 0 || v1 != 2) && (v31 == 0 || v29 != 0) && (v1 == 12 || v1 != 2))\n                                            {\n                                                v1 = v32;\n                                                v0 = v49;\n                                                free(v4);\n                                                free(v46);\n                                                v52 = v0;\n                                                v53 = v1;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v2 = (unsigned int)sub_4032d0();\n                                            sub_4062c0(); /* do not return */\n                                        }\n                                    }\n                                }\n                                if ((v1 == 2 || v1 != 0) && (v1 == 2 || v1 != 1) && (v1 == 2 || v27 != 0) && (v6 != 0 || v1 != 0) && (v6 != 0 || v1 != 1) && (v6 != 0 || v27 != 0))\n                                {\n                                    v9 = 0;\n                                }\n                                if (v1 != 2)\n                                {\n                                    if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v29 != 0)\n                                    {\n                                        v49 = __errno_location();\n                                    }\n                                    if (v43[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000))\n                                    {\n                                        v48 = __errno_location();\n                                    }\n                                }\n                                if (((unsigned short)v9 & 0xf000) == 0x4000 && v27 == 0 && ((unsigned short)v9 & 0xf000) != 0xa000 && (v6 == 0 || v1 != 2) || v29 == 0 && v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v31 != 0 && (v6 == 0 || v1 != 2) || v43[0] == 0 && (v1 == 2 || v27 == 0 || v1 != 0) && (v1 == 2 || v27 == 0 || v1 != 1) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000) && (v27 == 0 || v6 != 0 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v6 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000) || v1 == 2 && v43[0] != 0 && (v1 == 2 || v27 == 0 || v1 != 0) && (v1 == 2 || v27 == 0 || v1 != 1) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000) && (v27 == 0 || v6 != 0 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v6 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000))\n                                {\n                                    v44 = v43[0];\n                                    v45 = v43;\n                                }\n                                if (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v43 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) == 0 && v1 != 0 && v27 != 0 && v7 != 2 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000))\n                                {\n                                    *((unsigned long *)&v1) = v51;\n                                    v0 = v48;\n                                    free(v4);\n                                    free(v46);\n                                    v52 = v0;\n                                    v53 = v1;\n                                }\n                                if (v1 == 1 && *((char *)(v43 + v28)) == 0 && v1 != 0 && v27 != 0 && (v6 == 0 || v1 != 2) && v7 == 2 || v6 == 0 && v1 == 2 && v29 == 0 && v31 == 0 && v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v1 != 12 || v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && v29 != 0 && (v6 == 0 || v1 != 2) && v1 == 2)\n                                {\n                                    v44 = v18[1];\n                                    v36 = v43;\n                                }\n                                if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && (v6 == 0 || v1 != 2) && (v29 == 0 || v1 != 2) && (v31 == 0 || v29 != 0) && (v1 == 12 || v1 != 2) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v43 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) == 0 && v1 != 0 && v27 != 0 && v7 != 2 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000)))\n                                {\n                                    *((unsigned long *)&v1) = v53;\n                                    v0 = v52;\n                                    sub_403510();\n                                    v53 = v1;\n                                    v52 = v0;\n                                }\n                                if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v2 != 0 && (v6 == 0 || v1 != 2) && (v29 == 0 || v1 != 2) && (v31 == 0 || v29 != 0) && (v1 == 12 || v1 != 2) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v43 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) == 0 && v1 != 0 && v27 != 0 && v7 != 2 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000)) || (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && v1 != 0 && v27 != 0 && *((char *)(v43 + v28)) != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) == 0 && v1 != 0 && v27 != 0 && v7 != 2 && (v6 == 0 || v1 != 2) || v1 != 2 && v43[0] != 0 && (v27 == 0 || v1 != 0) && (v27 == 0 || v1 != 1) && (((unsigned short)v9 & 0xf000) != 0x4000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0xa000)) && v2 == 0)\n                                {\n                                    *((unsigned long *)&v52) = v53;\n                                    v46 = 0;\n                                }\n                            }\n                            if (v17 == 46 && (v46 < &v15[-1] || v43 - v13 == 1) && (v0 == 2 || v43 - v13 == 1) && (v13[1] == 46 || v43 - v13 == 1) && (v43 - v13 == 1 || v15 > v46 + 1) && (v43 - v13 == 1 || v15[-2] != 47))\n                            {\n                                v25 = v43;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = 0;\n                *(__errno_location()) = 2;\n            }\n        }\n    }\n    if (v12 == 0 || ((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) != 0)\n    {\n        v46 = 0;\n        *(__errno_location()) = 22;\n    }\n    v56 = v46;\n    return v56;\n}\n"
        },
        {
            "funcName": "sub_402c50",
            "funcStartAddr": "0x402c50",
            "funcEndAddr": "0x402cca",
            "decompiledFuncCode": "extern int512_t g_408950;\n\nint sub_402c50()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4229456)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) == 1 || ((char)(BinaryOp CmpF & 69) & 1) != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0)\n        {\n            *(v1) = &g_408950;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4037f0",
            "funcStartAddr": "0x4037f0",
            "funcEndAddr": "0x403a46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_4037f0()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_3 *v12;  // rdx\n    uint128_t|unsigned int|unsigned long v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    uint128_t|unsigned int|unsigned long v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_402b30();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_402c50();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_4035f0();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_402b30();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0 && v33 != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && ((char)(BinaryOp CmpF & 69) & 1) != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_407650",
            "funcStartAddr": "0x407650",
            "funcEndAddr": "0x4076ac",
            "decompiledFuncCode": "int sub_407650()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_407e30();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4057c0",
            "funcStartAddr": "0x4057c0",
            "funcEndAddr": "0x4057cd",
            "decompiledFuncCode": "int sub_4057c0()\n{\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056bd",
            "decompiledFuncCode": "int sub_405650()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405130();\n}\n"
        },
        {
            "funcName": "sub_4075b0",
            "funcStartAddr": "0x4075b0",
            "funcEndAddr": "0x4075c8",
            "decompiledFuncCode": "int sub_4075b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_406f00();\n}\n"
        },
        {
            "funcName": "sub_403d00",
            "funcStartAddr": "0x403d00",
            "funcEndAddr": "0x403d17",
            "decompiledFuncCode": "int sub_403d00()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4057f0",
            "funcStartAddr": "0x4057f0",
            "funcEndAddr": "0x4057fa",
            "decompiledFuncCode": "int sub_4057f0()\n{\n}\n"
        },
        {
            "funcName": "sub_402af0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402af7",
            "decompiledFuncCode": "int sub_402af0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403d1a",
            "funcStartAddr": "0x403d1a",
            "funcEndAddr": "0x403d33",
            "decompiledFuncCode": "int sub_403d1a()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_405ed0",
            "funcStartAddr": "0x405ed0",
            "funcEndAddr": "0x405f29",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405ed0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405ad0();\n}\n"
        },
        {
            "funcName": "sub_406270",
            "funcStartAddr": "0x406270",
            "funcEndAddr": "0x406298",
            "decompiledFuncCode": "int sub_406270()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406070();\n}\n"
        },
        {
            "funcName": "sub_403cd0",
            "funcStartAddr": "0x403cd0",
            "funcEndAddr": "0x403d04",
            "decompiledFuncCode": "int sub_403cd0()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long long v7[3];  // rdi\n    unsigned long long v8[3];  // rsi\n    unsigned long v9;  // r15\n    unsigned long v10;  // r14\n    unsigned long v11;  // r13\n    unsigned long v12;  // r12\n    unsigned long v13;  // rbx\n\n    if (v7[1] == v8[1] && v7[2] == v8[2])\n    {\n        v5 = v9;\n        v4 = v10;\n        v3 = v11;\n        v2 = v12;\n        v1 = stack_base + 0;\n        v0 = v13;\n    }\n    if (v7[1] != v8[1] || v7[2] != v8[2])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_402b00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402b26",
            "decompiledFuncCode": "int sub_402b00()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_405310",
            "funcStartAddr": "0x405310",
            "funcEndAddr": "0x40531f",
            "decompiledFuncCode": "extern int512_t g_60c400;\n\nint sub_405310()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60c400 : v1));\n}\n"
        },
        {
            "funcName": "sub_405ff0",
            "funcStartAddr": "0x405ff0",
            "funcEndAddr": "0x406064",
            "decompiledFuncCode": "extern unsigned int g_409772;\nextern unsigned int g_40979d;\nextern unsigned int g_4099d0;\n\nint sub_405ff0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409772, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40979d, 0x5));\n    dcgettext(0x0, 0x4099d0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405907",
            "decompiledFuncCode": "int sub_4058f0()\n{\n}\n"
        },
        {
            "funcName": "sub_407730",
            "funcStartAddr": "0x407730",
            "funcEndAddr": "0x40778a",
            "decompiledFuncCode": "int sub_407730()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_4076d0();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4031f0",
            "funcStartAddr": "0x4031f0",
            "funcEndAddr": "0x40325b",
            "decompiledFuncCode": "int sub_4031f0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long *v2;  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_401e00",
            "funcStartAddr": "0x401e00",
            "funcEndAddr": "0x402135",
            "decompiledFuncCode": "extern unsigned int g_40808c;\nextern unsigned int g_408148;\nextern unsigned int g_408170;\nextern unsigned int g_408190;\nextern unsigned int g_4081c8;\nextern unsigned int g_408380;\nextern unsigned int g_408590;\nextern unsigned int g_4085c0;\nextern unsigned int g_408620;\nextern unsigned int g_408668;\nextern unsigned int g_408688;\nextern unsigned long long stdout;\n\nint sub_401e00()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v27[2];  // rax\n    char *v28;  // rdi\n    char *v29;  // rsi\n    unsigned long long v30;  // rcx\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // cc_dep2\n    unsigned long v33;  // d\n    char *v37;  // rax\n    char *v38;  // rax\n    unsigned long long v39;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x408148, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408170, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408190, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4081c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408380, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x408590, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4085c0, 0x5), stdout);\n        v0 = \"[\";\n        v27 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v27 = &v2;\n            v28 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v29 = \"readlink\";\n            v30 = 9;\n            if ((v31 > v32) - 0 - (v31 < v32) == 0)\n            {\n                break;\n            }\n            while (v30 != 0)\n            {\n                v30 -= 1;\n                v31 = *(v29);\n                v32 = *(v28);\n                v28 = &v28[v33];\n                v29 = &v29[v33];\n                break;\n            }\n        }\n        if (v27[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40808c, 0x5));\n            v38 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40808c, 0x5));\n            v37 = setlocale(0x5, 0x0);\n            if (v37 != 0)\n            {\n                v39 = strncmp(v37, \"en_\", 0x3);\n            }\n            if (v37 == 0 || v39 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408668, 0x5));\n            }\n        }\n        if ((v27[1] == 0 || v38 != 0) && (v27[1] == 0 || strncmp(v38, \"en_\", 0x3) != 0) && (v37 != 0 || v27[1] != 0) && (v27[1] != 0 || v39 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408620, 0x5));\n        }\n        if (v27[1] != 0 || v37 != 0 && v39 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408668, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x408688, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405ad0",
            "funcStartAddr": "0x405ad0",
            "funcEndAddr": "0x405e79",
            "decompiledFuncCode": "extern unsigned int g_40972b;\nextern unsigned int g_40972f;\nextern unsigned int g_40973f;\nextern unsigned int g_409756;\nextern unsigned int g_4097b8;\nextern unsigned int g_409888;\nextern unsigned int g_4098a8;\nextern unsigned int g_4098d0;\nextern unsigned int g_4098f8;\nextern unsigned int g_409928;\n\nint sub_405ad0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40972b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4097b8, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40972f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40973f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x409756, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x409888, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x4098a8, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x4098d0, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x4098f8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x409928, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x405600",
            "funcEndAddr": "0x40560a",
            "decompiledFuncCode": "int sub_405600()\n{\n}\n"
        },
        {
            "funcName": "sub_405aab",
            "funcStartAddr": "0x405aab",
            "funcEndAddr": "0x405aad",
            "decompiledFuncCode": "int sub_405aab()\n{\n}\n"
        },
        {
            "funcName": "sub_403a70",
            "funcStartAddr": "0x403a70",
            "funcEndAddr": "0x403aa4",
            "decompiledFuncCode": "int sub_403a70()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_4037f0();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_402a40",
            "funcStartAddr": "0x402a40",
            "funcEndAddr": "0x402ad1",
            "decompiledFuncCode": "int sub_402a40()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v2 > 9 && v3 != 0)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_402b30",
            "funcStartAddr": "0x402b30",
            "funcEndAddr": "0x402c35",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_402b30()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_402b00();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v15->field_8 != 0 || v10 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v15->field_8 == 0 && v10 == 0 && v8 != v1 || v10 == 0 && v1 != *(v11) && v8 != v1)\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_4055e0",
            "funcStartAddr": "0x4055e0",
            "funcEndAddr": "0x4055f1",
            "decompiledFuncCode": "int sub_4055e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4035f0",
            "funcStartAddr": "0x4035f0",
            "funcEndAddr": "0x4037e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_4035f0()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_402a40();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_402cd0();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_402cd0();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_402cd0();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 && v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v0 == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_28->field_10 != 0 && v11->field_10 != *((long long *)&v2))\n    {\n        v21 = 0;\n    }\n    if (v11->field_10 != *((long long *)&v2) || (char)v21 != 0)\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_407880",
            "funcStartAddr": "0x407880",
            "funcEndAddr": "0x4078b2",
            "decompiledFuncCode": "int sub_407880() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x405971",
            "decompiledFuncCode": "int sub_405960()\n{\n}\n"
        },
        {
            "funcName": "sub_407550",
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x407563",
            "decompiledFuncCode": "int sub_407550()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4074d0();\n}\n"
        },
        {
            "funcName": "sub_402ae0",
            "funcStartAddr": "0x402ae0",
            "funcEndAddr": "0x402af0",
            "decompiledFuncCode": "int sub_402ae0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_405540",
            "funcStartAddr": "0x405540",
            "funcEndAddr": "0x4055d5",
            "decompiledFuncCode": "extern struct_0 *g_60c278;\nextern unsigned long long g_60c280;\nextern unsigned long long g_60c288;\nextern unsigned int g_60c290;\nextern unsigned long long g_60c300;\n\nint sub_405540()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60c290;\n    if (g_60c290 > 1)\n    {\n        v2 = &g_60c278[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60c278[(unsigned long long)(g_60c290 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60c278->field_8 != 0x60c300)\n    {\n        v1 = free(g_60c278->field_8);\n        g_60c280 = 0x100;\n        g_60c288 = &g_60c300;\n    }\n    if (g_60c278 != 6341248)\n    {\n        v1 = free(g_60c278);\n        g_60c278 = &g_60c280;\n    }\n    g_60c290 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406220",
            "funcStartAddr": "0x406220",
            "funcEndAddr": "0x406237",
            "decompiledFuncCode": "int sub_406220()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_406070();\n}\n"
        },
        {
            "funcName": "sub_406070",
            "funcStartAddr": "0x406070",
            "funcEndAddr": "0x40608a",
            "decompiledFuncCode": "int sub_406070()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4062c0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_407590",
            "funcStartAddr": "0x407590",
            "funcEndAddr": "0x4075a6",
            "decompiledFuncCode": "int sub_407590()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4074d0();\n}\n"
        },
        {
            "funcName": "sub_407fc0",
            "funcStartAddr": "0x407fc0",
            "funcEndAddr": "0x407fd8",
            "decompiledFuncCode": "extern int512_t g_60c228;\n\nint sub_407fc0()\n{\n}\n"
        },
        {
            "funcName": "sub_407e30",
            "funcStartAddr": "0x407e30",
            "funcEndAddr": "0x407ea8",
            "decompiledFuncCode": "int sub_407e30()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_407eb0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_407530",
            "funcStartAddr": "0x407530",
            "funcEndAddr": "0x407548",
            "decompiledFuncCode": "int sub_407530()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_4074d0();\n}\n"
        },
        {
            "funcName": "sub_405320",
            "funcStartAddr": "0x405320",
            "funcEndAddr": "0x40532f",
            "decompiledFuncCode": "extern int512_t g_60c400;\n\nint sub_405320()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60c400 : v1)) = v2;\n    return &g_60c400;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_readlink.elf"
}