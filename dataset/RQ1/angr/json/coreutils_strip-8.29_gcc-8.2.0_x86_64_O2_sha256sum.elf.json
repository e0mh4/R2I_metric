{
    "funcInfo": [
        {
            "funcName": "sub_407e40",
            "funcStartAddr": "0x407e40",
            "funcEndAddr": "0x407e52",
            "decompiledFuncCode": "int sub_407e40()\n{\n}\n"
        },
        {
            "funcName": "sub_407d70",
            "funcStartAddr": "0x407d70",
            "funcEndAddr": "0x407ddc",
            "decompiledFuncCode": "extern uint128_t g_60e420;\nextern uint128_t g_60e430;\nextern uint128_t g_60e440;\nextern unsigned long long g_60e450;\n\nint sub_407d70()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60e420;\n    *((uint128_t *)&v1) = g_60e430;\n    *((uint128_t *)&v2) = g_60e440;\n    v4 = g_60e450;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_407630();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4084b0",
            "funcStartAddr": "0x4084b0",
            "funcEndAddr": "0x4084e0",
            "decompiledFuncCode": "int sub_4084b0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4086a0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4061c0",
            "funcStartAddr": "0x4061c0",
            "funcEndAddr": "0x406249",
            "decompiledFuncCode": "int sub_4061c0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r12d\n    unsigned long long v6;  // rax\n    unsigned int v8;  // ebp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // rax\n\n    v10 = fopen(v2, v3);\n    if (v10 != 0)\n    {\n        v4 = fileno(v10);\n        if (v4 <= 2)\n        {\n            v5 = sub_407ea0();\n            if (v5 >= 0)\n            {\n                v6 = sub_4086e0();\n                if (v6 == 0)\n                {\n                    v10 = fdopen(v5, v3);\n                }\n                if (v10 == 0 || v6 != 0)\n                {\n                    v8 = *((int *)v10);\n                    close(v5);\n                    *(__errno_location()) = v8;\n                    v10 = 0;\n                }\n            }\n            else\n            {\n                v10 = 0;\n                sub_4086e0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_402c90",
            "funcStartAddr": "0x402c90",
            "funcEndAddr": "0x40305d",
            "decompiledFuncCode": "extern unsigned int g_409efb;\nextern unsigned int g_40a020;\nextern unsigned int g_40a048;\nextern unsigned int g_40a090;\nextern unsigned int g_40a0c8;\nextern unsigned int g_40a0f8;\nextern unsigned int g_40a140;\nextern unsigned int g_40a178;\nextern unsigned int g_40a1b0;\nextern unsigned int g_40a368;\nextern unsigned int g_40a398;\nextern unsigned int g_40a3d0;\nextern unsigned int g_40a528;\nextern unsigned int g_40a570;\nextern unsigned int g_40a590;\nextern unsigned long long stdout;\n\nint sub_402c90()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v31;  // rax\n    char *v32;  // rdi\n    char *v33;  // rsi\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    char *v41;  // rax\n    char *v42;  // rax\n    unsigned long long v43;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x40a020, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a048, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a090, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a0c8, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a0f8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a140, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a178, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a1b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a368, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a398, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3d0, 0x5));\n        v0 = \"[\";\n        v31 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v31 = &v2;\n            v32 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v33 = \"sha256sum\";\n            v34 = 10;\n            if ((v35 > v36) - 0 - (v35 < v36) == 0)\n            {\n                break;\n            }\n            while (v34 != 0)\n            {\n                v34 -= 1;\n                v35 = *(v33);\n                v36 = *(v32);\n                v32 = &v32[v37];\n                v33 = &v33[v37];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409efb, 0x5));\n            v42 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409efb, 0x5));\n            v41 = setlocale(0x5, 0x0);\n            if (v41 != 0)\n            {\n                v43 = strncmp(v41, \"en_\", 0x3);\n            }\n            if (v43 == 0 || v41 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a570, 0x5));\n            }\n        }\n        if ((v3 == 0 || v42 != 0) && (v3 == 0 || strncmp(v42, \"en_\", 0x3) != 0) && (v43 != 0 || v3 != 0) && (v41 != 0 || v3 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a528, 0x5));\n        }\n        if (v3 != 0 || v43 != 0 && v41 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a570, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a590, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407ea0",
            "funcStartAddr": "0x407ea0",
            "funcEndAddr": "0x407eae",
            "decompiledFuncCode": "int sub_407ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_4096b0",
            "funcStartAddr": "0x4096b0",
            "funcEndAddr": "0x4096c5",
            "decompiledFuncCode": "int sub_4096b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409040();\n}\n"
        },
        {
            "funcName": "sub_409790",
            "funcStartAddr": "0x409790",
            "funcEndAddr": "0x4097ec",
            "decompiledFuncCode": "int sub_409790()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4086e0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409e48",
            "funcStartAddr": "0x409e48",
            "funcEndAddr": "0x409e68",
            "decompiledFuncCode": "extern unsigned long long g_60de30;\n\nint sub_409e48()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60de30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406020",
            "funcStartAddr": "0x406020",
            "funcEndAddr": "0x40615d",
            "decompiledFuncCode": "int sub_406020()\n{\n    unsigned long long v0;  // [bp-0xd8]\n    unsigned long long v1;  // [bp-0xd0]\n    unsigned long long v2;  // [bp-0xc8]\n    unsigned long long v3;  // [bp-0xc0]\n    unsigned long long v4;  // [bp-0xb8]\n    unsigned long long v5;  // [bp-0xb0]\n    unsigned long v8;  // r12\n    void *v9;  // r12\n    unsigned long long v10;  // rbx\n    unsigned int *v11;  // rdi\n    unsigned long long v12;  // rax\n    unsigned long long v16;  // rdi\n\n    if (v8 != 0)\n    {\n        v4 = 0;\n        v8 = malloc(0x8048);\n        v0 = 3926247204440088280;\n        v1 = -644479594506691305;\n        v2 = 7518782744944446257;\n        v3 = 13761399178871279527;\n        v5 = 0;\n        while (true)\n        {\n            v10 = 0;\n            while (true)\n            {\n                v12 = fread_unlocked(v9 + v10, 0x1, 0x8000 - v10, v11);\n                v10 += v12;\n                if (v10 != 0x8000)\n                {\n                    if (v12 == 0 && ((char)*(v11) & 32) != 0)\n                    {\n                        free(v9);\n                        return 1;\n                    }\n                    if (((char)*(v11) & 32) == 0 && v12 == 0 || ((char)*(v11) & 16) != 0 && v12 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            sub_405ac0();\n                        }\n                        sub_405990();\n                        v16 = &v0;\n                        4207072();\n                        free(v9);\n                        return 0;\n                    }\n                }\n                else\n                {\n                    sub_403200();\n                }\n            }\n        }\n    }\n    else\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_403200",
            "funcStartAddr": "0x403200",
            "funcEndAddr": "0x405984",
            "decompiledFuncCode": "int sub_403200()\n{\n    void tmp_109;  // tmp #109\n    void tmp_110;  // tmp #110\n    void tmp_367;  // tmp #367\n    void tmp_379;  // tmp #379\n    void tmp_646;  // tmp #646\n    void tmp_692;  // tmp #692\n    void tmp_742;  // tmp #742\n    void tmp_994;  // tmp #994\n    void tmp_326;  // tmp #326\n    void tmp_464;  // tmp #464\n    void tmp_485;  // tmp #485\n    void tmp_729;  // tmp #729\n    void tmp_750;  // tmp #750\n    void tmp_674;  // tmp #674\n    void tmp_923;  // tmp #923\n    void tmp_944;  // tmp #944\n    void tmp_282;  // tmp #282\n    void tmp_377;  // tmp #377\n    void tmp_465;  // tmp #465\n    void tmp_572;  // tmp #572\n    void tmp_668;  // tmp #668\n    void tmp_948;  // tmp #948\n    void tmp_972;  // tmp #972\n    void tmp_973;  // tmp #973\n    void tmp_398;  // tmp #398\n    void tmp_403;  // tmp #403\n    void tmp_612;  // tmp #612\n    void tmp_654;  // tmp #654\n    void tmp_769;  // tmp #769\n    unsigned int v0;  // [bp-0xf8]\n    void tmp_989;  // tmp #989\n    void tmp_1004;  // tmp #1004\n    void tmp_1066;  // tmp #1066\n    void tmp_1071;  // tmp #1071\n    void tmp_334;  // tmp #334\n    void tmp_364;  // tmp #364\n    void tmp_380;  // tmp #380\n    void tmp_688;  // tmp #688\n    void tmp_737;  // tmp #737\n    void tmp_790;  // tmp #790\n    void tmp_791;  // tmp #791\n    void tmp_1005;  // tmp #1005\n    void tmp_1038;  // tmp #1038\n    void tmp_842;  // tmp #842\n    void tmp_427;  // tmp #427\n    void tmp_879;  // tmp #879\n    void tmp_463;  // tmp #463\n    void tmp_531;  // tmp #531\n    void tmp_532;  // tmp #532\n    void tmp_579;  // tmp #579\n    void tmp_961;  // tmp #961\n    void tmp_983;  // tmp #983\n    void tmp_300;  // tmp #300\n    void tmp_340;  // tmp #340\n    void tmp_622;  // tmp #622\n    void tmp_699;  // tmp #699\n    void tmp_752;  // tmp #752\n    void tmp_753;  // tmp #753\n    void tmp_963;  // tmp #963\n    void tmp_1058;  // tmp #1058\n    void tmp_295;  // tmp #295\n    void tmp_317;  // tmp #317\n    void tmp_391;  // tmp #391\n    void tmp_687;  // tmp #687\n    void tmp_711;  // tmp #711\n    void tmp_712;  // tmp #712\n    void tmp_863;  // tmp #863\n    void tmp_357;  // tmp #357\n    void tmp_358;  // tmp #358\n    void tmp_536;  // tmp #536\n    void tmp_705;  // tmp #705\n    void tmp_726;  // tmp #726\n    void tmp_717;  // tmp #717\n    void tmp_755;  // tmp #755\n    void tmp_942;  // tmp #942\n    void tmp_947;  // tmp #947\n    void tmp_952;  // tmp #952\n    void tmp_1010;  // tmp #1010\n    void tmp_262;  // tmp #262\n    void tmp_290;  // tmp #290\n    void tmp_450;  // tmp #450\n    void tmp_546;  // tmp #546\n    void tmp_850;  // tmp #850\n    void tmp_951;  // tmp #951\n    void tmp_578;  // tmp #578\n    void tmp_625;  // tmp #625\n    void tmp_641;  // tmp #641\n    void tmp_749;  // tmp #749\n    void tmp_760;  // tmp #760\n    void tmp_770;  // tmp #770\n    void tmp_871;  // tmp #871\n    void tmp_928;  // tmp #928\n    void tmp_1025;  // tmp #1025\n    void tmp_385;  // tmp #385\n    void tmp_517;  // tmp #517\n    void tmp_548;  // tmp #548\n    void tmp_549;  // tmp #549\n    void tmp_672;  // tmp #672\n    void tmp_772;  // tmp #772\n    void tmp_890;  // tmp #890\n    void tmp_903;  // tmp #903\n    void tmp_958;  // tmp #958\n    void tmp_959;  // tmp #959\n    void tmp_297;  // tmp #297\n    void tmp_312;  // tmp #312\n    void tmp_439;  // tmp #439\n    void tmp_480;  // tmp #480\n    void tmp_576;  // tmp #576\n    void tmp_676;  // tmp #676\n    void tmp_759;  // tmp #759\n    void tmp_761;  // tmp #761\n    void tmp_513;  // tmp #513\n    void tmp_757;  // tmp #757\n    void tmp_773;  // tmp #773\n    void tmp_939;  // tmp #939\n    void tmp_284;  // tmp #284\n    void tmp_715;  // tmp #715\n    void tmp_332;  // tmp #332\n    void tmp_283;  // tmp #283\n    void tmp_361;  // tmp #361\n    void tmp_540;  // tmp #540\n    void tmp_721;  // tmp #721\n    void tmp_736;  // tmp #736\n    void tmp_966;  // tmp #966\n    void tmp_277;  // tmp #277\n    void tmp_560;  // tmp #560\n    void tmp_569;  // tmp #569\n    void tmp_616;  // tmp #616\n    void tmp_632;  // tmp #632\n    void tmp_727;  // tmp #727\n    void tmp_738;  // tmp #738\n    void tmp_748;  // tmp #748\n    void tmp_921;  // tmp #921\n    void tmp_460;  // tmp #460\n    void tmp_644;  // tmp #644\n    void tmp_658;  // tmp #658\n    void tmp_703;  // tmp #703\n    void tmp_816;  // tmp #816\n    void tmp_852;  // tmp #852\n    void tmp_853;  // tmp #853\n    void tmp_919;  // tmp #919\n    void tmp_937;  // tmp #937\n    void tmp_406;  // tmp #406\n    void tmp_431;  // tmp #431\n    void tmp_558;  // tmp #558\n    void tmp_785;  // tmp #785\n    void tmp_800;  // tmp #800\n    void tmp_801;  // tmp #801\n    void tmp_910;  // tmp #910\n    void tmp_932;  // tmp #932\n    void tmp_1006;  // tmp #1006\n    void tmp_461;  // tmp #461\n    void tmp_522;  // tmp #522\n    unsigned int v1;  // [bp-0xf4]\n    unsigned int v2;  // [bp-0xf0]\n    unsigned int v3;  // [bp-0xec]\n    unsigned int v4;  // [bp-0xe8]\n    unsigned int v5;  // [bp-0xe4]\n    unsigned int v6;  // [bp-0xe0]\n    unsigned int v7;  // [bp-0xdc]\n    unsigned int v8;  // [bp-0xd8]\n    unsigned int v9;  // [bp-0xd4]\n    unsigned int v10;  // [bp-0xd0]\n    unsigned int v11;  // [bp-0xcc]\n    unsigned int v12;  // [bp-0xc8]\n    unsigned int v13;  // [bp-0xc4]\n    unsigned long long v14;  // [bp-0xc0]\n    unsigned int v15;  // [bp-0xb8]\n    unsigned int v16;  // [bp-0xb4]\n    unsigned int v17;  // [bp-0xb0]\n    unsigned int v18;  // [bp-0xac]\n    unsigned int v19;  // [bp-0xa8]\n    unsigned int v20;  // [bp-0xa4]\n    unsigned int v21;  // [bp-0xa0]\n    unsigned int v22;  // [bp-0x9c]\n    unsigned int v23;  // [bp-0x98]\n    unsigned int v24;  // [bp-0x94]\n    unsigned int v25;  // [bp-0x90]\n    unsigned int v26;  // [bp-0x8c]\n    unsigned long v27;  // [bp-0x88]\n    unsigned int v28[9];  // [bp-0x80]\n    unsigned int v29;  // [bp-0x78]\n    unsigned int v30;  // [bp-0x74]\n    unsigned int v31;  // [bp-0x70]\n    unsigned int v32;  // [bp-0x6c]\n    unsigned int v33;  // [bp-0x68]\n    unsigned int v34;  // [bp-0x64]\n    unsigned int v35;  // [bp-0x60]\n    unsigned int v36;  // [bp-0x5c]\n    unsigned int v37;  // [bp-0x58]\n    unsigned int v38;  // [bp-0x54]\n    unsigned int v39;  // [bp-0x50]\n    unsigned int v40;  // [bp-0x4c]\n    unsigned int v41;  // [bp-0x48]\n    unsigned int v42;  // [bp-0x44]\n    unsigned int v43;  // [bp-0x40]\n    unsigned int v44;  // [bp-0x3c]\n    unsigned int v46[10];  // rdx\n    unsigned int v47[10];  // rbx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r12\n    unsigned long long v50;  // r10\n    unsigned long long v51;  // rbp\n    unsigned long long v52;  // rdi\n    unsigned int v53;  // edi\n    unsigned long long v55;  // r9\n    unsigned long long v56;  // rdx\n    char v57;  // dil\n    unsigned int v58;  // esi\n    unsigned long long v59;  // r8\n    unsigned long long v60;  // rax\n    unsigned long long v62;  // rcx\n    unsigned long long v63;  // r15\n    unsigned long long v64;  // r14\n    unsigned long long v65;  // r12\n    unsigned int v66;  // esi\n    unsigned long long v67;  // r9\n    unsigned long long v68;  // r8\n    unsigned long long v70;  // rcx\n    unsigned int v71;  // eax\n    unsigned int v74;  // ebx\n    unsigned long long v75;  // rdx\n    unsigned int v76;  // edi\n    unsigned long long v77;  // rsi\n    unsigned long long v78;  // r11\n    unsigned long long v80;  // r9\n    unsigned long long v81;  // r8\n    unsigned long long v82;  // rax\n    unsigned long long v83;  // rbx\n    unsigned long long v84;  // rcx\n    unsigned long long v85;  // rdi\n    unsigned long long v86;  // rdx\n    unsigned long long v88;  // rsi\n    unsigned long long v89;  // r11\n    unsigned long long v92;  // r10\n    unsigned long long v93;  // rax\n    unsigned long long v94;  // r9\n    unsigned long long v95;  // rcx\n    unsigned long long v96;  // rbp\n    unsigned long long v97;  // r8\n    unsigned long long v99;  // rsi\n    unsigned long long v100;  // rdx\n    unsigned long v101;  // rdi\n    unsigned long long v102;  // rbx\n    unsigned long long v103;  // r10\n    unsigned long long v104;  // rsi\n    unsigned long long v106;  // r9\n    unsigned long long v107;  // rdi\n    unsigned long long v109;  // r8\n    unsigned long long v110;  // r14\n    unsigned long long v111;  // rbx\n    unsigned long long v112;  // rcx\n    unsigned long long v113;  // r11\n    unsigned long long v114;  // rsi\n    unsigned long long v115;  // r13\n    unsigned long long v116;  // rbp\n    unsigned long long v117;  // rdx\n    unsigned long long v118;  // r10\n    unsigned long long v119;  // rax\n    unsigned long long v120;  // r10\n    unsigned long long v121;  // rdi\n    unsigned long long v122;  // r13\n    unsigned long v123;  // r9\n    unsigned long long v125;  // r14\n    unsigned long v126;  // cc_ndep\n    unsigned long long v127;  // rbp\n    unsigned long long v128;  // cc_dep1\n    unsigned long v129;  // cc_dep2\n    unsigned long long v131;  // r8\n    unsigned long long v132;  // r12\n    unsigned long v133;  // r8\n    unsigned long long v134;  // rcx\n    unsigned long long v135;  // rbp\n    unsigned long long v136;  // rax\n    unsigned long long v137;  // rdx\n    unsigned long v138;  // cc_ndep\n    unsigned long long v139;  // r15\n    unsigned long v140;  // rsi\n    unsigned long long v141;  // rbx\n    unsigned long long v142;  // rbx\n    unsigned long long v143;  // r13\n    unsigned long long v144;  // rax\n    unsigned long long v145;  // r14\n    unsigned long v146;  // rdi\n    unsigned long v148;  // cc_ndep\n    unsigned long long v149;  // rsi\n    unsigned long long v150;  // r12\n    unsigned long long v151;  // rdi\n    unsigned long long v152;  // rbp\n    unsigned long long v153;  // rsi\n    unsigned long long v155;  // r14\n    unsigned long long v156;  // rdx\n    unsigned long long v157;  // rcx\n    unsigned long long v158;  // rbx\n    unsigned long long v159;  // rcx\n    unsigned long long v160;  // r13\n    unsigned long long v161;  // rdx\n    unsigned long long v162;  // r14\n    unsigned long long v163;  // rax\n    unsigned long long v164;  // r15\n    unsigned long long v165;  // r12\n    unsigned long long v166;  // rax\n    unsigned long long v167;  // rbp\n    unsigned long long v168;  // r15\n    unsigned long long v169;  // rdi\n    unsigned long long v170;  // r14\n    unsigned long long v171;  // rbx\n    unsigned long long v172;  // rsi\n    unsigned long long v173;  // r15\n    unsigned long long v174;  // r14\n    unsigned long long v175;  // r13\n    unsigned long v176;  // cc_ndep\n    unsigned long v177;  // rdx\n    unsigned long long v178;  // rcx\n    unsigned long long v179;  // rcx\n    unsigned long long v180;  // r14\n    unsigned long long v181;  // rdx\n    unsigned long long v182;  // r15\n    unsigned long long v183;  // r12\n    unsigned long v184;  // cc_ndep\n    unsigned long long v185;  // rax\n    unsigned long long v186;  // cc_dep2\n    unsigned long long v187;  // rbp\n    unsigned long long v188;  // rdi\n    unsigned long long v189;  // rax\n    unsigned long long v190;  // r15\n    unsigned long long v191;  // rsi\n    unsigned long long v192;  // r11\n    unsigned long v193;  // cc_ndep\n    unsigned long long v195;  // r12\n    unsigned long long v196;  // rbx\n    unsigned long long v197;  // rbp\n    unsigned long long v198;  // r13\n    unsigned long long v199;  // rcx\n    unsigned long long v200;  // r10\n    unsigned long long v201;  // r13\n    unsigned long long v202;  // r14\n    unsigned long long v203;  // rbp\n    unsigned long long v204;  // r9\n    unsigned long v205;  // cc_ndep\n    unsigned long long v206;  // rdx\n    unsigned long long v207;  // rbx\n    unsigned long long v208;  // r12\n    unsigned long long v209;  // rax\n    unsigned long long v210;  // r8\n    unsigned long long v211;  // r13\n    unsigned long long v212;  // rdx\n    unsigned long long v213;  // r11\n    unsigned long v214;  // cc_ndep\n    unsigned long v215;  // rsi\n    unsigned long long v216;  // rbx\n    unsigned long long v217;  // rbx\n    unsigned long long v218;  // r14\n    unsigned long long v219;  // r10\n    unsigned long long v220;  // r15\n    unsigned long long v221;  // r12\n    unsigned long long v222;  // rsi\n    unsigned long long v223;  // rbp\n    unsigned long long v224;  // rcx\n    unsigned long v226;  // cc_ndep\n    unsigned long long v227;  // rdx\n    unsigned long long v228;  // r9\n    unsigned long long v229;  // rdi\n    unsigned long long v230;  // r14\n    unsigned long long v231;  // r8\n    unsigned long long v232;  // rsi\n    unsigned long v233;  // cc_ndep\n    unsigned long long v234;  // r12\n    unsigned long long v235;  // rbp\n    unsigned int v236;  // r13d\n    unsigned long long v237;  // rax\n    unsigned long long v238;  // rcx\n    unsigned long long v239;  // rdx\n    unsigned long long v240;  // r11\n    unsigned long long v241;  // rbx\n    unsigned long long v242;  // r11\n    unsigned long long v243;  // rbp\n    unsigned long long v244;  // r14\n    unsigned long long v245;  // r15\n    unsigned long long v246;  // r10\n    unsigned long v247;  // cc_ndep\n    unsigned long long v248;  // rax\n    unsigned long long v249;  // rcx\n    unsigned long v251;  // r12\n    unsigned long long v252;  // rdx\n    unsigned long long v253;  // r13\n    unsigned long long v254;  // rbp\n    unsigned long long v255;  // r9\n    unsigned long long v256;  // r12\n    unsigned long long v257;  // rdi\n    unsigned long long v258;  // r14\n    unsigned long long v260;  // rax\n    unsigned long v261;  // cc_ndep\n    unsigned long v262;  // rsi\n    unsigned long long v263;  // rdx\n    unsigned long long v264;  // r8\n    unsigned long long v265;  // rdx\n    unsigned long long v266;  // rbx\n    unsigned long long v267;  // r8\n    unsigned long long v268;  // rcx\n    unsigned int v269;  // r12d\n    unsigned long long v270;  // r15\n    unsigned long long v271;  // rdi\n    unsigned long v273;  // r13\n    unsigned long v274;  // cc_ndep\n    unsigned long long v275;  // rsi\n    unsigned long long v276;  // r11\n    unsigned long long v277;  // r13\n    unsigned long long v278;  // rbx\n    unsigned long long v279;  // rsi\n    unsigned long long v280;  // r14\n    unsigned long long v281;  // r9\n    unsigned long long v282;  // rdi\n    unsigned long long v283;  // r15\n    unsigned long long v284;  // rbp\n    unsigned long long v285;  // rdx\n    unsigned long long v286;  // rax\n    unsigned long long v287;  // rbx\n    unsigned long long v288;  // rcx\n    unsigned long long v289;  // r10\n    unsigned long long v292;  // r15\n    unsigned long long v293;  // r12\n    unsigned long long v294;  // r13\n    unsigned long long v295;  // r9\n    unsigned long long v296;  // rbp\n    unsigned long long v297;  // r11\n    unsigned long long v298;  // rbx\n    unsigned long long v299;  // rsi\n    unsigned long long v300;  // r14\n    unsigned long v301;  // rdi\n    unsigned long long v302;  // r8\n    unsigned long long v303;  // r8\n    unsigned long long v304;  // rbx\n    unsigned long long v305;  // rax\n    unsigned long long v306;  // rdi\n    unsigned long long v307;  // r11\n    unsigned long long v308;  // r15\n    unsigned long long v309;  // rdx\n    unsigned long v310;  // cc_ndep\n    unsigned long v311;  // rcx\n    unsigned long long v312;  // r10\n    unsigned long long v313;  // rsi\n    unsigned long long v314;  // r9\n    unsigned long long v315;  // rcx\n    unsigned long long v316;  // r14\n    unsigned long long v317;  // r15\n    unsigned long long v318;  // r13\n    unsigned long v319;  // cc_ndep\n    unsigned long v320;  // rdx\n    unsigned long long v321;  // r8\n    unsigned long long v322;  // rdx\n    unsigned long long v323;  // rdi\n    unsigned long long v324;  // rax\n    unsigned long long v325;  // r14\n    unsigned long v326;  // cc_ndep\n    unsigned long long v327;  // r13\n    unsigned long long v328;  // r15\n    unsigned long long v329;  // rsi\n    unsigned long long v330;  // r10\n    unsigned long long v331;  // rbp\n    unsigned long long v332;  // rcx\n    unsigned long long v333;  // r9\n    unsigned long v334;  // cc_ndep\n    unsigned long long v335;  // rbx\n    unsigned long long v336;  // rdx\n    unsigned long long v337;  // r14\n    unsigned long long v338;  // r12\n    unsigned long long v341;  // rax\n    unsigned long v343;  // r8\n    unsigned long long v344;  // r14\n    unsigned long v345;  // rdi\n    unsigned long long v346;  // r10\n    unsigned int v347;  // ebx\n    unsigned long v348;  // rsi\n    unsigned long long v350;  // r11\n    unsigned int v351;  // r9d\n    unsigned int v352;  // r11d\n    unsigned long long v353;  // r14\n    unsigned int v354;  // r12d\n    unsigned int v355;  // ecx\n    unsigned int v357;  // edx\n    unsigned int v358;  // esi\n    unsigned int v359;  // eax\n    unsigned int v360;  // edx\n\n    v47 = v46;\n    v48 = v46[1];\n    v49 = v46[1 + 1];\n    v50 = v46[2];\n    v51 = v46[2 + 1];\n    v14 = v52;\n    v53 = 0;\n    tmp_109 = v46[4];\n    tmp_110 = v58 + v46[4];\n    v55 = v46[3];\n    *((unsigned int *[10])&v28[0]) = v46;\n    v56 = v46[0];\n    v57 = [D] amd64g_calculate_condition(0x2<64>, 0x3<64>, rsi<8>, t109, cc_ndep<8>);\n    v47[4] = tmp_110;\n    v58 = v58 % 0x100000000;\n    v59 = v47[3 + 1];\n    v27 = (v58 & -4) + v52;\n    v60 = v47[1];\n    v47[4 + 1] = v47[4 + 1] + v58 + rdi<4>;\n    if (v52 < v27)\n    {\n        v22 = v47[3 + 1];\n        v21 = v55;\n        v20 = v51;\n        v19 = v50;\n        v18 = v49;\n        v17 = v48;\n        v16 = v47[1];\n        v26 = v56;\n        do\n        {\n            v62 = 0;\n            do\n            {\n                v29 = *((int *)(v14 + v62)) * 0x1000000 | *((int *)(v14 + v62)) * 0x100 & 0xff0000 | *((int *)(v14 + v62)) >> 8 & 0xff00 | *((int *)(v14 + v62)) >> 24 & 255;\n                v62 += 4;\n            }\n            while (v62 != 64);\n            v14 += 64;\n            v63 = v31;\n            tmp_367 = (unsigned int)(v29 + v59 + 1116352408) + (((unsigned int)v50 * 128 | (unsigned int)v50 >> 25) ^ ((unsigned int)v50 >> 11 | (unsigned int)v50 * 0x200000) ^ ((unsigned int)v50 >> 6 | (unsigned int)v50 * 0x4000000));\n            tmp_379 = ((unsigned int)v51 ^ (unsigned int)v55) & (unsigned int)v50 ^ (unsigned int)v55;\n            v64 = (unsigned int)(v29 + v59 + 1116352408) + (((unsigned int)v50 * 128 | (unsigned int)v50 >> 25) ^ ((unsigned int)v50 >> 11 | (unsigned int)v50 * 0x200000) ^ ((unsigned int)v50 >> 6 | (unsigned int)v50 * 0x4000000)) + (((unsigned int)v51 ^ (unsigned int)v55) & (unsigned int)v50 ^ (unsigned int)v55) + v18;\n            v65 = v30;\n            v66 = ((v26 | (unsigned int)v60) & v17 | v26 & (unsigned int)v60) + ((v26 >> 13 | v26 * 0x80000) ^ (v26 >> 2 | v26 * 0x40000000) ^ (v26 * 0x400 | v26 >> 22)) + (unsigned int)(v29 + v59 + 1116352408) + (((unsigned int)v50 * 128 | (unsigned int)v50 >> 25) ^ ((unsigned int)v50 >> 11 | (unsigned int)v50 * 0x200000) ^ ((unsigned int)v50 >> 6 | (unsigned int)v50 * 0x4000000)) + (((unsigned int)v51 ^ (unsigned int)v55) & (unsigned int)v50 ^ (unsigned int)v55);\n            tmp_646 = (((unsigned int)v64 * 128 | (unsigned int)v64 >> 25) ^ ((unsigned int)v64 >> 11 | (unsigned int)v64 * 0x200000) ^ ((unsigned int)v64 >> 6 | (unsigned int)v64 * 0x4000000)) + (unsigned int)(v65 + v55 + 1899447441) + (((unsigned int)v50 ^ (unsigned int)v51) & (unsigned int)v64 ^ (unsigned int)v51);\n            v67 = (((unsigned int)v64 * 128 | (unsigned int)v64 >> 25) ^ ((unsigned int)v64 >> 11 | (unsigned int)v64 * 0x200000) ^ ((unsigned int)v64 >> 6 | (unsigned int)v64 * 0x4000000)) + (unsigned int)(v65 + v55 + 1899447441) + (((unsigned int)v50 ^ (unsigned int)v51) & (unsigned int)v64 ^ (unsigned int)v51) + v17;\n            v68 = ...;\n            v70 = (((unsigned int)(tmp_646 + (unsigned long long)v17) * 128 | (unsigned int)(tmp_646 + (unsigned long long)v17) >> 25) ^ ((unsigned int)(tmp_646 + (unsigned long long)v17) >> 11 | (unsigned int)(tmp_646 + (unsigned long long)v17) * 0x200000) ^ ((unsigned int)(tmp_646 + (unsigned long long)v17) >> 6 | (unsigned int)(tmp_646 + (unsigned long long)v17) * 0x4000000)) + (unsigned int)(v63 + v51 - 1245643825) + (((unsigned int)v64 ^ (unsigned int)v50) & (unsigned int)(tmp_646 + (unsigned long long)v17) ^ (unsigned int)v50) + v60;\n            v71 = ...;\n            v74 = ((v66 | (unsigned int)v68) & v26 | v66 & (unsigned int)v68) + v71 + (((unsigned int)(tmp_646 + (unsigned long long)v17) * 128 | (unsigned int)(tmp_646 + (unsigned long long)v17) >> 25) ^ ((unsigned int)(tmp_646 + (unsigned long long)v17) >> 11 | (unsigned int)(tmp_646 + (unsigned long long)v17) * 0x200000) ^ ((unsigned int)(tmp_646 + (unsigned long long)v17) >> 6 | (unsigned int)(tmp_646 + (unsigned long long)v17) * 0x4000000)) + (unsigned int)(v63 + v51 - 1245643825) + (((unsigned int)v64 ^ (unsigned int)v50) & (unsigned int)(tmp_646 + (unsigned long long)v17) ^ (unsigned int)v50);\n            v75 = v26 + (((unsigned int)v70 * 128 | (unsigned int)v70 >> 25) ^ ((unsigned int)v70 >> 11 | (unsigned int)v70 * 0x200000) ^ ((unsigned int)v70 >> 6 | (unsigned int)v70 * 0x4000000)) + (unsigned int)(v50 + v32 - 373957723) + (((unsigned int)v64 ^ (unsigned int)v67) & (unsigned int)v70 ^ (unsigned int)v64);\n            v76 = (((unsigned int)v68 | v74) & v66 | (unsigned int)v68 & rbx<8>) + (((unsigned int)rbx<8> >> 13 | (unsigned int)rbx<8> * 0x80000) ^ ((unsigned int)rbx<8> >> 2 | (unsigned int)rbx<8> * 0x40000000) ^ ((unsigned int)rbx<8> * 0x400 | (unsigned int)rbx<8> >> 22)) + (((unsigned int)v70 * 128 | (unsigned int)v70 >> 25) ^ ((unsigned int)v70 >> 11 | (unsigned int)v70 * 0x200000) ^ ((unsigned int)v70 >> 6 | (unsigned int)v70 * 0x4000000)) + (unsigned int)(v50 + v32 - 373957723) + (((unsigned int)v64 ^ (unsigned int)v67) & (unsigned int)v70 ^ (unsigned int)v64);\n            v77 = v66 + (((unsigned int)v75 * 128 | (unsigned int)v75 >> 25) ^ ((unsigned int)v75 >> 11 | (unsigned int)v75 * 0x200000) ^ ((unsigned int)v75 >> 6 | (unsigned int)v75 * 0x4000000)) + (unsigned int)(v33 + v64 + 961987163) + (((unsigned int)v67 ^ (unsigned int)v70) & (unsigned int)v75 ^ (unsigned int)v67);\n            v78 = ((v74 | v76) & (unsigned int)v68 | rbx<8> & (unsigned int)rdi<8>) + (((unsigned int)rdi<8> >> 13 | (unsigned int)rdi<8> * 0x80000) ^ ((unsigned int)rdi<8> >> 2 | (unsigned int)rdi<8> * 0x40000000) ^ ((unsigned int)rdi<8> * 0x400 | (unsigned int)rdi<8> >> 22)) + (((unsigned int)v75 * 128 | (unsigned int)v75 >> 25) ^ ((unsigned int)v75 >> 11 | (unsigned int)v75 * 0x200000) ^ ((unsigned int)v75 >> 6 | (unsigned int)v75 * 0x4000000)) + (unsigned int)(v33 + v64 + 961987163) + (((unsigned int)v67 ^ (unsigned int)v70) & (unsigned int)v75 ^ (unsigned int)v67);\n            v80 = (((unsigned int)v77 * 128 | (unsigned int)v77 >> 25) ^ ((unsigned int)v77 >> 11 | (unsigned int)v77 * 0x200000) ^ ((unsigned int)v77 >> 6 | (unsigned int)v77 * 0x4000000)) + (((unsigned int)v70 ^ (unsigned int)v75) & (unsigned int)v77 ^ (unsigned int)v70) + (unsigned int)(v34 + v67 + 1508970993);\n            v81 = v68 + v80;\n            v82 = ((v76 | (unsigned int)v78) & v74 | v76 & ((v74 | rdi<8>) & (unsigned int)v68 | rbx<8> & (unsigned int)rdi<8>) + (((unsigned int)rdi<8> >> 13 | (unsigned int)rdi<8> * 0x80000) ^ ((unsigned int)rdi<8> >> 2 | (unsigned int)rdi<8> * 0x40000000) ^ ((unsigned int)rdi<8> * 0x400 | (unsigned int)rdi<8> >> 22)) + (((unsigned int)v75 * 128 | (unsigned int)v75 >> 25) ^ ((unsigned int)v75 >> 11 | (unsigned int)v75 * 0x200000) ^ ((unsigned int)v75 >> 6 | (unsigned int)v75 * 0x4000000)) + (unsigned int)(v33 + v64 + 961987163) + (((unsigned int)v67 ^ (unsigned int)v70) & (unsigned int)v75 ^ (unsigned int)v67)) + (((unsigned int)v78 >> 13 | (unsigned int)v78 * 0x80000) ^ ((unsigned int)v78 >> 2 | (unsigned int)v78 * 0x40000000) ^ ((unsigned int)v78 * 0x400 | (unsigned int)v78 >> 22)) + (unsigned int)v80;\n            v83 = v74 + (((unsigned int)v81 * 128 | (unsigned int)v81 >> 25) ^ ((unsigned int)v81 >> 11 | (unsigned int)v81 * 0x200000) ^ ((unsigned int)v81 >> 6 | (unsigned int)v81 * 0x4000000)) + (unsigned int)(v35 + v70 - 1841331548) + (((unsigned int)v75 ^ (unsigned int)v77) & (unsigned int)v81 ^ (unsigned int)v75);\n            v84 = (((unsigned int)v78 | (unsigned int)v82) & v76 | (unsigned int)v78 & (unsigned int)v82) + (((unsigned int)v82 >> 13 | (unsigned int)v82 * 0x80000) ^ ((unsigned int)v82 >> 2 | (unsigned int)v82 * 0x40000000) ^ ((unsigned int)v82 * 0x400 | (unsigned int)v82 >> 22)) + (((unsigned int)v81 * 128 | (unsigned int)v81 >> 25) ^ ((unsigned int)v81 >> 11 | (unsigned int)v81 * 0x200000) ^ ((unsigned int)v81 >> 6 | (unsigned int)v81 * 0x4000000)) + (unsigned int)(v35 + v70 - 1841331548) + (((unsigned int)v75 ^ (unsigned int)v77) & (unsigned int)v81 ^ (unsigned int)v75);\n            v85 = v76 + (((unsigned int)v83 * 128 | (unsigned int)v83 >> 25) ^ ((unsigned int)v83 >> 11 | (unsigned int)v83 * 0x200000) ^ ((unsigned int)v83 >> 6 | (unsigned int)v83 * 0x4000000)) + (unsigned int)(v36 + v75 - 1424204075) + (((unsigned int)v77 ^ (unsigned int)v81) & (unsigned int)v83 ^ (unsigned int)v77);\n            v86 = (((unsigned int)v82 | (unsigned int)v84) & (unsigned int)v78 | (unsigned int)v82 & (unsigned int)v84) + (((unsigned int)v84 >> 13 | (unsigned int)v84 * 0x80000) ^ ((unsigned int)v84 >> 2 | (unsigned int)v84 * 0x40000000) ^ ((unsigned int)v84 * 0x400 | (unsigned int)v84 >> 22)) + (((unsigned int)v83 * 128 | (unsigned int)v83 >> 25) ^ ((unsigned int)v83 >> 11 | (unsigned int)v83 * 0x200000) ^ ((unsigned int)v83 >> 6 | (unsigned int)v83 * 0x4000000)) + (unsigned int)(v36 + v75 - 1424204075) + (((unsigned int)v77 ^ (unsigned int)v81) & (unsigned int)v83 ^ (unsigned int)v77);\n            v88 = (((unsigned int)v85 * 128 | (unsigned int)v85 >> 25) ^ ((unsigned int)v85 >> 11 | (unsigned int)v85 * 0x200000) ^ ((unsigned int)v85 >> 6 | (unsigned int)v85 * 0x4000000)) + (((unsigned int)v81 ^ (unsigned int)v83) & (unsigned int)v85 ^ (unsigned int)v81) + (unsigned int)(v37 + v77 - 670586216);\n            v89 = v78 + v88;\n            v92 = (((unsigned int)v84 | (unsigned int)v86) & (unsigned int)v82 | (unsigned int)v84 & (unsigned int)v86) + (((unsigned int)v86 >> 13 | (unsigned int)v86 * 0x80000) ^ ((unsigned int)v86 >> 2 | (unsigned int)v86 * 0x40000000) ^ ((unsigned int)v86 * 0x400 | (unsigned int)v86 >> 22)) + (unsigned int)v88;\n            v93 = (unsigned int)v82 + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83);\n            v94 = (((unsigned int)v86 | (unsigned int)v92) & (unsigned int)v84 | (unsigned int)v86 & (unsigned int)v92) + (((unsigned int)v92 >> 13 | (unsigned int)v92 * 0x80000) ^ ((unsigned int)v92 >> 2 | (unsigned int)v92 * 0x40000000) ^ ((unsigned int)v92 * 0x400 | (unsigned int)v92 >> 22)) + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83);\n            tmp_692 = (unsigned int)v92 & (((unsigned int)v86 | (unsigned int)v92) & (unsigned int)v84 | (unsigned int)v86 & (unsigned int)v92) + (((unsigned int)v92 >> 13 | (unsigned int)v92 * 0x80000) ^ ((unsigned int)v92 >> 2 | (unsigned int)v92 * 0x40000000) ^ ((unsigned int)v92 * 0x400 | (unsigned int)v92 >> 22)) + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83);\n            tmp_742 = ((((unsigned int)v86 | (unsigned int)v92) & (unsigned int)v84 | (unsigned int)v86 & (unsigned int)v92) + (((unsigned int)v92 >> 13 | (unsigned int)v92 * 0x80000) ^ ((unsigned int)v92 >> 2 | (unsigned int)v92 * 0x40000000) ^ ((unsigned int)v92 * 0x400 | (unsigned int)v92 >> 22)) + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83) >> 13 | ((((unsigned int)v86 | (unsigned int)v92) & (unsigned int)v84 | (unsigned int)v86 & (unsigned int)v92) + (((unsigned int)v92 >> 13 | (unsigned int)v92 * 0x80000) ^ ((unsigned int)v92 >> 2 | (unsigned int)v92 * 0x40000000) ^ ((unsigned int)v92 * 0x400 | (unsigned int)v92 >> 22)) + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83)) * 0x80000) ^ ((((unsigned int)v86 | (unsigned int)v92) & (unsigned int)v84 | (unsigned int)v86 & (unsigned int)v92) + (((unsigned int)v92 >> 13 | (unsigned int)v92 * 0x80000) ^ ((unsigned int)v92 >> 2 | (unsigned int)v92 * 0x40000000) ^ ((unsigned int)v92 * 0x400 | (unsigned int)v92 >> 22)) + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83) >> 2 | ((((unsigned int)v86 | (unsigned int)v92) & (unsigned int)v84 | (unsigned int)v86 & (unsigned int)v92) + (((unsigned int)v92 >> 13 | (unsigned int)v92 * 0x80000) ^ ((unsigned int)v92 >> 2 | (unsigned int)v92 * 0x40000000) ^ ((unsigned int)v92 * 0x400 | (unsigned int)v92 >> 22)) + (((unsigned int)v89 * 128 | (unsigned int)v89 >> 25) ^ ((unsigned int)v89 >> 11 | (unsigned int)v89 * 0x200000) ^ ((unsigned int)v89 >> 6 | (unsigned int)v89 * 0x4000000)) + (unsigned int)(v38 + v81 + 310598401) + (((unsigned int)v83 ^ (unsigned int)v85) & (unsigned int)v89 ^ (unsigned int)v83)) * 0x40000000);\n            v95 = (unsigned int)v84 + (((unsigned int)v93 * 128 | (unsigned int)v93 >> 25) ^ ((unsigned int)v93 >> 11 | (unsigned int)v93 * 0x200000) ^ ((unsigned int)v93 >> 6 | (unsigned int)v93 * 0x4000000)) + (unsigned int)(v39 + v83 + 607225278) + (((unsigned int)v85 ^ (unsigned int)v89) & (unsigned int)v93 ^ (unsigned int)v85);\n            v96 = v94;\n            v97 = (((unsigned int)v92 | (unsigned int)v94) & (unsigned int)v86 | (unsigned int)tmp_692) + ((unsigned int)tmp_742 ^ ((unsigned int)v94 * 0x400 | (unsigned int)v94 >> 22)) + (((unsigned int)v93 * 128 | (unsigned int)v93 >> 25) ^ ((unsigned int)v93 >> 11 | (unsigned int)v93 * 0x200000) ^ ((unsigned int)v93 >> 6 | (unsigned int)v93 * 0x4000000)) + (unsigned int)(v39 + v83 + 607225278) + (((unsigned int)v85 ^ (unsigned int)v89) & (unsigned int)v93 ^ (unsigned int)v85);\n            v99 = (((unsigned int)v95 * 128 | (unsigned int)v95 >> 25) ^ ((unsigned int)v95 >> 11 | (unsigned int)v95 * 0x200000) ^ ((unsigned int)v95 >> 6 | (unsigned int)v95 * 0x4000000)) + (unsigned int)(v40 + v85 + 1426881987) + (((unsigned int)v89 ^ (unsigned int)v93) & (unsigned int)v95 ^ (unsigned int)v89);\n            tmp_994 = (((unsigned int)v92 | (unsigned int)v94) & (unsigned int)v86 | (unsigned int)tmp_692) + ((unsigned int)tmp_742 ^ ((unsigned int)v94 * 0x400 | (unsigned int)v94 >> 22)) + (((unsigned int)v93 * 128 | (unsigned int)v93 >> 25) ^ ((unsigned int)v93 >> 11 | (unsigned int)v93 * 0x200000) ^ ((unsigned int)v93 >> 6 | (unsigned int)v93 * 0x4000000)) + (unsigned int)(v39 + v83 + 607225278) + (((unsigned int)v85 ^ (unsigned int)v89) & (unsigned int)v93 ^ (unsigned int)v85) >> 2 | ((((unsigned int)v92 | (unsigned int)v94) & (unsigned int)v86 | (unsigned int)tmp_692) + ((unsigned int)tmp_742 ^ ((unsigned int)v94 * 0x400 | (unsigned int)v94 >> 22)) + (((unsigned int)v93 * 128 | (unsigned int)v93 >> 25) ^ ((unsigned int)v93 >> 11 | (unsigned int)v93 * 0x200000) ^ ((unsigned int)v93 >> 6 | (unsigned int)v93 * 0x4000000)) + (unsigned int)(v39 + v83 + 607225278) + (((unsigned int)v85 ^ (unsigned int)v89) & (unsigned int)v93 ^ (unsigned int)v85)) * 0x40000000;\n            v100 = (unsigned int)v86 + (((unsigned int)v95 * 128 | (unsigned int)v95 >> 25) ^ ((unsigned int)v95 >> 11 | (unsigned int)v95 * 0x200000) ^ ((unsigned int)v95 >> 6 | (unsigned int)v95 * 0x4000000)) + (unsigned int)(v40 + v85 + 1426881987) + (((unsigned int)v89 ^ (unsigned int)v93) & (unsigned int)v95 ^ (unsigned int)v89);\n            v101 = ((unsigned int)v97 >> 13 | (unsigned int)v97 * 0x80000) ^ (unsigned int)tmp_994 ^ (((((unsigned int)v92 | (unsigned int)v94) & (unsigned int)v86 | (unsigned int)tmp_692) + ((unsigned int)tmp_742 ^ ((unsigned int)v94 * 0x400 | (unsigned int)v94 >> 22)) + (((unsigned int)v93 * 128 | (unsigned int)v93 >> 25) ^ ((unsigned int)v93 >> 11 | (unsigned int)v93 * 0x200000) ^ ((unsigned int)v93 >> 6 | (unsigned int)v93 * 0x4000000)) + (unsigned int)(v39 + v83 + 607225278) + (((unsigned int)v85 ^ (unsigned int)v89) & (unsigned int)v93 ^ (unsigned int)v85)) * 0x400 | (((unsigned int)v92 | (unsigned int)v94) & (unsigned int)v86 | (unsigned int)tmp_692) + ((unsigned int)tmp_742 ^ ((unsigned int)v94 * 0x400 | (unsigned int)v94 >> 22)) + (((unsigned int)v93 * 128 | (unsigned int)v93 >> 25) ^ ((unsigned int)v93 >> 11 | (unsigned int)v93 * 0x200000) ^ ((unsigned int)v93 >> 6 | (unsigned int)v93 * 0x4000000)) + (unsigned int)(v39 + v83 + 607225278) + (((unsigned int)v85 ^ (unsigned int)v89) & (unsigned int)v93 ^ (unsigned int)v85) >> 22);\n            v102 = (((unsigned int)v94 | (unsigned int)v97) & (unsigned int)v92 | (unsigned int)v96 & (unsigned int)v97) + (unsigned int)v101 + (unsigned int)v99;\n            tmp_326 = (unsigned int)v97 & (((unsigned int)v94 | (unsigned int)v97) & (unsigned int)v92 | (unsigned int)v96 & (unsigned int)v97) + (unsigned int)v101 + (unsigned int)v99;\n            tmp_464 = (((unsigned int)v94 | (unsigned int)v97) & (unsigned int)v92 | (unsigned int)v96 & (unsigned int)v97) + (unsigned int)v101 + (unsigned int)v99 >> 2 | ((((unsigned int)v94 | (unsigned int)v97) & (unsigned int)v92 | (unsigned int)v96 & (unsigned int)v97) + (unsigned int)v101 + (unsigned int)v99) * 0x40000000;\n            tmp_485 = (((unsigned int)v94 | (unsigned int)v97) & (unsigned int)v92 | (unsigned int)v96 & (unsigned int)v97) + (unsigned int)v101 + (unsigned int)v99 >> 13 | ((((unsigned int)v94 | (unsigned int)v97) & (unsigned int)v92 | (unsigned int)v96 & (unsigned int)v97) + (unsigned int)v101 + (unsigned int)v99) * 0x80000;\n            v103 = (unsigned int)v92 + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93);\n            v104 = (((unsigned int)v97 | (unsigned int)v102) & (unsigned int)v94 | (unsigned int)tmp_326) + ((unsigned int)tmp_485 ^ (unsigned int)tmp_464 ^ ((unsigned int)v102 * 0x400 | (unsigned int)v102 >> 22)) + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93);\n            tmp_729 = (((unsigned int)v97 | (unsigned int)v102) & (unsigned int)v94 | (unsigned int)tmp_326) + ((unsigned int)tmp_485 ^ (unsigned int)tmp_464 ^ ((unsigned int)v102 * 0x400 | (unsigned int)v102 >> 22)) + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93) >> 2 | ((((unsigned int)v97 | (unsigned int)v102) & (unsigned int)v94 | (unsigned int)tmp_326) + ((unsigned int)tmp_485 ^ (unsigned int)tmp_464 ^ ((unsigned int)v102 * 0x400 | (unsigned int)v102 >> 22)) + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93)) * 0x40000000;\n            tmp_750 = (((unsigned int)v97 | (unsigned int)v102) & (unsigned int)v94 | (unsigned int)tmp_326) + ((unsigned int)tmp_485 ^ (unsigned int)tmp_464 ^ ((unsigned int)v102 * 0x400 | (unsigned int)v102 >> 22)) + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93) >> 13 | ((((unsigned int)v97 | (unsigned int)v102) & (unsigned int)v94 | (unsigned int)tmp_326) + ((unsigned int)tmp_485 ^ (unsigned int)tmp_464 ^ ((unsigned int)v102 * 0x400 | (unsigned int)v102 >> 22)) + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93)) * 0x80000;\n            v106 = (unsigned int)v94 + (((unsigned int)v103 * 128 | (unsigned int)v103 >> 25) ^ ((unsigned int)v103 >> 11 | (unsigned int)v103 * 0x200000) ^ ((unsigned int)v103 >> 6 | (unsigned int)v103 * 0x4000000)) + (((unsigned int)v95 ^ (unsigned int)v100) & (unsigned int)v103 ^ (unsigned int)v95) + (unsigned int)(v42 + v93 - 2132889090);\n            v107 = (((unsigned int)v102 | (unsigned int)v104) & (unsigned int)v97 | (unsigned int)v102 & (((unsigned int)v97 | (unsigned int)v102) & (unsigned int)v94 | (unsigned int)tmp_326) + ((unsigned int)tmp_485 ^ (unsigned int)tmp_464 ^ ((unsigned int)v102 * 0x400 | (unsigned int)v102 >> 22)) + (((unsigned int)v100 * 128 | (unsigned int)v100 >> 25) ^ ((unsigned int)v100 >> 11 | (unsigned int)v100 * 0x200000) ^ ((unsigned int)v100 >> 6 | (unsigned int)v100 * 0x4000000)) + (unsigned int)(v41 + v89 + 1925078388) + (((unsigned int)v93 ^ (unsigned int)v95) & (unsigned int)v100 ^ (unsigned int)v93)) + ((unsigned int)tmp_750 ^ (unsigned int)tmp_729 ^ ((unsigned int)v104 * 0x400 | (unsigned int)v104 >> 22)) + (((unsigned int)v103 * 128 | (unsigned int)v103 >> 25) ^ ((unsigned int)v103 >> 11 | (unsigned int)v103 * 0x200000) ^ ((unsigned int)v103 >> 6 | (unsigned int)v103 * 0x4000000)) + (((unsigned int)v95 ^ (unsigned int)v100) & (unsigned int)v103 ^ (unsigned int)v95) + (unsigned int)(v42 + v93 - 2132889090);\n            v109 = (unsigned int)v97 + (((unsigned int)v106 * 128 | (unsigned int)v106 >> 25) ^ ((unsigned int)v106 >> 11 | (unsigned int)v106 * 0x200000) ^ ((unsigned int)v106 >> 6 | (unsigned int)v106 * 0x4000000)) + (unsigned int)(v43 + v95 - 1680079193) + (((unsigned int)v100 ^ (unsigned int)v103) & (unsigned int)v106 ^ (unsigned int)v100);\n            v110 = (((unsigned int)v104 | (unsigned int)v107) & (unsigned int)v102 | (unsigned int)v104 & (unsigned int)v107) + (((unsigned int)v107 >> 13 | (unsigned int)v107 * 0x80000) ^ ((unsigned int)v107 >> 2 | (unsigned int)v107 * 0x40000000) ^ ((unsigned int)v107 * 0x400 | (unsigned int)v107 >> 22)) + (((unsigned int)v106 * 128 | (unsigned int)v106 >> 25) ^ ((unsigned int)v106 >> 11 | (unsigned int)v106 * 0x200000) ^ ((unsigned int)v106 >> 6 | (unsigned int)v106 * 0x4000000)) + (unsigned int)(v43 + v95 - 1680079193) + (((unsigned int)v100 ^ (unsigned int)v103) & (unsigned int)v106 ^ (unsigned int)v100);\n            v111 = (unsigned int)v102 + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103);\n            v112 = (((unsigned int)v107 | (unsigned int)v110) & (unsigned int)v104 | (unsigned int)v107 & (unsigned int)v110) + (((unsigned int)v110 >> 13 | (unsigned int)v110 * 0x80000) ^ ((unsigned int)v110 >> 2 | (unsigned int)v110 * 0x40000000) ^ ((unsigned int)v110 * 0x400 | (unsigned int)v110 >> 22)) + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103);\n            tmp_674 = (unsigned int)v110 & (((unsigned int)v107 | (unsigned int)v110) & (unsigned int)v104 | (unsigned int)v107 & (unsigned int)v110) + (((unsigned int)v110 >> 13 | (unsigned int)v110 * 0x80000) ^ ((unsigned int)v110 >> 2 | (unsigned int)v110 * 0x40000000) ^ ((unsigned int)v110 * 0x400 | (unsigned int)v110 >> 22)) + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103);\n            v113 = (((unsigned int)v65 * 0x4000 | (unsigned int)v65 >> 18) ^ ((unsigned int)v65 >> 7 | (unsigned int)v65 * 0x2000000) ^ (unsigned int)v65 % 8) + ((unsigned int)((unsigned long long)v43 >> 10) ^ (v43 * 0x2000 | v43 >> 19) ^ (v43 * 0x8000 | v43 >> 17)) + v29 + v38;\n            tmp_923 = (((unsigned int)v107 | (unsigned int)v110) & (unsigned int)v104 | (unsigned int)v107 & (unsigned int)v110) + (((unsigned int)v110 >> 13 | (unsigned int)v110 * 0x80000) ^ ((unsigned int)v110 >> 2 | (unsigned int)v110 * 0x40000000) ^ ((unsigned int)v110 * 0x400 | (unsigned int)v110 >> 22)) + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103) >> 2 | ((((unsigned int)v107 | (unsigned int)v110) & (unsigned int)v104 | (unsigned int)v107 & (unsigned int)v110) + (((unsigned int)v110 >> 13 | (unsigned int)v110 * 0x80000) ^ ((unsigned int)v110 >> 2 | (unsigned int)v110 * 0x40000000) ^ ((unsigned int)v110 * 0x400 | (unsigned int)v110 >> 22)) + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103)) * 0x40000000;\n            tmp_944 = (((unsigned int)v107 | (unsigned int)v110) & (unsigned int)v104 | (unsigned int)v107 & (unsigned int)v110) + (((unsigned int)v110 >> 13 | (unsigned int)v110 * 0x80000) ^ ((unsigned int)v110 >> 2 | (unsigned int)v110 * 0x40000000) ^ ((unsigned int)v110 * 0x400 | (unsigned int)v110 >> 22)) + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103) >> 13 | ((((unsigned int)v107 | (unsigned int)v110) & (unsigned int)v104 | (unsigned int)v107 & (unsigned int)v110) + (((unsigned int)v110 >> 13 | (unsigned int)v110 * 0x80000) ^ ((unsigned int)v110 >> 2 | (unsigned int)v110 * 0x40000000) ^ ((unsigned int)v110 * 0x400 | (unsigned int)v110 >> 22)) + (((unsigned int)v109 * 128 | (unsigned int)v109 >> 25) ^ ((unsigned int)v109 >> 11 | (unsigned int)v109 * 0x200000) ^ ((unsigned int)v109 >> 6 | (unsigned int)v109 * 0x4000000)) + (unsigned int)(v44 + v100 - 1046744716) + (((unsigned int)v103 ^ (unsigned int)v106) & (unsigned int)v109 ^ (unsigned int)v103)) * 0x80000;\n            v114 = (unsigned int)v104 + (((unsigned int)v111 * 128 | (unsigned int)v111 >> 25) ^ ((unsigned int)v111 >> 11 | (unsigned int)v111 * 0x200000) ^ ((unsigned int)v111 >> 6 | (unsigned int)v111 * 0x4000000)) + (unsigned int)(v103 + v113 - 459576895) + (((unsigned int)v106 ^ (unsigned int)v109) & (unsigned int)v111 ^ (unsigned int)v106);\n            v115 = v114;\n            v116 = v39;\n            v117 = (((unsigned int)v110 | (unsigned int)v112) & (unsigned int)v107 | (unsigned int)tmp_674) + ((unsigned int)tmp_944 ^ (unsigned int)tmp_923 ^ ((unsigned int)v112 * 0x400 | (unsigned int)v112 >> 22)) + (((unsigned int)v111 * 128 | (unsigned int)v111 >> 25) ^ ((unsigned int)v111 >> 11 | (unsigned int)v111 * 0x200000) ^ ((unsigned int)v111 >> 6 | (unsigned int)v111 * 0x4000000)) + (unsigned int)(v103 + v113 - 459576895) + (((unsigned int)v106 ^ (unsigned int)v109) & (unsigned int)v111 ^ (unsigned int)v106);\n            v118 = v44 * 0x8000 | v44 >> 17;\n            v119 = v44 * 0x2000 | v44 >> 19;\n            tmp_282 = v116 + v65;\n            tmp_377 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Conv(64->32, r15<8>) >> 0x7<8>) | (Conv(64->32, r15<8>) << 0x19<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v120 = (((unsigned int)v63 * 0x4000 | (unsigned int)v63 >> 18) ^ ((unsigned int)v63 >> 7 | (unsigned int)v63 * 0x2000000) ^ (unsigned int)v63 % 8) + (unsigned int)(((unsigned int)((unsigned long long)v44 >> 10) ^ (unsigned int)v119 ^ (unsigned int)v118) + v116 + v65);\n            tmp_465 = v106 + v120 - 272742522;\n            tmp_572 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Conv(64->32, rdx<8>) >> 0x2<8>) | (Conv(64->32, rdx<8>) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v121 = (unsigned int)v107 + (((unsigned int)v114 * 128 | (unsigned int)v114 >> 25) ^ ((unsigned int)v115 >> 11 | (unsigned int)v115 * 0x200000) ^ ((unsigned int)v114 >> 6 | (unsigned int)v114 * 0x4000000)) + (unsigned int)(v106 + v120 - 272742522) + (((unsigned int)v109 ^ (unsigned int)v111) & (unsigned int)v114 ^ (unsigned int)v109);\n            tmp_668 = (((unsigned int)v114 * 128 | (unsigned int)v114 >> 25) ^ ((unsigned int)v115 >> 11 | (unsigned int)v115 * 0x200000) ^ ((unsigned int)v114 >> 6 | (unsigned int)v114 * 0x4000000)) + (unsigned int)(v106 + v120 - 272742522) + (((unsigned int)v109 ^ (unsigned int)v111) & (unsigned int)v114 ^ (unsigned int)v109);\n            v122 = (((unsigned int)v112 | (unsigned int)v117) & (unsigned int)v110 | (unsigned int)v112 & (unsigned int)v117) + (((unsigned int)v117 >> 13 | (unsigned int)v117 * 0x80000) ^ ((unsigned int)v117 >> 2 | (unsigned int)v117 * 0x40000000) ^ ((unsigned int)v117 * 0x400 | (unsigned int)v117 >> 22)) + (((unsigned int)v114 * 128 | (unsigned int)v114 >> 25) ^ ((unsigned int)v115 >> 11 | (unsigned int)v115 * 0x200000) ^ ((unsigned int)v114 >> 6 | (unsigned int)v114 * 0x4000000)) + (unsigned int)(v106 + v120 - 272742522) + (((unsigned int)v109 ^ (unsigned int)v111) & (unsigned int)v114 ^ (unsigned int)v109);\n            v123 = ((unsigned int)((unsigned long long)v32 >> 3) ^ (v32 >> 7 | v32 * 0x2000000) ^ (v32 * 0x4000 | v32 >> 18)) + v40 + (unsigned int)v63 + ((unsigned int)v113 % 0x400 ^ ((unsigned int)v113 * 0x2000 | (unsigned int)v113 >> 19) ^ ((unsigned int)v113 * 0x8000 | (unsigned int)v113 >> 17));\n            tmp_948 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rdi<8>) >> 0xb<8>) | (Conv(64->32, rdi<8>) << 0x15<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x6<8>) | (Conv(64->32, rdi<8>) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_972 = ((unsigned int)v121 * 128 | (unsigned int)v121 >> 25) ^ ((unsigned int)v121 >> 11 | (unsigned int)v121 * 0x200000) ^ ((unsigned int)v121 >> 6 | (unsigned int)v121 * 0x4000000);\n            tmp_973 = (unsigned int)(v109 + v123 + 264347078) + (((unsigned int)v111 ^ (unsigned int)v114) & (unsigned int)v121 ^ (unsigned int)v111);\n            v125 = (unsigned int)v110 + (((unsigned int)v121 * 128 | (unsigned int)v121 >> 25) ^ ((unsigned int)v121 >> 11 | (unsigned int)v121 * 0x200000) ^ ((unsigned int)v121 >> 6 | (unsigned int)v121 * 0x4000000)) + (unsigned int)(v109 + v123 + 264347078) + (((unsigned int)v111 ^ (unsigned int)v114) & (unsigned int)v121 ^ (unsigned int)v111);\n            v126 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r13<8>) >> 0xd<8>) | (Conv(64->32, r13<8>) << 0x13<8>)) ^ ((Conv(64->32, r13<8>) >> 0x2<8>) | (Conv(64->32, r13<8>) << 0x1e<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v127 = (((unsigned int)v63 * 0x4000 | (unsigned int)v63 >> 18) ^ ((unsigned int)v63 >> 7 | (unsigned int)v63 * 0x2000000) ^ (unsigned int)v63 % 8) + (unsigned int)(((unsigned int)((unsigned long long)v44 >> 10) ^ (v44 * 0x2000 | v44 >> 19) ^ (v44 * 0x8000 | v44 >> 17)) + v116 + v65);\n            v128 = ((unsigned int)v117 | (unsigned int)v122) & (unsigned int)v112 | (unsigned int)v117 & (unsigned int)v122;\n            v129 = ((unsigned int)v122 >> 13 | (unsigned int)v122 * 0x80000) ^ ((unsigned int)v122 >> 2 | (unsigned int)v122 * 0x40000000) ^ ((unsigned int)v122 * 0x400 | (unsigned int)v122 >> 22);\n            v131 = (((unsigned int)v63 * 0x4000 | (unsigned int)v63 >> 18) ^ ((unsigned int)v63 >> 7 | (unsigned int)v63 * 0x2000000) ^ (unsigned int)v63 % 8) + (unsigned int)((unsigned long long)((unsigned int)((unsigned long long)v44 >> 10) ^ (v44 * 0x2000 | v44 >> 19) ^ (v44 * 0x8000 | v44 >> 17)) + tmp_282);\n            v132 = (((unsigned int)v117 | (unsigned int)v122) & (unsigned int)v112 | (unsigned int)v117 & (unsigned int)v122) + (((unsigned int)v122 >> 13 | (unsigned int)v122 * 0x80000) ^ ((unsigned int)v122 >> 2 | (unsigned int)v122 * 0x40000000) ^ ((unsigned int)v122 * 0x400 | (unsigned int)v122 >> 22)) + (unsigned long long)((((unsigned int)v121 * 128 | (unsigned int)v121 >> 25) ^ ((unsigned int)v121 >> 11 | (unsigned int)v121 * 0x200000) ^ ((unsigned int)v121 >> 6 | (unsigned int)v121 * 0x4000000)) + (unsigned int)(v109 + v123 + 264347078) + (((unsigned int)v111 ^ (unsigned int)v114) & (unsigned int)v121 ^ (unsigned int)v111));\n            tmp_398 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (Conv(64->32, (r10<8> >> 0xa<8>)) ^ (((Conv(64->32, r8<8>) << 0xd<8>) | (Conv(64->32, r8<8>) >> 0x13<8>)) ^ ((Conv(64->32, rbp<8>) << 0xf<8>) | (Conv(64->32, rbp<8>) >> 0x11<8>))))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_403 = (unsigned int)v132 >> 13 | (unsigned int)v132 * 0x80000;\n            v133 = ((unsigned int)((unsigned long long)v33 >> 3) ^ (v33 >> 7 | v33 * 0x2000000) ^ (v33 * 0x4000 | v33 >> 18)) + v32 + v41 + ((unsigned int)v120 % 0x400 ^ ((unsigned int)v131 * 0x2000 | (unsigned int)v131 >> 19) ^ ((unsigned int)v127 * 0x8000 | (unsigned int)v127 >> 17));\n            tmp_612 = (unsigned int)(v111 + v133 + 604807628) + (((unsigned int)v114 ^ (unsigned int)v121) & (unsigned int)v125 ^ (unsigned int)v114);\n            tmp_654 = v112;\n            v134 = (unsigned int)v112 + (((unsigned int)v125 * 128 | (unsigned int)v125 >> 25) ^ ((unsigned int)v125 >> 11 | (unsigned int)v125 * 0x200000) ^ ((unsigned int)v125 >> 6 | (unsigned int)v125 * 0x4000000)) + (unsigned int)(v111 + v133 + 604807628) + (((unsigned int)v114 ^ (unsigned int)v121) & (unsigned int)v125 ^ (unsigned int)v114);\n            v135 = (((unsigned int)v122 | (unsigned int)v132) & (unsigned int)v117 | (unsigned int)v122 & (unsigned int)v132) + (((unsigned int)v132 >> 13 | (unsigned int)v132 * 0x80000) ^ ((unsigned int)v132 >> 2 | (unsigned int)v132 * 0x40000000) ^ ((unsigned int)v132 * 0x400 | (unsigned int)v132 >> 22)) + (((unsigned int)v125 * 128 | (unsigned int)v125 >> 25) ^ ((unsigned int)v125 >> 11 | (unsigned int)v125 * 0x200000) ^ ((unsigned int)v125 >> 6 | (unsigned int)v125 * 0x4000000)) + (unsigned int)(v111 + v133 + 604807628) + (((unsigned int)v114 ^ (unsigned int)v121) & (unsigned int)v125 ^ (unsigned int)v114);\n            tmp_769 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, ((((Conv(64->32, r13<8>) | Conv(64->32, r12<8>)) & Conv(64->32, rdx<8>)) | (Conv(64->32, r13<8>) & Conv(64->32, r12<8>))) + ((((Conv(64->32, r12<8>) >> 0xd<8>) | (Conv(64->32, r12<8>) << 0x13<8>)) ^ ((Conv(64->32, r12<8>) >> 0x2<8>) | (Conv(64->32, r12<8>) << 0x1e<8>))) ^ ((Conv(64->32, r12<8>) << 0xa<8>) | (Conv(64->32, r12<8>) >> 0x16<8>))))), Conv(32->64, ((((Conv(64->32, r14<8>) << 0x7<8>) | (Conv(64->32, r14<8>) >> 0x19<8>)) ^ (((Conv(64->32, r14<8>) >> 0xb<8>) | (Conv(64->32, r14<8>) << 0x15<8>)) ^ ((Conv(64->32, r14<8>) >> 0x6<8>) | (Conv(64->32, r14<8>) << 0x1a<8>)))) + (Conv(64->32, ((rbx<8> + r8<8>) + 0x240ca1cc<64>)) + (((Conv(64->32, rsi<8>) ^ Conv(64->32, rdi<8>)) & Conv(64->32, r14<8>)) ^ Conv(64->32, rsi<8>))))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v0 = (((unsigned int)v123 * 0x2000 | (unsigned int)v123 >> 19) ^ ((unsigned int)v123 * 0x8000 | (unsigned int)v123 >> 17) ^ (unsigned int)v123 % 0x400) + v33 + v42 + ((unsigned int)((unsigned long long)v34 >> 3) ^ (v34 >> 7 | v34 * 0x2000000) ^ (v34 * 0x4000 | v34 >> 18));\n            tmp_989 = [D] amd64g_calculate_rflags_all(0x3<64>, Add((rsi<8> + Conv(32->64, (((((Conv(64->32, r9<8>) << 0xd<8>) | (Conv(64->32, r9<8>) >> 0x13<8>)) ^ ((Conv(64->32, r9<8>) << 0xf<8>) | (Conv(64->32, r9<8>) >> 0x11<8>))) ^ Conv(64->32, (r9<8> >> 0xa<8>))) + ((Load(addr=stack_base-104, size=4, endness=Iend_LE) + Load(addr=stack_base-68, size=4, endness=Iend_LE)) + (Conv(64->32, (Conv(32->64, Load(addr=stack_base-100, size=4, endness=Iend_LE)) >> 0x3<8>)) ^ (((Load(addr=stack_base-100, size=4, endness=Iend_LE) >> 0x7<8>) | (Load(addr=stack_base-100, size=4, endness=Iend_LE) << 0x19<8>)) ^ ((Load(addr=stack_base-100, size=4, endness=Iend_LE) << 0xe<8>) | (Load(addr=stack_base-100, size=4, endness=Iend_LE) >> 0x12<8>)))))))), 0x2de92c6f<64>), Conv(32->64, (((Conv(64->32, rdi<8>) ^ Conv(64->32, r14<8>)) & Conv(64->32, rcx<8>)) ^ Conv(64->32, rdi<8>))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_1004 = ((unsigned int)v134 >> 11 | (unsigned int)v134 * 0x200000) ^ ((unsigned int)v134 >> 6 | (unsigned int)v134 * 0x4000000);\n            v136 = (((unsigned int)v134 * 128 | (unsigned int)v134 >> 25) ^ ((unsigned int)v134 >> 11 | (unsigned int)v134 * 0x200000) ^ ((unsigned int)v134 >> 6 | (unsigned int)v134 * 0x4000000)) + (unsigned int)(v114 + (((unsigned int)v123 * 0x2000 | (unsigned int)v123 >> 19) ^ ((unsigned int)v123 * 0x8000 | (unsigned int)v123 >> 17) ^ (unsigned int)v123 % 0x400) + v33 + v42 + ((unsigned int)((unsigned long long)v34 >> 3) ^ (v34 >> 7 | v34 * 0x2000000) ^ (v34 * 0x4000 | v34 >> 18)) + 770255983) + (((unsigned int)v121 ^ (unsigned int)v125) & (unsigned int)v134 ^ (unsigned int)v121);\n            tmp_1066 = (((unsigned int)v122 | (unsigned int)v132) & (unsigned int)v117 | (unsigned int)v122 & (unsigned int)v132) + (((unsigned int)v132 >> 13 | (unsigned int)v132 * 0x80000) ^ ((unsigned int)v132 >> 2 | (unsigned int)v132 * 0x40000000) ^ ((unsigned int)v132 * 0x400 | (unsigned int)v132 >> 22)) + (((unsigned int)v125 * 128 | (unsigned int)v125 >> 25) ^ ((unsigned int)v125 >> 11 | (unsigned int)v125 * 0x200000) ^ ((unsigned int)v125 >> 6 | (unsigned int)v125 * 0x4000000)) + (unsigned int)(v111 + v133 + 604807628) + (((unsigned int)v114 ^ (unsigned int)v121) & (unsigned int)v125 ^ (unsigned int)v114) >> 2 | ((((unsigned int)v122 | (unsigned int)v132) & (unsigned int)v117 | (unsigned int)v122 & (unsigned int)v132) + (((unsigned int)v132 >> 13 | (unsigned int)v132 * 0x80000) ^ ((unsigned int)v132 >> 2 | (unsigned int)v132 * 0x40000000) ^ ((unsigned int)v132 * 0x400 | (unsigned int)v132 >> 22)) + (((unsigned int)v125 * 128 | (unsigned int)v125 >> 25) ^ ((unsigned int)v125 >> 11 | (unsigned int)v125 * 0x200000) ^ ((unsigned int)v125 >> 6 | (unsigned int)v125 * 0x4000000)) + (unsigned int)(v111 + v133 + 604807628) + (((unsigned int)v114 ^ (unsigned int)v121) & (unsigned int)v125 ^ (unsigned int)v114)) * 0x40000000;\n            tmp_1071 = v117;\n            v137 = (unsigned int)v117 + (((unsigned int)v134 * 128 | (unsigned int)v134 >> 25) ^ ((unsigned int)v134 >> 11 | (unsigned int)v134 * 0x200000) ^ ((unsigned int)v134 >> 6 | (unsigned int)v134 * 0x4000000)) + (unsigned int)(v114 + (((unsigned int)v123 * 0x2000 | (unsigned int)v123 >> 19) ^ ((unsigned int)v123 * 0x8000 | (unsigned int)v123 >> 17) ^ (unsigned int)v123 % 0x400) + v33 + v42 + ((unsigned int)((unsigned long long)v34 >> 3) ^ (v34 >> 7 | v34 * 0x2000000) ^ (v34 * 0x4000 | v34 >> 18)) + 770255983) + (((unsigned int)v121 ^ (unsigned int)v125) & (unsigned int)v134 ^ (unsigned int)v121);\n            v138 = [D] amd64g_calculate_rflags_all(0x3<64>, t1071, rax<8>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v139 = (unsigned int)v132 & (unsigned int)v135;\n            v140 = ((unsigned int)v135 >> 13 | (unsigned int)v135 * 0x80000) ^ (unsigned int)tmp_1066;\n            v141 = v135;\n            tmp_334 = (unsigned int)v140 ^ ((unsigned int)v141 * 0x400 | (unsigned int)v141 >> 22);\n            tmp_364 = (((unsigned int)v132 | (unsigned int)v135) & (unsigned int)v122 | (unsigned int)v139) + ((unsigned int)v140 ^ ((unsigned int)v141 * 0x400 | (unsigned int)v141 >> 22));\n            v142 = (((unsigned int)v132 | (unsigned int)v135) & (unsigned int)v122 | (unsigned int)v139) + ((unsigned int)v140 ^ ((unsigned int)v141 * 0x400 | (unsigned int)v141 >> 22)) + (unsigned int)v136;\n            tmp_380 = [D] amd64g_calculate_rflags_all(0x3<64>, t364, rax<8>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v1 = v34 + v43 + ((unsigned int)((unsigned long long)v35 >> 3) ^ (v35 >> 7 | v35 * 0x2000000) ^ (v35 * 0x4000 | v35 >> 18)) + (((unsigned int)v133 * 0x2000 | (unsigned int)v133 >> 19) ^ ((unsigned int)v133 * 0x8000 | (unsigned int)v133 >> 17) ^ (unsigned int)v133 % 0x400);\n            tmp_688 = v122;\n            v143 = (unsigned int)v122 + (((unsigned int)v137 * 128 | (unsigned int)v137 >> 25) ^ ((unsigned int)v137 >> 11 | (unsigned int)v137 * 0x200000) ^ ((unsigned int)v137 >> 6 | (unsigned int)v137 * 0x4000000)) + (unsigned int)(v121 + v34 + v43 + ((unsigned int)((unsigned long long)v35 >> 3) ^ (v35 >> 7 | v35 * 0x2000000) ^ (v35 * 0x4000 | v35 >> 18)) + (((unsigned int)v133 * 0x2000 | (unsigned int)v133 >> 19) ^ ((unsigned int)v133 * 0x8000 | (unsigned int)v133 >> 17) ^ (unsigned int)v133 % 0x400) + 1249150122) + (((unsigned int)v125 ^ (unsigned int)v134) & (unsigned int)v137 ^ (unsigned int)v125);\n            tmp_737 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rbx<8>) >> 0xd<8>) | (Conv(64->32, rbx<8>) << 0x13<8>)) ^ ((Conv(64->32, rbx<8>) >> 0x2<8>) | (Conv(64->32, rbx<8>) << 0x1e<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_790 = (((unsigned int)v135 | (unsigned int)v142) & (unsigned int)v132 | (unsigned int)v135 & (unsigned int)v142) + (((unsigned int)v142 >> 13 | (unsigned int)v142 * 0x80000) ^ ((unsigned int)v142 >> 2 | (unsigned int)v142 * 0x40000000) ^ ((unsigned int)v142 * 0x400 | (unsigned int)v142 >> 22));\n            tmp_791 = (((unsigned int)v137 * 128 | (unsigned int)v137 >> 25) ^ ((unsigned int)v137 >> 11 | (unsigned int)v137 * 0x200000) ^ ((unsigned int)v137 >> 6 | (unsigned int)v137 * 0x4000000)) + (unsigned int)(v121 + v34 + v43 + ((unsigned int)((unsigned long long)v35 >> 3) ^ (v35 >> 7 | v35 * 0x2000000) ^ (v35 * 0x4000 | v35 >> 18)) + (((unsigned int)v133 * 0x2000 | (unsigned int)v133 >> 19) ^ ((unsigned int)v133 * 0x8000 | (unsigned int)v133 >> 17) ^ (unsigned int)v133 % 0x400) + 1249150122) + (((unsigned int)v125 ^ (unsigned int)v134) & (unsigned int)v137 ^ (unsigned int)v125);\n            v144 = (((unsigned int)v135 | (unsigned int)v142) & (unsigned int)v132 | (unsigned int)v135 & (unsigned int)v142) + (((unsigned int)v142 >> 13 | (unsigned int)v142 * 0x80000) ^ ((unsigned int)v142 >> 2 | (unsigned int)v142 * 0x40000000) ^ ((unsigned int)v142 * 0x400 | (unsigned int)v142 >> 22)) + (((unsigned int)v137 * 128 | (unsigned int)v137 >> 25) ^ ((unsigned int)v137 >> 11 | (unsigned int)v137 * 0x200000) ^ ((unsigned int)v137 >> 6 | (unsigned int)v137 * 0x4000000)) + (unsigned int)(v121 + v34 + v43 + ((unsigned int)((unsigned long long)v35 >> 3) ^ (v35 >> 7 | v35 * 0x2000000) ^ (v35 * 0x4000 | v35 >> 18)) + (((unsigned int)v133 * 0x2000 | (unsigned int)v133 >> 19) ^ ((unsigned int)v133 * 0x8000 | (unsigned int)v133 >> 17) ^ (unsigned int)v133 % 0x400) + 1249150122) + (((unsigned int)v125 ^ (unsigned int)v134) & (unsigned int)v137 ^ (unsigned int)v125);\n            v2 = ((v0 * 0x2000 | v0 >> 19) ^ (v0 * 0x8000 | v0 >> 17) ^ (unsigned int)((unsigned long long)v0 >> 10)) + v35 + v44 + ((unsigned int)((unsigned long long)v36 >> 3) ^ (v36 >> 7 | v36 * 0x2000000) ^ (v36 * 0x4000 | v36 >> 18));\n            tmp_1005 = ((unsigned int)v134 ^ (unsigned int)v137) & (unsigned int)v143;\n            tmp_1038 = v125 + ((v0 * 0x2000 | v0 >> 19) ^ (v0 * 0x8000 | v0 >> 17) ^ (unsigned int)((unsigned long long)v0 >> 10)) + v35 + v44 + ((unsigned int)((unsigned long long)v36 >> 3) ^ (v36 >> 7 | v36 * 0x2000000) ^ (v36 * 0x4000 | v36 >> 18)) + 1555081692;\n            v145 = (unsigned int)(v125 + ((v0 * 0x2000 | v0 >> 19) ^ (v0 * 0x8000 | v0 >> 17) ^ (unsigned int)((unsigned long long)v0 >> 10)) + v35 + v44 + ((unsigned int)((unsigned long long)v36 >> 3) ^ (v36 >> 7 | v36 * 0x2000000) ^ (v36 * 0x4000 | v36 >> 18)) + 1555081692) + (((unsigned int)v134 ^ (unsigned int)v137) & (unsigned int)v143 ^ (unsigned int)v134);\n            v146 = ((unsigned int)v143 >> 11 | (unsigned int)v143 * 0x200000) ^ ((unsigned int)v143 >> 6 | (unsigned int)v143 * 0x4000000);\n            v148 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (Conv(64->32, rbx<8>) & Conv(64->32, rax<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v149 = (unsigned int)v143 * 128 | (unsigned int)v143 >> 25;\n            v150 = (unsigned int)v132 + ((unsigned int)v149 ^ (unsigned int)v146) + (unsigned int)v145;\n            v151 = (((unsigned int)v142 | (unsigned int)v144) & (unsigned int)v135 | (unsigned int)v142 & (unsigned int)v144) + (((unsigned int)v144 >> 13 | (unsigned int)v144 * 0x80000) ^ ((unsigned int)v144 >> 2 | (unsigned int)v144 * 0x40000000) ^ ((unsigned int)v144 * 0x400 | (unsigned int)v144 >> 22)) + ((unsigned int)v149 ^ (unsigned int)v146) + (unsigned int)v145;\n            v4 = ((v37 * 0x4000 | v37 >> 18) ^ (v37 >> 7 | v37 * 0x2000000) ^ (unsigned int)((unsigned long long)v37 >> 3)) + v36 + (unsigned int)v113 + ((v1 * 0x2000 | v1 >> 19) ^ (v1 * 0x8000 | v1 >> 17) ^ (unsigned int)((unsigned long long)v1 >> 10));\n            v152 = (unsigned int)v135 + (((unsigned int)v150 * 128 | (unsigned int)v150 >> 25) ^ ((unsigned int)v150 >> 11 | (unsigned int)v150 * 0x200000) ^ ((unsigned int)v150 >> 6 | (unsigned int)v150 * 0x4000000)) + (((unsigned int)v137 ^ (unsigned int)v143) & (unsigned int)v150 ^ (unsigned int)v137) + (unsigned int)(v134 + ((v37 * 0x4000 | v37 >> 18) ^ (v37 >> 7 | v37 * 0x2000000) ^ (unsigned int)((unsigned long long)v37 >> 3)) + v36 + (unsigned int)v113 + ((v1 * 0x2000 | v1 >> 19) ^ (v1 * 0x8000 | v1 >> 17) ^ (unsigned int)((unsigned long long)v1 >> 10)) + 1996064986);\n            v153 = (((unsigned int)v144 | (unsigned int)v151) & (unsigned int)v142 | (unsigned int)v144 & (unsigned int)v151) + (((unsigned int)v151 >> 13 | (unsigned int)v151 * 0x80000) ^ ((unsigned int)v151 >> 2 | (unsigned int)v151 * 0x40000000) ^ ((unsigned int)v151 * 0x400 | (unsigned int)v151 >> 22)) + (((unsigned int)v150 * 128 | (unsigned int)v150 >> 25) ^ ((unsigned int)v150 >> 11 | (unsigned int)v150 * 0x200000) ^ ((unsigned int)v150 >> 6 | (unsigned int)v150 * 0x4000000)) + (((unsigned int)v137 ^ (unsigned int)v143) & (unsigned int)v150 ^ (unsigned int)v137) + (unsigned int)(v134 + ((v37 * 0x4000 | v37 >> 18) ^ (v37 >> 7 | v37 * 0x2000000) ^ (unsigned int)((unsigned long long)v37 >> 3)) + v36 + (unsigned int)v113 + ((v1 * 0x2000 | v1 >> 19) ^ (v1 * 0x8000 | v1 >> 17) ^ (unsigned int)((unsigned long long)v1 >> 10)) + 1996064986);\n            v155 = (unsigned int)v143 ^ (unsigned int)v150;\n            v156 = v137 + ((v38 * 0x4000 | v38 >> 18) ^ (v38 >> 7 | v38 * 0x2000000) ^ (unsigned int)((unsigned long long)v38 >> 3)) + v37 + (unsigned int)v120 + ((v2 * 0x2000 | v2 >> 19) ^ (v2 * 0x8000 | v2 >> 17) ^ (unsigned int)((unsigned long long)v2 >> 10)) - 1740746414;\n            v5 = ((v38 * 0x4000 | v38 >> 18) ^ (v38 >> 7 | v38 * 0x2000000) ^ (unsigned int)((unsigned long long)v38 >> 3)) + v37 + (unsigned int)v120 + ((v2 * 0x2000 | v2 >> 19) ^ (v2 * 0x8000 | v2 >> 17) ^ (unsigned int)((unsigned long long)v2 >> 10));\n            v157 = v152;\n            v158 = (unsigned int)v142 + (((unsigned int)v152 * 128 | (unsigned int)v152 >> 25) ^ ((unsigned int)v157 >> 11 | (unsigned int)v157 * 0x200000) ^ ((unsigned int)v152 >> 6 | (unsigned int)v152 * 0x4000000)) + ((unsigned int)v155 & (unsigned int)v152 ^ (unsigned int)v143) + (unsigned int)v156;\n            v159 = (((unsigned int)v151 | (unsigned int)v153) & (unsigned int)v144 | (unsigned int)v151 & (unsigned int)v153) + (((unsigned int)v153 >> 13 | (unsigned int)v153 * 0x80000) ^ ((unsigned int)v153 >> 2 | (unsigned int)v153 * 0x40000000) ^ ((unsigned int)v153 * 0x400 | (unsigned int)v153 >> 22)) + (((unsigned int)v152 * 128 | (unsigned int)v152 >> 25) ^ ((unsigned int)v157 >> 11 | (unsigned int)v157 * 0x200000) ^ ((unsigned int)v152 >> 6 | (unsigned int)v152 * 0x4000000)) + ((unsigned int)v155 & (unsigned int)v152 ^ (unsigned int)v143) + (unsigned int)v156;\n            v6 = ((v39 * 0x4000 | v39 >> 18) ^ (v39 >> 7 | v39 * 0x2000000) ^ (unsigned int)((unsigned long long)v39 >> 3)) + v38 + (unsigned int)v123 + ((v4 * 0x2000 | v4 >> 19) ^ (v4 * 0x8000 | v4 >> 17) ^ (unsigned int)((unsigned long long)v4 >> 10));\n            tmp_842 = (((unsigned int)v158 * 128 | (unsigned int)v158 >> 25) ^ ((unsigned int)v158 >> 11 | (unsigned int)v158 * 0x200000) ^ ((unsigned int)v158 >> 6 | (unsigned int)v158 * 0x4000000)) + (unsigned int)(v143 + ((v39 * 0x4000 | v39 >> 18) ^ (v39 >> 7 | v39 * 0x2000000) ^ (unsigned int)((unsigned long long)v39 >> 3)) + v38 + (unsigned int)v123 + ((v4 * 0x2000 | v4 >> 19) ^ (v4 * 0x8000 | v4 >> 17) ^ (unsigned int)((unsigned long long)v4 >> 10)) - 1473132947) + (((unsigned int)v150 ^ (unsigned int)v152) & (unsigned int)v158 ^ (unsigned int)v150);\n            v160 = ...;\n            v161 = (((unsigned int)v153 | (unsigned int)v159) & (unsigned int)v151 | (unsigned int)v153 & (unsigned int)v159) + (((unsigned int)v159 >> 13 | (unsigned int)v159 * 0x80000) ^ ((unsigned int)v159 >> 2 | (unsigned int)v159 * 0x40000000) ^ ((unsigned int)v159 * 0x400 | (unsigned int)v159 >> 22)) + (unsigned int)tmp_842;\n            v162 = (v5 * 0x2000 | v5 >> 19) ^ (v5 * 0x8000 | v5 >> 17) ^ (unsigned int)((unsigned long long)v5 >> 10);\n            v163 = (v40 * 0x4000 | v40 >> 18) ^ (v40 >> 7 | v40 * 0x2000000);\n            v164 = (unsigned long long)v40 >> 3;\n            v7 = ((unsigned int)v163 ^ (unsigned int)v164) + v39 + (unsigned int)v133 + (unsigned int)v162;\n            tmp_427 = (((unsigned int)v160 * 128 | (unsigned int)v160 >> 25) ^ ((unsigned int)v160 >> 11 | (unsigned int)v160 * 0x200000) ^ ((unsigned int)v160 >> 6 | (unsigned int)v160 * 0x4000000)) + (unsigned int)(v150 + ((unsigned int)v163 ^ (unsigned int)v164) + v39 + (unsigned int)v133 + (unsigned int)v162 - 1341970488) + (((unsigned int)v152 ^ (unsigned int)v158) & (unsigned int)v160 ^ (unsigned int)v152);\n            v165 = v151 + (((unsigned int)v160 * 128 | (unsigned int)v160 >> 25) ^ ((unsigned int)v160 >> 11 | (unsigned int)v160 * 0x200000) ^ ((unsigned int)v160 >> 6 | (unsigned int)v160 * 0x4000000)) + (unsigned int)(v150 + ((unsigned int)v163 ^ (unsigned int)v164) + v39 + (unsigned int)v133 + (unsigned int)v162 - 1341970488) + (((unsigned int)v152 ^ (unsigned int)v158) & (unsigned int)v160 ^ (unsigned int)v152);\n            v166 = (((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427;\n            v8 = ((v41 * 0x4000 | v41 >> 18) ^ (v41 >> 7 | v41 * 0x2000000) ^ (unsigned int)((unsigned long long)v41 >> 3)) + v40 + v0 + ((v6 * 0x2000 | v6 >> 19) ^ (v6 * 0x8000 | v6 >> 17) ^ (unsigned int)((unsigned long long)v6 >> 10));\n            tmp_879 = (((unsigned int)(v151 + tmp_427) * 128 | (unsigned int)(v151 + tmp_427) >> 25) ^ ((unsigned int)(v151 + tmp_427) >> 11 | (unsigned int)(v151 + tmp_427) * 0x200000) ^ ((unsigned int)(v151 + tmp_427) >> 6 | (unsigned int)(v151 + tmp_427) * 0x4000000)) + (unsigned int)(v152 + ((v41 * 0x4000 | v41 >> 18) ^ (v41 >> 7 | v41 * 0x2000000) ^ (unsigned int)((unsigned long long)v41 >> 3)) + v40 + v0 + ((v6 * 0x2000 | v6 >> 19) ^ (v6 * 0x8000 | v6 >> 17) ^ (unsigned int)((unsigned long long)v6 >> 10)) - 1084653625) + (((unsigned int)v158 ^ (unsigned int)v160) & (unsigned int)(v151 + tmp_427) ^ (unsigned int)v158);\n            v167 = ...;\n            v168 = v7;\n            v169 = (((unsigned int)v161 | (((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427) & (unsigned int)v159 | (unsigned int)v161 & (((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427) + (((((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427 >> 13 | ((((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427) * 0x80000) ^ ((((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427 >> 2 | ((((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427) * 0x40000000) ^ (((((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427) * 0x400 | (((unsigned int)v159 | (unsigned int)v161) & (unsigned int)v153 | (unsigned int)v159 & (unsigned int)v161) + (((unsigned int)v161 >> 13 | (unsigned int)v161 * 0x80000) ^ ((unsigned int)v161 >> 2 | (unsigned int)v161 * 0x40000000) ^ ((unsigned int)v161 * 0x400 | (unsigned int)v161 >> 22)) + (unsigned int)tmp_427 >> 22)) + (unsigned int)tmp_879;\n            v170 = (v7 * 0x2000 | v7 >> 19) ^ (v7 * 0x8000 | v7 >> 17);\n            v9 = ((v42 * 0x4000 | v42 >> 18) ^ (v42 >> 7 | v42 * 0x2000000) ^ (unsigned int)((unsigned long long)v42 >> 3)) + v41 + v1 + ((unsigned int)v170 ^ (unsigned int)v168 % 0x400);\n            tmp_463 = v158 + ((v42 * 0x4000 | v42 >> 18) ^ (v42 >> 7 | v42 * 0x2000000) ^ (unsigned int)((unsigned long long)v42 >> 3)) + v41 + v1 + ((unsigned int)v170 ^ (unsigned int)v168 % 0x400) - 958395405;\n            tmp_531 = (unsigned int)(v158 + ((v42 * 0x4000 | v42 >> 18) ^ (v42 >> 7 | v42 * 0x2000000) ^ (unsigned int)((unsigned long long)v42 >> 3)) + v41 + v1 + ((unsigned int)v170 ^ (unsigned int)v168 % 0x400) - 958395405) + (((unsigned int)v160 ^ (unsigned int)v165) & (unsigned int)v167 ^ (unsigned int)v160);\n            tmp_532 = (((unsigned int)v167 * 128 | (unsigned int)v167 >> 25) ^ ((unsigned int)v167 >> 11 | (unsigned int)v167 * 0x200000) ^ ((unsigned int)v167 >> 6 | (unsigned int)v167 * 0x4000000)) + (unsigned int)(v158 + ((v42 * 0x4000 | v42 >> 18) ^ (v42 >> 7 | v42 * 0x2000000) ^ (unsigned int)((unsigned long long)v42 >> 3)) + v41 + v1 + ((unsigned int)v170 ^ (unsigned int)v168 % 0x400) - 958395405) + (((unsigned int)v160 ^ (unsigned int)v165) & (unsigned int)v167 ^ (unsigned int)v160);\n            v171 = ...;\n            tmp_579 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Conv(64->32, rdi<8>) >> 0x2<8>) | (Conv(64->32, rdi<8>) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v172 = (((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532;\n            v173 = (unsigned int)v169 & (((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532;\n            v10 = ((v43 * 0x4000 | v43 >> 18) ^ (v43 >> 7 | v43 * 0x2000000) ^ (unsigned int)((unsigned long long)v43 >> 3)) + v42 + v2 + ((v8 * 0x2000 | v8 >> 19) ^ (v8 * 0x8000 | v8 >> 17) ^ (unsigned int)((unsigned long long)v8 >> 10));\n            tmp_961 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, (rcx<8> + t532)) >> 0xb<8>) | (Conv(64->32, (rcx<8> + t532)) << 0x15<8>)) ^ ((Conv(64->32, (rcx<8> + t532)) >> 0x6<8>) | (Conv(64->32, (rcx<8> + t532)) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_983 = (unsigned int)(v160 + ((v43 * 0x4000 | v43 >> 18) ^ (v43 >> 7 | v43 * 0x2000000) ^ (unsigned int)((unsigned long long)v43 >> 3)) + v42 + v2 + ((v8 * 0x2000 | v8 >> 19) ^ (v8 * 0x8000 | v8 >> 17) ^ (unsigned int)((unsigned long long)v8 >> 10)) - 710438585) + (((unsigned int)v165 ^ (unsigned int)v167) & (unsigned int)(v159 + tmp_532) ^ (unsigned int)v165);\n            v174 = (((unsigned int)(v159 + tmp_532) * 128 | (unsigned int)(v159 + tmp_532) >> 25) ^ ((unsigned int)(v159 + tmp_532) >> 11 | (unsigned int)(v159 + tmp_532) * 0x200000) ^ ((unsigned int)(v159 + tmp_532) >> 6 | (unsigned int)(v159 + tmp_532) * 0x4000000)) + (unsigned int)(v160 + ((v43 * 0x4000 | v43 >> 18) ^ (v43 >> 7 | v43 * 0x2000000) ^ (unsigned int)((unsigned long long)v43 >> 3)) + v42 + v2 + ((v8 * 0x2000 | v8 >> 19) ^ (v8 * 0x8000 | v8 >> 17) ^ (unsigned int)((unsigned long long)v8 >> 10)) - 710438585) + (((unsigned int)v165 ^ (unsigned int)v167) & (unsigned int)(v159 + tmp_532) ^ (unsigned int)v165);\n            v175 = ...;\n            v176 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, ((((((((Conv(64->32, rax<8>) | Conv(64->32, rdi<8>)) & Conv(64->32, rdx<8>)) | (Conv(64->32, rax<8>) & Conv(64->32, rdi<8>))) + ((((Conv(64->32, rdi<8>) >> 0xd<8>) | (Conv(64->32, rdi<8>) << 0x13<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x2<8>) | (Conv(64->32, rdi<8>) << 0x1e<8>))) ^ ((Conv(64->32, rdi<8>) << 0xa<8>) | (Conv(64->32, rdi<8>) >> 0x16<8>)))) + Conv(64->32, t532)) >> 0xd<8>) | ((((((Conv(64->32, rax<8>) | Conv(64->32, rdi<8>)) & Conv(64->32, rdx<8>)) | (Conv(64->32, rax<8>) & Conv(64->32, rdi<8>))) + ((((Conv(64->32, rdi<8>) >> 0xd<8>) | (Conv(64->32, rdi<8>) << 0x13<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x2<8>) | (Conv(64->32, rdi<8>) << 0x1e<8>))) ^ ((Conv(64->32, rdi<8>) << 0xa<8>) | (Conv(64->32, rdi<8>) >> 0x16<8>)))) + Conv(64->32, t532)) << 0x13<8>)) ^ (((((((Conv(64->32, rax<8>) | Conv(64->32, rdi<8>)) & Conv(64->32, rdx<8>)) | (Conv(64->32, rax<8>) & Conv(64->32, rdi<8>))) + ((((Conv(64->32, rdi<8>) >> 0xd<8>) | (Conv(64->32, rdi<8>) << 0x13<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x2<8>) | (Conv(64->32, rdi<8>) << 0x1e<8>))) ^ ((Conv(64->32, rdi<8>) << 0xa<8>) | (Conv(64->32, rdi<8>) >> 0x16<8>)))) + Conv(64->32, t532)) >> 0x2<8>) | ((((((Conv(64->32, rax<8>) | Conv(64->32, rdi<8>)) & Conv(64->32, rdx<8>)) | (Conv(64->32, rax<8>) & Conv(64->32, rdi<8>))) + ((((Conv(64->32, rdi<8>) >> 0xd<8>) | (Conv(64->32, rdi<8>) << 0x13<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x2<8>) | (Conv(64->32, rdi<8>) << 0x1e<8>))) ^ ((Conv(64->32, rdi<8>) << 0xa<8>) | (Conv(64->32, rdi<8>) >> 0x16<8>)))) + Conv(64->32, t532)) << 0x1e<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v177 = ((((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532 >> 13 | ((((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532) * 0x80000) ^ ((((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532 >> 2 | ((((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532) * 0x40000000) ^ (((((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532) * 0x400 | (((unsigned int)v166 | (unsigned int)v169) & (unsigned int)v161 | (unsigned int)v166 & (unsigned int)v169) + (((unsigned int)v169 >> 13 | (unsigned int)v169 * 0x80000) ^ ((unsigned int)v169 >> 2 | (unsigned int)v169 * 0x40000000) ^ ((unsigned int)v169 * 0x400 | (unsigned int)v169 >> 22)) + (unsigned int)tmp_532 >> 22);\n            v178 = v169;\n            tmp_300 = (((unsigned int)v178 | (unsigned int)v172) & (unsigned int)v166 | (unsigned int)v173) + (unsigned int)v177;\n            v179 = (((unsigned int)v178 | (unsigned int)v172) & (unsigned int)v166 | (unsigned int)v173) + (unsigned int)v177 + (unsigned int)v174;\n            tmp_340 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((Load(addr=stack_base-212, size=4, endness=Iend_LE) << 0xf<8>) | (Load(addr=stack_base-212, size=4, endness=Iend_LE) >> 0x11<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v11 = ((v44 * 0x4000 | v44 >> 18) ^ (v44 >> 7 | v44 * 0x2000000) ^ (unsigned int)((unsigned long long)v44 >> 3)) + v43 + v4 + ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10));\n            tmp_622 = (((unsigned int)v175 * 128 | (unsigned int)v175 >> 25) ^ ((unsigned int)v175 >> 11 | (unsigned int)v175 * 0x200000) ^ ((unsigned int)v175 >> 6 | (unsigned int)v175 * 0x4000000)) + (((unsigned int)v167 ^ (unsigned int)v171) & (unsigned int)v175 ^ (unsigned int)v167) + (unsigned int)(v165 + ((v44 * 0x4000 | v44 >> 18) ^ (v44 >> 7 | v44 * 0x2000000) ^ (unsigned int)((unsigned long long)v44 >> 3)) + v43 + v4 + ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + 113926993);\n            v180 = ...;\n            tmp_699 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rcx<8>) >> 0xd<8>) | (Conv(64->32, rcx<8>) << 0x13<8>)) ^ ((Conv(64->32, rcx<8>) >> 0x2<8>) | (Conv(64->32, rcx<8>) << 0x1e<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_752 = (((unsigned int)v172 | (unsigned int)v179) & (unsigned int)v169 | (unsigned int)v172 & (unsigned int)v179) + (((unsigned int)v179 >> 13 | (unsigned int)v179 * 0x80000) ^ ((unsigned int)v179 >> 2 | (unsigned int)v179 * 0x40000000) ^ ((unsigned int)v179 * 0x400 | (unsigned int)v179 >> 22));\n            tmp_753 = (((unsigned int)v175 * 128 | (unsigned int)v175 >> 25) ^ ((unsigned int)v175 >> 11 | (unsigned int)v175 * 0x200000) ^ ((unsigned int)v175 >> 6 | (unsigned int)v175 * 0x4000000)) + (((unsigned int)v167 ^ (unsigned int)v171) & (unsigned int)v175 ^ (unsigned int)v167) + (unsigned int)(v165 + ((v44 * 0x4000 | v44 >> 18) ^ (v44 >> 7 | v44 * 0x2000000) ^ (unsigned int)((unsigned long long)v44 >> 3)) + v43 + v4 + ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + 113926993);\n            v181 = (((unsigned int)v172 | (unsigned int)v179) & (unsigned int)v169 | (unsigned int)v172 & (unsigned int)v179) + (((unsigned int)v179 >> 13 | (unsigned int)v179 * 0x80000) ^ ((unsigned int)v179 >> 2 | (unsigned int)v179 * 0x40000000) ^ ((unsigned int)v179 * 0x400 | (unsigned int)v179 >> 22)) + (((unsigned int)v175 * 128 | (unsigned int)v175 >> 25) ^ ((unsigned int)v175 >> 11 | (unsigned int)v175 * 0x200000) ^ ((unsigned int)v175 >> 6 | (unsigned int)v175 * 0x4000000)) + (((unsigned int)v167 ^ (unsigned int)v171) & (unsigned int)v175 ^ (unsigned int)v167) + (unsigned int)(v165 + ((v44 * 0x4000 | v44 >> 18) ^ (v44 >> 7 | v44 * 0x2000000) ^ (unsigned int)((unsigned long long)v44 >> 3)) + v43 + v4 + ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + 113926993);\n            v182 = v179;\n            v12 = (((unsigned int)v113 * 0x4000 | (unsigned int)v113 >> 18) ^ ((unsigned int)v113 >> 7 | (unsigned int)v113 * 0x2000000) ^ (unsigned int)v113 % 8) + v44 + v5 + ((v10 * 0x2000 | v10 >> 19) ^ (v10 * 0x8000 | v10 >> 17) ^ (unsigned int)((unsigned long long)v10 >> 10));\n            tmp_963 = ...;\n            v183 = ...;\n            v184 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, (rax<8> + t622)) >> 0xb<8>) | (Conv(64->32, (rax<8> + t622)) << 0x15<8>)) ^ ((Conv(64->32, (rax<8> + t622)) >> 0x6<8>) | (Conv(64->32, (rax<8> + t622)) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_1058 = ((unsigned int)(v166 + tmp_622) * 128 | (unsigned int)(v166 + tmp_622) >> 25) ^ ((unsigned int)(v166 + tmp_622) >> 11 | (unsigned int)(v166 + tmp_622) * 0x200000) ^ ((unsigned int)(v166 + tmp_622) >> 6 | (unsigned int)(v166 + tmp_622) * 0x4000000);\n            v185 = v181;\n            v186 = v183;\n            v187 = tmp_1058 + v183;\n            tmp_295 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Conv(64->32, rax<8>) >> 0x2<8>) | (Conv(64->32, rax<8>) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v188 = v169 + v187;\n            tmp_317 = ((unsigned int)v181 >> 13 | (unsigned int)v181 * 0x80000) ^ ((unsigned int)v185 >> 2 | (unsigned int)v185 * 0x40000000);\n            tmp_391 = (((unsigned int)v179 | (unsigned int)v181) & (unsigned int)v172 | (unsigned int)v182 & (unsigned int)v181) + (((unsigned int)v181 >> 13 | (unsigned int)v181 * 0x80000) ^ ((unsigned int)v185 >> 2 | (unsigned int)v185 * 0x40000000) ^ ((unsigned int)v181 * 0x400 | (unsigned int)v181 >> 22));\n            v189 = (((unsigned int)v179 | (unsigned int)v181) & (unsigned int)v172 | (unsigned int)v182 & (unsigned int)v181) + (((unsigned int)v181 >> 13 | (unsigned int)v181 * 0x80000) ^ ((unsigned int)v185 >> 2 | (unsigned int)v185 * 0x40000000) ^ ((unsigned int)v181 * 0x400 | (unsigned int)v181 >> 22)) + (unsigned int)v187;\n            v190 = (unsigned int)v113 + (((unsigned int)v120 * 0x4000 | (unsigned int)v120 >> 18) ^ ((unsigned int)v120 >> 7 | (unsigned int)v120 * 0x2000000) ^ (unsigned int)v120 % 8) + v6 + ((v11 * 0x2000 | v11 >> 19) ^ (v11 * 0x8000 | v11 >> 17) ^ (unsigned int)((unsigned long long)v11 >> 10));\n            v23 = (unsigned int)v113 + (((unsigned int)v120 * 0x4000 | (unsigned int)v120 >> 18) ^ ((unsigned int)v120 >> 7 | (unsigned int)v120 * 0x2000000) ^ (unsigned int)v120 % 8) + v6 + ((v11 * 0x2000 | v11 >> 19) ^ (v11 * 0x8000 | v11 >> 17) ^ (unsigned int)((unsigned long long)v11 >> 10));\n            tmp_687 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rdi<8>) >> 0xb<8>) | (Conv(64->32, rdi<8>) << 0x15<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x6<8>) | (Conv(64->32, rdi<8>) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_711 = ((unsigned int)v188 * 128 | (unsigned int)v188 >> 25) ^ ((unsigned int)v188 >> 11 | (unsigned int)v188 * 0x200000) ^ ((unsigned int)v188 >> 6 | (unsigned int)v188 * 0x4000000);\n            tmp_712 = (((unsigned int)v175 ^ (unsigned int)v180) & (unsigned int)v188 ^ (unsigned int)v175) + (unsigned int)(v171 + v190 + 666307205);\n            v191 = (unsigned int)v172 + (((unsigned int)v188 * 128 | (unsigned int)v188 >> 25) ^ ((unsigned int)v188 >> 11 | (unsigned int)v188 * 0x200000) ^ ((unsigned int)v188 >> 6 | (unsigned int)v188 * 0x4000000)) + (((unsigned int)v175 ^ (unsigned int)v180) & (unsigned int)v188 ^ (unsigned int)v175) + (unsigned int)(v171 + v190 + 666307205);\n            v192 = (((unsigned int)v181 | (unsigned int)v189) & (unsigned int)v179 | (unsigned int)v181 & (unsigned int)v189) + (((unsigned int)v189 >> 13 | (unsigned int)v189 * 0x80000) ^ ((unsigned int)v189 >> 2 | (unsigned int)v189 * 0x40000000) ^ ((unsigned int)v189 * 0x400 | (unsigned int)v189 >> 22)) + (((unsigned int)v188 * 128 | (unsigned int)v188 >> 25) ^ ((unsigned int)v188 >> 11 | (unsigned int)v188 * 0x200000) ^ ((unsigned int)v188 >> 6 | (unsigned int)v188 * 0x4000000)) + (((unsigned int)v175 ^ (unsigned int)v180) & (unsigned int)v188 ^ (unsigned int)v175) + (unsigned int)(v171 + v190 + 666307205);\n            tmp_863 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, ((((Conv(64->32, rdx<8>) | Conv(64->32, rax<8>)) & Conv(64->32, rcx<8>)) | (Conv(64->32, rdx<8>) & Conv(64->32, rax<8>))) + ((((Conv(64->32, rax<8>) >> 0xd<8>) | (Conv(64->32, rax<8>) << 0x13<8>)) ^ ((Conv(64->32, rax<8>) >> 0x2<8>) | (Conv(64->32, rax<8>) << 0x1e<8>))) ^ ((Conv(64->32, rax<8>) << 0xa<8>) | (Conv(64->32, rax<8>) >> 0x16<8>))))), Conv(32->64, ((((Conv(64->32, rdi<8>) << 0x7<8>) | (Conv(64->32, rdi<8>) >> 0x19<8>)) ^ (((Conv(64->32, rdi<8>) >> 0xb<8>) | (Conv(64->32, rdi<8>) << 0x15<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x6<8>) | (Conv(64->32, rdi<8>) << 0x1a<8>)))) + ((((Conv(64->32, r13<8>) ^ Conv(64->32, r14<8>)) & Conv(64->32, rdi<8>)) ^ Conv(64->32, r13<8>)) + Conv(64->32, ((rbx<8> + r15<8>) + 0x27b70a85<64>))))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v193 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, ((((Load(addr=stack_base-200, size=4, endness=Iend_LE) << 0xd<8>) | (Load(addr=stack_base-200, size=4, endness=Iend_LE) >> 0x13<8>)) ^ ((Load(addr=stack_base-200, size=4, endness=Iend_LE) << 0xf<8>) | (Load(addr=stack_base-200, size=4, endness=Iend_LE) >> 0x11<8>))) ^ Conv(64->32, (Conv(32->64, Load(addr=stack_base-200, size=4, endness=Iend_LE)) >> 0xa<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v195 = v190;\n            v196 = ((unsigned int)v180 ^ (unsigned int)v188) & (unsigned int)v191;\n            v197 = v175 + v13 + 773529912;\n            v198 = v191;\n            v13 = (unsigned int)v120 + (((unsigned int)v123 * 0x4000 | (unsigned int)v123 >> 18) ^ ((unsigned int)v123 >> 7 | (unsigned int)v123 * 0x2000000) ^ (unsigned int)v123 % 8) + v7 + ((v12 * 0x2000 | v12 >> 19) ^ (v12 * 0x8000 | v12 >> 17) ^ (unsigned int)((unsigned long long)v12 >> 10));\n            tmp_357 = v179;\n            tmp_358 = (((unsigned int)v191 * 128 | (unsigned int)v191 >> 25) ^ ((unsigned int)v191 >> 11 | (unsigned int)v191 * 0x200000) ^ ((unsigned int)v198 >> 6 | (unsigned int)v198 * 0x4000000)) + (unsigned int)v197 + ((unsigned int)v196 ^ (unsigned int)v180);\n            v199 = (unsigned int)v179 + (((unsigned int)v191 * 128 | (unsigned int)v191 >> 25) ^ ((unsigned int)v191 >> 11 | (unsigned int)v191 * 0x200000) ^ ((unsigned int)v198 >> 6 | (unsigned int)v198 * 0x4000000)) + (unsigned int)v197 + ((unsigned int)v196 ^ (unsigned int)v180);\n            tmp_536 = (((unsigned int)v191 * 128 | (unsigned int)v191 >> 25) ^ ((unsigned int)v191 >> 11 | (unsigned int)v191 * 0x200000) ^ ((unsigned int)v198 >> 6 | (unsigned int)v198 * 0x4000000)) + (unsigned int)v197 + ((unsigned int)v196 ^ (unsigned int)v180);\n            v200 = (((unsigned int)v189 | (unsigned int)v192) & (unsigned int)v181 | (unsigned int)v189 & (unsigned int)v192) + (((unsigned int)v192 >> 13 | (unsigned int)v192 * 0x80000) ^ ((unsigned int)v192 >> 2 | (unsigned int)v192 * 0x40000000) ^ ((unsigned int)v192 * 0x400 | (unsigned int)v192 >> 22)) + (((unsigned int)v191 * 128 | (unsigned int)v191 >> 25) ^ ((unsigned int)v191 >> 11 | (unsigned int)v191 * 0x200000) ^ ((unsigned int)v198 >> 6 | (unsigned int)v198 * 0x4000000)) + (unsigned int)v197 + ((unsigned int)v196 ^ (unsigned int)v180);\n            v201 = (unsigned int)v123 + (((unsigned int)v133 * 0x4000 | (unsigned int)v133 >> 18) ^ ((unsigned int)v133 >> 7 | (unsigned int)v133 * 0x2000000) ^ (unsigned int)v133 % 8) + v8 + (((unsigned int)v195 * 0x2000 | (unsigned int)v195 >> 19) ^ ((unsigned int)v190 * 0x8000 | (unsigned int)v190 >> 17) ^ (unsigned int)v190 % 0x400);\n            tmp_705 = v180 + (unsigned int)v123 + (((unsigned int)v133 * 0x4000 | (unsigned int)v133 >> 18) ^ ((unsigned int)v133 >> 7 | (unsigned int)v133 * 0x2000000) ^ (unsigned int)v133 % 8) + v8 + (((unsigned int)v195 * 0x2000 | (unsigned int)v195 >> 19) ^ ((unsigned int)v190 * 0x8000 | (unsigned int)v190 >> 17) ^ (unsigned int)v190 % 0x400) + 1294757372;\n            tmp_726 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rdi<8>) ^ Conv(64->32, rsi<8>)) & Conv(64->32, rcx<8>)) ^ Conv(64->32, rdi<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v202 = v1;\n            v24 = (unsigned int)v123 + (((unsigned int)v133 * 0x4000 | (unsigned int)v133 >> 18) ^ ((unsigned int)v133 >> 7 | (unsigned int)v133 * 0x2000000) ^ (unsigned int)v133 % 8) + v8 + (((unsigned int)v195 * 0x2000 | (unsigned int)v195 >> 19) ^ ((unsigned int)v190 * 0x8000 | (unsigned int)v190 >> 17) ^ (unsigned int)v190 % 0x400);\n            tmp_750 = ((unsigned int)v188 ^ (unsigned int)v191) & (unsigned int)v199 ^ (unsigned int)v188;\n            v203 = v181 + (((unsigned int)v199 * 128 | (unsigned int)v199 >> 25) ^ ((unsigned int)v199 >> 11 | (unsigned int)v199 * 0x200000) ^ ((unsigned int)v199 >> 6 | (unsigned int)v199 * 0x4000000)) + (unsigned int)tmp_705 + (((unsigned int)v188 ^ (unsigned int)v191) & (unsigned int)v199 ^ (unsigned int)v188);\n            v204 = (((unsigned int)v192 | (unsigned int)v200) & (unsigned int)v189 | (unsigned int)v192 & (unsigned int)v200) + (((unsigned int)v200 >> 13 | (unsigned int)v200 * 0x80000) ^ ((unsigned int)v200 >> 2 | (unsigned int)v200 * 0x40000000) ^ ((unsigned int)v200 * 0x400 | (unsigned int)v200 >> 22)) + (((unsigned int)v199 * 128 | (unsigned int)v199 >> 25) ^ ((unsigned int)v199 >> 11 | (unsigned int)v199 * 0x200000) ^ ((unsigned int)v199 >> 6 | (unsigned int)v199 * 0x4000000)) + (unsigned int)tmp_705 + (((unsigned int)v188 ^ (unsigned int)v191) & (unsigned int)v199 ^ (unsigned int)v188);\n            v205 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((Load(addr=stack_base-196, size=4, endness=Iend_LE) << 0xf<8>) | (Load(addr=stack_base-196, size=4, endness=Iend_LE) >> 0x11<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v206 = (v13 * 0x2000 | v13 >> 19) ^ (v13 * 0x8000 | v13 >> 17);\n            v207 = v13;\n            v208 = (unsigned int)v133 + ((v190 * 0x4000 | v190 % 0x40000) ^ ((unsigned int)v190 >> 7 | (unsigned int)v190 * 0x2000000) ^ (unsigned int)v190 % 8) + v9 + ((unsigned int)v206 ^ (unsigned int)v207 % 0x400);\n            *((unsigned long long *)&v25) = (unsigned int)v133 + ((v190 * 0x4000 | v190 % 0x40000) ^ ((unsigned int)v190 >> 7 | (unsigned int)v190 * 0x2000000) ^ (unsigned int)v190 % 8) + v9 + ((unsigned int)v206 ^ (unsigned int)v207 % 0x400);\n            v209 = (unsigned int)v189 + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191);\n            v210 = (((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191);\n            tmp_717 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((Conv(64->32, r13<8>) << 0xd<8>) | (Conv(64->32, r13<8>) >> 0x13<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_755 = ((unsigned int)v201 * 0x2000 | (unsigned int)v201 >> 19) ^ ((unsigned int)v201 * 0x8000 | (unsigned int)v201 >> 17) ^ (unsigned int)v201 % 0x400;\n            v211 = (((unsigned int)v201 * 0x2000 | (unsigned int)v201 >> 19) ^ ((unsigned int)v201 * 0x8000 | (unsigned int)v201 >> 17) ^ (unsigned int)v201 % 0x400) + (((unsigned int)v202 * 0x4000 | (unsigned int)v202 >> 18) ^ ((unsigned int)v202 >> 7 | (unsigned int)v202 * 0x2000000) ^ (unsigned int)v202 % 8) + v190 + v10;\n            tmp_942 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rax<8>) >> 0xb<8>) | (Conv(64->32, rax<8>) << 0x15<8>)) ^ ((Conv(64->32, rax<8>) >> 0x6<8>) | (Conv(64->32, rax<8>) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_947 = (((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191) >> 2 | ((((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191)) * 0x40000000;\n            tmp_952 = (((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191) >> 2 | ((((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191)) * 0x40000000;\n            v212 = (((unsigned int)v209 * 128 | (unsigned int)v209 >> 25) ^ ((unsigned int)v209 >> 11 | (unsigned int)v209 * 0x200000) ^ ((unsigned int)v209 >> 6 | (unsigned int)v209 * 0x4000000)) + (unsigned int)(v191 + v211 + 1695183700) + (((unsigned int)v199 ^ (unsigned int)v203) & (unsigned int)v209 ^ (unsigned int)v199);\n            tmp_1010 = (((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191) >> 13 | ((((unsigned int)v200 | (unsigned int)v204) & (unsigned int)v192 | (unsigned int)v200 & (unsigned int)v204) + (((unsigned int)v204 >> 13 | (unsigned int)v204 * 0x80000) ^ ((unsigned int)v204 >> 2 | (unsigned int)v204 * 0x40000000) ^ ((unsigned int)v204 * 0x400 | (unsigned int)v204 >> 22)) + (((unsigned int)v203 * 128 | (unsigned int)v203 >> 25) ^ ((unsigned int)v203 >> 11 | (unsigned int)v203 * 0x200000) ^ ((unsigned int)v203 >> 6 | (unsigned int)v203 * 0x4000000)) + (unsigned int)(v188 + v208 + 1396182291) + (((unsigned int)v191 ^ (unsigned int)v199) & (unsigned int)v203 ^ (unsigned int)v191)) * 0x80000;\n            v213 = (unsigned int)v192 + (((unsigned int)v209 * 128 | (unsigned int)v209 >> 25) ^ ((unsigned int)v209 >> 11 | (unsigned int)v209 * 0x200000) ^ ((unsigned int)v209 >> 6 | (unsigned int)v209 * 0x4000000)) + (unsigned int)(v191 + v211 + 1695183700) + (((unsigned int)v199 ^ (unsigned int)v203) & (unsigned int)v209 ^ (unsigned int)v199);\n            v214 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (Conv(64->32, t1010) ^ Conv(64->32, t952))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v215 = (unsigned int)tmp_1010 ^ (unsigned int)tmp_952 ^ ((unsigned int)v210 * 0x400 | (unsigned int)v210 >> 22);\n            v216 = ((unsigned int)v204 | (unsigned int)v210) & (unsigned int)v200 | (unsigned int)v204 & (unsigned int)v210;\n            tmp_262 = v216;\n            tmp_290 = v216 + v215;\n            v217 = v216 + v215 + v212;\n            tmp_450 = (((unsigned int)v208 * 0x2000 | (unsigned int)v208 >> 19) ^ ((unsigned int)v208 * 0x8000 | (unsigned int)v208 >> 17) ^ (unsigned int)v208 % 0x400) + ((v2 * 0x4000 | v2 >> 18) ^ (v2 >> 7 | v2 * 0x2000000) ^ (unsigned int)((unsigned long long)v2 >> 3)) + (unsigned int)v202 + v11;\n            v3 = (((unsigned int)v208 * 0x2000 | (unsigned int)v208 >> 19) ^ ((unsigned int)v208 * 0x8000 | (unsigned int)v208 >> 17) ^ (unsigned int)v208 % 0x400) + ((v2 * 0x4000 | v2 >> 18) ^ (v2 >> 7 | v2 * 0x2000000) ^ (unsigned int)((unsigned long long)v2 >> 3)) + (unsigned int)v202 + v11;\n            v15 = v211;\n            v218 = v4;\n            tmp_546 = (unsigned int)v217 * 0x400 | (unsigned int)v217 >> 22;\n            tmp_668 = v200;\n            v219 = (unsigned int)v200 + (((unsigned int)v213 * 128 | (unsigned int)v213 >> 25) ^ ((unsigned int)v213 >> 11 | (unsigned int)v213 * 0x200000) ^ ((unsigned int)v213 >> 6 | (unsigned int)v213 * 0x4000000)) + (unsigned int)(v199 + tmp_450 + 1986661051) + (((unsigned int)v203 ^ (unsigned int)v209) & (unsigned int)v213 ^ (unsigned int)v203);\n            v220 = (((unsigned int)v210 | (unsigned int)v217) & (unsigned int)v204 | (unsigned int)v210 & (unsigned int)v217) + (((unsigned int)v217 >> 13 | (unsigned int)v217 * 0x80000) ^ ((unsigned int)v217 >> 2 | (unsigned int)v217 * 0x40000000) ^ ((unsigned int)v217 * 0x400 | (unsigned int)v217 >> 22)) + (((unsigned int)v213 * 128 | (unsigned int)v213 >> 25) ^ ((unsigned int)v213 >> 11 | (unsigned int)v213 * 0x200000) ^ ((unsigned int)v213 >> 6 | (unsigned int)v213 * 0x4000000)) + (unsigned int)(v199 + tmp_450 + 1986661051) + (((unsigned int)v203 ^ (unsigned int)v209) & (unsigned int)v213 ^ (unsigned int)v203);\n            tmp_850 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, ((((Conv(64->32, r13<8>) << 0xd<8>) | (Conv(64->32, r13<8>) >> 0x13<8>)) ^ ((Conv(64->32, r13<8>) << 0xf<8>) | (Conv(64->32, r13<8>) >> 0x11<8>))) ^ Conv(64->32, (r13<8> >> 0xa<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v221 = (((unsigned int)v211 * 0x2000 | (unsigned int)v211 >> 19) ^ ((unsigned int)v211 * 0x8000 | (unsigned int)v211 >> 17) ^ (unsigned int)v211 % 0x400) + ((v4 * 0x4000 | v4 >> 18) ^ (v4 >> 7 | v4 * 0x2000000) ^ (unsigned int)v218 % 8) + v2 + v12;\n            tmp_951 = v203 + (((unsigned int)v211 * 0x2000 | (unsigned int)v211 >> 19) ^ ((unsigned int)v211 * 0x8000 | (unsigned int)v211 >> 17) ^ (unsigned int)v211 % 0x400) + ((v4 * 0x4000 | v4 >> 18) ^ (v4 >> 7 | v4 * 0x2000000) ^ (unsigned int)v218 % 8) + v2 + v12 - 2117940946;\n            v222 = (unsigned int)v217 & (((unsigned int)v210 | (unsigned int)v217) & (unsigned int)v204 | (unsigned int)v210 & (unsigned int)v217) + (((unsigned int)v217 >> 13 | (unsigned int)v217 * 0x80000) ^ ((unsigned int)v217 >> 2 | (unsigned int)v217 * 0x40000000) ^ ((unsigned int)v217 * 0x400 | (unsigned int)v217 >> 22)) + (((unsigned int)v213 * 128 | (unsigned int)v213 >> 25) ^ ((unsigned int)v213 >> 11 | (unsigned int)v213 * 0x200000) ^ ((unsigned int)v213 >> 6 | (unsigned int)v213 * 0x4000000)) + (unsigned int)(v199 + tmp_450 + 1986661051) + (((unsigned int)v203 ^ (unsigned int)v209) & (unsigned int)v213 ^ (unsigned int)v203);\n            v223 = v5;\n            v5 = (((unsigned int)v211 * 0x2000 | (unsigned int)v211 >> 19) ^ ((unsigned int)v211 * 0x8000 | (unsigned int)v211 >> 17) ^ (unsigned int)v211 % 0x400) + ((v4 * 0x4000 | v4 >> 18) ^ (v4 >> 7 | v4 * 0x2000000) ^ (unsigned int)v218 % 8) + v2 + v12;\n            v224 = (unsigned int)tmp_951 + (((unsigned int)v209 ^ (unsigned int)v213) & (unsigned int)v219 ^ (unsigned int)v209);\n            v226 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r10<8>) >> 0xb<8>) | (Conv(64->32, r10<8>) * 0x200000<32>)) ^ ((Conv(64->32, r10<8>) >> 0x6<8>) | (Conv(64->32, r10<8>) * 0x4000000<32>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v227 = ((unsigned int)v219 * 128 | (unsigned int)v219 >> 25) ^ ((unsigned int)v219 >> 11 | (unsigned int)v219 * 0x200000) ^ ((unsigned int)v219 >> 6 | (unsigned int)v219 * 0x4000000);\n            v228 = v204 + v227 + v224;\n            v229 = (((unsigned int)v217 | (unsigned int)v220) & (unsigned int)v210 | (unsigned int)v222) + (((unsigned int)v220 >> 13 | (unsigned int)v220 * 0x80000) ^ ((unsigned int)v220 >> 2 | (unsigned int)v220 * 0x40000000) ^ ((unsigned int)v220 * 0x400 | (unsigned int)v220 >> 22)) + (unsigned int)(v227 + v224);\n            tmp_578 = (((unsigned int)v223 * 0x4000 | (unsigned int)v223 >> 18) ^ ((unsigned int)v223 >> 7 | (unsigned int)v223 * 0x2000000) ^ (unsigned int)v223 % 8) + (unsigned int)v218 + v23;\n            v230 = v6;\n            tmp_625 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r11<8>) ^ Conv(64->32, r10<8>)) & Conv(64->32, r9<8>)) ^ Conv(64->32, r11<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_641 = (unsigned int)v220 & (((unsigned int)v217 | (unsigned int)v220) & (unsigned int)v210 | (unsigned int)v222) + (((unsigned int)v220 >> 13 | (unsigned int)v220 * 0x80000) ^ ((unsigned int)v220 >> 2 | (unsigned int)v220 * 0x40000000) ^ ((unsigned int)v220 * 0x400 | (unsigned int)v220 >> 22)) + (unsigned int)(v227 + v224);\n            tmp_646 = ((unsigned int)v213 ^ (unsigned int)v219) & (unsigned int)v228 ^ (unsigned int)v213;\n            v0 = (unsigned long long)((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + tmp_578;\n            tmp_749 = (((unsigned int)v217 | (unsigned int)v220) & (unsigned int)v210 | (unsigned int)v222) + (((unsigned int)v220 >> 13 | (unsigned int)v220 * 0x80000) ^ ((unsigned int)v220 >> 2 | (unsigned int)v220 * 0x40000000) ^ ((unsigned int)v220 * 0x400 | (unsigned int)v220 >> 22)) + (unsigned int)(v227 + v224) >> 2 | ((((unsigned int)v217 | (unsigned int)v220) & (unsigned int)v210 | (unsigned int)v222) + (((unsigned int)v220 >> 13 | (unsigned int)v220 * 0x80000) ^ ((unsigned int)v220 >> 2 | (unsigned int)v220 * 0x40000000) ^ ((unsigned int)v220 * 0x400 | (unsigned int)v220 >> 22)) + (unsigned int)(v227 + v224)) * 0x40000000;\n            tmp_760 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, (((((((Conv(64->32, rbx<8>) | Conv(64->32, r15<8>)) & Conv(64->32, r8<8>)) | Conv(64->32, rsi<8>)) + ((((Conv(64->32, r15<8>) >> 0xd<8>) | (Conv(64->32, r15<8>) << 0x13<8>)) ^ ((Conv(64->32, r15<8>) >> 0x2<8>) | (Conv(64->32, r15<8>) << 0x1e<8>))) ^ ((Conv(64->32, r15<8>) << 0xa<8>) | (Conv(64->32, r15<8>) >> 0x16<8>)))) + Conv(64->32, (rdx<8> + rcx<8>))) >> 0x2<8>) | ((((((Conv(64->32, rbx<8>) | Conv(64->32, r15<8>)) & Conv(64->32, r8<8>)) | Conv(64->32, rsi<8>)) + ((((Conv(64->32, r15<8>) >> 0xd<8>) | (Conv(64->32, r15<8>) << 0x13<8>)) ^ ((Conv(64->32, r15<8>) >> 0x2<8>) | (Conv(64->32, r15<8>) << 0x1e<8>))) ^ ((Conv(64->32, r15<8>) << 0xa<8>) | (Conv(64->32, r15<8>) >> 0x16<8>)))) + Conv(64->32, (rdx<8> + rcx<8>))) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_770 = (((unsigned int)v217 | (unsigned int)v220) & (unsigned int)v210 | (unsigned int)v222) + (((unsigned int)v220 >> 13 | (unsigned int)v220 * 0x80000) ^ ((unsigned int)v220 >> 2 | (unsigned int)v220 * 0x40000000) ^ ((unsigned int)v220 * 0x400 | (unsigned int)v220 >> 22)) + (unsigned int)(v227 + v224) >> 13 | ((((unsigned int)v217 | (unsigned int)v220) & (unsigned int)v210 | (unsigned int)v222) + (((unsigned int)v220 >> 13 | (unsigned int)v220 * 0x80000) ^ ((unsigned int)v220 >> 2 | (unsigned int)v220 * 0x40000000) ^ ((unsigned int)v220 * 0x400 | (unsigned int)v220 >> 22)) + (unsigned int)(v227 + v224)) * 0x80000;\n            v231 = (unsigned int)v210 + (((unsigned int)v228 * 128 | (unsigned int)v228 >> 25) ^ ((unsigned int)v228 >> 11 | (unsigned int)v228 * 0x200000) ^ ((unsigned int)v228 >> 6 | (unsigned int)v228 * 0x4000000)) + (((unsigned int)v213 ^ (unsigned int)v219) & (unsigned int)v228 ^ (unsigned int)v213) + (unsigned int)(v209 + (unsigned long long)((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + tmp_578 - 1838011259);\n            tmp_871 = (((unsigned int)v228 * 128 | (unsigned int)v228 >> 25) ^ ((unsigned int)v228 >> 11 | (unsigned int)v228 * 0x200000) ^ ((unsigned int)v228 >> 6 | (unsigned int)v228 * 0x4000000)) + (((unsigned int)v213 ^ (unsigned int)v219) & (unsigned int)v228 ^ (unsigned int)v213) + (unsigned int)(v209 + (unsigned long long)((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + tmp_578 - 1838011259);\n            v232 = (((unsigned int)v220 | (unsigned int)v229) & (unsigned int)v217 | (unsigned int)tmp_641) + ((unsigned int)tmp_770 ^ (unsigned int)tmp_749 ^ ((unsigned int)v229 * 0x400 | (unsigned int)v229 >> 22)) + (((unsigned int)v228 * 128 | (unsigned int)v228 >> 25) ^ ((unsigned int)v228 >> 11 | (unsigned int)v228 * 0x200000) ^ ((unsigned int)v228 >> 6 | (unsigned int)v228 * 0x4000000)) + (((unsigned int)v213 ^ (unsigned int)v219) & (unsigned int)v228 ^ (unsigned int)v213) + (unsigned int)(v209 + (unsigned long long)((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + tmp_578 - 1838011259);\n            tmp_928 = ((unsigned int)v221 * 0x2000 | (unsigned int)v221 >> 19) ^ ((unsigned int)v221 * 0x8000 | (unsigned int)v221 >> 17) ^ (unsigned int)v221 % 0x400;\n            v233 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Load(addr=stack_base-224, size=4, endness=Iend_LE) >> 0x7<8>) | (Load(addr=stack_base-224, size=4, endness=Iend_LE) << 0x19<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v234 = (unsigned int)v229 & (((unsigned int)v220 | (unsigned int)v229) & (unsigned int)v217 | (unsigned int)tmp_641) + ((unsigned int)tmp_770 ^ (unsigned int)tmp_749 ^ ((unsigned int)v229 * 0x400 | (unsigned int)v229 >> 22)) + (((unsigned int)v228 * 128 | (unsigned int)v228 >> 25) ^ ((unsigned int)v228 >> 11 | (unsigned int)v228 * 0x200000) ^ ((unsigned int)v228 >> 6 | (unsigned int)v228 * 0x4000000)) + (((unsigned int)v213 ^ (unsigned int)v219) & (unsigned int)v228 ^ (unsigned int)v213) + (unsigned int)(v209 + (unsigned long long)((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + tmp_578 - 1838011259);\n            tmp_1025 = ((v6 * 0x4000 | v6 >> 18) ^ (v6 >> 7 | v6 * 0x2000000) ^ (unsigned int)((unsigned long long)v6 >> 3)) + (unsigned int)v223 + v13;\n            v235 = v0;\n            v236 = tmp_928 + tmp_1025;\n            v237 = ((unsigned int)v219 ^ (unsigned int)v228) & (unsigned int)v231;\n            v238 = v232;\n            v239 = v213 + tmp_928 + tmp_1025 - 1564481375;\n            v240 = v231;\n            v6 = tmp_928 + tmp_1025;\n            tmp_385 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, (((Conv(64->32, r8<8>) << 0x7<8>) | (Conv(64->32, r8<8>) >> 0x19<8>)) ^ (((Conv(64->32, r8<8>) >> 0xb<8>) | (Conv(64->32, r8<8>) << 0x15<8>)) ^ ((Conv(64->32, r11<8>) >> 0x6<8>) | (Conv(64->32, r11<8>) << 0x1a<8>))))), Conv(32->64, (Conv(64->32, rdx<8>) + (Conv(64->32, rax<8>) ^ Conv(64->32, r10<8>)))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v241 = (unsigned int)v217 + (((unsigned int)v231 * 128 | (unsigned int)v231 >> 25) ^ ((unsigned int)v231 >> 11 | (unsigned int)v231 * 0x200000) ^ ((unsigned int)v240 >> 6 | (unsigned int)v240 * 0x4000000)) + (unsigned int)v239 + ((unsigned int)v237 ^ (unsigned int)v219);\n            tmp_517 = (((unsigned int)v231 * 128 | (unsigned int)v231 >> 25) ^ ((unsigned int)v231 >> 11 | (unsigned int)v231 * 0x200000) ^ ((unsigned int)v240 >> 6 | (unsigned int)v240 * 0x4000000)) + (unsigned int)v239 + ((unsigned int)v237 ^ (unsigned int)v219);\n            v242 = (((unsigned int)v229 | (unsigned int)v232) & (unsigned int)v220 | (unsigned int)v234) + (((unsigned int)v232 >> 13 | (unsigned int)v232 * 0x80000) ^ ((unsigned int)v232 >> 2 | (unsigned int)v232 * 0x40000000) ^ ((unsigned int)v232 * 0x400 | (unsigned int)v232 >> 22)) + (((unsigned int)v231 * 128 | (unsigned int)v231 >> 25) ^ ((unsigned int)v231 >> 11 | (unsigned int)v231 * 0x200000) ^ ((unsigned int)v240 >> 6 | (unsigned int)v240 * 0x4000000)) + (unsigned int)v239 + ((unsigned int)v237 ^ (unsigned int)v219);\n            tmp_548 = ((unsigned int)v235 * 0x2000 | (unsigned int)v235 >> 19) ^ ((unsigned int)v235 * 0x8000 | (unsigned int)v235 >> 17);\n            tmp_549 = v235;\n            v243 = v7;\n            tmp_672 = ((v7 * 0x4000 | v7 >> 18) ^ (v7 >> 7 | v7 * 0x2000000) ^ (unsigned int)((unsigned long long)v7 >> 3)) + (unsigned int)v230 + v24;\n            v244 = v8;\n            v1 = (unsigned int)tmp_672 + ((unsigned int)tmp_548 ^ (unsigned int)(tmp_549 >> 10));\n            tmp_750 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, ((Conv(64->32, r9<8>) ^ Conv(64->32, r8<8>)) & Conv(64->32, rbx<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_772 = ((unsigned int)v228 ^ (unsigned int)v231) & (unsigned int)v241 ^ (unsigned int)v228;\n            tmp_890 = v220;\n            v245 = (unsigned int)v220 + (((unsigned int)v241 * 128 | (unsigned int)v241 >> 25) ^ ((unsigned int)v241 >> 11 | (unsigned int)v241 * 0x200000) ^ ((unsigned int)v241 >> 6 | (unsigned int)v241 * 0x4000000)) + (unsigned int)(v219 + (unsigned int)tmp_672 + ((unsigned int)tmp_548 ^ (unsigned int)(tmp_549 >> 10)) - 1474664885) + (((unsigned int)v228 ^ (unsigned int)v231) & (unsigned int)v241 ^ (unsigned int)v228);\n            tmp_903 = [D] amd64g_calculate_rflags_all(0x3<64>, t890, Conv(32->64, ((((Conv(64->32, rbx<8>) << 0x7<8>) | (Conv(64->32, rbx<8>) >> 0x19<8>)) ^ (((Conv(64->32, rbx<8>) >> 0xb<8>) | (Conv(64->32, rbx<8>) << 0x15<8>)) ^ ((Conv(64->32, rbx<8>) >> 0x6<8>) | (Conv(64->32, rbx<8>) << 0x1a<8>)))) + (Conv(64->32, ((r10<8> + Conv(32->64, (Conv(64->32, t672) + (Conv(64->32, t548) ^ Conv(64->32, (t549 >> 0xa<8>)))))) - 0x57e599b5<64>)) + (((Conv(64->32, r9<8>) ^ Conv(64->32, r8<8>)) & Conv(64->32, rbx<8>)) ^ Conv(64->32, r9<8>))))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_958 = (((unsigned int)v232 | (unsigned int)v242) & (unsigned int)v229 | (unsigned int)v238 & (unsigned int)v242) + (((unsigned int)v242 >> 13 | (unsigned int)v242 * 0x80000) ^ ((unsigned int)v242 >> 2 | (unsigned int)v242 * 0x40000000) ^ ((unsigned int)v242 * 0x400 | (unsigned int)v242 >> 22));\n            tmp_959 = (((unsigned int)v241 * 128 | (unsigned int)v241 >> 25) ^ ((unsigned int)v241 >> 11 | (unsigned int)v241 * 0x200000) ^ ((unsigned int)v241 >> 6 | (unsigned int)v241 * 0x4000000)) + (unsigned int)(v219 + (unsigned int)tmp_672 + ((unsigned int)tmp_548 ^ (unsigned int)(tmp_549 >> 10)) - 1474664885) + (((unsigned int)v228 ^ (unsigned int)v231) & (unsigned int)v241 ^ (unsigned int)v228);\n            v246 = (((unsigned int)v232 | (unsigned int)v242) & (unsigned int)v229 | (unsigned int)v238 & (unsigned int)v242) + (((unsigned int)v242 >> 13 | (unsigned int)v242 * 0x80000) ^ ((unsigned int)v242 >> 2 | (unsigned int)v242 * 0x40000000) ^ ((unsigned int)v242 * 0x400 | (unsigned int)v242 >> 22)) + (((unsigned int)v241 * 128 | (unsigned int)v241 >> 25) ^ ((unsigned int)v241 >> 11 | (unsigned int)v241 * 0x200000) ^ ((unsigned int)v241 >> 6 | (unsigned int)v241 * 0x4000000)) + (unsigned int)(v219 + (unsigned int)tmp_672 + ((unsigned int)tmp_548 ^ (unsigned int)(tmp_549 >> 10)) - 1474664885) + (((unsigned int)v228 ^ (unsigned int)v231) & (unsigned int)v241 ^ (unsigned int)v228);\n            v247 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((r13<4> << 0xd<8>) | (r13<4> >> 0x13<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v248 = v8 * 0x4000 | v8 >> 18;\n            v249 = (unsigned int)v242 & (unsigned int)v246;\n            v251 = ((unsigned int)(tmp_928 + tmp_1025) * 0x2000 | (unsigned int)(tmp_928 + tmp_1025) >> 19) ^ ((unsigned int)(tmp_928 + tmp_1025) * 0x8000 | (unsigned int)(tmp_928 + tmp_1025) >> 17) ^ (unsigned int)(tmp_928 + tmp_1025 >> 10);\n            v252 = v8;\n            tmp_297 = ((unsigned int)v248 ^ ((unsigned int)v252 >> 7 | (unsigned int)v252 * 0x2000000) ^ (unsigned int)v244 % 8) + (unsigned int)v243 + v25;\n            tmp_312 = ((unsigned int)v231 ^ (unsigned int)v241) & (unsigned int)v245;\n            v253 = v251 + (unsigned long long)(((unsigned int)v248 ^ ((unsigned int)v252 >> 7 | (unsigned int)v252 * 0x2000000) ^ (unsigned int)v244 % 8) + (unsigned int)v243 + v25);\n            v7 = v251 + (unsigned long long)(((unsigned int)v248 ^ ((unsigned int)v252 >> 7 | (unsigned int)v252 * 0x2000000) ^ (unsigned int)v244 % 8) + (unsigned int)v243 + v25);\n            tmp_364 = v228 + v251 + (unsigned long long)(((unsigned int)v248 ^ ((unsigned int)v252 >> 7 | (unsigned int)v252 * 0x2000000) ^ (unsigned int)v244 % 8) + (unsigned int)v243 + v25) - 1035236496;\n            tmp_439 = (((unsigned int)v245 * 128 | (unsigned int)v245 >> 25) ^ ((unsigned int)v245 >> 11 | (unsigned int)v245 * 0x200000) ^ ((unsigned int)v245 >> 6 | (unsigned int)v245 * 0x4000000)) + (unsigned int)(v228 + v251 + (unsigned long long)(((unsigned int)v248 ^ ((unsigned int)v252 >> 7 | (unsigned int)v252 * 0x2000000) ^ (unsigned int)v244 % 8) + (unsigned int)v243 + v25) - 1035236496) + ((unsigned int)tmp_312 ^ (unsigned int)v231);\n            v254 = v229 + (((unsigned int)v245 * 128 | (unsigned int)v245 >> 25) ^ ((unsigned int)v245 >> 11 | (unsigned int)v245 * 0x200000) ^ ((unsigned int)v245 >> 6 | (unsigned int)v245 * 0x4000000)) + (unsigned int)(v228 + v251 + (unsigned long long)(((unsigned int)v248 ^ ((unsigned int)v252 >> 7 | (unsigned int)v252 * 0x2000000) ^ (unsigned int)v244 % 8) + (unsigned int)v243 + v25) - 1035236496) + ((unsigned int)tmp_312 ^ (unsigned int)v231);\n            tmp_480 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Conv(64->32, r10<8>) >> 0x2<8>) | (Conv(64->32, r10<8>) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_576 = (((unsigned int)v245 * 128 | (unsigned int)v245 >> 25) ^ ((unsigned int)v245 >> 11 | (unsigned int)v245 * 0x200000) ^ ((unsigned int)v245 >> 6 | (unsigned int)v245 * 0x4000000)) + (unsigned int)(v228 + v251 + tmp_297 - 1035236496) + ((unsigned int)tmp_312 ^ (unsigned int)v231);\n            v255 = (((unsigned int)v242 | (unsigned int)v246) & (unsigned int)v232 | (unsigned int)v249) + (((unsigned int)v246 >> 13 | (unsigned int)v246 * 0x80000) ^ ((unsigned int)v246 >> 2 | (unsigned int)v246 * 0x40000000) ^ ((unsigned int)v246 * 0x400 | (unsigned int)v246 >> 22)) + (((unsigned int)v245 * 128 | (unsigned int)v245 >> 25) ^ ((unsigned int)v245 >> 11 | (unsigned int)v245 * 0x200000) ^ ((unsigned int)v245 >> 6 | (unsigned int)v245 * 0x4000000)) + (unsigned int)(v228 + v251 + tmp_297 - 1035236496) + ((unsigned int)tmp_312 ^ (unsigned int)v231);\n            v256 = v9;\n            tmp_676 = ((unsigned int)v241 ^ (unsigned int)v245) & (unsigned int)(v229 + tmp_439) ^ (unsigned int)v241;\n            tmp_687 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rbx<8>) ^ Conv(64->32, r15<8>)) & Conv(64->32, (rdi<8> + t439))) ^ Conv(64->32, rbx<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_759 = ((v9 * 0x4000 | v9 >> 18) ^ (v9 >> 7 | v9 * 0x2000000) ^ (unsigned int)v256 % 8) + (unsigned int)v244;\n            tmp_761 = ((v9 * 0x4000 | v9 >> 18) ^ (v9 >> 7 | v9 * 0x2000000) ^ (unsigned int)v256 % 8) + (unsigned int)v244 + v15;\n            v257 = v253;\n            v2 = ((v1 * 0x2000 | v1 >> 19) ^ (v1 * 0x8000 | v1 >> 17) ^ (unsigned int)((unsigned long long)v1 >> 10)) + ((v9 * 0x4000 | v9 >> 18) ^ (v9 >> 7 | v9 * 0x2000000) ^ (unsigned int)v256 % 8) + (unsigned int)v244 + v15;\n            v258 = v253;\n            v260 = v232 + (((unsigned int)v254 * 128 | (unsigned int)v254 >> 25) ^ ((unsigned int)v254 >> 11 | (unsigned int)v254 * 0x200000) ^ ((unsigned int)v254 >> 6 | (unsigned int)v254 * 0x4000000)) + (unsigned int)(v231 + (unsigned long long)((v1 * 0x2000 | v1 >> 19) ^ (v1 * 0x8000 | v1 >> 17) ^ (unsigned int)((unsigned long long)v1 >> 10)) + tmp_761 - 949202525 + tmp_676);\n            v261 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r9<8>) >> 0xd<8>) | (Conv(64->32, r9<8>) << 0x13<8>)) ^ ((Conv(64->32, r9<8>) >> 0x2<8>) | (Conv(64->32, r9<8>) << 0x1e<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v262 = ((unsigned int)v255 >> 13 | (unsigned int)v255 * 0x80000) ^ ((unsigned int)v255 >> 2 | (unsigned int)v255 * 0x40000000) ^ ((unsigned int)v255 * 0x400 | (unsigned int)v255 >> 22);\n            v263 = (unsigned int)v246 | (unsigned int)v255;\n            v264 = v246;\n            tmp_300 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, ((Conv(64->32, rdx<8>) & Conv(64->32, r11<8>)) | (Conv(64->32, r8<8>) & Conv(64->32, r9<8>)))), rsi<8>, cc_ndep<8>);\n            v265 = ((unsigned int)v263 & (unsigned int)v242 | (unsigned int)v264 & (unsigned int)v255) + (unsigned int)v262 + (((unsigned int)v254 * 128 | (unsigned int)v254 >> 25) ^ ((unsigned int)v254 >> 11 | (unsigned int)v254 * 0x200000) ^ ((unsigned int)v254 >> 6 | (unsigned int)v254 * 0x4000000)) + (unsigned int)(v231 + (unsigned long long)((v1 * 0x2000 | v1 >> 19) ^ (v1 * 0x8000 | v1 >> 17) ^ (unsigned int)((unsigned long long)v1 >> 10)) + tmp_761 - 949202525 + tmp_676);\n            v4 = (((unsigned int)v257 * 0x2000 | (unsigned int)v257 >> 19) ^ ((unsigned int)v258 * 0x8000 | (unsigned int)v258 >> 17) ^ (unsigned int)v253 % 0x400) + ((v10 * 0x4000 | v10 >> 18) ^ (v10 >> 7 | v10 * 0x2000000) ^ (unsigned int)((unsigned long long)v10 >> 3)) + (unsigned int)v256 + v3;\n            tmp_513 = v241 + (((unsigned int)v257 * 0x2000 | (unsigned int)v257 >> 19) ^ ((unsigned int)v258 * 0x8000 | (unsigned int)v258 >> 17) ^ (unsigned int)v253 % 0x400) + ((v10 * 0x4000 | v10 >> 18) ^ (v10 >> 7 | v10 * 0x2000000) ^ (unsigned int)((unsigned long long)v10 >> 3)) + (unsigned int)v256 + v3 - 778901479;\n            v266 = v11;\n            v267 = v242 + (((unsigned int)v260 * 128 | (unsigned int)v260 >> 25) ^ ((unsigned int)v260 >> 11 | (unsigned int)v260 * 0x200000) ^ ((unsigned int)v260 >> 6 | (unsigned int)v260 * 0x4000000)) + (unsigned int)tmp_513 + (((unsigned int)v245 ^ (unsigned int)v254) & (unsigned int)v260 ^ (unsigned int)v245);\n            tmp_757 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, (((Conv(64->32, r9<8>) | Conv(64->32, rdx<8>)) & Conv(64->32, r10<8>)) | (Conv(64->32, r9<8>) & Conv(64->32, rdx<8>)))), Conv(32->64, ((((Conv(64->32, rdx<8>) >> 0xd<8>) | (Conv(64->32, rdx<8>) << 0x13<8>)) ^ ((Conv(64->32, rdx<8>) >> 0x2<8>) | (Conv(64->32, rdx<8>) << 0x1e<8>))) ^ ((Conv(64->32, rdx<8>) << 0xa<8>) | (Conv(64->32, rdx<8>) >> 0x16<8>)))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_772 = (((unsigned int)v255 | (unsigned int)v265) & (unsigned int)v246 | (unsigned int)v255 & (unsigned int)v265) + (((unsigned int)v265 >> 13 | (unsigned int)v265 * 0x80000) ^ ((unsigned int)v265 >> 2 | (unsigned int)v265 * 0x40000000) ^ ((unsigned int)v265 * 0x400 | (unsigned int)v265 >> 22));\n            tmp_773 = (((unsigned int)v260 * 128 | (unsigned int)v260 >> 25) ^ ((unsigned int)v260 >> 11 | (unsigned int)v260 * 0x200000) ^ ((unsigned int)v260 >> 6 | (unsigned int)v260 * 0x4000000)) + (unsigned int)tmp_513 + (((unsigned int)v245 ^ (unsigned int)v254) & (unsigned int)v260 ^ (unsigned int)v245);\n            v268 = (((unsigned int)v255 | (unsigned int)v265) & (unsigned int)v246 | (unsigned int)v255 & (unsigned int)v265) + (((unsigned int)v265 >> 13 | (unsigned int)v265 * 0x80000) ^ ((unsigned int)v265 >> 2 | (unsigned int)v265 * 0x40000000) ^ ((unsigned int)v265 * 0x400 | (unsigned int)v265 >> 22)) + (((unsigned int)v260 * 128 | (unsigned int)v260 >> 25) ^ ((unsigned int)v260 >> 11 | (unsigned int)v260 * 0x200000) ^ ((unsigned int)v260 >> 6 | (unsigned int)v260 * 0x4000000)) + (unsigned int)tmp_513 + (((unsigned int)v245 ^ (unsigned int)v254) & (unsigned int)v260 ^ (unsigned int)v245);\n            v269 = ((v2 * 0x2000 | v2 >> 19) ^ (v2 * 0x8000 | v2 >> 17) ^ (unsigned int)((unsigned long long)v2 >> 10)) + ((v11 * 0x4000 | v11 >> 18) ^ (v11 >> 7 | v11 * 0x2000000) ^ (unsigned int)v266 % 8) + v10 + v5;\n            tmp_939 = v245 + ((v2 * 0x2000 | v2 >> 19) ^ (v2 * 0x8000 | v2 >> 17) ^ (unsigned int)((unsigned long long)v2 >> 10)) + ((v11 * 0x4000 | v11 >> 18) ^ (v11 >> 7 | v11 * 0x2000000) ^ (unsigned int)v266 % 8) + v10 + v5 - 694614492;\n            v270 = v12;\n            v8 = ((v2 * 0x2000 | v2 >> 19) ^ (v2 * 0x8000 | v2 >> 17) ^ (unsigned int)((unsigned long long)v2 >> 10)) + ((v11 * 0x4000 | v11 >> 18) ^ (v11 >> 7 | v11 * 0x2000000) ^ (unsigned int)v266 % 8) + v10 + v5;\n            v271 = (unsigned int)tmp_939 + (((unsigned int)v254 ^ (unsigned int)v260) & (unsigned int)v267 ^ (unsigned int)v254);\n            v273 = ((unsigned int)v267 >> 11 | (unsigned int)v267 * 0x200000) ^ ((unsigned int)v267 >> 6 | (unsigned int)v267 * 0x4000000);\n            v274 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r8<8>) >> 0xb<8>) | (Conv(64->32, r8<8>) << 0x15<8>)) ^ ((Conv(64->32, r8<8>) >> 0x6<8>) | (Conv(64->32, r8<8>) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v275 = (unsigned int)v267 * 128 | (unsigned int)v267 >> 25;\n            tmp_284 = ((unsigned int)v275 ^ (unsigned int)v273) + (unsigned int)v271;\n            v276 = v246 + ((unsigned int)v275 ^ (unsigned int)v273) + (unsigned int)v271;\n            v277 = (((unsigned int)v265 | (unsigned int)v268) & (unsigned int)v255 | (unsigned int)v265 & (unsigned int)v268) + (((unsigned int)v268 >> 13 | (unsigned int)v268 * 0x80000) ^ ((unsigned int)v268 >> 2 | (unsigned int)v268 * 0x40000000) ^ ((unsigned int)v268 * 0x400 | (unsigned int)v268 >> 22)) + ((unsigned int)v275 ^ (unsigned int)v273) + (unsigned int)v271;\n            tmp_548 = (((unsigned int)v270 * 0x4000 | (unsigned int)v270 >> 18) ^ ((unsigned int)v270 >> 7 | (unsigned int)v270 * 0x2000000) ^ (unsigned int)v270 % 8) + (unsigned int)v266 + v0;\n            v9 = ((v4 * 0x2000 | v4 >> 19) ^ (v4 * 0x8000 | v4 >> 17) ^ (unsigned int)((unsigned long long)v4 >> 10)) + (((unsigned int)v270 * 0x4000 | (unsigned int)v270 >> 18) ^ ((unsigned int)v270 >> 7 | (unsigned int)v270 * 0x2000000) ^ (unsigned int)v270 % 8) + (unsigned int)v266 + v0;\n            v278 = v23;\n            v279 = v255 + (((unsigned int)(v246 + tmp_284) * 128 | (unsigned int)(v246 + tmp_284) >> 25) ^ ((unsigned int)(v246 + tmp_284) >> 11 | (unsigned int)(v246 + tmp_284) * 0x200000) ^ ((unsigned int)(v246 + tmp_284) >> 6 | (unsigned int)(v246 + tmp_284) * 0x4000000)) + (unsigned int)(v254 + (unsigned long long)((v4 * 0x2000 | v4 >> 19) ^ (v4 * 0x8000 | v4 >> 17) ^ (unsigned int)((unsigned long long)v4 >> 10)) + tmp_548 - 200395387) + (((unsigned int)v260 ^ (unsigned int)v267) & (unsigned int)(v246 + tmp_284) ^ (unsigned int)v260);\n            v280 = (((unsigned int)v268 | (unsigned int)v277) & (unsigned int)v265 | (unsigned int)v268 & (unsigned int)v277) + (((unsigned int)v277 >> 13 | (unsigned int)v277 * 0x80000) ^ ((unsigned int)v277 >> 2 | (unsigned int)v277 * 0x40000000) ^ ((unsigned int)v277 * 0x400 | (unsigned int)v277 >> 22)) + (((unsigned int)(v246 + tmp_284) * 128 | (unsigned int)(v246 + tmp_284) >> 25) ^ ((unsigned int)(v246 + tmp_284) >> 11 | (unsigned int)(v246 + tmp_284) * 0x200000) ^ ((unsigned int)(v246 + tmp_284) >> 6 | (unsigned int)(v246 + tmp_284) * 0x4000000)) + (unsigned int)(v254 + (unsigned long long)((v4 * 0x2000 | v4 >> 19) ^ (v4 * 0x8000 | v4 >> 17) ^ (unsigned int)((unsigned long long)v4 >> 10)) + tmp_548 - 200395387) + (((unsigned int)v260 ^ (unsigned int)v267) & (unsigned int)(v246 + tmp_284) ^ (unsigned int)v260);\n            v281 = (v269 * 0x2000 | v269 % 0x80000) ^ ((unsigned int)r12<8> * 0x8000 | (unsigned int)r12<8> >> 17) ^ (unsigned int)r12<8> % 0x400;\n            v282 = ((v23 * 0x4000 | v23 >> 18) ^ (v23 >> 7 | v23 * 0x2000000) ^ (unsigned int)((unsigned long long)v23 >> 3)) + (unsigned int)v270 + v6;\n            v283 = v13;\n            v284 = v281 + v282;\n            v11 = v281 + v282;\n            v285 = (unsigned int)v265 + (((unsigned int)v279 * 128 | (unsigned int)v279 >> 25) ^ ((unsigned int)v279 >> 11 | (unsigned int)v279 * 0x200000) ^ ((unsigned int)v279 >> 6 | (unsigned int)v279 * 0x4000000)) + (unsigned int)(v260 + v284 + 275423344) + (((unsigned int)v267 ^ (unsigned int)v276) & (unsigned int)v279 ^ (unsigned int)v267);\n            v286 = (((unsigned int)v277 | (unsigned int)v280) & (unsigned int)v268 | (unsigned int)v277 & (unsigned int)v280) + (((unsigned int)v280 >> 13 | (unsigned int)v280 * 0x80000) ^ ((unsigned int)v280 >> 2 | (unsigned int)v280 * 0x40000000) ^ ((unsigned int)v280 * 0x400 | (unsigned int)v280 >> 22)) + (((unsigned int)v279 * 128 | (unsigned int)v279 >> 25) ^ ((unsigned int)v279 >> 11 | (unsigned int)v279 * 0x200000) ^ ((unsigned int)v279 >> 6 | (unsigned int)v279 * 0x4000000)) + (unsigned int)(v260 + v284 + 275423344) + (((unsigned int)v267 ^ (unsigned int)v276) & (unsigned int)v279 ^ (unsigned int)v267);\n            tmp_715 = (((unsigned int)v283 * 0x4000 | (unsigned int)v283 >> 18) ^ ((unsigned int)v283 >> 7 | (unsigned int)v283 * 0x2000000) ^ (unsigned int)v283 % 8) + (unsigned int)v278 + v1;\n            v287 = v24;\n            v10 = ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + (unsigned int)tmp_715;\n            v29 = ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + (unsigned int)tmp_715;\n            v288 = (unsigned int)v268 + (((unsigned int)v285 * 128 | (unsigned int)v285 >> 25) ^ ((unsigned int)v285 >> 11 | (unsigned int)v285 * 0x200000) ^ ((unsigned int)v285 >> 6 | (unsigned int)v285 * 0x4000000)) + (unsigned int)(v267 + ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + (unsigned int)tmp_715 + 430227734) + (((unsigned int)v276 ^ (unsigned int)v279) & (unsigned int)v285 ^ (unsigned int)v276);\n            v289 = (((unsigned int)v280 | (unsigned int)v286) & (unsigned int)v277 | (unsigned int)v280 & (unsigned int)v286) + (((unsigned int)v286 >> 13 | (unsigned int)v286 * 0x80000) ^ ((unsigned int)v286 >> 2 | (unsigned int)v286 * 0x40000000) ^ ((unsigned int)v286 * 0x400 | (unsigned int)v286 >> 22)) + (((unsigned int)v285 * 128 | (unsigned int)v285 >> 25) ^ ((unsigned int)v285 >> 11 | (unsigned int)v285 * 0x200000) ^ ((unsigned int)v285 >> 6 | (unsigned int)v285 * 0x4000000)) + (unsigned int)(v267 + ((v9 * 0x2000 | v9 >> 19) ^ (v9 * 0x8000 | v9 >> 17) ^ (unsigned int)((unsigned long long)v9 >> 10)) + (unsigned int)tmp_715 + 430227734) + (((unsigned int)v276 ^ (unsigned int)v279) & (unsigned int)v285 ^ (unsigned int)v276);\n            tmp_332 = ((v24 * 0x4000 | v24 >> 18) ^ (v24 >> 7 | v24 * 0x2000000) ^ (unsigned int)v287 % 8) + (unsigned int)v283 + v7;\n            v292 = v25;\n            v293 = ((unsigned int)tmp_942 ^ ((unsigned int)v284 * 0x8000 | (unsigned int)v284 >> 17) ^ (unsigned int)v284 % 0x400) + (unsigned int)tmp_332;\n            v30 = v293;\n            v294 = (unsigned int)v277 + (((unsigned int)v288 * 128 | (unsigned int)v288 >> 25) ^ ((unsigned int)v288 >> 11 | (unsigned int)v288 * 0x200000) ^ ((unsigned int)v288 >> 6 | (unsigned int)v288 * 0x4000000)) + (unsigned int)(v276 + v293 + 506948616) + (((unsigned int)v279 ^ (unsigned int)v285) & (unsigned int)v288 ^ (unsigned int)v279);\n            v295 = (((unsigned int)v286 | (unsigned int)v289) & (unsigned int)v280 | (unsigned int)v286 & (unsigned int)v289) + (((unsigned int)v289 >> 13 | (unsigned int)v289 * 0x80000) ^ ((unsigned int)v289 >> 2 | (unsigned int)v289 * 0x40000000) ^ ((unsigned int)v289 * 0x400 | (unsigned int)v289 >> 22)) + (((unsigned int)v288 * 128 | (unsigned int)v288 >> 25) ^ ((unsigned int)v288 >> 11 | (unsigned int)v288 * 0x200000) ^ ((unsigned int)v288 >> 6 | (unsigned int)v288 * 0x4000000)) + (unsigned int)(v276 + v293 + 506948616) + (((unsigned int)v279 ^ (unsigned int)v285) & (unsigned int)v288 ^ (unsigned int)v279);\n            v296 = ((v10 * 0x2000 | v10 >> 19) ^ (v10 * 0x8000 | v10 >> 17) ^ (unsigned int)((unsigned long long)v10 >> 10)) + ((v25 * 0x4000 | v25 >> 18) ^ (v25 >> 7 | v25 * 0x2000000) ^ (unsigned int)v292 % 8) + (unsigned int)v287 + v2;\n            v31 = ((v10 * 0x2000 | v10 >> 19) ^ (v10 * 0x8000 | v10 >> 17) ^ (unsigned int)((unsigned long long)v10 >> 10)) + ((v25 * 0x4000 | v25 >> 18) ^ (v25 >> 7 | v25 * 0x2000000) ^ (unsigned int)v292 % 8) + (unsigned int)v287 + v2;\n            v297 = (unsigned int)v289 & (((unsigned int)v286 | (unsigned int)v289) & (unsigned int)v280 | (unsigned int)v286 & (unsigned int)v289) + (((unsigned int)v289 >> 13 | (unsigned int)v289 * 0x80000) ^ ((unsigned int)v289 >> 2 | (unsigned int)v289 * 0x40000000) ^ ((unsigned int)v289 * 0x400 | (unsigned int)v289 >> 22)) + (((unsigned int)v288 * 128 | (unsigned int)v288 >> 25) ^ ((unsigned int)v288 >> 11 | (unsigned int)v288 * 0x200000) ^ ((unsigned int)v288 >> 6 | (unsigned int)v288 * 0x4000000)) + (unsigned int)(v276 + v293 + 506948616) + (((unsigned int)v279 ^ (unsigned int)v285) & (unsigned int)v288 ^ (unsigned int)v279);\n            v298 = (unsigned int)v293 * 0x2000 | (unsigned int)v293 >> 19;\n            v299 = (((unsigned int)v294 * 128 | (unsigned int)v294 >> 25) ^ ((unsigned int)v294 >> 11 | (unsigned int)v294 * 0x200000) ^ ((unsigned int)v294 >> 6 | (unsigned int)v294 * 0x4000000)) + (((unsigned int)v285 ^ (unsigned int)v288) & (unsigned int)v294 ^ (unsigned int)v285) + (unsigned int)(v279 + v296 + 659060556);\n            v300 = v280 + v299;\n            v301 = ((unsigned int)v295 >> 13 | (unsigned int)v295 * 0x80000) ^ ((unsigned int)v295 >> 2 | (unsigned int)v295 * 0x40000000) ^ ((unsigned int)v295 * 0x400 | (unsigned int)v295 >> 22);\n            v302 = ((unsigned int)v289 | (unsigned int)v295) & (unsigned int)v286;\n            tmp_283 = ((unsigned int)v302 | (unsigned int)v297) + (unsigned int)v301;\n            v303 = ((unsigned int)v302 | (unsigned int)v297) + (unsigned int)v301 + (unsigned int)v299;\n            tmp_361 = (unsigned int)v298 ^ ((unsigned int)v293 * 0x8000 | (unsigned int)v293 >> 17) ^ (unsigned int)v293 % 0x400;\n            v304 = ((unsigned int)v298 ^ ((unsigned int)v293 * 0x8000 | (unsigned int)v293 >> 17) ^ (unsigned int)v293 % 0x400) + ((v15 * 0x4000 | v15 >> 18) ^ (v15 >> 7 | v15 * 0x2000000) ^ (unsigned int)((unsigned long long)v15 >> 3)) + (unsigned int)v292 + v4;\n            v32 = v304;\n            tmp_540 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((Conv(64->32, r8<8>) << 0xa<8>) | (Conv(64->32, r8<8>) >> 0x16<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_622 = v286;\n            v305 = (unsigned int)v286 + (((unsigned int)v300 * 128 | (unsigned int)v300 >> 25) ^ ((unsigned int)v300 >> 11 | (unsigned int)v300 * 0x200000) ^ ((unsigned int)v300 >> 6 | (unsigned int)v300 * 0x4000000)) + (((unsigned int)v288 ^ (unsigned int)v294) & (unsigned int)v300 ^ (unsigned int)v288) + (unsigned int)(v285 + v304 + 883997877);\n            tmp_721 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, (((Conv(64->32, r9<8>) | Conv(64->32, r8<8>)) & Conv(64->32, r10<8>)) | (Conv(64->32, r9<8>) & Conv(64->32, r8<8>)))), Conv(32->64, ((((Conv(64->32, r8<8>) >> 0xd<8>) | (Conv(64->32, r8<8>) << 0x13<8>)) ^ ((Conv(64->32, r8<8>) >> 0x2<8>) | (Conv(64->32, r8<8>) << 0x1e<8>))) ^ ((Conv(64->32, r8<8>) << 0xa<8>) | (Conv(64->32, r8<8>) >> 0x16<8>)))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_736 = (((unsigned int)v295 | (unsigned int)v303) & (unsigned int)v289 | (unsigned int)v295 & (unsigned int)v303) + (((unsigned int)v303 >> 13 | (unsigned int)v303 * 0x80000) ^ ((unsigned int)v303 >> 2 | (unsigned int)v303 * 0x40000000) ^ ((unsigned int)v303 * 0x400 | (unsigned int)v303 >> 22));\n            tmp_737 = (((unsigned int)v300 * 128 | (unsigned int)v300 >> 25) ^ ((unsigned int)v300 >> 11 | (unsigned int)v300 * 0x200000) ^ ((unsigned int)v300 >> 6 | (unsigned int)v300 * 0x4000000)) + (((unsigned int)v288 ^ (unsigned int)v294) & (unsigned int)v300 ^ (unsigned int)v288) + (unsigned int)(v285 + v304 + 883997877);\n            v306 = (((unsigned int)v295 | (unsigned int)v303) & (unsigned int)v289 | (unsigned int)v295 & (unsigned int)v303) + (((unsigned int)v303 >> 13 | (unsigned int)v303 * 0x80000) ^ ((unsigned int)v303 >> 2 | (unsigned int)v303 * 0x40000000) ^ ((unsigned int)v303 * 0x400 | (unsigned int)v303 >> 22)) + (((unsigned int)v300 * 128 | (unsigned int)v300 >> 25) ^ ((unsigned int)v300 >> 11 | (unsigned int)v300 * 0x200000) ^ ((unsigned int)v300 >> 6 | (unsigned int)v300 * 0x4000000)) + (((unsigned int)v288 ^ (unsigned int)v294) & (unsigned int)v300 ^ (unsigned int)v288) + (unsigned int)(v285 + v304 + 883997877);\n            v307 = (((unsigned int)v296 * 0x2000 | (unsigned int)v296 >> 19) ^ ((unsigned int)v296 * 0x8000 | (unsigned int)v296 >> 17) ^ (unsigned int)v296 % 0x400) + ((v3 * 0x4000 | v3 >> 18) ^ (v3 >> 7 | v3 * 0x2000000) ^ (unsigned int)((unsigned long long)v3 >> 3)) + v15 + v8;\n            v308 = (unsigned int)v303 & (((unsigned int)v295 | (unsigned int)v303) & (unsigned int)v289 | (unsigned int)v295 & (unsigned int)v303) + (((unsigned int)v303 >> 13 | (unsigned int)v303 * 0x80000) ^ ((unsigned int)v303 >> 2 | (unsigned int)v303 * 0x40000000) ^ ((unsigned int)v303 * 0x400 | (unsigned int)v303 >> 22)) + (((unsigned int)v300 * 128 | (unsigned int)v300 >> 25) ^ ((unsigned int)v300 >> 11 | (unsigned int)v300 * 0x200000) ^ ((unsigned int)v300 >> 6 | (unsigned int)v300 * 0x4000000)) + (((unsigned int)v288 ^ (unsigned int)v294) & (unsigned int)v300 ^ (unsigned int)v288) + (unsigned int)(v285 + v304 + 883997877);\n            v33 = (((unsigned int)v296 * 0x2000 | (unsigned int)v296 >> 19) ^ ((unsigned int)v296 * 0x8000 | (unsigned int)v296 >> 17) ^ (unsigned int)v296 % 0x400) + ((v3 * 0x4000 | v3 >> 18) ^ (v3 >> 7 | v3 * 0x2000000) ^ (unsigned int)((unsigned long long)v3 >> 3)) + v15 + v8;\n            tmp_966 = ((unsigned int)v294 ^ (unsigned int)v300) & (unsigned int)v305 ^ (unsigned int)v294;\n            v309 = (((unsigned int)v305 * 128 | (unsigned int)v305 >> 25) ^ ((unsigned int)v305 >> 11 | (unsigned int)v305 * 0x200000) ^ ((unsigned int)v305 >> 6 | (unsigned int)v305 * 0x4000000)) + (unsigned int)(v288 + v307 + 958139571) + (((unsigned int)v294 ^ (unsigned int)v300) & (unsigned int)v305 ^ (unsigned int)v294);\n            v310 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, (((Conv(64->32, rax<8>) << 0x7<8>) | (Conv(64->32, rax<8>) >> 0x19<8>)) ^ (((Conv(64->32, rax<8>) >> 0xb<8>) | (Conv(64->32, rax<8>) << 0x15<8>)) ^ ((Conv(64->32, rax<8>) >> 0x6<8>) | (Conv(64->32, rax<8>) << 0x1a<8>))))), Conv(32->64, (Conv(64->32, ((rcx<8> + r11<8>) + 0x391c0cb3<64>)) + (((Conv(64->32, r13<8>) ^ Conv(64->32, r14<8>)) & Conv(64->32, rax<8>)) ^ Conv(64->32, r13<8>)))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v311 = (unsigned int)v306 >> 2 | (unsigned int)v306 * 0x40000000;\n            tmp_277 = v289;\n            v312 = v289 + v309;\n            v313 = (((unsigned int)v303 | (unsigned int)v306) & (unsigned int)v295 | (unsigned int)v308) + (((unsigned int)v306 >> 13 | (unsigned int)v306 * 0x80000) ^ (unsigned int)v311 ^ ((unsigned int)v306 * 0x400 | (unsigned int)v306 >> 22)) + (unsigned int)v309;\n            tmp_560 = (((unsigned int)v304 * 0x2000 | (unsigned int)v304 >> 19) ^ ((unsigned int)v304 * 0x8000 | (unsigned int)v304 >> 17) ^ (unsigned int)v304 % 0x400) + ((v5 * 0x4000 | v5 >> 18) ^ (v5 >> 7 | v5 * 0x2000000) ^ (unsigned int)((unsigned long long)v5 >> 3)) + v3 + v9;\n            tmp_569 = (unsigned int)v306 & (((unsigned int)v303 | (unsigned int)v306) & (unsigned int)v295 | (unsigned int)v308) + (((unsigned int)v306 >> 13 | (unsigned int)v306 * 0x80000) ^ (unsigned int)v311 ^ ((unsigned int)v306 * 0x400 | (unsigned int)v306 >> 22)) + (unsigned int)v309;\n            v34 = (((unsigned int)v304 * 0x2000 | (unsigned int)v304 >> 19) ^ ((unsigned int)v304 * 0x8000 | (unsigned int)v304 >> 17) ^ (unsigned int)v304 % 0x400) + ((v5 * 0x4000 | v5 >> 18) ^ (v5 >> 7 | v5 * 0x2000000) ^ (unsigned int)((unsigned long long)v5 >> 3)) + v3 + v9;\n            v3 = (((unsigned int)v304 * 0x2000 | (unsigned int)v304 >> 19) ^ ((unsigned int)v304 * 0x8000 | (unsigned int)v304 >> 17) ^ (unsigned int)v304 % 0x400) + ((v5 * 0x4000 | v5 >> 18) ^ (v5 >> 7 | v5 * 0x2000000) ^ (unsigned int)((unsigned long long)v5 >> 3)) + v3 + v9;\n            tmp_616 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r14<8>) ^ Conv(64->32, rax<8>)) & Conv(64->32, r10<8>)) ^ Conv(64->32, r14<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_632 = ((unsigned int)v300 ^ (unsigned int)v305) & (unsigned int)v312 ^ (unsigned int)v300;\n            tmp_727 = (((unsigned int)v303 | (unsigned int)v306) & (unsigned int)v295 | (unsigned int)v308) + (((unsigned int)v306 >> 13 | (unsigned int)v306 * 0x80000) ^ (unsigned int)v311 ^ ((unsigned int)v306 * 0x400 | (unsigned int)v306 >> 22)) + (unsigned int)v309 >> 2 | ((((unsigned int)v303 | (unsigned int)v306) & (unsigned int)v295 | (unsigned int)v308) + (((unsigned int)v306 >> 13 | (unsigned int)v306 * 0x80000) ^ (unsigned int)v311 ^ ((unsigned int)v306 * 0x400 | (unsigned int)v306 >> 22)) + (unsigned int)v309) * 0x40000000;\n            tmp_738 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, (((((((Conv(64->32, r8<8>) | Conv(64->32, rdi<8>)) & Conv(64->32, r9<8>)) | Conv(64->32, r15<8>)) + ((((Conv(64->32, rdi<8>) >> 0xd<8>) | (Conv(64->32, rdi<8>) << 0x13<8>)) ^ Conv(64->32, rcx<8>)) ^ ((Conv(64->32, rdi<8>) << 0xa<8>) | (Conv(64->32, rdi<8>) >> 0x16<8>)))) + Conv(64->32, rdx<8>)) >> 0x2<8>) | ((((((Conv(64->32, r8<8>) | Conv(64->32, rdi<8>)) & Conv(64->32, r9<8>)) | Conv(64->32, r15<8>)) + ((((Conv(64->32, rdi<8>) >> 0xd<8>) | (Conv(64->32, rdi<8>) << 0x13<8>)) ^ Conv(64->32, rcx<8>)) ^ ((Conv(64->32, rdi<8>) << 0xa<8>) | (Conv(64->32, rdi<8>) >> 0x16<8>)))) + Conv(64->32, rdx<8>)) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_748 = (((unsigned int)v303 | (unsigned int)v306) & (unsigned int)v295 | (unsigned int)v308) + (((unsigned int)v306 >> 13 | (unsigned int)v306 * 0x80000) ^ (unsigned int)v311 ^ ((unsigned int)v306 * 0x400 | (unsigned int)v306 >> 22)) + (unsigned int)v309 >> 13 | ((((unsigned int)v303 | (unsigned int)v306) & (unsigned int)v295 | (unsigned int)v308) + (((unsigned int)v306 >> 13 | (unsigned int)v306 * 0x80000) ^ (unsigned int)v311 ^ ((unsigned int)v306 * 0x400 | (unsigned int)v306 >> 22)) + (unsigned int)v309) * 0x80000;\n            v314 = (unsigned int)v295 + (((unsigned int)v312 * 128 | (unsigned int)v312 >> 25) ^ ((unsigned int)v312 >> 11 | (unsigned int)v312 * 0x200000) ^ ((unsigned int)v312 >> 6 | (unsigned int)v312 * 0x4000000)) + (unsigned int)(v294 + tmp_560 + 1322822218) + (((unsigned int)v300 ^ (unsigned int)v305) & (unsigned int)v312 ^ (unsigned int)v300);\n            v315 = (((unsigned int)v306 | (unsigned int)v313) & (unsigned int)v303 | (unsigned int)tmp_569) + ((unsigned int)tmp_748 ^ (unsigned int)tmp_727 ^ ((unsigned int)v313 * 0x400 | (unsigned int)v313 >> 22)) + (((unsigned int)v312 * 128 | (unsigned int)v312 >> 25) ^ ((unsigned int)v312 >> 11 | (unsigned int)v312 * 0x200000) ^ ((unsigned int)v312 >> 6 | (unsigned int)v312 * 0x4000000)) + (unsigned int)(v294 + tmp_560 + 1322822218) + (((unsigned int)v300 ^ (unsigned int)v305) & (unsigned int)v312 ^ (unsigned int)v300);\n            tmp_921 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, ((((Conv(64->32, r11<8>) << 0xd<8>) | (Conv(64->32, r11<8>) >> 0x13<8>)) ^ ((Conv(64->32, r11<8>) << 0xf<8>) | (Conv(64->32, r11<8>) >> 0x11<8>))) ^ Conv(64->32, (r11<8> >> 0xa<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v35 = ((v0 * 0x4000 | v0 >> 18) ^ (v0 >> 7 | v0 * 0x2000000) ^ (unsigned int)((unsigned long long)v0 >> 3)) + v5 + v11 + (((unsigned int)v307 * 0x2000 | (unsigned int)v307 >> 19) ^ ((unsigned int)v307 * 0x8000 | (unsigned int)v307 >> 17) ^ (unsigned int)v307 % 0x400);\n            v316 = v300 + ((v0 * 0x4000 | v0 >> 18) ^ (v0 >> 7 | v0 * 0x2000000) ^ (unsigned int)((unsigned long long)v0 >> 3)) + v5 + v11 + (((unsigned int)v307 * 0x2000 | (unsigned int)v307 >> 19) ^ ((unsigned int)v307 * 0x8000 | (unsigned int)v307 >> 17) ^ (unsigned int)v307 % 0x400) + 1537002063;\n            v5 = ((v0 * 0x4000 | v0 >> 18) ^ (v0 >> 7 | v0 * 0x2000000) ^ (unsigned int)((unsigned long long)v0 >> 3)) + v5 + v11 + (((unsigned int)v307 * 0x2000 | (unsigned int)v307 >> 19) ^ ((unsigned int)v307 * 0x8000 | (unsigned int)v307 >> 17) ^ (unsigned int)v307 % 0x400);\n            v317 = (unsigned int)v314 * 128 | (unsigned int)v314 >> 25;\n            v318 = ((unsigned int)v305 ^ (unsigned int)v312) & (unsigned int)v314 ^ (unsigned int)v305;\n            v319 = [D] amd64g_calculate_rflags_all(0x13<64>, r13<8>, 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v320 = (unsigned int)v314 >> 6 | (unsigned int)v314 * 0x4000000;\n            tmp_332 = (unsigned int)v317 ^ ((unsigned int)v314 >> 11 | (unsigned int)v314 * 0x200000) ^ (unsigned int)v320;\n            v321 = (unsigned int)v303 + ((unsigned int)v317 ^ ((unsigned int)v314 >> 11 | (unsigned int)v314 * 0x200000) ^ (unsigned int)v320) + (unsigned int)(v316 + v318);\n            tmp_460 = ((unsigned int)v317 ^ ((unsigned int)v314 >> 11 | (unsigned int)v314 * 0x200000) ^ (unsigned int)v320) + (unsigned int)(v316 + v318);\n            v322 = (((unsigned int)v313 | (unsigned int)v315) & (unsigned int)v306 | (unsigned int)v313 & (unsigned int)v315) + (((unsigned int)v315 >> 13 | (unsigned int)v315 * 0x80000) ^ ((unsigned int)v315 >> 2 | (unsigned int)v315 * 0x40000000) ^ ((unsigned int)v315 * 0x400 | (unsigned int)v315 >> 22)) + ((unsigned int)v317 ^ ((unsigned int)v314 >> 11 | (unsigned int)v314 * 0x200000) ^ (unsigned int)v320) + (unsigned int)(v316 + v318);\n            tmp_644 = ((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + ((v6 * 0x4000 | v6 >> 18) ^ (v6 >> 7 | v6 * 0x2000000) ^ (unsigned int)((unsigned long long)v6 >> 3)) + v0 + v10;\n            tmp_658 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, ((((Load(addr=stack_base-236, size=4, endness=Iend_LE) << 0xd<8>) | (Load(addr=stack_base-236, size=4, endness=Iend_LE) >> 0x13<8>)) ^ ((Load(addr=stack_base-236, size=4, endness=Iend_LE) << 0xf<8>) | (Load(addr=stack_base-236, size=4, endness=Iend_LE) >> 0x11<8>))) ^ Conv(64->32, (Conv(32->64, Load(addr=stack_base-236, size=4, endness=Iend_LE)) >> 0xa<8>)))), Conv(32->64, ((((((Load(addr=stack_base-224, size=4, endness=Iend_LE) << 0xe<8>) | (Load(addr=stack_base-224, size=4, endness=Iend_LE) >> 0x12<8>)) ^ ((Load(addr=stack_base-224, size=4, endness=Iend_LE) >> 0x7<8>) | (Load(addr=stack_base-224, size=4, endness=Iend_LE) << 0x19<8>))) ^ Conv(64->32, (Conv(32->64, Load(addr=stack_base-224, size=4, endness=Iend_LE)) >> 0x3<8>))) + Load(addr=stack_base-248, size=4, endness=Iend_LE)) + Load(addr=stack_base-208, size=4, endness=Iend_LE))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v0 = ((v3 * 0x2000 | v3 >> 19) ^ (v3 * 0x8000 | v3 >> 17) ^ (unsigned int)((unsigned long long)v3 >> 10)) + ((v6 * 0x4000 | v6 >> 18) ^ (v6 >> 7 | v6 * 0x2000000) ^ (unsigned int)((unsigned long long)v6 >> 3)) + v0 + v10;\n            v36 = tmp_644;\n            tmp_703 = ((unsigned int)v312 ^ (unsigned int)v314) & (unsigned int)v321 ^ (unsigned int)v312;\n            tmp_816 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, (((Conv(64->32, r8<8>) << 0x7<8>) | (Conv(64->32, r8<8>) >> 0x19<8>)) ^ (((Conv(64->32, r8<8>) >> 0xb<8>) | (Conv(64->32, r8<8>) << 0x15<8>)) ^ ((Conv(64->32, r8<8>) >> 0x6<8>) | (Conv(64->32, r8<8>) << 0x1a<8>))))), Conv(32->64, (Conv(64->32, ((rax<8> + t644) + 0x682e6ff3<64>)) + (((Conv(64->32, r10<8>) ^ Conv(64->32, r9<8>)) & Conv(64->32, r8<8>)) ^ Conv(64->32, r10<8>)))), DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_852 = v306;\n            tmp_853 = (((unsigned int)v321 * 128 | (unsigned int)v321 >> 25) ^ ((unsigned int)v321 >> 11 | (unsigned int)v321 * 0x200000) ^ ((unsigned int)v321 >> 6 | (unsigned int)v321 * 0x4000000)) + (unsigned int)(v305 + tmp_644 + 1747873779) + (((unsigned int)v312 ^ (unsigned int)v314) & (unsigned int)v321 ^ (unsigned int)v312);\n            v323 = (unsigned int)v306 + (((unsigned int)v321 * 128 | (unsigned int)v321 >> 25) ^ ((unsigned int)v321 >> 11 | (unsigned int)v321 * 0x200000) ^ ((unsigned int)v321 >> 6 | (unsigned int)v321 * 0x4000000)) + (unsigned int)(v305 + tmp_644 + 1747873779) + (((unsigned int)v312 ^ (unsigned int)v314) & (unsigned int)v321 ^ (unsigned int)v312);\n            tmp_919 = (((unsigned int)v321 * 128 | (unsigned int)v321 >> 25) ^ ((unsigned int)v321 >> 11 | (unsigned int)v321 * 0x200000) ^ ((unsigned int)v321 >> 6 | (unsigned int)v321 * 0x4000000)) + (unsigned int)(v305 + tmp_644 + 1747873779) + (((unsigned int)v312 ^ (unsigned int)v314) & (unsigned int)v321 ^ (unsigned int)v312);\n            v324 = (((unsigned int)v315 | (unsigned int)v322) & (unsigned int)v313 | (unsigned int)v315 & (unsigned int)v322) + (((unsigned int)v322 >> 13 | (unsigned int)v322 * 0x80000) ^ ((unsigned int)v322 >> 2 | (unsigned int)v322 * 0x40000000) ^ ((unsigned int)v322 * 0x400 | (unsigned int)v322 >> 22)) + (((unsigned int)v321 * 128 | (unsigned int)v321 >> 25) ^ ((unsigned int)v321 >> 11 | (unsigned int)v321 * 0x200000) ^ ((unsigned int)v321 >> 6 | (unsigned int)v321 * 0x4000000)) + (unsigned int)(v305 + tmp_644 + 1747873779) + (((unsigned int)v312 ^ (unsigned int)v314) & (unsigned int)v321 ^ (unsigned int)v312);\n            tmp_937 = [D] amd64g_calculate_rflags_all(0x3<64>, Conv(32->64, ((((Conv(64->32, rcx<8>) | Conv(64->32, rdx<8>)) & Conv(64->32, rsi<8>)) | (Conv(64->32, rcx<8>) & Conv(64->32, rdx<8>))) + ((((Conv(64->32, rdx<8>) >> 0xd<8>) | (Conv(64->32, rdx<8>) << 0x13<8>)) ^ ((Conv(64->32, rdx<8>) >> 0x2<8>) | (Conv(64->32, rdx<8>) << 0x1e<8>))) ^ ((Conv(64->32, rdx<8>) << 0xa<8>) | (Conv(64->32, rdx<8>) >> 0x16<8>))))), t919, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v325 = (v5 * 0x2000 | v5 >> 19) ^ (v5 * 0x8000 | v5 >> 17) ^ (unsigned int)((unsigned long long)v5 >> 10);\n            v326 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((Load(addr=stack_base-244, size=4, endness=Iend_LE) << 0xe<8>) | (Load(addr=stack_base-244, size=4, endness=Iend_LE) >> 0x12<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v327 = (v1 * 0x4000 | v1 >> 18) ^ (v1 >> 7 | v1 * 0x2000000) ^ (unsigned int)((unsigned long long)v1 >> 3);\n            v328 = v325 + (unsigned int)v293 + (unsigned int)v327 + v6;\n            v37 = v325 + (unsigned int)v293 + (unsigned int)v327 + v6;\n            tmp_406 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, rdi<8>) >> 0xb<8>) | (Conv(64->32, rdi<8>) << 0x15<8>)) ^ ((Conv(64->32, rdi<8>) >> 0x6<8>) | (Conv(64->32, rdi<8>) << 0x1a<8>)))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_431 = (unsigned int)(v312 + v325 + (unsigned int)v293 + (unsigned int)v327 + v6 + 1955562222) + (((unsigned int)v314 ^ (unsigned int)v321) & (unsigned int)v323 ^ (unsigned int)v314);\n            v329 = (unsigned int)v313 + (((unsigned int)v323 * 128 | (unsigned int)v323 >> 25) ^ ((unsigned int)v323 >> 11 | (unsigned int)v323 * 0x200000) ^ ((unsigned int)v323 >> 6 | (unsigned int)v323 * 0x4000000)) + (unsigned int)(v312 + v325 + (unsigned int)v293 + (unsigned int)v327 + v6 + 1955562222) + (((unsigned int)v314 ^ (unsigned int)v321) & (unsigned int)v323 ^ (unsigned int)v314);\n            tmp_558 = (((unsigned int)v323 * 128 | (unsigned int)v323 >> 25) ^ ((unsigned int)v323 >> 11 | (unsigned int)v323 * 0x200000) ^ ((unsigned int)v323 >> 6 | (unsigned int)v323 * 0x4000000)) + (unsigned int)(v312 + v325 + (unsigned int)v293 + (unsigned int)v327 + v6 + 1955562222) + (((unsigned int)v314 ^ (unsigned int)v321) & (unsigned int)v323 ^ (unsigned int)v314);\n            v330 = (((unsigned int)v322 | (unsigned int)v324) & (unsigned int)v315 | (unsigned int)v322 & (unsigned int)v324) + (((unsigned int)v324 >> 13 | (unsigned int)v324 * 0x80000) ^ ((unsigned int)v324 >> 2 | (unsigned int)v324 * 0x40000000) ^ ((unsigned int)v324 * 0x400 | (unsigned int)v324 >> 22)) + (((unsigned int)v323 * 128 | (unsigned int)v323 >> 25) ^ ((unsigned int)v323 >> 11 | (unsigned int)v323 * 0x200000) ^ ((unsigned int)v323 >> 6 | (unsigned int)v323 * 0x4000000)) + (unsigned int)(v312 + v325 + (unsigned int)v293 + (unsigned int)v327 + v6 + 1955562222) + (((unsigned int)v314 ^ (unsigned int)v321) & (unsigned int)v323 ^ (unsigned int)v314);\n            v331 = (unsigned int)v296 + ((v7 * 0x4000 | v7 >> 18) ^ (v7 >> 7 | v7 * 0x2000000) ^ (unsigned int)((unsigned long long)v7 >> 3)) + v1 + ((v0 * 0x2000 | v0 >> 19) ^ (v0 * 0x8000 | v0 >> 17) ^ (unsigned int)((unsigned long long)v0 >> 10));\n            v38 = v331;\n            tmp_785 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, (((Conv(64->32, r8<8>) ^ Conv(64->32, rdi<8>)) & Conv(64->32, rsi<8>)) ^ Conv(64->32, r8<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            tmp_800 = v314 + v331 + 2024104815;\n            tmp_801 = ((unsigned int)v321 ^ (unsigned int)v323) & (unsigned int)v329 ^ (unsigned int)v321;\n            tmp_910 = [D] amd64g_calculate_rflags_all(0x2b<64>, Conv(32->64, ((Conv(64->32, r10<8>) >> 0x2<8>) | (Conv(64->32, r10<8>) << 0x1e<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v332 = (unsigned int)v315 + (((unsigned int)v329 * 128 | (unsigned int)v329 >> 25) ^ ((unsigned int)v329 >> 11 | (unsigned int)v329 * 0x200000) ^ ((unsigned int)v329 >> 6 | (unsigned int)v329 * 0x4000000)) + (unsigned int)(v314 + v331 + 2024104815) + (((unsigned int)v321 ^ (unsigned int)v323) & (unsigned int)v329 ^ (unsigned int)v321);\n            tmp_932 = ((unsigned int)v330 >> 13 | (unsigned int)v330 * 0x80000) ^ ((unsigned int)v330 >> 2 | (unsigned int)v330 * 0x40000000);\n            tmp_1006 = (((unsigned int)v329 * 128 | (unsigned int)v329 >> 25) ^ ((unsigned int)v329 >> 11 | (unsigned int)v329 * 0x200000) ^ ((unsigned int)v329 >> 6 | (unsigned int)v329 * 0x4000000)) + (unsigned int)(v314 + v331 + 2024104815) + (((unsigned int)v321 ^ (unsigned int)v323) & (unsigned int)v329 ^ (unsigned int)v321);\n            v333 = (((unsigned int)v324 | (unsigned int)v330) & (unsigned int)v322 | (unsigned int)v324 & (unsigned int)v330) + (((unsigned int)v330 >> 13 | (unsigned int)v330 * 0x80000) ^ ((unsigned int)v330 >> 2 | (unsigned int)v330 * 0x40000000) ^ ((unsigned int)v330 * 0x400 | (unsigned int)v330 >> 22)) + (((unsigned int)v329 * 128 | (unsigned int)v329 >> 25) ^ ((unsigned int)v329 >> 11 | (unsigned int)v329 * 0x200000) ^ ((unsigned int)v329 >> 6 | (unsigned int)v329 * 0x4000000)) + (unsigned int)(v314 + v331 + 2024104815) + (((unsigned int)v321 ^ (unsigned int)v323) & (unsigned int)v329 ^ (unsigned int)v321);\n            v334 = [D] amd64g_calculate_rflags_all(0x27<64>, Conv(32->64, ((Conv(64->32, r15<8>) << 0xd<8>) | (Conv(64->32, r15<8>) >> 0x13<8>))), 0x0<64>, DirtyExpression (<class 'ailment.expression.VEXCCallExpression'>));\n            v335 = (unsigned int)v304 + ((v2 * 0x4000 | v2 >> 18) ^ (v2 >> 7 | v2 * 0x2000000) ^ (unsigned int)((unsigned long long)v2 >> 3)) + v7 + (((unsigned int)v328 * 0x2000 | (unsigned int)v328 >> 19) ^ ((unsigned int)v328 * 0x8000 | (unsigned int)v328 >> 17) ^ (unsigned int)v328 % 0x400);\n            v39 = v335;\n            v336 = (unsigned int)v322 + (((unsigned int)v332 >> 11 | (unsigned int)v332 * 0x200000) ^ ((unsigned int)v332 >> 6 | (unsigned int)v332 * 0x4000000) ^ ((unsigned int)v332 * 128 | (unsigned int)v332 >> 25)) + (unsigned int)(v321 + v335 - 2067236844) + (((unsigned int)v323 ^ (unsigned int)v329) & (unsigned int)v332 ^ (unsigned int)v323);\n            v337 = v4;\n            v338 = (((unsigned int)v332 >> 11 | (unsigned int)v332 * 0x200000) ^ ((unsigned int)v332 >> 6 | (unsigned int)v332 * 0x4000000) ^ ((unsigned int)v332 * 128 | (unsigned int)v332 >> 25)) + (unsigned int)(v321 + v335 - 2067236844) + (((unsigned int)v323 ^ (unsigned int)v329) & (unsigned int)v332 ^ (unsigned int)v323) + (((unsigned int)v330 | (unsigned int)v333) & (unsigned int)v324 | (unsigned int)v330 & (unsigned int)v333) + (((unsigned int)v333 >> 13 | (unsigned int)v333 * 0x80000) ^ ((unsigned int)v333 >> 2 | (unsigned int)v333 * 0x40000000) ^ ((unsigned int)v333 * 0x400 | (unsigned int)v333 >> 22));\n            v40 = (unsigned int)v307 + ((v4 * 0x4000 | v4 >> 18) ^ (v4 >> 7 | v4 * 0x2000000) ^ (unsigned int)((unsigned long long)v4 >> 3)) + v2 + ((unsigned int)v331 % 0x400 ^ ((unsigned int)v331 * 0x2000 | (unsigned int)v331 >> 19) ^ ((unsigned int)v331 * 0x8000 | (unsigned int)v331 >> 17));\n            v341 = (unsigned int)v324 + (((unsigned int)v336 >> 11 | (unsigned int)v336 * 0x200000) ^ ((unsigned int)v336 >> 6 | (unsigned int)v336 * 0x4000000) ^ ((unsigned int)v336 * 128 | (unsigned int)v336 >> 25)) + (unsigned int)(v323 + v40 - 1933114872) + (((unsigned int)v329 ^ (unsigned int)v332) & (unsigned int)v336 ^ (unsigned int)v329);\n            v343 = (((unsigned int)v336 >> 11 | (unsigned int)v336 * 0x200000) ^ ((unsigned int)v336 >> 6 | (unsigned int)v336 * 0x4000000) ^ ((unsigned int)v336 * 128 | (unsigned int)v336 >> 25)) + (unsigned int)(v323 + v40 - 1933114872) + (((unsigned int)v329 ^ (unsigned int)v332) & (unsigned int)v336 ^ (unsigned int)v329) + (((unsigned int)v333 | (unsigned int)v338) & (unsigned int)v330 | (unsigned int)v333 & (unsigned int)v338) + (unsigned long long)(((unsigned int)v338 >> 13 | (unsigned int)v338 * 0x80000) ^ ((unsigned int)v338 >> 2 | (unsigned int)v338 * 0x40000000) ^ ((unsigned int)v338 * 0x400 | (unsigned int)v338 >> 22));\n            tmp_461 = (unsigned int)(((v8 * 0x4000 | v8 >> 18) ^ (v8 >> 7 | v8 * 0x2000000) ^ (unsigned int)((unsigned long long)v8 >> 3)) + v337) + v3;\n            v344 = v9;\n            v345 = (unsigned int)tmp_461 + ((unsigned int)v335 % 0x400 ^ ((unsigned int)v335 * 0x2000 | (unsigned int)v335 >> 19) ^ ((unsigned int)v335 * 0x8000 | (unsigned int)v335 >> 17));\n            v41 = (unsigned int)tmp_461 + ((unsigned int)v335 % 0x400 ^ ((unsigned int)v335 * 0x2000 | (unsigned int)v335 >> 19) ^ ((unsigned int)v335 * 0x8000 | (unsigned int)v335 >> 17));\n            v346 = (unsigned int)v330 + (((unsigned int)v341 >> 11 | (unsigned int)v341 * 0x200000) ^ ((unsigned int)v341 >> 6 | (unsigned int)v341 * 0x4000000) ^ ((unsigned int)v341 * 128 | (unsigned int)v341 >> 25)) + (unsigned int)(v329 + v345 - 1866530822) + (((unsigned int)v332 ^ (unsigned int)v336) & (unsigned int)v341 ^ (unsigned int)v332);\n            v347 = (((unsigned int)v341 >> 11 | (unsigned int)v341 * 0x200000) ^ ((unsigned int)v341 >> 6 | (unsigned int)v341 * 0x4000000) ^ ((unsigned int)v341 * 128 | (unsigned int)v341 >> 25)) + (unsigned int)(v329 + v345 - 1866530822) + (((unsigned int)v332 ^ (unsigned int)v336) & (unsigned int)v341 ^ (unsigned int)v332) + (((unsigned int)v338 | (unsigned int)v343) & (unsigned int)v333 | (unsigned int)v338 & (unsigned int)v343) + (((unsigned int)v343 >> 13 | (unsigned int)v343 * 0x80000) ^ ((unsigned int)v343 >> 2 | (unsigned int)v343 * 0x40000000) ^ ((unsigned int)v343 * 0x400 | (unsigned int)v343 >> 22));\n            v348 = ((v9 * 0x4000 | v9 >> 18) ^ (v9 >> 7 | v9 * 0x2000000) ^ (unsigned int)v344 % 8) + v8 + v5 + ((unsigned int)((unsigned long long)v40 >> 10) ^ (v40 * 0x2000 | v40 >> 19) ^ (v40 * 0x8000 | v40 >> 17));\n            v42 = ((v9 * 0x4000 | v9 >> 18) ^ (v9 >> 7 | v9 * 0x2000000) ^ (unsigned int)v344 % 8) + v8 + v5 + ((unsigned int)((unsigned long long)v40 >> 10) ^ (v40 * 0x2000 | v40 >> 19) ^ (v40 * 0x8000 | v40 >> 17));\n            v350 = (((unsigned int)v346 >> 11 | (unsigned int)v346 * 0x200000) ^ ((unsigned int)v346 >> 6 | (unsigned int)v346 * 0x4000000) ^ ((unsigned int)v346 * 128 | (unsigned int)v346 >> 25)) + (unsigned int)(v332 + ((v9 * 0x4000 | v9 >> 18) ^ (v9 >> 7 | v9 * 0x2000000) ^ (unsigned int)v344 % 8) + v8 + v5 + ((unsigned int)((unsigned long long)v40 >> 10) ^ (v40 * 0x2000 | v40 >> 19) ^ (v40 * 0x8000 | v40 >> 17)) - 1538233109) + (((unsigned int)v336 ^ (unsigned int)v341) & (unsigned int)v346 ^ (unsigned int)v336);\n            v351 = v333 + v350;\n            v352 = (unsigned int)v350 + (((unsigned int)v343 | v347) & (unsigned int)v338 | (unsigned int)v343 & v347) + ((v347 % 0x2000 | v347 * 0x80000) ^ (v347 % 4 | v347 * 0x40000000) ^ ((unsigned int)rbx<8> * 0x400 | (unsigned int)rbx<8> >> 22));\n            tmp_522 = ((v11 * 0x4000 | v11 >> 18) ^ (v11 >> 7 | v11 * 0x2000000) ^ (unsigned int)((unsigned long long)v11 >> 3)) + (unsigned int)v344 + v0;\n            v353 = v10;\n            v43 = ((unsigned int)v345 % 0x400 ^ ((unsigned int)v345 * 0x2000 | (unsigned int)v345 >> 19) ^ ((unsigned int)v345 * 0x8000 | (unsigned int)v345 >> 17)) + (unsigned int)tmp_522;\n            v354 = (unsigned int)v338 + ((v351 % 0x800 | v351 * 0x200000) ^ ((unsigned int)r9<8> >> 6 | (unsigned int)r9<8> * 0x4000000) ^ ((unsigned int)r9<8> * 128 | (unsigned int)r9<8> >> 25)) + (unsigned int)(v336 + ((unsigned int)v345 % 0x400 ^ ((unsigned int)v345 * 0x2000 | (unsigned int)v345 >> 19) ^ ((unsigned int)v345 * 0x8000 | (unsigned int)v345 >> 17)) + (unsigned int)tmp_522 - 1090935817) + (((unsigned int)v341 ^ (unsigned int)v346) & r9<8> ^ (unsigned int)v341);\n            v355 = ((v351 % 0x800 | v351 * 0x200000) ^ ((unsigned int)r9<8> >> 6 | (unsigned int)r9<8> * 0x4000000) ^ ((unsigned int)r9<8> * 128 | (unsigned int)r9<8> >> 25)) + (unsigned int)(v336 + ((unsigned int)v345 % 0x400 ^ ((unsigned int)v345 * 0x2000 | (unsigned int)v345 >> 19) ^ ((unsigned int)v345 * 0x8000 | (unsigned int)v345 >> 17)) + (unsigned int)tmp_522 - 1090935817) + (((unsigned int)v341 ^ (unsigned int)v346) & r9<8> ^ (unsigned int)v341) + ((v347 | v352) & (unsigned int)v343 | rbx<8> & (unsigned int)r11<8>) + (((unsigned int)r11<8> >> 13 | (unsigned int)r11<8> * 0x80000) ^ ((unsigned int)r11<8> >> 2 | (unsigned int)r11<8> * 0x40000000) ^ ((unsigned int)r11<8> * 0x400 | (unsigned int)r11<8> >> 22));\n            v16 += ((v351 % 0x800 | v351 * 0x200000) ^ ((unsigned int)r9<8> >> 6 | (unsigned int)r9<8> * 0x4000000) ^ ((unsigned int)r9<8> * 128 | (unsigned int)r9<8> >> 25)) + (unsigned int)(v336 + ((unsigned int)v345 % 0x400 ^ ((unsigned int)v345 * 0x2000 | (unsigned int)v345 >> 19) ^ ((unsigned int)v345 * 0x8000 | (unsigned int)v345 >> 17)) + (unsigned int)tmp_522 - 1090935817) + (((unsigned int)v341 ^ (unsigned int)v346) & r9<8> ^ (unsigned int)v341) + ((v347 | v352) & (unsigned int)v343 | rbx<8> & (unsigned int)r11<8>) + (((unsigned int)r11<8> >> 13 | (unsigned int)r11<8> * 0x80000) ^ ((unsigned int)r11<8> >> 2 | (unsigned int)r11<8> * 0x40000000) ^ ((unsigned int)r11<8> * 0x400 | (unsigned int)r11<8> >> 22));\n            v44 = ((unsigned int)v348 % 0x400 ^ ((unsigned int)v348 * 0x2000 | (unsigned int)v348 >> 19) ^ ((unsigned int)v348 * 0x8000 | (unsigned int)v348 >> 17)) + ((v10 * 0x4000 | v10 >> 18) ^ (v10 >> 7 | v10 * 0x2000000) ^ (unsigned int)v353 % 8) + v11 + (unsigned int)v328;\n            v18 += v347;\n            v357 = (((unsigned int)v346 ^ v351) & v354 ^ (unsigned int)v346) + (unsigned int)(v341 + ((unsigned int)v348 % 0x400 ^ ((unsigned int)v348 * 0x2000 | (unsigned int)v348 >> 19) ^ ((unsigned int)v348 * 0x8000 | (unsigned int)v348 >> 17)) + ((v10 * 0x4000 | v10 >> 18) ^ (v10 >> 7 | v10 * 0x2000000) ^ (unsigned int)v353 % 8) + v11 + (unsigned int)v328 - 965641998);\n            v358 = v354 % 64 | v354 * 0x4000000;\n            v17 += v352;\n            v359 = v354 % 0x800 | v354 * 0x200000;\n            v20 += v354;\n            v21 += v351;\n            v19 += (unsigned int)v343 + (v359 ^ v358 ^ (v354 * 128 | v354 % 0x2000000)) + v357;\n            v360 = ...;\n            v28[0] = v26;\n            v28[1] = v16;\n            v60 = v16;\n            v28[1] = v17;\n            v28[1 + 1] = v18;\n            v28[2 + 1] = v20;\n            v28[2] = v19;\n            v26 = v360;\n            v28[3] = v21;\n            v22 += (unsigned int)v346;\n            v28[3 + 1] = v22;\n        }\n        while (v14 < v27);\n    }\n    return v60;\n}\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x407630",
            "funcEndAddr": "0x4077d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60e278;\nextern uint128_t g_60e280;\nextern unsigned int g_60e290;\nextern int512_t g_60e320;\n\nint sub_407630()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60e278;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60e290 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60e278 != 6349440)\n            {\n                v16 = sub_4084b0();\n                g_60e278 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4084b0();\n                v17 = v15;\n                g_60e278 = v15;\n                *(v15) = g_60e280;\n            }\n            memset(&v17[(long long)(int)g_60e290], 0x0, (int)((unsigned int)v13 + 1 - g_60e290) * 16);\n            g_60e290 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4086a0(); /* do not return */\n        }\n    }\n    if (g_60e290 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_406400();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6349600)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_408450();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_406400();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_407e10",
            "funcStartAddr": "0x407e10",
            "funcEndAddr": "0x407e23",
            "decompiledFuncCode": "int sub_407e10()\n{\n}\n"
        },
        {
            "funcName": "sub_407bc0",
            "funcStartAddr": "0x407bc0",
            "funcEndAddr": "0x407c29",
            "decompiledFuncCode": "int sub_407bc0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_407b10",
            "funcStartAddr": "0x407b10",
            "funcEndAddr": "0x407b26",
            "decompiledFuncCode": "int sub_407b10()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401940",
            "funcEndAddr": "0x40282f",
            "decompiledFuncCode": "typedef struct struct_3 {\n    char padding_0[4237760];\n    char field_40a9c0;\n} struct_3;\n\nextern unsigned int g_409f16;\nextern unsigned int g_409f52;\nextern unsigned int g_409f61;\nextern unsigned int g_409f9b;\nextern unsigned int g_409faa;\nextern unsigned int g_40a5c8;\nextern unsigned int g_40a838;\nextern unsigned int g_40a868;\nextern unsigned int g_40a8a0;\nextern unsigned int g_40a8d0;\nextern unsigned int g_40a900;\nextern unsigned int g_40a930;\nextern unsigned int g_40a960;\nextern unsigned int g_40a990;\nextern unsigned int g_40be27;\nextern unsigned int g_60e210;\nextern unsigned int g_60e29c;\nextern char g_60e2d8;\nextern char g_60e2d9;\nextern char g_60e2da;\nextern char g_60e2db;\nextern char g_60e2dc;\nextern unsigned long long g_60e2e0;\nextern unsigned long long g_60e2e8;\nextern char g_60e2f0;\nextern unsigned long long stdin;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long v0;  // [bp-0x118]\n    unsigned long long v1;  // [bp-0x110]\n    unsigned long long *v2;  // [bp-0x108]\n    unsigned long|char * v3;  // [bp-0x100]\n    unsigned long long v4;  // [bp-0xf5]\n    unsigned int v5;  // [bp-0xf4]\n    unsigned long|unsigned long long v6;  // [bp-0xf0]\n    unsigned long|char *|unsigned long long|char v7;  // [bp-0xe8]\n    unsigned long|unsigned long long v8;  // [bp-0xe0]\n    char *|unsigned long long v9;  // [bp-0xd8]\n    unsigned long long *v10;  // [bp-0xd0]\n    unsigned long|unsigned long long v11;  // [bp-0xc8]\n    char v12;  // [bp-0xc0]\n    char v13;  // [bp-0xbf]\n    unsigned long long v14;  // [bp-0xbe]\n    char v15;  // [bp-0xbd]\n    unsigned int v16;  // [bp-0xbc]\n    char v17;  // [bp-0xa9]\n    unsigned long long v18;  // [bp-0xa8]\n    unsigned long long v19;  // [bp-0xa0]\n    char v20;  // [bp-0x98]\n    char v21;  // [bp-0x68]\n    unsigned long long v23;  // r14\n    unsigned long long v24;  // r13\n    unsigned long long v25;  // rdi\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rsi\n    unsigned long long v28;  // rbx\n    unsigned long long v32;  // rax\n    unsigned long|unsigned int v33;  // r12\n    unsigned long v35;  // rsi\n    char *v38;  // rdi\n    unsigned long long v40;  // rax\n    void *v41;  // rbp\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rcx\n    char *v45;  // r8\n    unsigned long long v46;  // rdx\n    unsigned long long v47;  // r10\n    char *v48;  // rdi\n    char *v49;  // rsi\n    unsigned long long v50;  // cc_dep1\n    unsigned long long v51;  // cc_dep2\n    unsigned long v52;  // d\n    unsigned long long v53;  // cc_dep1\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rax\n    char v57;  // al\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // r8\n    unsigned long long v61;  // rax\n    char *|unsigned long long v62;  // r15\n    unsigned long long v63;  // r11\n    unsigned long long v64;  // rdx\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rsi\n    unsigned long long v67;  // rdx\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // al\n    char *|unsigned long long v72;  // r13\n    char *v73;  // rax\n    unsigned long long v74;  // rcx\n    char *v75;  // rdi\n    char *v76;  // rsi\n    unsigned long long v77;  // cc_dep1\n    unsigned long long v78;  // cc_dep2\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // r12\n    unsigned long|unsigned int|char v81;  // r14\n    unsigned long long v82;  // r15\n    char *v84;  // rax\n    unsigned int *v85;  // rdi\n    struct_3 *v87;  // rsi\n    char v88;  // sil\n    unsigned long v89;  // rsi\n    char *v91;  // rax\n    unsigned long long v94;  // r14\n    unsigned long long v95;  // rbx\n    char *v96;  // rax\n    char *v97;  // rax\n    unsigned long|unsigned int v98;  // ebx\n    unsigned long long v99;  // rax\n    unsigned long long v100;  // rbx\n    unsigned long long v103;  // rax\n    unsigned long long v106;  // rbx\n    unsigned long long v107;  // rbp\n    unsigned long long v108;  // rbp\n    char *v110;  // rax\n    char *v111;  // rax\n    char *v113;  // rax\n    unsigned long long v114;  // rbp\n    unsigned long long v115;  // rbx\n\n    v23 = 0;\n    v24 = 0;\n    v33 = -18446744069414584321;\n    v26 = v25;\n    v28 = v27;\n    sub_406260();\n    setlocale(0x6, 0x40be27);\n    bindtextdomain(0x409f16, 0x40a5c8);\n    textdomain(0x409f16);\n    sub_409e30();\n    setvbuf(stdout, NULL, 0x1, 0x0);\n    while (true)\n    {\n        v32 = sub_409690();\n        if ((unsigned int)v32 == -1)\n        {\n            g_60e2e8 = 66;\n            g_60e2e0 = 64;\n            if ((unsigned int)v33 == 0 && v23 != 0)\n            {\n                v35 = \"--tag does not support --text mode\";\n            }\n            if (v23 == 0 || (unsigned int)v33 != 0)\n            {\n                if (v24 != 0)\n                {\n                    v35 = \"the --tag option is meaningless when verifying checksums\";\n                }\n                if (v24 == 0 || v23 == 0)\n                {\n                    v35 = \"the --binary and --text options are meaningless when verifying checksums\";\n                    if (((char)((unsigned long long)!((unsigned int)r12<8>) >> 31) & v24) == 0)\n                    {\n                        if (g_60e2da != 0)\n                        {\n                            v35 = \"the --ignore-missing option is meaningful only when verifying checksums\";\n                        }\n                        else if (g_60e2dc != 0)\n                        {\n                            v35 = \"the --status option is meaningful only when verifying checksums\";\n                        }\n                        else if (g_60e2db != 0)\n                        {\n                            v35 = \"the --warn option is meaningful only when verifying checksums\";\n                        }\n                        else if (g_60e2d9 == 1)\n                        {\n                            v35 = \"the --quiet option is meaningful only when verifying checksums\";\n                        }\n                    }\n                }\n            }\n        }\n        else if ((unsigned int)v32 != 119)\n        {\n            if (v32 > 119)\n            {\n                if ((unsigned int)v32 == 130)\n                {\n                    g_60e2dc = 0;\n                    g_60e2db = 0;\n                    g_60e2d9 = 1;\n                }\n                else if (v32 <= 130)\n                {\n                    if ((unsigned int)v32 == 128)\n                    {\n                        g_60e2da = 1;\n                    }\n                    if ((unsigned int)v32 == 129)\n                    {\n                        g_60e2dc = 1;\n                        g_60e2db = 0;\n                        g_60e2d9 = 0;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v32 == 131)\n                    {\n                        g_60e2d8 = 1;\n                    }\n                    if ((unsigned int)v32 == 132)\n                    {\n                        v23 = 1;\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v32 != 98)\n                {\n                    if (v32 > 98)\n                    {\n                        if ((unsigned int)v32 == 99)\n                        {\n                            v24 = 1;\n                        }\n                        if ((unsigned int)v32 == 116)\n                        {\n                            v33 = 0;\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v32 == -131)\n                        {\n                            v1 = 0;\n                            v0 = \"David Madore\";\n                            sub_408310();\n                            exit(0x0); /* do not return */\n                        }\n                        if ((unsigned int)v32 == -130)\n                        {\n                            sub_402c90(); /* do not return */\n                        }\n                    }\n                }\n            }\n            if (((unsigned int)v32 == 132 || v32 <= 119) && ((unsigned int)v32 == 98 || v32 > 119) && (v32 <= 119 || (unsigned int)v32 != 131) && (v32 <= 119 || v32 > 130) && (v32 <= 119 || (unsigned int)v32 != 130))\n            {\n                v33 = 1;\n            }\n        }\n        if ((unsigned int)v32 == 119)\n        {\n            g_60e2dc = 0;\n            g_60e2db = 1;\n            g_60e2d9 = 0;\n        }\n        if (...)\n        {\n            v35 = \"the --strict option is meaningful only when verifying checksums\";\n        }\n        if (...)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v35, 0x5));\n        }\n        if (...)\n        {\n            if ((unsigned int)v33 == -1)\n            {\n                v33 = 0;\n            }\n            v10 = v28 + v26 * 8;\n            if (g_60e29c == (unsigned int)v26)\n            {\n                *(v10) = \"-\";\n                v10 = &v10[1];\n            }\n            v2 = v28 + (int)g_60e29c * 8;\n            if (v10 > v2)\n            {\n                v12 = 1;\n                v4 = v24;\n                v14 = v23;\n                v16 = (0 - (unsigned int)(char)(v33 < 1) & -10) + 42;\n                v15 = (0 - (unsigned int)(char)(v33 < 1) & -10) + 42;\n                do\n                {\n                    v38 = *(v2);\n                    v3 = *(v2);\n                    if ((char)v4 != 0)\n                    {\n                        v5 = strcmp(v38, \"-\");\n                        if (v5 == 0)\n                        {\n                            g_60e2f0 = 1;\n                            v41 = stdin;\n                            v3 = dcgettext(0x0, 0x409f52, 0x5);\n                        }\n                        else\n                        {\n                            v41 = (unsigned long long)(unsigned int)sub_4061c0();\n                        }\n                        if (v5 == 0 || v41 != 0)\n                        {\n                            v13 = 0;\n                            v94 = 0;\n                            v80 = 0;\n                            v95 = 1;\n                            v18 = 0;\n                            v19 = 0;\n                            v11 = 0;\n                            v6 = 0;\n                            while (true)\n                            {\n                                v43 = __getdelim(&v18, &v19, 0xa, v41);\n                                if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                {\n                                    v44 = (char)*((char *)v18);\n                                    if (*((char *)v18) != 35)\n                                    {\n                                        v45 = v43;\n                                        if (*((char *)(0 + v43 - 1)) == 10)\n                                        {\n                                            v45 = &v45[-1];\n                                            *(v45) = 0;\n                                            v44 = (char)*((char *)v18);\n                                        }\n                                        v46 = 0;\n                                        do\n                                        {\n                                            v46 += 1;\n                                            v44 = (char)*((char *)(0 + v46));\n                                        }\n                                        while (v44 == 9);\n                                        v47 = 0;\n                                        if (v44 == 92)\n                                        {\n                                            v47 = (char)v4;\n                                            v46 += 1;\n                                        }\n                                        v72 = 0 + v46;\n                                        v48 = \"SHA256\";\n                                        v74 = 6;\n                                        v49 = 0 + v46;\n                                        while (v74 != 0)\n                                        {\n                                            v74 -= 1;\n                                            v50 = *(v49);\n                                            v51 = *(v48);\n                                            v48 = &v48[v52];\n                                            v49 = &v49[v52];\n                                            break;\n                                        }\n                                        v53 = (v50 > v51) - 0 - (v50 < v51);\n                                        if ((char)v53 == 0)\n                                        {\n                                            v54 = (char)*((char *)(0 + v46 + 6));\n                                            v55 = v46 + 6;\n                                            if (*((char *)(0 + v46 + 6)) == 32)\n                                            {\n                                                v54 = (char)*((char *)(0 + v46 + 7));\n                                                v55 = v46 + 7;\n                                            }\n                                            if (v54 == 40)\n                                            {\n                                                v74 = v55 + 1;\n                                                v60 = &v45[-1 * v74];\n                                                if (v60 != v74)\n                                                {\n                                                    v62 = 0 + v74;\n                                                    v63 = v60 - 1;\n                                                    if (v60 != 1)\n                                                    {\n                                                        if (*((char *)(v62 + v60 - 1)) != 41)\n                                                        {\n                                                            do\n                                                            {\n                                                                v63 -= 1;\n                                                            }\n                                                            while (*((char *)(v62 + v63)) != 41 && v63 != 1);\n                                                            if (v63 != 1)\n                                                            {\n                                                                v67 = v62 + v63;\n                                                            }\n                                                        }\n                                                        if (*((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41)\n                                                        {\n                                                            v67 = v62 + v63;\n                                                        }\n                                                    }\n                                                    if (v60 == 1 && *((char *)v62) == 41)\n                                                    {\n                                                        v67 = v62;\n                                                        v63 = 0;\n                                                    }\n                                                    if (v47 != 0 && (*((char *)v62) == 41 || v60 != 1) && (v60 == 1 || *((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41))\n                                                    {\n                                                        v7 = v67;\n                                                        v68 = sub_4029b0();\n                                                        v67 = v7;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v56 = 0;\n                                            v57 = *(v72) == 92;\n                                            v58 = rax<8> + g_60e2e8;\n                                            if (&v45[-1 * v46] >= v58)\n                                            {\n                                                v59 = v46 + g_60e2e0;\n                                                if (*(v9) == 32 || *(v9) == 9)\n                                                {\n                                                    *(v9) = 0;\n                                                    v9 = v59;\n                                                    v8 = v47;\n                                                    v7 = v45;\n                                                    v61 = sub_402950();\n                                                    if (v61 != 0)\n                                                    {\n                                                        v64 = v9;\n                                                        v65 = v9 + 1;\n                                                        if (&v7[-1 * v9 + -1] != 1)\n                                                        {\n                                                            v66 = (char)*((char *)(0 + v64 + 1));\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 != 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] == 1) && g_60e210 != 0)\n                                {\n                                    g_60e210 = 1;\n                                }\n                                if ((!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 == 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) == 32) && g_60e210 != 1)\n                                {\n                                    g_60e210 = 0;\n                                    v65 = v64 + 2;\n                                }\n                                if ((!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 != 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] == 1) && g_60e210 != 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) != 32 && v66 == 42 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && v61 != 0 && &v45[-1 * v46] >= v58 && *((char *)v18) != 35 && (char)v53 != 0 && (*(v9) == 32 || *(v9) == 9) && &v7[-1 * v9 + -1] != 1 && *((char *)(0 + v64 + 1)) == 32)\n                                {\n                                    v62 = 0 + v65;\n                                    if ((char)v8 != 0)\n                                    {\n                                        v71 = (char)(sub_4029b0() != 0);\n                                    }\n                                }\n                                if (v54 == 40 && (char)v53 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && *((char *)v18) != 35 && v60 != v74 && (*((char *)v62) == 41 || v60 != 1) && (v60 == 1 || *((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41) && v47 != 0 && v68 != 0 || v54 == 40 && (char)v53 == 0 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) && *((char *)v18) != 35 && v60 != v74 && (*((char *)v62) == 41 || v60 != 1) && (v60 == 1 || *((char *)(v62 + v60 - 1)) == 41 || *((char *)v62) != 41) && v47 == 0)\n                                {\n                                    *((char *)v67) = 0;\n                                    v69 = (char)*((char *)(v62 + v63 + 1));\n                                    v70 = v63 + 1;\n                                    if (*((char *)(v62 + v63 + 1)) == 9 || v69 == 32)\n                                    {\n                                        do\n                                        {\n                                            v70 += 1;\n                                            v69 = (char)*((char *)(v62 + v70));\n                                        }\n                                        while (v69 == 9);\n                                    }\n                                    if (v69 == 61)\n                                    {\n                                        v72 = v62 + v70 + 1;\n                                        v64 = (char)*((char *)(v62 + v70 + 1));\n                                        if (*((char *)(v62 + v70 + 1)) == 32 || v64 == 9)\n                                        {\n                                            v73 = v62 + v70 + 2;\n                                            do\n                                            {\n                                                v64 = *(v73);\n                                                v72 = v73;\n                                                v73 = &v73[1];\n                                            }\n                                            while (v64 == 9);\n                                        }\n                                        v71 = sub_402950();\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v75 = \"-\";\n                                    v74 = 2;\n                                    v76 = v62;\n                                    while (v74 != 0)\n                                    {\n                                        v74 -= 1;\n                                        v77 = *(v76);\n                                        v78 = *(v75);\n                                        v75 = &v75[v52];\n                                        v76 = &v76[v52];\n                                        break;\n                                    }\n                                    v79 = (v77 > v78) - 0 - (v77 < v78);\n                                }\n                                if (...)\n                                {\n                                    v80 = 1;\n                                    if (g_60e2db != 0)\n                                    {\n                                        v82 = (unsigned int)sub_407d00();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a838, 0x5));\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v81 = 0;\n                                    if (g_60e2dc == 0)\n                                    {\n                                        v81 = 0;\n                                        v81 = strchr(v62, 0xa) != 0;\n                                    }\n                                    if ((char)v7 == 0)\n                                    {\n                                        v6 += 1;\n                                        if (g_60e2dc == 0)\n                                        {\n                                            if (v81 != 0)\n                                            {\n                                                v84 = stdout[5];\n                                                if (stdout[5] < stdout[6])\n                                                {\n                                                    stdout[5] = stdout[5] + 1;\n                                                    *(v84) = 92;\n                                                }\n                                                else\n                                                {\n                                                    __overflow();\n                                                }\n                                            }\n                                            sub_402a40();\n                                            v89 = \"FAILED open or read\";\n                                        }\n                                    }\n                                    else if (v17 == 0 || g_60e2da == 0)\n                                    {\n                                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                                        {\n                                            v8 = g_60e2e0 >> 1;\n                                            *((unsigned long long *)&v7) = (unsigned int)sub_402af0();\n                                            v85 = *((long long *)(unsigned long long)__ctype_tolower_loc());\n                                            while (true)\n                                            {\n                                                v87 = (unsigned long long)v21;\n                                                v88 = (unsigned long long)v21 >> 4;\n                                                if (v85[(unsigned long long)v72[1 + 2 * v64]] == (char)*((char *)(4237760 + (unsigned long long)(v21 & 15))) && v85[(unsigned long long)v72[2 * v64]] == (char)*((char *)(4237760 + (unsigned long long)((unsigned int)rsi<8> & 15))))\n                                                {\n                                                    v64 += 1;\n                                                    v64 = v8;\n                                                }\n                                                if (v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)(v21 & 15))) || v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)((unsigned int)rsi<8> & 15))))\n                                                {\n                                                    v11 += 1;\n                                                    break;\n                                                    if (g_60e2dc != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            if (v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)(v21 & 15))) || v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)((unsigned int)rsi<8> & 15))))\n                                            {\n                                                v94 = (char)v4;\n                                            }\n                                            else if (g_60e2dc == 0 && (v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)(v21 & 15))) || v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)((unsigned int)rsi<8> & 15)))))\n                                            {\n                                                v91 = stdout[5];\n                                            }\n                                            else if (v85[(unsigned long long)v72[1 + 2 * v64]] == (char)*((char *)(4237760 + (unsigned long long)(v21 & 15))) && v85[(unsigned long long)v72[2 * v64]] == (char)*((char *)(4237760 + (unsigned long long)((unsigned int)rsi<8> & 15))) && v8 == v64)\n                                            {\n                                                v13 = g_60e2dc;\n                                            }\n                                            else if (g_60e2dc == 0 && (v85[(unsigned long long)v72[1 + 2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)(v21 & 15))) || v85[(unsigned long long)v72[2 * v64]] != (char)*((char *)(4237760 + (unsigned long long)((unsigned int)rsi<8> & 15)))))\n                                            {\n                                                v8 = v64;\n                                                v7 = v74;\n                                                sub_402a40();\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v64 = 0;\n                                        }\n                                        if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0)\n                                        {\n                                            v13 = g_60e2dc;\n                                            if (g_60e2dc == 0)\n                                            {\n                                                v13 = g_60e2d9;\n                                                if (g_60e2d9 == 0)\n                                                {\n                                                    if (v81 != 0)\n                                                    {\n                                                        v13 = v7;\n                                                    }\n                                                    else\n                                                    {\n                                                        v7 = v7;\n                                                        sub_402a40();\n                                                        v13 = v7;\n                                                    }\n                                                }\n                                            }\n                                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || g_60e2dc == 0 && g_60e2d9 == 0 && v81 != 0)\n                                            {\n                                                v91 = stdout[5];\n                                                if (stdout[5] < stdout[6])\n                                                {\n                                                    stdout[5] = stdout[5] + 1;\n                                                    *(v91) = 92;\n                                                }\n                                                else\n                                                {\n                                                    v8 = v64;\n                                                    v7 = g_60e2e0 >> 1;\n                                                    __overflow();\n                                                    v74 = v7;\n                                                    v64 = v8;\n                                                }\n                                                v8 = v64;\n                                                v7 = v74;\n                                                sub_402a40();\n                                                if (v7 != v8)\n                                                {\n                                                    v89 = \"FAILED\";\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if ((g_60e2dc == 0 && g_60e2d9 == 0 && v81 == 0 && (char)v7 != 0 && (v17 == 0 || g_60e2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) || (char)v7 != 0 && (v17 == 0 || g_60e2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) && (g_60e2dc == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60e2d9 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v81 != 0) && v7 == v8) && g_60e2d9 == 0)\n                                    {\n                                        v89 = \"OK\";\n                                    }\n                                    if (g_60e2dc == 0 && (char)v7 == 0 || (g_60e2dc == 0 && g_60e2d9 == 0 && v81 == 0 && (char)v7 != 0 && (v17 == 0 || g_60e2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) || (char)v7 != 0 && (v17 == 0 || g_60e2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) && (g_60e2dc == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60e2d9 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v81 != 0) && v7 == v8) && g_60e2d9 == 0 || (char)v7 != 0 && (v17 == 0 || g_60e2da == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>) || (*((char *)v41) & 48) != 0) && (g_60e2dc == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (g_60e2d9 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)) || v81 != 0) && v7 != v8)\n                                    {\n                                        __printf_chk(0x1, \": %s\\n\", dcgettext(0x0, v89, 0x5));\n                                    }\n                                    v94 = (char)v4;\n                                }\n                                if (...)\n                                {\n                                    free(v18);\n                                    v98 = *((int *)v41) & 32;\n                                    if (((char)*((int *)v41) & 32) == 0)\n                                    {\n                                        if (v5 != 0)\n                                        {\n                                            v99 = sub_4086e0();\n                                        }\n                                        if (v99 == 0 || v5 == 0)\n                                        {\n                                            if (v94 != 0)\n                                            {\n                                                if (g_60e2dc == 0)\n                                                {\n                                                    if (v80 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x40a8d0, 0x40a8a0, v80, 0x5));\n                                                    }\n                                                    if (v6 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x40a930, 0x40a900, v6, 0x5));\n                                                    }\n                                                    if (v11 != 0)\n                                                    {\n                                                        error(0x0, 0x0, (unsigned long long)dcngettext(0x0, 0x40a990, 0x40a960, v11, 0x5));\n                                                    }\n                                                    if (v13 == 0 && g_60e2da != 0)\n                                                    {\n                                                        v114 = (unsigned int)sub_407d00();\n                                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409faa, 0x5));\n                                                    }\n                                                }\n                                                if (v11 == 0 && v6 == 0 && v13 != 0)\n                                                {\n                                                    v98 = (unsigned int)g_60e2d8 ^ 1 | v98;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v107 = (unsigned int)sub_407d00();\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a868, 0x5));\n                                            }\n                                            v103 = v98 & 1;\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v100 = (unsigned int)sub_407d00();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x409f9b, 0x5));\n                                        v103 = 0;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v95 += 1;\n                                    v115 = (unsigned int)sub_407d00();\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x409f61, 0x5));\n                                }\n                            }\n                            if (...)\n                            {\n                                *((unsigned long long *)&v12) = v12 & v103;\n                            }\n                            else if (...)\n                            {\n                                v106 = (unsigned int)sub_407d00();\n                                error(0x0, *(__errno_location()), \"%s\");\n                                v103 = 0;\n                            }\n                        }\n                        v106 = (unsigned int)sub_407d00();\n                        error(0x0, *(__errno_location()), \"%s\");\n                        v103 = 0;\n                        *((unsigned long long *)&v12) = v12 & v103;\n                    }\n                    else if (sub_402af0() == 0)\n                    {\n                        v12 = 0;\n                    }\n                    else\n                    {\n                        v40 = strchr(v3, 0x5c);\n                        if (strchr(v3, 0xa) != 0 || v40 != 0)\n                        {\n                            if ((char)v14 == 0)\n                            {\n                                v96 = stdout[5];\n                                if (stdout[5] < stdout[6])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v96) = 92;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                            else\n                            {\n                                v97 = stdout[5];\n                                if (stdout[6] > stdout[5])\n                                {\n                                    stdout[5] = stdout[5] + 1;\n                                    *(v97) = 92;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                        }\n                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x24<64>, Shr(Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), 0x1<8>), Load(addr=0x60e2e0<64>, size=8, endness=Iend_LE), cc_ndep<8>)))\n                        {\n                            v108 = 0;\n                            while (true)\n                            {\n                                v108 += 1;\n                                __printf_chk(0x1, \"%02x\", (unsigned int)v20);\n                                if (g_60e2e0 >> 1 <= v108)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((char)v14 == 0)\n                        {\n                            v110 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v110) = 32;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            v111 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v111) = v15;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            sub_402a40();\n                        }\n                        else\n                        {\n                            fwrite_unlocked(\"SHA256\", 0x1, 0x6, stdout);\n                            fwrite_unlocked(\" (\", 0x1, 0x2, stdout);\n                            sub_402a40();\n                            fwrite_unlocked(\") = \", 0x1, 0x4, stdout);\n                        }\n                        v113 = stdout[5];\n                        if (stdout[5] < stdout[6])\n                        {\n                            stdout[5] = stdout[5] + 1;\n                            *(v113) = 10;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                    }\n                    v2 = &v2[1];\n                }\n                while (v10 > v2);\n            }\n            else\n            {\n                v12 = 1;\n            }\n            if (g_60e2f0 != 0)\n            {\n                if ((char)(sub_4086e0() + 1 == 0))\n                {\n                    break;\n                }\n            }\n            return (unsigned int)v12 ^ 1;\n        }\n        if (...)\n        {\n            sub_402c90(); /* do not return */\n        }\n    }\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x409f52, 0x5));\n}\n"
        },
        {
            "funcName": "sub_408290",
            "funcStartAddr": "0x408290",
            "funcEndAddr": "0x4082b0",
            "decompiledFuncCode": "int sub_408290()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_405a60",
            "funcStartAddr": "0x405a60",
            "funcEndAddr": "0x405a82",
            "decompiledFuncCode": "int sub_405a60()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_405990();\n}\n"
        },
        {
            "funcName": "sub_408310",
            "funcStartAddr": "0x408310",
            "funcEndAddr": "0x4083c8",
            "decompiledFuncCode": "int sub_408310()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_407eb0();\n    }\n}\n"
        },
        {
            "funcName": "sub_407c4f",
            "funcStartAddr": "0x407c4f",
            "funcEndAddr": "0x407cc0",
            "decompiledFuncCode": "extern uint128_t g_60e420;\nextern uint128_t g_60e430;\nextern uint128_t g_60e440;\nextern unsigned long long g_60e450;\n\nint sub_407c4f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60e450;\n    *((uint128_t *)&v0) = g_60e420;\n    *((uint128_t *)&v1) = g_60e430;\n    *((uint128_t *)&v2) = g_60e440;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_4084f0",
            "funcStartAddr": "0x4084f0",
            "funcEndAddr": "0x408511",
            "decompiledFuncCode": "int sub_4084f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4086a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_407932",
            "funcStartAddr": "0x407932",
            "funcEndAddr": "0x40795b",
            "decompiledFuncCode": "int sub_407932()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_405e40",
            "funcStartAddr": "0x405e40",
            "funcEndAddr": "0x405ebc",
            "decompiledFuncCode": "int sub_405e40()\n{\n    unsigned long long v0;  // [bp-0xb8]\n    unsigned long long v1;  // [bp-0xb0]\n    unsigned long long v2;  // [bp-0xa8]\n    unsigned long long v3;  // [bp-0xa0]\n    unsigned long long v4;  // [bp-0x98]\n    unsigned long long v5;  // [bp-0x90]\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // rdi\n\n    v0 = 3926247204440088280;\n    v1 = -644479594506691305;\n    v2 = 7518782744944446257;\n    v3 = 13761399178871279527;\n    v4 = 0;\n    v5 = 0;\n    sub_405ac0();\n    sub_405990();\n    v10 = v9;\n    v11 = &v0;\n    return 4207072();\n}\n"
        },
        {
            "funcName": "sub_408620",
            "funcStartAddr": "0x408620",
            "funcEndAddr": "0x40864e",
            "decompiledFuncCode": "int sub_408620()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4086a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409040",
            "funcStartAddr": "0x409040",
            "funcEndAddr": "0x4095a7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40bdc8;\nextern unsigned int g_40be0c;\n\nint sub_409040()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned long long * v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char *v58;  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_408940();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = (unsigned int)v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_408940();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = (unsigned int)v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_408a20();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40bdc8, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40be0c, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40bdc8, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_408a20();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_409850",
            "funcStartAddr": "0x409850",
            "funcEndAddr": "0x409da4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40be27;\nextern char g_60e498[2];\n\nint sub_409850()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_60e498;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40be27 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60e498 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40be27;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v60 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v60 != 32 && (unsigned int)v60 != 35)\n                            {\n                                ungetc(v60, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v63 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v63;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40be27;\n                                        v10 = (tmp_10 == 0? &g_40be27 : tmp_10);\n                                        free(NULL);\n                                        sub_4086e0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v60 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v62 = *(v61);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)(v62 != -1);\n                                    }\n                                }\n                                while (v63 != 0 && v62 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v28 > 1 && v37 != 0)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v60 == 35 && (unsigned int)v60 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v28 > 1 && v37 != 0) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40be27 : tmp_10);\n                            sub_4086e0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 <= 1 || (unsigned int)v60 == 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && v62 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1)\n                    {\n                        v9 = &g_40be27;\n                    }\n                    else if (v37 == 0 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 > 1 || ((unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 <= 1 || (unsigned int)v60 == 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && v62 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40be27;\n            free(v17);\n        }\n        *((char *[2])&g_60e498[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_40be27 : tmp_10), v9);\n            if (v68 != 0 && (v9[1] != 0 || v67 != 42))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v9[1] == 0 && v67 == 42)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_4096d0",
            "funcStartAddr": "0x4096d0",
            "funcEndAddr": "0x4096e6",
            "decompiledFuncCode": "int sub_4096d0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409610();\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x406400",
            "funcEndAddr": "0x407538",
            "decompiledFuncCode": "int sub_406400()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long|unsigned int v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_406300();\n            v27 = (unsigned int)sub_406300();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v50 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v87 = v89;\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            *((unsigned long long *)&v4) = v4 & v87;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_406400();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_409710();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v46 != 1 && v17 != 0)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && (unsigned int)v46 != 0 && v46 != -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v63 == 0 || v89 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_406400();\n            }\n            if ((v17 == 0 || v46 == 0) && (v17 == 0 || v89 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v46 == 0 || v4 != 0) && (v46 == 0 || v5 == 0 || v4 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v89 != 0 || v4 != 0) && (v5 == 0 || v89 != 0 || v4 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && v6 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_4097f0",
            "funcStartAddr": "0x4097f0",
            "funcEndAddr": "0x409846",
            "decompiledFuncCode": "int sub_4097f0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402af0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402c68",
            "decompiledFuncCode": "extern char g_60e2da;\nextern char g_60e2f0;\nextern unsigned long long stdin;\n\nint sub_402af0()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long v2;  // rdi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rsi\n    char *v8;  // rdi\n    char *v9;  // rdx\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r12\n    unsigned int *v17;  // rbx\n    unsigned long long v18;  // rax\n    unsigned long long v20;  // rbp\n    unsigned long long v21;  // rbx\n    unsigned long long v23;  // rax\n\n    v1 = 2;\n    v8 = \"-\";\n    v7 = v2;\n    while (v1 != 0)\n    {\n        v1 -= 1;\n        v4 = *(v7);\n        v5 = *(v8);\n        v8 = &v8[v6];\n        v7 = &v7[v6];\n        break;\n    }\n    *(v9) = 0;\n    v10 = (v4 > v5) - 0 - (v4 < v5);\n    if ((char)v10 == 0)\n    {\n        v11 = stdin;\n        g_60e2f0 = 1;\n        sub_406190();\n        v13 = sub_405ec0();\n    }\n    else\n    {\n        v11 = (unsigned int)sub_4061c0();\n        if (v11 != 0)\n        {\n            sub_406190();\n            v15 = sub_405ec0();\n            if (v15 == 0)\n            {\n                v18 = sub_4086e0();\n                if (v18 != 0)\n                {\n                    v16 = 0;\n                    v21 = (unsigned int)sub_407d00();\n                    error(0x0, *(__errno_location()), \"%s\");\n                }\n            }\n        }\n        else\n        {\n            v16 = g_60e2da;\n            v17 = __errno_location();\n            if (g_60e2da != 0 && *(v17) == 2)\n            {\n                *(v9) = 1;\n            }\n            if (g_60e2da == 0 || *(v17) != 2)\n            {\n                v16 = 0;\n                sub_407d00();\n                error(0x0, *(v17), \"%s\");\n            }\n        }\n    }\n    if ((char)v10 == 0 || v11 != 0)\n    {\n        if (((char)v10 == 0 || v15 != 0) && (v13 != 0 || (char)v10 != 0))\n        {\n            v16 = 0;\n            v20 = (unsigned int)sub_407d00();\n            error(0x0, *(__errno_location()), \"%s\");\n            if (stdin != v11)\n            {\n                sub_4086e0();\n            }\n        }\n        if (((char)v10 == 0 || v15 == 0) && ((char)v10 == 0 || v18 == 0) && (v13 == 0 || (char)v10 != 0))\n        {\n            v16 = 1;\n        }\n    }\n    v23 = v16;\n    return v23;\n}\n"
        },
        {
            "funcName": "sub_4078c0",
            "funcStartAddr": "0x4078c0",
            "funcEndAddr": "0x407932",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_4078c0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60e420 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_406400();\n}\n"
        },
        {
            "funcName": "sub_406260",
            "funcStartAddr": "0x406260",
            "funcEndAddr": "0x4062f9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60e308;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_406260()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60e308 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4084a0",
            "funcStartAddr": "0x4084a0",
            "funcEndAddr": "0x4084a2",
            "decompiledFuncCode": "int sub_4084a0()\n{\n}\n"
        },
        {
            "funcName": "sub_407df0",
            "funcStartAddr": "0x407df0",
            "funcEndAddr": "0x407e07",
            "decompiledFuncCode": "int sub_407df0()\n{\n}\n"
        },
        {
            "funcName": "sub_409e30",
            "funcStartAddr": "0x409e30",
            "funcEndAddr": "0x409e48",
            "decompiledFuncCode": "extern int512_t g_60e208;\n\nint sub_409e30()\n{\n}\n"
        },
        {
            "funcName": "sub_4082b0",
            "funcStartAddr": "0x4082b0",
            "funcEndAddr": "0x408309",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4082b0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_407eb0();\n}\n"
        },
        {
            "funcName": "sub_407de0",
            "funcStartAddr": "0x407de0",
            "funcEndAddr": "0x407de9",
            "decompiledFuncCode": "int sub_407de0()\n{\n}\n"
        },
        {
            "funcName": "sub_407c30",
            "funcStartAddr": "0x407c30",
            "funcEndAddr": "0x407c3c",
            "decompiledFuncCode": "int sub_407c30()\n{\n}\n"
        },
        {
            "funcName": "sub_4031c0",
            "funcStartAddr": "0x4031c0",
            "funcEndAddr": "0x4031db",
            "decompiledFuncCode": "int sub_4031c0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rdi\n\n    v1 = 0;\n    do\n    {\n        *((int *)(v2 + v1)) = *((int *)(v3 + v1)) * 0x1000000 | *((int *)(v3 + v1)) * 0x100 & 0xff0000 | *((int *)(v3 + v1)) >> 8 & 0xff00 | *((int *)(v3 + v1)) >> 24 & 255;\n        v1 += 4;\n    }\n    while (v1 != 32);\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4028f1",
            "funcStartAddr": "0x4028f1",
            "funcEndAddr": "0x402948",
            "decompiledFuncCode": "extern char g_60e2c8;\nextern unsigned long long g_60e2d0;\n\nint sub_4028f1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60e2c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60e2d0 >= 0)\n            {\n                break;\n            }\n            g_60e2d0 = g_60e2d0 + 1;\n            *((long long *)(6348352 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60e2c8 = 1;\n        return sub_40289b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408470",
            "funcStartAddr": "0x408470",
            "funcEndAddr": "0x408491",
            "decompiledFuncCode": "int sub_408470()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4086a0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403120",
            "funcStartAddr": "0x403120",
            "funcEndAddr": "0x403168",
            "decompiledFuncCode": "int sub_403120()\n{\n    unsigned long long v1[6];  // rdi\n\n    v1[4] = 0;\n    v1[0] = 13503953895726638695;\n    v1[1] = 11912009169889063794;\n    v1[2] = 11170449402626986623;\n    v1[3] = 6620516960021240235;\n    v1[5] = 0;\n    return 6620516960021240235;\n}\n"
        },
        {
            "funcName": "sub_408650",
            "funcStartAddr": "0x408650",
            "funcEndAddr": "0x408678",
            "decompiledFuncCode": "int sub_408650()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_408450();\n}\n"
        },
        {
            "funcName": "sub_408680",
            "funcStartAddr": "0x408680",
            "funcEndAddr": "0x408693",
            "decompiledFuncCode": "int sub_408680()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_407870",
            "funcStartAddr": "0x407870",
            "funcEndAddr": "0x407883",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_407870()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60e420 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60e420 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407b50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407bbd",
            "decompiledFuncCode": "int sub_407b50()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_407cd0",
            "funcStartAddr": "0x407cd0",
            "funcEndAddr": "0x407ce1",
            "decompiledFuncCode": "int sub_407cd0()\n{\n}\n"
        },
        {
            "funcName": "sub_408520",
            "funcStartAddr": "0x408520",
            "funcEndAddr": "0x408598",
            "decompiledFuncCode": "int sub_408520() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409710",
            "funcStartAddr": "0x409710",
            "funcEndAddr": "0x40977f",
            "decompiledFuncCode": "extern unsigned long long g_40be27;\n\nint sub_409710()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40be27;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_4097f0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_407810",
            "funcStartAddr": "0x407810",
            "funcEndAddr": "0x40781f",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_407810()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60e420 : v1));\n}\n"
        },
        {
            "funcName": "sub_4088e0",
            "funcStartAddr": "0x4088e0",
            "funcEndAddr": "0x408936",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4088e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402950",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x4029a0",
            "decompiledFuncCode": "extern unsigned long long g_60e2e0;\n\nint sub_402950()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdx\n\n    v2 = v1;\n    if (g_60e2e0 != 0)\n    {\n        v4 = 0;\n        while (true)\n        {\n            if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)*(v2) << 1) + 1)) & 16) != 0)\n            {\n                v5 = v4 + 1;\n                v2 = &v2[1];\n                v4 += 1;\n                if (v5 >= g_60e2e0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return 0;\n            }\n        }\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407a30",
            "funcStartAddr": "0x407a30",
            "funcEndAddr": "0x407a3a",
            "decompiledFuncCode": "int sub_407a30()\n{\n}\n"
        },
        {
            "funcName": "sub_407a40",
            "funcStartAddr": "0x407a40",
            "funcEndAddr": "0x407ad5",
            "decompiledFuncCode": "extern struct_0 *g_60e278;\nextern unsigned long long g_60e280;\nextern unsigned long long g_60e288;\nextern unsigned int g_60e290;\nextern unsigned long long g_60e320;\n\nint sub_407a40()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60e290;\n    if (g_60e290 > 1)\n    {\n        v2 = &g_60e278[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60e278[(unsigned long long)(g_60e290 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60e278->field_8 != 6349600)\n    {\n        v1 = free(g_60e278->field_8);\n        g_60e280 = 0x100;\n        g_60e288 = &g_60e320;\n    }\n    if (g_60e278 != 6349440)\n    {\n        v1 = free(g_60e278);\n        g_60e278 = &g_60e280;\n    }\n    g_60e290 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405ec0",
            "funcStartAddr": "0x405ec0",
            "funcEndAddr": "0x405ffd",
            "decompiledFuncCode": "int sub_405ec0()\n{\n    unsigned long long v0;  // [bp-0xd8]\n    unsigned long long v1;  // [bp-0xd0]\n    unsigned long long v2;  // [bp-0xc8]\n    unsigned long long v3;  // [bp-0xc0]\n    unsigned long long v4;  // [bp-0xb8]\n    unsigned long long v5;  // [bp-0xb0]\n    unsigned long v8;  // r12\n    void *v9;  // r12\n    unsigned long long v10;  // rbx\n    unsigned int *v11;  // rdi\n    unsigned long long v12;  // rax\n\n    if (v8 != 0)\n    {\n        v4 = 0;\n        v8 = malloc(0x8048);\n        v0 = 13503953895726638695;\n        v1 = 11912009169889063794;\n        v2 = 11170449402626986623;\n        v3 = 6620516960021240235;\n        v5 = 0;\n        while (true)\n        {\n            v10 = 0;\n            while (true)\n            {\n                v12 = fread_unlocked(v9 + v10, 0x1, 0x8000 - v10, v11);\n                v10 += v12;\n                if (v10 != 0x8000)\n                {\n                    if (v12 == 0 && ((char)*(v11) & 32) != 0)\n                    {\n                        free(v9);\n                        return 1;\n                    }\n                    if (((char)*(v11) & 32) == 0 && v12 == 0 || ((char)*(v11) & 16) != 0 && v12 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            sub_405ac0();\n                        }\n                        sub_405990();\n                        sub_4031c0();\n                        free(v9);\n                        return 0;\n                    }\n                }\n                else\n                {\n                    sub_403200();\n                }\n            }\n        }\n    }\n    else\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_403060",
            "funcStartAddr": "0x403060",
            "funcEndAddr": "0x403068",
            "decompiledFuncCode": "extern unsigned long long g_60e300;\n\nint sub_403060()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60e300 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407e60",
            "funcStartAddr": "0x407e60",
            "funcEndAddr": "0x407e71",
            "decompiledFuncCode": "int sub_407e60()\n{\n}\n"
        },
        {
            "funcName": "sub_406190",
            "funcStartAddr": "0x406190",
            "funcEndAddr": "0x4061ac",
            "decompiledFuncCode": "int sub_406190()\n{\n    unsigned long v0;  // [bp-0x8]\n    void *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long v4;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        fileno(v2);\n    }\n    else\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_406180",
            "funcStartAddr": "0x406180",
            "funcEndAddr": "0x406185",
            "decompiledFuncCode": "int sub_406180()\n{\n}\n"
        },
        {
            "funcName": "sub_409610",
            "funcStartAddr": "0x409610",
            "funcEndAddr": "0x409666",
            "decompiledFuncCode": "extern unsigned int g_60e294;\nextern unsigned int g_60e298;\nextern unsigned int g_60e29c;\nextern unsigned int g_60e460;\nextern unsigned int g_60e464;\nextern unsigned int g_60e468;\nextern unsigned long long g_60e470;\nextern unsigned long long g_60e4a0;\n\nint sub_409610()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60e460 = g_60e29c;\n    g_60e464 = g_60e298;\n    v1 = (unsigned int)v2;\n    v0 = &g_60e460;\n    g_60e29c = g_60e460;\n    g_60e4a0 = g_60e470;\n    g_60e294 = g_60e468;\n    return sub_409040();\n}\n"
        },
        {
            "funcName": "sub_408600",
            "funcStartAddr": "0x408600",
            "funcEndAddr": "0x408617",
            "decompiledFuncCode": "int sub_408600()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_408450();\n}\n"
        },
        {
            "funcName": "sub_405990",
            "funcStartAddr": "0x405990",
            "funcEndAddr": "0x405a51",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned int field_20;\n    unsigned int field_24;\n    unsigned long long field_28;\n} struct_0;\n\nextern void g_40ab80;\n\nint sub_405990()\n{\n    unsigned long v0;  // [bp-0x18]\n    void tmp_70;  // tmp #70\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    struct_0 *v5;  // rdi\n    unsigned long long v6;  // rsi\n    struct_0 *v7;  // rbx\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // rdx\n\n    v1 = v3;\n    v0 = v4;\n    v6 = v5->field_28;\n    v7 = v5;\n    tmp_70 = v5->field_20;\n    v11 = v5->field_24;\n    v8 = (0 - (unsigned long long)(char)(v5->field_28 < 56) & -64) - -128;\n    v9 = (0 - (unsigned long long)(char)(v5->field_28 < 56) & -0x10) + 31;\n    v10 = tmp_70 + v6;\n    v7->field_20 = tmp_70 + v6;\n    if (tmp_70 + v6 < v6)\n    {\n        v11 = (unsigned int)v11 + 1;\n        v7->field_24 = v11;\n    }\n    *((unsigned int *)&v7[3].padding_0[24 + 4 * (0 - (unsigned long long)(char)(v6 < 56) & -0x10)]) = ((unsigned int)v11 * 8 | (unsigned int)v10 % 0x20000000) * 0x1000000 | ((unsigned int)v11 * 8 | (unsigned int)v10 % 0x20000000) * 0x100 & 0xff0000 | ((unsigned int)v11 * 8 | (unsigned int)v10 % 0x20000000) >> 8 & 0xff00 | ((unsigned int)v11 * 8 | (unsigned int)v10 % 0x20000000) >> 24 & 255;\n    *((unsigned int *)&v7[1].padding_0[4 * v9]) = (unsigned int)v10 * 0x800 & 0xff0000 | (unsigned int)(v10 * 8 >> 24) | (unsigned int)v10 * 0x8000000 | (unsigned int)(v10 * 8 >> 8) & 0xff00;\n    memcpy(&v7[1].padding_0[v6], &g_40ab80, v8 - v6 - 8);\n}\n"
        },
        {
            "funcName": "sub_4088a0",
            "funcStartAddr": "0x4088a0",
            "funcEndAddr": "0x4088db",
            "decompiledFuncCode": "int sub_4088a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4088e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_407e30",
            "funcStartAddr": "0x407e30",
            "funcEndAddr": "0x407e3a",
            "decompiledFuncCode": "int sub_407e30()\n{\n}\n"
        },
        {
            "funcName": "sub_403080",
            "funcStartAddr": "0x403080",
            "funcEndAddr": "0x40311e",
            "decompiledFuncCode": "extern unsigned int g_40ab65;\nextern unsigned int g_60e220;\nextern char g_60e2f8;\nextern unsigned long long g_60e300;\n\nint sub_403080()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_409790();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60e2f8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40ab65, 0x5);\n            if (g_60e300 != 0)\n            {\n                sub_407cd0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60e2f8 != 0)\n    {\n        v3 = sub_409790();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60e2f8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60e220);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_407ae0",
            "funcStartAddr": "0x407ae0",
            "funcEndAddr": "0x407af1",
            "decompiledFuncCode": "int sub_407ae0()\n{\n}\n"
        },
        {
            "funcName": "sub_407820",
            "funcStartAddr": "0x407820",
            "funcEndAddr": "0x40782f",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_407820()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60e420 : v1)) = v2;\n    return &g_60e420;\n}\n"
        },
        {
            "funcName": "sub_4086a0",
            "funcStartAddr": "0x4086a0",
            "funcEndAddr": "0x4086cc",
            "decompiledFuncCode": "extern unsigned int g_40bcef;\nextern unsigned int g_60e220;\n\nint sub_4086a0()\n{\n    dcgettext(0x0, 0x40bcef, 0x5);\n    error(g_60e220, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_402948",
            "funcStartAddr": "0x402948",
            "funcEndAddr": "0x402984",
            "decompiledFuncCode": "int sub_402948() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4083d0",
            "funcStartAddr": "0x4083d0",
            "funcEndAddr": "0x408444",
            "decompiledFuncCode": "extern unsigned int g_40b9b2;\nextern unsigned int g_40b9dd;\nextern unsigned int g_40bc10;\n\nint sub_4083d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b9b2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b9dd, 0x5));\n    dcgettext(0x0, 0x40bc10, 0x5);\n}\n"
        },
        {
            "funcName": "sub_409690",
            "funcStartAddr": "0x409690",
            "funcEndAddr": "0x4096a3",
            "decompiledFuncCode": "int sub_409690()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409610();\n}\n"
        },
        {
            "funcName": "sub_40289b",
            "funcStartAddr": "0x40289b",
            "funcEndAddr": "0x4028ba",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_40289b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405a90",
            "funcStartAddr": "0x405a90",
            "funcEndAddr": "0x405acd",
            "decompiledFuncCode": "int sub_405a90()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v3;  // rbx\n\n    v0 = v3;\n    sub_405990();\n}\n"
        },
        {
            "funcName": "sub_4029b0",
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402a1b",
            "decompiledFuncCode": "int sub_4029b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rdx\n    char *v7;  // r9\n\n    v2 = v1 + 1;\n    v6 = 0;\n    if (v3 != 0)\n    {\n        while (true)\n        {\n            v4 = (char)*((char *)(v1 + v6));\n            if (*((char *)(v1 + v6)) != 0)\n            {\n                if (v4 != 92)\n                {\n                    *((unsigned long long *)(v2 - 1)) = v4;\n                    v7 = v2;\n                }\n                else if (v3 - 1 != v6)\n                {\n                    v6 += 1;\n                    v5 = (char)*((char *)(v1 + v6));\n                    if (*((char *)(v1 + v6)) == 92)\n                    {\n                        v7 = v2;\n                        *((char *)(v2 - 1)) = 92;\n                    }\n                    else if (v5 == 110)\n                    {\n                        v7 = v2;\n                        *((char *)(v2 - 1)) = 10;\n                    }\n                }\n                if ((v4 != 92 || v3 - 1 != v6) && (*((char *)(v1 + v6)) == 92 || v5 == 110 || v4 != 92))\n                {\n                    v6 += 1;\n                    v2 += 1;\n                    if (v7 >= v3 + v1)\n                    {\n                        break;\n                    }\n                    *(v7) = 0;\n                }\n            }\n            if (*((char *)(v1 + v6)) == 0 || v4 == 92 && v3 - 1 == v6 || v4 == 92 && *((char *)(v1 + v6)) != 92 && v5 != 110)\n            {\n                return 0;\n            }\n        }\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_407eb0",
            "funcStartAddr": "0x407eb0",
            "funcEndAddr": "0x408259",
            "decompiledFuncCode": "extern unsigned int g_40b96b;\nextern unsigned int g_40b96f;\nextern unsigned int g_40b97f;\nextern unsigned int g_40b996;\nextern unsigned int g_40b9f8;\nextern unsigned int g_40bac8;\nextern unsigned int g_40bae8;\nextern unsigned int g_40bb10;\nextern unsigned int g_40bb38;\nextern unsigned int g_40bb68;\n\nint sub_407eb0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40b96b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b9f8, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40b96f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40b97f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40b996, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40bac8, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40bae8, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40bb10, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40bb38, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40bb68, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_402a40",
            "funcStartAddr": "0x402a40",
            "funcEndAddr": "0x402ac7",
            "decompiledFuncCode": "extern unsigned long long stdout[7];\n\nint sub_402a40()\n{\n    unsigned long long v1;  // rdi\n    char *v2;  // rbx\n    char v3;  // sil\n    unsigned long long v4;  // rsi\n    unsigned long long v5[7];  // rcx\n    char *v6;  // rax\n\n    v2 = v1;\n    if (v3 != 0)\n    {\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) == 0)\n            {\n                break;\n            }\n            v5 = stdout;\n            if (v4 == 10)\n            {\n                v6 = fwrite_unlocked(\"\\\\n\", 0x1, 0x2, stdout);\n            }\n            else if (v4 != 92)\n            {\n                v6 = v5[5];\n                if (v5[5] < v5[6])\n                {\n                    v5[5] = stdout[5] + 1;\n                    *((unsigned long long *)&v6) = v4;\n                }\n                else\n                {\n                    v6 = __overflow();\n                }\n            }\n            else\n            {\n                v6 = fwrite_unlocked(\"\\\\\\\\\", 0x1, 0x2, stdout);\n            }\n            v2 = &v2[1];\n        }\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_407cf0",
            "funcStartAddr": "0x407cf0",
            "funcEndAddr": "0x407cfa",
            "decompiledFuncCode": "int sub_407cf0()\n{\n}\n"
        },
        {
            "funcName": "sub_4096f0",
            "funcStartAddr": "0x4096f0",
            "funcEndAddr": "0x409708",
            "decompiledFuncCode": "int sub_4096f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409040();\n}\n"
        },
        {
            "funcName": "sub_408760",
            "funcStartAddr": "0x408760",
            "funcEndAddr": "0x40888c",
            "decompiledFuncCode": "extern unsigned int g_60e458;\n\nint sub_408760()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60e458 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_408760();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60e458 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_60e458 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_408760();\n        }\n        if ((*(v12) == 22 || g_60e458 < 0) && (g_60e458 < 0 || (unsigned int)v15 < 0) && (g_60e458 < 0 || (unsigned int)v15 >= 0) && (g_60e458 == -1 || g_60e458 >= 0) && (g_60e458 >= 0 || (unsigned int)v15 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_407d00",
            "funcStartAddr": "0x407d00",
            "funcEndAddr": "0x407d73",
            "decompiledFuncCode": "int sub_407d00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407630();\n}\n"
        },
        {
            "funcName": "sub_4086e0",
            "funcStartAddr": "0x4086e0",
            "funcEndAddr": "0x408758",
            "decompiledFuncCode": "int sub_4086e0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_4088a0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_407c40",
            "funcStartAddr": "0x407c40",
            "funcEndAddr": "0x407c4f",
            "decompiledFuncCode": "int sub_407c40()\n{\n}\n"
        },
        {
            "funcName": "sub_403070",
            "funcStartAddr": "0x403070",
            "funcEndAddr": "0x403078",
            "decompiledFuncCode": "extern char g_60e2f8;\n\nint sub_403070()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60e2f8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407b30",
            "funcStartAddr": "0x407b30",
            "funcEndAddr": "0x407b42",
            "decompiledFuncCode": "int sub_407b30()\n{\n}\n"
        },
        {
            "funcName": "sub_406300",
            "funcStartAddr": "0x406300",
            "funcEndAddr": "0x4063df",
            "decompiledFuncCode": "extern int512_t g_40ac06;\nextern int512_t g_40ac0a;\n\nint sub_406300()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_409850();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40ac06 : 4238353);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40ac0a : 4238349);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_408a20",
            "funcStartAddr": "0x408a20",
            "funcEndAddr": "0x40901e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40bd00;\nextern unsigned int g_40bd20;\nextern unsigned int g_40bd50;\nextern unsigned int g_40bd70;\nextern unsigned int g_40bda0;\nextern unsigned long long stderr;\n\nint sub_408a20()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40bd00, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40bd20, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 += 32;\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (*(v18) == 0 || v22 == v16) && (v22 == v16 || v4 == 0) && (v22 == v16 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40bda0, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40bd70, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v17) != 0 || v34 != 0))\n        {\n            return v42;\n        }\n    }\n    if (*((long long *)v17) == 0 && v28 == 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0 || v34 == 0 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40bd50, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_408450",
            "funcStartAddr": "0x408450",
            "funcEndAddr": "0x40846a",
            "decompiledFuncCode": "int sub_408450()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4086a0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_407830",
            "funcStartAddr": "0x407830",
            "funcEndAddr": "0x407863",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_407830()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60e420 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60e420 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40795b",
            "funcStartAddr": "0x40795b",
            "funcEndAddr": "0x407a21",
            "decompiledFuncCode": "int sub_40795b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_406400();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_408450();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_406400();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407b00",
            "funcStartAddr": "0x407b00",
            "funcEndAddr": "0x407b0a",
            "decompiledFuncCode": "int sub_407b00()\n{\n}\n"
        },
        {
            "funcName": "sub_407e80",
            "funcStartAddr": "0x407e80",
            "funcEndAddr": "0x407e96",
            "decompiledFuncCode": "int sub_407e80()\n{\n}\n"
        },
        {
            "funcName": "sub_407cc0",
            "funcStartAddr": "0x407cc0",
            "funcEndAddr": "0x407ccd",
            "decompiledFuncCode": "int sub_407cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_408940",
            "funcStartAddr": "0x408940",
            "funcEndAddr": "0x408a15",
            "decompiledFuncCode": "int sub_408940()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_4085b0",
            "funcStartAddr": "0x4085b0",
            "funcEndAddr": "0x4085fa",
            "decompiledFuncCode": "int sub_4085b0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405ac0",
            "funcStartAddr": "0x405ac0",
            "funcEndAddr": "0x405da2",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[40];\n    unsigned long long field_28;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char field_30;\n} struct_0;\n\nint sub_405ac0()\n{\n    void tmp_11;  // tmp #11\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    struct_0 *v3;  // r12\n    void *v4;  // rdi\n    unsigned long long v5;  // rbp\n    unsigned long long v6;  // r15\n    unsigned long v7;  // r14\n    unsigned long long v8;  // rsi\n    unsigned long long v11;  // rbp\n    unsigned long long|void * v12;  // rax\n    unsigned long long v13;  // rcx\n    struct_1 *|unsigned int v14;  // edx\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // rsi\n    uint128_t *v17;  // rbx\n    uint128_t v18[4];  // rbp\n    void *v19;  // r14\n    unsigned long long v20;  // r15\n    uint128_t v21;  // xmm0\n    unsigned long long v23;  // rax\n    void *v24;  // rsi\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // rcx\n    unsigned long long v28;  // rsi\n    unsigned long v29;  // r13\n\n    v2 = v1;\n    v3 = v14;\n    v17 = v4;\n    v5 = v14->field_28;\n    if (v14->field_28 != 0)\n    {\n        v6 = &v14[1];\n        v7 = (!(128 - v5 <= v1)? v1 : 128 - v5);\n        v12 = memcpy(&v14[1].padding_0[v5], v4, (!(128 - v5 <= v1)? v1 : 128 - v5));\n        v8 = v3->field_28 + v7;\n        v3->field_28 = v3->field_28 + v7;\n        if (v8 > 64)\n        {\n            sub_403200();\n            v11 = v5 + v7 & -64;\n            v12 = &v14[1].padding_0[v11];\n            v13 = (unsigned int)v3->field_28 & 63;\n            v3->field_28 = (unsigned int)v3->field_28 & 63;\n            if (!((unsigned int)v13 < 8))\n            {\n                *((long long *)&v3->field_30) = *((long long *)v12);\n                *((long long *)(v6 + v13 - 8)) = *((long long *)&((char *)v12)[v13 + -8]);\n                v12 -= v6 - (&v3[1].padding_0[7] & -8);\n                v14 = (unsigned int)(v6 - (&v3[1].padding_0[7] & -8) + v13) & -8;\n                if (((unsigned int)(v6 - (&v3[1].padding_0[7] & -8) + v13) & -8) >= 8)\n                {\n                    v14 &= -8;\n                    v15 = 0;\n                    do\n                    {\n                        v16 = v15;\n                        v15 = (unsigned int)v15 + 8;\n                        *((long long *)((&v14[1].padding_0[8] & -8) + v16)) = *((long long *)(v12 + v16));\n                    }\n                    while ((unsigned int)v15 < v14);\n                }\n            }\n            else if (!(((char)((unsigned int)v14->field_28 & 63) & 4) == 0))\n            {\n                *((int *)&v3->field_30) = *((int *)v12);\n                v12 = (unsigned int)*((int *)&((char *)v12)[v13 + -4]);\n                *((unsigned int *)&(&v14->padding_0[0])[44 + v13]) = v12;\n            }\n            else if (((char)v14->field_28 & 63) != 0)\n            {\n                v3->field_30 = *((char *)v12);\n                if ((v13 & 2) != 0)\n                {\n                    v12 = (unsigned short)*((short *)&((char *)v12)[v13 + -2]);\n                    *((unsigned long long *)&(&v14->padding_0[0])[46 + v13]) = v12;\n                }\n            }\n        }\n        v17 = v4 + v7;\n        v2 -= v7;\n    }\n    if (v2 > 63)\n    {\n        if ((v17 & 3) != 0)\n        {\n            v18 = &v14[1];\n            if (v2 != 64)\n            {\n                v20 = v2 - 65 >> 6;\n                v19 = &v17[4 + 4 * (v2 - 65 >> 6)];\n                while (true)\n                {\n                    v21 = *(v17);\n                    v17 = &v17[4];\n                    *((uint128_t *)&v18) = v21;\n                    *((uint128_t *)&v18[2]) = v17[-3];\n                    *((uint128_t *)&v18[4]) = v17[-2];\n                    *((uint128_t *)&v18[6]) = v17[-1];\n                    sub_403200();\n                    if (v17 == v19)\n                    {\n                        break;\n                    }\n                }\n                v2 = v2 + (0 - v20) * 64 - 64;\n            }\n            else\n            {\n                v19 = v17;\n            }\n        }\n        else\n        {\n            tmp_11 = v2;\n            v2 = (unsigned int)v2 & 63;\n            v17 = (char *)v17 + (tmp_11 & -64);\n            v12 = sub_403200();\n        }\n    }\n    if (v2 <= 63 || (v17 & 3) == 0)\n    {\n        if (v2 == 0)\n        {\n            return v12;\n        }\n        v18 = &v14[1];\n        v19 = v17;\n    }\n    if (v2 != 0 || v2 > 63 && (v17 & 3) != 0)\n    {\n        v23 = v3->field_28;\n        v24 = (char *)v18 + v3->field_28;\n        if (!((unsigned int)v2 < 8))\n        {\n            *((long long *)v24) = *((long long *)v19);\n            *((long long *)&((char *)v24)[v2 + -8]) = *((long long *)&((char *)v19)[v2 + -8]);\n            v26 = v19 - (v24 - (v24 + 8 & -8));\n            v14 = (unsigned int)(v24 - (v24 + 8 & -8) + v2) & -8;\n            if (((unsigned int)(v24 - (v24 + 8 & -8) + v2) & -8) >= 8)\n            {\n                v14 &= -8;\n                v27 = 0;\n                do\n                {\n                    v28 = v27;\n                    v27 = (unsigned int)v27 + 8;\n                    *((long long *)((v24 + 8 & -8) + v28)) = *((long long *)(v26 + v28));\n                }\n                while ((unsigned int)v27 < v14);\n            }\n        }\n        else if (!((v2 & 4) == 0))\n        {\n            *((int *)v24) = *((int *)v19);\n            *((int *)&((char *)v24)[v2 + -4]) = *((int *)&((char *)v19)[v2 + -4]);\n        }\n        else if ((unsigned int)v2 != 0)\n        {\n            *((char *)v24) = *((char *)v19);\n            if ((v2 & 2) != 0)\n            {\n                *((short *)&((char *)v24)[v2 + -2]) = *((short *)&((char *)v19)[v2 + -2]);\n            }\n        }\n        v29 = v2 + v14->field_28;\n        if (v29 > 63)\n        {\n            v29 -= 64;\n            sub_403200();\n            v23 = memcpy(v18, &v3[2].padding_0[14], v29);\n        }\n        v3->field_28 = v29;\n        return v23;\n    }\n}\n"
        },
        {
            "funcName": "sub_403170",
            "funcStartAddr": "0x403170",
            "funcEndAddr": "0x4031b8",
            "decompiledFuncCode": "int sub_403170()\n{\n    unsigned long long v1[6];  // rdi\n\n    v1[4] = 0;\n    v1[0] = 3926247204440088280;\n    v1[1] = -644479594506691305;\n    v1[2] = 7518782744944446257;\n    v1[3] = 13761399178871279527;\n    v1[5] = 0;\n    return 13761399178871279527;\n}\n"
        },
        {
            "funcName": "sub_405dc0",
            "funcStartAddr": "0x405dc0",
            "funcEndAddr": "0x405e3c",
            "decompiledFuncCode": "int sub_405dc0()\n{\n    unsigned long long v0;  // [bp-0xb8]\n    unsigned long long v1;  // [bp-0xb0]\n    unsigned long long v2;  // [bp-0xa8]\n    unsigned long long v3;  // [bp-0xa0]\n    unsigned long long v4;  // [bp-0x98]\n    unsigned long long v5;  // [bp-0x90]\n\n    v0 = 13503953895726638695;\n    v1 = 11912009169889063794;\n    v2 = 11170449402626986623;\n    v3 = 6620516960021240235;\n    v4 = 0;\n    v5 = 0;\n    sub_405ac0();\n    sub_405990();\n    return sub_4031c0();\n}\n"
        },
        {
            "funcName": "sub_407890",
            "funcStartAddr": "0x407890",
            "funcEndAddr": "0x4078bb",
            "decompiledFuncCode": "extern char g_60e420;\n\nint sub_407890()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60e420 : v2);\n    *((int *)(tmp_11? &g_60e420 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60e420;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60e420;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4077d0",
            "funcStartAddr": "0x4077d0",
            "funcEndAddr": "0x407804",
            "decompiledFuncCode": "int sub_4077d0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_408650();\n}\n"
        },
        {
            "funcName": "sub_4086cc",
            "funcStartAddr": "0x4086cc",
            "funcEndAddr": "0x4086d1",
            "decompiledFuncCode": "int sub_4086cc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409670",
            "funcStartAddr": "0x409670",
            "funcEndAddr": "0x409688",
            "decompiledFuncCode": "int sub_409670()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_409610();\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_sha256sum.elf"
}