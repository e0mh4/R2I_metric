{
    "funcInfo": [
        {
            "funcName": "sub_403a00",
            "funcStartAddr": "0x403a00",
            "funcEndAddr": "0x403a11",
            "decompiledFuncCode": "int sub_403a00()\n{\n}\n"
        },
        {
            "funcName": "sub_403bd0",
            "funcStartAddr": "0x403bd0",
            "funcEndAddr": "0x403f79",
            "decompiledFuncCode": "extern unsigned int g_4063eb;\nextern unsigned int g_4063ef;\nextern unsigned int g_4063ff;\nextern unsigned int g_406416;\nextern unsigned int g_406478;\nextern unsigned int g_406548;\nextern unsigned int g_406568;\nextern unsigned int g_406590;\nextern unsigned int g_4065b8;\nextern unsigned int g_4065e8;\n\nint sub_403bd0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x4063eb);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x406478), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4063ef);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4063ff);\n        break;\n    case 3:\n        dcgettext(0x0, 0x406416);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x406548);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x406568);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x406590);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x4065b8);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x4065e8);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_403b20",
            "funcStartAddr": "0x403b20",
            "funcEndAddr": "0x403b37",
            "decompiledFuncCode": "int sub_403b20()\n{\n}\n"
        },
        {
            "funcName": "sub_40368b",
            "funcStartAddr": "0x40368b",
            "funcEndAddr": "0x403751",
            "decompiledFuncCode": "int sub_40368b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_402130();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_404170();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_402130();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403a30",
            "funcStartAddr": "0x403a30",
            "funcEndAddr": "0x403aa3",
            "decompiledFuncCode": "int sub_403a30()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403360();\n}\n"
        },
        {
            "funcName": "sub_404210",
            "funcStartAddr": "0x404210",
            "funcEndAddr": "0x404231",
            "decompiledFuncCode": "int sub_404210()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4043c0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4035f0",
            "funcStartAddr": "0x4035f0",
            "funcEndAddr": "0x403662",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_4035f0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_608380 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_402130();\n}\n"
        },
        {
            "funcName": "sub_403fb0",
            "funcStartAddr": "0x403fb0",
            "funcEndAddr": "0x403fd0",
            "decompiledFuncCode": "int sub_403fb0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_401a98",
            "funcStartAddr": "0x401a98",
            "funcEndAddr": "0x401ad4",
            "decompiledFuncCode": "int sub_401a98() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4035c0",
            "funcStartAddr": "0x4035c0",
            "funcEndAddr": "0x4035eb",
            "decompiledFuncCode": "extern char g_608380;\n\nint sub_4035c0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_608380 : v2);\n    *((int *)(tmp_11? &g_608380 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_608380;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_608380;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403880",
            "funcStartAddr": "0x403880",
            "funcEndAddr": "0x4038ed",
            "decompiledFuncCode": "int sub_403880()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403360();\n}\n"
        },
        {
            "funcName": "sub_403770",
            "funcStartAddr": "0x403770",
            "funcEndAddr": "0x403805",
            "decompiledFuncCode": "extern struct_0 *g_6081f8;\nextern unsigned long long g_608200;\nextern unsigned long long g_608208;\nextern unsigned int g_608210;\nextern unsigned long long g_608280;\n\nint sub_403770()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_608210;\n    if (g_608210 > 1)\n    {\n        v2 = &g_6081f8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6081f8[(unsigned long long)(g_608210 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_6081f8->field_8 != 6324864)\n    {\n        v1 = free(g_6081f8->field_8);\n        g_608200 = 0x100;\n        g_608208 = &g_608280;\n    }\n    if (g_6081f8 != 0x608200)\n    {\n        v1 = free(g_6081f8);\n        g_6081f8 = &g_608200;\n    }\n    g_608210 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403b40",
            "funcStartAddr": "0x403b40",
            "funcEndAddr": "0x403b53",
            "decompiledFuncCode": "int sub_403b40()\n{\n}\n"
        },
        {
            "funcName": "sub_403840",
            "funcStartAddr": "0x403840",
            "funcEndAddr": "0x403856",
            "decompiledFuncCode": "int sub_403840()\n{\n}\n"
        },
        {
            "funcName": "sub_404240",
            "funcStartAddr": "0x404240",
            "funcEndAddr": "0x4042b8",
            "decompiledFuncCode": "int sub_404240() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4043a0",
            "funcStartAddr": "0x4043a0",
            "funcEndAddr": "0x4043b3",
            "decompiledFuncCode": "int sub_4043a0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_403fd0",
            "funcStartAddr": "0x403fd0",
            "funcEndAddr": "0x404029",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_403fd0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_403bd0();\n}\n"
        },
        {
            "funcName": "sub_403810",
            "funcStartAddr": "0x403810",
            "funcEndAddr": "0x403821",
            "decompiledFuncCode": "int sub_403810()\n{\n}\n"
        },
        {
            "funcName": "sub_4042d0",
            "funcStartAddr": "0x4042d0",
            "funcEndAddr": "0x40431a",
            "decompiledFuncCode": "int sub_4042d0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403540",
            "funcStartAddr": "0x403540",
            "funcEndAddr": "0x40354f",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_403540()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_608380 : v1));\n}\n"
        },
        {
            "funcName": "sub_4041d0",
            "funcStartAddr": "0x4041d0",
            "funcEndAddr": "0x404200",
            "decompiledFuncCode": "int sub_4041d0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4043c0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4044e0",
            "funcStartAddr": "0x4044e0",
            "funcEndAddr": "0x404536",
            "decompiledFuncCode": "int sub_4044e0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404b70",
            "funcStartAddr": "0x404b70",
            "funcEndAddr": "0x404bc6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_404b70()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404ab0",
            "funcStartAddr": "0x404ab0",
            "funcEndAddr": "0x404b28",
            "decompiledFuncCode": "int sub_404ab0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_404b30() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4039f0",
            "funcStartAddr": "0x4039f0",
            "funcEndAddr": "0x4039fd",
            "decompiledFuncCode": "int sub_4039f0()\n{\n}\n"
        },
        {
            "funcName": "sub_404400",
            "funcStartAddr": "0x404400",
            "funcEndAddr": "0x40446f",
            "decompiledFuncCode": "extern unsigned long long g_406431;\n\nint sub_404400()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_406431;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_4044e0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_403970",
            "funcStartAddr": "0x403970",
            "funcEndAddr": "0x40397f",
            "decompiledFuncCode": "int sub_403970()\n{\n}\n"
        },
        {
            "funcName": "sub_403b10",
            "funcStartAddr": "0x403b10",
            "funcEndAddr": "0x403b19",
            "decompiledFuncCode": "int sub_403b10()\n{\n}\n"
        },
        {
            "funcName": "sub_403500",
            "funcStartAddr": "0x403500",
            "funcEndAddr": "0x403534",
            "decompiledFuncCode": "int sub_403500()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_404370();\n}\n"
        },
        {
            "funcName": "sub_403960",
            "funcStartAddr": "0x403960",
            "funcEndAddr": "0x40396c",
            "decompiledFuncCode": "int sub_403960()\n{\n}\n"
        },
        {
            "funcName": "sub_40397f",
            "funcStartAddr": "0x40397f",
            "funcEndAddr": "0x4039f0",
            "decompiledFuncCode": "extern uint128_t g_608380;\nextern uint128_t g_608390;\nextern uint128_t g_6083a0;\nextern unsigned long long g_6083b0;\n\nint sub_40397f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6083b0;\n    *((uint128_t *)&v0) = g_608380;\n    *((uint128_t *)&v1) = g_608390;\n    *((uint128_t *)&v2) = g_6083a0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_403360();\n}\n"
        },
        {
            "funcName": "sub_403550",
            "funcStartAddr": "0x403550",
            "funcEndAddr": "0x40355f",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_403550()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_608380 : v1)) = v2;\n    return &g_608380;\n}\n"
        },
        {
            "funcName": "sub_403b60",
            "funcStartAddr": "0x403b60",
            "funcEndAddr": "0x403b6a",
            "decompiledFuncCode": "int sub_403b60()\n{\n}\n"
        },
        {
            "funcName": "sub_404320",
            "funcStartAddr": "0x404320",
            "funcEndAddr": "0x404337",
            "decompiledFuncCode": "int sub_404320()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_404170();\n}\n"
        },
        {
            "funcName": "sub_403830",
            "funcStartAddr": "0x403830",
            "funcEndAddr": "0x40383a",
            "decompiledFuncCode": "int sub_403830()\n{\n}\n"
        },
        {
            "funcName": "sub_4038f0",
            "funcStartAddr": "0x4038f0",
            "funcEndAddr": "0x403959",
            "decompiledFuncCode": "int sub_4038f0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403360();\n}\n"
        },
        {
            "funcName": "sub_403560",
            "funcStartAddr": "0x403560",
            "funcEndAddr": "0x403593",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_403560()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_608380 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_608380 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_404370",
            "funcStartAddr": "0x404370",
            "funcEndAddr": "0x404398",
            "decompiledFuncCode": "int sub_404370()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_404170();\n}\n"
        },
        {
            "funcName": "sub_404340",
            "funcStartAddr": "0x404340",
            "funcEndAddr": "0x40436e",
            "decompiledFuncCode": "int sub_404340()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4043c0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401470",
            "funcEndAddr": "0x401994",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nextern unsigned int g_40509f;\nextern unsigned int g_4055c0;\nextern unsigned int g_406431;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    char v2;  // [bp-0x39]\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rdi\n    struct_1 *v7;  // rsi\n    unsigned long long v8;  // rax\n    unsigned long long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long v18;  // rdx\n    unsigned long|unsigned long long v20;  // r10\n    char v21[4];  // rax\n    unsigned long long v22;  // rdx\n    char *v23;  // r9\n    char *v24;  // rax\n    unsigned long long v25;  // rbx\n    unsigned long long v26;  // rbp\n    char *v28;  // rax\n    unsigned long long v29;  // r15\n    unsigned long long v30;  // rax\n    unsigned long long *v31;  // rax\n    unsigned long|unsigned int v32;  // rax\n    unsigned long long v33;  // rdx\n    unsigned long|unsigned long long|unsigned int v34;  // rcx\n    char *|unsigned long long v35;  // r13\n    unsigned long long v36;  // rax\n    char *v37;  // rax\n    unsigned long long v38;  // rax\n    char *v39;  // rax\n    char v40[4];  // rbx\n    char *v41[4];  // r14\n    char *v42;  // rax\n    unsigned long long v43;  // r12\n    char *v44;  // rax\n\n    v4 = getenv(\"POSIXLY_CORRECT\");\n    if (v4 != 0)\n    {\n        if ((unsigned int)v5 > 1)\n        {\n            v8 = strcmp(v7->field_8, \"-n\");\n            if (v8 != 0)\n            {\n                v43 = 1;\n                v41 = &v7->field_8;\n                sub_401f90();\n                setlocale(0x6, 0x406431);\n                bindtextdomain(0x40509f, 0x4055c0);\n                textdomain(0x40509f);\n                sub_404c40();\n                v14 = v5 - 1;\n            }\n        }\n        else\n        {\n            sub_401f90();\n            setlocale(0x6, 0x406431);\n            bindtextdomain(0x40509f, 0x4055c0);\n            textdomain(0x40509f);\n            sub_404c40();\n        }\n    }\n    if (v4 == 0 || v8 == 0 && (unsigned int)v5 > 1)\n    {\n        sub_401f90();\n        setlocale(0x6, 0x406431);\n        bindtextdomain(0x40509f, 0x4055c0);\n        textdomain(0x40509f);\n        sub_404c40();\n    }\n    if ((v4 == 0 || v8 == 0) && (v4 == 0 || (unsigned int)v5 > 1))\n    {\n        if ((unsigned int)v5 == 2)\n        {\n            v15 = strcmp(v7->field_8, \"--help\");\n            if (v15 != 0)\n            {\n                v17 = strcmp(v7->field_8, \"--version\");\n                if (v17 != 0)\n                {\n                    v41 = &v7->field_8;\n                    v14 = 1;\n                }\n                else\n                {\n                    v1 = v18;\n                    v0 = 0;\n                    sub_404030();\n                }\n            }\n            else\n            {\n                sub_401b20(); /* do not return */\n            }\n        }\n        else\n        {\n            v14 = v5 - 1;\n            v41 = &v7->field_8;\n        }\n        if (((unsigned int)v5 != 2 || v15 != 0) && ((unsigned int)v5 != 2 || v17 != 0))\n        {\n            v20 = 0;\n            v43 = 1;\n            while ((unsigned int)v14 > 0)\n            {\n                v21 = *(v41);\n                if ((*(v41))[0] == 45)\n                {\n                    v22 = v21[1];\n                    v23 = &v21[1];\n                    if (v21[1] != 0)\n                    {\n                        v34 = v22 - 69;\n                        if ((v22 - 69 & 255) <= 41 && (2203318222849 & 1 << (unsigned long long)(v34 & 63)) != 0)\n                        {\n                            v24 = &v21[2];\n                            while (true)\n                            {\n                                v34 = *(v24);\n                                if (*(v24) != 0)\n                                {\n                                    v34 = (unsigned long long)v34 - 69;\n                                    v24 = &v24[1];\n                                    if ((2203318222849 & 1 << (unsigned long long)(v34 & 63)) == 0 || v34 > 41)\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    do\n                                    {\n                                        v23 = &v23[1];\n                                        if (v22 == 101)\n                                        {\n                                            v20 = 1;\n                                        }\n                                        else if (v22 != 110)\n                                        {\n                                            v20 = (unsigned int)(v22 == 69? 0 : (unsigned int)r10<8>);\n                                        }\n                                        else\n                                        {\n                                            v43 = 0;\n                                        }\n                                        v22 = *(v23);\n                                    }\n                                    while (*(v23) != 0);\n                                    v14 = (unsigned int)v14 - 1;\n                                    v41 = &v41[1];\n                                }\n                            }\n                            if (*(v24) != 0)\n                            {\n                                if (v20 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                v26 = &((char *[4])&v41[v14 + -1])[1];\n                while (true)\n                {\n                    v40 = *(v41);\n                    while (true)\n                    {\n                        v33 = v40[0];\n                        v35 = &v40[1];\n                        if (v40[0] != 0)\n                        {\n                            if (v33 == 92)\n                            {\n                                v29 = v40[1];\n                                if (v40[1] != 0)\n                                {\n                                    v30 = v34 - 48;\n                                    v35 = &v40[2];\n                                    v34 = v29;\n                                    switch (v29 - 48 & 255)\n                                    {\n                                    case 0:\n                                        v34 = v40[2];\n                                        if (((unsigned long long)v40[2] - 48 & 255) > 7)\n                                        {\n                                            v33 = 0;\n                                            break;\n                                        }\n                                        else\n                                        {\n                                            v35 = &v40[3];\n                                            v32 = v40[3];\n                                            v36 = (unsigned long long)v32 - 48;\n                                            v33 = v34 - 48;\n                                            if (v36 <= 7)\n                                            {\n                                                v35 = &v35[1];\n                                                v33 = v36 + v33 * 8;\n                                            }\n                                            v38 = *(v35);\n                                            if (((unsigned long long)*(v35) - 48 & 255) <= 7)\n                                            {\n                                                v35 = &v35[1];\n                                                v33 = v38 + v33 * 8 - 48;\n                                            }\n                                        }\n                                    case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n                                        v32 = v40[2];\n                                    case 44:\n                                        break;\n                                    case 49:\n                                        v33 = 7;\n                                        break;\n                                    case 50:\n                                        v33 = 8;\n                                        break;\n                                    case 53:\n                                        v33 = 27;\n                                        break;\n                                    case 54:\n                                        v33 = 12;\n                                        break;\n                                    case 62:\n                                        v33 = 10;\n                                        break;\n                                    case 66:\n                                        v33 = 13;\n                                        break;\n                                    case 68:\n                                        v33 = 9;\n                                        break;\n                                    case 70:\n                                        v33 = 11;\n                                        break;\n                                    case 72:\n                                        v2 = v40[2];\n                                        v31 = __ctype_b_loc();\n                                        v34 = *(v31);\n                                        if ((*((char *)(*(v31) + ((unsigned long long)v2 << 1) + 1)) & 16) != 0)\n                                        {\n                                            v33 = (unsigned int)sub_401aa0();\n                                            if ((*((char *)(v34 + ((unsigned long long)v40[3] << 1) + 1)) & 16) != 0)\n                                            {\n                                                v35 = &v40[4];\n                                                v33 += (unsigned int)sub_401aa0();\n                                            }\n                                            else\n                                            {\n                                                v35 = &v40[3];\n                                            }\n                                        }\n                                    default:\n                                        v37 = stdout[5];\n                                        if (stdout[6] > stdout[5])\n                                        {\n                                            stdout[5] = stdout[5] + 1;\n                                            v33 = v34;\n                                            *(v37) = 92;\n                                        }\n                                        else\n                                        {\n                                            __overflow();\n                                            v33 = v34;\n                                        }\n                                    }\n                                    if ((v29 - 48 & 255) <= 72)\n                                    {\n                                        v32 = v30;\n                                    }\n                                }\n                            }\n                            v39 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                v34 = &v39[1];\n                                stdout[5] = &v39[1];\n                                *((unsigned long long *)&v39) = v33;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            v40 = v35;\n                        }\n                        else\n                        {\n                            v41 = &v41[1];\n                            if (v41 == v26)\n                            {\n                                break;\n                            }\n                            v42 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v42) = 32;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                        }\n                    }\n                    if (v40[0] == 0)\n                    {\n                        if (v43 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v40[0] == 0 && v41 != v26)\n                    {\n                        v40 = *(v41);\n                    }\n                    else if ((v29 - 48 & 255) <= 72 && v33 == 92 && v40[0] != 0 && v40[1] != 0)\n                    {\n                        return 0;\n                    }\n                }\n                if (false)\n                {\n                    return 0;\n                }\n            }\n            if (false)\n            {\n                if ((unsigned int)v14 > 0)\n                {\n                    v25 = &v41[v14 + -1];\n                }\n                else if ((unsigned int)v14 > 0 && v20 != 0)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (v4 == 0 && (unsigned int)v5 != 2 || (unsigned int)v5 != 2 && (unsigned int)v5 > 1 || v4 == 0 && v15 != 0 && v17 != 0 || v4 != 0 && v8 != 0 && (unsigned int)v5 > 1 || v15 != 0 && (unsigned int)v5 > 1 && v17 != 0)\n    {\n        v25 = &v41[v14 + -1];\n        while (true)\n        {\n            fputs_unlocked(*(v41), stdout);\n            if (v25 == v41)\n            {\n                break;\n            }\n            v28 = stdout[5];\n            if (stdout[5] < stdout[6])\n            {\n                stdout[5] = stdout[5] + 1;\n                *(v28) = 32;\n            }\n            else\n            {\n                __overflow();\n            }\n            v41 = &v41[1];\n        }\n    }\n    if ((unsigned int)v5 != 2 || (unsigned int)v5 <= 1 && v4 != 0 || v4 != 0 && v8 != 0 || v15 != 0 && v17 != 0)\n    {\n        v44 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v44) = 10;\n        }\n        else\n        {\n            __overflow();\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_403a20",
            "funcStartAddr": "0x403a20",
            "funcEndAddr": "0x403a2a",
            "decompiledFuncCode": "int sub_403a20()\n{\n}\n"
        },
        {
            "funcName": "sub_403360",
            "funcStartAddr": "0x403360",
            "funcEndAddr": "0x403500",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6081f8;\nextern uint128_t g_608200;\nextern unsigned int g_608210;\nextern int512_t g_608280;\n\nint sub_403360()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_6081f8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_608210 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_6081f8 != 0x608200)\n            {\n                v16 = sub_4041d0();\n                g_6081f8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4041d0();\n                v17 = v15;\n                g_6081f8 = v15;\n                *(v15) = g_608200;\n            }\n            memset(&v17[(long long)(int)g_608210], 0x0, (int)((unsigned int)v13 + 1 - g_608210) * 16);\n            g_608210 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4043c0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_608210 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_402130();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6324864)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_404170();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_402130();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_403aa0",
            "funcStartAddr": "0x403aa0",
            "funcEndAddr": "0x403b0c",
            "decompiledFuncCode": "extern uint128_t g_608380;\nextern uint128_t g_608390;\nextern uint128_t g_6083a0;\nextern unsigned long long g_6083b0;\n\nint sub_403aa0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_608380;\n    *((uint128_t *)&v1) = g_608390;\n    *((uint128_t *)&v2) = g_6083a0;\n    v4 = g_6083b0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_403360();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_401ee0",
            "funcStartAddr": "0x401ee0",
            "funcEndAddr": "0x401ee8",
            "decompiledFuncCode": "extern char g_608258;\n\nint sub_401ee0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_608258 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403bb0",
            "funcStartAddr": "0x403bb0",
            "funcEndAddr": "0x403bc6",
            "decompiledFuncCode": "int sub_403bb0()\n{\n}\n"
        },
        {
            "funcName": "sub_4043ec",
            "funcStartAddr": "0x4043ec",
            "funcEndAddr": "0x4043f1",
            "decompiledFuncCode": "int sub_4043ec()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4041c0",
            "funcStartAddr": "0x4041c0",
            "funcEndAddr": "0x4041c2",
            "decompiledFuncCode": "int sub_4041c0()\n{\n}\n"
        },
        {
            "funcName": "sub_403b90",
            "funcStartAddr": "0x403b90",
            "funcEndAddr": "0x403ba1",
            "decompiledFuncCode": "int sub_403b90()\n{\n}\n"
        },
        {
            "funcName": "sub_402030",
            "funcStartAddr": "0x402030",
            "funcEndAddr": "0x40210f",
            "decompiledFuncCode": "extern int512_t g_40568e;\nextern int512_t g_405692;\n\nint sub_402030()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1);\n    if (v1 == v2)\n    {\n        v3 = sub_404540();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40568e : 4216473);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_405692 : 4216469);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[4] == 56 && (v3[2] & 223) == 70 && (v3[1] & 223) == 84 && v1 == v2 && v3[5] == 0 && (v3[0] & 223) == 85 || (v3[1] & 223) == 66 && v4 == 71 && v1 == v2 && v3[3] == 56 && v3[2] == 49 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_404030",
            "funcStartAddr": "0x404030",
            "funcEndAddr": "0x4040e8",
            "decompiledFuncCode": "int sub_404030()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_403bd0();\n    }\n}\n"
        },
        {
            "funcName": "sub_404c58",
            "funcStartAddr": "0x404c58",
            "funcEndAddr": "0x404c78",
            "decompiledFuncCode": "extern unsigned long long g_607e30;\n\nint sub_404c58()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_607e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404c40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404c58",
            "decompiledFuncCode": "extern int512_t g_6081a8;\n\nint sub_404c40()\n{\n}\n"
        },
        {
            "funcName": "sub_4040f0",
            "funcStartAddr": "0x4040f0",
            "funcEndAddr": "0x404164",
            "decompiledFuncCode": "extern unsigned int g_406432;\nextern unsigned int g_40645d;\nextern unsigned int g_406690;\n\nint sub_4040f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406432));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40645d));\n    dcgettext(0x0, 0x406690);\n}\n"
        },
        {
            "funcName": "sub_404b30",
            "funcStartAddr": "0x404b30",
            "funcEndAddr": "0x404b6b",
            "decompiledFuncCode": "int sub_404b30()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_404b70();\n    }\n}\n"
        },
        {
            "funcName": "sub_401aa0",
            "funcStartAddr": "0x401aa0",
            "funcEndAddr": "0x401add",
            "decompiledFuncCode": "int sub_401aa0()\n{\n    unsigned long v1;  // rdi\n\n    switch (v1 - 65 & 255)\n    {\n    case 0: case 32:\n        return 10;\n    case 1: case 33:\n        return 11;\n    case 2: case 34:\n        return 12;\n    case 3: case 35:\n        return 13;\n    case 4: case 36:\n        return 14;\n    case 5: case 37:\n        return 15;\n    default:\n        return (unsigned long long)v1 - 48;\n    }\n}\n"
        },
        {
            "funcName": "sub_403b70",
            "funcStartAddr": "0x403b70",
            "funcEndAddr": "0x403b82",
            "decompiledFuncCode": "int sub_403b70()\n{\n}\n"
        },
        {
            "funcName": "sub_404170",
            "funcStartAddr": "0x404170",
            "funcEndAddr": "0x40418a",
            "decompiledFuncCode": "int sub_404170()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4043c0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_404190",
            "funcStartAddr": "0x404190",
            "funcEndAddr": "0x4041b1",
            "decompiledFuncCode": "int sub_404190()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4043c0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_401ed0",
            "funcStartAddr": "0x401ed0",
            "funcEndAddr": "0x401ed8",
            "decompiledFuncCode": "extern unsigned long long g_608260;\n\nint sub_401ed0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_608260 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403662",
            "funcStartAddr": "0x403662",
            "funcEndAddr": "0x40368b",
            "decompiledFuncCode": "int sub_403662()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_401ef0",
            "funcStartAddr": "0x401ef0",
            "funcEndAddr": "0x401f8e",
            "decompiledFuncCode": "extern unsigned int g_405633;\nextern unsigned int g_6081b8;\nextern char g_608258;\nextern unsigned long long g_608260;\n\nint sub_401ef0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_404480();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_608258 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x405633);\n            if (g_608260 != 0)\n            {\n                sub_403a00();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_608258 != 0)\n    {\n        v3 = sub_404480();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_608258 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6081b8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_402130",
            "funcStartAddr": "0x402130",
            "funcEndAddr": "0x403268",
            "decompiledFuncCode": "int sub_402130()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long|unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int|char v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_402030();\n            v27 = (unsigned long long)(unsigned int)sub_402030();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v77 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v77 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v77 = (unsigned int)v39 == 2;\n                            v77 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v87 = v77;\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                            if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            *((unsigned long long *)&v4) = v4 & v87;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 32:\n                        v40 = 32;\n                        v77 = (unsigned int)v39 == 2;\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_402130();\n                        }\n                    }\n                }\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v86 != 0 && v13 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_404400();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v77 == 0) && (v77 == 0 || v63 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && (v76 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && ((v17 & (unsigned int)v39 == 2) != 0 || (v81 == 2 & v17) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_402130();\n            }\n            if (v17 == 0 && (v17 & (unsigned int)v39 == 2) == 0 && v4 != 0 || v17 == 0 && (v17 & (unsigned int)v39 == 2) == 0 && v4 == 0 && v5 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0 || v77 != 0 && v46 == 0)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v18 != 0 && v6 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && (v76 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && ((v17 & (unsigned int)v39 == 2) != 0 || (v81 == 2 & v17) != 0))\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_403760",
            "funcStartAddr": "0x403760",
            "funcEndAddr": "0x40376a",
            "decompiledFuncCode": "int sub_403760()\n{\n}\n"
        },
        {
            "funcName": "sub_404540",
            "funcStartAddr": "0x404540",
            "funcEndAddr": "0x404a94",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_406431;\nextern char g_6083b8[2];\n\nint sub_404540()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rdx\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n\n    v9 = g_6083b8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_406431 : (unsigned long long)nl_langinfo(0xe));\n    if (g_6083b8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_406431;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v11 != 0) && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 != 35 && (unsigned int)v59 != 32)\n                        {\n                            ungetc(v59, v10);\n                            v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v27 > 1)\n                            {\n                                v28 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v28 = &v4;\n                                    v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v31 = &v5;\n                                v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v31 = &v6;\n                                    v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v32;\n                                tmp_56 = (unsigned int)v33 % 0x10000;\n                                v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v35 + 2;\n                                    v36 = malloc(v35 + 3);\n                                    v38 = v1;\n                                    v39 = v2;\n                                }\n                                else\n                                {\n                                    v37 = v35 + v0 + 3;\n                                    v0 = v35 + v0 + 2;\n                                    v36 = realloc(NULL, v37);\n                                    v39 = v2;\n                                    v38 = v1;\n                                }\n                                if (v36 != 0)\n                                {\n                                    tmp_1 = -2 - v38;\n                                    v40 = v38 + 1;\n                                    v41 = v0 - v39;\n                                    v42 = tmp_1 + v0 - v39 + v36;\n                                    if ((unsigned int)v40 >= 8)\n                                    {\n                                        *((long long *)v42) = *((long long *)&v3);\n                                        *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                        v43 = v42 + 8 & -8;\n                                        v42 -= v42 + 8 & -8;\n                                        v44 = &(&v3)[-1 * v42];\n                                        v45 = (unsigned int)(v40 + v42) & -8;\n                                        if (v45 >= 8)\n                                        {\n                                            v42 = 0;\n                                            do\n                                            {\n                                                v47 = v42;\n                                                v42 = (unsigned int)v42 + 8;\n                                                *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                            }\n                                            while ((unsigned int)v42 < (v45 & -8));\n                                        }\n                                    }\n                                    else if ((v40 & 4) != 0)\n                                    {\n                                        *((int *)v42) = *((int *)&v3);\n                                        *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                    }\n                                    else if ((unsigned int)v40 != 0)\n                                    {\n                                        *((char *)v42) = v3;\n                                        if ((v40 & 2) != 0)\n                                        {\n                                            *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                        }\n                                    }\n                                    v61 = v39 + 1;\n                                    v48 = v36 + v41 - 1;\n                                    if ((unsigned int)v42 >= 8)\n                                    {\n                                        *((long long *)v48) = *((long long *)&v5);\n                                        v42 = v61;\n                                        *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                        v51 = v48 - (v48 + 8 & -8);\n                                        v53 = (unsigned int)(v42 + v51) & -8;\n                                        if (v53 >= 8)\n                                        {\n                                            v56 = 0;\n                                            do\n                                            {\n                                                v57 = v56;\n                                                v56 = (unsigned int)v56 + 8;\n                                                *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                            }\n                                            while ((unsigned int)v56 < (v53 & -8));\n                                        }\n                                    }\n                                    else if (((char)v42 & 4) != 0)\n                                    {\n                                        *((int *)v48) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v42 != 0)\n                                    {\n                                        *((char *)v48) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v36;\n                                    v58 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_406431;\n                                    v10 = (tmp_10 == 0? &g_406431 : tmp_10);\n                                    free(NULL);\n                                    sub_404ab0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v36 != 0 && v27 > 1 && (unsigned int)v59 != 35 && (unsigned int)v59 != 32)\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if ((unsigned int)v59 == 35)\n                        {\n                            do\n                            {\n                                v60 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v60[1];\n                                    v60 = (unsigned int)*(v60);\n                                    v61 = 1;\n                                }\n                                else\n                                {\n                                    v60 = __uflow(v10);\n                                    v61 = (char)((unsigned int)v60 != -1);\n                                }\n                            }\n                            while (v61 != 0 && v60 != 10);\n                        }\n                        if (v60 == -1 && (unsigned int)v59 == 35 || (unsigned int)v59 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v59 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v27 <= 1 && (unsigned int)v59 != 35 && (unsigned int)v59 != 32)\n                        {\n                            v10 = (tmp_10 == 0? &g_406431 : tmp_10);\n                            sub_404ab0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v36 != 0 || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v36 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v36 != 0 || (unsigned int)v59 != -1) && v60 == -1)\n                    {\n                        v9 = &g_406431;\n                    }\n                    else if (((unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v36 != 0 || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v36 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v36 != 0 || (unsigned int)v59 != -1) && v60 == -1) && v0 != 0 || v36 == 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_406431;\n            free(v17);\n        }\n        *((char *[2])&g_6083b8[0]) = v9;\n    }\n    v65 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v66 = strcmp((tmp_10 == 0? &g_406431 : tmp_10), v9);\n            if (v66 != 0 && (v65 != 42 || v9[1] != 0))\n            {\n                v67 = strlen(v9);\n                v68 = &((char [2])&v9[v67])[1];\n                v69 = strlen(&((char [2])&v9[v67])[1]);\n                v9 = v68 + v69 + 1;\n                v65 = (char)*((char *)(v68 + v69 + 1));\n                if (v65 == 0)\n                {\n                    break;\n                }\n            }\n            if (v66 == 0 || v65 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_4019eb",
            "funcStartAddr": "0x4019eb",
            "funcEndAddr": "0x401a0a",
            "decompiledFuncCode": "extern unsigned long long g_608218;\n\nint sub_4019eb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_608218;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403860",
            "funcStartAddr": "0x403860",
            "funcEndAddr": "0x403872",
            "decompiledFuncCode": "int sub_403860()\n{\n}\n"
        },
        {
            "funcName": "sub_404480",
            "funcStartAddr": "0x404480",
            "funcEndAddr": "0x4044dc",
            "decompiledFuncCode": "int sub_404480()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_404ab0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_401a41",
            "funcStartAddr": "0x401a41",
            "funcEndAddr": "0x401a98",
            "decompiledFuncCode": "extern char g_608248;\nextern unsigned long long g_608250;\n\nint sub_401a41()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_608248 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_608250 >= 0)\n            {\n                break;\n            }\n            g_608250 = g_608250 + 1;\n            *((long long *)(6323776 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_608248 = 1;\n        return sub_4019eb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_401b20",
            "funcStartAddr": "0x401b20",
            "funcEndAddr": "0x401ec5",
            "decompiledFuncCode": "extern unsigned int g_405084;\nextern unsigned int g_4050e8;\nextern unsigned int g_405110;\nextern unsigned int g_405150;\nextern unsigned int g_4051b0;\nextern unsigned int g_405238;\nextern unsigned int g_405268;\nextern unsigned int g_4052a0;\nextern unsigned int g_4052e0;\nextern unsigned int g_4053c8;\nextern unsigned int g_405438;\nextern unsigned int g_405520;\nextern unsigned int g_405568;\nextern unsigned int g_405588;\nextern unsigned long long stdout;\n\nint sub_401b20()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v30[2];  // rax\n    char *v31;  // rdi\n    char *v32;  // rsi\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // cc_dep1\n    unsigned long long v35;  // cc_dep2\n    unsigned long v36;  // d\n    char *v40;  // rax\n    char *v41;  // rax\n    unsigned long long v42;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x4050e8);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405110));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x405150), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4051b0), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x405238), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x405268), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4052a0), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4052e0), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4053c8), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405438));\n        v0 = \"[\";\n        v30 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v30 = &v2;\n            v31 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v32 = \"echo\";\n            v33 = 5;\n            if ((v34 > v35) - 0 - (v34 < v35) == 0)\n            {\n                break;\n            }\n            while (v33 != 0)\n            {\n                v33 -= 1;\n                v34 = *(v32);\n                v35 = *(v31);\n                v31 = &v31[v36];\n                v32 = &v32[v36];\n                break;\n            }\n        }\n        if (v30[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405084));\n            v41 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405084));\n            v40 = setlocale(0x5, 0x0);\n            if (v40 != 0)\n            {\n                v42 = strncmp(v40, \"en_\", 0x3);\n            }\n            if (v42 == 0 || v40 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405568));\n            }\n        }\n        if ((v30[1] == 0 || v41 != 0) && (v30[1] == 0 || strncmp(v41, \"en_\", 0x3) != 0) && (v42 != 0 || v30[1] != 0) && (v40 != 0 || v30[1] != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405520));\n        }\n        if (v30[1] != 0 || v42 != 0 && v40 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405568));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x405588));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4035a0",
            "funcStartAddr": "0x4035a0",
            "funcEndAddr": "0x4035b3",
            "decompiledFuncCode": "extern int512_t g_608380;\n\nint sub_4035a0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_608380 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_608380 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4043c0",
            "funcStartAddr": "0x4043c0",
            "funcEndAddr": "0x4043ec",
            "decompiledFuncCode": "extern unsigned int g_40676f;\nextern unsigned int g_6081b8;\n\nint sub_4043c0()\n{\n    dcgettext(0x0, 0x40676f);\n    error(g_6081b8, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_401f90",
            "funcStartAddr": "0x401f90",
            "funcEndAddr": "0x402029",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_608268;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_401f90()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_608268 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_echo.elf"
}