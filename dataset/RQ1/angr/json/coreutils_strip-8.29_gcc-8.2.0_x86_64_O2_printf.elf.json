{
    "funcInfo": [
        {
            "funcName": "sub_404d90",
            "funcStartAddr": "0x404d90",
            "funcEndAddr": "0x404ddb",
            "decompiledFuncCode": "extern unsigned int g_40aa18;\nextern unsigned int g_40aa1f;\n\nint sub_404d90()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rdx\n\n    if ((unsigned int)v1 <= 65535)\n    {\n        __fprintf_chk(v3, 0x1, 0x40aa18, v1);\n        return -1;\n    }\n    __fprintf_chk(v3, 0x1, 0x40aa1f, v1);\n    return -1;\n}\n"
        },
        {
            "funcName": "sub_405920",
            "funcStartAddr": "0x405920",
            "funcEndAddr": "0x40594c",
            "decompiledFuncCode": "extern unsigned int g_40ae4f;\nextern unsigned int g_60d1f8;\n\nint sub_405920()\n{\n    dcgettext(0x0, 0x40ae4f, 0x5);\n    error(g_60d1f8, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_4059bb",
            "funcStartAddr": "0x4059bb",
            "funcEndAddr": "0x4059bd",
            "decompiledFuncCode": "int sub_4059bb()\n{\n}\n"
        },
        {
            "funcName": "sub_4032d0",
            "funcStartAddr": "0x4032d0",
            "funcEndAddr": "0x404408",
            "decompiledFuncCode": "int sub_4032d0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rbp\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r8\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // r11\n    unsigned long long|unsigned long v41;  // rbp\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    char v44;  // al\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rcx\n    unsigned long long|unsigned short|unsigned long v47;  // rax\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rdx\n    unsigned long long v50;  // rbx\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbp\n    unsigned long long v53;  // r14\n    char *v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // r13\n    unsigned long long v58;  // rcx\n    char v59;  // al\n    char v60;  // al\n    unsigned int v61;  // eax\n    char v62;  // al\n    unsigned int v64;  // eax\n    char v65;  // al\n    unsigned long v66;  // rdx\n    unsigned long long v67;  // rax\n    char v68;  // al\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rbx\n    unsigned long long|unsigned int|char v71;  // rsi\n    unsigned long long|char v72;  // r13\n    unsigned long long v73;  // r14\n    unsigned long long v74;  // r12\n    unsigned int v75;  // r13d\n    unsigned long long v76;  // r11\n    char v77;  // dl\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // dl\n    unsigned long long v81;  // rax\n    unsigned long long v82;  // rax\n    unsigned long long v83;  // rdx\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // rax\n\n    v29 = v28;\n    v73 = v71;\n    v72 = v30;\n    v7 = v71;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v71 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v70 = 1;\n                v72 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v78 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v71 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v70 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4031d0();\n            v27 = (unsigned long long)(unsigned int)sub_4031d0();\n        }\n        v70 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v34 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v71 > v70)\n                    {\n                        *((unsigned long long *)(v28 + v70)) = v34;\n                    }\n                    v70 += 1;\n                    v34 = (char)*((char *)(v26 + v70));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        v5 = v76;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v76 = v4;\n    while (true)\n    {\n        v39 = v76;\n        v74 = 0;\n        v40 = v72;\n        while (true)\n        {\n            v72 = (char)(v39 != v74);\n            if (v39 == -1)\n            {\n                v72 = (char)(*((char *)(v7 + v74)) != 0);\n            }\n            if (v72 != 0)\n            {\n                v38 = v7 + v74;\n                v5 = (unsigned int)v40 != 2 & v4;\n                if (((unsigned int)v40 != 2 & v4) != 0)\n                {\n                    v35 = v8;\n                    if (v8 != 0)\n                    {\n                        v36 = v74 + v35;\n                        if (v39 == -1 && v35 > 1)\n                        {\n                            v11 = v40;\n                            v10 = v33;\n                            v9 = v38;\n                            v39 = strlen(v7);\n                        }\n                        if (v36 <= v39)\n                        {\n                            v12 = v40;\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v38;\n                            v37 = memcmp(v38, v13, v8);\n                            v38 = v9;\n                            v33 = (char)v10;\n                            v39 = v11;\n                            v40 = v12;\n                            if (v37 == 0 && v17 == 0)\n                            {\n                                v41 = (char)*((char *)v38);\n                                switch (*((char *)v38))\n                                {\n                                case 0:\n                                    v71 = (char)((unsigned int)v40 == 2);\n                                    v72 = (unsigned int)(0 ^ 1);\n                                    v72 = (char)(0 ^ 1) & (unsigned int)v40 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0)\n                                    {\n                                        if (v71 > v70)\n                                        {\n                                            *((char *)(v28 + v70)) = 39;\n                                        }\n                                        if (v71 > v70 + 1)\n                                        {\n                                            *((char *)(v28 + v70 + 1)) = 36;\n                                        }\n                                        if (v71 > v70 + 2)\n                                        {\n                                            *((char *)(v28 + v70 + 2)) = 39;\n                                        }\n                                        v48 = v70 + 3;\n                                        v70 += 4;\n                                        v33 = rax<8>;\n                                        v72 = 0;\n                                        v41 = 48;\n                                    }\n                                    else\n                                    {\n                                        v48 = v70;\n                                        v72 = 0;\n                                        v70 = v48 + 1;\n                                        v72 = (unsigned int)v72;\n                                        v41 = 48;\n                                        v72 = 0;\n                                        v41 = 48;\n                                        if (1 < v39)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v71 > v70)\n                                                {\n                                                    *((char *)(v28 + v70)) = 48;\n                                                }\n                                                if (v71 > v48 + 2)\n                                                {\n                                                    *((char *)(v28 + v48 + 2)) = 48;\n                                                }\n                                                v70 = v48 + 3;\n                                                v41 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v71 > v70 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) == 0 || v71 > v70 + 3))\n                                    {\n                                        *((char *)(v28 + v48)) = 92;\n                                        v33 = v72;\n                                    }\n                                case 7:\n                                    v41 = 97;\n                                    v72 = 0;\n                                case 8:\n                                    v71 = 0;\n                                    v72 = 0;\n                                    v41 = 98;\n                                case 13:\n                                    v41 = 13;\n                                    v46 = 114;\n                                    v71 = (unsigned int)v40 == 2;\n                                case 32:\n                                    v42 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v71 = 0;\n                                case 35: case 126:\n                                    v43 = v5;\n                                    v72 = v5;\n                                    v71 = 0;\n                                    v5 = v43;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v42 = v5;\n                                case 92:\n                                    v45 = v4;\n                                    v41 = 92;\n                                    v46 = 92;\n                                    v71 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v74 = 1;\n                                        v47 = 0;\n                                        v72 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v36 > v39 || v37 != 0)\n                    {\n                        v41 = (char)*((char *)v38);\n                        switch (*((char *)v38))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v40 == 2;\n                            }\n                        case 7:\n                            v41 = 97;\n                            break;\n                        case 8:\n                            v41 = 98;\n                        case 9:\n                            v41 = 116;\n                        case 10:\n                            v41 = 110;\n                            v71 = 0;\n                            v72 = 0;\n                        case 11:\n                            v41 = 118;\n                            break;\n                            if (v17 != 0)\n                            {\n                                v81 = 0;\n                            }\n                        case 12:\n                            v41 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v42 = 0;\n                            v41 = 32;\n                            v72 = v5;\n                            v5 = v42;\n                            v72 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v43 = 0;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v42 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v41 = (char)*((char *)v38);\n                    switch (*((char *)v38))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v74 += 1;\n                            v5 = 0;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            v41 = 0;\n                            break;\n                        }\n                    case 7:\n                        v41 = 7;\n                        v46 = 97;\n                        v71 = (unsigned int)v40 == 2;\n                    case 8:\n                        v41 = 8;\n                        v46 = 98;\n                        v71 = (unsigned int)v40 == 2;\n                    case 9:\n                        v41 = 9;\n                        v46 = 116;\n                    case 10:\n                        v41 = 10;\n                        v46 = 110;\n                        v71 = (unsigned int)v40 == 2;\n                        v5 = v17 & (unsigned int)v40 == 2;\n                        if ((v17 & (unsigned int)v40 == 2) == 0)\n                        {\n                            v41 = v46;\n                            v72 = 0;\n                            v72 = 0;\n                            break;\n                        }\n                    case 11:\n                        v41 = 11;\n                        v46 = 118;\n                        v71 = (unsigned int)v40 == 2;\n                    case 12:\n                        v41 = 12;\n                        v46 = 102;\n                        v71 = (unsigned int)v40 == 2;\n                    case 13:\n                        v41 = 13;\n                        v46 = 114;\n                    case 32:\n                        v41 = 32;\n                        v71 = (char)((unsigned int)v40 == 2);\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        v72 = 0;\n                    case 35: case 126:\n                        v71 = (unsigned int)v40 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        break;\n                        v72 = ((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1;\n                        v72 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) | v17;\n                        if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) != 0)\n                        {\n                            v72 = 0;\n                            v66 = (unsigned int)((unsigned long long)v25[v41 % 32] >> ((char)v41 & 31)) & 1;\n                            v71 = (unsigned int)v40 == 2;\n                        }\n                        if (v17 == 0)\n                        {\n                            v71 = (unsigned int)v40 == 2;\n                            v74 += 1;\n                            v47 = (v72 ^ 1) & (unsigned int)v33;\n                            if (v47 != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 39;\n                                }\n                                v70 += 2;\n                                v33 = 0;\n                            }\n                            v67 = (unsigned int)v33 ^ 1;\n                            v68 = (char)((unsigned int)v33 ^ 1) & v71;\n                            if (((char)((unsigned int)v33 ^ 1) & v71) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v70 + 1 < v73)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v69 = v70 + 2;\n                                if (v70 + 2 < v73)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                            v74 += 1;\n                        }\n                    case 39:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            if (v71 != 0)\n                            {\n                                v49 = 0;\n                            }\n                            if (v71 == 0 || v14 != 0)\n                            {\n                                if (v71 > v70)\n                                {\n                                    *((char *)(v28 + v70)) = 39;\n                                }\n                                if (v71 > v70 + 1)\n                                {\n                                    *((char *)(v28 + v70 + 1)) = 92;\n                                }\n                                if (v71 > v70 + 2)\n                                {\n                                    v49 = v71;\n                                    *((char *)(v28 + v70 + 2)) = 39;\n                                    v73 = v14;\n                                }\n                                else\n                                {\n                                    v49 = v71;\n                                    v73 = v14;\n                                }\n                            }\n                            v18 = v72;\n                            v70 += 3;\n                            v72 = 0;\n                            v33 = 0;\n                            v14 = v73;\n                            v41 = 39;\n                            v73 = v49;\n                        }\n                        else\n                        {\n                            v18 = v72;\n                            v71 = 0;\n                            v41 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v40 != 2)\n                        {\n                            v41 = 63;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            break;\n                            v71 = v7;\n                            v41 = (char)*((char *)(v71 + 2));\n                            v71 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v71 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                            break;\n                            if (v73 > v70)\n                            {\n                                *((char *)(v28 + v70)) = 63;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v28 + v70 + 1)) = 34;\n                            }\n                            if (v73 > v70 + 2)\n                            {\n                                *((char *)(v28 + v70 + 2)) = 34;\n                            }\n                            if (v73 > v70 + 3)\n                            {\n                                *((char *)(v28 + v70 + 3)) = 63;\n                            }\n                            v70 += 4;\n                            v71 = 0;\n                            v72 = 0;\n                            v74 = 2;\n                            v72 = v72;\n                            v72 = 0;\n                        }\n                        else\n                        {\n                            v72 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            v74 += 1;\n                            v47 = v33;\n                            v72 = 0;\n                            v41 = 92;\n                        }\n                    case 123: case 125:\n                        v44 = v39 != 1;\n                        if (v39 == -1)\n                        {\n                            v44 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v71 = (unsigned int)v40 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v75 = v40;\n                v76 = v39;\n                v77 = v75 == 2;\n                if (v70 == 0 && (v75 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v70 = (unsigned int)sub_4032d0();\n                }\n                if ((v75 == 2 & v17) == 0 || v70 != 0)\n                {\n                    v78 = (unsigned int)v17 ^ 1;\n                    v79 = v77 & (char)((unsigned int)v17 ^ 1);\n                    v80 = v77 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v79 == 0)\n                    {\n                        v80 = v78;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v78 = v73 == 0 & v14 != 0;\n                            if ((v73 == 0 & v14 != 0) == 0)\n                            {\n                                v80 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v70 = (unsigned int)sub_4032d0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v72 == 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0)\n            {\n                v82 = v13;\n                if (v13 != 0 && v80 != 0)\n                {\n                    v83 = (char)*((char *)v82);\n                    if (*((char *)v82) != 0)\n                    {\n                        v84 = v82 - v70;\n                        do\n                        {\n                            if (v73 > v70)\n                            {\n                                *((unsigned long long *)(v29 + v70)) = v83;\n                            }\n                            v70 += 1;\n                            v83 = (char)*((char *)(v84 + v70));\n                        }\n                        while ((char)v83 != 0);\n                    }\n                }\n                if (v73 > v70)\n                {\n                    *((char *)(v29 + v70)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v40;\n                v10 = v39;\n                v9 = v33;\n                v47 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v41 * 2));\n                tmp_38 = v47 & 0x4000;\n                v47 &= 0x4000;\n                v72 = (tmp_38 & 65535) != 0;\n                v71 = (tmp_38 & 65535) == 0 & v4;\n                if (v71 != 0)\n                {\n                    v71 = v4;\n                    v72 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v39 == -1)\n                {\n                    v11 = v40;\n                    v10 = v33;\n                    v9 = v38;\n                    v39 = strlen(v7);\n                }\n                v21 = v70;\n                v22 = v38;\n                v50 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v41;\n                v11 = v29;\n                v12 = v73;\n                v9 = v39;\n                v10 = v40;\n                do\n                {\n                    v51 = v74 + v50;\n                    v52 = v7 + v74 + v50;\n                    v47 = sub_405b50();\n                    v53 = v47;\n                    if (v47 != -2 && v47 != 0 && v47 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v47 != 1)\n                        {\n                            v54 = v7 + v71 + 1;\n                            v71 = v7 + v53 + v71;\n                            while (true)\n                            {\n                                v55 = (unsigned int)*(v54) - 91;\n                                if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                                {\n                                    v54 = &v54[1];\n                                    if (v71 == v54)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                            {\n                                v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v50 += v53;\n                                v47 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v50 += v53;\n                        v47 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v47 == -1)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v72 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = v4;\n                    }\n                    if (v47 == -2)\n                    {\n                        v39 = v9;\n                        v71 = v51;\n                        v47 = v50;\n                        v28 = v50;\n                        v33 = (char)v19;\n                        v41 = v20;\n                        v70 = v21;\n                        v29 = v11;\n                        v73 = v12;\n                        v40 = (unsigned int)v10;\n                        if (v71 < v9 && *((char *)v52) != 0)\n                        {\n                            do\n                            {\n                                v47 += 1;\n                            }\n                            while (v47 < v9 && *((char *)(v22 + v47)) != 0);\n                            v28 = v47;\n                        }\n                        v71 = v4;\n                        v72 = 0;\n                    }\n                    if (v47 == 0 || v47 != -2 && v47 != -1 && (unsigned int)v47 != 0)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v71 = (unsigned int)v72 ^ 1;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = (char)((unsigned int)v72 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v47 == -2 || v47 == 0 || v47 == -1 || (unsigned int)v47 != 0)\n                {\n                    v9 = v72;\n                    v71 = 0;\n                    v57 = v17;\n                    v58 = v28 + v74;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v43;\n                v72 = 0;\n                v81 = v71;\n                *((unsigned long long *)&v4) = v4 & v81;\n            }\n            if (v15 != 1 || v71 != 0)\n            {\n                v9 = v72;\n                v71 = 0;\n                v57 = v17;\n                v58 = v28 + v74;\n                v28 = v5;\n                while (true)\n                {\n                    if (v71 != 0)\n                    {\n                        v59 = (unsigned int)v40 == 2;\n                        if (v57 == 0)\n                        {\n                            v71 = (unsigned int)v33 ^ 1;\n                            v60 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v71 = v70 + 2;\n                                if (v73 > v70 + 2)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = v47;\n                            }\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                v61 = v41;\n                                v62 = (char)v41 % 64;\n                                *((unsigned long long *)(v29 + v70 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v47 = v70 + 2;\n                            if (v73 > v70 + 2)\n                            {\n                                v64 = v41;\n                                v65 = (char)v41 % 8;\n                                v47 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v70 + 2)) = v47;\n                            }\n                            v74 += 1;\n                            v70 += 3;\n                            v41 = ((unsigned int)v41 & 7) + 48;\n                            if (v74 < v58)\n                            {\n                                v71 = v71;\n                            }\n                            else\n                            {\n                                v72 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v59;\n                        }\n                    }\n                    else\n                    {\n                        v47 = (v71 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                        }\n                        v74 += 1;\n                        if (v74 >= v58)\n                        {\n                            v72 = (char)v9;\n                        }\n                        else if (v47 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 39;\n                            }\n                            v47 = v70 + 1;\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v29 + v70 + 1)) = 39;\n                            }\n                            v70 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v74 < v58 || v71 == 0) && (v71 == 0 || v57 == 0) && (v74 < v58 || v71 != 0))\n                    {\n                        if (v73 > v70)\n                        {\n                            *((unsigned long long *)(v29 + v70)) = v41;\n                        }\n                        v41 = (char)*((char *)(v7 + v74));\n                        v70 += 1;\n                    }\n                }\n            }\n            if ((v17 == 0 || v70 >= v73) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) == 0 || v70 >= v73) && (v17 == 0 || v15 != 1 || v71 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) == 0 || v15 != 1 || v71 != 0))\n            {\n                if (v70 < v73)\n                {\n                    *((unsigned long long *)(v29 + v70)) = v41;\n                }\n                v70 += 1;\n                v6 = (v72 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v72 == 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0 || v72 == 0 && v6 != 0 && v18 != 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && v70 == 0 && (v75 == 2 & v17) != 0)\n            {\n                v85 = v70;\n                return v85;\n            }\n        }\n        *((char *)v29) = 39;\n        v72 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v78;\n    }\n}\n"
        },
        {
            "funcName": "sub_405cb0",
            "funcStartAddr": "0x405cb0",
            "funcEndAddr": "0x405d0c",
            "decompiledFuncCode": "int sub_405cb0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4062e0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404a12",
            "funcStartAddr": "0x404a12",
            "funcEndAddr": "0x404a8d",
            "decompiledFuncCode": "int sub_404a12()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404500();\n}\n"
        },
        {
            "funcName": "sub_4049e0",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x4049f6",
            "decompiledFuncCode": "int sub_4049e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4046a0",
            "funcStartAddr": "0x4046a0",
            "funcEndAddr": "0x4046d4",
            "decompiledFuncCode": "int sub_4046a0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4058d0();\n}\n"
        },
        {
            "funcName": "sub_40482b",
            "funcStartAddr": "0x40482b",
            "funcEndAddr": "0x4048f1",
            "decompiledFuncCode": "int sub_40482b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4032d0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4056d0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4032d0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403080",
            "funcStartAddr": "0x403080",
            "funcEndAddr": "0x403088",
            "decompiledFuncCode": "extern char g_60d2a8;\n\nint sub_403080()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60d2a8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404bc0",
            "funcStartAddr": "0x404bc0",
            "funcEndAddr": "0x404bca",
            "decompiledFuncCode": "int sub_404bc0()\n{\n}\n"
        },
        {
            "funcName": "sub_405510",
            "funcStartAddr": "0x405510",
            "funcEndAddr": "0x405530",
            "decompiledFuncCode": "int sub_405510()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_408ee8",
            "funcStartAddr": "0x408ee8",
            "funcEndAddr": "0x408f08",
            "decompiledFuncCode": "extern unsigned long long g_60ce30;\n\nint sub_408ee8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60ce30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404d00",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d0a",
            "decompiledFuncCode": "int sub_404d00()\n{\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x405589",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405530()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405130();\n}\n"
        },
        {
            "funcName": "sub_404d50",
            "funcStartAddr": "0x404d50",
            "funcEndAddr": "0x404d66",
            "decompiledFuncCode": "int sub_404d50()\n{\n}\n"
        },
        {
            "funcName": "sub_404de0",
            "funcStartAddr": "0x404de0",
            "funcEndAddr": "0x404e42",
            "decompiledFuncCode": "extern unsigned int g_40aa68;\nextern unsigned int g_40aa98;\n\nint sub_404de0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned int v3;  // rsi\n    unsigned long long v4;  // rbp\n\n    v0 = v2;\n    if (v3 != 0)\n    {\n        v4 = dcgettext(0x0, v3, 0x5);\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40aa98, 0x5));\n    }\n    else\n    {\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40aa68, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_404d70",
            "funcStartAddr": "0x404d70",
            "funcEndAddr": "0x404d8b",
            "decompiledFuncCode": "int sub_404d70()\n{\n    void *v1;  // rdi\n    unsigned int v2;  // rsi\n    void *v3;  // rdx\n\n    fwrite(v1, 0x1, v2, v3);\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_406410",
            "funcStartAddr": "0x406410",
            "funcEndAddr": "0x407e29",
            "decompiledFuncCode": "int sub_406410() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404a90",
            "funcStartAddr": "0x404a90",
            "funcEndAddr": "0x404af9",
            "decompiledFuncCode": "int sub_404a90()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404500();\n}\n"
        },
        {
            "funcName": "sub_405590",
            "funcStartAddr": "0x405590",
            "funcEndAddr": "0x405648",
            "decompiledFuncCode": "int sub_405590()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405130();\n    }\n}\n"
        },
        {
            "funcName": "sub_4062e0",
            "funcStartAddr": "0x4062e0",
            "funcEndAddr": "0x406358",
            "decompiledFuncCode": "int sub_4062e0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_406360() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405ac0",
            "funcStartAddr": "0x405ac0",
            "funcEndAddr": "0x405b4f",
            "decompiledFuncCode": "int sub_405ac0()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xa8]\n    unsigned long v5;  // [bp-0xa0]\n    unsigned long v6;  // [bp-0x98]\n    unsigned long v7;  // [bp-0x90]\n    void v8;  // [bp-0x88]\n    void v9;  // [bp-0x78]\n    void v10;  // [bp-0x68]\n    void v11;  // [bp-0x58]\n    void v12;  // [bp-0x48]\n    void v13;  // [bp-0x38]\n    void v14;  // [bp-0x28]\n    void v15;  // [bp-0x18]\n    unsigned long v17;  // rdx\n    unsigned long v18;  // rcx\n    unsigned long v19;  // r8\n    unsigned long v20;  // r9\n    char v21;  // al\n    void v22;  // xmm0\n    void v23;  // xmm1\n    void v24;  // xmm2\n    void v25;  // xmm3\n    void v26;  // xmm4\n    void v27;  // xmm5\n    void v28;  // xmm6\n    void v29;  // xmm7\n\n    v4 = v17;\n    v5 = v18;\n    v6 = v19;\n    v7 = v20;\n    if (v21 != 0)\n    {\n        v8 = v22;\n        v9 = v23;\n        v10 = v24;\n        v11 = v25;\n        v12 = v26;\n        v13 = v27;\n        v14 = v28;\n        v15 = v29;\n    }\n    v0 = 16;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_405a60();\n}\n"
        },
        {
            "funcName": "sub_404c40",
            "funcStartAddr": "0x404c40",
            "funcEndAddr": "0x404cac",
            "decompiledFuncCode": "extern uint128_t g_60d3c0;\nextern uint128_t g_60d3d0;\nextern uint128_t g_60d3e0;\nextern unsigned long long g_60d3f0;\n\nint sub_404c40()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60d3c0;\n    *((uint128_t *)&v1) = g_60d3d0;\n    *((uint128_t *)&v2) = g_60d3e0;\n    v4 = g_60d3f0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_404500();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404910",
            "funcStartAddr": "0x404910",
            "funcEndAddr": "0x4049a5",
            "decompiledFuncCode": "extern struct_0 *g_60d238;\nextern unsigned long long g_60d240;\nextern unsigned long long g_60d248;\nextern unsigned int g_60d250;\nextern unsigned long long g_60d2c0;\n\nint sub_404910()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60d250;\n    if (g_60d250 > 1)\n    {\n        v2 = &g_60d238[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60d238[(unsigned long long)(g_60d250 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60d238->field_8 != 6345408)\n    {\n        v1 = free(g_60d238->field_8);\n        g_60d240 = 0x100;\n        g_60d248 = &g_60d2c0;\n    }\n    if (g_60d238 != 6345280)\n    {\n        v1 = free(g_60d238);\n        g_60d238 = &g_60d240;\n    }\n    g_60d250 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x4054d9",
            "decompiledFuncCode": "extern unsigned int g_40aac9;\nextern unsigned int g_40aad5;\nextern unsigned int g_40aadc;\nextern unsigned int g_40aae0;\nextern unsigned int g_40aaf0;\nextern unsigned int g_40ab07;\nextern unsigned int g_40ab68;\nextern unsigned int g_40ac38;\nextern unsigned int g_40ac58;\nextern unsigned int g_40ac80;\nextern unsigned int g_40aca8;\nextern unsigned int g_40acd8;\nextern unsigned int g_40ae20;\n\nint sub_405130()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x40aac9, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x40aad5, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x40ae20, dcgettext(0x0, 0x40aadc, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ab68, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40aae0, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40aaf0, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40ab07, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x40ac38, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x40ac58, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x40ac80, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x40aca8, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x40acd8, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_404e57",
            "funcStartAddr": "0x404e57",
            "funcEndAddr": "0x404e65",
            "decompiledFuncCode": "int sub_404e57()\n{\n    unsigned long long v0;  // [bp+0x8]\n    unsigned long long v1;  // rbx\n\n    v1 = v0;\n    return -1;\n}\n"
        },
        {
            "funcName": "sub_4056f0",
            "funcStartAddr": "0x4056f0",
            "funcEndAddr": "0x405711",
            "decompiledFuncCode": "int sub_4056f0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405920(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404e65",
            "funcStartAddr": "0x404e65",
            "funcEndAddr": "0x405037",
            "decompiledFuncCode": "extern unsigned int g_40aa26;\nextern unsigned int g_40aa2c;\nextern unsigned long long g_60d3f8;\nextern unsigned int g_60d400;\nextern unsigned int g_60d404;\n\nint sub_404e65()\n{\n    char *v0;  // [bp-0x6e]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long long v2;  // [bp-0x60]\n    unsigned long v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x50]\n    unsigned long long v6;  // [bp-0x28]\n    unsigned long v7;  // [bp-0x20]\n    unsigned long long v8;  // [bp-0x18]\n    unsigned long long v9;  // [bp-0x10]\n    unsigned long long v10;  // [bp-0x8]\n    unsigned long long v12;  // r14\n    unsigned long long v13;  // r13\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // r13\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // rsi\n    unsigned long long v18;  // r12\n    unsigned long long v20;  // rbx\n    char *v21;  // rdi\n    unsigned long long|unsigned int|char v23;  // rdx\n    char *v24;  // rsi\n    unsigned long long v25;  // rcx\n    unsigned long long v26;  // cc_dep1\n    unsigned long long v27;  // cc_dep2\n    unsigned long v28;  // d\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rsi\n    unsigned long long v31;  // rdi\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rsi\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rsi\n    unsigned long long v36;  // rdi\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rdx\n    unsigned long long v39;  // rdi\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // rdi\n    unsigned long long v45;  // rsi\n    unsigned long long v46;  // rbx\n    unsigned long long v47;  // r12\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r14\n    unsigned long long v50;  // rbx\n    unsigned long long v51;  // r12\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // r14\n\n    v10 = v12;\n    v9 = v13;\n    v15 = v14;\n    v8 = v16;\n    v18 = v17;\n    v7 = stack_base + 0;\n    v6 = v20;\n    v23 = g_60d400;\n    if (g_60d404 == 0)\n    {\n        v24 = (unsigned long long)(unsigned int)sub_405d70();\n        while (v25 != 0)\n        {\n            v25 -= 1;\n            v26 = *(v24);\n            v27 = *(v21);\n            v21 = &v21[v28];\n            v24 = &v24[v28];\n            break;\n        }\n        v23 = 0;\n        v29 = (v26 > v27) - 0 - (v26 < v27);\n        v23 = (v26 > v27) - 0 - (v26 < v27) == 0;\n        g_60d400 = rdx<4>;\n        if ((v26 > v27) - (v26 < v27) != 0)\n        {\n            g_60d3f8 = iconv_open((unsigned int)v24, 0x40aa26);\n            if (g_60d3f8 == -1)\n            {\n                g_60d3f8 = iconv_open(0x40aa2c, 0x40aa26);\n            }\n            v23 = g_60d400;\n        }\n        g_60d404 = 1;\n    }\n    if (v23 == 0)\n    {\n        if (g_60d3f8 == -1)\n        {\n            v30 = \"iconv function not usable\";\n            v31 = (char)(char)v0;\n            v32 = r13<8>();\n        }\n        else if ((char)v0 <= 127 || (unsigned int)v33 >= 0)\n        {\n            v1 = stack_base + -110;\n            v2 = v33;\n            v3 = stack_base + -72;\n            v4 = 25;\n            v37 = iconv(g_60d3f8, (unsigned int)&v1, (unsigned int)&v2, (unsigned int)&v3, (unsigned int)&v4);\n            if (v2 == 0 && v37 != -1)\n            {\n                v40 = iconv(g_60d3f8, 0x0, 0x0, (unsigned int)&v3, (unsigned int)&v4);\n                if (v40 != -1)\n                {\n                    v44 = stack_base + -72;\n                    v45 = v3 - (stack_base + -72);\n                    v32 = r12<8>();\n                }\n            }\n            if (v40 == -1 || v37 == -1 || v2 != 0)\n            {\n                v41 = &v3;\n                v42 = (char)(char)v0;\n                v43 = 0;\n                v46 = v6;\n                v47 = v8;\n                v48 = v9;\n                v49 = v10;\n                return &v3();\n            }\n        }\n    }\n    if (g_60d3f8 != -1 || v23 != 0)\n    {\n        if ((char)v0 <= 127)\n        {\n            v0 = v21;\n            v33 = 1;\n        }\n        else\n        {\n            v33 = (unsigned int)sub_405080();\n            if ((unsigned int)v33 < 0)\n            {\n                v34 = g_60d400;\n                v35 = \"character out of range\";\n                v36 = (char)(char)v0;\n                v32 = r13<8>();\n            }\n        }\n    }\n    if (v23 != 0 && ((char)v0 <= 127 || (unsigned int)v33 >= 0))\n    {\n        v38 = v25;\n        v39 = stack_base + -110;\n        v32 = r12<8>();\n    }\n    if (g_60d3f8 == -1 || v23 != 0 || (unsigned int)v33 < 0 && (char)v0 > 127 || v2 == 0 && v40 != -1 && v37 != -1)\n    {\n        v50 = v6;\n        v51 = v8;\n        v52 = v9;\n        v53 = v10;\n        return v32;\n    }\n}\n"
        },
        {
            "funcName": "sub_405730",
            "funcStartAddr": "0x405730",
            "funcEndAddr": "0x405760",
            "decompiledFuncCode": "int sub_405730()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_405920(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4059c0",
            "funcStartAddr": "0x4059c0",
            "funcEndAddr": "0x405a54",
            "decompiledFuncCode": "int sub_4059c0()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned long v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp-0xa0]\n    unsigned long v7;  // [bp-0x98]\n    unsigned long v8;  // [bp-0x90]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    void v16;  // [bp-0x18]\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned long v20;  // rcx\n    unsigned long v21;  // r8\n    unsigned long v22;  // r9\n    char v23;  // al\n    void v24;  // xmm0\n    void v25;  // xmm1\n    void v26;  // xmm2\n    void v27;  // xmm3\n    void v28;  // xmm4\n    void v29;  // xmm5\n    void v30;  // xmm6\n    void v31;  // xmm7\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    if (v23 != 0)\n    {\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n    }\n    v0 = 8;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_405960();\n}\n"
        },
        {
            "funcName": "sub_406400",
            "funcStartAddr": "0x406400",
            "funcEndAddr": "0x406404",
            "decompiledFuncCode": "int sub_406400()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = *(v1) | 32;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4025e8",
            "funcStartAddr": "0x4025e8",
            "funcEndAddr": "0x402624",
            "decompiledFuncCode": "int sub_4025e8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404cb0",
            "funcStartAddr": "0x404cb0",
            "funcEndAddr": "0x404cb9",
            "decompiledFuncCode": "int sub_404cb0()\n{\n}\n"
        },
        {
            "funcName": "sub_404ba0",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404bb1",
            "decompiledFuncCode": "int sub_404ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_404500",
            "funcStartAddr": "0x404500",
            "funcEndAddr": "0x4046a0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60d238;\nextern uint128_t g_60d240;\nextern unsigned int g_60d250;\nextern int512_t g_60d2c0;\n\nint sub_404500()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60d238;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60d250 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60d238 != 6345280)\n            {\n                v16 = sub_405730();\n                g_60d238 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_405730();\n                v17 = v15;\n                g_60d238 = v15;\n                *(v15) = g_60d240;\n            }\n            memset(&v17[(long long)(int)g_60d250], 0x0, (int)((unsigned int)v13 + 1 - g_60d250) * 16);\n            g_60d250 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_405920(); /* do not return */\n        }\n    }\n    if (g_60d250 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4032d0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6345408)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4056d0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4032d0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_4031d0",
            "funcStartAddr": "0x4031d0",
            "funcEndAddr": "0x4032af",
            "decompiledFuncCode": "extern int512_t g_409cce;\nextern int512_t g_409cd2;\n\nint sub_4031d0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_405d70();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_409cce : 4234457);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_409cd2 : 4234453);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405c90",
            "funcStartAddr": "0x405c90",
            "funcEndAddr": "0x405ca2",
            "decompiledFuncCode": "int sub_405c90()\n{\n}\n"
        },
        {
            "funcName": "sub_403130",
            "funcStartAddr": "0x403130",
            "funcEndAddr": "0x4031c9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60d2b8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_403130()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60d2b8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x4017a0",
            "funcEndAddr": "0x4024c8",
            "decompiledFuncCode": "int main() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408150",
            "funcStartAddr": "0x408150",
            "funcEndAddr": "0x408e06",
            "decompiledFuncCode": "int sub_408150() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405d70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x4062c4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40ab22;\nextern char g_60d408[2];\n\nint sub_405d70()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long long v27;  // rax\n    unsigned int *v28;  // rcx\n    unsigned int v29;  // eax\n    unsigned long v30;  // rax\n    unsigned int *v31;  // rdx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rdx\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdi\n    unsigned long long v42;  // rsi\n    unsigned long long v43;  // r9\n    unsigned long long v44;  // r10\n    unsigned int v45;  // ecx\n    unsigned long long v47;  // r8\n    void *v48;  // rcx\n    unsigned long long v51;  // rcx\n    unsigned int v53;  // edx\n    unsigned long long v56;  // rcx\n    unsigned long long v57;  // rsi\n    char *v58;  // rax\n    unsigned long v59;  // rdi\n    char *v60;  // rax\n    unsigned long long v61;  // rdx\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n\n    v9 = g_60d408;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40ab22 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60d408 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40ab22;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v58 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v58[1];\n                            v59 = *(v58);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1)\n                        {\n                            if ((unsigned int)v59 != 32 && (unsigned int)v59 != 35)\n                            {\n                                ungetc(v59, v10);\n                                v27 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v27 > 1)\n                                {\n                                    v28 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v28 = &v4;\n                                        v29 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v30 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v31 = &v5;\n                                    v32 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v28 + 2) : v28) + -1 * ((v30 + v30 <= v30? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v31 = &v6;\n                                        v33 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v32;\n                                    tmp_56 = (unsigned int)v33 % 0x10000;\n                                    v34 = (unsigned int)(((unsigned int)v33 & 32896) == 0? (unsigned int)(v33 >> 16) : (unsigned int)v33);\n                                    v35 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * ((v34 + v34 <= v34? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v31)[2] : v31) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v35 + 2;\n                                        v36 = malloc(v35 + 3);\n                                        v38 = v1;\n                                        v39 = v2;\n                                    }\n                                    else\n                                    {\n                                        v37 = v35 + v0 + 3;\n                                        v0 = v35 + v0 + 2;\n                                        v36 = realloc(NULL, v37);\n                                        v39 = v2;\n                                        v38 = v1;\n                                    }\n                                    if (v36 != 0)\n                                    {\n                                        tmp_1 = -2 - v38;\n                                        v40 = v38 + 1;\n                                        v41 = v0 - v39;\n                                        v42 = tmp_1 + v0 - v39 + v36;\n                                        if ((unsigned int)v40 >= 8)\n                                        {\n                                            *((long long *)v42) = *((long long *)&v3);\n                                            *((long long *)(v42 + v40 - 8)) = *((long long *)&(&v3)[v40 + -8]);\n                                            v43 = v42 + 8 & -8;\n                                            v42 -= v42 + 8 & -8;\n                                            v44 = &(&v3)[-1 * v42];\n                                            v45 = (unsigned int)(v40 + v42) & -8;\n                                            if (v45 >= 8)\n                                            {\n                                                v42 = 0;\n                                                do\n                                                {\n                                                    v47 = v42;\n                                                    v42 = (unsigned int)v42 + 8;\n                                                    *((long long *)(v43 + v47)) = *((long long *)(v44 + v47));\n                                                }\n                                                while ((unsigned int)v42 < (v45 & -8));\n                                            }\n                                        }\n                                        else if ((v40 & 4) != 0)\n                                        {\n                                            *((int *)v42) = *((int *)&v3);\n                                            *((int *)(v42 + v40 - 4)) = *((int *)&(&v3)[v40 + -4]);\n                                        }\n                                        else if ((unsigned int)v40 != 0)\n                                        {\n                                            *((char *)v42) = v3;\n                                            if ((v40 & 2) != 0)\n                                            {\n                                                *((short *)(v42 + v40 - 2)) = *((short *)&(&v3)[v40 + -2]);\n                                            }\n                                        }\n                                        v61 = v39 + 1;\n                                        v48 = v36 + v41 - 1;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v48) = *((long long *)&v5);\n                                            v42 = v61;\n                                            *((long long *)&((char *)v48)[v42 + -8]) = *((long long *)&(&v5)[v42 + -8]);\n                                            v51 = v48 - (v48 + 8 & -8);\n                                            v53 = (unsigned int)(v42 + v51) & -8;\n                                            if (v53 >= 8)\n                                            {\n                                                v56 = 0;\n                                                do\n                                                {\n                                                    v57 = v56;\n                                                    v56 = (unsigned int)v56 + 8;\n                                                    *((long long *)((v48 + 8 & -8) + v57)) = *((long long *)&(&v5)[v57 + -1 * v51]);\n                                                }\n                                                while ((unsigned int)v56 < (v53 & -8));\n                                            }\n                                        }\n                                        else if (((char)v42 & 4) != 0)\n                                        {\n                                            *((int *)v48) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v48)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v48) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v48)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v36;\n                                        v58 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40ab22;\n                                        v10 = (tmp_10 == 0? &g_40ab22 : tmp_10);\n                                        free(NULL);\n                                        sub_4062e0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v59 == 35)\n                            {\n                                do\n                                {\n                                    v60 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v60[1];\n                                        v60 = (unsigned int)*(v60);\n                                        v61 = 1;\n                                    }\n                                    else\n                                    {\n                                        v60 = __uflow(v10);\n                                        v61 = (char)((unsigned int)v60 != -1);\n                                    }\n                                }\n                                while (v61 != 0 && v60 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0)\n                        {\n                            v59 = __uflow(v10);\n                        }\n                        if ((unsigned int)v59 == 35 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1 || (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && v36 != 0) && (unsigned int)v59 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40ab22 : tmp_10);\n                            sub_4062e0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1 || (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1)\n                    {\n                        v9 = &g_40ab22;\n                    }\n                    else if (((unsigned int)(v59 - 9) > 1 && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v0 != 0 || (unsigned int)(v59 - 9) > 1 && v27 > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v0 == 0) && v36 == 0 || ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v59 == -1 || (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (unsigned int)v59 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v27 <= 1 || (unsigned int)v59 == 35 && (unsigned int)(v59 - 9) > 1 && (unsigned int)v59 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v59 != -1) && v60 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40ab22;\n            free(v17);\n        }\n        *((char *[2])&g_60d408[0]) = v9;\n    }\n    v65 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v66 = strcmp((tmp_10 == 0? &g_40ab22 : tmp_10), v9);\n            if (v66 != 0 && (v65 != 42 || v9[1] != 0))\n            {\n                v67 = strlen(v9);\n                v68 = &((char [2])&v9[v67])[1];\n                v69 = strlen(&((char [2])&v9[v67])[1]);\n                v9 = v68 + v69 + 1;\n                v65 = (char)*((char *)(v68 + v69 + 1));\n                if (v65 == 0)\n                {\n                    break;\n                }\n            }\n            if (v66 == 0 || v65 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_408ed0",
            "funcStartAddr": "0x408ed0",
            "funcEndAddr": "0x408ee8",
            "decompiledFuncCode": "extern int512_t g_60d1e8;\n\nint sub_408ed0()\n{\n}\n"
        },
        {
            "funcName": "sub_404e23",
            "funcStartAddr": "0x404e23",
            "funcEndAddr": "0x404e31",
            "decompiledFuncCode": "int sub_404e23()\n{\n    unsigned long long v0;  // [bp+0x8]\n    unsigned long long v1;  // rbx\n\n    v1 = v0;\n    return -1;\n}\n"
        },
        {
            "funcName": "sub_40594c",
            "funcStartAddr": "0x40594c",
            "funcEndAddr": "0x405951",
            "decompiledFuncCode": "int sub_40594c()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4056d0",
            "funcStartAddr": "0x4056d0",
            "funcEndAddr": "0x4056ea",
            "decompiledFuncCode": "int sub_4056d0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_405920(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_404ce0",
            "funcStartAddr": "0x404ce0",
            "funcEndAddr": "0x404cf3",
            "decompiledFuncCode": "int sub_404ce0()\n{\n}\n"
        },
        {
            "funcName": "sub_404d30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404d41",
            "decompiledFuncCode": "int sub_404d30()\n{\n}\n"
        },
        {
            "funcName": "sub_40253b",
            "funcStartAddr": "0x40253b",
            "funcEndAddr": "0x40255a",
            "decompiledFuncCode": "extern unsigned long long g_60d258;\n\nint sub_40253b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_60d258;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405d10",
            "funcStartAddr": "0x405d10",
            "funcEndAddr": "0x405d66",
            "decompiledFuncCode": "int sub_405d10()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4049d0",
            "funcStartAddr": "0x4049d0",
            "funcEndAddr": "0x4049da",
            "decompiledFuncCode": "int sub_4049d0()\n{\n}\n"
        },
        {
            "funcName": "sub_404802",
            "funcStartAddr": "0x404802",
            "funcEndAddr": "0x40482b",
            "decompiledFuncCode": "int sub_404802()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_404b00",
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x404b0c",
            "decompiledFuncCode": "int sub_404b00()\n{\n}\n"
        },
        {
            "funcName": "sub_405080",
            "funcStartAddr": "0x405080",
            "funcEndAddr": "0x40511e",
            "decompiledFuncCode": "int sub_405080()\n{\n    void tmp_37;  // tmp #37\n    void tmp_21;  // tmp #21\n    unsigned long v1;  // rsi\n    unsigned int v2;  // edx\n    unsigned int v3;  // edx\n    unsigned int v4;  // edx\n    char v5[4];  // rdi\n    unsigned long long v6;  // rax\n    char v7;  // rsi\n    char v8;  // sil\n\n    if ((unsigned int)v1 > 127)\n    {\n        if ((unsigned int)v1 > 2047)\n        {\n            if ((unsigned int)v1 <= 65535)\n            {\n                if ((unsigned int)(v1 - 0xd800) > 2047 && v3 > 2)\n                {\n                    v6 = 3;\n                }\n            }\n            else\n            {\n                if ((unsigned int)v1 <= 1114111 && v4 > 3)\n                {\n                    tmp_37 = (unsigned int)v1 & 63;\n                    v1 = (unsigned int)v1 % 64 | 0x10000;\n                    v5[3] = (unsigned int)tmp_37 | -128;\n                    v6 = 4;\n                }\n            }\n            if (((unsigned int)v1 <= 65535 || (unsigned int)v1 > 1114111) && ((unsigned int)(v1 - 0xd800) <= 2047 || (unsigned int)v1 > 65535))\n            {\n                return -18446744069414584321;\n            }\n            if (((unsigned int)v1 <= 1114111 || (unsigned int)v1 <= 65535) && ((unsigned int)v1 <= 65535 || v4 > 3) && (v3 > 2 || (unsigned int)v1 > 65535) && ((unsigned int)v1 > 65535 || (unsigned int)(v1 - 0xd800) > 2047))\n            {\n                tmp_37 = (unsigned int)v1 & 63;\n                v1 = (unsigned int)v1 % 64 | 0x800;\n                v5[2] = (unsigned int)tmp_37 | -128;\n            }\n        }\n        else if (v2 > 1)\n        {\n            v6 = 2;\n        }\n        if (((unsigned int)v1 <= 1114111 || (unsigned int)v1 <= 65535 || (unsigned int)v1 <= 2047) && (v2 > 1 || (unsigned int)v1 > 2047) && ((unsigned int)v1 <= 65535 || (unsigned int)v1 <= 2047 || v4 > 3) && ((unsigned int)v1 <= 2047 || v3 > 2 || (unsigned int)v1 > 65535) && ((unsigned int)v1 <= 2047 || (unsigned int)v1 > 65535 || (unsigned int)(v1 - 0xd800) > 2047))\n        {\n            tmp_21 = v1;\n            v7 = v1 % 64;\n            v8 = v1 | 192;\n            v5[0] = v8;\n            v5[1] = (unsigned int)tmp_21 & 63 | -128;\n            return v6;\n        }\n    }\n    if ((unsigned int)v1 <= 127 || v2 <= 1 && (unsigned int)v1 <= 2047 || v4 <= 3 && (unsigned int)v1 <= 1114111 && (unsigned int)v1 > 65535 && (unsigned int)v1 > 2047 || v3 <= 2 && (unsigned int)v1 <= 65535 && (unsigned int)(v1 - 0xd800) > 2047 && (unsigned int)v1 > 2047)\n    {\n        return -18446744069414584322;\n    }\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x40587a",
            "decompiledFuncCode": "int sub_405830() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404790",
            "funcStartAddr": "0x404790",
            "funcEndAddr": "0x404802",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_404790()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60d3c0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4032d0();\n}\n"
        },
        {
            "funcName": "sub_4058d0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x4058f8",
            "decompiledFuncCode": "int sub_4058d0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4056d0();\n}\n"
        },
        {
            "funcName": "sub_406360",
            "funcStartAddr": "0x406360",
            "funcEndAddr": "0x40639b",
            "decompiledFuncCode": "int sub_406360()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4063a0();\n    }\n}\n"
        },
        {
            "funcName": "sub_405bd0",
            "funcStartAddr": "0x405bd0",
            "funcEndAddr": "0x405c89",
            "decompiledFuncCode": "int sub_405bd0()\n{\n    unsigned long long v0;  // [bp-0x800]\n    void *v2;  // rax\n    unsigned long long v3;  // rbx\n    void *v4;  // rbp\n    void *v5;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    v0 = 2000;\n    v2 = sub_406410();\n    v3 = v0;\n    if (false)\n    {\n        *(__errno_location()) = 75;\n    }\n    if (stack_base + 0 != 0)\n    {\n        v4 = v2;\n        if (!(fwrite(v2, 0x1, 0x7d0, v5) >= 2000))\n        {\n            v3 = -18446744069414584321;\n            if (v4 != stack_base + -2040)\n            {\n                free(v4);\n                *(__errno_location()) = *(v7);\n            }\n        }\n        else if (v4 != stack_base + -2040)\n        {\n            free(v4);\n        }\n    }\n    else\n    {\n        v3 = -18446744069414584321;\n        sub_406400();\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404760",
            "funcStartAddr": "0x404760",
            "funcEndAddr": "0x40478b",
            "decompiledFuncCode": "extern char g_60d3c0;\n\nint sub_404760()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60d3c0 : v2);\n    *((int *)(tmp_11? &g_60d3c0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60d3c0;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_60d3c0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405900",
            "funcStartAddr": "0x405900",
            "funcEndAddr": "0x405913",
            "decompiledFuncCode": "int sub_405900()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_402c40",
            "funcStartAddr": "0x402c40",
            "funcEndAddr": "0x402fe5",
            "decompiledFuncCode": "extern unsigned int g_408ff8;\nextern unsigned int g_409020;\nextern unsigned int g_409058;\nextern unsigned int g_4090a8;\nextern unsigned int g_4090d8;\nextern unsigned int g_409110;\nextern unsigned int g_409178;\nextern unsigned int g_409260;\nextern unsigned int g_409360;\nextern unsigned int g_409520;\nextern unsigned int g_409608;\nextern unsigned int g_409650;\nextern unsigned int g_409670;\nextern unsigned int g_409804;\nextern unsigned long long g_60d2b8;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_402c40()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long *v30;  // rax\n    char *v31;  // rdi\n    char *v32;  // rsi\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // cc_dep1\n    unsigned long long v35;  // cc_dep2\n    unsigned long v36;  // d\n    char *v40;  // rax\n    char *v41;  // rax\n    unsigned long long v42;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x408ff8, 0x5), g_60d2b8);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409020, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409058, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4090a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4090d8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409110, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409178, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409260, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x409360, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409520, 0x5));\n        v0 = \"[\";\n        v30 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v30 = &v2;\n            v31 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v32 = \"printf\";\n            v33 = 7;\n            if ((v34 > v35) - 0 - (v34 < v35) == 0)\n            {\n                break;\n            }\n            while (v33 != 0)\n            {\n                v33 -= 1;\n                v34 = *(v32);\n                v35 = *(v31);\n                v31 = &v31[v36];\n                v32 = &v32[v36];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409804, 0x5));\n            v41 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409804, 0x5));\n            v40 = setlocale(0x5, 0x0);\n            if (v40 != 0)\n            {\n                v42 = strncmp(v40, \"en_\", 0x3);\n            }\n            if (v42 == 0 || v40 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409650, 0x5));\n            }\n        }\n        if ((v3 == 0 || strncmp(v41, \"en_\", 0x3) != 0) && (v3 == 0 || v41 != 0) && (v42 != 0 || v3 != 0) && (v40 != 0 || v3 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409608, 0x5));\n        }\n        if (v3 != 0 || v42 != 0 && v40 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409650, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409670, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_404b90",
            "funcStartAddr": "0x404b90",
            "funcEndAddr": "0x404b9d",
            "decompiledFuncCode": "int sub_404b90()\n{\n}\n"
        },
        {
            "funcName": "sub_404b1f",
            "funcStartAddr": "0x404b1f",
            "funcEndAddr": "0x404b90",
            "decompiledFuncCode": "extern uint128_t g_60d3c0;\nextern uint128_t g_60d3d0;\nextern uint128_t g_60d3e0;\nextern unsigned long long g_60d3f0;\n\nint sub_404b1f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60d3f0;\n    *((uint128_t *)&v0) = g_60d3c0;\n    *((uint128_t *)&v1) = g_60d3d0;\n    *((uint128_t *)&v2) = g_60d3e0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_404500();\n}\n"
        },
        {
            "funcName": "sub_404700",
            "funcStartAddr": "0x404700",
            "funcEndAddr": "0x404733",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_404700()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60d3c0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60d3c0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_4057a0",
            "funcStartAddr": "0x4057a0",
            "funcEndAddr": "0x405818",
            "decompiledFuncCode": "int sub_4057a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403070",
            "funcStartAddr": "0x403070",
            "funcEndAddr": "0x403078",
            "decompiledFuncCode": "extern unsigned long long g_60d2b0;\n\nint sub_403070()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60d2b0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4046e0",
            "funcStartAddr": "0x4046e0",
            "funcEndAddr": "0x4046ef",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_4046e0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60d3c0 : v1));\n}\n"
        },
        {
            "funcName": "sub_405b50",
            "funcStartAddr": "0x405b50",
            "funcEndAddr": "0x405bbf",
            "decompiledFuncCode": "extern unsigned long long g_40ab22;\n\nint sub_405b50()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40ab22;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_405d10() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404900",
            "funcStartAddr": "0x404900",
            "funcEndAddr": "0x40490a",
            "decompiledFuncCode": "int sub_404900()\n{\n}\n"
        },
        {
            "funcName": "sub_4063a0",
            "funcStartAddr": "0x4063a0",
            "funcEndAddr": "0x4063f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4063a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_407f30",
            "funcStartAddr": "0x407f30",
            "funcEndAddr": "0x4080ec",
            "decompiledFuncCode": "int sub_407f30() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402bb0",
            "funcStartAddr": "0x402bb0",
            "funcEndAddr": "0x402c37",
            "decompiledFuncCode": "extern unsigned int g_408fa8;\nextern char g_60d298;\n\nint sub_402bb0()\n{\n    char v0;  // [bp-0x20]\n    char v2[3];  // rdi\n    unsigned long long v3;  // rbp\n\n    if ((v2[0] == 34 || v2[0] == 39) && v2[1] != 0 && v2[2] != 0 && g_60d298 == 0)\n    {\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x408fa8, 0x5));\n    }\n    if (v2[1] == 0 || v2[0] != 34 && v2[0] != 39)\n    {\n        *(__errno_location()) = 0;\n        v3 = __strtol_internal(v2, (unsigned int)&v0, 0x0, 0x0);\n        sub_402b00();\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404740",
            "funcStartAddr": "0x404740",
            "funcEndAddr": "0x404753",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_404740()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60d3c0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60d3c0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_402591",
            "funcStartAddr": "0x402591",
            "funcEndAddr": "0x4025e8",
            "decompiledFuncCode": "extern char g_60d288;\nextern unsigned long long g_60d290;\n\nint sub_402591()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60d288 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60d290 >= 0)\n            {\n                break;\n            }\n            g_60d290 = g_60d290 + 1;\n            *((long long *)(6344256 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60d288 = 1;\n        return sub_40253b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404a00",
            "funcStartAddr": "0x404a00",
            "funcEndAddr": "0x404a12",
            "decompiledFuncCode": "int sub_404a00()\n{\n}\n"
        },
        {
            "funcName": "sub_404bd0",
            "funcStartAddr": "0x404bd0",
            "funcEndAddr": "0x404c43",
            "decompiledFuncCode": "int sub_404bd0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404500();\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x405722",
            "decompiledFuncCode": "int sub_405720()\n{\n}\n"
        },
        {
            "funcName": "sub_4046f0",
            "funcStartAddr": "0x4046f0",
            "funcEndAddr": "0x4046ff",
            "decompiledFuncCode": "extern int512_t g_60d3c0;\n\nint sub_4046f0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60d3c0 : v1)) = v2;\n    return &g_60d3c0;\n}\n"
        },
        {
            "funcName": "sub_405a60",
            "funcStartAddr": "0x405a60",
            "funcEndAddr": "0x405ab4",
            "decompiledFuncCode": "extern unsigned int g_40ae60;\nextern unsigned int g_60d1f8;\n\nint sub_405a60()\n{\n    unsigned long v2;  // rax\n    unsigned int v3;  // edi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v4 = ferror(v3);\n        if (v4 == 0)\n        {\n            error(g_60d1f8, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ae60, 0x5));\n        }\n    }\n    if (v4 != 0 || (unsigned int)v2 >= 0)\n    {\n        v2 = (unsigned int)sub_405bd0();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056c4",
            "decompiledFuncCode": "extern unsigned int g_40ab23;\nextern unsigned int g_40ab4e;\nextern unsigned int g_40ad80;\n\nint sub_405650()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ab23, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40ab4e, 0x5));\n    dcgettext(0x0, 0x40ad80, 0x5);\n}\n"
        },
        {
            "funcName": "sub_4025f0",
            "funcStartAddr": "0x4025f0",
            "funcEndAddr": "0x402ac6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1];\n    char field_1;\n} struct_0;\n\nextern unsigned int g_408f28;\nextern unsigned int g_408f50;\nextern unsigned long long stdout[7];\n\nint sub_4025f0()\n{\n    unsigned int v0;  // [bp-0x2c]\n    struct_0 *v2;  // rdi\n    struct_0 *v3;  // r13\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rax\n    char v6;  // al\n    unsigned long v7;  // rsi\n    unsigned long long v9;  // r8\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    char *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rax\n    unsigned long long v18;  // rdx\n    char *v20;  // rbp\n    char *v22;  // rax\n    unsigned long long v23;  // rax\n    char *v24;  // rax\n    unsigned long long v25;  // rbp\n    char *v26;  // r12\n    char v27;  // bpl\n    char *v28;  // rax\n    char *v29;  // rax\n    char *v30;  // rax\n    char *v31;  // rax\n    char *v32;  // rax\n    char *v33;  // rax\n    char *v34;  // rax\n    char *v35;  // rax\n    char *v36;  // rax\n    unsigned long long v39;  // r8\n    unsigned long long v40;  // rcx\n    unsigned int v41;  // edx\n    unsigned long long v43;  // r9\n    unsigned long long v45;  // r9\n    unsigned long long v47;  // rax\n    char *v48;  // rdx\n\n    v3 = v2;\n    v4 = v2->field_1;\n    if (!(v2->field_1 != 120))\n    {\n        v20 = &v2[1];\n        v9 = *((long long *)(unsigned long long)__ctype_b_loc());\n        while (true)\n        {\n            v14 = *(v20);\n            v15 = *(v20);\n            if ((*((char *)(v9 + ((unsigned long long)*(v20) << 1) + 1)) & 16) != 0)\n            {\n                if ((v15 - 97 & 255) <= 5)\n                {\n                    v18 = (unsigned int)v14 - 87;\n                }\n                else\n                {\n                    v18 = (unsigned int)((unsigned long long)((unsigned int)v15 - 65) > 5? (unsigned int)(v14 - 48) : (unsigned int)(v14 - 55));\n                }\n                v13 = rcx<8> * 16 + v18;\n                v20 = &v20[1];\n                if (true)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                break;\n            }\n        }\n        if ((*((char *)(v9 + ((unsigned long long)*(v20) << 1) + 1)) & 16) == 0)\n        {\n            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x408f28, 0x5));\n        }\n        else\n        {\n            v22 = stdout[5];\n        }\n    }\n    else if (((unsigned long long)v2->field_1 - 48 & 255) <= 7)\n    {\n        v5 = 0;\n        v6 = v2->field_1 == 48;\n        v13 = 0;\n        v12 = &(struct struct_0 *)&(&v2->padding_0)[v7 & rax<8>]->field_1;\n        while (true)\n        {\n            v11 = *(v12);\n            if (((unsigned long long)*(v12) - 48 & 255) <= 7)\n            {\n                v12 = &v12[1];\n                v13 = v11 + v13 * 8 - 48;\n                if (v12 == &((struct struct_0 *)&(struct struct_0 *)&(&v2->padding_0)[v7 & rax<8>]->field_1)[1].field_1)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    else\n    {\n        if (v2->field_1 != 0)\n        {\n            v10 = strchr(\"\\\"\\\\abcefnrtv\", v2->field_1);\n            if (v10 != 0)\n            {\n                switch (v4 - 97 & 255)\n                {\n                case 0:\n                    v32 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v32) = 7;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 1:\n                    v29 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v29) = 8;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 2:\n                    exit(0x0); /* do not return */\n                case 4:\n                    v34 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v34) = 27;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 5:\n                    v30 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v30) = 12;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 13:\n                    v35 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v35) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 17:\n                    v33 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v33) = 13;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 19:\n                    v31 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v31) = 9;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                case 21:\n                    v36 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v36) = 11;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                default:\n                    v28 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *((unsigned long long *)&v28) = v4;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                }\n                if ((v4 - 97 & 255) <= 21)\n                {\n                    v23 = v4 - 97;\n                }\n            }\n            else if ((v2->field_1 & 223) == 85)\n            {\n                v25 = 0;\n                v26 = &v2[1];\n                v27 = v2->field_1 != 117;\n                v39 = &((struct struct_0 *)&v2[1 + 2 * rbp<8>].field_1)[1].field_1;\n                while (true)\n                {\n                    v40 = *(v26);\n                    v41 = *(v26);\n                    if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)*(v26) << 1) + 1)) & 16) == 0)\n                    {\n                        break;\n                    }\n                    v43 = v45 * 16;\n                    if ((v40 - 97 & 255) <= 5)\n                    {\n                        v26 = &v26[1];\n                        v45 = v43 + (unsigned int)v40 - 87;\n                    }\n                    else\n                    {\n                        v26 = &v26[1];\n                        v45 = (unsigned int)v43 + ((unsigned long long)v41 - 65 > 5? (unsigned int)(v40 - 48) : (unsigned int)(v40 - 55));\n                    }\n                    if ((unsigned int)(v45 - 0xd800) > 2047 && (((unsigned int)v45 & -33) == 64 || (unsigned int)v45 == 36 || (unsigned int)v45 > 159))\n                    {\n                        sub_405060();\n                        return stack_base + 0;\n                    }\n                    if ((unsigned int)(v45 - 0xd800) <= 2047 || (unsigned int)v45 <= 159 && ((unsigned int)v45 & -33) != 64 && (unsigned int)v45 != 36)\n                    {\n                        v0 = v45;\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x408f50, 0x5));\n                    }\n                }\n            }\n        }\n        if ((v2->field_1 == 0 || v10 == 0) && (v2->field_1 == 0 || (v2->field_1 & 223) != 85))\n        {\n            v24 = stdout[5];\n            if (stdout[5] < stdout[6])\n            {\n                stdout[5] = stdout[5] + 1;\n                *(v24) = 92;\n            }\n            else\n            {\n                __overflow();\n            }\n            v47 = v3->field_1;\n            if (v3->field_1 != 0)\n            {\n                v48 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *((unsigned long long *)&v48) = v47;\n                }\n                else\n                {\n                    __overflow();\n                }\n            }\n        }\n    }\n    if (((unsigned long long)v2->field_1 - 48 & 255) <= 7 || v2->field_1 == 120)\n    {\n        v22 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *((unsigned long long *)&v22) = v13;\n        }\n        else\n        {\n            __overflow();\n        }\n    }\n    if (v2->field_1 == 120 || v10 == 0 && (v2->field_1 & 223) == 85 && v2->field_1 != 0 && ((unsigned long long)v2->field_1 - 48 & 255) > 7)\n    {\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x408f28, 0x5));\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4058a0",
            "funcStartAddr": "0x4058a0",
            "funcEndAddr": "0x4058ce",
            "decompiledFuncCode": "int sub_4058a0()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_405920(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405880",
            "funcStartAddr": "0x405880",
            "funcEndAddr": "0x405897",
            "decompiledFuncCode": "int sub_405880()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4056d0();\n}\n"
        },
        {
            "funcName": "sub_404b10",
            "funcStartAddr": "0x404b10",
            "funcEndAddr": "0x404b1f",
            "decompiledFuncCode": "int sub_404b10()\n{\n}\n"
        },
        {
            "funcName": "sub_402ff0",
            "funcStartAddr": "0x402ff0",
            "funcEndAddr": "0x403054",
            "decompiledFuncCode": "extern unsigned int g_409c6d;\nextern unsigned long long g_60d2a0;\n\nint sub_402ff0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rsi\n    unsigned long v3;  // rdi\n\n    v1 = g_60d2a0;\n    if (g_60d2a0 == 0)\n    {\n        v1 = newlocale(0x1fbf, 0x409c6d, 0x0);\n        g_60d2a0 = v1;\n    }\n    if (g_60d2a0 == 0)\n    {\n        if (v2 != 0)\n        {\n            *(v2) = v3;\n            [D] PutI(904:F64x8)[t2,0] = t5\n            [D] PutI(968:I8x8)[t2,0] = 0x01\n        }\n        else\n        {\n            [D] PutI(904:F64x8)[t0,0] = t3\n            [D] PutI(968:I8x8)[t0,0] = 0x01\n        }\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d10",
            "funcStartAddr": "0x404d10",
            "funcEndAddr": "0x404d22",
            "decompiledFuncCode": "int sub_404d10()\n{\n}\n"
        },
        {
            "funcName": "sub_4049b0",
            "funcStartAddr": "0x4049b0",
            "funcEndAddr": "0x4049c1",
            "decompiledFuncCode": "int sub_4049b0()\n{\n}\n"
        },
        {
            "funcName": "sub_403090",
            "funcStartAddr": "0x403090",
            "funcEndAddr": "0x40312e",
            "decompiledFuncCode": "extern unsigned int g_409c6f;\nextern unsigned int g_60d1f8;\nextern char g_60d2a8;\nextern unsigned long long g_60d2b0;\n\nint sub_403090()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_405cb0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60d2a8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x409c6f, 0x5);\n            if (g_60d2b0 != 0)\n            {\n                sub_404ba0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60d2a8 != 0)\n    {\n        v3 = sub_405cb0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60d2a8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60d1f8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_402b00",
            "funcStartAddr": "0x402b00",
            "funcEndAddr": "0x402b9d",
            "decompiledFuncCode": "extern unsigned int g_60d29c;\n\nint sub_402b00()\n{\n    char v0;  // [bp-0x18]\n    unsigned int *v2;  // rax\n    char *v3;  // rsi\n    unsigned long v5;  // rdi\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rbx\n\n    v2 = __errno_location();\n    if (*(v2) == 0)\n    {\n        if (*(v3) != 0)\n        {\n            if (v5 != v3)\n            {\n                v7 = (unsigned int)sub_404d50();\n            }\n            else\n            {\n                v6 = (unsigned int)sub_404d50();\n            }\n            v2 = error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v3, 0x5));\n            g_60d29c = 1;\n        }\n        return v2;\n    }\n    sub_404d50();\n    g_60d29c = 1;\n    return (unsigned long long)error(0x0, *((int *)*((long long *)&v0)), \"%s\");\n}\n"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x405791",
            "decompiledFuncCode": "int sub_405770()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405920(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404cc0",
            "funcStartAddr": "0x404cc0",
            "funcEndAddr": "0x404cd7",
            "decompiledFuncCode": "int sub_404cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x4059b5",
            "decompiledFuncCode": "extern unsigned int g_40ae60;\nextern unsigned int g_60d1f8;\nextern unsigned long long stdout;\n\nint sub_405960()\n{\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v3 = ferror(stdout);\n        if (v3 == 0)\n        {\n            error(g_60d1f8, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40ae60, 0x5));\n        }\n    }\n    if (v3 != 0 || (unsigned int)v2 >= 0)\n    {\n        v2 = (unsigned int)sub_405c90();\n        return v4;\n    }\n}\n"
        },
        {
            "funcName": "sub_405060",
            "funcStartAddr": "0x405060",
            "funcEndAddr": "0x40507f",
            "decompiledFuncCode": "int sub_405060()\n{\n}\n"
        },
        {
            "funcName": "sub_405ab7",
            "funcStartAddr": "0x405ab7",
            "funcEndAddr": "0x405ab9",
            "decompiledFuncCode": "int sub_405ab7()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_printf.elf"
}