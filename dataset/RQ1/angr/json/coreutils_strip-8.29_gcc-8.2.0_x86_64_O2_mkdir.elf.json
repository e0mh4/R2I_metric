{
    "funcInfo": [
        {
            "funcName": "sub_404a50",
            "funcStartAddr": "0x404a50",
            "funcEndAddr": "0x404a62",
            "decompiledFuncCode": "int sub_404a50()\n{\n}\n"
        },
        {
            "funcName": "sub_402f10",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x402fef",
            "decompiledFuncCode": "extern int512_t g_40a7d6;\nextern int512_t g_40a7da;\n\nint sub_402f10()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_406870();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40a7d6 : 4237281);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40a7da : 4237277);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40456b",
            "funcStartAddr": "0x40456b",
            "funcEndAddr": "0x404631",
            "decompiledFuncCode": "int sub_40456b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_403010();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4055c0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_403010();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_402cf0",
            "funcStartAddr": "0x402cf0",
            "funcEndAddr": "0x402e56",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char padding_2[2];\n    unsigned int field_4;\n    unsigned int field_8;\n    unsigned int field_c;\n} struct_0;\n\nint sub_402cf0()\n{\n    struct_0 *v1;  // rcx\n    unsigned long long v2;  // r11\n    unsigned int v3;  // edi\n    unsigned int v6;  // r12d\n    char v7;  // sil\n    unsigned int v8;  // r10d\n    unsigned long long|unsigned int v9;  // rdi\n    unsigned long long v10;  // r9\n    unsigned long v11;  // r13\n    unsigned int|unsigned long v12;  // r9\n    unsigned long long v13;  // r11\n    unsigned int|unsigned long v14;  // r9d\n    unsigned int v16;  // cc_dep1\n    unsigned int v20;  // r10d\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rbx\n    unsigned int *v23;  // r8\n\n    v2 = v1->field_1;\n    v21 = v3 & 4095;\n    v22 = 0;\n    if (v1->field_1 != 0)\n    {\n        while (true)\n        {\n            v6 = v1->field_4;\n            v12 = v1->field_8;\n            if (v7 == 0)\n            {\n                v8 = -1;\n                v9 = 0;\n            }\n            else\n            {\n                v8 = v1->field_c | -3073;\n                v9 = !(v1->field_c) & 0xc00;\n            }\n            if (v2 != 2 || (v21 & 73) == 0 && v7 == 0)\n            {\n                v13 = v1->field_0;\n                v12 &= v8;\n            }\n            if (v2 == 2)\n            {\n                v13 = v1->field_0;\n                v12 = (v12 | 73) & v8;\n            }\n            else if (v2 == 3)\n            {\n                v10 = v12 & (unsigned int)v21;\n                v12 = (unsigned int)v10 | ((v10 & 73) != 0? ((v10 & 146) != 0? (unsigned int)v11 : !(0 - (unsigned int)(char)(((unsigned int)v10 & 292) < 1)) & 292) | 73 : ((v10 & 146) != 0? (unsigned int)v11 : !(0 - (unsigned int)(char)(((unsigned int)v10 & 292) < 1)) & 292));\n            }\n            if (v6 == 0)\n            {\n                v14 = v12 & !((unsigned int)rdx<8>);\n            }\n            else\n            {\n                v14 = v12 & v6;\n                if (v13 != 45)\n                {\n                    v16 = v13;\n                }\n                if (v13 == 61)\n                {\n                    v9 |= !((unsigned int)r12<8>);\n                    v8 = !((unsigned int)cc_dep1<8>);\n                }\n            }\n            if (v13 == 45 && v6 == 0 || v13 == 45 && v6 != 0)\n            {\n                v22 |= v14;\n                v21 = (unsigned int)v21 & !((unsigned int)r9<8>);\n            }\n            if (v6 == 0 && v13 != 45 || v6 != 0 && v13 != 45)\n            {\n                if (v13 == 43 && (v6 == 0 || v13 != 61) && (v13 != 61 || v6 != 0))\n                {\n                    v22 |= v14;\n                    v21 = (unsigned int)v21 | v14;\n                }\n                if ((v13 == 61 || v6 == 0) && (v13 == 61 || v6 != 0))\n                {\n                    v1 = &v1[1];\n                    v2 = v1->field_1;\n                    v20 = v8 & 4095;\n                    v22 |= v20;\n                    v21 = (unsigned int)v21 & v9 | v14;\n                    if ((char)v2 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v13 != 61 || v13 != 61)\n            {\n                v1 = &v1[1];\n                v2 = v1->field_1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v23 != 0)\n    {\n        *((unsigned long long *)&v23) = v22;\n    }\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_404980",
            "funcStartAddr": "0x404980",
            "funcEndAddr": "0x4049ec",
            "decompiledFuncCode": "extern uint128_t g_60e420;\nextern uint128_t g_60e430;\nextern uint128_t g_60e440;\nextern unsigned long long g_60e450;\n\nint sub_404980()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60e420;\n    *((uint128_t *)&v1) = g_60e430;\n    *((uint128_t *)&v2) = g_60e440;\n    v4 = g_60e450;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_404240();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_401f68",
            "funcStartAddr": "0x401f68",
            "funcEndAddr": "0x401fa4",
            "decompiledFuncCode": "int sub_401f68() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40485f",
            "funcStartAddr": "0x40485f",
            "funcEndAddr": "0x4048d0",
            "decompiledFuncCode": "extern uint128_t g_60e420;\nextern uint128_t g_60e430;\nextern uint128_t g_60e440;\nextern unsigned long long g_60e450;\n\nint sub_40485f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60e450;\n    *((uint128_t *)&v0) = g_60e420;\n    *((uint128_t *)&v1) = g_60e430;\n    *((uint128_t *)&v2) = g_60e440;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_404240();\n}\n"
        },
        {
            "funcName": "sub_401f70",
            "funcStartAddr": "0x401f70",
            "funcEndAddr": "0x401ffc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned int field_10;\n    char field_14;\n} struct_0;\n\nint sub_401f70()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v1;  // [bp-0x50]\n    unsigned long long v2;  // [bp-0x48]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long v4;  // [bp-0x30]\n    unsigned long v5;  // [bp-0x28]\n    unsigned long v6;  // [bp-0x20]\n    struct_0 *v8;  // rdx\n    struct_0 *v9;  // rbx\n    unsigned long long v11;  // rdx\n    unsigned long v12;  // rsi\n    unsigned long v13;  // rdi\n\n    v9 = v8;\n    v11 = v8->field_0;\n    if (v8->field_14 != 0 && v4 == 0)\n    {\n        v6 = v12;\n        v5 = v13;\n        v4 = v11;\n        *(__errno_location()) = 95;\n    }\n    v3 = 1;\n    v2 = -1;\n    v1 = -1;\n    v0 = v9->field_10;\n    if ((unsigned long long)(unsigned int)(sub_402610() ^ 1) == 0 && v9->field_14 != 0 && v9->field_0 != 0)\n    {\n        *(__errno_location()) = 95;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_406580",
            "funcStartAddr": "0x406580",
            "funcEndAddr": "0x406598",
            "decompiledFuncCode": "int sub_406580()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_406520();\n}\n"
        },
        {
            "funcName": "sub_402100",
            "funcStartAddr": "0x402100",
            "funcEndAddr": "0x40245d",
            "decompiledFuncCode": "extern unsigned int g_409fc9;\nextern unsigned int g_40a068;\nextern unsigned int g_40a090;\nextern unsigned int g_40a0b8;\nextern unsigned int g_40a0f8;\nextern unsigned int g_40a148;\nextern unsigned int g_40a218;\nextern unsigned int g_40a320;\nextern unsigned int g_40a350;\nextern unsigned int g_40a3b0;\nextern unsigned int g_40a3f8;\nextern unsigned int g_40a418;\nextern unsigned long long stdout;\n\nint sub_402100()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long *v28;  // rax\n    char *v29;  // rdi\n    char *v30;  // rsi\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // cc_dep1\n    unsigned long long v33;  // cc_dep2\n    unsigned long v34;  // d\n    char *v38;  // rax\n    char *v39;  // rax\n    unsigned long long v40;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x40a068, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a090, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a0b8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a0f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a148, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a218, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a320, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a350, 0x5), stdout);\n        v0 = \"[\";\n        v28 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v28 = &v2;\n            v29 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v30 = \"mkdi\";\n            v31 = 6;\n            if ((v32 > v33) - 0 - (v32 < v33) == 0)\n            {\n                break;\n            }\n            while (v31 != 0)\n            {\n                v31 -= 1;\n                v32 = *(v30);\n                v33 = *(v29);\n                v29 = &v29[v34];\n                v30 = &v30[v34];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409fc9, 0x5));\n            v39 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x409fc9, 0x5));\n            v38 = setlocale(0x5, 0x0);\n            if (v38 != 0)\n            {\n                v40 = strncmp(v38, \"en_\", 0x3);\n            }\n            if (v38 == 0 || v40 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3f8, 0x5));\n            }\n        }\n        if ((v3 == 0 || v39 != 0) && (v3 == 0 || strncmp(v39, \"en_\", 0x3) != 0) && (v38 != 0 || v3 != 0) && (v40 != 0 || v3 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3b0, 0x5));\n        }\n        if (v3 != 0 || v38 != 0 && v40 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3f8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a418, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402c90",
            "funcStartAddr": "0x402c90",
            "funcEndAddr": "0x402ce4",
            "decompiledFuncCode": "int sub_402c90()\n{\n    char v0;  // [bp-0x98]\n    unsigned int v1;  // [bp-0x80]\n    unsigned int v3;  // edi\n    unsigned long long v5;  // rax\n\n    v5 = 0;\n    if (__xstat(0x1, v3, (unsigned int)&v0) == 0)\n    {\n        v5 = sub_4055c0();\n        *((short *)v5) = 317;\n        *((int *)(v5 + 4)) = 4095;\n        *((unsigned int *)(v5 + 8)) = v1;\n        *((int *)(v5 + 12)) = 4095;\n        *((char *)(v5 + 17)) = 0;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_404ab0",
            "funcStartAddr": "0x404ab0",
            "funcEndAddr": "0x404ab7",
            "decompiledFuncCode": "int sub_404ab0()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = 0;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405850",
            "funcStartAddr": "0x405850",
            "funcEndAddr": "0x405925",
            "decompiledFuncCode": "int sub_405850()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_405f50",
            "funcStartAddr": "0x405f50",
            "funcEndAddr": "0x4064b7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_40ba88;\nextern unsigned int g_40bacc;\n\nint sub_405f50()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9\n    unsigned long long *|unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char *v58;  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_405850();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = *(v34);\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_405850();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if ((v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 > 0 && v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_405930();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40ba88, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40bacc, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40ba88, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_405930();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_404430",
            "funcStartAddr": "0x404430",
            "funcEndAddr": "0x40443f",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_404430()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60e420 : v1)) = v2;\n    return &g_60e420;\n}\n"
        },
        {
            "funcName": "sub_404a70",
            "funcStartAddr": "0x404a70",
            "funcEndAddr": "0x404a81",
            "decompiledFuncCode": "int sub_404a70()\n{\n}\n"
        },
        {
            "funcName": "sub_408f60",
            "funcStartAddr": "0x408f60",
            "funcEndAddr": "0x40911c",
            "decompiledFuncCode": "int sub_408f60() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404640",
            "funcStartAddr": "0x404640",
            "funcEndAddr": "0x40464a",
            "decompiledFuncCode": "int sub_404640()\n{\n}\n"
        },
        {
            "funcName": "sub_4048d0",
            "funcStartAddr": "0x4048d0",
            "funcEndAddr": "0x4048dd",
            "decompiledFuncCode": "int sub_4048d0()\n{\n}\n"
        },
        {
            "funcName": "sub_405790",
            "funcStartAddr": "0x405790",
            "funcEndAddr": "0x4057be",
            "decompiledFuncCode": "int sub_405790()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_405810(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404542",
            "funcStartAddr": "0x404542",
            "funcEndAddr": "0x40456b",
            "decompiledFuncCode": "int sub_404542()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_4049f0",
            "funcStartAddr": "0x4049f0",
            "funcEndAddr": "0x4049f9",
            "decompiledFuncCode": "int sub_4049f0()\n{\n}\n"
        },
        {
            "funcName": "sub_405400",
            "funcStartAddr": "0x405400",
            "funcEndAddr": "0x405420",
            "decompiledFuncCode": "int sub_405400()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_404a90",
            "funcStartAddr": "0x404a90",
            "funcEndAddr": "0x404aa6",
            "decompiledFuncCode": "int sub_404a90()\n{\n}\n"
        },
        {
            "funcName": "sub_4065a0",
            "funcStartAddr": "0x4065a0",
            "funcEndAddr": "0x4065b3",
            "decompiledFuncCode": "int sub_4065a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_406520();\n}\n"
        },
        {
            "funcName": "sub_405610",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x405612",
            "decompiledFuncCode": "int sub_405610()\n{\n}\n"
        },
        {
            "funcName": "sub_404a40",
            "funcStartAddr": "0x404a40",
            "funcEndAddr": "0x404a4a",
            "decompiledFuncCode": "int sub_404a40()\n{\n}\n"
        },
        {
            "funcName": "sub_404910",
            "funcStartAddr": "0x404910",
            "funcEndAddr": "0x404983",
            "decompiledFuncCode": "int sub_404910()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404240();\n}\n"
        },
        {
            "funcName": "sub_409f00",
            "funcStartAddr": "0x409f00",
            "funcEndAddr": "0x409f18",
            "decompiledFuncCode": "extern int512_t g_60e248;\n\nint sub_409f00()\n{\n}\n"
        },
        {
            "funcName": "sub_4055c0",
            "funcStartAddr": "0x4055c0",
            "funcEndAddr": "0x4055da",
            "decompiledFuncCode": "int sub_4055c0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_405810(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_403010",
            "funcStartAddr": "0x403010",
            "funcEndAddr": "0x404148",
            "decompiledFuncCode": "int sub_403010()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long|unsigned int v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_402f10();\n            v27 = (unsigned int)sub_402f10();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                    v40 = 32;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                    v48 = v5;\n                                    v5 = v41;\n                                    v78 = 0;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            v87 = v89;\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            *((unsigned long long *)&v4) = v4 & v87;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_403010();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_406620();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v89 == 0) && (v89 == 0 || v80 < v64) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && (v76 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && ((v81 == 2 & v17) != 0 || (v17 & (unsigned int)v39 == 2) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_403010();\n            }\n            if (v17 == 0 && (v17 & (unsigned int)v39 == 2) == 0 && v4 != 0 || v4 == 0 && v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 && v5 == 0 && (v17 & (unsigned int)v39 == 2) == 0 || (v15 != 1 || v89 != 0) && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && (v76 == 0 || (v17 & (unsigned int)v39 == 2) != 0) && ((v81 == 2 & v17) != 0 || (v17 & (unsigned int)v39 == 2) != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_4065c0",
            "funcStartAddr": "0x4065c0",
            "funcEndAddr": "0x4065d5",
            "decompiledFuncCode": "int sub_4065c0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_405f50();\n}\n"
        },
        {
            "funcName": "sub_404ac0",
            "funcStartAddr": "0x404ac0",
            "funcEndAddr": "0x404acc",
            "decompiledFuncCode": "int sub_404ac0()\n{\n    unsigned int v1[2];  // rdi\n\n    if (v1[0] != 4)\n    {\n        return 0;\n    }\n    return v1[1];\n}\n"
        },
        {
            "funcName": "sub_402468",
            "funcStartAddr": "0x402468",
            "funcEndAddr": "0x402549",
            "decompiledFuncCode": "extern unsigned long long g_60e308;\n\nint sub_402468()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xa8]\n    unsigned long v5;  // [bp-0xa0]\n    unsigned long v6;  // [bp-0x98]\n    unsigned long v7;  // [bp-0x90]\n    void v8;  // [bp-0x88]\n    void v9;  // [bp-0x78]\n    void v10;  // [bp-0x68]\n    void v11;  // [bp-0x58]\n    void v12;  // [bp-0x48]\n    void v13;  // [bp-0x38]\n    void v14;  // [bp-0x28]\n    void v15;  // [bp-0x18]\n    unsigned long long v16;  // [bp+0x0]\n    unsigned long v18;  // rdx\n    unsigned long v19;  // rcx\n    unsigned long v20;  // r8\n    unsigned long v21;  // r9\n    char v22;  // al\n    void v23;  // xmm0\n    void v24;  // xmm1\n    void v25;  // xmm2\n    void v26;  // xmm3\n    void v27;  // xmm4\n    void v28;  // xmm5\n    void v29;  // xmm6\n    void v30;  // xmm7\n    unsigned long long v31[7];  // rbx\n    char *v35;  // rax\n    unsigned long long v36;  // rbx\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    if (v22 != 0)\n    {\n        v8 = v23;\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n    }\n    fputs_unlocked(g_60e308, v31);\n    fwrite_unlocked(\": \", 0x1, 0x2, v31);\n    v0 = 16;\n    v2 = stack_base + 24;\n    v1 = 48;\n    v3 = stack_base + -184;\n    sub_4066a0();\n    v35 = v31[5];\n    if (v31[5] < v31[6])\n    {\n        v31[5] = v31[5] + 1;\n        *(v35) = 10;\n    }\n    else\n    {\n        v35 = __overflow((unsigned int)v31, 0xa);\n    }\n    v36 = v16;\n    return v35;\n}\n"
        },
        {
            "funcName": "sub_406810",
            "funcStartAddr": "0x406810",
            "funcEndAddr": "0x406866",
            "decompiledFuncCode": "int sub_406810()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4071c0",
            "funcStartAddr": "0x4071c0",
            "funcEndAddr": "0x407238",
            "decompiledFuncCode": "int sub_4071c0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_407240() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404480",
            "funcStartAddr": "0x404480",
            "funcEndAddr": "0x404493",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_404480()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60e420 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60e420 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404710",
            "funcStartAddr": "0x404710",
            "funcEndAddr": "0x40471a",
            "decompiledFuncCode": "int sub_404710()\n{\n}\n"
        },
        {
            "funcName": "sub_402060",
            "funcStartAddr": "0x402060",
            "funcEndAddr": "0x4020f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[8];\n    char field_14;\n    char padding_15[3];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_402060()\n{\n    struct_0 *v1;  // rdx\n    struct_0 *v2;  // rbp\n    unsigned int v3;  // esi\n    unsigned int *v5;  // r13\n    unsigned long long v7;  // rbx\n    unsigned long long v8;  // rax\n\n    v2 = v1;\n    if (v1->field_14 != 0)\n    {\n        *(__errno_location()) = 95;\n    }\n    if (((char)v1->field_8 & 192) == 0)\n    {\n        v7 = mkdir(v3, 0x1ff);\n    }\n    else\n    {\n        umask(v1->field_8);\n        v7 = mkdir(v3, 0x1ff);\n        umask(v1->field_8);\n        *(__errno_location()) = *(v5);\n    }\n    if ((unsigned int)v7 == 0)\n    {\n        v7 = (unsigned int)((unsigned long long)v2->field_8 >> 8) & 1;\n        if (v2->field_18 != 0)\n        {\n            sub_402010();\n        }\n    }\n    v8 = v7;\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_405930",
            "funcStartAddr": "0x405930",
            "funcEndAddr": "0x405f2e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40b9c0;\nextern unsigned int g_40b9e0;\nextern unsigned int g_40ba10;\nextern unsigned int g_40ba30;\nextern unsigned int g_40ba60;\nextern unsigned long long stderr;\n\nint sub_405930()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40b9c0, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40b9e0, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40ba60, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40ba30, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40ba10, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_4066a0",
            "funcStartAddr": "0x4066a0",
            "funcEndAddr": "0x406759",
            "decompiledFuncCode": "int sub_4066a0()\n{\n    unsigned long long v0;  // [bp-0x800]\n    void *v2;  // rax\n    unsigned long long v3;  // rbx\n    void *v4;  // rbp\n    void *v5;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    v0 = 2000;\n    v2 = sub_4072f0();\n    v3 = v0;\n    if (false)\n    {\n        *(__errno_location()) = 75;\n    }\n    if (stack_base + 0 != 0)\n    {\n        v4 = v2;\n        if (!(fwrite(v2, 0x1, 0x7d0, v5) >= 2000))\n        {\n            v3 = -18446744069414584321;\n            if (v4 != stack_base + -2040)\n            {\n                free(v4);\n                *(__errno_location()) = *(v7);\n            }\n        }\n        else if (v4 != stack_base + -2040)\n        {\n            free(v4);\n        }\n    }\n    else\n    {\n        v3 = -18446744069414584321;\n        sub_4072e0();\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401c10",
            "funcEndAddr": "0x401e78",
            "decompiledFuncCode": "extern char g_402060;\nextern unsigned int g_409fe4;\nextern unsigned int g_409ff2;\nextern unsigned int g_40a01d;\nextern unsigned int g_40a02d;\nextern unsigned int g_40a450;\nextern unsigned int g_40a4c0;\nextern unsigned int g_40bae7;\nextern unsigned int g_60e2bc;\nextern unsigned long long g_60e4a8;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x48]\n    unsigned int|char v1;  // [bp-0x40]\n    unsigned long long|unsigned int v2;  // [bp-0x3c]\n    char v3;  // [bp-0x34]\n    unsigned long long|unsigned long v4;  // [bp-0x30]\n    unsigned long long v6;  // r12\n    unsigned long long v9;  // rax\n    unsigned int v10;  // edi\n    unsigned long long v13;  // rax\n    void *v16;  // r14\n    unsigned long long v17;  // rbx\n\n    v6 = 0;\n    v0 = 0;\n    v4 = 0;\n    v2 = 511;\n    v3 = 0;\n    sub_402e70();\n    setlocale(0x6, 0x40bae7);\n    bindtextdomain(0x409fe4, 0x40a450);\n    textdomain(0x409fe4);\n    sub_409f00();\n    while (true)\n    {\n        v9 = sub_4065a0();\n        if ((unsigned int)v9 != -1)\n        {\n            if ((unsigned int)v9 != 90)\n            {\n                if (v9 > 90)\n                {\n                    if ((unsigned int)v9 == 112)\n                    {\n                        v0 = &g_402060;\n                    }\n                    if ((unsigned int)v9 == 118)\n                    {\n                        v4 = dcgettext(0x0, 0x409ff2, 0x5);\n                    }\n                    if ((unsigned int)v9 == 109)\n                    {\n                        v6 = g_60e4a8;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v9 == -131)\n                    {\n                        sub_405480();\n                        exit(0x0); /* do not return */\n                    }\n                    if ((unsigned int)v9 == -130)\n                    {\n                        sub_402100(); /* do not return */\n                    }\n                }\n            }\n        }\n        else\n        {\n            if (g_60e2bc != v10)\n            {\n                if (v0 != 0)\n                {\n                    umask(*((int *)&v1));\n                    v1 = umask(0x0);\n                    if (v6 == 0)\n                    {\n                        v2 = 511;\n                    }\n                }\n                else if (v6 != 0)\n                {\n                    v13 = umask(0x0);\n                    umask(v13);\n                    v1 = v13;\n                }\n                if (v6 != 0)\n                {\n                    v16 = (unsigned long long)(unsigned int)sub_402920();\n                    if (v16 != 0)\n                    {\n                        v2 = sub_402cf0();\n                        free(v16);\n                    }\n                    else\n                    {\n                        v17 = (unsigned int)sub_404a90();\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a02d, 0x5));\n                    }\n                }\n                if (v6 == 0 || v16 != 0)\n                {\n                    return sub_404ed0();\n                }\n            }\n            else\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a01d, 0x5));\n            }\n        }\n        if ((unsigned int)v9 == 90)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a4c0, 0x5));\n        }\n        if ((unsigned int)v9 == -1 && g_60e2bc == v10 || v9 <= 90 && (unsigned int)v9 != -1 && (unsigned int)v9 != 90 && (unsigned int)v9 != -131 && (unsigned int)v9 != -130 || (unsigned int)v9 != -1 && v9 > 90 && (unsigned int)v9 != 109 && (unsigned int)v9 != 90 && (unsigned int)v9 != 118 && (unsigned int)v9 != 112)\n        {\n            sub_402100(); /* do not return */\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_406de0",
            "funcStartAddr": "0x406de0",
            "funcEndAddr": "0x406f56",
            "decompiledFuncCode": "extern char g_0;\n\nint sub_406de0()\n{\n    unsigned long v0;  // [bp-0x50]\n    char v1;  // [bp-0x44]\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // r14\n    char v5[2];  // r13\n    unsigned long v7;  // rsi\n    unsigned long long v8;  // rax\n    char v9;  // r15b\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // rdx\n    char v13[2];  // rsi\n    unsigned long long|char [2] v14;  // rdi\n    unsigned int|unsigned long v15;  // r15d\n    char v17[2];  // r12\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // rax\n    unsigned int *v20;  // rax\n\n    v4 = v3;\n    v5 = v14;\n    v17 = v14;\n    v0 = v7;\n    *((char **)&v1) = &g_0;\n    while (true)\n    {\n        v17 = &v17[1];\n        v18 = v17[-1 + 7];\n        if ((char)v18 != 0)\n        {\n            while (true)\n            {\n                v8 = v17[0];\n                if (v17[0] != 47)\n                {\n                    v9 = v18 == 47 & v8 != 0;\n                    if (true)\n                    {\n                        break;\n                    }\n                    v10 = &g_0 - v5;\n                    if (&g_0 - v5 != 1)\n                    {\n                        *((char **)&g_0) = &g_0;\n                        if (v5[0] == 46 && v10 == 2 && v5[1] == 46)\n                        {\n                            v15 = &g_0;\n                            *((char **)&v1) = &g_0;\n                        }\n                    }\n                    else if (v5[0] != 46)\n                    {\n                        *((char **)&g_0) = &g_0;\n                    }\n                    if (&g_0 - v5 == 1 && v5[0] != 46 || &g_0 - v5 != 1 && v5[0] != 46 || &g_0 - v5 != 1 && v10 != 2 || &g_0 - v5 != 1 && v5[1] != 46)\n                    {\n                        v12 = v11;\n                        v13 = v5;\n                        v14 = v14;\n                        v10 = r14<8>();\n                        if (v10 >= 0)\n                        {\n                            v1 = v9;\n                            v15 = &g_0;\n                        }\n                        else\n                        {\n                            v15 = (unsigned int)*(__errno_location());\n                        }\n                    }\n                    if ((v5[0] != 46 || &g_0 - v5 != 1) && (unsigned int)v10 != -1)\n                    {\n                        g_0 = 47;\n                    }\n                    if ((v5[0] == 46 || (unsigned int)v10 == 0) && (&g_0 - v5 == 1 || (unsigned int)v10 == 0) && (v5[0] == 46 || (unsigned int)v10 != -1) && (&g_0 - v5 == 1 || (unsigned int)v10 != -1))\n                    {\n                        v5 = v17;\n                        v17 = &v17[1];\n                        v18 = v17[-1 + 7];\n                    }\n                    else\n                    {\n                        if (v15 != 0)\n                        {\n                            v20 = __errno_location();\n                            if (*(v20) == 2)\n                            {\n                                *((unsigned long *)&v20) = v15;\n                            }\n                        }\n                        v10 = (unsigned int)sub_404ae0();\n                    }\n                }\n            }\n            if (true)\n            {\n                v17 = &v17[1];\n                v18 = v17[-1 + 7];\n            }\n            else if ((char)v18 == 0 && (v5[0] == 46 || (unsigned int)v10 == 0))\n            {\n                v19 = v5 - v14;\n            }\n            else if ((unsigned int)v10 == -1 || (unsigned int)v10 != 0)\n            {\n                return v19;\n            }\n        }\n        v19 = v5 - v14;\n    }\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_401f11",
            "funcStartAddr": "0x401f11",
            "funcEndAddr": "0x401f68",
            "decompiledFuncCode": "extern char g_60e2e8;\nextern unsigned long long g_60e2f0;\n\nint sub_401f11()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60e2e8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60e2f0 >= 0)\n            {\n                break;\n            }\n            g_60e2f0 = g_60e2f0 + 1;\n            *((long long *)(6348352 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60e2e8 = 1;\n        return sub_401ebb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_402920",
            "funcStartAddr": "0x402920",
            "funcEndAddr": "0x402c2d",
            "decompiledFuncCode": "int sub_402920() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404d30",
            "funcStartAddr": "0x404d30",
            "funcEndAddr": "0x404e4c",
            "decompiledFuncCode": "int sub_404d30()\n{\n    char v0;  // [bp-0x1c]\n    unsigned int v1;  // [bp+0x0]\n    unsigned int v3[2];  // rdi\n    unsigned int v4[2];  // rbx\n    unsigned long long v6;  // rax\n    unsigned int v7;  // esi\n    unsigned int *v9;  // rax\n    unsigned int *v10;  // rbp\n    unsigned long long v12;  // rax\n    unsigned int|unsigned long v13;  // r12\n    unsigned long long v14;  // rax\n\n    if (v3[0] <= 4)\n    {\n        v4 = v3;\n        /* goto *((long long *)((unsigned long long)v3[0] * 8 + 4240792)); */\n        if (!(v3[1] != 0))\n        {\n            _exit(v7);\n        }\n        else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x13<64>, Conv(32->64, Load(addr=(rdi<8> + 0x4<64>), size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n        {\n            while (true)\n            {\n                if (waitpid(v3[1], (unsigned int)&v0, 0x0) < 0)\n                {\n                    v9 = __errno_location();\n                    __assert_fail(); /* do not return */\n                }\n            }\n            v12 = (unsigned int)*((int *)&v0);\n            v3[1] = -1;\n            if (((char)*((int *)&v0) & 127) == 0)\n            {\n                break;\n            }\n            raise();\n            v12 = (unsigned int)*((int *)&v0);\n            v14 = v12;\n            return v14;\n        }\n        v6 = fchdir(v3[1]);\n        if ((unsigned int)v6 == 0)\n        {\n            v4[0] = 1;\n            return v6;\n        }\n        v13 = v1;\n        v10 = __errno_location();\n        close(v4[1]);\n        v4[0] = 4;\n        v4[1] = v1;\n        v13 = v3[1];\n        v10 = __errno_location();\n        return 0;\n        *((unsigned long *)&v10) = v13;\n        return -18446744069414584321;\n    }\n    __assert_fail(); /* do not return */\n    v4 = v3;\n    /* goto *((long long *)((unsigned long long)v3[0] * 8 + 4240792)); */\n    if (!(v3[1] != 0))\n    {\n        _exit(v7);\n    }\n    else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x13<64>, Conv(32->64, Load(addr=(rdi<8> + 0x4<64>), size=4, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n    {\n        while (true)\n        {\n            if (waitpid(v3[1], (unsigned int)&v0, 0x0) < 0)\n            {\n                v9 = __errno_location();\n                __assert_fail(); /* do not return */\n            }\n        }\n        v12 = (unsigned int)*((int *)&v0);\n        v3[1] = -1;\n        if (((char)*((int *)&v0) & 127) == 0)\n        {\n            break;\n        }\n        raise();\n        v12 = (unsigned int)*((int *)&v0);\n        v14 = v12;\n        return v14;\n    }\n    v6 = fchdir(v3[1]);\n    v13 = v1;\n    v10 = __errno_location();\n    close(v4[1]);\n    v4[0] = 4;\n    v4[1] = v1;\n    if ((unsigned int)v6 == 0)\n    {\n        v4[0] = 1;\n        return v6;\n    }\n    v13 = v3[1];\n    v10 = __errno_location();\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4043e0",
            "funcStartAddr": "0x4043e0",
            "funcEndAddr": "0x404414",
            "decompiledFuncCode": "int sub_4043e0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4057c0();\n}\n"
        },
        {
            "funcName": "sub_405660",
            "funcStartAddr": "0x405660",
            "funcEndAddr": "0x405681",
            "decompiledFuncCode": "int sub_405660()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405810(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402550",
            "funcStartAddr": "0x402550",
            "funcEndAddr": "0x402558",
            "decompiledFuncCode": "extern unsigned long long g_60e300;\n\nint sub_402550()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60e300 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405480",
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x405538",
            "decompiledFuncCode": "int sub_405480()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405020();\n    }\n}\n"
        },
        {
            "funcName": "sub_404ae0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404cf3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[3];\n    unsigned int field_4;\n} struct_0;\n\nint sub_404ae0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned int v3[2];  // rcx\n    unsigned int v4;  // r13d\n    unsigned long v5;  // rsi\n    unsigned long v6;  // rdx\n    unsigned int v7;  // eax\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rax\n    unsigned int v11;  // eax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    v2 = v1;\n    if (v3 != 0)\n    {\n        v3[0] = v4;\n        v4 = __open_2(v5, (unsigned int)v6 * 0x20000 & 0x20000 | 0x10900);\n        v7 = *(__errno_location());\n        v3[1] = v7;\n        if (v9 >= 0)\n        {\n            if (((char)v6 & 2) != 0)\n            {\n                v8 = 0;\n            }\n        }\n        else\n        {\n            if (v7 != 13)\n            {\n                v8 = -18446744069414584321;\n            }\n        }\n    }\n    else\n    {\n        v9 = -18446744069414584321;\n    }\n    if (*((int *)&v1->field_0) <= 5 && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && *((int *)&v1->field_0) == 0)\n    {\n        v10 = sub_4067c0();\n        if (v10 >= 0)\n        {\n            *((int *)&v2->field_0) = 1;\n            *((unsigned long long *)&v2->field_4) = v10;\n        }\n        else\n        {\n            v11 = *(__errno_location());\n            if (v11 != 13 && v11 != 116)\n            {\n                *((int *)&v2->field_0) = 4;\n                v2->field_4 = v11;\n            }\n        }\n    }\n    if ((((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 || *((int *)&v1->field_0) > 5) && (((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 || *((int *)&v1->field_0) > 5) && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (*((int *)&v1->field_0) != 0 || *((int *)&v1->field_0) > 5) && (v7 == 13 || v3 == 0 || v9 >= 0))\n    {\n        __assert_fail(); /* do not return */\n    }\n    if (*((int *)&v1->field_0) == 0 && *((int *)&v1->field_0) <= 5 && v11 == 13 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && v10 < 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) || *((int *)&v1->field_0) == 0 && v11 == 116 && *((int *)&v1->field_0) <= 5 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && v10 < 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && v11 != 13 && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (v7 == 13 || v3 == 0 || v9 >= 0))\n    {\n        *((long long *)&v1->field_0) = -4294967293;\n    }\n    if (*((int *)&v1->field_0) == 0 && *((int *)&v1->field_0) <= 5 && v11 == 13 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && v10 < 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) || *((int *)&v1->field_0) == 0 && v11 == 116 && *((int *)&v1->field_0) <= 5 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) == 0 && v10 < 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && v11 != 13 && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) || *((int *)&v1->field_0) <= 5 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 54) == 0 && ((char)(1 << ((char)*((int *)&v1->field_0) & 63)) & 8) != 0 && (v9 < 0 || ((char)v6 & 2) == 0 || v3 == 0) && (v7 == 13 || v3 == 0 || v9 >= 0) && v1->field_4 < 0)\n    {\n        v12 = fork();\n        v1->field_4 = v12;\n        if ((unsigned int)v12 != 0)\n        {\n            if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                *((int *)&v1->field_0) = 4;\n                v1->field_4 = *(__errno_location());\n            }\n            else\n            {\n                v13 = 1;\n                v8 = -18446744069414584322;\n            }\n        }\n    }\n    if (...)\n    {\n        if (v9 >= 0)\n        {\n            v8 = fchdir(v9);\n            if ((unsigned int)v8 != 0)\n            {\n                v13 = (char)(v3 == 0);\n            }\n        }\n        else\n        {\n            v8 = chdir(v5);\n        }\n    }\n    if (...)\n    {\n        switch (*((int *)&v1->field_0))\n        {\n        case 1:\n            *((int *)&v1->field_0) = 2;\n            break;\n        case 2: case 4: case 5:\n            v13 = (char)(v3 == 0);\n            v8 = 0;\n        case 3:\n            if (v1->field_4 != 0)\n            {\n                __assert_fail(); /* do not return */\n            }\n        default:\n            __assert_fail(); /* do not return */\n        }\n    }\n    if (v9 >= 0 && v13 != 0)\n    {\n        close(v9);\n        *(__errno_location()) = v3[0];\n        return v16;\n    }\n    if (...)\n    {\n        v15 = v8;\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_406f70",
            "funcStartAddr": "0x406f70",
            "funcEndAddr": "0x407153",
            "decompiledFuncCode": "int sub_406f70()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    char v2;  // [bp-0xc8]\n    unsigned int v3;  // [bp-0xb0]\n    unsigned int v4;  // [bp-0xac]\n    unsigned int v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp+0x8]\n    unsigned long v7;  // rdi\n    unsigned int v8;  // r15d\n    unsigned int v9;  // edx\n    unsigned int v10;  // esi\n    unsigned int|unsigned long v11;  // ecx\n    unsigned long v12;  // rsi\n    unsigned int v13;  // r12d\n    unsigned long long v14;  // rbx\n    unsigned int *v15;  // rsi\n    unsigned int *v16;  // rbp\n    unsigned long v17;  // r8\n    unsigned int v18;  // rdx\n    unsigned int v19;  // r9d\n    unsigned long long v21;  // rax\n\n    v8 = v7;\n    v0 = v9;\n    if ((unsigned int)v7 >= 0)\n    {\n        v14 = __fxstat(0x1, v7);\n        if ((unsigned int)v14 == 0)\n        {\n            v11 = v3;\n            if (((unsigned short)v3 & 0xf000) != 0x4000)\n            {\n                v13 = 20;\n                v14 = -18446744069414584321;\n                *(v15) = 20;\n                v16 = __errno_location();\n            }\n            if (((unsigned short)v3 & 0xf000) == 0x4000 && (v4 != (unsigned int)v12 || v5 != (unsigned int)v17) && (v4 != (unsigned int)v12 || (unsigned int)v17 != -1) && (v5 != (unsigned int)v17 || (unsigned int)v12 != -1) && ((unsigned int)v17 != -1 || (unsigned int)v12 != -1))\n            {\n                *((unsigned long *)&v1) = v11;\n                v14 = fchown(v8, v12, v17);\n            }\n        }\n    }\n    else\n    {\n        v14 = __xstat(0x1, v10, (unsigned int)&v2);\n        if ((unsigned int)v14 == 0)\n        {\n            v11 = v3;\n            if (((unsigned short)v3 & 0xf000) != 0x4000)\n            {\n                v14 = -18446744069414584321;\n                *(__errno_location()) = 20;\n            }\n            if (((unsigned short)v3 & 0xf000) == 0x4000 && (v4 != (unsigned int)v12 || v5 != (unsigned int)v17) && (v4 != (unsigned int)v12 || (unsigned int)v17 != -1) && (v5 != (unsigned int)v17 || (unsigned int)v12 != -1) && ((unsigned int)v17 != -1 || (unsigned int)v12 != -1))\n            {\n                *((unsigned long *)&v1) = v11;\n                if (v0 != -1)\n                {\n                    v14 = lchown();\n                }\n                else\n                {\n                    v14 = chown();\n                }\n            }\n        }\n    }\n    if (((unsigned int)v7 < 0 && ((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v14 == 0 && (v4 != (unsigned int)v12 || v5 != (unsigned int)v17) && (v4 != (unsigned int)v12 || (unsigned int)v17 != -1) && (v5 != (unsigned int)v17 || (unsigned int)v12 != -1) && ((unsigned int)v17 != -1 || (unsigned int)v12 != -1) && (unsigned int)v14 == 0 || ((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v14 == 0 && (unsigned int)v7 >= 0 && (v4 != (unsigned int)v12 || v5 != (unsigned int)v17) && (v4 != (unsigned int)v12 || (unsigned int)v17 != -1) && (v5 != (unsigned int)v17 || (unsigned int)v12 != -1) && ((unsigned int)v17 != -1 || (unsigned int)v12 != -1) && (unsigned int)v14 == 0) && (v11 & 73) != 0)\n    {\n        v18 = (unsigned int)v11 & 0xc00;\n    }\n    if (((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v17 != -1 && (v4 == (unsigned int)v12 || (unsigned int)v12 == -1) && ((unsigned int)v7 < 0 || (unsigned int)v14 == 0) && ((unsigned int)v14 == 0 || (unsigned int)v7 >= 0) && v5 == (unsigned int)v17 || ((unsigned int)v7 < 0 && ((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v14 == 0 && (v4 != (unsigned int)v12 || v5 != (unsigned int)v17) && (v4 != (unsigned int)v12 || (unsigned int)v17 != -1) && (v5 != (unsigned int)v17 || (unsigned int)v12 != -1) && ((unsigned int)v17 != -1 || (unsigned int)v12 != -1) && (unsigned int)v14 == 0 || ((unsigned short)v3 & 0xf000) == 0x4000 && (unsigned int)v14 == 0 && (unsigned int)v7 >= 0 && (v4 != (unsigned int)v12 || v5 != (unsigned int)v17) && (v4 != (unsigned int)v12 || (unsigned int)v17 != -1) && (v5 != (unsigned int)v17 || (unsigned int)v12 != -1) && ((unsigned int)v17 != -1 || (unsigned int)v12 != -1) && (unsigned int)v14 == 0) && (v11 & 73) == 0 || ((unsigned short)v3 & 0xf000) == 0x4000 && (v4 == (unsigned int)v12 || (unsigned int)v12 == -1) && ((unsigned int)v7 < 0 || (unsigned int)v14 == 0) && ((unsigned int)v14 == 0 || (unsigned int)v7 >= 0) && (unsigned int)v17 == -1)\n    {\n        v18 = 0;\n    }\n    if (...)\n    {\n        if (!(((v11 ^ v19 | v18) & (int)v6) != 0))\n        {\n            v14 = 0;\n        }\n        else if (v8 < 0)\n        {\n            v14 = chmod(v7);\n        }\n        else\n        {\n            v14 = fchmod(v8);\n        }\n    }\n    if (...)\n    {\n        v14 = (unsigned int)close(v8);\n    }\n    if (...)\n    {\n        v16 = __errno_location();\n        v13 = *(v16);\n    }\n    if (...)\n    {\n        close(v7);\n        *(v16) = v13;\n    }\n    v21 = v14;\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_402560",
            "funcStartAddr": "0x402560",
            "funcEndAddr": "0x402568",
            "decompiledFuncCode": "extern char g_60e2f8;\n\nint sub_402560()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60e2f8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404420",
            "funcStartAddr": "0x404420",
            "funcEndAddr": "0x40442f",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_404420()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60e420 : v1));\n}\n"
        },
        {
            "funcName": "sub_404760",
            "funcStartAddr": "0x404760",
            "funcEndAddr": "0x4047cd",
            "decompiledFuncCode": "int sub_404760()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404240();\n}\n"
        },
        {
            "funcName": "sub_401ebb",
            "funcStartAddr": "0x401ebb",
            "funcEndAddr": "0x401eda",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_401ebb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406760",
            "funcStartAddr": "0x406760",
            "funcEndAddr": "0x4067bc",
            "decompiledFuncCode": "int sub_406760()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4071c0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406600",
            "funcStartAddr": "0x406600",
            "funcEndAddr": "0x406618",
            "decompiledFuncCode": "int sub_406600()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_405f50();\n}\n"
        },
        {
            "funcName": "sub_405020",
            "funcStartAddr": "0x405020",
            "funcEndAddr": "0x4053c9",
            "decompiledFuncCode": "extern unsigned int g_40b638;\nextern unsigned int g_40b63c;\nextern unsigned int g_40b64c;\nextern unsigned int g_40b663;\nextern unsigned int g_40b6c0;\nextern unsigned int g_40b790;\nextern unsigned int g_40b7b0;\nextern unsigned int g_40b7d8;\nextern unsigned int g_40b800;\nextern unsigned int g_40b830;\n\nint sub_405020()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40b638, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b6c0, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40b63c, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40b64c, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40b663, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40b790, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40b7b0, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40b7d8, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40b800, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40b830, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_404440",
            "funcStartAddr": "0x404440",
            "funcEndAddr": "0x404473",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_404440()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60e420 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60e420 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_406870",
            "funcStartAddr": "0x406870",
            "funcEndAddr": "0x406dc4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40bae7;\nextern char g_60e498[2];\n\nint sub_406870()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // rdx\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rbp\n    unsigned long long v72;  // rax\n\n    v9 = g_60e498;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40bae7 : (unsigned long long)nl_langinfo(0xe));\n    if (g_60e498 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40bae7;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v64 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v64;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40bae7;\n                                        v10 = (tmp_10 == 0? &g_40bae7 : tmp_10);\n                                        free(NULL);\n                                        sub_4071c0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v63 = *(v62);\n                                        v64 = 1;\n                                    }\n                                    else\n                                    {\n                                        v63 = __uflow(v10);\n                                        v64 = (char)(v63 != -1);\n                                    }\n                                }\n                                while (v64 != 0 && v63 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v63 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40bae7 : tmp_10);\n                            sub_4071c0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v29 > 1) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v29 > 1) && (unsigned int)v27 != 32 && (unsigned int)v27 == 35 && v63 == -1 || (unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v29 > 1) && (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && v29 <= 1)\n                    {\n                        v9 = &g_40bae7;\n                    }\n                    else if (((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v29 > 1) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v29 > 1) && (unsigned int)v27 != 32 && (unsigned int)v27 == 35 && v63 == -1 || (unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v29 > 1) && (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && v29 <= 1) && v0 != 0 || v38 == 0 && v29 > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40bae7;\n            free(v17);\n        }\n        *((char *[2])&g_60e498[0]) = v9;\n    }\n    v68 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v69 = strcmp((tmp_10 == 0? &g_40bae7 : tmp_10), v9);\n            if (v69 != 0 && (v68 != 42 || v9[1] != 0))\n            {\n                v70 = strlen(v9);\n                v71 = &((char [2])&v9[v70])[1];\n                v72 = strlen(&((char [2])&v9[v70])[1]);\n                v9 = v71 + v72 + 1;\n                v68 = (char)*((char *)(v71 + v72 + 1));\n                if (v68 == 0)\n                {\n                    break;\n                }\n            }\n            if (v69 == 0 || v68 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_407280",
            "funcStartAddr": "0x407280",
            "funcEndAddr": "0x4072d6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_407280()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404650",
            "funcStartAddr": "0x404650",
            "funcEndAddr": "0x4046e5",
            "decompiledFuncCode": "extern unsigned long long *g_60e298;\nextern unsigned long long g_60e2a0;\nextern unsigned long long g_60e2a8;\nextern unsigned int g_60e2b0;\nextern unsigned long long g_60e320;\n\nint sub_404650()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60e2b0;\n    if (g_60e2b0 > 1)\n    {\n        v2 = &g_60e298[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60e298[2 * (unsigned long long)(g_60e2b0 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_60e298[1] != 6349600)\n    {\n        v1 = free(g_60e298[1]);\n        g_60e2a0 = 0x100;\n        g_60e2a8 = &g_60e320;\n    }\n    if (g_60e298 != 6349472)\n    {\n        v1 = free(g_60e298);\n        g_60e298 = &g_60e2a0;\n    }\n    g_60e2b0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404900",
            "funcStartAddr": "0x404900",
            "funcEndAddr": "0x40490a",
            "decompiledFuncCode": "int sub_404900()\n{\n}\n"
        },
        {
            "funcName": "sub_4072f0",
            "funcStartAddr": "0x4072f0",
            "funcEndAddr": "0x408d09",
            "decompiledFuncCode": "int sub_4072f0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407240",
            "funcStartAddr": "0x407240",
            "funcEndAddr": "0x40727b",
            "decompiledFuncCode": "int sub_407240()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_407280();\n    }\n}\n"
        },
        {
            "funcName": "sub_404740",
            "funcStartAddr": "0x404740",
            "funcEndAddr": "0x404752",
            "decompiledFuncCode": "int sub_404740()\n{\n}\n"
        },
        {
            "funcName": "sub_404ed0",
            "funcStartAddr": "0x404ed0",
            "funcEndAddr": "0x405001",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    struct struct_1 *field_8;\n} struct_0;\n\nint sub_404ed0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned int v1;  // [bp-0x50]\n    unsigned int v2;  // [bp-0x4c]\n    unsigned int v3;  // [bp-0x40]\n    unsigned int v4;  // [bp-0x3c]\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r13\n    unsigned long v8;  // rdi\n    char **v9;  // rsi\n    char **v10;  // rax\n    char *v11;  // rdx\n    unsigned long long v12;  // rbp\n    unsigned long long|unsigned long v13;  // r14\n    unsigned long long|struct_0 * v14;  // r15\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // rdx\n    unsigned long long v17;  // rsi\n    unsigned long long v18;  // rdi\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long *v22;  // r15\n    unsigned long long v23;  // rbp\n    unsigned long long v24;  // rdi\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n\n    v7 = v6;\n    v1 = v8;\n    v3 = 0;\n    v2 = (unsigned int)v8 - 1;\n    if ((unsigned int)(v8 - 1) >= 0)\n    {\n        v12 = v8 - 1;\n        if (*(v9[v8 + -1]) == 47)\n        {\n            v10 = v8 - 2;\n            do\n            {\n                v12 = v10;\n                v11 = *((long long *)((char *)v9 + 0x8 * v10));\n                v10 = (char *)&v10[-1] + 7;\n            }\n            while (*(v11) == 47 && (unsigned int)v10 >= 0);\n        }\n        if ((unsigned int)v12 > 0)\n        {\n            v14 = v9;\n            v13 = 0;\n            v0 = &v9[v12 + -1 + 1];\n            do\n            {\n                if (v4 <= 0 || (unsigned int)0 != 3)\n                {\n                    v16 = v15;\n                    v17 = &v3;\n                    v18 = v14->field_0;\n                    v19 = r13<8>();\n                    v13 = (unsigned int)((unsigned int)v13 < v19? (unsigned int)v19 : (unsigned int)v13);\n                }\n                if (*(v14->field_8) != 47)\n                {\n                    v20 = sub_404d30();\n                    v13 = (unsigned int)((unsigned int)v13 < v20? (unsigned int)v20 : (unsigned int)v13);\n                }\n                v14 = &v14->field_8;\n            }\n            while (v14 != v0);\n        }\n    }\n    if ((unsigned int)v12 <= 0 || (unsigned int)(v8 - 1) < 0)\n    {\n        v13 = 0;\n        v12 = 0;\n    }\n    sub_404e60();\n    if (v1 > (unsigned int)v12)\n    {\n        v22 = &(&v14->field_0)[v12];\n        v23 = &(struct struct_0 *)&(&v14->field_0)[v12 + v2 - (unsigned int)v12]->field_8;\n        while (true)\n        {\n            v24 = *(v22);\n            v25 = v15;\n            v26 = &v3;\n            v27 = r13<8>();\n            v13 = (unsigned int)((unsigned int)v13 < v27? (unsigned int)v27 : (unsigned int)v13);\n            v22 = &v22[1];\n            if (v22 == v23)\n            {\n                break;\n            }\n        }\n    }\n    v28 = v13;\n    return v28;\n}\n"
        },
        {
            "funcName": "sub_402010",
            "funcStartAddr": "0x402010",
            "funcEndAddr": "0x40203f",
            "decompiledFuncCode": "int sub_402010()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long long|unsigned long v1;  // [bp-0x8]\n    unsigned long long v3;  // rbx\n    unsigned long long v5;  // rbx\n\n    v1 = v3;\n    sub_404840();\n    v5 = v1;\n    v1 = stack_base + 0;\n    v0 = v5;\n}\n"
        },
        {
            "funcName": "sub_404850",
            "funcStartAddr": "0x404850",
            "funcEndAddr": "0x40485f",
            "decompiledFuncCode": "int sub_404850()\n{\n}\n"
        },
        {
            "funcName": "sub_4048e0",
            "funcStartAddr": "0x4048e0",
            "funcEndAddr": "0x4048f1",
            "decompiledFuncCode": "int sub_4048e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4067c0",
            "funcStartAddr": "0x4067c0",
            "funcEndAddr": "0x406806",
            "decompiledFuncCode": "int sub_4067c0()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_407170();\n}\n"
        },
        {
            "funcName": "sub_409180",
            "funcStartAddr": "0x409180",
            "funcEndAddr": "0x409e36",
            "decompiledFuncCode": "int sub_409180() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404a00",
            "funcStartAddr": "0x404a00",
            "funcEndAddr": "0x404a17",
            "decompiledFuncCode": "int sub_404a00()\n{\n}\n"
        },
        {
            "funcName": "sub_409f18",
            "funcStartAddr": "0x409f18",
            "funcEndAddr": "0x409f38",
            "decompiledFuncCode": "extern unsigned long long g_60de30;\n\nint sub_409f18()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60de30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405720",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x40576a",
            "decompiledFuncCode": "int sub_405720() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404840",
            "funcStartAddr": "0x404840",
            "funcEndAddr": "0x40484c",
            "decompiledFuncCode": "int sub_404840()\n{\n}\n"
        },
        {
            "funcName": "sub_4046f0",
            "funcStartAddr": "0x4046f0",
            "funcEndAddr": "0x404701",
            "decompiledFuncCode": "int sub_4046f0()\n{\n}\n"
        },
        {
            "funcName": "sub_402610",
            "funcStartAddr": "0x402610",
            "funcEndAddr": "0x4028f3",
            "decompiledFuncCode": "extern unsigned int g_40a61d;\n\nint sub_402610()\n{\n    unsigned long v0;  // [bp-0xf8]\n    unsigned int v1;  // [bp-0xdc]\n    unsigned long v2;  // [bp-0xd8]\n    unsigned int v3;  // [bp-0xd0]\n    unsigned int v4;  // [bp-0xcc]\n    char v5;  // [bp-0xc8]\n    unsigned int v6;  // [bp-0xb0]\n    unsigned long v7;  // [bp+0x8]\n    unsigned int v8;  // [bp+0x10]\n    unsigned int v9;  // [bp+0x18]\n    unsigned int v10;  // [bp+0x20]\n    unsigned long v11;  // r9\n    char *v12;  // rdi\n    unsigned int v13[2];  // rsi\n    unsigned long long v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned int|unsigned long v16;  // rbp\n    unsigned long v17;  // rdx\n    unsigned int|unsigned long v18;  // r15\n    unsigned long v19;  // r8\n    unsigned long long v21;  // rcx\n    unsigned long long v22;  // rsi\n    unsigned long long v25;  // rsi\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rax\n    unsigned long long v31;  // rbx\n    unsigned long long v32;  // rbx\n\n    v2 = v11;\n    v3 = v10;\n    if (*(v12) != 47 && v13[0] == 4)\n    {\n        v18 = v13[1];\n    }\n    if (v17 != 0)\n    {\n        if (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)\n        {\n            v14 = (unsigned int)sub_406de0();\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v16 = &v12[v14];\n            }\n            else\n            {\n                v15 = 1;\n                if (v14 == -1)\n                {\n                    v18 = (unsigned int)*(__errno_location());\n                }\n            }\n        }\n        if (((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0 && v18 != 0 || ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0) || (v8 & v9) != -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v18 != 0) && (char)v3 != 0 && (unsigned int)v18 != 0 && (unsigned int)v18 != 2)\n        {\n            v28 = __xstat(0x1, v16, (unsigned int)&v5);\n        }\n        if (...)\n        {\n            v30 = __errno_location();\n        }\n    }\n    if (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)\n    {\n        if (v17 == 0)\n        {\n            v16 = (unsigned int)v12;\n        }\n        if ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            if (!(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0))\n            {\n                v1 = (unsigned int)v19 & -19;\n            }\n            if (((unsigned short)v19 & 0x200) == 0 && ((unsigned short)v7 & 0xc00) == 0)\n            {\n                v18 = mkdir(v16, v19);\n                if (v18 == 0)\n                {\n                    v22 = v21;\n                    (long long)(stack_base)[-216]();\n                    if (((int)v7 & (unsigned int)v19 & 511) != 0)\n                    {\n                        v1 = v19;\n                    }\n                }\n            }\n        }\n        if ((v8 & v9) != -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v1 = (unsigned int)v19 & -64;\n        }\n    }\n    if (v13[1] == 0 && v17 == 0 || v17 == 0 && *(v12) == 47 || v13[1] == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) || v17 == 0 && v13[0] != 4 || *(v12) == 47 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)) && v13[0] != 4)\n    {\n        v4 = v8 & v9;\n    }\n    if ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0) || (v8 & v9) != -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4))\n    {\n        v18 = mkdir(v16, v1);\n        if ((unsigned int)v18 == 0)\n        {\n            v25 = v21;\n            (long long)(stack_base)[-216]();\n        }\n    }\n    if ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0 && v18 != 0 || ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0) || (v8 & v9) != -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v18 != 0)\n    {\n        v18 = (unsigned int)*(__errno_location());\n        if ((char)v3 != 0)\n        {\n        }\n        else\n        {\n            v1 = -1;\n        }\n    }\n    if ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0 && v18 == 0 && ((int)v7 & (unsigned int)v19 & 511) != 0 || ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && ((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0 && v18 != 0 || ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0) || (v8 & v9) != -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v18 != 0) && (char)v3 == 0 || ((v8 & v9) == -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4) && !(((unsigned short)v7 & 0xc00) == 0 && ((unsigned short)v19 & 0x200) == 0) || (v8 & v9) != -1 && (v17 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>))) && (v13[1] == 0 || *(v12) == 47 || v13[0] != 4)) && (unsigned int)v18 == 0)\n    {\n        v27 = sub_404ae0();\n        if (v27 >= -1)\n        {\n            v0 = (unsigned int)v7;\n            v29 = sub_406f70();\n        }\n    }\n    if (...)\n    {\n        v15 = 1;\n    }\n    if (...)\n    {\n        v31 = (unsigned int)sub_404a90();\n        error(0x0, v18, (unsigned long long)dcgettext(0x0, 0x40a61d, 0x5));\n        v15 = 0;\n    }\n    if (...)\n    {\n        v32 = (unsigned int)sub_404a90();\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, (v4 != -1? \"cannot change owner and permissions of %s\" : \"cannot change permissions of %s\"), 0x5));\n        v15 = 0;\n    }\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_4057c0",
            "funcStartAddr": "0x4057c0",
            "funcEndAddr": "0x4057e8",
            "decompiledFuncCode": "int sub_4057c0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4055c0();\n}\n"
        },
        {
            "funcName": "sub_404a20",
            "funcStartAddr": "0x404a20",
            "funcEndAddr": "0x404a33",
            "decompiledFuncCode": "int sub_404a20()\n{\n}\n"
        },
        {
            "funcName": "sub_407170",
            "funcStartAddr": "0x407170",
            "funcEndAddr": "0x4071bc",
            "decompiledFuncCode": "int sub_407170()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4065e0",
            "funcStartAddr": "0x4065e0",
            "funcEndAddr": "0x4065f6",
            "decompiledFuncCode": "int sub_4065e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_406520();\n}\n"
        },
        {
            "funcName": "sub_402e70",
            "funcStartAddr": "0x402e70",
            "funcEndAddr": "0x402f09",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60e308;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_402e70()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60e308 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405420",
            "funcStartAddr": "0x405420",
            "funcEndAddr": "0x405479",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_405420()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405020();\n}\n"
        },
        {
            "funcName": "sub_404240",
            "funcStartAddr": "0x404240",
            "funcEndAddr": "0x4043e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60e298;\nextern uint128_t g_60e2a0;\nextern unsigned int g_60e2b0;\nextern int512_t g_60e320;\n\nint sub_404240()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60e298;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60e2b0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60e298 != 6349472)\n            {\n                v16 = sub_405620();\n                g_60e298 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_405620();\n                v17 = v15;\n                g_60e298 = v15;\n                *(v15) = g_60e2a0;\n            }\n            memset(&v17[(long long)(int)g_60e2b0], 0x0, (int)((unsigned int)v13 + 1 - g_60e2b0) * 16);\n            g_60e2b0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_405810(); /* do not return */\n        }\n    }\n    if (g_60e2b0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_403010();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6349600)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4055c0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_403010();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_4057f0",
            "funcStartAddr": "0x4057f0",
            "funcEndAddr": "0x405803",
            "decompiledFuncCode": "int sub_4057f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_408e10",
            "funcStartAddr": "0x408e10",
            "funcEndAddr": "0x408e1e",
            "decompiledFuncCode": "int sub_408e10()\n{\n}\n"
        },
        {
            "funcName": "sub_4044a0",
            "funcStartAddr": "0x4044a0",
            "funcEndAddr": "0x4044cb",
            "decompiledFuncCode": "extern char g_60e420;\n\nint sub_4044a0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60e420 : v2);\n    *((int *)(tmp_11? &g_60e420 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60e420;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_60e420;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_406520",
            "funcStartAddr": "0x406520",
            "funcEndAddr": "0x406576",
            "decompiledFuncCode": "extern unsigned int g_60e2b4;\nextern unsigned int g_60e2b8;\nextern unsigned int g_60e2bc;\nextern unsigned int g_60e460;\nextern unsigned int g_60e464;\nextern unsigned int g_60e468;\nextern unsigned long long g_60e470;\nextern unsigned long long g_60e4a8;\n\nint sub_406520()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60e460 = g_60e2bc;\n    g_60e464 = g_60e2b8;\n    v1 = (unsigned int)v2;\n    v0 = &g_60e460;\n    g_60e2bc = g_60e460;\n    g_60e4a8 = g_60e470;\n    g_60e2b4 = g_60e468;\n    return sub_405f50();\n}\n"
        },
        {
            "funcName": "sub_402570",
            "funcStartAddr": "0x402570",
            "funcEndAddr": "0x40260e",
            "decompiledFuncCode": "extern unsigned int g_40a608;\nextern unsigned int g_60e258;\nextern char g_60e2f8;\nextern unsigned long long g_60e300;\n\nint sub_402570()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_406760();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60e2f8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40a608, 0x5);\n            if (g_60e300 != 0)\n            {\n                sub_4048e0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60e2f8 != 0)\n    {\n        v3 = sub_406760();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60e2f8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60e258);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_405690",
            "funcStartAddr": "0x405690",
            "funcEndAddr": "0x405708",
            "decompiledFuncCode": "int sub_405690() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405620",
            "funcStartAddr": "0x405620",
            "funcEndAddr": "0x405650",
            "decompiledFuncCode": "int sub_405620()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_405810(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405770",
            "funcStartAddr": "0x405770",
            "funcEndAddr": "0x405787",
            "decompiledFuncCode": "int sub_405770()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4055c0();\n}\n"
        },
        {
            "funcName": "sub_4072e0",
            "funcStartAddr": "0x4072e0",
            "funcEndAddr": "0x4072e4",
            "decompiledFuncCode": "int sub_4072e0()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v2;  // rax\n\n    *(v1) = *(v1) | 32;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408e20",
            "funcStartAddr": "0x408e20",
            "funcEndAddr": "0x408f4c",
            "decompiledFuncCode": "extern unsigned int g_60e4a0;\n\nint sub_408e20()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60e4a0 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_408e20();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60e4a0 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_60e4a0 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_408e20();\n        }\n        if ((*(v12) == 22 || g_60e4a0 < 0) && (g_60e4a0 < 0 || (unsigned int)v15 < 0) && (g_60e4a0 == -1 || g_60e4a0 >= 0) && (g_60e4a0 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_60e4a0 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_405810",
            "funcStartAddr": "0x405810",
            "funcEndAddr": "0x405841",
            "decompiledFuncCode": "extern unsigned int g_40b9af;\nextern unsigned int g_60e258;\n\nint sub_405810()\n{\n    dcgettext(0x0, 0x40b9af, 0x5);\n    error(g_60e258, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406620",
            "funcStartAddr": "0x406620",
            "funcEndAddr": "0x40668f",
            "decompiledFuncCode": "extern unsigned long long g_40bae7;\n\nint sub_406620()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40bae7;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_406810() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404e60",
            "funcStartAddr": "0x404e60",
            "funcEndAddr": "0x404ebb",
            "decompiledFuncCode": "int sub_404e60()\n{\n    unsigned int v1[2];  // rdi\n    unsigned long long v2;  // rax\n\n    switch (v1[0])\n    {\n    case 0: case 4:\n        v1[0] = 5;\n        return v2;\n    case 1: case 2:\n        v2 = close(v1[1]);\n    case 3:\n        v2 = v1[1];\n        if (v1[1] >= 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n    default:\n        __assert_fail(); /* do not return */\n    }\n    v2 = v1[0];\n}\n"
        },
        {
            "funcName": "sub_4055e0",
            "funcStartAddr": "0x4055e0",
            "funcEndAddr": "0x405601",
            "decompiledFuncCode": "int sub_4055e0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_405810(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_402040",
            "funcStartAddr": "0x402040",
            "funcEndAddr": "0x40204a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_402040()\n{\n    struct_0 *v1;  // rsi\n    unsigned long v2;  // rax\n\n    if (v1->field_18 == 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405540",
            "funcStartAddr": "0x405540",
            "funcEndAddr": "0x4055b4",
            "decompiledFuncCode": "extern unsigned int g_40b67f;\nextern unsigned int g_40b6aa;\nextern unsigned int g_40b8d8;\n\nint sub_405540()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b67f, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b6aa, 0x5));\n    dcgettext(0x0, 0x40b8d8, 0x5);\n}\n"
        },
        {
            "funcName": "sub_404720",
            "funcStartAddr": "0x404720",
            "funcEndAddr": "0x404736",
            "decompiledFuncCode": "int sub_404720()\n{\n}\n"
        },
        {
            "funcName": "sub_4047d0",
            "funcStartAddr": "0x4047d0",
            "funcEndAddr": "0x404839",
            "decompiledFuncCode": "int sub_4047d0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_404240();\n}\n"
        },
        {
            "funcName": "sub_4044d0",
            "funcStartAddr": "0x4044d0",
            "funcEndAddr": "0x404542",
            "decompiledFuncCode": "extern int512_t g_60e420;\n\nint sub_4044d0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60e420 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_403010();\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_mkdir.elf"
}