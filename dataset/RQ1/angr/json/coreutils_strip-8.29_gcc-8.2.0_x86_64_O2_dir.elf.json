{
    "funcInfo": [
        {
            "funcName": "sub_40e1f0",
            "funcStartAddr": "0x40e1f0",
            "funcEndAddr": "0x40e2d1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char field_10;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned int field_10;\n} struct_2;\n\nextern struct_0 *g_6257b0;\nextern struct_0 *g_6257b8;\n\nint sub_40e1f0()\n{\n    void tmp_15;  // tmp #15\n    struct_0 *v1;  // rbx\n    char *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    struct_1 *v5;  // rbx\n    struct_2 *v6;  // rbp\n    struct_0 *v9;  // rax\n    struct_0 *v10;  // rax\n\n    v1 = g_6257b8;\n    if (g_6257b8 != 0)\n    {\n        do\n        {\n            if (v1->field_10 == *(v2))\n            {\n                v3 = strcmp(&v1->field_10, v2);\n                if (v3 == 0)\n                {\n                    break;\n                }\n            }\n            v1 = v1->field_8;\n        }\n        while (v1 != 0);\n        if (v3 != 0 || v1->field_10 != *(v2))\n        {\n            v5 = g_6257b0;\n        }\n        else if (v1->field_10 == *(v2))\n        {\n            v10 = v1;\n            return v10;\n        }\n    }\n    if (g_6257b8 == 0 || g_6257b0 != 0)\n    {\n        v5 = g_6257b0;\n        if (g_6257b0 != 0)\n        {\n            while (true)\n            {\n                if (v5->field_10 == *(v2))\n                {\n                    v4 = strcmp(&v5->field_10, v2);\n                    if (v4 == 0)\n                    {\n                        return 0;\n                    }\n                }\n                if (v4 != 0 || v5->field_10 != *(v2))\n                {\n                    v5 = v5->field_8;\n                    if (v5 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        v6 = (unsigned long long)getpwnam((unsigned int)v2);\n        strlen(v2);\n        v1 = (unsigned long long)(unsigned int)sub_412980();\n        strcpy(&v1->field_10, v2);\n        if (v6 != 0)\n        {\n            v1->field_0 = v6->field_10;\n            v9 = g_6257b8;\n            g_6257b8 = v1;\n            v1->field_8 = v9;\n        }\n        else\n        {\n            tmp_15 = g_6257b0;\n            g_6257b0 = v1;\n            v1->field_8 = tmp_15;\n            return 0;\n        }\n    }\n    if (g_6257b8 == 0 && v6 != 0 || g_6257b0 != 0 && g_6257b8 != 0)\n    {\n        v10 = v1;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_409eb0",
            "funcStartAddr": "0x409eb0",
            "funcEndAddr": "0x409edf",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n} struct_0;\n\nint sub_409eb0()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2[16];  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1->field_70 <= v2[14])\n    {\n        if (v1->field_70 >= v2[14])\n        {\n            v3 = (unsigned int)v2[15] - v1->field_78;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_70 < v2[14] || (unsigned int)v2[15] != v1->field_78)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e380",
            "funcStartAddr": "0x40e380",
            "funcEndAddr": "0x40e461",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char field_10;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned int field_10;\n} struct_2;\n\nextern struct_0 *g_6257a0;\nextern struct_0 *g_6257a8;\n\nint sub_40e380()\n{\n    void tmp_15;  // tmp #15\n    struct_0 *v1;  // rbx\n    char *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    struct_1 *v5;  // rbx\n    struct_2 *v6;  // rbp\n    struct_0 *v9;  // rax\n    struct_0 *v10;  // rax\n\n    v1 = g_6257a8;\n    if (g_6257a8 != 0)\n    {\n        do\n        {\n            if (v1->field_10 == *(v2))\n            {\n                v3 = strcmp(&v1->field_10, v2);\n                if (v3 == 0)\n                {\n                    break;\n                }\n            }\n            v1 = v1->field_8;\n        }\n        while (v1 != 0);\n        if (v3 != 0 || v1->field_10 != *(v2))\n        {\n            v5 = g_6257a0;\n        }\n        else if (v1->field_10 == *(v2))\n        {\n            v10 = v1;\n            return v10;\n        }\n    }\n    if (g_6257a8 == 0 || g_6257a0 != 0)\n    {\n        v5 = g_6257a0;\n        if (g_6257a0 != 0)\n        {\n            while (true)\n            {\n                if (v5->field_10 == *(v2))\n                {\n                    v4 = strcmp(&v5->field_10, v2);\n                    if (v4 == 0)\n                    {\n                        return 0;\n                    }\n                }\n                if (v4 != 0 || v5->field_10 != *(v2))\n                {\n                    v5 = v5->field_8;\n                    if (v5 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        v6 = (unsigned long long)getgrnam((unsigned int)v2);\n        strlen(v2);\n        v1 = (unsigned long long)(unsigned int)sub_412980();\n        strcpy(&v1->field_10, v2);\n        if (v6 != 0)\n        {\n            v1->field_0 = v6->field_10;\n            v9 = g_6257a8;\n            g_6257a8 = v1;\n            v1->field_8 = v9;\n        }\n        else\n        {\n            tmp_15 = g_6257a0;\n            g_6257a0 = v1;\n            v1->field_8 = tmp_15;\n            return 0;\n        }\n    }\n    if (g_6257a8 == 0 && v6 != 0 || g_6257a8 != 0 && g_6257a0 != 0)\n    {\n        v10 = v1;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ee80",
            "funcStartAddr": "0x40ee80",
            "funcEndAddr": "0x410606",
            "decompiledFuncCode": "int sub_40ee80() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409b00",
            "funcStartAddr": "0x409b00",
            "funcEndAddr": "0x409b68",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n    char padding_6c[60];\n    unsigned int field_a8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned long long field_68;\n    char padding_70[56];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_409b00()\n{\n    struct_1 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9)\n    {\n        if (v1->field_60 <= v6->field_60 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n        {\n            if (v1->field_60 >= v6->field_60)\n            {\n                v7 = (unsigned int)v6->field_68 - v1->field_68;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v5 == 0 || v1->field_60 <= v6->field_60) && (v5 == 0 || (unsigned int)v6->field_68 != v1->field_68) && (v5 == 0 || v1->field_60 >= v6->field_60) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_60 <= v6->field_60) && (v6->field_a8 == 3 || v6->field_a8 == 9 || (unsigned int)v6->field_68 != v1->field_68) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_60 >= v6->field_60))\n        {\n            return v7;\n        }\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v1->field_60 > v6->field_60) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v1->field_60 > v6->field_60) && (v6->field_a8 != 9 || v1->field_60 > v6->field_60))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c930",
            "funcStartAddr": "0x40c930",
            "funcEndAddr": "0x40c990",
            "decompiledFuncCode": "int sub_40c930()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rax\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // rsi\n    unsigned long long v6[2];  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // r9\n    unsigned long long v9[2];  // rdx\n\n    v2 = v1;\n    v9 = *(v3);\n    if (v3[1] > *(v3))\n    {\n        v8 = 0;\n        do\n        {\n            v4 = *(v9);\n            if (*(v9) != 0)\n            {\n                if (v2 <= v8)\n                {\n                    break;\n                }\n                *((unsigned long long *)(v5 + v8 * 8)) = v4;\n                v6 = v9[1];\n                v7 = v8 + 1;\n                if (v9[1] != 0)\n                {\n                    while (true)\n                    {\n                        if (v2 != v7)\n                        {\n                            v7 += 1;\n                            *((unsigned long long [2])(v5 + v7 * 8 - 8)) = *(v6);\n                            v6 = v6[1];\n                            if (v6 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            return v2;\n                        }\n                    }\n                }\n                v8 = v7;\n            }\n            v9 = &v9[2];\n        }\n        while (v3[1] > v9);\n        return v8;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_417085",
            "funcStartAddr": "0x417085",
            "funcEndAddr": "0x417110",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\nint sub_417085()\n{\n    unsigned long long v0;  // [bp-0x18]\n    void tmp_35;  // tmp #35\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rdi\n    struct_0 *v7;  // rbx\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // r12\n    unsigned long v11;  // rsi\n    unsigned long long v12[2];  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // r12\n\n    v2 = v4;\n    v1 = stack_base + 0;\n    v0 = v5;\n    v7 = v6;\n    if (v8 != 0)\n    {\n        v9 = v8;\n        v10 = v8 - 1;\n    }\n    else\n    {\n        v10 = 15;\n        v9 = 16;\n    }\n    v7->field_30 = v10;\n    *((int *)&v7->field_0) = (v11 == 0? 4064 : v11);\n    v12 = sub_417050();\n    v7->field_8 = v12;\n    if (v12 != 0)\n    {\n        tmp_35 = v7->field_0;\n        v7->field_10 = 0 - v9 & &((unsigned long long [2])&((char *)v12)[v10])[2];\n        v7->field_18 = 0 - v9 & &((unsigned long long [2])&((char *)v12)[v10])[2];\n        v12[0] = tmp_35 + (char *)v12;\n        v7->field_20 = tmp_35 + (char *)v12;\n        v12[1] = 0;\n        v7->field_50 = v7->field_50 & 249;\n        v13 = v0;\n        v14 = v2;\n        return 1;\n    }\n    sub_417010(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40e520",
            "funcStartAddr": "0x40e520",
            "funcEndAddr": "0x40e564",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_40e520()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4121f0",
            "funcStartAddr": "0x4121f0",
            "funcEndAddr": "0x4121f9",
            "decompiledFuncCode": "int sub_4121f0()\n{\n}\n"
        },
        {
            "funcName": "sub_417010",
            "funcStartAddr": "0x417010",
            "funcEndAddr": "0x41704b",
            "decompiledFuncCode": "extern unsigned int g_41ea60;\nextern unsigned int g_41edef;\nextern unsigned int g_6245c0;\nextern unsigned long long stderr;\n\nint sub_417010()\n{\n    __fprintf_chk(stderr, 0x1, 0x41ea60, dcgettext(0x0, 0x41edef, 0x5));\n    exit(g_6245c0); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405d40",
            "funcStartAddr": "0x405d40",
            "funcEndAddr": "0x405d66",
            "decompiledFuncCode": "int sub_405d40()\n{\n    sub_405cd0();\n}\n"
        },
        {
            "funcName": "sub_4174a0",
            "funcStartAddr": "0x4174a0",
            "funcEndAddr": "0x4175fb",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    struct struct_1 *field_30;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    char field_8;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    char field_8;\n} struct_3;\n\nextern char g_41b08a;\n\nint sub_4174a0()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rax\n    char *v6;  // rbx\n    struct_2 *v7;  // rbp\n    unsigned long long v8;  // rax\n    char *v9;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    struct_3 *v13;  // rax\n\n    if (v1->field_30 != 0)\n    {\n        v7 = v2;\n        if (v1 <= v1->field_30)\n        {\n            v12 = 1;\n        }\n        if (v1 > v1->field_30 || v1->field_30 >= &v1[1])\n        {\n            v6 = v2 + 9;\n            if (*(v1->field_30) != 0)\n            {\n                while (true)\n                {\n                    v3 = strcmp(v6, v1->field_30);\n                    if (v3 == 0)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        if (*(v6) == 0)\n                        {\n                            v4 = &v7[1];\n                            if (&v7[1] != v6)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = &v6[-1 * v4];\n                                if (!(&v6[-1 * v4]) < v9)\n                                {\n                                    *(__errno_location()) = 12;\n                                    v12 = 0;\n                                }\n                            }\n                            else if (v7->field_8 == 0)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = 0;\n                            }\n                            if ((&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                            {\n                                v11 = &v9[v10];\n                                if (v11 <= 118)\n                                {\n                                    memcpy(v6, v1->field_30, v9);\n                                    *((char *)(v6 + v9)) = 0;\n                                }\n                                else\n                                {\n                                    v13 = sub_417410();\n                                    v7->field_0 = v13;\n                                    if (v13 != 0)\n                                    {\n                                        v13->field_8 = 0;\n                                        v6 = &v13[1];\n                                    }\n                                    else\n                                    {\n                                        v12 = 0;\n                                    }\n                                }\n                            }\n                        }\n                        if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                        {\n                            v6 = &v6[strlen(v6) + 1];\n                            v5 = v7->field_0;\n                            if (v7->field_0 == 0 || *(v6) != 0)\n                            {\n                                break;\n                            }\n                            v6 = &v7[1];\n                            v7 = v5;\n                            v8 = strcmp(v5 + 9, v1->field_30);\n                        }\n                    }\n                    if (v11 <= 118 && *(v6) == 0 && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || v8 == 0 && *(v6) == 0 && v7->field_0 != 0 && (&v7[1] == v6 || *(v6) != 0) && (v7->field_8 != 0 || *(v6) != 0) || *(v6) == 0 && v11 > 118 && v13 != 0 && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                    {\n                        v1->field_30 = v6;\n                        v12 = 1;\n                    }\n                    else if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                    {\n                        v3 = strcmp(v6, v1->field_30);\n                    }\n                    else if (*(v6) == 0 && (v13 == 0 || !(&v6[-1 * v4]) < v9) && (v13 == 0 || &v7[1] != v6) && (v7->field_8 == 0 || &v7[1] != v6) && (!(&v6[-1 * v4]) < v9 || v11 > 118) && (&v7[1] != v6 || v11 > 118))\n                    {\n                        return v12;\n                    }\n                }\n                if (true)\n                {\n                    v1->field_30 = v6;\n                    v12 = 1;\n                }\n                else if (v3 != 0)\n                {\n                    return v12;\n                }\n            }\n            else\n            {\n                v6 = &g_41b08a;\n            }\n            v1->field_30 = v6;\n            v12 = 1;\n        }\n        return v12;\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_40d510",
            "funcStartAddr": "0x40d510",
            "funcEndAddr": "0x40d5b8",
            "decompiledFuncCode": "int sub_40d510() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4177a0",
            "funcStartAddr": "0x4177a0",
            "funcEndAddr": "0x4178a5",
            "decompiledFuncCode": "int sub_4177a0()\n{\n    unsigned long long v0;  // [bp-0x60]\n    char v1;  // [bp-0x58]\n    unsigned int v2;  // [bp-0x54]\n    unsigned int v3;  // [bp-0x50]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned int v5;  // [bp-0x48]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x38]\n    unsigned int v9[9];  // rsi\n    unsigned long v11;  // rdi\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    if (v11 != 0)\n    {\n        v12 = (unsigned int)sub_417620();\n        if (v12 != 0)\n        {\n            v0 = (unsigned int)sub_4186f0();\n            if (v0 == -1)\n            {\n                v13 = localtime_r((unsigned int)&v0, (unsigned int)&v1);\n            }\n            if ((v0 == -1 && v13 != 0 && (v9[4] == 0 == v7 == 0 || v9[4] < 0 || v7 < 0) && (v9[2] ^ v5) == 0 && (v9[2 + 1] ^ v6) == 0 && (v9[1 + 1] ^ v4) == 0 && (v9[1] ^ v3) == 0 && (v9[1] ^ v2) == 0 && (v9[0] ^ *((int *)&v1)) == 0 || v0 != -1) && sub_4174a0() == 0)\n            {\n                v0 = -1;\n            }\n            if (v12 != 1)\n            {\n                v15 = sub_4173c0();\n            }\n        }\n        if (v12 == 0 || v15 == 0 && v12 != 1)\n        {\n            v16 = -1;\n        }\n        if (v12 == 1 || v12 != 0 && v15 != 0)\n        {\n            v16 = v0;\n        }\n        return v16;\n    }\n    return sub_4178c0();\n}\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x405614",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nint sub_4055f0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rsi\n\n    if (!(v1->field_48 <= v2->field_48))\n    {\n        return -18446744069414584321;\n    }\n    else if (v1->field_48 != v2->field_48)\n    {\n        return (unsigned long long)(char)(v1->field_48 < v2->field_48);\n    }\n}\n"
        },
        {
            "funcName": "sub_412840",
            "funcStartAddr": "0x412840",
            "funcEndAddr": "0x4128f8",
            "decompiledFuncCode": "int sub_412840()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long *|unsigned long long v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4123e0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40abf0",
            "funcStartAddr": "0x40abf0",
            "funcEndAddr": "0x40accb",
            "decompiledFuncCode": "int sub_40abf0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= v4 && v9 <= 9223372036854775806 && v9 > 4611686018427387903)\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > v4 || v9 > 9223372036854775806 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_407690",
            "funcStartAddr": "0x407690",
            "funcEndAddr": "0x4077f1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[176];\n    unsigned long long field_b0;\n    char field_b8;\n} struct_0;\n\nextern char g_6256bc;\nextern unsigned int g_6256d4;\nextern char g_6256ec;\nextern unsigned int g_6256f8;\nextern unsigned int g_625714;\nextern unsigned int g_62571c;\nextern unsigned int g_625720;\nextern char g_625725;\n\nint sub_407690()\n{\n    unsigned long|unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rax\n\n    if (!(g_6256bc != 0))\n    {\n        v1 = 0;\n    }\n    else if (g_6256f8 != 4)\n    {\n        v1 = (int)g_625720 + 1;\n    }\n    else\n    {\n        v1 = strlen((unsigned long long)(unsigned int)sub_40e520()) + 1;\n    }\n    if (g_6256ec != 0)\n    {\n        if (g_6256f8 != 4)\n        {\n            v2 = (int)g_62571c + 1;\n        }\n        else\n        {\n            v2 = 2;\n            if (v3->field_b8 != 0)\n            {\n                v2 = strlen((unsigned long long)(unsigned int)sub_40d5d0()) + 1;\n            }\n        }\n        v1 += v2;\n    }\n    if (g_625725 != 0)\n    {\n        if (g_6256f8 != 4)\n        {\n            v4 = (int)g_625714 + 1;\n        }\n        else\n        {\n            v4 = strlen(v3->field_b0) + 1;\n        }\n        v1 += v4;\n    }\n    v5 = v1 + (unsigned int)sub_407630();\n    if (g_6256d4 != 0)\n    {\n        v5 += (char)((char)sub_4057b0() != 0);\n    }\n    v6 = v5;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_405120",
            "funcStartAddr": "0x405120",
            "funcEndAddr": "0x40513e",
            "decompiledFuncCode": "int sub_405120()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_417390",
            "funcStartAddr": "0x417390",
            "funcEndAddr": "0x4173b3",
            "decompiledFuncCode": "int sub_417390()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long long *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long long v4;  // rbx\n    void *v5;  // rbx\n    unsigned long long v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        while (true)\n        {\n            v5 = *(v2);\n            v2 = v5;\n            if (v5 == 0)\n            {\n                break;\n            }\n        }\n        v7 = v0;\n        return (unsigned long long)free(v2);\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_412bd0",
            "funcStartAddr": "0x412bd0",
            "funcEndAddr": "0x412c01",
            "decompiledFuncCode": "extern unsigned int g_41edef;\nextern unsigned int g_6245c0;\n\nint sub_412bd0()\n{\n    dcgettext(0x0, 0x41edef, 0x5);\n    error(g_6245c0, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_409f30",
            "funcStartAddr": "0x409f30",
            "funcEndAddr": "0x409f68",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n} struct_0;\n\nint sub_409f30()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[18];  // rsi\n    unsigned long long v3;  // rax\n\n    if (v1->field_80 <= v2[16])\n    {\n        if (v1->field_80 >= v2[16])\n        {\n            v3 = (unsigned int)v2[17] - v1->field_88;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_80 < v2[16] || (unsigned int)v2[17] != v1->field_88)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_405690",
            "funcStartAddr": "0x405690",
            "funcEndAddr": "0x4056e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_405690()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // edx\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rdx\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 != 3 && v6->field_a8 != 9 && v5 != 0)\n    {\n        v7 = -18446744069414584321;\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if (v6->field_a8 == 3 && v5 == 0 || v5 == 0 && v6->field_a8 == 9 || v6->field_a8 != 3 && v5 != 0 && v6->field_a8 != 9)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_412ae0",
            "funcStartAddr": "0x412ae0",
            "funcEndAddr": "0x412b2a",
            "decompiledFuncCode": "int sub_412ae0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40e480",
            "funcStartAddr": "0x40e480",
            "funcEndAddr": "0x40e516",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_40e480()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    char *v3;  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rcx\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        do\n        {\n            v2 = &v2[-1];\n            v8 = v8 * 14757395258967641293 >> 64 >> 3;\n            *(v2) = (unsigned int)(v8 - (v8 * 14757395258967641293 >> 64 >> 3) * 10) + 48;\n        }\n        while (v8 != 0);\n        return v2;\n    }\n    while (true)\n    {\n        v3 = &v2[-1];\n        v7 = ((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63);\n        *((unsigned long long *)&v2[-1]) = 48 + (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63)) * 10 - rdi<8>;\n        if (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63) == 0)\n        {\n            break;\n        }\n        v2 = v3;\n    }\n    v9 = &v2[-2];\n    v2[-1] = 45;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405e30",
            "funcStartAddr": "0x405e30",
            "funcEndAddr": "0x405e82",
            "decompiledFuncCode": "extern char g_6256d2;\n\nint sub_405e30()\n{\n    unsigned long v1;  // rax\n    unsigned long long v2;  // rax\n\n    if (g_6256d2 == 0)\n    {\n        return v1;\n    }\n    v2 = sub_404ae0();\n    if (v2 == 0)\n    {\n        return v2;\n    }\n    sub_405cd0();\n    sub_405cd0();\n}\n"
        },
        {
            "funcName": "sub_40ace0",
            "funcStartAddr": "0x40ace0",
            "funcEndAddr": "0x40acea",
            "decompiledFuncCode": "int sub_40ace0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e570",
            "funcStartAddr": "0x40e570",
            "funcEndAddr": "0x40e8e0",
            "decompiledFuncCode": "int sub_40e570() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a390",
            "funcStartAddr": "0x40a390",
            "funcEndAddr": "0x40a3f9",
            "decompiledFuncCode": "extern char g_41b08a;\n\nint sub_40a390()\n{\n    char *v1;  // rbx\n    char *v2;  // rax\n    unsigned long long v3;  // rax\n\n    v1 = (unsigned long long)strrchr();\n    v2 = strrchr();\n    if (v2 != 0)\n    {\n        v1 = (v1 == 0? &g_41b08a : v1);\n    }\n    else\n    {\n        v2 = &g_41b08a;\n    }\n    if (v2 != 0 || v1 != 0)\n    {\n        v3 = strcmp(v1, v2);\n        if ((unsigned int)v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40b9a0",
            "funcStartAddr": "0x40b9a0",
            "funcEndAddr": "0x40b9d4",
            "decompiledFuncCode": "int sub_40b9a0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v4;  // rdi\n    unsigned long v5;  // rsi\n    unsigned long long v6[2];  // rdx\n    char v8;  // al\n\n    if (v4 != 0)\n    {\n        v0 = v5;\n        *((unsigned long long [2])&v1) = v6[1];\n        *((unsigned long long [2])&v2) = *(v6);\n        v8 = sub_40c810() != 0;\n        return rax<8>;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40a280",
            "funcStartAddr": "0x40a280",
            "funcEndAddr": "0x40a2f8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned long long field_88;\n    char padding_90[24];\n    unsigned int field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n    char padding_8c[28];\n    unsigned int field_a8;\n} struct_1;\n\nint sub_40a280()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    struct_1 *v3;  // rsi\n    struct_1 *v4;  // r8\n    char v5;  // al\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v2 = v1->field_a8;\n    v4 = v3;\n    v5 = v1->field_a8 == 9;\n    v7 = v6 | rax<4>;\n    if (v3->field_a8 == 3 || v3->field_a8 == 9 || v7 == 0)\n    {\n        if (v3->field_80 <= v1->field_80 && (v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n        {\n            if (v3->field_80 >= v1->field_80)\n            {\n                v8 = (unsigned int)v1->field_88 - v4->field_88;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v3->field_80 <= v1->field_80 || v7 == 0) && (v7 == 0 || v3->field_80 >= v1->field_80) && (v7 == 0 || (unsigned int)v1->field_88 != v4->field_88) && (v3->field_a8 == 3 || v3->field_80 <= v1->field_80 || v3->field_a8 == 9) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_80 >= v1->field_80) && (v3->field_a8 == 3 || v3->field_a8 == 9 || (unsigned int)v1->field_88 != v4->field_88))\n        {\n            return v8;\n        }\n    }\n    if (v7 == 0)\n    {\n        v8 = 1;\n    }\n    if ((v3->field_a8 != 3 || v3->field_80 > v1->field_80) && (v3->field_a8 != 3 || v7 != 0) && (v3->field_80 > v1->field_80 || v3->field_a8 != 9) && (v3->field_80 > v1->field_80 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "obstack_begin",
            "funcStartAddr": "0x417120",
            "funcEndAddr": "0x417131",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[8];\n    char field_50;\n} struct_0;\n\nint _obstack_begin()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rcx\n    unsigned long v3;  // r8\n\n    v1->field_50 = v1->field_50 & 254;\n    v1->field_38 = v2;\n    v1->field_40 = v3;\n}\n"
        },
        {
            "funcName": "sub_40c6c0",
            "funcStartAddr": "0x40c6c0",
            "funcEndAddr": "0x40c7fc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_41d79e;\nextern unsigned int g_41d7b6;\nextern unsigned int g_41d7e8;\n\nint sub_40c6c0()\n{\n    unsigned long v0;  // [bp-0x20]\n    void tmp_14;  // tmp #14\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned int v6;  // esi\n    unsigned int v7;  // ebp\n    unsigned long v8;  // rbx\n    unsigned long long v9[5];  // rdi\n    unsigned long long v12;  // rdi\n    unsigned long long v13[2];  // rsi\n    struct_0 *v14;  // rax\n    unsigned long long v15;  // rdx\n    unsigned long|unsigned long long v16;  // rbx\n    unsigned long v17;  // xmm1lq\n    uint128_t v18;  // xmm0\n    unsigned long long v19;  // xmm0lq\n    uint128_t v20;  // xmm0\n    uint128_t v21;  // xmm0\n    unsigned long long v22;  // xmm0lq\n\n    v2 = v4;\n    v1 = v5;\n    v7 = v6;\n    v0 = v8;\n    v16 = 0;\n    v13 = *(v9);\n    v12 = v9[1];\n    if (v13 < v12)\n    {\n        while (true)\n        {\n            if (*(v13) == 0)\n            {\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v14 = v13[1];\n                v15 = 1;\n                if (v13[1] != 0)\n                {\n                    do\n                    {\n                        v14 = v14->field_8;\n                        v15 += 1;\n                    }\n                    while (v14 != 0);\n                }\n                v16 = (v16 < v15? v15 : v16);\n                v13 = &v13[2];\n                if (v13 >= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    __fprintf_chk(v7, 0x1, 0x41d79e, v9[4]);\n    __fprintf_chk(v7, 0x1, 0x41d7b6, v17);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, xmm1lq<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v18 = 0;\n        v19 = v9[3];\n        v20 = xmm0<16> * 0x4059000000000000;\n    }\n    else\n    {\n        v21 = 0;\n        v22 = 0 >> 1 | (unsigned long long)(unsigned int)(0 & 1);\n        v20 = xmm0<16> * 0x80b2000000000000;\n        tmp_14 = v17;\n    }\n    __fprintf_chk(v7, 0x1, 0x41d7e8, v19);\n}\n"
        },
        {
            "funcName": "sub_40d4b0",
            "funcStartAddr": "0x40d4b0",
            "funcEndAddr": "0x40d4c7",
            "decompiledFuncCode": "int sub_40d4b0()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_412a20",
            "funcStartAddr": "0x412a20",
            "funcEndAddr": "0x412a41",
            "decompiledFuncCode": "int sub_412a20()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_412bd0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40bb90",
            "funcStartAddr": "0x40bb90",
            "funcEndAddr": "0x40bc64",
            "decompiledFuncCode": "int sub_40bb90()\n{\n    char v0;  // [bp-0x39]\n    char *v2;  // rsi\n    char *v3;  // r12\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rbx\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // r15\n    char *v11;  // rax\n    unsigned long v12;  // rdi\n    unsigned long long *v13;  // rdx\n    unsigned long long v14;  // rax\n    char v15;  // al\n\n    v3 = v2;\n    v4 = (unsigned int)sub_40b870();\n    v5 = (unsigned int)sub_40b8d0();\n    v7 = v4 - v6 + v5;\n    if (v5 != 0)\n    {\n        v5 = (char)(*((char *)(v4 + v5 - 1)) != 47);\n    }\n    v0 = *(v3);\n    if (*(v3) == 47)\n    {\n        do\n        {\n            v3 = &v3[1];\n        }\n        while (*(v3) == 47);\n    }\n    v8 = strlen(v3);\n    v10 = malloc(v5 + v7 + 1 + v8);\n    if (v8 != 0)\n    {\n        v11 = mempcpy(v8, v6, v7);\n        *(v11) = 47;\n        v12 = &v11[v5];\n        if (v13 != 0)\n        {\n            v14 = 0;\n            v15 = v0 == 47;\n            *(v13) = v12 - rax<8>;\n        }\n        *((char *)(unsigned long long)mempcpy(v12, (unsigned int)v3, v8)) = 0;\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_4057b0",
            "funcStartAddr": "0x4057b0",
            "funcEndAddr": "0x40586e",
            "decompiledFuncCode": "extern unsigned int g_6256d4;\n\nint sub_4057b0()\n{\n    char v1;  // dil\n    unsigned int v2;  // esi\n    unsigned int v3;  // edx\n    unsigned long long v4;  // cl\n    unsigned int v5;  // ecx\n    unsigned int v6;  // esi\n    unsigned int|unsigned long|unsigned long long v7;  // rax\n    unsigned int v8;  // esi\n    char v9;  // al\n\n    if (!(v1 != 0))\n    {\n        v7 = 0;\n        if (v3 != 5)\n        {\n            v4 = v5 | 0;\n            if (v4 == 0 && g_6256d4 != 1)\n            {\n                if (v3 != 6)\n                {\n                    v7 = 124;\n                    if (v3 != 1)\n                    {\n                        v9 = v3 == 7;\n                    }\n                }\n                else\n                {\n                    return 64;\n                }\n                if (v3 == 1)\n                {\n                    return 124;\n                }\n            }\n        }\n    }\n    else if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v4 = (char)((v2 & 0xf000) == 0x4000);\n        if (v4 == 0 && g_6256d4 != 1)\n        {\n            v8 = v2 & 0xf000;\n            if (v8 != 0xa000)\n            {\n                v7 = 124;\n                if (v8 != 0x1000)\n                {\n                    v9 = v8 == 0xc000;\n                }\n            }\n            else\n            {\n                return 64;\n            }\n            if (v8 == 0x1000)\n            {\n                return 124;\n            }\n        }\n    }\n    else\n    {\n        v7 = 0;\n        if (g_6256d4 == 3)\n        {\n            v6 = v2 & 73;\n            return !(0 - (unsigned int)(char)(rsi<4> < 1)) & 42;\n        }\n    }\n    if (v1 == 0 && v3 != 5 || v1 != 0 && ((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v7 = 47;\n    }\n    if (v4 == 0 && (v1 == 0 || ((unsigned short)v2 & 0xf000) != 0x8000) && (v1 != 0 || v3 != 5))\n    {\n        v7 = 0;\n    }\n    if (v1 == 0 && v4 == 0 && g_6256d4 != 1 && v3 != 1 && v3 != 5 && v3 != 6 || v4 == 0 && g_6256d4 != 1 && v1 != 0 && v8 != 0xa000 && v8 != 0x1000 && ((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v7 = 0 - v7 & 61;\n    }\n    if (v1 == 0 && v3 == 5 || ((unsigned short)v2 & 0xf000) == 0x8000 && g_6256d4 != 3 && v1 != 0 || v1 == 0 && v4 == 0 && g_6256d4 != 1 && v3 != 1 && v3 != 5 && v3 != 6 || g_6256d4 == 1 && v4 == 0 && (v1 == 0 || ((unsigned short)v2 & 0xf000) != 0x8000) && (v1 != 0 || v3 != 5) || v4 == 0 && g_6256d4 != 1 && v1 != 0 && v8 != 0xa000 && v8 != 0x1000 && ((unsigned short)v2 & 0xf000) != 0x8000 || v4 != 0 && (v1 == 0 && v3 != 5 || v1 != 0 && ((unsigned short)v2 & 0xf000) != 0x8000))\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_412bb0",
            "funcStartAddr": "0x412bb0",
            "funcEndAddr": "0x412bc3",
            "decompiledFuncCode": "int sub_412bb0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_4058a0",
            "funcStartAddr": "0x4058a0",
            "funcEndAddr": "0x4058e4",
            "decompiledFuncCode": "extern unsigned long long g_6255b8;\nextern unsigned long long stdout[7];\n\nint sub_4058a0()\n{\n    char *|unsigned long long v1;  // rax\n    unsigned long long v2;  // rbx\n\n    v1 = sub_4057b0();\n    v2 = v1;\n    if (v1 != 0)\n    {\n        v1 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *((unsigned long long *)&v1) = v2;\n        }\n        else\n        {\n            v1 = __overflow();\n        }\n        g_6255b8 = g_6255b8 + 1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40c290",
            "funcStartAddr": "0x40c290",
            "funcEndAddr": "0x40c2a0",
            "decompiledFuncCode": "int sub_40c290()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1 % 8 | v1 * 0x2000000000000000) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_411be0",
            "funcStartAddr": "0x411be0",
            "funcEndAddr": "0x411c14",
            "decompiledFuncCode": "int sub_411be0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_412b80();\n}\n"
        },
        {
            "funcName": "sub_4058f0",
            "funcStartAddr": "0x4058f0",
            "funcEndAddr": "0x405958",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n    char padding_6c[60];\n    unsigned int field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned long long field_68;\n    char padding_70[56];\n    unsigned int field_a8;\n} struct_1;\n\nint sub_4058f0()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_1 *v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9)\n    {\n        if (v1->field_60 <= v6->field_60 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n        {\n            if (v1->field_60 >= v6->field_60)\n            {\n                v7 = (unsigned int)v6->field_68 - v1->field_68;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v5 == 0 || v1->field_60 <= v6->field_60) && (v5 == 0 || (unsigned int)v6->field_68 != v1->field_68) && (v5 == 0 || v1->field_60 >= v6->field_60) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_60 <= v6->field_60) && (v6->field_a8 == 3 || v6->field_a8 == 9 || (unsigned int)v6->field_68 != v1->field_68) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_60 >= v6->field_60))\n        {\n            return v7;\n        }\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v1->field_60 > v6->field_60) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v1->field_60 > v6->field_60) && (v6->field_a8 != 9 || v1->field_60 > v6->field_60))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b7b0",
            "funcStartAddr": "0x40b7b0",
            "funcEndAddr": "0x40b808",
            "decompiledFuncCode": "int sub_40b7b0()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_40b870();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bb70",
            "funcStartAddr": "0x40bb70",
            "funcEndAddr": "0x40bb88",
            "decompiledFuncCode": "int sub_40bb70()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40bb90();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_412bd0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x40555c",
            "decompiledFuncCode": "extern char g_6256ed;\n\nint sub_405520()\n{\n    unsigned int v0;  // [bp-0xc]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // rbx\n    char v4;  // dl\n    unsigned int v5;  // esi\n\n    v1 = v3;\n    if (v4 != 0 && g_6256ed == 0)\n    {\n        v0 = v5;\n        sub_40e160();\n    }\n}\n"
        },
        {
            "funcName": "sub_40b9db",
            "funcStartAddr": "0x40b9db",
            "funcEndAddr": "0x40bb46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n    char field_6;\n    char field_7;\n    char field_8;\n    char field_9;\n    unsigned short field_a;\n} struct_0;\n\nint sub_40b9db()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n    struct_0 *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v1 = 45;\n    if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v1 = 100;\n        if (((unsigned short)v2 & 0xf000) != 0x4000)\n        {\n            v1 = 98;\n            if (((unsigned short)v2 & 0xf000) != 0x6000)\n            {\n                v1 = 99;\n                if (((unsigned short)v2 & 0xf000) != 0x2000)\n                {\n                    v1 = 108;\n                    if (((unsigned short)v2 & 0xf000) != 0xa000)\n                    {\n                        v1 = 112;\n                        if (((unsigned short)v2 & 0xf000) != 0x1000)\n                        {\n                            v1 = (unsigned int)((v2 & 0xf000) != 0xc000? 63 : 115);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *((unsigned long long *)&v3->field_0) = v1;\n    v3->field_1 = (0 - (unsigned int)(char)((v2 & 0x100) < 1) & -69) + 114;\n    v3->field_2 = (0 - (unsigned int)(char)((v2 & 128) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x800) != 0)\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -32) + 115;\n    }\n    else\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_3) = v4;\n    v3->field_4 = (0 - (unsigned int)(char)((v2 & 32) < 1) & -69) + 114;\n    v3->field_5 = (0 - (unsigned int)(char)((v2 & 16) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x400) != 0)\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -32) + 115;\n    }\n    else\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_6) = v5;\n    v3->field_7 = (0 - (unsigned int)(char)((v2 & 4) < 1) & -69) + 114;\n    v3->field_8 = (0 - (unsigned int)(char)((v2 & 2) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x200) != 0)\n    {\n        v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -32) + 116;\n        v3->field_a = 32;\n        return 32;\n    }\n    v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -75) + 120;\n    v3->field_a = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "sub_40a400",
            "funcStartAddr": "0x40a400",
            "funcEndAddr": "0x40a469",
            "decompiledFuncCode": "extern char g_41b08a;\n\nint sub_40a400()\n{\n    char *v1;  // rbx\n    char *v2;  // rax\n    unsigned long long v3;  // rax\n\n    v1 = (unsigned long long)strrchr();\n    v2 = strrchr();\n    if (v2 != 0)\n    {\n        v1 = (v1 == 0? &g_41b08a : v1);\n    }\n    else\n    {\n        v2 = &g_41b08a;\n    }\n    if (v2 != 0 || v1 != 0)\n    {\n        v3 = strcmp(v1, v2);\n        if ((unsigned int)v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_412980",
            "funcStartAddr": "0x412980",
            "funcEndAddr": "0x41299a",
            "decompiledFuncCode": "int sub_412980()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_412bd0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4173c0",
            "funcStartAddr": "0x4173c0",
            "funcEndAddr": "0x417401",
            "decompiledFuncCode": "int sub_4173c0()\n{\n    unsigned int *v1;  // rbx\n    unsigned int|unsigned long v2;  // r13d\n\n    v1 = __errno_location();\n    v2 = *(v1);\n    if ((char)sub_417340() == 0)\n    {\n        v2 = *(v1);\n    }\n    sub_417390();\n    *((unsigned long *)&v1) = v2;\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_4129e0",
            "funcStartAddr": "0x4129e0",
            "funcEndAddr": "0x412a10",
            "decompiledFuncCode": "int sub_4129e0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_412bd0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40ca20",
            "funcStartAddr": "0x40ca20",
            "funcEndAddr": "0x40ca51",
            "decompiledFuncCode": "int sub_40ca20()\n{\n    void tmp_16;  // tmp #16\n    char *v1;  // rdi\n    unsigned long long v2;  // rcx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n\n    v2 = *(v1);\n    v4 = 0;\n    if (*(v1) != 0)\n    {\n        do\n        {\n            v1 = &v1[1];\n            tmp_16 = v4 * 31 + v2;\n            v2 = *(v1);\n            v4 = (0 CONCAT tmp_16) % v3 >> 64;\n        }\n        while ((char)v2 != 0);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40d260",
            "funcStartAddr": "0x40d260",
            "funcEndAddr": "0x40d41f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_1 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[4];\n    unsigned int field_4;\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\nint sub_40d260()\n{\n    unsigned long long *v0;  // [bp-0x20]\n    void tmp_10;  // tmp #10\n    void tmp_15;  // tmp #15\n    struct_0 *v2;  // rdi\n    unsigned long long v3[10];  // rbx\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rax\n    uint128_t v7;  // xmm0\n    unsigned long long v8;  // rax\n    unsigned int v9;  // ymm0\n    unsigned long long v10;  // rdx\n    unsigned int|unsigned long|uint128_t|unsigned long long v11;  // xmm0lq\n    uint128_t v12;  // xmm1\n    unsigned long long v13;  // rax\n    uint128_t v14;  // xmm1\n    unsigned int v15;  // ymm1\n    unsigned long long v16;  // xmm1lq\n    struct_2 *v18;  // rdx\n    uint128_t v19;  // xmm0\n    uint128_t v20;  // xmm0\n    unsigned int v21;  // ymm0\n    unsigned int|unsigned long|uint128_t v22;  // xmm1\n    uint128_t v23;  // xmm1\n    unsigned int v24;  // ymm1\n    uint128_t v25;  // xmm2\n    unsigned int v26;  // ymm2\n    unsigned long long v27;  // xmm2lq\n    uint128_t v28;  // xmm0\n    struct_3 *v30;  // rdi\n    void *v31;  // r12\n\n    v3 = v2;\n    if (sub_40c2e0() != 0)\n    {\n        v3[4] = v3[4] - 1;\n        if (*(v0) == 0)\n        {\n            v5 = v3[3];\n            v6 = v3[3] - 1;\n            v3[3] = v3[3] - 1;\n            if (!((char)(v5 - 1 >> 63)))\n            {\n                v11 = 0;\n                v10 = v3[5];\n                v11 = v2->field_18 - 1;\n                v8 = v3[2];\n            }\n            else\n            {\n                v7 = 0;\n                tmp_10 = v6 % 2 | (unsigned int)v6 & 1;\n                v8 = v3[2];\n                v9 = tmp_10;\n                v10 = v3[5];\n                v11 = (unsigned long long)(unsigned int)xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = 0;\n                v12 = (unsigned int)v8;\n            }\n            else\n            {\n                tmp_15 = v8;\n                v13 = (unsigned int)v8 & 1;\n                v14 = 0;\n                v15 = tmp_15 >> 1 | v13;\n                v12 = xmm1<16> * 2;\n            }\n            xmm1<8> = Conv(128->64, (xmm1<16> * Conv(32->128, Load(addr=rdx<8>, size=4, endness=Iend_LE))))\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                sub_40c400();\n                v18 = v3[5];\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v19 = 0;\n                    v19 = (unsigned int)v2->field_10;\n                }\n                else\n                {\n                    v20 = 0;\n                    v21 = v2->field_10 >> 1 | (unsigned int)v2->field_10 & 1;\n                    v19 = xmm0<16> * 2;\n                }\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v22 = 0;\n                    v22 = v2->field_18;\n                }\n                else\n                {\n                    v23 = 0;\n                    v24 = v2->field_18 >> 1 | (unsigned int)v2->field_18 & 1;\n                    v22 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n                }\n                v25 = 0;\n                v26 = *(v2->field_28);\n                v27 = xmm2<16> * v19;\n                if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n                {\n                    xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x4<64>), size=4, endness=Iend_LE)))\n                    if (v18->field_10 == 0)\n                    {\n                        xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE)))\n                    }\n                    if (sub_40cda0() == 0)\n                    {\n                        v30 = v3[9];\n                        if (v3[9] != 0)\n                        {\n                            while (true)\n                            {\n                                v31 = v30->field_8;\n                                free(v30);\n                                v30 = v31;\n                                if (v31 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v3[9] = 0;\n                    }\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_411f10",
            "funcStartAddr": "0x411f10",
            "funcEndAddr": "0x411f1a",
            "decompiledFuncCode": "int sub_411f10()\n{\n}\n"
        },
        {
            "funcName": "sub_411c20",
            "funcStartAddr": "0x411c20",
            "funcEndAddr": "0x411c2f",
            "decompiledFuncCode": "extern int512_t g_6258e0;\n\nint sub_411c20()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6258e0 : v1));\n}\n"
        },
        {
            "funcName": "sub_40c870",
            "funcStartAddr": "0x40c870",
            "funcEndAddr": "0x40c8af",
            "decompiledFuncCode": "int sub_40c870()\n{\n    unsigned long long v1[5];  // rdi\n    unsigned long long *v2;  // rdx\n    unsigned long long v3;  // rax\n\n    if (v1[4] != 0)\n    {\n        v2 = *(v1);\n        if (*(v1) < v1[1])\n        {\n            while (true)\n            {\n                v3 = *(v2);\n                if (*(v2) == 0)\n                {\n                    v2 = &v2[2];\n                }\n                else\n                {\n                    return v3;\n                }\n            }\n        }\n        abort(); /* do not return */\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_411e50",
            "funcStartAddr": "0x411e50",
            "funcEndAddr": "0x411ee5",
            "decompiledFuncCode": "extern struct_0 *g_624618;\nextern unsigned long long g_624620;\nextern unsigned long long g_624628;\nextern unsigned int g_624630;\nextern unsigned long long g_6257e0;\n\nint sub_411e50()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_624630;\n    if (g_624630 > 1)\n    {\n        v2 = &g_624618[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_624618[(unsigned long long)(g_624630 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_624618->field_8 != 6445024)\n    {\n        v1 = free(g_624618->field_8);\n        g_624620 = 0x100;\n        g_624628 = &g_6257e0;\n    }\n    if (g_624618 != 6440480)\n    {\n        v1 = free(g_624618);\n        g_624618 = &g_624620;\n    }\n    g_624630 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_416e60",
            "funcStartAddr": "0x416e60",
            "funcEndAddr": "0x416e78",
            "decompiledFuncCode": "int sub_416e60()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_4167b0();\n}\n"
        },
        {
            "funcName": "sub_411e40",
            "funcStartAddr": "0x411e40",
            "funcEndAddr": "0x411e4a",
            "decompiledFuncCode": "int sub_411e40()\n{\n}\n"
        },
        {
            "funcName": "sub_417940",
            "funcStartAddr": "0x417940",
            "funcEndAddr": "0x417958",
            "decompiledFuncCode": "int sub_417940()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40b810();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_412bd0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_412100",
            "funcStartAddr": "0x412100",
            "funcEndAddr": "0x41210a",
            "decompiledFuncCode": "int sub_412100()\n{\n}\n"
        },
        {
            "funcName": "sub_412d10",
            "funcStartAddr": "0x412d10",
            "funcEndAddr": "0x412d36",
            "decompiledFuncCode": "int sub_412d10()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_412bd0(); /* do not return */\n        }\n    }\n    if (*(v3) != 12 || v2 != 0)\n    {\n        v2 = (unsigned int)sub_415be0();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_415be0",
            "funcStartAddr": "0x415be0",
            "funcEndAddr": "0x416085",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[11];\n    char field_13;\n    char field_14;\n} struct_0;\n\nextern unsigned int g_41b371;\nextern unsigned int g_41d793;\nextern unsigned int g_41d794;\n\nint sub_415be0()\n{\n    unsigned int|unsigned long long v0;  // [bp-0x120]\n    unsigned long long v1;  // [bp-0x118]\n    void *|unsigned long long v2;  // [bp-0x110]\n    void *v3;  // [bp-0x108]\n    unsigned long long v4;  // [bp-0x100]\n    char v5;  // [bp-0xe9]\n    char *|unsigned long v6;  // [bp-0xe8]\n    unsigned long long v7;  // [bp-0xe0]\n    unsigned long v8;  // [bp-0xd8]\n    unsigned long v9;  // [bp-0xd0]\n    char v10;  // [bp-0xc8]\n    unsigned long long v11;  // [bp-0xc0]\n    unsigned int v12;  // [bp-0xb0]\n    void *v14;  // rdi\n    unsigned int v15;  // rsi\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r14\n    unsigned long long v19;  // rax\n    unsigned int|unsigned long v20;  // r15d\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rbp\n    unsigned long long v24;  // r13\n    struct_0 *v25;  // rax\n    unsigned long long v26;  // rdx\n    void *v27;  // rbx\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // r13\n    unsigned long v30;  // r14\n    unsigned int v31;  // rax\n    unsigned long long v33;  // r8\n    unsigned long v38;  // rbx\n    unsigned long v39;  // rdx\n    unsigned int|unsigned long long v41;  // rbx\n    unsigned int *v42;  // r12\n\n    v3 = v14;\n    if (v15 == 0)\n    {\n        v4 = 0x1000;\n        if (v14 != 0)\n        {\n            v2 = 0;\n            *(__errno_location()) = 22;\n        }\n    }\n    else\n    {\n        *((unsigned int *)&v4) = v15;\n        if (v3 != 0)\n        {\n            v2 = v3;\n        }\n    }\n    if (v15 == 0 && v14 == 0 || v3 == 0 && v15 != 0)\n    {\n        v2 = malloc(v4);\n    }\n    if (v14 == 0 && v2 != 0 || v15 != 0 && v3 != 0 || v15 != 0 && v2 != 0)\n    {\n        v16 = v2 + v4;\n        *((char *)(v2 + v4 - 1)) = 0;\n        v17 = __lxstat(0x1, 0x41d794, (unsigned int)&v10);\n        if (v17 >= 0)\n        {\n            v20 = *((long long *)&v10);\n            v18 = v11;\n            v0 = *((long long *)&v10);\n            v19 = __lxstat(0x1, 0x41b371, (unsigned int)&v10);\n            if (v19 >= 0)\n            {\n                v6 = v16 - 1;\n                v8 = v11;\n                v7 = *((long long *)&v10);\n                v5 = *((long long *)&v10) != *((long long *)&v10) | v11 != v11;\n                if (v18 != v11 || v20 != *((long long *)&v10))\n                {\n                    v23 = 0;\n                    v20 = -100;\n                    v42 = __errno_location();\n                    while (true)\n                    {\n                        v20 = openat(v20, 0x41d793, 0x0);\n                        if ((unsigned int)v20 >= 0)\n                        {\n                            v21 = __fxstat(0x1, v20, (unsigned int)&v10);\n                            if (v21 == 0)\n                            {\n                                if (v23 != 0)\n                                {\n                                    v22 = closedir();\n                                }\n                                if (v23 == 0 || v22 == 0)\n                                {\n                                    v1 = *((long long *)&v10);\n                                    v9 = v11;\n                                    v23 = fdopendir(v20);\n                                    if (v23 != 0)\n                                    {\n                                        v24 = v5;\n                                        while (true)\n                                        {\n                                            *(v42) = 0;\n                                            v25 = readdir();\n                                            if (v25 == 0)\n                                            {\n                                                v41 = *(v42);\n                                                if (*(v42) == 0 && v24 != 0)\n                                                {\n                                                    rewinddir(v23);\n                                                    v25 = readdir();\n                                                    if (v25 != 0)\n                                                    {\n                                                        v24 = 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v41 = *(v42);\n                                                    }\n                                                }\n                                                if (v25 == 0 || v24 == 0 || *(v42) != 0)\n                                                {\n                                                    if ((unsigned int)v41 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    *(v42) = 2;\n                                                    v41 = 2;\n                                                }\n                                            }\n                                            if (v25 != 0 || *(v42) == 0 && v25 != 0 && v24 != 0)\n                                            {\n                                                if (v24 != 0 && (v25->field_13 == 46 || v25 != 0) && (v25->field_13 != 46 || v25->field_14 != 0) && (v25->field_13 != 46 || *((short *)&v25->field_14) != 46) && (v25->field_14 != 0 || v25 != 0) && (*((short *)&v25->field_14) != 46 || v25 != 0))\n                                                {\n                                                    v24 = v26;\n                                                }\n                                                if ((v25 == 0 || v25->field_13 != 46 || v25->field_14 != 0) && (v25 == 0 || v25->field_13 != 46 || *((short *)&v25->field_14) != 46) && (v25->field_13 != 46 || v25->field_14 != 0 || v25 != 0) && (v25->field_13 != 46 || *((short *)&v25->field_14) != 46 || v25 != 0))\n                                                {\n                                                    v27 = &v25->field_13;\n                                                    v28 = __fxstatat(0x1, v20, (unsigned int)v25 + 19, (unsigned int)&v10, 0x100);\n                                                    v29 = &v6[-1 * v2];\n                                                    v30 = strlen(v27);\n                                                    if (v29 <= v30)\n                                                    {\n                                                        if (v15 == 0)\n                                                        {\n                                                            v31 = v4 + (v4 <= v30? v30 : v4);\n                                                            *((int *)&v6) = (v4 <= v30? v30 : v4);\n                                                            *((unsigned long long *)&v0) = v4 + (v4 <= v30? v30 : v4);\n                                                            if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                            {\n                                                                v2 = realloc(v2, v31);\n                                                                v6 = memcpy(v2 + v6 + v29, v2 + v29, v4 - v29);\n                                                                v4 = *((long long *)&v0);\n                                                            }\n                                                            if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0)\n                                                            {\n                                                                *(v42) = 12;\n                                                                v41 = 12;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v42) = 34;\n                                                            v41 = 34;\n                                                        }\n                                                    }\n                                                    if (v29 > v30 || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                    {\n                                                        v33 = memcpy(&v6[-1 * v30], v27, v30);\n                                                        v6 = v33 - 1;\n                                                        *((char *)(v33 - 1)) = 47;\n                                                        v0 = v1;\n                                                        if (v7 != v1 || v8 != v9)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (closedir() != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v16 = v2 + v4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if ((v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 <= v30 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0 || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 > v30) && v7 == v1 || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 <= v30 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0 || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 > v30)\n                                        {\n                                            v20 = openat(v20, 0x41d793, 0x0);\n                                        }\n                                        else if ((v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 <= v30 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0 || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 > v30) && v7 == v1 && v8 == v9)\n                                        {\n                                            v41 = *(v42);\n                                        }\n                                        else if ((unsigned int)v41 == 0 && v25 == 0 && (v25 == 0 || v24 == 0 || *(v42) != 0) || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 <= v30 && v15 == 0 && (char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 <= v30 && v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 == 0 || v25 == 0 && (v25 == 0 || v24 == 0 || *(v42) != 0) || v28 == 0 && ((unsigned short)v12 & 0xf000) == 0x4000 && (v25->field_0 == v18 || v24 == 0 || v1 != v0 || v25->field_13 != 46) && *((long long *)&v10) == v0 && v29 <= v30 && v15 != 0)\n                                        {\n                                            closedir();\n                                        }\n                                    }\n                                }\n                                if ((v23 == 0 || v23 != 0) && (v23 == 0 || v22 != 0))\n                                {\n                                    v41 = *(v42);\n                                }\n                            }\n                            else\n                            {\n                                v41 = *(v42);\n                                if (v23 != 0)\n                                {\n                                    closedir();\n                                }\n                            }\n                            if ((v23 == 0 || v23 != 0 || v21 != 0) && (v23 == 0 || v22 != 0 || v21 != 0))\n                            {\n                                close(v20);\n                            }\n                        }\n                        else\n                        {\n                            v41 = *(v42);\n                        }\n                        if (((unsigned int)v20 < 0 || v21 == 0) && ((unsigned int)v20 < 0 || v23 != 0) && (v23 == 0 || (unsigned int)v20 < 0 || v22 == 0) && (v23 != 0 || (unsigned int)v20 >= 0))\n                        {\n                            closedir();\n                        }\n                        break;\n                    }\n                    if (v23 == 0 || v23 != 0 && v22 != 0)\n                    {\n                        if (v23 != 0 && (v23 == 0 || v22 == 0))\n                        {\n                            v41 = *(v42);\n                        }\n                        else if (true)\n                        {\n                            free(v2);\n                        }\n                        else\n                        {\n                            *((unsigned long long *)&v42) = v41;\n                            v2 = 0;\n                        }\n                    }\n                }\n                v6[-1] = 47;\n                v6 = &v6[-1];\n                v38 = v16 + -0x1 * v6;\n                v39 = v38;\n                memmove(v2, v6, v39);\n                if (v15 == 0)\n                {\n                    v3 = realloc(v2, v39);\n                }\n                *((int *)&v2) = (v3 == 0? v2 : v3);\n            }\n        }\n        if (v17 < 0 || v19 < 0)\n        {\n            v42 = __errno_location();\n        }\n        if (v17 < 0 || v19 < 0 || v18 != v11 || v20 != *((long long *)&v10))\n        {\n            v41 = *(v42);\n            free(v2);\n            *((unsigned long long *)&v42) = v41;\n            v2 = 0;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405460",
            "funcStartAddr": "0x405460",
            "funcEndAddr": "0x40550b",
            "decompiledFuncCode": "extern unsigned long long g_6255b8;\nextern unsigned long long stdout[7];\n\nint sub_405460()\n{\n    unsigned long long v1;  // rdx\n    char *v3;  // rdi\n    char *v6;  // rdx\n    unsigned int|unsigned long v7;  // rbx\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rax\n\n    if (v3 != 0)\n    {\n        v7 = (unsigned int)((unsigned int)(v1 - (unsigned int)sub_40eb70()) < 0? 0 : (unsigned int)(v1 - (unsigned int)sub_40eb70()));\n        fputs_unlocked(v3, stdout);\n        v8 = v7 + strlen(v3);\n        do\n        {\n            v6 = stdout[5];\n            if (stdout[5] < stdout[6])\n            {\n                stdout[5] = stdout[5] + 1;\n                *(v6) = 32;\n            }\n            else\n            {\n                __overflow();\n            }\n            v7 -= 1;\n        }\n        while (v7 != -1);\n    }\n    else\n    {\n        __printf_chk(0x1, \"%*lu \");\n        v8 = v1;\n    }\n    v9 = v8 + g_6255b8 + 1;\n    g_6255b8 = v8 + g_6255b8 + 1;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_416de0",
            "funcStartAddr": "0x416de0",
            "funcEndAddr": "0x416df8",
            "decompiledFuncCode": "int sub_416de0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_416d80();\n}\n"
        },
        {
            "funcName": "sub_418030",
            "funcStartAddr": "0x418030",
            "funcEndAddr": "0x418147",
            "decompiledFuncCode": "int sub_418030() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40d440",
            "funcStartAddr": "0x40d440",
            "funcEndAddr": "0x40d467",
            "decompiledFuncCode": "int sub_40d440()\n{\n    unsigned long v0;  // [bp+0x8]\n    unsigned long v1;  // rsi\n\n    return (0 CONCAT (unsigned int)sub_417960() ^ v0) % v1 >> 64;\n}\n"
        },
        {
            "funcName": "sub_40e910",
            "funcStartAddr": "0x40e910",
            "funcEndAddr": "0x40e9a5",
            "decompiledFuncCode": "int sub_40e910()\n{\n    unsigned int v0;  // [bp-0x40]\n    unsigned int v1;  // [bp-0x3c]\n    unsigned long long v3;  // r12\n    unsigned int v4;  // edx\n    unsigned int v5;  // ecx\n    unsigned long long *v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // rax\n\n    v3 = 0;\n    v0 = v4;\n    v1 = v5;\n    v7 = *(v6);\n    while (true)\n    {\n        v8 = v7 + 1;\n        v10 = realloc(v3, v7 + 1);\n        if (v10 != 0)\n        {\n            *(v6) = *(v6);\n            v7 = sub_40e570();\n            if (v7 != -1)\n            {\n                v3 = v10;\n                if (v8 > v7)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v10;\n                v10 = 0;\n                free(v9);\n            }\n        }\n        else\n        {\n            free(v3);\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_40c5e0",
            "funcStartAddr": "0x40c5e0",
            "funcEndAddr": "0x40c5e5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_0;\n\nint sub_40c5e0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_18;\n}\n"
        },
        {
            "funcName": "sub_4052c0",
            "funcStartAddr": "0x4052c0",
            "funcEndAddr": "0x40536f",
            "decompiledFuncCode": "extern unsigned long long g_625680;\nextern unsigned long long stdout[7];\n\nint sub_4052c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r12\n    unsigned long long v7;  // r12\n    unsigned long long v8;  // rbx\n    unsigned long v9;  // rax\n    unsigned long long v10;  // rbp\n    char *v11;  // rsi\n    unsigned long|unsigned long long v12;  // rax\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rbx\n    unsigned long v15;  // rdx\n    unsigned long long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n\n    if (v4 < v5)\n    {\n        v2 = v6;\n        v7 = v5;\n        v1 = stack_base + 0;\n        v0 = v8;\n        v14 = v4;\n        while (true)\n        {\n            v13 = g_625680;\n            v10 = v14 + 1;\n            v11 = stdout[5];\n            if ((0 CONCAT v7) % v13 > (0 CONCAT v14) % v13 && g_625680 != 0)\n            {\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v11) = 9;\n                }\n                else\n                {\n                    __overflow();\n                    v13 = g_625680;\n                }\n                v12 = (0 CONCAT v14) % v13;\n                v15 = (0 CONCAT v14) % v13 >> 64;\n                v16 = v13 + v14;\n                v14 = v16 - v15;\n                if (v16 - v15 >= v7)\n                {\n                    break;\n                }\n            }\n            if ((0 CONCAT v7) % v13 <= (0 CONCAT v14) % v13 || g_625680 == 0)\n            {\n                if (stdout[5] < stdout[6])\n                {\n                    v12 = &v11[1];\n                    stdout[5] = &v11[1];\n                    *(v11) = 32;\n                }\n                else\n                {\n                    v12 = __overflow();\n                }\n                v14 = v10;\n                if (v10 >= v7)\n                {\n                    break;\n                }\n            }\n        }\n        v17 = v0;\n        v18 = v2;\n        return v12;\n    }\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40b8d0",
            "funcStartAddr": "0x40b8d0",
            "funcEndAddr": "0x40b8f7",
            "decompiledFuncCode": "int sub_40b8d0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_411c30",
            "funcStartAddr": "0x411c30",
            "funcEndAddr": "0x411c3f",
            "decompiledFuncCode": "extern int512_t g_6258e0;\n\nint sub_411c30()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6258e0 : v1)) = v2;\n    return &g_6258e0;\n}\n"
        },
        {
            "funcName": "sub_412900",
            "funcStartAddr": "0x412900",
            "funcEndAddr": "0x412974",
            "decompiledFuncCode": "extern unsigned int g_41eab2;\nextern unsigned int g_41eadd;\nextern unsigned int g_41ed10;\n\nint sub_412900()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41eab2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41eadd, 0x5));\n    dcgettext(0x0, 0x41ed10, 0x5);\n}\n"
        },
        {
            "funcName": "sub_406af0",
            "funcStartAddr": "0x406af0",
            "funcEndAddr": "0x406c46",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[144];\n    char field_b8;\n} struct_0;\n\nextern char g_6256bc;\nextern unsigned int g_6256d4;\nextern char g_6256ec;\nextern char g_625725;\n\nint sub_406af0()\n{\n    struct_0 *v2;  // rdi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rcx\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rax\n\n    sub_405e30();\n    if (g_6256bc != 0)\n    {\n        if (v2->field_b8 != 0 && v2->field_20 != 0)\n        {\n            v3 = (unsigned int)sub_40e520();\n        }\n        __printf_chk(0x1, \"%*s \");\n    }\n    if (g_6256ec != 0)\n    {\n        if (v2->field_b8 != 0)\n        {\n            v5 = (unsigned int)sub_40d5d0();\n        }\n        __printf_chk(0x1, \"%*s \");\n    }\n    if (g_625725 != 0)\n    {\n        __printf_chk(0x1, \"%*s \");\n    }\n    v8 = (unsigned int)sub_406690();\n    if (g_6256d4 == 0)\n    {\n        return stack_base + 0;\n    }\n    v9 = sub_4058a0();\n    return v9 + v9;\n}\n"
        },
        {
            "funcName": "sub_407b0d",
            "funcStartAddr": "0x407b0d",
            "funcEndAddr": "0x407c69",
            "decompiledFuncCode": "int sub_407b0d() { crash_skku;\n}"
        },
        {
            "funcName": "sub_412b50",
            "funcStartAddr": "0x412b50",
            "funcEndAddr": "0x412b7e",
            "decompiledFuncCode": "int sub_412b50()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_412bd0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_411c80",
            "funcStartAddr": "0x411c80",
            "funcEndAddr": "0x411c93",
            "decompiledFuncCode": "extern int512_t g_6258e0;\n\nint sub_411c80()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6258e0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6258e0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_416d80",
            "funcStartAddr": "0x416d80",
            "funcEndAddr": "0x416dd6",
            "decompiledFuncCode": "extern unsigned int g_624634;\nextern unsigned int g_624638;\nextern unsigned int g_62463c;\nextern unsigned int g_625920;\nextern unsigned int g_625924;\nextern unsigned int g_625928;\nextern unsigned long long g_625930;\nextern unsigned long long g_625970;\n\nint sub_416d80()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_625920 = g_62463c;\n    g_625924 = g_624638;\n    v1 = (unsigned int)v2;\n    v0 = &g_625920;\n    g_62463c = g_625920;\n    g_625970 = g_625930;\n    g_624634 = g_625928;\n    return sub_4167b0();\n}\n"
        },
        {
            "funcName": "sub_4160b0",
            "funcStartAddr": "0x4160b0",
            "funcEndAddr": "0x416185",
            "decompiledFuncCode": "int sub_4160b0()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40a030",
            "funcStartAddr": "0x40a030",
            "funcEndAddr": "0x40a091",
            "decompiledFuncCode": "int sub_40a030()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = strrchr();\n    strrchr();\n    v2 = sub_4050d0();\n    if ((unsigned int)v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c5f0",
            "funcStartAddr": "0x40c5f0",
            "funcEndAddr": "0x40c5f5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\nint sub_40c5f0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_20;\n}\n"
        },
        {
            "funcName": "sub_405c70",
            "funcStartAddr": "0x405c70",
            "funcEndAddr": "0x405cb8",
            "decompiledFuncCode": "extern unsigned long long g_624448;\n\nint sub_405c70()\n{\n    if (g_624448 == 0)\n    {\n        sub_405cd0();\n        sub_405cd0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40ccc0",
            "funcStartAddr": "0x40ccc0",
            "funcEndAddr": "0x40cd90",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40ccc0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long long v4[10];  // rdi\n    unsigned long long v5[10];  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // rdi\n    unsigned long long v9[2];  // rbx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12[2];  // rbp\n    struct_0 *v13;  // rdi\n    void *v14;  // rbx\n    struct_0 *v15;  // rdi\n    void *v16;  // rbx\n\n    v1 = v3;\n    v5 = v4;\n    v0 = v6;\n    v12 = *(v4);\n    v11 = v4[1];\n    if (v4[8] != 0 && v4[4] != 0 && *(v4) < v4[1])\n    {\n        while (true)\n        {\n            v7 = *(v12);\n            if (*(v12) == 0)\n            {\n                v12 = &v12[2];\n                if (v11 <= v12)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v12;\n                while (true)\n                {\n                    *((long long *)(r12<8> + 64))();\n                    v9 = v9[1];\n                    if (v9 == 0)\n                    {\n                        break;\n                    }\n                    v10 = *(v9);\n                }\n                v11 = v5[1];\n                v12 = &v12[2];\n                if (v5[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n        v12 = *(v5);\n    }\n    if ((v4[8] == 0 || v4[4] == 0 || *(v4) < v4[1]) && v12 < v11)\n    {\n        do\n        {\n            v13 = v12[1];\n            if (v12[1] != 0)\n            {\n                while (true)\n                {\n                    v14 = v13->field_8;\n                    free(v13);\n                    v13 = v14;\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v12 = &v12[2];\n        }\n        while (v5[1] > v12);\n    }\n    v15 = v5[9];\n    if (v5[9] != 0)\n    {\n        while (true)\n        {\n            v16 = v15->field_8;\n            free(v15);\n            v15 = v16;\n            if (v16 == 0)\n            {\n                break;\n            }\n        }\n    }\n    free(*(v5));\n}\n"
        },
        {
            "funcName": "sub_4050d0",
            "funcStartAddr": "0x4050d0",
            "funcEndAddr": "0x4050d8",
            "decompiledFuncCode": "int sub_4050d0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n}\n"
        },
        {
            "funcName": "sub_40dfa0",
            "funcStartAddr": "0x40dfa0",
            "funcEndAddr": "0x40e131",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4315280];\n    unsigned int field_41d890;\n} struct_0;\n\nextern int512_t g_41d890;\n\nint sub_40dfa0()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned int *v2;  // rsi\n    unsigned long long *v4;  // rdx\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rax\n    char *v8;  // rbx\n    unsigned long long v9;  // rbp\n    struct_0 *v10;  // rax\n    unsigned int v11;  // ebp\n    unsigned long long v12;  // rdx\n    unsigned long long v13;  // rsi\n\n    v8 = v6;\n    if (v6 == 0)\n    {\n        v8 = getenv(\"BLOCK_SIZE\");\n        if (v8 == 0)\n        {\n            v8 = getenv(\"BLOCKSIZE\");\n            if (v8 == 0)\n            {\n                v7 = getenv(\"POSIXLY_CORRECT\");\n                if (v7 != 0)\n                {\n                    *(v4) = 0x200;\n                    v7 = 0;\n                    *(v2) = 0;\n                }\n                else\n                {\n                    *(v4) = 0x400;\n                    *(v2) = 0;\n                }\n            }\n        }\n    }\n    if (v6 != 0 || v8 != 0 || v8 != 0)\n    {\n        v9 = 0;\n        if (*(v8) == 39)\n        {\n            v8 = &v8[1];\n            v9 = 4;\n        }\n        v10 = sub_40acf0();\n        if ((unsigned int)v10 >= 0)\n        {\n            *(v4) = 1;\n            v11 = (unsigned int)v9 | *((int *)(0x4 * v10 + (char *)&g_41d890));\n            v7 = 0;\n            *(v2) = v11;\n        }\n        else\n        {\n            v7 = sub_4132b0();\n            if ((unsigned int)v7 == 0)\n            {\n                if (((unsigned long long)*(v8) - 48 & 255) > 9)\n                {\n                    if (v8 != v0)\n                    {\n                        do\n                        {\n                            v8 = &v8[1];\n                            v13 = *(v8);\n                        }\n                        while (v8 != v0 && (v13 - 48 & 255) > 9);\n                        if ((v13 - 48 & 255) > 9)\n                        {\n                        }\n                        else\n                        {\n                            v12 = *(v4);\n                            *((unsigned long long *)&v2) = v9;\n                        }\n                    }\n                    if (v8 == v0 || *((char *)(v0 - 1)) != 66)\n                    {\n                        if (*((char *)(v0 - 1)) != 66)\n                        {\n                            v9 |= 128;\n                        }\n                        else\n                        {\n                            v9 = (unsigned int)v9 | 384;\n                        }\n                        if (*((char *)(v0 - 2)) == 105 || *((char *)(v0 - 1)) != 66)\n                        {\n                            v9 = (unsigned int)v9 | 32;\n                        }\n                    }\n                }\n                v12 = *(v4);\n                *((unsigned long long *)&v2) = v9;\n            }\n            else\n            {\n                *(v2) = 0;\n                v12 = *(v4);\n            }\n            if (v12 == 0)\n            {\n                *(v4) = (unsigned long long)((unsigned int)(0 - (unsigned long long)(char)(getenv(\"POSIXLY_CORRECT\") < 1)) & 0x200) + 0x200;\n                return 4;\n            }\n        }\n    }\n    if ((unsigned int)v10 >= 0 || v12 != 0 || v6 == 0 && v8 == 0 && v8 == 0)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_407ca0",
            "funcStartAddr": "0x407ca0",
            "funcEndAddr": "0x40802b",
            "decompiledFuncCode": "int sub_407ca0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4132b0",
            "funcStartAddr": "0x4132b0",
            "funcEndAddr": "0x4136bd",
            "decompiledFuncCode": "int sub_4132b0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // rcx\n    unsigned int|unsigned long long v38;  // rdi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned int v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 0x41f200)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v37 = v30;\n                v38 = 6;\n                do\n                {\n                    v33 = v33 * v37;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v38;\n                    v38 -= 1;\n                }\n                while (v45 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v40 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 18: case 50:\n                v36 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v44 != 1);\n            case 23:\n                v39 = v30;\n                v5 = 8;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n                break;\n            case 24:\n                v34 = v30;\n                v35 = 7;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_411cd0",
            "funcStartAddr": "0x411cd0",
            "funcEndAddr": "0x411d42",
            "decompiledFuncCode": "extern int512_t g_6258e0;\n\nint sub_411cd0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6258e0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_410810();\n}\n"
        },
        {
            "funcName": "sub_4176d0",
            "funcStartAddr": "0x4176d0",
            "funcEndAddr": "0x4176dc",
            "decompiledFuncCode": "int sub_4176d0()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rax\n\n    if (v1 == 1)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_404bb0",
            "funcStartAddr": "0x404bb0",
            "funcEndAddr": "0x404d7d",
            "decompiledFuncCode": "extern unsigned long long g_624410;\nextern char g_624788;\nextern int512_t g_6247a0;\n\nint sub_404bb0()\n{\n    unsigned long v0;  // [bp-0x678]\n    unsigned long v1;  // [bp-0x670]\n    unsigned long v2;  // [bp-0x668]\n    unsigned long long v3;  // [bp-0x650]\n    unsigned long long v4;  // [bp-0x648]\n    unsigned long v5;  // [bp-0x640]\n    char v6;  // [bp-0x638]\n    char v7;  // [bp-0x5b8]\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // rdx\n    unsigned long long v14;  // rbx\n    unsigned int v15;  // r12d\n    unsigned long long v16;  // rbp\n    unsigned long long v17;  // r15\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // r12\n    unsigned long long v20;  // r15\n    char *v21;  // r13\n    unsigned long long v22;  // rbx\n\n    v9 = 0;\n    while (true)\n    {\n        v10 = *((long long *)&((char *)&g_624410)[v9]);\n        v12 = (char)*((char *)*((long long *)&((char *)&g_624410)[v9]));\n        if (*((char *)*((long long *)&((char *)&g_624410)[v9])) != 0)\n        {\n            do\n            {\n                v11 = (char)*((char *)(v10 + 1));\n                if (v12 == 37)\n                {\n                    if ((char)v12 != 37)\n                    {\n                        if ((char)v12 == 98)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v12 = (char)*((char *)(v10 + 2));\n                        v10 += 1;\n                    }\n                }\n                if (v12 != 37 || (char)v12 != 37 && (char)v12 != 98)\n                {\n                    v12 = v11;\n                }\n                v10 += 1;\n            }\n            while (v12 != 0);\n            if ((char)v12 == 37 || v12 != 37 || (char)v12 != 98)\n            {\n                v10 = 0;\n            }\n            else if (v12 == 37 && (char)v12 != 37)\n            {\n                v4 = v10;\n                v9 += 8;\n                if (v9 == 16)\n                {\n                    break;\n                }\n            }\n        }\n        v10 = 0;\n    }\n    if (v5 != 0 || v4 != 0)\n    {\n        while (true)\n        {\n            v14 = &v6;\n            v15 = 131086;\n            v16 = 0;\n            while (true)\n            {\n                v3 = 5;\n                v10 = strchr((unsigned long long)nl_langinfo(v15), 0x25);\n                if (v10 != 0)\n                {\n                    break;\n                }\n                v10 = sub_40e570();\n                if (v10 > 127)\n                {\n                    break;\n                }\n                v16 = (v16 < v3? v3 : v16);\n                v14 = &v7;\n                v15 = (unsigned long long)v15 + 1;\n                if (5 > v16)\n                {\n                    v17 = v16;\n                }\n                else\n                {\n                    v18 = &v4;\n                    v19 = 0;\n                    while (true)\n                    {\n                        v20 = &v6;\n                        v21 = &(&g_6247a0)[24 * v19];\n                        while (true)\n                        {\n                            v10 = v4;\n                            if (v4 != 0)\n                            {\n                                if (v4 - v0 > 128)\n                                {\n                                    break;\n                                }\n                                v2 = v4 + 2;\n                                v1 = v20;\n                                v0 = g_624410;\n                                v10 = __snprintf_chk();\n                            }\n                            else\n                            {\n                                v10 = snprintf(v21, 0x80, \"%s\", (unsigned int)g_624410);\n                            }\n                            if ((unsigned int)v10 > 127)\n                            {\n                                break;\n                            }\n                            v20 = &v7;\n                            v21 = &v21[-18446744073709551488];\n                            v19 = 8;\n                            v22 = &v5;\n                            if (true)\n                            {\n                                break;\n                            }\n                            g_624788 = 1;\n                        }\n                        if ((unsigned int)v10 <= 127 && v20 == stack_base + -56)\n                        {\n                            v20 = &v6;\n                            v21 = &(&g_6247a0)[24 * v19];\n                        }\n                        else\n                        {\n                            return v10;\n                        }\n                    }\n                }\n            }\n            if (v14 == stack_base + -56 && v10 <= 127 && 5 > v16)\n            {\n                v14 = &v6;\n                v15 = 131086;\n                v16 = 0;\n            }\n            else\n            {\n                return v10;\n            }\n        }\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_409b80",
            "funcStartAddr": "0x409b80",
            "funcEndAddr": "0x409bec",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned long long field_78;\n    char padding_80[40];\n    unsigned int field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n    char padding_7c[44];\n    unsigned int field_a8;\n} struct_1;\n\nint sub_409b80()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    struct_1 *v3;  // rsi\n    struct_1 *v4;  // r8\n    char v5;  // al\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v2 = v1->field_a8;\n    v4 = v3;\n    v5 = v1->field_a8 == 9;\n    v7 = v6 | rax<4>;\n    if (v3->field_a8 == 3 || v3->field_a8 == 9 || v7 == 0)\n    {\n        if (v3->field_70 <= v1->field_70 && (v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n        {\n            if (v3->field_70 >= v1->field_70)\n            {\n                v8 = (unsigned int)v1->field_78 - v4->field_78;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v7 == 0 || v3->field_70 <= v1->field_70) && (v7 == 0 || (unsigned int)v1->field_78 != v4->field_78) && (v7 == 0 || v3->field_70 >= v1->field_70) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_70 <= v1->field_70) && (v3->field_a8 == 3 || v3->field_a8 == 9 || (unsigned int)v1->field_78 != v4->field_78) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_70 >= v1->field_70))\n        {\n            return v8;\n        }\n    }\n    if (v7 == 0)\n    {\n        v8 = 1;\n    }\n    if ((v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 3 || v3->field_70 > v1->field_70) && (v3->field_a8 != 9 || v7 != 0) && (v3->field_a8 != 9 || v3->field_70 > v1->field_70) && (v7 != 0 || v3->field_70 > v1->field_70))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_417f90",
            "funcStartAddr": "0x417f90",
            "funcEndAddr": "0x417fcb",
            "decompiledFuncCode": "int sub_417f90()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_417fd0();\n    }\n}\n"
        },
        {
            "funcName": "sub_412a50",
            "funcStartAddr": "0x412a50",
            "funcEndAddr": "0x412ac8",
            "decompiledFuncCode": "int sub_412a50() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40ede0",
            "funcStartAddr": "0x40ede0",
            "funcEndAddr": "0x40ee21",
            "decompiledFuncCode": "int sub_40ede0()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_tolower_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404810",
            "funcStartAddr": "0x404810",
            "funcEndAddr": "0x404827",
            "decompiledFuncCode": "int sub_404810()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rax\n    char v4;  // al\n\n    if (*(v1) != *(v2))\n    {\n        return 0;\n    }\n    v3 = v2[1];\n    v4 = v1[1] == v2[1];\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_412200",
            "funcStartAddr": "0x412200",
            "funcEndAddr": "0x412217",
            "decompiledFuncCode": "int sub_412200()\n{\n}\n"
        },
        {
            "funcName": "sub_405d70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x405e15",
            "decompiledFuncCode": "extern unsigned int g_6255d4;\nextern unsigned int g_6255d8;\nextern unsigned int g_6255e0;\nextern char g_6256d0;\nextern unsigned long long stdout;\n\nint sub_405d70()\n{\n    unsigned long long v1;  // [bp-0x8]\n    unsigned long long v3;  // rbx\n    unsigned long long v6;  // rbx\n\n    if (g_6255d8 == 0 && g_6255d4 == 0)\n    {\n        return g_6255d4;\n    }\n    if (g_6255d8 != 0 || g_6255d4 != 0)\n    {\n        v1 = v3;\n        v6 = v1;\n        return g_6255d4;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d5d0",
            "funcStartAddr": "0x40d5d0",
            "funcEndAddr": "0x40df35",
            "decompiledFuncCode": "int sub_40d5d0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4099f0",
            "funcStartAddr": "0x4099f0",
            "funcEndAddr": "0x409a1c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n} struct_0;\n\nint sub_4099f0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[14];  // rsi\n    unsigned long long v3;  // rax\n\n    if (v1->field_60 <= v2[12])\n    {\n        if (v1->field_60 >= v2[12])\n        {\n            v3 = (unsigned int)v2[13] - v1->field_68;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_60 < v2[12] || (unsigned int)v2[13] != v1->field_68)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_409a30",
            "funcStartAddr": "0x409a30",
            "funcEndAddr": "0x409a6b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n} struct_0;\n\nint sub_409a30()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2[18];  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1->field_80 <= v2[16])\n    {\n        if (v1->field_80 >= v2[16])\n        {\n            v3 = (unsigned int)v2[17] - v1->field_88;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_80 < v2[16] || (unsigned int)v2[17] != v1->field_88)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_4178e0",
            "funcStartAddr": "0x4178e0",
            "funcEndAddr": "0x41793c",
            "decompiledFuncCode": "int sub_4178e0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_417f10();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408390",
            "funcStartAddr": "0x408390",
            "funcEndAddr": "0x4083f8",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n    char padding_7c[44];\n    unsigned int field_a8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned long long field_78;\n    char padding_80[40];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_408390()\n{\n    struct_1 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9)\n    {\n        if (v1->field_70 <= v6->field_70 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n        {\n            if (v1->field_70 >= v6->field_70)\n            {\n                v7 = (unsigned int)v6->field_78 - v1->field_78;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v1->field_70 <= v6->field_70 || v5 == 0) && (v5 == 0 || v1->field_70 >= v6->field_70) && (v5 == 0 || (unsigned int)v6->field_78 != v1->field_78) && (v1->field_70 <= v6->field_70 || v6->field_a8 == 3 || v6->field_a8 == 9) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_70 >= v6->field_70) && (v6->field_a8 == 3 || v6->field_a8 == 9 || (unsigned int)v6->field_78 != v1->field_78))\n        {\n            return v7;\n        }\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if ((v1->field_70 > v6->field_70 || v6->field_a8 != 3) && (v1->field_70 > v6->field_70 || v5 != 0) && (v1->field_70 > v6->field_70 || v6->field_a8 != 9) && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_417340",
            "funcStartAddr": "0x417340",
            "funcEndAddr": "0x417380",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nextern unsigned int g_41b360;\n\nint sub_417340()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    if (v1->field_8 == 0)\n    {\n        v2 = unsetenv(0x41b360);\n    }\n    else\n    {\n        v2 = setenv(0x41b360, (unsigned int)v1 + 9, 0x1);\n    }\n    v3 = 0;\n    if (v2 == 0)\n    {\n        tzset();\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_412b80",
            "funcStartAddr": "0x412b80",
            "funcEndAddr": "0x412ba8",
            "decompiledFuncCode": "int sub_412b80()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_412980();\n}\n"
        },
        {
            "funcName": "sub_416e80",
            "funcStartAddr": "0x416e80",
            "funcEndAddr": "0x416eef",
            "decompiledFuncCode": "extern unsigned long long g_41b08a;\n\nint sub_416e80()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_41b08a;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40c190() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_417fd0",
            "funcStartAddr": "0x417fd0",
            "funcEndAddr": "0x418026",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_417fd0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_412180",
            "funcStartAddr": "0x412180",
            "funcEndAddr": "0x4121ec",
            "decompiledFuncCode": "extern uint128_t g_6258e0;\nextern uint128_t g_6258f0;\nextern uint128_t g_625900;\nextern unsigned long long g_625910;\n\nint sub_412180()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6258e0;\n    *((uint128_t *)&v1) = g_6258f0;\n    *((uint128_t *)&v2) = g_625900;\n    v4 = g_625910;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_411a40();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_410650",
            "funcStartAddr": "0x410650",
            "funcEndAddr": "0x41066f",
            "decompiledFuncCode": "int sub_410650()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    char v2;  // [bp-0x9]\n    unsigned long v4;  // r9\n    unsigned long v5;  // r8\n\n    v2 = 0;\n    v1 = v4;\n    v0 = v5;\n    return sub_40ee80();\n}\n"
        },
        {
            "funcName": "sub_40ee30",
            "funcStartAddr": "0x40ee30",
            "funcEndAddr": "0x40ee71",
            "decompiledFuncCode": "int sub_40ee30()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_417960",
            "funcStartAddr": "0x417960",
            "funcEndAddr": "0x417992",
            "decompiledFuncCode": "int sub_417960() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4050d8",
            "funcStartAddr": "0x4050d8",
            "funcEndAddr": "0x4050f8",
            "decompiledFuncCode": "int sub_4050d8()\n{\n    *(__errno_location()) = 0;\n}\n"
        },
        {
            "funcName": "sub_412df0",
            "funcStartAddr": "0x412df0",
            "funcEndAddr": "0x4131fb",
            "decompiledFuncCode": "int sub_412df0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned int|unsigned long long v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned int|unsigned long long v40;  // rdi\n    unsigned long long v41;  // rcx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned long long v47;  // cc_dep1\n    unsigned int v48;  // cc_dep1\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = strtoul();\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4320824)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v1[0] != 0 && v9 != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v41 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v41;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v48 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v48 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v49 = tmp_11 * v28 * v28;\n                    v33 = v49;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v34 = v30;\n                v35 = 5;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v35;\n                    v35 -= 1;\n                }\n                while (v44 != 1);\n            case 18: case 50:\n                v38 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 23:\n                v36 = v30;\n                v37 = 8;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v37;\n                    v37 -= 1;\n                }\n                while (v45 != 1);\n            case 24:\n                v39 = v30;\n                v40 = 7;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v40;\n                    v40 -= 1;\n                }\n                while (v47 != 1);\n                break;\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v50 = &v32[v31];\n                *(v12) = v50;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_418150",
            "funcStartAddr": "0x418150",
            "funcEndAddr": "0x4181d0",
            "decompiledFuncCode": "int sub_418150()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long long v4;  // [bp+0x8]\n    unsigned int v5[8];  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rax\n\n    v5 = v4;\n    if (v4 != 0)\n    {\n        v3 = v5[0];\n        v2 = v5[1];\n        v1 = v5[1];\n        v0 = v5[3 + 1];\n        v8 = (unsigned int)sub_418030() + v6;\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return v8;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>) || v4 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return (9223372036854775805 < v6? v6 - 1 : 9223372036854775807);\n        }\n        else if (v6 < 9223372036854775810)\n        {\n            return v6 + 1;\n        }\n        return 0x8000000000000000;\n    }\n}\n"
        },
        {
            "funcName": "sub_404800",
            "funcStartAddr": "0x404800",
            "funcEndAddr": "0x40480c",
            "decompiledFuncCode": "int sub_404800()\n{\n    unsigned long long *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT *(v1)) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_412040",
            "funcStartAddr": "0x412040",
            "funcEndAddr": "0x41204c",
            "decompiledFuncCode": "int sub_412040()\n{\n}\n"
        },
        {
            "funcName": "sub_409d90",
            "funcStartAddr": "0x409d90",
            "funcEndAddr": "0x409e04",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n    char padding_8c[28];\n    unsigned int field_a8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned long long field_88;\n    char padding_90[24];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_409d90()\n{\n    struct_1 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9)\n    {\n        if (v1->field_80 <= v6->field_80 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n        {\n            if (v1->field_80 >= v6->field_80)\n            {\n                v7 = (unsigned int)v6->field_88 - v1->field_88;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v5 == 0 || v1->field_80 <= v6->field_80) && (v5 == 0 || v1->field_80 >= v6->field_80) && (v5 == 0 || (unsigned int)v6->field_88 != v1->field_88) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_80 <= v6->field_80) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_80 >= v6->field_80) && (v6->field_a8 == 3 || v6->field_a8 == 9 || (unsigned int)v6->field_88 != v1->field_88))\n        {\n            return v7;\n        }\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v1->field_80 > v6->field_80) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v1->field_80 > v6->field_80) && (v6->field_a8 != 9 || v1->field_80 > v6->field_80))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_409c80",
            "funcStartAddr": "0x409c80",
            "funcEndAddr": "0x409ce8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n    char padding_7c[44];\n    unsigned int field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned long long field_78;\n    char padding_80[40];\n    unsigned int field_a8;\n} struct_1;\n\nint sub_409c80()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_1 *v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9)\n    {\n        if (v1->field_70 <= v6->field_70 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n        {\n            if (v1->field_70 >= v6->field_70)\n            {\n                v7 = (unsigned int)v6->field_78 - v1->field_78;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v1->field_70 <= v6->field_70 || v5 == 0) && (v5 == 0 || v1->field_70 >= v6->field_70) && (v5 == 0 || (unsigned int)v6->field_78 != v1->field_78) && (v1->field_70 <= v6->field_70 || v6->field_a8 == 3 || v6->field_a8 == 9) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_70 >= v6->field_70) && (v6->field_a8 == 3 || v6->field_a8 == 9 || (unsigned int)v6->field_78 != v1->field_78))\n        {\n            return v7;\n        }\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if ((v1->field_70 > v6->field_70 || v6->field_a8 != 3) && (v1->field_70 > v6->field_70 || v5 != 0) && (v1->field_70 > v6->field_70 || v6->field_a8 != 9) && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_416e20",
            "funcStartAddr": "0x416e20",
            "funcEndAddr": "0x416e35",
            "decompiledFuncCode": "int sub_416e20()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_4167b0();\n}\n"
        },
        {
            "funcName": "sub_409f80",
            "funcStartAddr": "0x409f80",
            "funcEndAddr": "0x409fac",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n} struct_0;\n\nint sub_409f80()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[16];  // rsi\n    unsigned long long v3;  // rax\n\n    if (v1->field_70 <= v2[14])\n    {\n        if (v1->field_70 >= v2[14])\n        {\n            v3 = (unsigned int)v2[15] - v1->field_78;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_70 < v2[14] || (unsigned int)v2[15] != v1->field_78)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bc70",
            "funcStartAddr": "0x40bc70",
            "funcEndAddr": "0x40bd16",
            "decompiledFuncCode": "int sub_40bc70()\n{\n    char **v1;  // rdi\n    char *v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rcx\n    unsigned long|unsigned long long v6;  // rax\n    unsigned long long v7;  // rdx\n\n    v2 = *(v1);\n    v7 = *(*(v1));\n    if (*(*(v1)) != 0)\n    {\n        v5 = 0;\n        v6 = 0;\n        while (true)\n        {\n            if (v5 != 0)\n            {\n                v3 = (unsigned int)v7 - 65;\n                if ((unsigned int)v7 - 65 <= 57)\n                {\n                    v5 = 0;\n                }\n                if ((288230371923853311 & 1 << (v3 & 63)) == 0 || (unsigned int)v7 - 65 > 57)\n                {\n                    v5 = 0;\n                    v6 = (v7 != 126? 0 : rax<8>);\n                }\n            }\n            else if (v7 == 46)\n            {\n                v5 = 1;\n                v6 = (v6 == 0? v2 : v6);\n            }\n            else if ((v7 < 65 || v7 > 90) && (v7 <= 90 || (v7 - 97 & 255) > 25) && (v7 > 90 || (v7 - 48 & 255) > 9))\n            {\n                v6 = (v7 != 126? 0 : rax<8>);\n                v2 = &v2[1];\n                *(v1) = v2;\n                v7 = *(v2);\n                if ((char)v7 == 0)\n                {\n                    break;\n                }\n            }\n            if (v7 == 46 || v5 != 0 || v7 <= 90 && (v7 - 48 & 255) <= 9 || v7 <= 90 && v7 >= 65 || (v7 - 97 & 255) <= 25 && v7 > 90)\n            {\n                v2 = &v2[1];\n                *(v1) = v2;\n                v7 = *(v2);\n                if ((char)v7 == 0)\n                {\n                    break;\n                }\n            }\n        }\n        return v6;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408100",
            "funcStartAddr": "0x408100",
            "funcEndAddr": "0x408160",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[88];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_408100()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if ((v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9) && v1->field_48 <= v6->field_48 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9) && v1->field_48 != v6->field_48)\n    {\n        return (unsigned long long)(char)(v1->field_48 < v6->field_48);\n    }\n    if (v5 == 0 && (v6->field_a8 == 3 || v6->field_a8 == 9))\n    {\n        return 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v1->field_48 > v6->field_48) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v1->field_48 > v6->field_48) && (v6->field_a8 != 9 || v1->field_48 > v6->field_48))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_413e80",
            "funcStartAddr": "0x413e80",
            "funcEndAddr": "0x4148b6",
            "decompiledFuncCode": "int sub_413e80() { crash_skku;\n}"
        },
        {
            "funcName": "sub_411a40",
            "funcStartAddr": "0x411a40",
            "funcEndAddr": "0x411be0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_624618;\nextern uint128_t g_624620;\nextern unsigned int g_624630;\nextern int512_t g_6257e0;\n\nint sub_411a40()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_624618;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_624630 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_624618 != 6440480)\n            {\n                v16 = sub_4129e0();\n                g_624618 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4129e0();\n                v17 = v15;\n                g_624618 = v15;\n                *(v15) = g_624620;\n            }\n            memset(&v17[(long long)(int)g_624630], 0x0, (int)((unsigned int)v13 + 1 - g_624630) * 16);\n            g_624630 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_412bd0(); /* do not return */\n        }\n    }\n    if (g_624630 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_410810();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6445024)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_412980();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_410810();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_414960",
            "funcStartAddr": "0x414960",
            "funcEndAddr": "0x414e7b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1];\n    char field_1;\n} struct_0;\n\nextern char g_414b19;\nextern char g_414b4e;\nextern char g_414bbe;\nextern char g_414c1a;\nextern char g_414c91;\nextern char g_414cbe;\nextern char g_414ce8;\nextern char g_414d0a;\nextern char g_414d5d;\nextern char g_414d9c;\nextern char g_414dec;\nextern char g_414e01;\nextern char g_414e27;\nextern char g_414e71;\nextern char g_414e8a;\nextern char g_414ea3;\nextern unsigned int g_625918;\n\nint sub_414960()\n{\n    unsigned long long v0;  // [bp-0x1b0]\n    unsigned long v1;  // [bp-0x98]\n    char v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    struct_0 *|unsigned long v4;  // [bp-0x80]\n    unsigned long v5;  // [bp-0x70]\n    unsigned long long v6;  // [bp-0x68]\n    char [3]|unsigned int v7;  // [bp-0x60]\n    unsigned int|unsigned long|unsigned long long * v8;  // [bp-0x58]\n    unsigned int|char [3] v9;  // [bp-0x50]\n    unsigned long|unsigned long long *|unsigned long long v10;  // [bp-0x40]\n    unsigned long v11;  // [bp-0x20]\n    unsigned long v12;  // [bp-0x18]\n    unsigned long v13;  // [bp-0x10]\n    unsigned long v14;  // [bp-0x8]\n    unsigned int v16;  // edi\n    unsigned long long v17;  // rdx\n    unsigned long v18;  // rcx\n    char *v19;  // rsi\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rax\n    char [3]|char * v22;  // r14\n    unsigned long long v23;  // r15\n    unsigned long v24;  // rdx\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    char v28[3];  // rcx\n    unsigned long v29;  // rdx\n    unsigned long long v30;  // rax\n    unsigned long long v32;  // r13\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long *v36;  // r14\n    unsigned long long v37;  // rax\n    unsigned long long *v38;  // r14\n    unsigned int v39;  // r9d\n    unsigned long long v40;  // rax\n    unsigned long long *v41;  // r13\n    unsigned long long v42;  // r13\n    char v43;  // r8b\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // r14\n    unsigned long long v50;  // rax\n\n    v9 = v16;\n    v6 = v17;\n    v5 = v18;\n    v10 = 0;\n    rsp<8> = &v2;\n    v8 = strlen(v19);\n    v21 = v4->field_1;\n    if (v4->field_1 != 0)\n    {\n        v22 = &v4->field_1;\n        v4 = v19;\n        v23 = 0;\n        v7 = v9 - 63;\n        while (true)\n        {\n            if (v21 != 91)\n            {\n                while (true)\n                {\n                    v20 = v21 - 33;\n                    if ((v21 - 33 & 255) <= 31)\n                    {\n                        v0 = 3221227009;\n                        rsp<8> = &v2;\n                        if (v22[1] == 40 && ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) != 0)\n                        {\n                            v23 += 1;\n                            v22 = &v22[1];\n                            v21 = 40;\n                        }\n                        if (v21 == 41 && (((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 || v22[1] != 40))\n                        {\n                            if (v23 != 0)\n                            {\n                                v21 = v22[1];\n                                v22 = &v22[1];\n                                if (v21 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v29 = &v22[-1 * v3];\n                                v30 = ((unsigned int)((unsigned long long)v9 - 63) <= 1? v8 : (char [3])&((char [3])&v22[-1 * v3])[1]) + 15 & -8;\n                                if ((((unsigned int)((unsigned long long)v9 - 63) <= 1? v8 : (char [3])&((char [3])&v22[-1 * v3])[1]) + 15 & -8) - 8 > 7991)\n                                {\n                                    break;\n                                }\n                                rsp<8> = &(&v2)[-1 * (v30 + 23 & -0x10) + -8];\n                                v14 = &g_414bbe;\n                                v10 = &(&v2)[-1 * (v30 + 23 & -0x10) + 15] & -0x10;\n                                *((char *)(unsigned long long)mempcpy((&(&v2)[-1 * (v30 + 23 & -0x10) + 15] & -0x10) + 8, (unsigned int)(struct struct_0 *)&v4->field_1, v29)) = 0;\n                                *(v10) = 0;\n                                v8 = v10;\n                                if (v10 == 0)\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v13 = &g_414ea3;\n                                    __assert_fail(); /* do not return */\n                                }\n                                else if (v22[-1 + 7] == 41)\n                                {\n                                    v32 = v9 - 33;\n                                    switch (v9)\n                                    {\n                                    case 33:\n                                        if (v6 <= v5)\n                                        {\n                                            *((char *[3])&v9[0]) = v22;\n                                            while (true)\n                                            {\n                                                v36 = v8;\n                                                while (true)\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v13 = &g_414d5d;\n                                                    v35 = sub_414eb0();\n                                                    if (v35 != 0)\n                                                    {\n                                                        v36 = *(v36);\n                                                        rsp<8> = rsp<8> - 8;\n                                                        v12 = &g_414d9c;\n                                                        v37 = sub_414eb0();\n                                                        if (v37 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                                }\n                                                if (v35 == 0 || v36 == 0 && v37 != 0)\n                                                {\n                                                    v40 = 1;\n                                                }\n                                                else if (v35 == 0 || v36 == 0 && v37 != 0)\n                                                {\n                                                    v36 = v8;\n                                                }\n                                                else if (v36 == 0 && v35 != 0)\n                                                {\n                                                    v40 = 0;\n                                                }\n                                            }\n                                            if (true)\n                                            {\n                                                v40 = 1;\n                                            }\n                                            else\n                                            {\n                                                v40 = 0;\n                                            }\n                                        }\n                                    case 42:\n                                        rsp<8> = rsp<8> - 8;\n                                        v13 = &g_414c1a;\n                                    case 43:\n                                        *((char *[3])&v7[0]) = v22;\n                                        v38 = v8;\n                                        v8 = v39 & 1;\n                                        v4 -= 1;\n                                        while (true)\n                                        {\n                                            if (v6 <= v5)\n                                            {\n                                                v42 = v6;\n                                                v9 = v43;\n                                                do\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v13 = &g_414ce8;\n                                                    v44 = sub_414eb0();\n                                                    if (v44 == 0)\n                                                    {\n                                                        if (v6 != v42)\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v12 = &g_414c91;\n                                                            if (sub_414eb0() == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v11 = &g_414cbe;\n                                                            v47 = sub_414eb0();\n                                                            if (v47 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v12 = &g_414d0a;\n                                                            v45 = sub_414eb0();\n                                                            if (v45 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        v38 = v10;\n                                                    }\n                                                    v42 += 1;\n                                                }\n                                                while (v5 >= v42);\n                                                if (true)\n                                                {\n                                                    v40 = 0;\n                                                }\n                                                else if (v47 != 0 || v44 != 0 || v45 != 0)\n                                                {\n                                                    v48 = *(v38);\n                                                    v10 = v48;\n                                                }\n                                            }\n                                            v48 = *(v38);\n                                            v10 = v48;\n                                        }\n                                        if (true)\n                                        {\n                                            v40 = 0;\n                                        }\n                                        else if (v48 == 0)\n                                        {\n                                            v40 = 1;\n                                        }\n                                    case 63:\n                                        rsp<8> = rsp<8> - 8;\n                                        v13 = &g_414e27;\n                                        v34 = sub_414eb0();\n                                        if (v34 == 0)\n                                        {\n                                            v40 = 0;\n                                            break;\n                                        }\n                                    case 64:\n                                        v41 = v8;\n                                        while (true)\n                                        {\n                                            rsp<8> = rsp<8> - 8;\n                                            v13 = &g_414dec;\n                                            strcat(&v41[1], v22);\n                                            rsp<8> = rsp<8> - 8;\n                                            v12 = &g_414e01;\n                                            v50 = sub_414eb0();\n                                            if (v50 != 0)\n                                            {\n                                                v41 = *(v41);\n                                                v10 = v41;\n                                                if (v41 == 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v40 = 0;\n                                            }\n                                        }\n                                        if (v50 != 0)\n                                        {\n                                            v40 = 1;\n                                        }\n                                        else if (v50 == 0)\n                                        {\n                                            return v40;\n                                        }\n                                    default:\n                                        rsp<8> = rsp<8> - 8;\n                                        v13 = &g_414e71;\n                                        __assert_fail(); /* do not return */\n                                    }\n                                    v40 = 0;\n                                    v40 = 1;\n                                }\n                                else\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v13 = &g_414e8a;\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                        }\n                    }\n                    else if (v21 == 124)\n                    {\n                        if (v23 == 0)\n                        {\n                            v24 = &v22[-1 * v3];\n                            v25 = (v7 <= 1? v8 : (char [3])&((char [3])&v22[-1 * v3])[1]) + 15 & -8;\n                            if (((v7 <= 1? v8 : (char [3])&((char [3])&v22[-1 * v3])[1]) + 15 & -8) - 8 > 7991)\n                            {\n                                break;\n                            }\n                            rsp<8> = &(&v2)[-1 * (v25 + 23 & -0x10) + -8];\n                            v14 = &g_414b19;\n                            *((char *)(unsigned long long)mempcpy((&(&v2)[-1 * (v25 + 23 & -0x10) + 15] & -0x10) + 8, (unsigned int)v22 + 1, v24)) = 0;\n                            v21 = v22[1];\n                            v22 = &v22[1];\n                            *((long long *)v10) = 0;\n                            v10 = &(&v2)[-1 * (v25 + 23 & -0x10) + 15] & -0x10;\n                        }\n                    }\n                    if (v23 != 0 && (v21 - 33 & 255) > 31 || (v21 - 33 & 255) > 31 && v21 != 124 || ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 && (v21 - 33 & 255) <= 31 && v21 != 41 || (v21 - 33 & 255) <= 31 && v21 != 41 && v22[1] != 40)\n                    {\n                        v21 = v22[1];\n                        v22 = &v22[1];\n                    }\n                }\n                if ((((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 && (v21 - 33 & 255) <= 31 || ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) != 0 && v22[1] != 40) && v21 != 41 || (v21 - 33 & 255) > 31 && v21 != 124 || v21 == 124 && (v21 - 33 & 255) > 31 && v23 != 0 || v23 == 0 && ((v7 <= 1? v8 : (char [3])&((char [3])&v22[-1 * v3])[1]) + 15 & -8) - 8 <= 7991 && v21 == 124 && (v21 - 33 & 255) > 31)\n                {\n                    if (v21 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v23 == 0 && v21 == 124 && (v21 - 33 & 255) > 31 || v23 == 0 && v21 == 41 && (((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 || v22[1] != 40) && ((v21 - 33 & 255) <= 31 || ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) != 0) || v21 == 41 && v21 == 0 && v23 != 0 && (((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) == 0 || v22[1] != 40) && ((v21 - 33 & 255) <= 31 || ((char)((char)*(&((char *)stack_base)[((v20 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v20 & 63 & 7)) & 1) != 0))\n                {\n                    v40 = -18446744069414584321;\n                }\n                else if (...)\n                {\n                    return v40;\n                }\n            }\n            else\n            {\n                if (g_625918 == 0)\n                {\n                    v3 = &v4->field_1;\n                    rsp<8> = rsp<8> - 8;\n                    v1 = &g_414b4e;\n                    g_625918 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v26 = v22[1];\n                if (v22[1] != 33 && (g_625918 >= 0 || v26 != 94))\n                {\n                    v28 = &v22[1];\n                }\n                if (v22[1] == 33 || g_625918 < 0 && v26 == 94)\n                {\n                    v28 = &v22[2];\n                    v26 = v22[2];\n                }\n                if (v26 == 93)\n                {\n                    v26 = v28[1];\n                    v28 = &v28[1];\n                    v22 = &v28[1];\n                }\n                if (v26 != 93 || v26 != 93)\n                {\n                    while (v26 != 0)\n                    {\n                        v26 = *(v22);\n                        v28 = v22;\n                        v22 = &v28[1];\n                        if (v26 == 93)\n                        {\n                            break;\n                        }\n                    }\n                    if (true)\n                    {\n                        v21 = v28[1];\n                    }\n                    else\n                    {\n                        v40 = -18446744069414584321;\n                    }\n                }\n                v21 = v28[1];\n            }\n        }\n        if (true)\n        {\n            v40 = -18446744069414584321;\n        }\n        else if (v21 != 91)\n        {\n            return v40;\n        }\n    }\n    v40 = -18446744069414584321;\n    return v40;\n}\n"
        },
        {
            "funcName": "sub_40b810",
            "funcStartAddr": "0x40b810",
            "funcEndAddr": "0x40b86a",
            "decompiledFuncCode": "int sub_40b810()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_40b7b0();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x4059c3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_405970()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // edx\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rdx\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 != 3 && v6->field_a8 != 9 && v5 != 0)\n    {\n        v7 = -18446744069414584321;\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if (v6->field_a8 == 3 && v5 == 0 || v5 == 0 && v6->field_a8 == 9 || v6->field_a8 != 3 && v5 != 0 && v6->field_a8 != 9)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_4082c0",
            "funcStartAddr": "0x4082c0",
            "funcEndAddr": "0x4082e7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nint sub_4082c0()\n{\n    struct_0 *v1;  // rsi\n    struct_0 *v2;  // rdi\n\n    if (!(v1->field_48 <= v2->field_48))\n    {\n        return -18446744069414584321;\n    }\n    else if (v1->field_48 != v2->field_48)\n    {\n        return (unsigned long long)(char)(v1->field_48 < v2->field_48);\n    }\n}\n"
        },
        {
            "funcName": "sub_405140",
            "funcStartAddr": "0x405140",
            "funcEndAddr": "0x4052b7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[144];\n    unsigned int field_a8;\n} struct_0;\n\nextern unsigned long long *g_625760;\nextern unsigned long long g_625770;\nextern unsigned long long g_625788;\n\nint sub_405140()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v1;  // rdi\n    struct struct_1 **|unsigned long long v2;  // rax\n    struct_0 *v3;  // rbp\n    char *v4;  // r14\n    char v5[2];  // rax\n    unsigned long long v6;  // rdx\n    char v7;  // dl\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // rdx\n\n    if (v1 != 0 && g_625788 != 0)\n    {\n        v2 = sub_404d90();\n    }\n    v9 = g_625770;\n    while (true)\n    {\n        v9 -= 1;\n        if (v9 == -1)\n        {\n            break;\n        }\n        while (true)\n        {\n            v3 = g_625760[v9];\n            v2 = (unsigned int)*((int *)(g_625760[v9] + 168));\n            if ((unsigned int)v2 != 9 && *((int *)(g_625760[v9] + 168)) != 3)\n            {\n                break;\n            }\n            v4 = v3->field_0;\n            if (v1 != 0)\n            {\n                v5 = sub_40b870();\n                if (v5[0] == 46)\n                {\n                    v6 = 0;\n                    v7 = v5[1] == 46;\n                    v2 = v5[1 + rdx<8>];\n                    if (v2 == 0 || v2 == 47)\n                    {\n                        break;\n                    }\n                }\n                if (v2 != 47 && *(v4) != 47)\n                {\n                    sub_404d90();\n                    v2 = free((unsigned long long)(unsigned int)sub_40bb70());\n                }\n            }\n            if (v1 == 0 || *(v4) == 47 && v2 != 47)\n            {\n                v2 = sub_404d90();\n            }\n            if (v3->field_a8 != 9)\n            {\n                break;\n            }\n            v9 -= 1;\n            free(v3->field_0);\n            free(v3->field_8);\n            v2 = free(v3->field_10);\n        }\n        if (v3->field_a8 == 9 && v9 == -1)\n        {\n            v10 = g_625770;\n        }\n    }\n    v10 = g_625770;\n    v2 = g_625760;\n    v10 = 0;\n    do\n    {\n        tmp_19 = *(v2)->field_a8;\n        g_625760[v10] = *(v2);\n        v2 = &v2[1];\n        v10 += (char)((unsigned int)tmp_19 != 9);\n    }\n    while (&g_625760[g_625770] != v2);\n    g_625770 = v10;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40c150",
            "funcStartAddr": "0x40c150",
            "funcEndAddr": "0x40c18a",
            "decompiledFuncCode": "int sub_40c150()\n{\n    char v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long long v3;  // rdi\n    unsigned long long v4[2];  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = clock_gettime();\n    if ((unsigned int)v5 != 0)\n    {\n        gettimeofday(&v0, NULL);\n        v4[0] = *((long long *)&v0);\n        v5 = v1 * 1000;\n        v4[1] = v1 * 1000;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40c5d0",
            "funcStartAddr": "0x40c5d0",
            "funcEndAddr": "0x40c5d5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40c5d0()\n{\n    struct_0 *v1;  // rdi\n\n    return v1->field_10;\n}\n"
        },
        {
            "funcName": "sub_40c600",
            "funcStartAddr": "0x40c600",
            "funcEndAddr": "0x40c64f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c600()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // rsi\n    unsigned long long v3;  // rdi\n    struct_0 *v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n\n    v2 = *(v1);\n    v3 = v1[1];\n    v6 = 0;\n    if (v2 >= v3)\n    {\n        return 0;\n    }\n    while (true)\n    {\n        if (*(v2) == 0)\n        {\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v4 = v2[1];\n            v5 = 1;\n            if (v2[1] != 0)\n            {\n                do\n                {\n                    v4 = v4->field_8;\n                    v5 += 1;\n                }\n                while (v4 != 0);\n            }\n            v6 = (v6 < v5? v5 : v6);\n            v2 = &v2[2];\n            if (v2 >= v3)\n            {\n                break;\n            }\n        }\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_4123bb",
            "funcStartAddr": "0x4123bb",
            "funcEndAddr": "0x4123bd",
            "decompiledFuncCode": "int sub_4123bb()\n{\n}\n"
        },
        {
            "funcName": "sub_404d90",
            "funcStartAddr": "0x404d90",
            "funcEndAddr": "0x404df6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n    char padding_11[7];\n    unsigned long long field_18;\n} struct_0;\n\nextern struct_0 *g_625740;\n\nint sub_404d90()\n{\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rdi\n    struct_0 *v6;  // rax\n    char v7;  // dl\n\n    v2 = 0;\n    if (v3 != 0)\n    {\n        v2 = sub_412bb0();\n    }\n    g_625740->field_8 = v2;\n    v4 = 0;\n    if (v5 != 0)\n    {\n        v4 = sub_412bb0();\n    }\n    g_625740->field_0 = v4;\n    v6 = g_625740;\n    g_625740->field_10 = v7;\n    g_625740->field_18 = g_625740;\n    g_625740 = (unsigned long long)(unsigned int)sub_412980();\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_41205f",
            "funcStartAddr": "0x41205f",
            "funcEndAddr": "0x4120d0",
            "decompiledFuncCode": "extern uint128_t g_6258e0;\nextern uint128_t g_6258f0;\nextern uint128_t g_625900;\nextern unsigned long long g_625910;\n\nint sub_41205f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_625910;\n    *((uint128_t *)&v0) = g_6258e0;\n    *((uint128_t *)&v1) = g_6258f0;\n    *((uint128_t *)&v2) = g_625900;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_411a40();\n}\n"
        },
        {
            "funcName": "sub_40ca60",
            "funcStartAddr": "0x40ca60",
            "funcEndAddr": "0x40ca80",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nint sub_40ca60()\n{\n    struct_0 *v1;  // rdi\n\n    v1->field_10 = 0;\n    v1->field_0 = 0x3f80000000000000;\n    v1->field_8 = 4590573145673223373;\n    return 4590573145673223373;\n}\n"
        },
        {
            "funcName": "sub_404e20",
            "funcStartAddr": "0x404e20",
            "funcEndAddr": "0x404e76",
            "decompiledFuncCode": "int sub_404e20()\n{\n    char v0;  // [bp-0x1a]\n    char *v3;  // rdi\n    unsigned long long v4;  // rbp\n    char v6;  // al\n\n    if (*(v3) != v0)\n    {\n        return 1;\n    }\n    v4 = sub_411cd0();\n    v6 = strlen(v3) != v4;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40ae90",
            "funcStartAddr": "0x40ae90",
            "funcEndAddr": "0x40af9f",
            "decompiledFuncCode": "extern unsigned int g_41d765;\nextern unsigned int g_41d77a;\nextern unsigned int g_41d782;\nextern unsigned long long stderr[7];\n\nint sub_40ae90()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v8;  // rbx\n    char *v9;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v8 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d765, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v8 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v8 += 1;\n                    v7 += v5;\n                    __fprintf_chk((unsigned int)stderr, 0x1, 0x41d782, sub_412290());\n                    if (v4[v8] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v8 == 0 || v6 != 0)\n            {\n                v8 += 1;\n                v1 = v7;\n                v7 += v5;\n                __fprintf_chk((unsigned int)stderr, 0x1, 0x41d77a, sub_412290());\n                if (v4[v8] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v9 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v9) = 10;\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c650",
            "funcStartAddr": "0x40c650",
            "funcEndAddr": "0x40c6b2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c650()\n{\n    unsigned long long v1[4];  // rdi\n    unsigned long long v2[2];  // rcx\n    struct_0 *v3;  // rax\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // r8\n\n    v2 = *(v1);\n    v4 = 0;\n    v5 = 0;\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v2) != 0)\n            {\n                v3 = v2[1];\n                v5 += 1;\n                v4 += 1;\n                if (v2[1] != 0)\n                {\n                    do\n                    {\n                        v3 = v3->field_8;\n                        v4 += 1;\n                    }\n                    while (v3 != 0);\n                    v2 = &v2[2];\n                    if (*(v1) + 16 >= v1[1])\n                    {\n                        break;\n                    }\n                }\n            }\n            if (*(v2) == 0 || v2[1] == 0)\n            {\n                v2 = &v2[2];\n                if (v2 >= v1[1])\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v1[3] != v5)\n    {\n        return 0;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4123e0",
            "funcStartAddr": "0x4123e0",
            "funcEndAddr": "0x412789",
            "decompiledFuncCode": "extern unsigned int g_41ea58;\nextern unsigned int g_41ea64;\nextern unsigned int g_41ea6b;\nextern unsigned int g_41ea6f;\nextern unsigned int g_41ea7f;\nextern unsigned int g_41ea96;\nextern unsigned int g_41eaf8;\nextern unsigned int g_41ebc8;\nextern unsigned int g_41ebe8;\nextern unsigned int g_41ec10;\nextern unsigned int g_41ec38;\nextern unsigned int g_41ec68;\nextern unsigned int g_41edc0;\n\nint sub_4123e0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x41ea58, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x41ea64, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x41edc0, dcgettext(0x0, 0x41ea6b, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41eaf8, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x41ea6f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x41ea7f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x41ea96, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x41ebc8, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x41ebe8, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x41ec10, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x41ec38, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x41ec68, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "sub_40ca80",
            "funcStartAddr": "0x40ca80",
            "funcEndAddr": "0x40cc00",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_0;\n\nextern int512_t g_40c290;\nextern int512_t g_40c2a0;\nextern int512_t g_41d810;\n\nint sub_40ca80()\n{\n    unsigned long long v1;  // rbx\n    struct_0 *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    uint128_t v5;  // xmm1\n    uint128_t v6;  // xmm0\n    unsigned int v8;  // ymm1\n    uint128_t v9;  // xmm0\n    unsigned long v10;  // rdi\n    unsigned int v11;  // ymm0\n    void v12;  // xmm0\n    unsigned long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long v18;  // r8\n    unsigned long long v19;  // rdi\n    unsigned long long v20;  // rax\n\n    v1 = malloc(0x50);\n    if (v1 != 0)\n    {\n        if (v2 != 0)\n        {\n            *((struct_0 **)(v1 + 40)) = v2;\n            v4 = sub_40c400();\n            if (v4 != 0 && v2->field_10 == 0)\n            {\n                v5 = 0;\n                v8 = v2->field_8;\n            }\n        }\n        else\n        {\n            *((long long **)(v1 + 40)) = &g_41d810;\n            v3 = sub_40c400();\n            v5 = 0;\n            v8 = 6881500231684115661;\n        }\n        if ((v2 == 0 || v2->field_10 == 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0))\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v6 = 0;\n                v6 = (unsigned int)v10;\n            }\n            else\n            {\n                v9 = 0;\n                v11 = v10 % 2 | (unsigned long long)((unsigned int)v10 & 1);\n                v6 = xmm0<16> * 2;\n            }\n            v12 = v6 / v8;\n        }\n        if ((((char)(BinaryOp CmpF & 69) & 1) == 0 || v2 != 0) && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v2->field_10 != 0) && (v2 == 0 || v4 != 0) && (v3 != 0 || v2 != 0) && (v2 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && (((char)(BinaryOp CmpF & 69) & 1) != 0 || v2->field_10 != 0))\n        {\n            v13 = (unsigned int)sub_40c1f0();\n            if (((char)(v13 >> 60) & 1) == 0 && [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) == 0)\n            {\n                *((unsigned long *)(v1 + 16)) = v13;\n                if (v13 != 0)\n                {\n                    v14 = calloc(v13, 0x10);\n                    *((unsigned long long *)v1) = v14;\n                    if (v14 != 0)\n                    {\n                        *((long long *)(v1 + 24)) = 0;\n                        *((long long *)(v1 + 32)) = 0;\n                        *((unsigned long long *)(v1 + 8)) = v13 * 16 + v14;\n                        *((int *)(v1 + 48)) = (v16 == 0? &g_40c290 : v16);\n                        *((int *)(v1 + 56)) = (v17 == 0? &g_40c2a0 : v17);\n                        *((unsigned long *)(v1 + 64)) = v18;\n                        *((long long *)(v1 + 72)) = 0;\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v19 = v1;\n            v1 = 0;\n            free(v19);\n        }\n    }\n    v20 = v1;\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_413220",
            "funcStartAddr": "0x413220",
            "funcEndAddr": "0x4132a1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4321760];\n    unsigned long long field_41f1e0;\n} struct_0;\n\nextern int512_t g_41f1e0;\nextern unsigned int g_6245c0;\n\nint sub_413220()\n{\n    char v0;  // [bp-0x2a]\n    char v1;  // [bp-0x29]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r13\n    unsigned int v7;  // edi\n    struct_0 *v8;  // rdi\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long v13;  // rsi\n    char v14;  // dl\n\n    v4 = v6;\n    v8 = (unsigned long long)v7 - 1;\n    v3 = v9;\n    v2 = v10;\n    if ((unsigned int)v8 > 3)\n    {\n        abort(); /* do not return */\n    }\n    v13 = *((long long *)(0x8 * v8 + (char *)&g_41f1e0));\n    if ((unsigned int)v11 < 0)\n    {\n        v0 = v14;\n        v1 = 0;\n    }\n    error(g_6245c0, 0x0, (unsigned long long)dcgettext(0x0, v13, 0x5));\n}\n"
        },
        {
            "funcName": "sub_40474b",
            "funcStartAddr": "0x40474b",
            "funcEndAddr": "0x40476a",
            "decompiledFuncCode": "extern unsigned long long g_624648;\n\nint sub_40474b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_624648;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404850",
            "funcStartAddr": "0x404850",
            "funcEndAddr": "0x404855",
            "decompiledFuncCode": "int sub_404850()\n{\n}\n"
        },
        {
            "funcName": "sub_404860",
            "funcStartAddr": "0x404860",
            "funcEndAddr": "0x404a71",
            "decompiledFuncCode": "int sub_404860()\n{\n    unsigned long long v1;  // rcx\n    unsigned long long *v3;  // rsi\n    unsigned long long *v4;  // rdi\n    unsigned long long v5;  // rdx\n    char [2]|char *|unsigned long long v6;  // r8\n    unsigned long long v7;  // r10\n    char *v8;  // r9\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // cc_dep1\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // rcx\n    unsigned long long v13;  // r13\n    unsigned long long v14;  // r13\n    unsigned long long v15;  // r12\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // rcx\n    unsigned long long v18;  // r14\n    unsigned long long v19;  // rax\n\n    v6 = *(v3);\n    v7 = 0;\n    v8 = *(v4);\n    while (true)\n    {\n        v9 = v6[0];\n        v10 = v6[0];\n        if ((char)v5 != 0 && (v6[0] == 61 || v6[0] == 61))\n        {\n            v19 = v5;\n        }\n        if (v9 != 58 || v9 != 94 || v6[0] == 61 && (char)v5 == 0 || (char)v5 == 0 && v6[0] == 61)\n        {\n            v6 = &v6[1];\n            *((unsigned long long *)&v8) = v9;\n            v7 += 1;\n            v8 = &v8[1];\n            v9 = v6[0];\n            v10 = v6[0];\n        }\n        if (v10 > 61)\n        {\n            if (v6[0] != 61 || v6[0] != 61)\n            {\n                if (v9 == 92 && ((char)v5 == 0 || v9 != 58 || v6[0] != 61 || v9 != 94))\n                {\n                    v11 = v6[1];\n                    v6 = &v6[2];\n                    switch (v11)\n                    {\n                    case 0:\n                        v19 = 0;\n                    case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55:\n                        v15 = *(v6);\n                        v11 = (unsigned int)v11 - 48;\n                        do\n                        {\n                            v6 = &v6[1];\n                            v11 = v15 + v11 * 8 - 48;\n                            v15 = *(v6);\n                        }\n                        while ((v15 - 48 & 255) <= 7);\n                    case 63:\n                        v11 = 127;\n                        break;\n                    case 88: case 120:\n                        v14 = 0;\n                        while (true)\n                        {\n                            v16 = *(v6);\n                            v17 = v16 - 48;\n                            if ((v16 - 48 & 255) > 54)\n                            {\n                                break;\n                            }\n                            while (true)\n                            {\n                                v18 = 1 << (v17 & 63);\n                                if (((unsigned int)(1 << (v17 & 63)) & 0x7e0000) != 0)\n                                {\n                                    v6 = &v6[1];\n                                    v14 = v16 + v14 * 16 - 55;\n                                }\n                                else if ((0x7e000000000000 & v18) == 0)\n                                {\n                                    if (((unsigned short)v18 & 1023) == 0)\n                                    {\n                                        break;\n                                    }\n                                    v6 = &v6[1];\n                                    v14 = v16 + v14 * 16 - 48;\n                                    v16 = *(v6);\n                                    v17 = v16 - 48;\n                                }\n                                else\n                                {\n                                    v6 = &v6[1];\n                                    v14 = v16 + v14 * 16 - 87;\n                                }\n                            }\n                            if (((unsigned int)(1 << (v17 & 63)) & 0x7e0000) == 0 && (0x7e000000000000 & v18) == 0)\n                            {\n                                *((unsigned long long *)&v8) = v14;\n                            }\n                        }\n                        *((unsigned long long *)&v8) = v14;\n                    case 95:\n                        v11 = 32;\n                        break;\n                    case 97:\n                        v11 = 7;\n                        break;\n                    case 98:\n                        v11 = 8;\n                        break;\n                    case 101:\n                        v11 = 27;\n                        break;\n                    case 102:\n                        v11 = 12;\n                        break;\n                    case 110:\n                        v11 = 10;\n                        break;\n                    case 114:\n                        v11 = 13;\n                        break;\n                    case 116:\n                        v11 = 9;\n                        break;\n                    case 118:\n                        v11 = 11;\n                        break;\n                    }\n                }\n                if (v9 == 94 && ((char)v5 == 0 || v9 != 58 || v6[0] != 61))\n                {\n                    v12 = v6[1];\n                    v13 = &v6[1];\n                    if (((unsigned long long)v6[1] - 64 & 255) <= 62)\n                    {\n                        v6 = &v6[2];\n                        v11 = (unsigned int)v12 & 31;\n                    }\n                    else if (v12 != 63)\n                    {\n                        v6 = v13;\n                    }\n                    else\n                    {\n                        *(v8) = 127;\n                    }\n                }\n            }\n        }\n        else\n        {\n            if ((v6[0] != 61 || v6[0] != 61) && ((char)v5 == 0 || v9 != 58 || v6[0] != 61 || v9 != 94) && (v9 == 58 || v9 == 0))\n            {\n                v19 = 1;\n            }\n        }\n        if (...)\n        {\n            *((unsigned long long *)&v8) = v11;\n        }\n    }\n    *(v4) = v8;\n    *(v3) = v6;\n    *((unsigned long long *)v1) = v7;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_408180",
            "funcStartAddr": "0x408180",
            "funcEndAddr": "0x4081e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[88];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_408180()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if ((v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9) && v1->field_48 <= v6->field_48 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9) && v1->field_48 != v6->field_48)\n    {\n        return (unsigned long long)(char)(v1->field_48 < v6->field_48);\n    }\n    if (v5 == 0 && (v6->field_a8 == 3 || v6->field_a8 == 9))\n    {\n        return 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v1->field_48 > v6->field_48) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v1->field_48 > v6->field_48) && (v6->field_a8 != 9 || v1->field_48 > v6->field_48))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_4159a0",
            "funcStartAddr": "0x4159a0",
            "funcEndAddr": "0x415bd6",
            "decompiledFuncCode": "extern char g_415ac0;\nextern int512_t g_415ac9;\nextern int512_t g_415ae4;\nextern int512_t g_415b00;\nextern int512_t g_415ba6;\n\nint sub_4159a0()\n{\n    void tmp_8;  // tmp #8\n    unsigned int v0;  // [bp-0x5c]\n    char v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // rdi\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // rax\n    unsigned long long v12;  // r13\n    unsigned long long v13;  // rax\n    char *v14;  // rsi\n    unsigned long long v16;  // rax\n    unsigned long v17;  // rax\n    unsigned long v18;  // rdi\n    unsigned int v21;  // r15d\n    unsigned long long v22;  // rax\n    void *v23;  // r14\n    unsigned long long v25;  // rax\n\n    v2 = v6;\n    v7 = __ctype_get_mb_cur_max();\n    if (v7 != 1)\n    {\n        v3 = 0;\n        v9 = (unsigned long long)mbsrtowcs(0x0, (unsigned int)&v2, 0x0, (unsigned int)&v3) + 1;\n        if (v9 + 1 != 0)\n        {\n            v10 = mbsinit((unsigned int)&v3);\n            if (v10 != 0)\n            {\n                v12 = (unsigned long long)mbsrtowcs(0x0, (unsigned int)&v1, 0x0, (unsigned int)&v3) + 1;\n                if (v12 + 1 != 0)\n                {\n                    v13 = mbsinit((unsigned int)&v3);\n                    if (v13 != 0)\n                    {\n                        v17 = v9 + v12;\n                        if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v17 <= 4611686018427387903)\n                        {\n                            v18 = v17 * 4;\n                            if (v17 <= 1999)\n                            {\n                                tmp_8 = stack_base + -104 - (v18 + 23 & -0x10);\n                                v21 = (stack_base + -104 - (v18 + 23 & -0x10) + 15 & -0x10) + v9 * 4;\n                                v4 = &g_415ac0;\n                                mbsrtowcs(stack_base + -104 - (v18 + 23 & -0x10) + 15 & -0x10, (unsigned int)&v2, v9, (unsigned int)&v3);\n                                rsp<8> = tmp_8 - 8 - 8;\n                                *((long long **)(tmp_8 - 8 - 8)) = &g_415ac9;\n                                v22 = mbsinit((unsigned int)&v3);\n                                if (v22 != 0)\n                                {\n                                    *((long long **)(tmp_8 - 8 - 8 - 8)) = &g_415ae4;\n                                    mbsrtowcs(v21, (unsigned int)&v1, v12, (unsigned int)&v3);\n                                    *((long long **)(tmp_8 - 8 - 8 - 8 - 8)) = &g_415b00;\n                                    v16 = sub_413e80();\n                                }\n                            }\n                            else\n                            {\n                                v23 = malloc(v18);\n                                if (v23 != 0)\n                                {\n                                    mbsrtowcs((unsigned int)v23, (unsigned int)&v2, v9, (unsigned int)&v3);\n                                    rsp<8> = stack_base + -112;\n                                    v25 = mbsinit((unsigned int)&v3);\n                                    if (v25 != 0)\n                                    {\n                                        mbsrtowcs((unsigned int)(v23 + v9 * 4), (unsigned int)&v1, v12, (unsigned int)&v3);\n                                        v0 = sub_413e80();\n                                        free(v23);\n                                        v16 = v0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n    }\n    if (v9 + 1 == 0 || v7 == 1 || v12 + 1 == 0 && v10 != 0)\n    {\n        strlen(v14);\n        v16 = sub_414eb0();\n    }\n    if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>) && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 || !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v17 > 4611686018427387903 && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 || v23 == 0 && v17 <= 4611686018427387903 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v17 > 1999 && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0)\n    {\n        *(__errno_location()) = 12;\n        v16 = -18446744069414584321;\n    }\n    if (v17 <= 4611686018427387903 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v23 != 0 && v17 > 1999 && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 && v25 == 0 || v17 <= 1999 && v17 <= 4611686018427387903 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, r13<8>, cc_ndep<8>)) && v13 != 0 && v9 + 1 != 0 && v7 != 1 && v12 + 1 != 0 && v10 != 0 && v22 == 0)\n    {\n        rsp<8> = rsp<8> - 8;\n        *((long long **)rsp<8>) = &g_415ba6;\n        __assert_fail(); /* do not return */\n    }\n    if (...)\n    {\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a200",
            "funcStartAddr": "0x40a200",
            "funcEndAddr": "0x40a26c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned long long field_78;\n    char padding_80[40];\n    unsigned int field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n    char padding_7c[44];\n    unsigned int field_a8;\n} struct_1;\n\nint sub_40a200()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    struct_1 *v3;  // rsi\n    struct_1 *v4;  // r8\n    char v5;  // al\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v2 = v1->field_a8;\n    v4 = v3;\n    v5 = v1->field_a8 == 9;\n    v7 = v6 | rax<4>;\n    if (v3->field_a8 == 3 || v3->field_a8 == 9 || v7 == 0)\n    {\n        if (v3->field_70 <= v1->field_70 && (v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n        {\n            if (v3->field_70 >= v1->field_70)\n            {\n                v8 = (unsigned int)v1->field_78 - v4->field_78;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v7 == 0 || v3->field_70 <= v1->field_70) && (v7 == 0 || (unsigned int)v1->field_78 != v4->field_78) && (v7 == 0 || v3->field_70 >= v1->field_70) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_70 <= v1->field_70) && (v3->field_a8 == 3 || v3->field_a8 == 9 || (unsigned int)v1->field_78 != v4->field_78) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_70 >= v1->field_70))\n        {\n            return v8;\n        }\n    }\n    if (v7 == 0)\n    {\n        v8 = 1;\n    }\n    if ((v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 3 || v3->field_70 > v1->field_70) && (v3->field_a8 != 9 || v7 != 0) && (v3->field_a8 != 9 || v3->field_70 > v1->field_70) && (v7 != 0 || v3->field_70 > v1->field_70))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_405110",
            "funcStartAddr": "0x405110",
            "funcEndAddr": "0x40511b",
            "decompiledFuncCode": "int sub_405110()\n{\n}\n"
        },
        {
            "funcName": "sub_411d6b",
            "funcStartAddr": "0x411d6b",
            "funcEndAddr": "0x411e31",
            "decompiledFuncCode": "int sub_411d6b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_410810();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_412980();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_410810();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40c1f0",
            "funcStartAddr": "0x40c1f0",
            "funcEndAddr": "0x40c281",
            "decompiledFuncCode": "int sub_40c1f0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdi\n\n    v2 = (10 <= v1? v1 : 10) | 1;\n    if (((10 <= v1? v1 : 10) | 1) != -1)\n    {\n        while (true)\n        {\n            v3 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            v5 = v2 - (v2 * 12297829382473034411 >> 64 >> 1) * 3;\n            if (v3 != 0 && v2 > 9)\n            {\n                v6 = 16;\n                v8 = 9;\n                v7 = 3;\n                do\n                {\n                    v7 += 2;\n                    v8 += v6;\n                    v4 = (0 CONCAT v2) % v7 >> 64;\n                    v5 = (0 CONCAT v2) % v7 >> 64;\n                    v6 += 8;\n                }\n                while (v8 < v2 && v4 != 0);\n                if (true)\n                {\n                    if (v5 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v8 < v2)\n                {\n                    v2 += 2;\n                    if (v2 == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409960",
            "funcStartAddr": "0x409960",
            "funcEndAddr": "0x409998",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n} struct_0;\n\nint sub_409960()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[18];  // rsi\n    unsigned long long v3;  // rax\n\n    if (v1->field_80 <= v2[16])\n    {\n        if (v1->field_80 >= v2[16])\n        {\n            v3 = (unsigned int)v2[17] - v1->field_88;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_80 < v2[16] || (unsigned int)v2[17] != v1->field_88)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_405580",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x4055db",
            "decompiledFuncCode": "extern unsigned int g_6255d0;\n\nint sub_405580()\n{\n    unsigned long long v1;  // r12\n    char *v2;  // rsi\n    unsigned long long v3;  // rax\n    unsigned long v4;  // rdi\n\n    v1 = (unsigned int)sub_412040();\n    v3 = error(0x0, *(__errno_location()), v2);\n    if ((char)v4 != 0)\n    {\n        g_6255d0 = 2;\n    }\n    else\n    {\n        v3 = g_6255d0;\n        if (g_6255d0 == 0)\n        {\n            g_6255d0 = 1;\n            return g_6255d0;\n        }\n    }\n    if (g_6255d0 != 0 || (char)v4 != 0)\n    {\n        return v3;\n    }\n}\n"
        },
        {
            "funcName": "sub_417620",
            "funcStartAddr": "0x417620",
            "funcEndAddr": "0x4176bf",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_417620()\n{\n    char *v1;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    v1 = getenv(\"TZ\");\n    if (v1 != 0)\n    {\n        if (v3->field_8 != 0)\n        {\n            v4 = strcmp(&v3[1], v1);\n            if (v4 == 0)\n            {\n                return 1;\n            }\n        }\n    }\n    else\n    {\n        if (v3->field_8 == 0)\n        {\n            return 1;\n        }\n    }\n    if (v1 == 0 && v3->field_8 != 0 || v3->field_8 == 0 && v1 != 0 || v4 != 0 && v1 != 0)\n    {\n        if (v4 != 0)\n        {\n            v6 = sub_417340();\n            if (v6 == 0)\n            {\n                v8 = __errno_location();\n                if (v8 != 1)\n                {\n                    sub_417390();\n                }\n                *(v8) = *(v8);\n                return 0;\n            }\n        }\n        if (v4 == 0 || v6 != 0)\n        {\n            v4 = (unsigned int)sub_417410();\n            return v7;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40c9a0",
            "funcStartAddr": "0x40c9a0",
            "funcEndAddr": "0x40ca0b",
            "decompiledFuncCode": "int sub_40c9a0()\n{\n    unsigned long long v1[2];  // rdi\n    unsigned long long v2[2];  // r14\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rdi\n    unsigned long long v10[2];  // rbx\n\n    v2 = *(v1);\n    if (v1[1] > *(v1))\n    {\n        v8 = 0;\n        while (true)\n        {\n            v4 = *(v2);\n            if (*(v2) != 0)\n            {\n                v10 = v2;\n                while (true)\n                {\n                    v6 = v5;\n                    v7 = v5();\n                    if (v7 != 0)\n                    {\n                        v10 = v10[1];\n                        v8 += 1;\n                        if (v10 == 0)\n                        {\n                            break;\n                        }\n                        v9 = *(v10);\n                    }\n                }\n                if (v7 != 0)\n                {\n                    v2 = &v2[2];\n                    if (v1[1] <= v2)\n                    {\n                        break;\n                    }\n                }\n                else if (v7 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40eb70",
            "funcStartAddr": "0x40eb70",
            "funcEndAddr": "0x40eb93",
            "decompiledFuncCode": "int sub_40eb70()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_410810",
            "funcStartAddr": "0x410810",
            "funcEndAddr": "0x411948",
            "decompiledFuncCode": "int sub_410810()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned int|unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    unsigned long long v23;  // [bp-0x40]\n    unsigned int *v24;  // [bp+0x8]\n    unsigned long long v25;  // [bp+0x10]\n    void *v26;  // [bp+0x18]\n    unsigned long long v27;  // rdi\n    unsigned long long v28;  // r15\n    unsigned long v29;  // r8\n    unsigned long long v30;  // rcx\n    unsigned long v31;  // r9\n    char|unsigned long|unsigned long long v32;  // r10\n    unsigned long long v33;  // rbp\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // r9\n    unsigned long|unsigned long long v38;  // r11\n    unsigned long|unsigned long long v39;  // rbp\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    char v42;  // al\n    unsigned long v43;  // rdx\n    unsigned long long v44;  // rcx\n    unsigned short|unsigned long|unsigned long long v45;  // rax\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // r13\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    char v50;  // r13b\n    unsigned long long v51;  // r13\n    unsigned long long v52;  // rdx\n    unsigned long long v53;  // rbx\n    unsigned long long v54;  // r13\n    unsigned long long v55;  // r15\n    unsigned long long v56;  // rbp\n    unsigned long long v57;  // r14\n    char *v58;  // rax\n    unsigned long long v59;  // rcx\n    unsigned long long v61;  // r13\n    unsigned long v62;  // r13\n    unsigned long long v63;  // rcx\n    char v64;  // al\n    char v65;  // al\n    unsigned int v66;  // eax\n    char v67;  // al\n    unsigned int v69;  // eax\n    char v70;  // al\n    unsigned long v71;  // rdx\n    unsigned long long v72;  // rax\n    char v73;  // al\n    unsigned long long v74;  // rdx\n    unsigned long long v75;  // rbx\n    unsigned int|unsigned long|unsigned long long v76;  // rsi\n    unsigned int|char|unsigned long|unsigned long long v77;  // r13\n    unsigned long long v78;  // r14\n    unsigned long|unsigned long long v79;  // r12\n    unsigned int v80;  // r13d\n    unsigned long long v81;  // r11\n    char v82;  // dl\n    char|unsigned long v83;  // rax\n    unsigned long long v84;  // cc_dep1\n    char|unsigned long v85;  // dl\n    unsigned long long v86;  // rax\n    unsigned long long v87;  // rax\n    char|unsigned long|unsigned long long v88;  // rdx\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v28 = v27;\n    v78 = v76;\n    v77 = v29;\n    v7 = v88;\n    v4 = v30;\n    v16 = v31;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v31 & 2) != 0;\n    switch ((unsigned int)v29)\n    {\n    case 0:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v31 & 2) == 0)\n        {\n            v4 = 0;\n            if (v76 == 0)\n            {\n                v6 = 1;\n                v32 = 0;\n                v75 = 1;\n                v77 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v83 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v32 = 0;\n            v75 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v31 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v31 & 2) == 0)\n        {\n            if (v76 != 0)\n            {\n                *((char *)v27) = 34;\n                v32 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v32 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v75 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v32 = 0;\n            v75 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v29 != 10)\n        {\n            v4 = v4;\n            v25 = (unsigned int)sub_410710();\n            v26 = (unsigned long long)(unsigned int)sub_410710();\n        }\n        v75 = 0;\n        if (((char)v31 & 2) == 0)\n        {\n            v77 = (char)*((char *)v25);\n            if (*((char *)v25) != 0)\n            {\n                do\n                {\n                    if (v76 > v75)\n                    {\n                        *((unsigned long long *)(v27 + v75)) = v77;\n                    }\n                    v75 += 1;\n                    v77 = (char)*((char *)(v25 + v75));\n                }\n                while ((char)v77 != 0);\n            }\n        }\n        v5 = v81;\n        v6 = 1;\n        v8 = strlen(v26);\n        v18 = 0;\n        v13 = v26;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v81 = v4;\n    while (true)\n    {\n        v37 = v81;\n        v79 = 0;\n        v38 = v77;\n        while (true)\n        {\n            v77 = v37 != v79;\n            if (v37 == -1)\n            {\n                v77 = *((char *)(v7 + v79)) != 0;\n            }\n            if (v77 != 0)\n            {\n                v36 = v7 + v79;\n                v5 = (unsigned int)v38 != 2 & v4;\n                if (((unsigned int)v38 != 2 & v4) != 0)\n                {\n                    v77 = v8;\n                    if (v8 != 0)\n                    {\n                        v33 = v79 + v77;\n                        if (v37 == -1 && v77 > 1)\n                        {\n                            v11 = v38;\n                            v10 = v32;\n                            v9 = v36;\n                            v37 = strlen(v7);\n                        }\n                        if (v33 <= v37)\n                        {\n                            v12 = v38;\n                            v11 = v37;\n                            v10 = v32;\n                            v9 = v36;\n                            v77 = memcmp(v36, v13, v8);\n                            v36 = v9;\n                            v32 = (char)v10;\n                            v37 = v11;\n                            v38 = v12;\n                            if (v17 == 0 && v77 == 0)\n                            {\n                                v39 = (char)*((char *)v36);\n                                switch (*((char *)v36))\n                                {\n                                case 0:\n                                    v88 = (unsigned int)v38 == 2;\n                                    v77 = (unsigned int)(0 ^ 1);\n                                    v77 = (char)(0 ^ 1) & (unsigned int)v38 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) != 0)\n                                    {\n                                        if (v76 > v75)\n                                        {\n                                            *((char *)(v27 + v75)) = 39;\n                                        }\n                                        if (v76 > v75 + 1)\n                                        {\n                                            *((char *)(v27 + v75 + 1)) = 36;\n                                        }\n                                        if (v76 > v75 + 2)\n                                        {\n                                            *((char *)(v27 + v75 + 2)) = 39;\n                                        }\n                                        v46 = v75 + 3;\n                                        v75 += 4;\n                                        v32 = rax<8>;\n                                        v77 = 0;\n                                        v39 = 48;\n                                    }\n                                    else\n                                    {\n                                        v46 = v75;\n                                        v77 = 0;\n                                        v75 = v46 + 1;\n                                        v77 = v77;\n                                        v39 = 48;\n                                        v77 = 0;\n                                        v39 = 48;\n                                        if (1 < v37)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v76 > v75)\n                                                {\n                                                    *((char *)(v27 + v75)) = 48;\n                                                }\n                                                if (v76 > v46 + 2)\n                                                {\n                                                    *((char *)(v27 + v46 + 2)) = 48;\n                                                }\n                                                v75 = v46 + 3;\n                                                v39 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v76 > v75 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) == 0 || v76 > v75 + 3))\n                                    {\n                                        *((char *)(v27 + v46)) = 92;\n                                        v32 = v77;\n                                    }\n                                case 7:\n                                    v39 = 97;\n                                    v77 = 0;\n                                case 8:\n                                    v88 = 0;\n                                    v77 = 0;\n                                    v39 = 98;\n                                case 13:\n                                    v39 = 13;\n                                    v44 = 114;\n                                    v88 = (unsigned int)v38 == 2;\n                                case 32:\n                                    v40 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v88 = 0;\n                                case 35: case 126:\n                                    v41 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v40 = v5;\n                                case 92:\n                                    v43 = v4;\n                                    v39 = 92;\n                                    v44 = 92;\n                                    v88 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) == 0)\n                                    {\n                                        v39 = v44;\n                                        v77 = 0;\n                                        v54 = 0;\n                                    }\n                                    else\n                                    {\n                                        v79 = 1;\n                                        v45 = 0;\n                                        v77 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v33 > v37 || v77 != 0)\n                    {\n                        v39 = (char)*((char *)v36);\n                        switch (*((char *)v36))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v38 == 2;\n                            }\n                        case 7:\n                            v39 = 97;\n                            break;\n                        case 8:\n                            v39 = 98;\n                        case 9:\n                            v39 = 116;\n                        case 10:\n                            v39 = 110;\n                            v88 = 0;\n                            v77 = 0;\n                        case 11:\n                            v39 = 118;\n                            break;\n                            if (v17 != 0)\n                            {\n                                v86 = 0;\n                            }\n                        case 12:\n                            v39 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v40 = 0;\n                            v39 = 32;\n                            v47 = v5;\n                            v5 = v40;\n                            v77 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v41 = 0;\n                            v48 = v5;\n                            v88 = 0;\n                            v5 = v41;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v40 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v39 = (char)*((char *)v36);\n                    switch (*((char *)v36))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v79 += 1;\n                            v5 = 0;\n                            v88 = (unsigned int)v38 == 2;\n                            v35 = 0;\n                            v39 = 0;\n                            break;\n                        }\n                    case 7:\n                        v39 = 7;\n                        v44 = 97;\n                        v88 = (unsigned int)v38 == 2;\n                    case 8:\n                        v39 = 8;\n                        v44 = 98;\n                        v88 = (unsigned int)v38 == 2;\n                    case 9:\n                        v39 = 9;\n                        v44 = 116;\n                    case 10:\n                        v39 = 10;\n                        v44 = 110;\n                    case 11:\n                        v39 = 11;\n                        v44 = 118;\n                        v88 = (unsigned int)v38 == 2;\n                    case 12:\n                        v39 = 12;\n                        v44 = 102;\n                        v88 = (unsigned int)v38 == 2;\n                    case 13:\n                        v39 = 13;\n                        v44 = 114;\n                        v88 = (unsigned int)v38 == 2;\n                        v5 = v17 & (unsigned int)v38 == 2;\n                    case 32:\n                        v39 = 32;\n                        v88 = (unsigned int)v38 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                        else\n                        {\n                            v77 = ((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1;\n                            v77 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1) | v17;\n                            v77 = 0;\n                            v71 = (unsigned int)((unsigned long long)v24[v39 % 32] >> ((char)v39 & 31)) & 1;\n                            v88 = (unsigned int)v38 == 2;\n                            v88 = (unsigned int)v38 == 2;\n                            v79 += 1;\n                            v45 = (v77 ^ 1) & (unsigned int)v32;\n                            if (v45 != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v78 > v75 + 1)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 39;\n                                }\n                                v75 += 2;\n                                v32 = 0;\n                            }\n                            v72 = (unsigned int)v32 ^ 1;\n                            v73 = (char)((unsigned int)v32 ^ 1) & v88;\n                            if (((char)((unsigned int)v32 ^ 1) & v88) != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v75 + 1 < v78)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 36;\n                                }\n                                v74 = v75 + 2;\n                                if (v75 + 2 < v78)\n                                {\n                                    *((char *)(v28 + v75 + 2)) = 39;\n                                }\n                                v75 += 3;\n                                v32 = rax<8>;\n                            }\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            v75 += 1;\n                            v79 += 1;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v88 = (unsigned int)v38 == 2;\n                        v34 = 0;\n                    case 35: case 126:\n                        v88 = (unsigned int)v38 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v88 = (unsigned int)v38 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v38 == 2)\n                        {\n                            if (v76 != 0)\n                            {\n                                v52 = 0;\n                            }\n                            if (v76 == 0 || v14 != 0)\n                            {\n                                if (v76 > v75)\n                                {\n                                    *((char *)(v27 + v75)) = 39;\n                                }\n                                if (v76 > v75 + 1)\n                                {\n                                    *((char *)(v27 + v75 + 1)) = 92;\n                                }\n                                if (v76 > v75 + 2)\n                                {\n                                    v52 = v76;\n                                    *((char *)(v27 + v75 + 2)) = 39;\n                                    v78 = v14;\n                                }\n                                else\n                                {\n                                    v52 = v76;\n                                    v78 = v14;\n                                }\n                            }\n                            v18 = v77;\n                            v75 += 3;\n                            v77 = 0;\n                            v32 = 0;\n                            v14 = v78;\n                            v39 = 39;\n                            v78 = v52;\n                        }\n                        else\n                        {\n                            v18 = v77;\n                            v88 = 0;\n                            v39 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v38 != 2)\n                        {\n                            v39 = 63;\n                            v88 = (unsigned int)v38 == 2;\n                            v51 = 0;\n                            break;\n                            v76 = v7;\n                            v39 = (char)*((char *)(v76 + 2));\n                            v76 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v88 = 0;\n                            v61 = 0;\n                            v39 = 63;\n                            break;\n                            if (v78 > v75)\n                            {\n                                *((char *)(v27 + v75)) = 63;\n                            }\n                            if (v78 > v75 + 1)\n                            {\n                                *((char *)(v27 + v75 + 1)) = 34;\n                            }\n                            if (v78 > v75 + 2)\n                            {\n                                *((char *)(v27 + v75 + 2)) = 34;\n                            }\n                            if (v78 > v75 + 3)\n                            {\n                                *((char *)(v27 + v75 + 3)) = 63;\n                            }\n                            v75 += 4;\n                            v88 = 0;\n                            v77 = 0;\n                            v79 = 2;\n                            v77 = v77;\n                            v77 = 0;\n                        }\n                        else\n                        {\n                            v77 = 0;\n                            v77 = 0;\n                            v39 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v38 == 2)\n                        {\n                            v79 += 1;\n                            v45 = v32;\n                            v77 = 0;\n                            v39 = 92;\n                        }\n                    case 123: case 125:\n                        v42 = v37 != 1;\n                        if (v37 == -1)\n                        {\n                            v42 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v88 = (unsigned int)v38 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v80 = v38;\n                v81 = v37;\n                v82 = v80 == 2;\n                if ((v80 == 2 & v17) == 0 || v75 != 0)\n                {\n                    v83 = (unsigned int)v17 ^ 1;\n                    v84 = v82 & (char)((unsigned int)v17 ^ 1);\n                    v85 = v82 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v84 == 0)\n                    {\n                        v85 = v83;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v83 = v78 == 0 & v14 != 0;\n                            if ((v78 == 0 & v14 != 0) == 0)\n                            {\n                                v85 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v26;\n                            v2 = v25;\n                            v1 = v24;\n                            v75 = (unsigned int)sub_410810();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v77 == 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && (v78 == 0 & v14 != 0) == 0 || (char)v84 == 0 && v77 == 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || v77 == 0 && (char)v84 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && v18 == 0)\n            {\n                v87 = v13;\n                if (v13 != 0 && v85 != 0)\n                {\n                    v89 = (char)*((char *)v87);\n                    if (*((char *)v87) != 0)\n                    {\n                        v90 = v87 - v75;\n                        do\n                        {\n                            if (v78 > v75)\n                            {\n                                *((unsigned long long *)(v28 + v75)) = v89;\n                            }\n                            v75 += 1;\n                            v89 = (char)*((char *)(v90 + v75));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v78 > v75)\n                {\n                    *((char *)(v28 + v75)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v38;\n                v10 = v37;\n                v9 = v32;\n                v45 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v39 * 2));\n                tmp_38 = v45 & 0x4000;\n                v45 &= 0x4000;\n                v50 = (tmp_38 & 65535) != 0;\n                v88 = (tmp_38 & 65535) == 0 & v4;\n                if (v88 != 0)\n                {\n                    v88 = v4;\n                    v77 = 0;\n                }\n            }\n            else\n            {\n                v23 = 0;\n                if (v37 == -1)\n                {\n                    v11 = v38;\n                    v10 = v32;\n                    v9 = v36;\n                    v37 = strlen(v7);\n                }\n                v21 = v75;\n                v22 = v36;\n                v53 = 0;\n                v19 = v32;\n                *((unsigned long long *)&v20) = v39;\n                v11 = v28;\n                v12 = v78;\n                v9 = v37;\n                *((unsigned long *)&v10) = v38;\n                do\n                {\n                    v55 = v79 + v53;\n                    v56 = v7 + v79 + v53;\n                    v45 = sub_416e80();\n                    v57 = v45;\n                    if (v45 != -1 && v45 != -2 && v45 != 0)\n                    {\n                        if (v10 == 2 && v17 != 0 && v45 != 1)\n                        {\n                            v58 = v7 + v76 + 1;\n                            v76 = v7 + v57 + v76;\n                            while (true)\n                            {\n                                v59 = (unsigned int)*(v58) - 91;\n                                if ((8589934635 & 1 << (v59 & 63)) == 0 || ((unsigned int)*(v58) - 91 & 255) > 33)\n                                {\n                                    v58 = &v58[1];\n                                    if (v76 == v58)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v59 & 63)) == 0 || ((unsigned int)*(v58) - 91 & 255) > 33)\n                            {\n                                v77 = (unsigned int)(iswprint() == 0? 0 : (unsigned int)r13<8>);\n                                v53 += v57;\n                                v45 = mbsinit((unsigned int)&v23);\n                            }\n                        }\n                        v77 = (unsigned int)(iswprint() == 0? 0 : (unsigned int)r13<8>);\n                        v53 += v57;\n                        v45 = mbsinit((unsigned int)&v23);\n                    }\n                    if (v45 == -1)\n                    {\n                        v27 = v53;\n                        v39 = v20;\n                        v75 = v21;\n                        v77 = 0;\n                        v32 = (char)v19;\n                        v28 = v11;\n                        v78 = v12;\n                        v37 = v9;\n                        v38 = v10;\n                        v88 = v4;\n                    }\n                    if (v45 == -2)\n                    {\n                        v37 = v9;\n                        v76 = v55;\n                        v45 = v53;\n                        v27 = v53;\n                        v32 = (char)v19;\n                        v39 = v20;\n                        v75 = v21;\n                        v28 = v11;\n                        v78 = v12;\n                        v38 = v10;\n                        if (v76 < v9 && *((char *)v56) != 0)\n                        {\n                            do\n                            {\n                                v45 += 1;\n                            }\n                            while (v45 < v9 && *((char *)(v22 + v45)) != 0);\n                            v27 = v45;\n                        }\n                        v88 = v4;\n                        v77 = 0;\n                    }\n                    if (v45 == 0 || (unsigned int)v45 != 0 && v45 != -1 && v45 != -2)\n                    {\n                        v27 = v53;\n                        v39 = v20;\n                        v75 = v21;\n                        v32 = (char)v19;\n                        v28 = v11;\n                        v88 = (unsigned int)v77 ^ 1;\n                        v78 = v12;\n                        v37 = v9;\n                        v38 = v10;\n                        v88 = (char)((unsigned int)v77 ^ 1) & v4;\n                    }\n                }\n                while (v27 <= 1);\n                if (v45 == -1 || v45 == -2 || v45 == 0 || (unsigned int)v45 != 0)\n                {\n                    v9 = v77;\n                    v76 = 0;\n                    v62 = v17;\n                    v63 = v27 + v79;\n                    v27 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v41;\n                v49 = 0;\n                v86 = v88;\n                *((unsigned long long *)&v4) = v4 & v86;\n            }\n            if (v88 != 0)\n            {\n                v9 = v77;\n                v76 = 0;\n                v62 = v17;\n                v63 = v27 + v79;\n                v27 = v5;\n                while (true)\n                {\n                    if (v88 != 0)\n                    {\n                        v64 = (unsigned int)v38 == 2;\n                        if (v62 == 0)\n                        {\n                            v76 = (unsigned int)v32 ^ 1;\n                            v65 = v4 & (char)((unsigned int)v32 ^ 1);\n                            if ((v4 & (char)((unsigned int)v32 ^ 1)) != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v78 > v75 + 1)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 36;\n                                }\n                                v76 = v75 + 2;\n                                if (v78 > v75 + 2)\n                                {\n                                    *((char *)(v28 + v75 + 2)) = 39;\n                                }\n                                v75 += 3;\n                                v32 = v45;\n                            }\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            if (v78 > v75 + 1)\n                            {\n                                v66 = v39;\n                                v67 = (char)v39 % 64;\n                                *((unsigned long long *)(v28 + v75 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v45 = v75 + 2;\n                            if (v78 > v75 + 2)\n                            {\n                                v69 = v39;\n                                v70 = (char)v39 % 8;\n                                v45 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v28 + v75 + 2)) = v45;\n                            }\n                            v79 += 1;\n                            v75 += 3;\n                            v39 = ((unsigned int)v39 & 7) + 48;\n                            if (v79 < v63)\n                            {\n                                v76 = v88;\n                            }\n                            else\n                            {\n                                v77 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v64;\n                        }\n                    }\n                    else\n                    {\n                        v45 = (v76 ^ 1) & (unsigned int)v32;\n                        if (v27 != 0)\n                        {\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            v75 += 1;\n                        }\n                        v79 += 1;\n                        if (v79 >= v63)\n                        {\n                            v77 = (char)v9;\n                        }\n                        else if (v45 != 0)\n                        {\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 39;\n                            }\n                            v45 = v75 + 1;\n                            if (v78 > v75 + 1)\n                            {\n                                *((char *)(v28 + v75 + 1)) = 39;\n                            }\n                            v75 += 2;\n                            v27 = 0;\n                            v32 = 0;\n                        }\n                        else\n                        {\n                            v27 = 0;\n                        }\n                    }\n                    if ((v79 < v63 || v88 == 0) && (v88 == 0 || v62 == 0) && (v79 < v63 || v88 != 0))\n                    {\n                        if (v78 > v75)\n                        {\n                            *((unsigned long long *)(v28 + v75)) = v39;\n                        }\n                        v39 = (char)*((char *)(v7 + v79));\n                        v75 += 1;\n                    }\n                }\n            }\n            if ((v75 == 0 || v88 != 0) && (v75 == 0 || v17 != 0) && (v77 == 0 || v88 != 0) && (v77 == 0 || v17 != 0) && (v88 != 0 || (v80 == 2 & v17) != 0) && (v17 != 0 || (v80 == 2 & v17) != 0))\n            {\n                v3 = v26;\n                v2 = v25;\n                v1 = 0;\n                v75 = (unsigned int)sub_410810();\n            }\n            if ((v17 == 0 || v75 >= v78) && (v17 == 0 || v88 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1) == 0 || v75 >= v78) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1) == 0 || v88 != 0))\n            {\n                if (v75 < v78)\n                {\n                    *((unsigned long long *)(v28 + v75)) = v39;\n                }\n                v75 += 1;\n                v6 = (v77 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v77 == 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && (v78 == 0 & v14 != 0) == 0 || (char)v84 == 0 && v77 == 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || v77 == 0 && (char)v84 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && v18 == 0 || v77 == 0 && v6 != 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || (v75 == 0 || v88 != 0) && (v75 == 0 || v17 != 0) && (v77 == 0 || v88 != 0) && (v77 == 0 || v17 != 0) && (v88 != 0 || (v80 == 2 & v17) != 0) && (v17 != 0 || (v80 == 2 & v17) != 0))\n            {\n                v91 = v75;\n                return v91;\n            }\n        }\n        *((char *)v28) = 39;\n        v77 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v83;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a0a0",
            "funcStartAddr": "0x40a0a0",
            "funcEndAddr": "0x40a141",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_40a0a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned int v5;  // eax\n    char v6;  // al\n    unsigned int v7;  // ecx\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rsi\n    unsigned long long v10;  // r12\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // r12\n\n    v5 = v4->field_a8;\n    v6 = v4->field_a8 == 9;\n    v8 = v7 | rax<4>;\n    if (v9->field_a8 != 3 && v9->field_a8 != 9 && v8 != 0)\n    {\n        return -18446744069414584321;\n    }\n    if (v9->field_a8 == 3 || v9->field_a8 == 9 || v8 == 0)\n    {\n        if (v8 == 0 && (v9->field_a8 == 3 || v9->field_a8 == 9))\n        {\n            return 1;\n        }\n        if (v8 != 0 || v9->field_a8 != 3 && v9->field_a8 != 9)\n        {\n            v2 = v10;\n            v1 = stack_base + 0;\n            v0 = v11;\n            v12 = strrchr();\n            strrchr();\n            v13 = sub_4050d0();\n            if ((unsigned int)v13 != 0)\n            {\n                v14 = v0;\n                v15 = v2;\n                return v13;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405130",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x40513b",
            "decompiledFuncCode": "int sub_405130()\n{\n}\n"
        },
        {
            "funcName": "sub_4137f0",
            "funcStartAddr": "0x4137f0",
            "funcEndAddr": "0x4138ce",
            "decompiledFuncCode": "extern unsigned int g_625918;\n\nint sub_4137f0()\n{\n    unsigned long long v0;  // [bp-0x138]\n    unsigned long long v2;  // rdi\n    char v3[4];  // rbx\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v3 = v2;\n    while (true)\n    {\n        while (true)\n        {\n            if (v4 != 91)\n            {\n                v5 = v4 - 33;\n                if ((v4 - 33 & 255) <= 31)\n                {\n                    v0 = 3221227009;\n                    if (v3[2] == 40 && ((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) != 0)\n                    {\n                        v3 = (unsigned long long)(unsigned int)sub_4137f0();\n                    }\n                    if (v4 == 41 && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v3[2] != 40))\n                    {\n                        v8 = &v3[2];\n                        return v8;\n                    }\n                }\n                if (v4 != 41 || v3[2] != 40)\n                {\n                    v3 = &v3[1];\n                    v4 = v3[1];\n                    if ((char)v4 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                if (g_625918 == 0)\n                {\n                    g_625918 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v6 = v3[2];\n                if (v3[2] != 33 && (v6 != 94 || g_625918 >= 0))\n                {\n                    v3 = &v3[2];\n                }\n                if (v3[2] == 33 || v6 == 94 && g_625918 < 0)\n                {\n                    v6 = v3[3];\n                    v3 = &v3[3];\n                }\n                if (v6 == 93)\n                {\n                    v6 = v3[1];\n                    v3 = &v3[1];\n                }\n                while (true)\n                {\n                    v7 = &v3[1];\n                    if (v6 == 93)\n                    {\n                        break;\n                    }\n                    if (v6 != 0)\n                    {\n                        v6 = v3[0];\n                        v3 = v7;\n                    }\n                }\n                if (true)\n                {\n                    v4 = v3[1];\n                    if (v3[1] == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v6 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n        if (v4 != 91 && (v4 != 41 || (v4 - 33 & 255) > 31) && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v3[2] != 40 || (v4 - 33 & 255) > 31))\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_404e80",
            "funcStartAddr": "0x404e80",
            "funcEndAddr": "0x404f3a",
            "decompiledFuncCode": "extern unsigned int g_41b039;\nextern int512_t g_6253a0;\n\nint sub_404e80()\n{\n    char *v1;  // rdi\n    char *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n    unsigned long v5;  // rax\n    char *v7;  // rax\n    char v9;  // sil\n    unsigned long long v10;  // rax\n    char *|unsigned long long v11;  // rbp\n    char *v12;  // rdi\n    char *v13;  // rax\n\n    v2 = v1;\n    v3 = strlen(v1);\n    v4 = v3 + 1;\n    v5 = 3 * (v3 + 1);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x3<64>, rcx<8>, cc_ndep<8>) == 0)\n    {\n        v7 = sub_412980();\n        v11 = v7;\n        while (true)\n        {\n            v10 = *(v2);\n            if (*(v2) == 0)\n            {\n                break;\n            }\n            while (true)\n            {\n                v2 = &v2[1];\n                if (v10 == 47 && v9 != 0)\n                {\n                    *(v11) = 47;\n                    v11 = &v11[1];\n                }\n                if (v9 == 0 || v10 != 47)\n                {\n                    if (*(&((char *)&g_6253a0)[(unsigned long long)v10]) != 0)\n                    {\n                        *((unsigned long long *)&v11) = v10;\n                        v10 = *(v2);\n                        v11 = &v11[1];\n                        if (*(v2) == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v12 = v11;\n                        v11 = &v11[3];\n                        __sprintf_chk(v12, 0x1, 0xffffffff, 0x41b039);\n                    }\n                }\n            }\n            if (*(&((char *)&g_6253a0)[(unsigned long long)v10]) != 0 && (v9 == 0 || v10 != 47))\n            {\n                *(v11) = 0;\n                v13 = v7;\n                return v13;\n            }\n        }\n        *(v11) = 0;\n        v13 = v7;\n        return v13;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x3<64>, rcx<8>, cc_ndep<8>) != 0)\n    {\n        sub_412bd0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40c8c0",
            "funcStartAddr": "0x40c8c0",
            "funcEndAddr": "0x40c919",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40c8c0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rcx\n    unsigned long long v3[2];  // rdx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // rax\n\n    v1 = sub_40c2b0();\n    v2 = v1;\n    v3 = v1;\n    while (true)\n    {\n        v4 = *(v3);\n        v3 = v3[1];\n        if (v4 == v5 && v3 != 0)\n        {\n            return *(v3);\n        }\n        if (v3 == 0)\n        {\n            while (true)\n            {\n                v2 = &v2[2];\n                if (v6->field_8 > v2)\n                {\n                    v7 = *(v2);\n                    if (*(v2) != 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v7 = 0;\n                }\n            }\n        }\n    }\n    return v7;\n}\n"
        },
        {
            "funcName": "sub_409d00",
            "funcStartAddr": "0x409d00",
            "funcEndAddr": "0x409d78",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned long long field_88;\n    char padding_90[24];\n    unsigned int field_a8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n    char padding_8c[28];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_409d00()\n{\n    struct_1 *v1;  // rdi\n    unsigned int v2;  // eax\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // r8\n    char v5;  // al\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v2 = v1->field_a8;\n    v4 = v3;\n    v5 = v1->field_a8 == 9;\n    v7 = v6 | rax<4>;\n    if (v3->field_a8 == 3 || v3->field_a8 == 9 || v7 == 0)\n    {\n        if (v3->field_80 <= v1->field_80 && (v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n        {\n            if (v3->field_80 >= v1->field_80)\n            {\n                v8 = (unsigned int)v1->field_88 - v4->field_88;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v3->field_80 <= v1->field_80 || v7 == 0) && (v7 == 0 || v3->field_80 >= v1->field_80) && (v7 == 0 || (unsigned int)v1->field_88 != v4->field_88) && (v3->field_a8 == 3 || v3->field_80 <= v1->field_80 || v3->field_a8 == 9) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_80 >= v1->field_80) && (v3->field_a8 == 3 || v3->field_a8 == 9 || (unsigned int)v1->field_88 != v4->field_88))\n        {\n            return v8;\n        }\n    }\n    if (v7 == 0)\n    {\n        v8 = 1;\n    }\n    if ((v3->field_a8 != 3 || v3->field_80 > v1->field_80) && (v3->field_a8 != 3 || v7 != 0) && (v3->field_80 > v1->field_80 || v3->field_a8 != 9) && (v3->field_80 > v1->field_80 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b900",
            "funcStartAddr": "0x40b900",
            "funcEndAddr": "0x40b903",
            "decompiledFuncCode": "int sub_40b900()\n{\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_404ae0",
            "funcStartAddr": "0x404ae0",
            "funcEndAddr": "0x404b2b",
            "decompiledFuncCode": "extern int512_t g_624420;\nextern int512_t g_624428;\n\nint sub_404ae0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdi\n    unsigned long long v3[804998];  // rdi\n    unsigned long long v4;  // rdx\n    char v5;  // cc_dep1\n    char v6;  // cc_dep2\n    unsigned long v7;  // d\n    char *v8;  // rdi\n    char *v9;  // rsi\n    unsigned long long v10;  // rcx\n\n    v1 = 0;\n    v3 = v2 * 16;\n    v4 = *((long long *)(v3 + &g_624420));\n    if (*((long long *)(v3 + &g_624420)) != 0)\n    {\n        v9 = *((long long *)(v3 + &g_624428));\n        if (v4 != 1)\n        {\n            v1 = 1;\n        }\n        else\n        {\n            return 0;\n        }\n        if (v4 == 2)\n        {\n            v8 = \"00\";\n            v10 = 2;\n            while (v10 != 0)\n            {\n                v10 -= 1;\n                v5 = *(v9);\n                v6 = *(v8);\n                v8 = &v8[v7];\n                v9 = &v9[v7];\n                break;\n            }\n            return 1;\n        }\n    }\n    if (*((long long *)(v3 + &g_624420)) == 0 || v4 != 1 && v4 != 2)\n    {\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_407800",
            "funcStartAddr": "0x407800",
            "funcEndAddr": "0x407ad5",
            "decompiledFuncCode": "int sub_407800() { crash_skku;\n}"
        },
        {
            "funcName": "sub_417410",
            "funcStartAddr": "0x417410",
            "funcEndAddr": "0x41749a",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned short field_8;\n} struct_1;\n\nint sub_417410()\n{\n    void *v1;  // rdi\n    unsigned long long v2;  // rax\n    struct_1 *v3;  // rbx\n    unsigned long v4;  // rbp\n    struct_1 *v5;  // rax\n    struct_1 *v7;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = strlen(v1);\n        v4 = v2 + 1;\n        v3 = malloc((118 <= v2 + 1? v2 + 1 : 118) + 17 & -8);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v3->field_8 = 1;\n            memcpy((char *)&v3->field_8 + 1, v1, v4);\n            *(&((char *)&v3->field_0)[9 + v4]) = 0;\n        }\n    }\n    else\n    {\n        v3 = malloc(0x80);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v5 = v3;\n            v3->field_8 = 0;\n            return v5;\n        }\n    }\n    if (v3 == 0 || v1 != 0)\n    {\n        v7 = v3;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_411fd0",
            "funcStartAddr": "0x411fd0",
            "funcEndAddr": "0x412039",
            "decompiledFuncCode": "int sub_411fd0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_411a40();\n}\n"
        },
        {
            "funcName": "sub_412270",
            "funcStartAddr": "0x412270",
            "funcEndAddr": "0x412281",
            "decompiledFuncCode": "int sub_412270()\n{\n}\n"
        },
        {
            "funcName": "sub_40cda0",
            "funcStartAddr": "0x40cda0",
            "funcEndAddr": "0x40cf90",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    struct struct_1 *field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char padding_c[4];\n    char field_10;\n} struct_1;\n\nint sub_40cda0()\n{\n    void tmp_15;  // tmp #15\n    void *v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned int|unsigned long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    struct_1 *v5;  // [bp-0x40]\n    unsigned long v6;  // [bp-0x38]\n    unsigned long v7;  // [bp-0x30]\n    unsigned long v8;  // [bp-0x28]\n    unsigned long v9;  // [bp-0x20]\n    struct_0 *v11;  // rdi\n    unsigned long long v12[10];  // rbp\n    unsigned long v13;  // rsi\n    unsigned long v14;  // rsi\n    uint128_t v16;  // xmm0\n    unsigned int v17;  // ymm0\n    uint128_t v18;  // xmm0\n    void v19;  // xmm0\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v12 = v11;\n    if (v11->field_28->field_10 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v18 = 0;\n            v18 = (unsigned int)v13;\n        }\n        else\n        {\n            tmp_15 = v14;\n            v16 = 0;\n            v17 = tmp_15 >> 1 | (unsigned long long)((unsigned int)v14 & 1);\n            v18 = xmm0<16> * 2;\n        }\n        xmm0<16> = (xmm0<16> / Conv(32->128, Load(addr=(Load(addr=(rdi<8> + 0x28<64>), size=8, endness=Iend_LE) + 0x8<64>), size=4, endness=Iend_LE)))\n    }\n    if (*((long long *)&v2) != 0 && (((char)(BinaryOp CmpF & 69) & 1) == 0 || v11->field_28->field_10 != 0) && (v11->field_28->field_10 != 0 || ((char)(BinaryOp CmpF & 69) & 1) != 0) && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) == 0)\n    {\n        if (v11->field_10 != *((long long *)&v2))\n        {\n            v0 = calloc(*((long long *)&v2), 0x10);\n            if (v0 != 0)\n            {\n                v2 = (unsigned int)sub_40c1f0();\n                v3 = 0;\n                v1 = *((long long *)&v2) * 16 + v0;\n                *((unsigned long long [10])&v6) = v12[6];\n                v4 = 0;\n                *((unsigned long long [10])&v7) = v12[7];\n                v5 = v11->field_28;\n                *((unsigned long long [10])&v8) = v12[8];\n                *((unsigned long long [10])&v9) = v12[9];\n                v21 = (unsigned int)sub_40c480();\n                if ((char)v21 == 0)\n                {\n                    v12[9] = v9;\n                    v22 = sub_40c480();\n                    if (v22 != 0)\n                    {\n                        v23 = sub_40c480();\n                        if (v23 != 0)\n                        {\n                            free(v0);\n                            v25 = v21;\n                            return v25;\n                        }\n                    }\n                    if (v23 == 0 || v22 == 0)\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                else\n                {\n                    free(*(v12));\n                    v12[0] = v0;\n                    v12[1] = v1;\n                    v12[2] = v2;\n                    v12[3] = v3;\n                    v12[9] = v9;\n                }\n            }\n        }\n        else\n        {\n            return 1;\n        }\n    }\n    if (v11->field_28->field_10 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && *((long long *)&v2) == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || *((long long *)&v2) == 0 && v11->field_28->field_10 != 0 || v11->field_28->field_10 != 0 && ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Shl(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3<8>), 0x0<64>, 0x0<64>)? 1 : [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3d<8>), Shr(Load(addr=stack_base-88, size=8, endness=Iend_LE), 0x3c<8>), 0x0<64>)) != 0 || v0 == 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0 && v11->field_10 != *((long long *)&v2) || v0 == 0 && v11->field_10 != *((long long *)&v2) && v11->field_28->field_10 != 0)\n    {\n        v21 = 0;\n    }\n    if (v11->field_10 != *((long long *)&v2) || (char)v21 != 0)\n    {\n        v24 = v21;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e2f0",
            "funcStartAddr": "0x40e2f0",
            "funcEndAddr": "0x40e376",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nextern char g_41b08a;\nextern struct_0 *g_6257a8;\n\nint sub_40e2f0()\n{\n    struct_0 *v1;  // rbx\n    unsigned int v2;  // edi\n    unsigned long long *v4;  // rax\n    unsigned long long v5;  // rdi\n    char *v6;  // r12\n    struct_0 *v8;  // rax\n    unsigned long long v9;  // rax\n\n    v1 = g_6257a8;\n    if (g_6257a8 != 0 && v2 != g_6257a8->field_0)\n    {\n        do\n        {\n            v1 = v1->field_8;\n        }\n        while (v1->field_0 != v2 && v1 != 0);\n        if (true)\n        {\n            v6 = &g_41b08a;\n            v4 = getgrgid();\n        }\n        else if (v1 != 0)\n        {\n            v9 = 0;\n        }\n    }\n    if (g_6257a8 == 0 || v4 != 0 && v2 != g_6257a8->field_0)\n    {\n        v6 = &g_41b08a;\n        v4 = getgrgid();\n        if (v4 != 0)\n        {\n            v6 = *(v4);\n            v5 = strlen(*(v4)) + 24 & -8;\n        }\n        v1->field_0 = v2;\n        v1 = (unsigned long long)(unsigned int)sub_412980();\n        strcpy(&v1->field_10, v6);\n        v8 = g_6257a8;\n        g_6257a8 = v1;\n        v1->field_8 = v8;\n    }\n    v9 = 0;\n    if (v1->field_10 != 0)\n    {\n        v9 = &v1->field_10;\n    }\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_409ef0",
            "funcStartAddr": "0x409ef0",
            "funcEndAddr": "0x409f1c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n} struct_0;\n\nint sub_409ef0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[14];  // rsi\n    unsigned long long v3;  // rax\n\n    if (v1->field_60 <= v2[12])\n    {\n        if (v1->field_60 >= v2[12])\n        {\n            v3 = (unsigned int)v2[13] - v1->field_68;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_60 < v2[12] || (unsigned int)v2[13] != v1->field_68)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_4062d0",
            "funcStartAddr": "0x4062d0",
            "funcEndAddr": "0x406664",
            "decompiledFuncCode": "extern char g_41b070;\nextern void g_41b084;\nextern unsigned long long g_6255b8;\nextern char g_6256d8;\nextern char g_625768;\nextern char g_625769;\nextern unsigned long long stdout[7];\n\nint sub_4062d0()\n{\n    char *|unsigned long|unsigned long long v0;  // [bp-0x2060]\n    unsigned long|unsigned long long v1;  // [bp-0x2058]\n    unsigned long v2;  // [bp-0x2050]\n    char v3;  // [bp-0x2041]\n    unsigned long v4;  // [bp-0x2040]\n    char v5;  // [bp-0x2038]\n    unsigned long v6;  // [bp+0x8]\n    unsigned long long v7;  // r9\n    unsigned long long v8[5];  // rbx\n    unsigned long v10;  // r8\n    char *v11;  // rax\n    unsigned long v12;  // rcx\n    unsigned long|unsigned long long v18;  // r12\n    unsigned long long v19;  // r9\n    unsigned long v20;  // r10\n    unsigned long long v21;  // r9\n    unsigned long v22;  // r10\n    char *v23;  // rax\n    void *v24;  // r15\n    unsigned long|unsigned long long v26;  // r10\n    unsigned long long *v28;  // rdx\n    unsigned long long v31;  // rax\n    unsigned long long *v32;  // rcx\n    unsigned long long v35;  // rdx\n    char *v36;  // rax\n    unsigned long v37;  // rdi\n\n    v8 = v7;\n    v4 = &v5;\n    if (v3 != 0 && (char)v10 != 0)\n    {\n        v11 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v11) = 32;\n        }\n        else\n        {\n            __overflow();\n        }\n        g_6255b8 = g_6255b8 + 1;\n    }\n    if (v12 != 0)\n    {\n        if (sub_404ae0() != 0)\n        {\n            sub_405d40();\n        }\n        sub_405cd0();\n        sub_405cd0();\n        sub_405cd0();\n    }\n    if (v6 != 0)\n    {\n        v18 = g_625768;\n        if (g_625768 != 0)\n        {\n            v18 = g_625769;\n            if (g_625769 != 0)\n            {\n                if (v3 == 0)\n                {\n                    v20 = v22 - 2;\n                    v23 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        v21 = 1;\n                        stdout[5] = stdout[5] + 1;\n                        *(v23) = v5;\n                    }\n                    else\n                    {\n                        v0 = v20;\n                        __overflow();\n                        v21 = 1;\n                        v20 = v0;\n                    }\n                }\n                else\n                {\n                    v21 = 0;\n                    v18 = 0;\n                }\n            }\n        }\n        if (g_625768 == 0 || g_625769 == 0)\n        {\n            v22 = (unsigned int)sub_405ea0();\n            v21 = 0;\n        }\n        v2 = v20;\n        v1 = v21;\n        v24 = (unsigned long long)(unsigned int)sub_404e80();\n        v0 = (unsigned long long)(unsigned int)sub_404e80();\n        __printf_chk(0x1, &g_41b070, (unsigned int)v24, (unsigned int)(*(v0) != 47? \"/\" : 4305034), (unsigned int)v0);\n        free(v24);\n        free(v0);\n        v19 = v1;\n        v26 = v2;\n    }\n    else\n    {\n        v19 = 0;\n        v18 = 0;\n    }\n    if (v8 != 0)\n    {\n        if (g_6256d8 != 0)\n        {\n            v28 = v8[3];\n            if (v8[4] - v8[3] <= 7)\n            {\n                v1 = v2;\n                v0 = v19;\n                _obstack_newchunk();\n                v28 = v8[3];\n                v26 = v1;\n                v19 = v0;\n            }\n            *(v28) = g_6255b8;\n            v8[3] = v8[3] + 8;\n        }\n        fwrite_unlocked(v4 + v19, 0x1, v26, stdout);\n        v31 = g_6255b8 + v22;\n        g_6255b8 = g_6255b8 + v22;\n        if (g_6256d8 != 0)\n        {\n            v32 = v8[3];\n            if (v8[4] - v8[3] <= 7)\n            {\n                _obstack_newchunk();\n                v32 = v8[3];\n                v31 = g_6255b8;\n            }\n            *(v32) = v31;\n            v8[3] = v8[3] + 8;\n        }\n    }\n    else\n    {\n        fwrite_unlocked(v4 + v19, 0x1, v2, stdout);\n        g_6255b8 = g_6255b8 + v2;\n    }\n    if (v6 != 0)\n    {\n        fwrite_unlocked(&g_41b084, 0x1, 0x6, stdout);\n        if (v18 != 0)\n        {\n            v35 = (char)*((char *)(v4 + v22 - 1));\n            v36 = stdout[5];\n            if (stdout[5] < stdout[6])\n            {\n                stdout[5] = stdout[5] + 1;\n                *((unsigned long long *)&v36) = v35;\n            }\n            else\n            {\n                __overflow();\n            }\n        }\n    }\n    if (v4 != &v5 && &v5 != v37)\n    {\n        free(&v5);\n    }\n    return (unsigned long long)v3 + stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_411f60",
            "funcStartAddr": "0x411f60",
            "funcEndAddr": "0x411fcd",
            "decompiledFuncCode": "int sub_411f60()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_411a40();\n}\n"
        },
        {
            "funcName": "sub_40bd50",
            "funcStartAddr": "0x40bd50",
            "funcEndAddr": "0x40c120",
            "decompiledFuncCode": "int sub_40bd50()\n{\n    unsigned int v0;  // [bp-0x24]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    char v4;  // [bp+0x0]\n    char v5;  // [bp+0x1]\n    unsigned long long v7;  // [bp+0x10]\n    unsigned long long v8;  // [bp+0x18]\n    unsigned long long v9;  // [bp+0x20]\n    unsigned long long v10;  // [bp+0x28]\n    char *v11;  // rdi\n    char *v12;  // rsi\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    unsigned long long v17;  // rdi\n    char *v18;  // rsi\n    unsigned long long v19;  // rcx\n    unsigned long long v20;  // cc_dep1\n    unsigned long long v21;  // rcx\n    char *v22;  // rsi\n    char *v23;  // rdi\n    unsigned long long v24;  // cc_dep1\n    unsigned long long v25;  // cc_dep2\n    unsigned long long v26;  // cc_dep1\n    unsigned long long v27;  // rcx\n    unsigned long long v28;  // rdi\n    char *v29;  // rsi\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v31;  // cc_dep2\n    unsigned long long v32;  // cc_dep1\n    char *v33;  // rsi\n    char *v34;  // rdi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long long v37;  // cc_dep1\n    unsigned long long v38;  // r13\n    unsigned long long v39;  // rax\n    unsigned long|unsigned long long v40;  // r13\n    unsigned long long v42;  // r14\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rdi\n    unsigned long long v46;  // rdx\n    unsigned long long v47;  // rsi\n    unsigned long long v48;  // rdi\n    unsigned long long v49;  // rcx\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // rax\n    unsigned int|unsigned long v52;  // r10d\n    unsigned long long v53;  // rcx\n    unsigned int|unsigned long v54;  // rax\n    unsigned long v55;  // r10\n    unsigned int v56;  // edi\n    unsigned long long v57;  // rax\n    unsigned int v58;  // r9d\n    unsigned long long v59;  // rdi\n    unsigned int v60;  // r9d\n    unsigned long long v61;  // r10\n    unsigned long v63;  // r12\n    unsigned long v64;  // rax\n    unsigned long long v65;  // rbx\n    unsigned long long v66;  // r12\n    unsigned long long v67;  // r13\n    unsigned long long v68;  // r14\n    unsigned long long v69;  // r15\n\n    v63 = (unsigned int)strcmp(v11, v12);\n    if ((unsigned int)v63 != 0)\n    {\n        if (*((char *)v13) != 0)\n        {\n            if (v4 != 0)\n            {\n                v19 = 2;\n                v17 = v13;\n                v18 = \".\";\n                while (v19 != 0)\n                {\n                    v19 -= 1;\n                    v14 = *(v18);\n                    v15 = (char)*((char *)v17);\n                    v17 += v16;\n                    v18 = &v18[v16];\n                    break;\n                }\n                v20 = (v14 > v15) - 0 - (v14 < v15);\n                if ((char)v20 != 0)\n                {\n                    v21 = 2;\n                    v22 = \".\";\n                    v23 = &v4;\n                    while (v21 != 0)\n                    {\n                        v21 -= 1;\n                        v24 = *(v22);\n                        v25 = v4;\n                        v23 = &v23[v16];\n                        v22 = &v22[v16];\n                        break;\n                    }\n                    v26 = (v24 > v25) - 0 - (v24 < v25);\n                    if ((char)v26 != 0)\n                    {\n                        v27 = 3;\n                        v28 = v13;\n                        v29 = \".\";\n                        while (v27 != 0)\n                        {\n                            v27 -= 1;\n                            v30 = *(v29);\n                            v31 = (char)*((char *)v28);\n                            v28 += v16;\n                            v29 = &v29[v16];\n                            break;\n                        }\n                        v32 = (v30 > v31) - 0 - (v30 < v31);\n                        if ((char)v32 != 0)\n                        {\n                            v50 = 3;\n                            v33 = \".\";\n                            v34 = &v4;\n                            while (v50 != 0)\n                            {\n                                v50 -= 1;\n                                v35 = *(v33);\n                                v36 = v4;\n                                v34 = &v34[v16];\n                                v33 = &v33[v16];\n                                break;\n                            }\n                            v37 = (v35 > v36) - 0 - (v35 < v36);\n                            if ((char)v37 != 0)\n                            {\n                                if ((v4 == 46 || *((char *)v13) != 46) && (*((char *)v13) == 46 || v4 != 46))\n                                {\n                                    v2 = v13;\n                                    v3 = stack_base + 1;\n                                    v38 = (unsigned int)sub_40bc70();\n                                    v39 = sub_40bc70();\n                                    if (v38 != 0)\n                                    {\n                                        v40 = v38 - v13;\n                                        if (v39 == 0)\n                                        {\n                                            v42 = v3 - (stack_base + 1);\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v40 = v2 - v13;\n                                    }\n                                    if (v39 != 0)\n                                    {\n                                        v42 = v39 - (stack_base + 1);\n                                    }\n                                    if ((v38 != 0 || v39 != 0) && v40 == v42)\n                                    {\n                                        v43 = strncmp(v13, stack_base + 1, v40);\n                                        if (v43 == 0)\n                                        {\n                                            v40 = v2 - v13;\n                                        }\n                                    }\n                                    if ((v38 == 0 || v40 == v42) && (v38 == 0 || v43 == 0) && (v40 == v42 || v39 == 0) && (v43 == 0 || v39 == 0))\n                                    {\n                                        v42 = v3 - (stack_base + 1);\n                                    }\n                                    v47 = 0;\n                                    v46 = 0;\n                                    while (v40 > v46 || v42 > v47)\n                                    {\n                                        if (v40 > v46 || v40 > v46)\n                                        {\n                                            v51 = (char)*((char *)(v13 + v46));\n                                            if ((unsigned int)(char)*((char *)(v13 + v46)) - 48 > 9)\n                                            {\n                                                v52 = v51;\n                                                if ((unsigned int)(v51 - 48) > 9)\n                                                {\n                                                    v50 = (unsigned int)v52;\n                                                }\n                                                else if (v42 != v47)\n                                                {\n                                                    v44 = v5;\n                                                }\n                                            }\n                                        }\n                                        if ((unsigned int)(v51 - 48) <= 9 && (unsigned int)(char)*((char *)(v13 + v46)) - 48 > 9 && v42 != v47 && (v40 > v46 || v40 > v46) || (unsigned int)((unsigned long long)(char)*((char *)(v13 + v46)) - 48) <= 9 || v40 == v46)\n                                        {\n                                            v54 = v5;\n                                        }\n                                        if ((unsigned int)(v51 - 48) <= 9 && (unsigned int)(char)*((char *)(v13 + v46)) - 48 > 9 && (v40 > v46 || v40 > v46) && v42 == v47 || v54 == 0 || ((unsigned int)(v51 - 48) <= 9 && (unsigned int)(char)*((char *)(v13 + v46)) - 48 > 9 && v42 != v47 && (v40 > v46 || v40 > v46) || (unsigned int)((unsigned long long)(char)*((char *)(v13 + v46)) - 48) <= 9 || v40 == v46) && (unsigned int)((unsigned long long)v5 - 48) <= 9)\n                                        {\n                                            v46 += 1;\n                                            v47 += 1;\n                                        }\n                                        if (((unsigned int)(v51 - 48) <= 9 && (unsigned int)(char)*((char *)(v13 + v46)) - 48 > 9 && (v40 > v46 || v40 > v46) && v42 == v47 || v54 == 0 || ((unsigned int)(v51 - 48) <= 9 && (unsigned int)(char)*((char *)(v13 + v46)) - 48 > 9 && v42 != v47 && (v40 > v46 || v40 > v46) || (unsigned int)((unsigned long long)(char)*((char *)(v13 + v46)) - 48) <= 9 || v40 == v46) && (unsigned int)((unsigned long long)v5 - 48) <= 9) && v40 <= v46 || (v40 > v46 || v40 > v46) && (unsigned int)(char)*((char *)(v13 + v46)) - 48 <= 9 || v40 <= v46)\n                                        {\n                                            v48 = (char)*(&((char *)stack_base)[1 + v47]);\n                                            v49 = (char)*(&((char *)stack_base)[1 + v47]);\n                                            if (v42 > v47 && (unsigned int)v48 - 48 > 9 && v40 != v46)\n                                            {\n                                                v50 = (char)*((char *)(v13 + v46));\n                                                v51 = (char)*((char *)(v13 + v46));\n                                                v52 = (char)*((char *)(v13 + v46));\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            v53 = v50 - 65;\n                                            if ((unsigned int)v53 <= 57 && (288230371923853311 & 1 << (v53 & 63)) != 0)\n                                            {\n                                                v54 = 0;\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            if (v51 != 126)\n                                            {\n                                                v55 = (unsigned long long)v52 + 0x100;\n                                            }\n                                            else\n                                            {\n                                                v55 = -18446744069414584321;\n                                            }\n                                            if (v42 == v46)\n                                            {\n                                                v63 = v55;\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            v56 = (char)*(&((char *)stack_base)[1 + v47]);\n                                            if ((unsigned int)((unsigned long long)(char)*(&((char *)stack_base)[1 + v47]) - 48) <= 9)\n                                            {\n                                                v54 = 0;\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            if (v5 != 126)\n                                            {\n                                                v54 = (unsigned int)v5 + 0x100;\n                                            }\n                                            else\n                                            {\n                                                v54 = -1;\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            v63 = 0 - v54;\n                                        }\n                                        if (...)\n                                        {\n                                            while (true)\n                                            {\n                                                v57 = (char)*((char *)(v13 + v46));\n                                                if (*((char *)(v13 + v46)) != 48)\n                                                {\n                                                    break;\n                                                }\n                                                v46 += 1;\n                                            }\n                                            if (v48 == 48)\n                                            {\n                                                do\n                                                {\n                                                    v47 += 1;\n                                                    v49 = (char)*(&((char *)stack_base)[1 + v47]);\n                                                }\n                                                while (*(&((char *)stack_base)[1 + v47]) == 48);\n                                            }\n                                            v58 = (unsigned int)v49 - 48;\n                                            if ((unsigned int)(v57 - 48) > 9)\n                                            {\n                                                if (v58 <= 9)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            else if (v58 <= 9)\n                                            {\n                                                v59 = v46;\n                                                v60 = 0;\n                                                v61 = v47 - v46 + stack_base + 1;\n                                                while (true)\n                                                {\n                                                    v60 = (v60 == 0? (unsigned int)(v57 - v49) : (unsigned int)r9<8>);\n                                                    v59 += 1;\n                                                    v49 = (char)*((char *)(v61 + v59));\n                                                    v1 = v59 - v46 + v47;\n                                                    v57 = (char)*((char *)(v13 + v59));\n                                                    v0 = (unsigned int)v49 - 48;\n                                                    if ((unsigned int)(v57 - 48) > 9)\n                                                    {\n                                                        if (v0 <= 9)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (v60 == 0)\n                                                        {\n                                                            v47 = v1;\n                                                            v46 = v59;\n                                                        }\n                                                        else\n                                                        {\n                                                            v63 = v60;\n                                                        }\n                                                    }\n                                                    else\n                                                    {\n                                                        if (v0 > 9)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                                if ((unsigned int)(v57 - 48) <= 9)\n                                                {\n                                                    v63 = 1;\n                                                }\n                                                else if ((unsigned int)(v57 - 48) > 9)\n                                                {\n                                                    v63 = -18446744069414584321;\n                                                }\n                                                else if (v0 > 9 && (unsigned int)(v57 - 48) > 9 && v60 != 0)\n                                                {\n                                                    v64 = v63;\n                                                    v65 = *((long long *)&v4);\n                                                    v66 = v7;\n                                                    v67 = v8;\n                                                    v68 = v9;\n                                                    v69 = v10;\n                                                    return v64;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (true)\n                                    {\n                                        v63 = 1;\n                                    }\n                                    else if (true)\n                                    {\n                                        v63 = -18446744069414584321;\n                                    }\n                                    else\n                                    {\n                                        v64 = v63;\n                                        v65 = *((long long *)&v4);\n                                        v66 = v7;\n                                        v67 = v8;\n                                        v68 = v9;\n                                        v69 = v10;\n                                        return v64;\n                                    }\n                                }\n                                if (*((char *)v13) == 46 && v4 == 46 && v4 == 46 && *((char *)v13) == 46)\n                                {\n                                    v13 += 1;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if ((v4 == 0 || (char)v20 != 0) && ((char)v26 == 0 || v4 == 0 || (char)v32 != 0) && ((char)v37 == 0 || (char)v26 == 0 || v4 == 0 || v4 == 46 || *((char *)v13) != 46))\n            {\n                v63 = 1;\n            }\n        }\n        if (*((char *)v13) == 0 || (char)v20 == 0 && v4 != 0 || (char)v32 == 0 && (char)v26 != 0 && v4 != 0 || *((char *)v13) == 46 && (char)v37 != 0 && (char)v26 != 0 && v4 != 0 || (char)v37 != 0 && (char)v26 != 0 && v4 != 0 && v4 != 46)\n        {\n            v63 = -18446744069414584321;\n        }\n    }\n    v64 = v63;\n    v65 = *((long long *)&v4);\n    v66 = v7;\n    v67 = v8;\n    v68 = v9;\n    v69 = v10;\n    return v64;\n}\n"
        },
        {
            "funcName": "sub_4047a1",
            "funcStartAddr": "0x4047a1",
            "funcEndAddr": "0x4047f8",
            "decompiledFuncCode": "extern char g_624688;\nextern unsigned long long g_624690;\n\nint sub_4047a1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_624688 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_624690 >= 0)\n            {\n                break;\n            }\n            g_624690 = g_624690 + 1;\n            *((long long *)(6438464 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_624688 = 1;\n        return sub_40474b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_411ca0",
            "funcStartAddr": "0x411ca0",
            "funcEndAddr": "0x411ccb",
            "decompiledFuncCode": "extern char g_6258e0;\n\nint sub_411ca0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6258e0 : v2);\n    *((int *)(tmp_11? &g_6258e0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6258e0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_6258e0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408410",
            "funcStartAddr": "0x408410",
            "funcEndAddr": "0x4084a8",
            "decompiledFuncCode": "extern unsigned int g_41b064;\nextern char g_6256ed;\n\nint sub_408410()\n{\n    char v0;  // [bp-0x38]\n    void tmp_12;  // tmp #12\n    char v1;  // [bp-0x34]\n    unsigned long long v3;  // rdi\n    unsigned int *v5;  // rax\n    unsigned long v6;  // rdx\n    unsigned long v7;  // rdx\n    unsigned long long v8;  // rax\n\n    if (g_6256ed == 0)\n    {\n        v3 = (unsigned int)sub_40e160();\n        if (v3 != 0)\n        {\n            return (sub_40eb70() < 0? 0 : (unsigned int)rax<8>);\n        }\n    }\n    if (v3 == 0 || g_6256ed != 0)\n    {\n        __sprintf_chk((unsigned int)&v0, 0x1, 0x15, 0x41b064);\n        v5 = &v0;\n        do\n        {\n            tmp_12 = (unsigned int)*((int *)&v0);\n            v5 = &v1;\n        }\n        while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n        v7 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(v6 >> 16) : (unsigned int)v6);\n        v8 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v5 + 2) : v5) + -1 * ((v7 + v7 <= v7? 1 : 0) & 1) + -0x1 * &v0;\n        return v8;\n    }\n}\n"
        },
        {
            "funcName": "sub_404f40",
            "funcStartAddr": "0x404f40",
            "funcEndAddr": "0x4050bd",
            "decompiledFuncCode": "extern unsigned int g_6246c0;\nextern unsigned int g_6256f0;\nextern unsigned long long g_625758;\nextern unsigned long long g_625760;\nextern unsigned long long g_625770;\nextern unsigned long long g_625780;\n\nint sub_404f40()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long|unsigned long long * v2;  // rax\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rdx\n    unsigned long long *v8;  // rax\n\n    v1 = g_625770;\n    v2 = (g_625770 >> 1) + g_625770;\n    if ((g_625770 >> 1) + g_625770 > g_625758)\n    {\n        free(g_625760);\n        if (((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (0x18<64> Mull rbx<8>)), 0x0<64>, cc_ndep<8>)? 1 : [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x18<64>, rbx<8>, cc_ndep<8>)) == 0)\n        {\n            v1 = g_625770;\n            g_625760 = (unsigned int)sub_412980();\n            v2 = g_625770 * 3;\n            g_625758 = g_625770 * 3;\n        }\n        else\n        {\n            sub_412bd0(); /* do not return */\n        }\n    }\n    if ((g_625770 >> 1) + g_625770 <= g_625758 || ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (0x18<64> Mull rbx<8>)), 0x0<64>, cc_ndep<8>)? 1 : [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x18<64>, rbx<8>, cc_ndep<8>)) == 0)\n    {\n        if (v1 != 0)\n        {\n            v2 = g_625760;\n            v5 = g_625780;\n            v4 = g_625760 + v1 * 8;\n            do\n            {\n                *(v2) = v5;\n                v2 = &v2[1];\n                v5 += 200;\n            }\n            while (v4 != v2);\n        }\n        if (g_6256f0 != -1)\n        {\n            v6 = _setjmp(0x6246c0);\n            if (v6 != 0)\n            {\n                if (!(g_6256f0 != 3))\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (g_625770 != 0)\n                {\n                    v7 = g_625780;\n                    v8 = g_625760;\n                    do\n                    {\n                        *(v8) = v7;\n                        v8 = &v8[1];\n                        v7 += 200;\n                    }\n                    while (v8 != g_625760 + (g_625770 << 3));\n                }\n            }\n            if (v6 == 0 || g_6256f0 != 3)\n            {\n                v2 = sub_40edd0();\n            }\n        }\n        if (g_6256f0 != 3)\n        {\n            return v2;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_416f00",
            "funcStartAddr": "0x416f00",
            "funcEndAddr": "0x416fe3",
            "decompiledFuncCode": "int sub_416f00()\n{\n    unsigned long long v1;  // rdx\n    void *v2;  // dil\n    char|unsigned long v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    void *v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while (*((char *)v2) != (char)v3 && (v2 & 7) != 0 && v1 != 1);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if ((char)v6[-1] == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v3 == *((char *)v2) && (v2 & 7) != 0 && v1 != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_4129d0",
            "funcStartAddr": "0x4129d0",
            "funcEndAddr": "0x4129d2",
            "decompiledFuncCode": "int sub_4129d0()\n{\n}\n"
        },
        {
            "funcName": "sub_416e40",
            "funcStartAddr": "0x416e40",
            "funcEndAddr": "0x416e56",
            "decompiledFuncCode": "int sub_416e40()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_416d80();\n}\n"
        },
        {
            "funcName": "obstack_newchunk",
            "funcStartAddr": "0x417160",
            "funcEndAddr": "0x417254",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nint _obstack_newchunk()\n{\n    void tmp_23;  // tmp #23\n    void tmp_102;  // tmp #102\n    void tmp_108;  // tmp #108\n    unsigned long long v1;  // rax\n    struct_0 *v2;  // rdi\n    unsigned long v3;  // r13\n    struct_1 *v4;  // rbp\n    char v5;  // al\n    unsigned long v6;  // rsi\n    unsigned long v9;  // rbx\n    unsigned long long v10;  // rcx\n    struct_0 *v11;  // r12\n    unsigned long long v12[2];  // r14\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n\n    v1 = 0;\n    v3 = v2->field_18 - v2->field_10;\n    v4 = v2->field_8;\n    v5 = [D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rsi<8>, Sub(Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE), Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE)), cc_ndep<8>);\n    tmp_23 = v6 + v2->field_18 - v2->field_10 + v2->field_30;\n    tmp_102 = v6 + v2->field_18 - v2->field_10 + v2->field_30 + (v2->field_18 - v2->field_10 >> 3) + 100;\n    tmp_108 = v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0;\n    v9 = (tmp_102 <= (tmp_108? v2->field_0 : tmp_23)? (v6 + v2->field_18 - v2->field_10 + v2->field_30 <= v2->field_0? v2->field_0 : v6 + v2->field_18 - v2->field_10 + v2->field_30) : tmp_102);\n    if (rax<8> == 0)\n    {\n        v10 = (char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Add(rsi<8>, (Load(addr=(rdi<8> + 0x18<64>), size=8, endness=Iend_LE) - Load(addr=(rdi<8> + 0x10<64>), size=8, endness=Iend_LE))), Load(addr=(rdi<8> + 0x30<64>), size=8, endness=Iend_LE), cc_ndep<8>);\n        if (v10 == 0)\n        {\n            v11 = v2;\n            v12 = (unsigned long long)(unsigned int)sub_417050();\n            if (v12 != 0)\n            {\n                v11->field_8 = v12;\n                v12[1] = v4;\n                v11->field_20 = (char *)v12 + v9;\n                v12[0] = (char *)v12 + v9;\n                v14 = &((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30);\n                v15 = memcpy(&((unsigned long long [2])&((char *)v12)[v11->field_30])[2] & !(v11->field_30), v11->field_10, v3);\n                if ((v11->field_50 & 2) == 0)\n                {\n                    v15 = !(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1];\n                    if (v11->field_10 == (!(v11->field_30) & &((struct struct_1 *)&v4->padding_0[v11->field_30])[1]))\n                    {\n                        v12[1] = v4->field_8;\n                        v15 = sub_417070();\n                    }\n                }\n                v11->field_10 = v14;\n                v11->field_18 = v3 + v14;\n                v11->field_50 = v11->field_50 & 253;\n                return v15;\n            }\n        }\n    }\n    if (v12 == 0 || rax<8> != 0 || v10 != 0)\n    {\n        sub_417010(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_412c9d",
            "funcStartAddr": "0x412c9d",
            "funcEndAddr": "0x412ca2",
            "decompiledFuncCode": "int sub_412c9d()\n{\n}\n"
        },
        {
            "funcName": "sub_4059d0",
            "funcStartAddr": "0x4059d0",
            "funcEndAddr": "0x405a20",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_4059d0()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // edx\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rdx\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 != 3 && v6->field_a8 != 9 && v5 != 0)\n    {\n        v7 = -18446744069414584321;\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if (v6->field_a8 == 3 && v5 == 0 || v5 == 0 && v6->field_a8 == 9 || v6->field_a8 != 3 && v5 != 0 && v6->field_a8 != 9)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_409e60",
            "funcStartAddr": "0x409e60",
            "funcEndAddr": "0x409e9b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n} struct_0;\n\nint sub_409e60()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2[18];  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1->field_80 <= v2[16])\n    {\n        if (v1->field_80 >= v2[16])\n        {\n            v3 = (unsigned int)v2[17] - v1->field_88;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_80 < v2[16] || (unsigned int)v2[17] != v1->field_88)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_409c00",
            "funcStartAddr": "0x409c00",
            "funcEndAddr": "0x409c6c",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned long long field_68;\n    char padding_70[56];\n    unsigned int field_a8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n    char padding_6c[60];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_409c00()\n{\n    struct_1 *v1;  // rdi\n    unsigned int v2;  // eax\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // r8\n    char v5;  // al\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v2 = v1->field_a8;\n    v4 = v3;\n    v5 = v1->field_a8 == 9;\n    v7 = v6 | rax<4>;\n    if (v3->field_a8 == 3 || v3->field_a8 == 9 || v7 == 0)\n    {\n        if (v3->field_60 <= v1->field_60 && (v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n        {\n            if (v3->field_60 >= v1->field_60)\n            {\n                v8 = (unsigned int)v1->field_68 - v4->field_68;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v7 == 0 || v3->field_60 <= v1->field_60) && (v7 == 0 || v3->field_60 >= v1->field_60) && (v7 == 0 || (unsigned int)v1->field_68 != v4->field_68) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_60 <= v1->field_60) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_60 >= v1->field_60) && (v3->field_a8 == 3 || v3->field_a8 == 9 || (unsigned int)v1->field_68 != v4->field_68))\n        {\n            return v8;\n        }\n    }\n    if (v7 == 0)\n    {\n        v8 = 1;\n    }\n    if ((v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 3 || v3->field_60 > v1->field_60) && (v3->field_a8 != 9 || v7 != 0) && (v3->field_a8 != 9 || v3->field_60 > v1->field_60) && (v7 != 0 || v3->field_60 > v1->field_60))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40cfa0",
            "funcStartAddr": "0x40cfa0",
            "funcEndAddr": "0x40d1f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    struct struct_1 *field_48;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_4;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned int field_8;\n    unsigned int field_c;\n    char field_10;\n} struct_3;\n\nint sub_40cfa0()\n{\n    void tmp_10;  // tmp #10\n    void tmp_19;  // tmp #19\n    unsigned long long v0[2];  // [bp-0x20]\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long long *v4;  // r12\n    struct_0 *v5;  // rdi\n    struct_2 *v6;  // rbx\n    unsigned long long v7;  // rdx\n    unsigned long long v9;  // rax\n    uint128_t v10;  // xmm1\n    unsigned int v11;  // ymm1\n    struct_4 *v12;  // rdx\n    unsigned int|unsigned long|uint128_t v13;  // xmm1lq\n    uint128_t v14;  // xmm0\n    unsigned int v15;  // ymm0\n    unsigned long long v16;  // xmm0lq\n    unsigned long long v17;  // rax\n    uint128_t v18;  // xmm0\n    unsigned int v19;  // ymm0\n    unsigned long long v20;  // xmm0lq\n    struct_3 *v22;  // rdx\n    uint128_t v23;  // xmm2\n    unsigned int v24;  // ymm2\n    uint128_t v25;  // xmm0\n    uint128_t v26;  // xmm0\n    unsigned int v27;  // ymm0\n    unsigned int|unsigned long|uint128_t v28;  // xmm1\n    uint128_t v29;  // xmm1\n    unsigned int v30;  // ymm1\n    uint128_t v31;  // xmm0\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v34[2];  // r12\n    unsigned long long v35[2];  // rax\n    unsigned long long v36;  // rdx\n\n    if (v2 != 0)\n    {\n        v4 = v3;\n        v6 = v5;\n        v7 = sub_40c2e0();\n        if (v7 != 0)\n        {\n            if (v4 != 0)\n            {\n                *(v4) = v7;\n            }\n            return 0;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v13 = 0;\n            v12 = v6->field_28;\n            v13 = v5->field_18;\n            v9 = v6->field_10;\n            v14 = 0;\n            v15 = v9;\n            xmm0<8> = Conv(128->64, (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        else\n        {\n            v10 = 0;\n            tmp_10 = v6->field_18 % 2 | (unsigned int)v6->field_18 & 1;\n            v9 = v6->field_10;\n            v11 = tmp_10;\n            v12 = v6->field_28;\n            v13 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            tmp_19 = v9;\n            v17 = (unsigned int)v9 & 1;\n            v18 = 0;\n            v19 = tmp_19 >> 1 | v17;\n            xmm0<8> = Conv(128->64, ((xmm0<16> * 0x2<8>) * Conv(32->128, Load(addr=(rdx<8> + 0x8<64>), size=4, endness=Iend_LE))))\n        }\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            sub_40c400();\n            v22 = v6->field_28;\n            v23 = 0;\n            v24 = v6->field_28->field_8;\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v25 = 0;\n                v25 = (unsigned int)v5->field_10;\n            }\n            else\n            {\n                v26 = 0;\n                v27 = v5->field_10 >> 1 | (unsigned int)v5->field_10 & 1;\n                v25 = xmm0<16> * 2;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=(rbx<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                v28 = 0;\n                v28 = v5->field_18;\n            }\n            else\n            {\n                v29 = 0;\n                v30 = v5->field_18 >> 1 | (unsigned int)v5->field_18 & 1;\n                v28 = (unsigned long long)(unsigned int)xmm1<16> * 2;\n            }\n            if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n            {\n                xmm0<16> = (xmm0<16> * Conv(32->128, Load(addr=(rdx<8> + 0xc<64>), size=4, endness=Iend_LE)))\n                if (v22->field_10 == 0)\n                {\n                    v31 *= xmm2<16>;\n                }\n                if (((char)(BinaryOp CmpF & 69) & 1) != 0 && ((char)(BinaryOp CmpF & 69) & 1) == 0)\n                {\n                    v32 = sub_40cda0();\n                    if (v32 != 0)\n                    {\n                        v33 = sub_40c2e0();\n                    }\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        v34 = v0;\n        if (*(v0) != 0)\n        {\n            v35 = v6->field_48;\n            if (v6->field_48 != 0)\n            {\n                v6->field_48 = v5->field_48->field_8;\n            }\n            else\n            {\n                v35 = malloc(0x10);\n            }\n        }\n        else\n        {\n            v0[0] = v2;\n            v6->field_20 = v6->field_20 + 1;\n            v6->field_18 = v6->field_18 + 1;\n            return 1;\n        }\n    }\n    if (v2 == 0 || ((char)(BinaryOp CmpF & 69) & 1) == 0 && v7 == 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v33 != 0 && ((char)(BinaryOp CmpF & 69) & 1) != 0 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && v32 != 0)\n    {\n        abort(); /* do not return */\n    }\n    if (...)\n    {\n        return -18446744069414584321;\n    }\n    if (...)\n    {\n        v36 = v34[1];\n        v35[0] = v2;\n        v35[1] = v36;\n        v34[1] = v35;\n        v6->field_20 = v6->field_20 + 1;\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_406690",
            "funcStartAddr": "0x406690",
            "funcEndAddr": "0x406a9c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[16];\n    unsigned long long field_28;\n    unsigned int field_30;\n    char padding_34[116];\n    unsigned int field_a8;\n    unsigned int field_ac;\n    char padding_b0[8];\n    char field_b8;\n    char field_b9;\n    char padding_ba[6];\n    char field_c0;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nextern int512_t g_624420;\nextern unsigned long long g_625670;\nextern unsigned long long g_6256c8;\nextern char g_6256d2;\nextern char g_625750;\n\nint sub_406690()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v1;  // [bp-0x40]\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // r14\n    unsigned long long v5;  // rcx\n    char v7;  // sil\n    unsigned int|unsigned long|unsigned long long v8;  // rdx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // r8\n    unsigned long long v11;  // rcx\n    char *|unsigned long long v12;  // rbp\n    char|unsigned long|unsigned long long v13;  // rcx\n    unsigned long long v14;  // rax\n    unsigned int v15;  // eax\n    unsigned long long v16;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rcx\n    char v24;  // cl\n    unsigned long long v25;  // rax\n    unsigned long long v26[5];  // rbx\n    unsigned long long v27;  // rcx\n    unsigned long v28;  // rdx\n    unsigned long long v29;  // rax\n    struct_1 *v30;  // rcx\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rbx\n    unsigned long long v38;  // rax\n\n    v4 = v3;\n    if (v7 != 0)\n    {\n        v12 = v3->field_8;\n        if (g_6256d2 != 0)\n        {\n            v10 = v3->field_ac;\n            if (v3->field_b9 == 0)\n            {\n                v9 = sub_404ae0();\n                v8 = -18446744069414584321;\n                if (v9 != 0)\n                {\n                    v11 = 192;\n                }\n            }\n            else\n            {\n                v13 = v4->field_b8;\n                v8 = 0;\n            }\n        }\n    }\n    else\n    {\n        v12 = v3->field_0;\n        if (g_6256d2 != 0)\n        {\n            v8 = v3->field_b9;\n            if (g_625750 != 0 && v3->field_b9 != 0)\n            {\n                v10 = v3->field_ac;\n            }\n            if (v3->field_b9 == 0 || g_625750 == 0)\n            {\n                v10 = v3->field_30;\n            }\n        }\n    }\n    if (g_6256d2 != 0)\n    {\n        if ((v7 == 0 || v9 == 0) && (v7 == 0 || v3->field_b9 == 0))\n        {\n            v13 = v4->field_b8;\n        }\n        if (v7 == 0 || v9 == 0 || v3->field_b9 != 0)\n        {\n            if ((v4->field_b8 == 0 || v7 != 0) && (v4->field_b8 == 0 || v3->field_b9 != 0) && (v7 == 0 || v4->field_b8 == 0 || v3->field_b9 == 0))\n            {\n                v14 = (unsigned int)*((int *)(4298048 + 4 * v4->field_a8));\n                v13 = *((int *)(4298048 + 4 * v4->field_a8)) == 7;\n            }\n            if (v7 == 0 && v4->field_b8 != 0 || v3->field_b9 == 0 && v4->field_b8 != 0 || v7 != 0 && v4->field_b8 != 0 && v3->field_b9 != 0)\n            {\n                v15 = (unsigned int)v10 & 0xf000;\n                if (((unsigned short)v10 & 0xf000) != 0x8000)\n                {\n                    if (v15 != 0x4000)\n                    {\n                        if (v15 != 0xa000)\n                        {\n                            v11 = 128;\n                            if (v15 != 0x1000)\n                            {\n                                v11 = 144;\n                                if (v15 != 0xc000)\n                                {\n                                    v11 = 160;\n                                    if (v15 != 0x6000)\n                                    {\n                                        v11 = (v15 != 0x2000? 208 : 176);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (((unsigned short)v10 & 514) == 514)\n                        {\n                            v11 = 320;\n                        }\n                        if (sub_404ae0() == 0 || ((unsigned short)v10 & 514) != 514)\n                        {\n                            if ((v10 & 2) != 0)\n                            {\n                                v11 = 304;\n                            }\n                            if (sub_404ae0() == 0 || (v10 & 2) == 0)\n                            {\n                                v11 = 96;\n                                if (((unsigned short)v10 & 0x200) != 0)\n                                {\n                                    v21 = sub_404ae0();\n                                    v23 = 0 - (unsigned long long)(char)(v21 < 1);\n                                    v24 = (char)(0 - (unsigned long long)(char)(v21 < 1)) & 64;\n                                    v11 = rcx<8> + 288;\n                                }\n                            }\n                        }\n                    }\n                    if (v15 == 0xa000)\n                    {\n                        v14 = 7;\n                    }\n                }\n                else if (((unsigned short)v10 & 0x800) != 0)\n                {\n                    v16 = sub_404ae0();\n                    if (v16 != 0)\n                    {\n                        v11 = 0x100;\n                    }\n                }\n            }\n        }\n    }\n    if ((((unsigned short)v10 & 0xf000) == 0x8000 && ((unsigned short)v10 & 0x800) == 0 && g_6256d2 != 0 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0) || ((unsigned short)v10 & 0xf000) == 0x8000 && v16 == 0 && g_6256d2 != 0 && ((unsigned short)v10 & 0x800) != 0 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0)) && ((unsigned short)v10 & 0x400) != 0)\n    {\n        v18 = sub_404ae0();\n        if (v18 != 0)\n        {\n            v11 = 272;\n        }\n    }\n    if (v15 == 0xa000 && v15 != 0x4000 && g_6256d2 != 0 && ((unsigned short)v10 & 0xf000) != 0x8000 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0) || g_6256d2 != 0 && (v4->field_b8 == 0 || v7 != 0) && (v4->field_b8 == 0 || v3->field_b9 != 0) && (v7 == 0 || v4->field_b8 == 0 || v3->field_b9 == 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && *((int *)(4298048 + 4 * v4->field_a8)) != 5)\n    {\n        if (v8 == 0 && v13 != 0)\n        {\n            v11 = 208;\n            if (g_625750 == 0)\n            {\n                v11 = (0 - (unsigned long long)(char)((char)sub_404ae0() < 1) & -96) + 208;\n            }\n        }\n        if (v13 == 0 || v8 != 0)\n        {\n            v11 = v14 * 16;\n        }\n    }\n    if (((unsigned short)v10 & 0x400) != 0 && (((unsigned short)v10 & 0xf000) == 0x8000 && ((unsigned short)v10 & 0x800) == 0 && g_6256d2 != 0 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0) || ((unsigned short)v10 & 0xf000) == 0x8000 && v16 == 0 && g_6256d2 != 0 && ((unsigned short)v10 & 0x800) != 0 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0)) && v18 == 0 || (((unsigned short)v10 & 0xf000) == 0x8000 && ((unsigned short)v10 & 0x800) == 0 && g_6256d2 != 0 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0) || ((unsigned short)v10 & 0xf000) == 0x8000 && v16 == 0 && g_6256d2 != 0 && ((unsigned short)v10 & 0x800) != 0 && (v4->field_b8 != 0 || v7 != 0) && (v4->field_b8 != 0 || v3->field_b9 != 0) && (v7 == 0 || v9 == 0 || v3->field_b9 != 0) && (v7 == 0 || v3->field_b9 == 0 || v4->field_b8 != 0)) && ((unsigned short)v10 & 0x400) == 0)\n    {\n        v19 = sub_404ae0();\n        if (v19 != 0 && v4->field_c0 != 0)\n        {\n            v11 = 336;\n        }\n    }\n    if (...)\n    {\n        v22 = sub_404ae0();\n        if (v22 != 0)\n        {\n            v11 = 224;\n        }\n    }\n    if (...)\n    {\n        v25 = sub_404ae0();\n        if (v25 != 0)\n        {\n            v11 = 352;\n        }\n    }\n    if (...)\n    {\n        v26 = g_6256c8;\n        v27 = strlen(v12);\n        if (g_6256c8 != 0)\n        {\n            while (true)\n            {\n                v28 = *(v26);\n                if (v27 >= *(v26))\n                {\n                    v1 = v27;\n                    v29 = strncmp(&v12[v27 + -1 * v28], v26[1], v28);\n                    v27 = v1;\n                    if (v29 == 0)\n                    {\n                        v30 = &v26[2];\n                    }\n                }\n                if (v27 < *(v26) || v29 != 0)\n                {\n                    v26 = v26[4];\n                    if (v26 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v27 < *(v26) || v29 != 0)\n            {\n                v11 = 80;\n            }\n        }\n    }\n    if (...)\n    {\n        v11 = 80;\n    }\n    if (...)\n    {\n        v30 = v11 + (char *)&g_624420;\n    }\n    if (...)\n    {\n        v31 = sub_404ae0();\n    }\n    if (...)\n    {\n        v0 = v3->field_10;\n        v32 = (unsigned int)sub_4062d0();\n        sub_405d70();\n    }\n    if (...)\n    {\n        v0 = v4->field_10;\n        v32 = (unsigned int)sub_4062d0();\n        sub_405d70();\n        sub_405c70();\n        if (g_625670 != 0 && (0 CONCAT v5) % g_625670 != (0 CONCAT v32 + v5 - 1) % g_625670)\n        {\n            sub_405cd0();\n        }\n    }\n    v38 = v32;\n    return v38;\n}\n"
        },
        {
            "funcName": "obstack_begin_1",
            "funcStartAddr": "0x417140",
            "funcEndAddr": "0x417155",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    char field_50;\n} struct_0;\n\nint _obstack_begin_1()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rcx\n    unsigned long v3;  // r8\n    unsigned long v4;  // r9\n\n    v1->field_50 = v1->field_50 | 1;\n    v1->field_38 = v2;\n    v1->field_40 = v3;\n    v1->field_48 = v4;\n}\n"
        },
        {
            "funcName": "sub_412c10",
            "funcStartAddr": "0x412c10",
            "funcEndAddr": "0x412cd3",
            "decompiledFuncCode": "int sub_412c10()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    if (rbp<4> == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            *(v6) = (0 - (unsigned int)(char)(v0 < 0x40000000) & -41) + 75;\n        }\n    }\n    else\n    {\n        rbp<4> = sub_4132b0();\n        v6 = __errno_location();\n        if (!(v4 != 1))\n        {\n            *(v6) = 75;\n        }\n        else if (v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || rbp<4> != 0 || v0 > v5)\n    {\n        sub_412290();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: %s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_4136f0",
            "funcStartAddr": "0x4136f0",
            "funcEndAddr": "0x4137c8",
            "decompiledFuncCode": "extern unsigned int g_625918;\n\nint sub_4136f0()\n{\n    unsigned long long v0;  // [bp-0x138]\n    unsigned long long v2;  // rdi\n    unsigned int v3[4];  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rcx\n    unsigned int|unsigned long v6;  // edx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v3 = v2;\n    while (true)\n    {\n        while (true)\n        {\n            if ((unsigned int)v4 != 91)\n            {\n                v5 = v4 - 33;\n                if ((unsigned int)(v4 - 33) <= 31)\n                {\n                    v0 = 3221227009;\n                    if (v3[1] == 40 && ((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) != 0)\n                    {\n                        v3 = (unsigned long long)(unsigned int)sub_4136f0();\n                    }\n                    if ((unsigned int)v4 == 41 && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || v3[1] != 40))\n                    {\n                        v8 = &v3[1];\n                        return v8;\n                    }\n                }\n                if (v3[1] != 40 || (unsigned int)v4 != 41)\n                {\n                    v3 = &v3[1];\n                    v4 = v3[1];\n                    if (v3[1] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            else\n            {\n                if (g_625918 == 0)\n                {\n                    g_625918 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v6 = v3[1];\n                if (v3[1] != 33 && (v6 != 94 || g_625918 >= 0))\n                {\n                    v3 = &v3[1];\n                }\n                if (v3[1] == 33 || v6 == 94 && g_625918 < 0)\n                {\n                    v6 = v3[1 + 1];\n                    v3 = &v3[1 + 1];\n                }\n                if (v6 == 93)\n                {\n                    v6 = v3[1];\n                    v3 = &v3[1];\n                }\n                while (true)\n                {\n                    v7 = &v3[1];\n                    if (v6 == 93)\n                    {\n                        break;\n                    }\n                    if (v6 != 0)\n                    {\n                        v6 = v3[0];\n                        v3 = v7;\n                    }\n                }\n                if (true)\n                {\n                    v4 = v3[1];\n                    if (v3[1] == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v6 == 0)\n                {\n                    return stack_base + 0;\n                }\n            }\n        }\n        if ((unsigned int)v4 != 91 && ((unsigned int)(v4 - 33) > 31 || (unsigned int)v4 != 41) && (((char)((char)*(&((char *)stack_base)[((v5 & 63) >> 3) + -312]) >> (unsigned long long)(char)(v5 & 63 & 7)) & 1) == 0 || (unsigned int)(v4 - 33) > 31 || v3[1] != 40))\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_405630",
            "funcStartAddr": "0x405630",
            "funcEndAddr": "0x40567d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_405630()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 != 3 && v6->field_a8 != 9 && v5 != 0)\n    {\n        return -18446744069414584321;\n    }\n    if ((v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9) && v5 == 0 && (v6->field_a8 == 3 || v6->field_a8 == 9))\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40cc10",
            "funcStartAddr": "0x40cc10",
            "funcEndAddr": "0x40ccb5",
            "decompiledFuncCode": "int sub_40cc10()\n{\n    unsigned long long v1[10];  // rdi\n    unsigned long long v2[10];  // rbp\n    unsigned long long v3[2];  // r12\n    unsigned long long v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rcx\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rdi\n\n    v2 = v1;\n    v3 = *(v1);\n    if (*(v1) < v1[1])\n    {\n        while (true)\n        {\n            if (*(v3) == 0)\n            {\n                v3 = &v3[2];\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v8 = v3[1];\n                v9 = v2[8];\n                if (v3[1] != 0)\n                {\n                    do\n                    {\n                        if (v9 != 0)\n                        {\n                            v4 = *(v8);\n                            rax<8>();\n                            v9 = v2[8];\n                        }\n                        v6 = v8[1];\n                        v7 = v2[9];\n                        v8[0] = 0;\n                        v8[1] = v7;\n                        v2[9] = v8;\n                        v8 = v6;\n                    }\n                    while (v6 != 0);\n                }\n                if (v9 != 0)\n                {\n                    v10 = *(v3);\n                    v9 = rax<8>();\n                }\n                v3[0] = 0;\n                v3 = &v3[2];\n                v3[-1] = 0;\n                if (v2[1] <= v3)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v2[3] = 0;\n    v2[4] = 0;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4092a0",
            "funcStartAddr": "0x4092a0",
            "funcEndAddr": "0x409911",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\nextern unsigned int g_41b0a5;\nextern unsigned int g_41b0eb;\nextern unsigned int g_41b104;\nextern unsigned int g_41b119;\nextern unsigned int g_41b12e;\nextern unsigned int g_41b5f8;\nextern unsigned int g_41b620;\nextern char g_624400;\nextern unsigned long long g_6254b8;\nextern unsigned long long g_6254c0;\nextern unsigned long long g_6255b8;\nextern unsigned int g_6255d0;\nextern char g_625678;\nextern unsigned long long g_6256a0;\nextern unsigned long long g_6256a8;\nextern unsigned int g_6256b0;\nextern char g_6256b6;\nextern char g_6256d1;\nextern char g_6256d8;\nextern char g_6256ec;\nextern unsigned int g_6256f0;\nextern unsigned int g_6256f8;\nextern unsigned long long g_625770;\nextern unsigned long long g_625788;\nextern unsigned long long stdout[7];\n\nint sub_4092a0()\n{\n    unsigned long long v0;  // [bp-0x2f8]\n    unsigned int|unsigned long long v1;  // [bp-0x2e0]\n    unsigned long|unsigned long long v2;  // [bp-0x2d8]\n    unsigned int v3;  // [bp-0x2cc]\n    char v4;  // [bp-0x2c8]\n    unsigned long v5;  // [bp-0x2c0]\n    unsigned int v7;  // edx\n    unsigned int *v8;  // r12\n    unsigned int *v9;  // r12\n    unsigned long v11;  // r13\n    unsigned long v13;  // rax\n    unsigned int v14;  // edi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17[2];  // r15\n    unsigned long long v18;  // rax\n    char *|unsigned long long v20;  // rax\n    unsigned long long v22[2];  // rax\n    unsigned long long v23;  // rcx\n    unsigned long long v25;  // rbx\n    char *v27;  // rax\n    unsigned long long v28;  // r15\n    char v33[21];  // rbx\n    unsigned long long v34;  // rdx\n    unsigned long long v36;  // rax\n    char v37;  // al\n    struct_1 *v38;  // r15\n    unsigned long long v39;  // rax\n    struct_1 *v40;  // r15\n    unsigned long long v41;  // rax\n    char *v51;  // rbx\n    char *v53;  // rax\n    char *v54;  // rbx\n\n    v3 = v7;\n    *(v8) = 0;\n    v8 = __errno_location();\n    if (v11 != 0)\n    {\n        v11 = opendir();\n        if (g_625788 != 0)\n        {\n            v13 = dirfd(v11);\n            if (v13 >= 0)\n            {\n                v16 = (unsigned long long)__fxstat(0x1, v13, (unsigned int)&v4) >> 31;\n            }\n            else\n            {\n                v15 = (unsigned long long)__xstat(0x1, v14, (unsigned int)&v4) >> 31;\n            }\n            if ((v16 == 0 || v13 < 0) && (v15 == 0 || v13 >= 0))\n            {\n                v2 = v5;\n                v1 = *((long long *)&v4);\n                v17 = (unsigned long long)(unsigned int)sub_412980();\n                v17[0] = v2;\n                v17[1] = v1;\n                v18 = sub_40d220();\n                if (!(v18 != 0))\n                {\n                    sub_412bd0(); /* do not return */\n                }\n                else if (v17 != v18)\n                {\n                    free(v17);\n                    v25 = (unsigned int)sub_412110();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41b620, 0x5));\n                    v20 = closedir();\n                    g_6255d0 = 2;\n                }\n                else\n                {\n                    v22 = g_6254b8;\n                    v23 = *((long long *)&v4);\n                    if (g_6254c0 - g_6254b8 <= 15)\n                    {\n                        v1 = *((long long *)&v4);\n                        _obstack_newchunk();\n                        v22 = g_6254b8;\n                        v23 = v1;\n                    }\n                    g_6254b8 = &v22[2];\n                    v22[1] = v23;\n                    v22[0] = v5;\n                }\n            }\n            if ((v13 < 0 || v16 != 0) && (v15 != 0 || v13 >= 0))\n            {\n                dcgettext(0x0, 0x41b5f8, 0x5);\n                sub_405580();\n                v20 = closedir();\n            }\n        }\n        if ((v17 == v18 || g_625788 == 0) && (g_625788 == 0 || v18 != 0) && (v16 == 0 || g_625788 == 0 || v13 < 0) && (v15 == 0 || g_625788 == 0 || v13 >= 0))\n        {\n            sub_4084b0();\n            if (g_625678 != 0 || g_6256b6 != 0)\n            {\n                if (g_624400 == 0)\n                {\n                    v27 = stdout[5];\n                    if (stdout[5] < stdout[6])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v27) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                    g_6255b8 = g_6255b8 + 1;\n                }\n                g_624400 = 0;\n                if (g_6256d8 == 0)\n                {\n                    v28 = 0;\n                }\n                else\n                {\n                    v28 = 0;\n                    fwrite_unlocked(\"  \", 0x1, 0x2, stdout);\n                    g_6255b8 = g_6255b8 + 2;\n                }\n                if (g_6256d1 != 0)\n                {\n                    v28 = (unsigned int)sub_40b070();\n                    if (v28 == 0)\n                    {\n                        dcgettext(0x0, 0x41b0a5, 0x5);\n                        sub_405580();\n                    }\n                }\n                v0 = v28;\n                sub_4062d0();\n                free(v28);\n                fwrite_unlocked(\":\\n\", 0x1, 0x2, stdout);\n                g_6255b8 = g_6255b8 + 2;\n            }\n            v2 = 0;\n            v1 = v7;\n            while (true)\n            {\n                *(v9) = 0;\n                v33 = (unsigned long long)readdir();\n                if (v33 != 0)\n                {\n                    if (g_6256b0 != 2)\n                    {\n                        if (v33[2 + 3] != 46)\n                        {\n                            if (g_6256b0 == 0)\n                            {\n                                v38 = g_6256a0;\n                                if (g_6256a0 != 0)\n                                {\n                                    while (true)\n                                    {\n                                        v39 = sub_4159a0();\n                                        if (v39 != 0)\n                                        {\n                                            v38 = v38->field_8;\n                                            if (v38 == 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    if (v39 == 0)\n                                    {\n                                        sub_405d70();\n                                    }\n                                    else if (v39 != 0)\n                                    {\n                                        v40 = g_6256a8;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (g_6256b0 != 0)\n                            {\n                                v36 = 0;\n                                v37 = v33[2 + 4] == 46;\n                            }\n                        }\n                    }\n                    if (g_6256b0 == 2 || v33[2 + 3] != 46 || v33[2 + 4 + rax<8>] != 0 && g_6256b0 != 0)\n                    {\n                        v40 = g_6256a8;\n                        if (g_6256a8 != 0)\n                        {\n                            while (true)\n                            {\n                                v41 = sub_4159a0();\n                                if (v41 != 0)\n                                {\n                                    v40 = v40->field_8;\n                                    if (v40 == 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (v41 == 0)\n                            {\n                                sub_405d70();\n                            }\n                        }\n                        v2 += (unsigned int)sub_408580();\n                        if (g_6256f0 == -1 && g_6256ec == 0 && g_6256f8 == 1 && g_6256b6 == 0)\n                        {\n                            sub_404f40();\n                            sub_407ca0();\n                            sub_4084b0();\n                        }\n                    }\n                }\n                else\n                {\n                    v34 = *(v9);\n                    if (*(v9) == 0)\n                    {\n                        break;\n                    }\n                    dcgettext(0x0, 0x41b104, 0x5);\n                    sub_405580();\n                    if (*(v9) != 75)\n                    {\n                        break;\n                    }\n                }\n                sub_405d70();\n            }\n            if (closedir() != 0)\n            {\n                dcgettext(0x0, 0x41b119, 0x5);\n                sub_405580();\n            }\n            sub_404f40();\n            if (g_6256b6 != 0)\n            {\n                sub_405140();\n            }\n            v20 = g_6256f8;\n            if (g_6256f8 == 0 || g_6256ec != 0)\n            {\n                if (g_6256d8 != 0)\n                {\n                    fwrite_unlocked(\"  \", 0x1, 0x2, stdout);\n                    g_6255b8 = g_6255b8 + 2;\n                }\n                v51 = (unsigned long long)dcgettext(0x0, 0x41b12e, 0x5);\n                fputs_unlocked(v51, stdout);\n                g_6255b8 = g_6255b8 + strlen(v51);\n                v53 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v53) = 32;\n                }\n                else\n                {\n                    __overflow();\n                }\n                g_6255b8 = g_6255b8 + 1;\n                v54 = (unsigned long long)(unsigned int)sub_40d5d0();\n                fputs_unlocked(v54, stdout);\n                g_6255b8 = g_6255b8 + strlen(v54);\n                v20 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v20) = 10;\n                }\n                else\n                {\n                    v20 = __overflow();\n                }\n                g_6255b8 = g_6255b8 + 1;\n            }\n            if (g_625770 != 0)\n            {\n                v20 = sub_407ca0();\n            }\n        }\n    }\n    else\n    {\n        dcgettext(0x0, 0x41b0eb, 0x5);\n        v20 = sub_405580();\n    }\n    if (v11 == 0 || g_625788 == 0 || v18 != 0 || v13 < 0 && v15 != 0 || v16 != 0 && v13 >= 0)\n    {\n        return v20;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b070",
            "funcStartAddr": "0x40b070",
            "funcEndAddr": "0x40b69b",
            "decompiledFuncCode": "extern unsigned int g_41b371;\n\nint sub_40b070()\n{\n    unsigned int *|unsigned long|unsigned int|unsigned long long v0;  // [bp-0x100]\n    unsigned int v1;  // [bp-0xf4]\n    unsigned long|unsigned long long v2;  // [bp-0xf0]\n    char [2]|char *|unsigned long v3;  // [bp-0xe8]\n    unsigned long long v4;  // [bp-0xe0]\n    unsigned long|unsigned long long v5;  // [bp-0xd8]\n    unsigned int v6;  // [bp-0xd0]\n    unsigned int v7;  // [bp-0xcc]\n    char v8;  // [bp-0xc8]\n    unsigned int v9;  // [bp-0xb0]\n    unsigned int v11;  // esi\n    char v12[2];  // rdi\n    char v13[2];  // r15\n    unsigned long long v14;  // rbx\n    char *v15;  // rbx\n    char *|unsigned long long v16;  // rbp\n    unsigned long long v17;  // rdx\n    char v18[2];  // r13\n    unsigned long v19;  // r8\n    char *v20;  // r15\n    char *v21;  // rdx\n    unsigned long long v22;  // rbx\n    unsigned long v23;  // rbp\n    char *v25;  // r15\n    unsigned long long v26;  // rsi\n    char v27;  // al\n    char *v28;  // rax\n    unsigned long long v29;  // rax\n    char *v31;  // r15\n    unsigned int v32;  // ecx\n    unsigned long v33;  // r13\n    unsigned long long v34;  // rdx\n    char *v36;  // r15\n    char *v39;  // rax\n    char *v40;  // rdx\n    unsigned long long v41;  // rdx\n    char v42;  // cc_dep1\n    char *v43;  // r14\n    unsigned long long v44;  // rax\n    char *v45;  // r15\n    unsigned long long v46;  // r12\n    unsigned int *v48;  // rdx\n    unsigned int *v49;  // rdx\n    char *v50;  // rax\n    unsigned int|unsigned long v51;  // rcx\n    unsigned int *v52;  // rdx\n    unsigned int|unsigned long v53;  // rcx\n    unsigned long long v56;  // rax\n\n    v1 = v11 & 3;\n    if (((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) == 0)\n    {\n        v13 = v12;\n        if (v12 != 0)\n        {\n            if (v12[0] != 0)\n            {\n                if (v12[0] != 47)\n                {\n                    v46 = (unsigned int)sub_412d10();\n                    if (v46 != 0)\n                    {\n                        v14 = strlen(v46);\n                        if (v14 > 4095)\n                        {\n                            v15 = v14 + v46;\n                            v16 = v15;\n                        }\n                        else\n                        {\n                            v46 = (unsigned int)sub_4129e0();\n                            v15 = v14 + v46;\n                            v16 = v46 + 0x1000;\n                        }\n                    }\n                }\n                else\n                {\n                    v46 = (unsigned int)sub_412980();\n                    v16 = v46 + 0x1000;\n                    v15 = v46 + 1;\n                    *((char *)v46) = 47;\n                }\n                if (v12[0] == 47 || v46 != 0)\n                {\n                    *((char *[2])&v3[0]) = v13;\n                    v44 = v13[0];\n                    v6 = v11 & 4;\n                    v2 = 0;\n                    v5 = 0;\n                    v4 = 0;\n                    while (true)\n                    {\n                        if (v44 != 0)\n                        {\n                            v17 = v44;\n                        }\n                        if (v44 == 47)\n                        {\n                            do\n                            {\n                                v13 = &v13[1];\n                                v17 = v13[0];\n                            }\n                            while (v13[0] == 47);\n                        }\n                        if (v44 == 47 && v17 != 0 || v44 != 0 && v44 != 47)\n                        {\n                            v18 = v13;\n                            while (true)\n                            {\n                                v44 = v18[1];\n                                v43 = &v18[1];\n                                if (v44 == 47 || v18[1] == 0)\n                                {\n                                    break;\n                                }\n                                v18 = v43;\n                            }\n                        }\n                        if (v44 == 0 || v43 == v13 || v17 == 0 && v44 == 47)\n                        {\n                            if (v15[-1] == 47 && v15 > v46 + 1)\n                            {\n                                v50 = v15;\n                                v15 = &v15[-1];\n                            }\n                            if (v15 <= v46 + 1 || v15[-1] != 47)\n                            {\n                                v50 = &v15[1];\n                            }\n                            *(v15) = 0;\n                            if (v16 != v50)\n                            {\n                                v46 = (unsigned int)sub_4129e0();\n                            }\n                            free(v4);\n                            if (v2 == 0)\n                            {\n                                break;\n                            }\n                            sub_40ccc0();\n                        }\n                        if (v43 != v13 && (v44 == 47 || v44 != 0) && (v17 != 0 || v44 != 47))\n                        {\n                            v19 = v43 - v13;\n                            if (v13[1] == 46 && v17 == 46 && v0 == 2 && v43 - v13 != 1)\n                            {\n                                v20 = v43;\n                                if (v15 > v46 + 1)\n                                {\n                                    v21 = &v15[-1];\n                                    if (v15[-2] == 47 || v46 >= &v15[-1])\n                                    {\n                                        v15 = v21;\n                                    }\n                                }\n                            }\n                            if (v17 != 46 || v13[1] != 46 && v43 - v13 != 1 || v43 - v13 != 1 && v0 != 2)\n                            {\n                                if (v15[-1] != 47)\n                                {\n                                    *(v15) = 47;\n                                    v15 = &v15[1];\n                                }\n                                if (v16 <= &v15[v0])\n                                {\n                                    v22 = &v15[-1 * v46];\n                                    v0 = v19;\n                                    v23 = (0x1000 <= v0? &v16[-1 * v46 + v0 + 1] : &v16[-1 * v46 + 0x1000]);\n                                    v46 = (unsigned int)sub_4129e0();\n                                    v16 = v23 + v46;\n                                    v15 = v22 + v46;\n                                }\n                                *((unsigned long *)&v0) = v0;\n                                memcpy(v15, v13, v0);\n                                v15 = &v15[*((long long *)&v0)];\n                                *(v15) = 0;\n                                if (v6 == 0 || v1 != 2)\n                                {\n                                    v26 = v46;\n                                    if (v6 != 0)\n                                    {\n                                        v27 = __xstat(0x1, v26, (unsigned int)&v8) != 0;\n                                    }\n                                    else\n                                    {\n                                        v27 = __lxstat(0x1, v26, (unsigned int)&v8) != 0;\n                                    }\n                                    if (v27 != 0)\n                                    {\n                                        v48 = __errno_location();\n                                        v51 = *(v48);\n                                        if (v1 == 1)\n                                        {\n                                            v7 = v51;\n                                            v0 = v48;\n                                            v28 = strspn((unsigned int)v43, 0x41b371);\n                                            v48 = v0;\n                                            v51 = v7;\n                                        }\n                                    }\n                                    else if (((unsigned short)v9 & 0xf000) == 0xa000)\n                                    {\n                                        if (v2 != 0)\n                                        {\n                                            v29 = sub_40b9a0();\n                                            if (v29 == 0)\n                                            {\n                                                sub_40b910();\n                                                v31 = (unsigned long long)(unsigned int)sub_40abf0();\n                                                if (v31 != 0)\n                                                {\n                                                    v33 = strlen(v31);\n                                                    v34 = strlen(v43);\n                                                    if (v5 == 0)\n                                                    {\n                                                        v0 = v34;\n                                                        *((int *)&v5) = (0x1000 <= v0? v0 : 0x1000);\n                                                        v4 = (unsigned int)sub_412980();\n                                                    }\n                                                    else if (v0 > v5)\n                                                    {\n                                                        v0 = v33 + v34 + 1;\n                                                        v3 = v34;\n                                                        v4 = (unsigned int)sub_4129e0();\n                                                        v5 = v0;\n                                                    }\n                                                    memmove(v4 + v33, v43, v34 + 1);\n                                                    v39 = memcpy(v4, v31, v33);\n                                                    v40 = v46 + 1;\n                                                    v43 = v39;\n                                                    v3 = v39;\n                                                    if (*(v31) == 47)\n                                                    {\n                                                        *((char *)v46) = 47;\n                                                        v15 = v40;\n                                                    }\n                                                    else if (v15 > v15)\n                                                    {\n                                                        v41 = &v15[-1];\n                                                        if (v46 < &v15[-1])\n                                                        {\n                                                            v42 = v15[-2];\n                                                            v15 = v41;\n                                                            if (v42 != 47)\n                                                            {\n                                                                do\n                                                                {\n                                                                    v15 = &v15[-1];\n                                                                }\n                                                                while (v15[-1] != 47 && v46 != v15);\n                                                            }\n                                                        }\n                                                    }\n                                                    free(v31);\n                                                }\n                                                else\n                                                {\n                                                    v49 = __errno_location();\n                                                    v32 = *(v49);\n                                                }\n                                            }\n                                            if ((v29 == 0 || v1 != 2) && (v1 == 12 || v1 != 2) && (v31 == 0 || v29 != 0))\n                                            {\n                                                v1 = v32;\n                                                v0 = v49;\n                                                free(v4);\n                                                free(v46);\n                                                v52 = v0;\n                                                v53 = v1;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v2 = (unsigned int)sub_40ca80();\n                                            sub_412bd0(); /* do not return */\n                                        }\n                                    }\n                                }\n                                if ((v1 == 2 || v1 != 1) && (v1 == 2 || v27 != 0) && (v1 == 2 || v1 != 0) && (v6 != 0 || v1 != 1) && (v6 != 0 || v27 != 0) && (v6 != 0 || v1 != 0))\n                                {\n                                    v9 = 0;\n                                }\n                                if (v2 != 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v29 != 0 && v1 != 2)\n                                {\n                                    v49 = __errno_location();\n                                }\n                                if (v1 != 2 && *(v43) != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000))\n                                {\n                                    v48 = __errno_location();\n                                }\n                                if (v27 == 0 && ((unsigned short)v9 & 0xf000) == 0x4000 && ((unsigned short)v9 & 0xf000) != 0xa000 && (v6 == 0 || v1 != 2) || v29 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v2 != 0 && v31 != 0 && (v6 == 0 || v1 != 2) || *(v43) == 0 && (v27 == 0 || v1 == 2 || v1 != 1) && (v27 == 0 || v1 == 2 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v27 == 0 || v6 != 0 || v1 != 0) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000) && (((unsigned short)v9 & 0xf000) != 0xa000 || v6 != 0 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000) || v1 == 2 && *(v43) != 0 && (v27 == 0 || v1 == 2 || v1 != 1) && (v27 == 0 || v1 == 2 || v1 != 0) && (v27 == 0 || v6 != 0 || v1 != 1) && (v27 == 0 || v6 != 0 || v1 != 0) && (v1 == 2 || ((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v1 == 2 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000) && (((unsigned short)v9 & 0xf000) != 0xa000 || v6 != 0 || v27 != 0) && (v6 != 0 || v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000))\n                                {\n                                    v44 = *(v43);\n                                    v45 = v43;\n                                }\n                                if (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && *(v43) != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000))\n                                {\n                                    *((unsigned long *)&v1) = v51;\n                                    v0 = v48;\n                                    free(v4);\n                                    free(v46);\n                                    v52 = v0;\n                                    v53 = v1;\n                                }\n                                if (v29 == 0 && ((unsigned short)v9 & 0xf000) == 0xa000 && v6 == 0 && v27 == 0 && v31 == 0 && v1 == 2 && v2 != 0 && v1 != 12 || ((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v29 != 0 && v2 != 0 && (v6 == 0 || v1 != 2) && v1 == 2 || *((char *)(v43 + v28)) == 0 && v1 == 1 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) && (unsigned int)v51 == 2)\n                                {\n                                    v44 = v18[1];\n                                    v36 = v43;\n                                }\n                                if (((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v2 != 0 && (v29 == 0 || v1 != 2) && (v6 == 0 || v1 != 2) && (v1 == 12 || v1 != 2) && (v31 == 0 || v29 != 0) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && *(v43) != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000)))\n                                {\n                                    *((unsigned long *)&v1) = v53;\n                                    v0 = v52;\n                                    sub_40ccc0();\n                                    v53 = v1;\n                                    v52 = v0;\n                                }\n                                if (((unsigned short)v9 & 0xf000) == 0xa000 && v27 == 0 && v2 != 0 && (v29 == 0 || v1 != 2) && (v6 == 0 || v1 != 2) && (v1 == 12 || v1 != 2) && (v31 == 0 || v29 != 0) || v2 != 0 && (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && *(v43) != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000)) || (v1 == 0 && v27 != 0 && (v6 == 0 || v1 != 2) || v1 == 1 && *((char *)(v43 + v28)) != 0 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || *((char *)(v43 + v28)) == 0 && v1 == 1 && (unsigned int)v51 != 2 && v27 != 0 && v1 != 0 && (v6 == 0 || v1 != 2) || v1 != 2 && *(v43) != 0 && (v27 == 0 || v1 != 1) && (v27 == 0 || v1 != 0) && (((unsigned short)v9 & 0xf000) != 0xa000 || v27 != 0) && (v27 != 0 || ((unsigned short)v9 & 0xf000) != 0x4000)) && v2 == 0)\n                                {\n                                    *((unsigned long *)&v52) = v53;\n                                    v46 = 0;\n                                }\n                            }\n                            if (v17 == 46 && (v13[1] == 46 || v43 - v13 == 1) && (v46 < &v15[-1] || v43 - v13 == 1) && (v43 - v13 == 1 || v0 == 2) && (v43 - v13 == 1 || v15[-2] != 47) && (v43 - v13 == 1 || v15 > v46 + 1))\n                            {\n                                v25 = v43;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = 0;\n                *(__errno_location()) = 2;\n            }\n        }\n    }\n    if (v12 == 0 || ((unsigned int)((unsigned long long)(v11 & 3) - 1) & v11 & 3) != 0)\n    {\n        v46 = 0;\n        *(__errno_location()) = 22;\n    }\n    v56 = v46;\n    return v56;\n}\n"
        },
        {
            "funcName": "sub_404e00",
            "funcStartAddr": "0x404e00",
            "funcEndAddr": "0x404e0b",
            "decompiledFuncCode": "int sub_404e00()\n{\n}\n"
        },
        {
            "funcName": "sub_405560",
            "funcStartAddr": "0x405560",
            "funcEndAddr": "0x40557a",
            "decompiledFuncCode": "extern unsigned int g_6255d4;\nextern unsigned int g_6255d8;\n\nint sub_405560()\n{\n    unsigned long long v1;  // rax\n\n    v1 = g_6255d8;\n    if (g_6255d8 == 0)\n    {\n        v1 = g_6255d4 + 1;\n        g_6255d4 = g_6255d4 + 1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_417070",
            "funcStartAddr": "0x417070",
            "funcEndAddr": "0x417085",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_417070()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[64]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_411f40",
            "funcStartAddr": "0x411f40",
            "funcEndAddr": "0x411f52",
            "decompiledFuncCode": "int sub_411f40()\n{\n}\n"
        },
        {
            "funcName": "sub_404830",
            "funcStartAddr": "0x404830",
            "funcEndAddr": "0x404841",
            "decompiledFuncCode": "extern unsigned int g_6255d8;\n\nint sub_404830()\n{\n    unsigned int v1;  // edi\n\n    if (g_6255d8 == 0)\n    {\n        g_6255d8 = v1;\n    }\n    return g_6255d8;\n}\n"
        },
        {
            "funcName": "sub_40e9b0",
            "funcStartAddr": "0x40e9b0",
            "funcEndAddr": "0x40eb44",
            "decompiledFuncCode": "int sub_40e9b0()\n{\n    char v0;  // [bp-0x44]\n    unsigned long long v1;  // [bp-0x40]\n    unsigned long long v3;  // rdi\n    char *v4;  // rbx\n    unsigned long v7;  // rsi\n    unsigned long v8;  // rdx\n    unsigned int v9;  // r15d\n    unsigned short *v10;  // rdx\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n\n    v4 = v3;\n    if ((unsigned long long)__ctype_get_mb_cur_max() > 1)\n    {\n        v18 = 0;\n        if (v3 < v3 + v7)\n        {\n            while (true)\n            {\n                v11 = *(v4);\n                if (*(v4) <= 63)\n                {\n                    if (v11 < 37)\n                    {\n                        v12 = (unsigned int)v11 - 32;\n                    }\n                }\n                else\n                {\n                    if (v11 >= 65 && v11 > 95)\n                    {\n                        v13 = (unsigned int)v11 - 97;\n                    }\n                }\n                if ((v11 < 37 || *(v4) > 63) && (v12 > 3 || *(v4) > 63) && (*(v4) <= 63 || v11 < 65 || v11 > 95) && (*(v4) <= 63 || v11 < 65 || v13 > 29))\n                {\n                    v1 = 0;\n                    while (true)\n                    {\n                        v14 = (unsigned int)sub_416e80();\n                        if (v14 == -1)\n                        {\n                            if (((char)v8 & 1) == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else if (v14 != -2)\n                        {\n                            v16 = wcwidth();\n                            if ((unsigned int)v16 < 0)\n                            {\n                                if (((char)v8 & 2) != 0)\n                                {\n                                    break;\n                                }\n                                if (((char)v8 & 2) == 0)\n                                {\n                                    v19 = iswcntrl(*((int *)&v0));\n                                    if (v19 == 0 && (unsigned int)v18 != 2147483647)\n                                    {\n                                        v18 = (unsigned int)v18 + 1;\n                                    }\n                                }\n                            }\n                            else if (2147483647 - (unsigned int)v18 >= (unsigned int)v16)\n                            {\n                                v18 += v16;\n                            }\n                            if (((char)v8 & 2) == 0 || (unsigned int)v16 >= 0)\n                            {\n                                if (((unsigned int)v16 < 0 || 2147483647 - (unsigned int)v18 < (unsigned int)v16) && ((unsigned int)v18 == 2147483647 || (unsigned int)v16 >= 0) && (v19 == 0 || (unsigned int)v16 >= 0))\n                                {\n                                    v18 = 2147483647;\n                                }\n                                if (((unsigned int)v16 < 0 || 2147483647 - (unsigned int)v18 >= (unsigned int)v16) && ((unsigned int)v18 != 2147483647 || (unsigned int)v16 >= 0 || v19 != 0))\n                                {\n                                    v4 = &v4[(v14 == 0? 1 : rbp<8>)];\n                                    if (mbsinit((unsigned int)&v1) != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (((char)v8 & 1) != 0)\n                            {\n                                break;\n                            }\n                            v18 = (unsigned int)v18 + 1;\n                            v4 = v3 + v7;\n                        }\n                    }\n                    if (v14 == -1)\n                    {\n                        v4 = &v4[1];\n                        v18 = (unsigned int)v18 + 1;\n                    }\n                    else if (v14 == -2 || (unsigned int)v16 < 0 && v14 != -1 || v14 == -1 && ((char)v8 & 1) != 0)\n                    {\n                        v18 = -18446744069414584321;\n                    }\n                    else if (true)\n                    {\n                        if (v4 >= v3 + v7)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v14 != -1 && v14 != -2 && ((unsigned int)v16 < 0 || 2147483647 - (unsigned int)v18 < (unsigned int)v16) && ((unsigned int)v18 == 2147483647 || (unsigned int)v16 >= 0) && (v19 == 0 || (unsigned int)v16 >= 0) && (((char)v8 & 2) == 0 || (unsigned int)v16 >= 0))\n                    {\n                        v22 = v18;\n                        return v22;\n                    }\n                }\n                v4 = &v4[1];\n                v18 = (unsigned int)v18 + 1;\n            }\n            if ((v11 < 37 || *(v4) > 63) && (v12 > 3 || *(v4) > 63) && (*(v4) <= 63 || v11 < 65 || v11 > 95) && (*(v4) <= 63 || v11 < 65 || v13 > 29))\n            {\n                v18 = -18446744069414584321;\n            }\n            else\n            {\n                v22 = v18;\n                return v22;\n            }\n        }\n    }\n    else\n    {\n        v18 = 0;\n        if (v3 < v3 + v7)\n        {\n            v18 = 0;\n            v9 = (unsigned int)v8 & 2;\n            v10 = *((long long *)(unsigned long long)__ctype_b_loc());\n            while (true)\n            {\n                v4 = &v4[1];\n                v21 = v10[(unsigned long long)v4[-1]];\n                if (((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) == 0 && v9 != 0)\n                {\n                    break;\n                }\n                if (((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) != 0 || (v21 & 2) == 0 && v9 == 0)\n                {\n                    if ((unsigned int)v18 == 2147483647)\n                    {\n                        break;\n                    }\n                    v18 = (unsigned int)v18 + 1;\n                }\n            }\n            if (((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) == 0)\n            {\n                v18 = -18446744069414584321;\n            }\n            else if ((v21 & 2) == 0 || v3 + v7 == v4 || ((char)(v10[(unsigned long long)v4[-1]] >> 8) & 64) != 0)\n            {\n                v22 = v18;\n                return v22;\n            }\n        }\n    }\n    if (v3 < v3 + v7)\n    {\n        v18 = -18446744069414584321;\n    }\n    v22 = v18;\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_405cd0",
            "funcStartAddr": "0x405cd0",
            "funcEndAddr": "0x405d30",
            "decompiledFuncCode": "extern char g_6256d0;\n\nint sub_405cd0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    if (g_6256d0 == 0)\n    {\n        g_6256d0 = 1;\n        if (tcgetpgrp(0x1) < 0)\n        {\n            sub_405c70();\n        }\n        else\n        {\n            sub_405af0();\n            sub_405c70();\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_409a80",
            "funcStartAddr": "0x409a80",
            "funcEndAddr": "0x409aaf",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n} struct_0;\n\nint sub_409a80()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2[16];  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1->field_70 <= v2[14])\n    {\n        if (v1->field_70 >= v2[14])\n        {\n            v3 = (unsigned int)v2[15] - v1->field_78;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_70 < v2[14] || (unsigned int)v2[15] != v1->field_78)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_404b40",
            "funcStartAddr": "0x404b40",
            "funcEndAddr": "0x404b93",
            "decompiledFuncCode": "extern unsigned long long g_625670;\n\nint sub_404b40()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rax\n\n    v2 = sub_4132b0();\n    if (!(v2 != 0))\n    {\n        g_625670 = v0;\n        return 1;\n    }\n    else if (v2 == 1)\n    {\n        g_625670 = -1;\n        return 1;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40d470",
            "funcStartAddr": "0x40d470",
            "funcEndAddr": "0x40d47d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_40d470()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n\n    return (0 CONCAT v1->field_8) % v2 >> 64;\n}\n"
        },
        {
            "funcName": "sub_4084b0",
            "funcStartAddr": "0x4084b0",
            "funcEndAddr": "0x408579",
            "decompiledFuncCode": "extern unsigned int g_6256fc;\nextern unsigned int g_625700;\nextern unsigned int g_625704;\nextern unsigned int g_625708;\nextern unsigned int g_62570c;\nextern unsigned int g_625710;\nextern unsigned int g_625714;\nextern unsigned int g_625718;\nextern unsigned int g_62571c;\nextern unsigned int g_625720;\nextern char g_625724;\nextern unsigned long long g_625760;\nextern char g_625769;\nextern unsigned long long g_625770;\n\nint sub_4084b0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    unsigned long long v3[3];  // rbp\n\n    v1 = g_625770;\n    v2 = g_625760;\n    if (g_625770 != 0)\n    {\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[1];\n            free(*(v3));\n            free(v3[1]);\n            v1 = free(v3[2]);\n            if (v2 == g_625760 + (g_625770 << 3))\n            {\n                break;\n            }\n        }\n    }\n    g_625769 = 0;\n    g_625770 = 0;\n    g_625724 = 0;\n    g_625720 = 0;\n    g_62571c = 0;\n    g_625718 = 0;\n    g_625710 = 0;\n    g_62570c = 0;\n    g_625708 = 0;\n    g_625714 = 0;\n    g_625704 = 0;\n    g_625700 = 0;\n    g_6256fc = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4127e0",
            "funcStartAddr": "0x4127e0",
            "funcEndAddr": "0x412839",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4127e0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4123e0();\n}\n"
        },
        {
            "funcName": "obstack_free",
            "funcStartAddr": "0x4172a0",
            "funcEndAddr": "0x417305",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[40];\n    char field_50;\n} struct_0;\n\nint _obstack_free()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbp\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v8[2];  // rsi\n\n    v2 = v1;\n    v8 = v3->field_8;\n    v4 = v3;\n    if (v3->field_8 != 0)\n    {\n        while (true)\n        {\n            if (v8 < v2)\n            {\n                v5 = *(v8);\n                if (*(v8) >= v2)\n                {\n                    v4->field_18 = v2;\n                    v4->field_10 = v2;\n                    v4->field_20 = v5;\n                    v4->field_8 = v8;\n                    return v5;\n                }\n            }\n            if (*(v8) < v2 || v8 >= v2)\n            {\n                v6 = v8[1];\n                v4->field_50 = v4->field_50 | 2;\n                v8 = v6;\n                if (v6 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    if (v2 != 0)\n    {\n        abort(); /* do not return */\n    }\n    return sub_417070();\n}\n"
        },
        {
            "funcName": "sub_40c400",
            "funcStartAddr": "0x40c400",
            "funcEndAddr": "0x40c47a",
            "decompiledFuncCode": "extern int512_t g_41d810;\n\nint sub_40c400()\n{\n    unsigned int *v1[4];  // rdi\n    unsigned int v2[4];  // rax\n    unsigned int v3;  // ymm0\n    uint128_t v4;  // xmm1\n    unsigned int v5;  // ymm1\n    unsigned long long v6;  // xmm1lq\n\n    v2 = *(v1);\n    if (*(v1) != 4315152)\n    {\n        v3 = v2[1];\n        if ((((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1 && (((char)(BinaryOp CmpF & 69) | (char)((unsigned long long)(unsigned int)(BinaryOp CmpF & 69) >> 6)) & 1) != 1)\n        {\n            v4 = 0;\n            v5 = v2[0];\n            if (((char)(BinaryOp CmpF & 69) & 1) == 0)\n            {\n                v6 = (unsigned long long)(unsigned int)xmm1<16> + 4568451461323476173;\n            }\n        }\n        if (...)\n        {\n            *(v1) = &g_41d810;\n            return 0;\n        }\n    }\n    if (...)\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_405750",
            "funcStartAddr": "0x405750",
            "funcEndAddr": "0x4057a3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_405750()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // edx\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rsi\n    unsigned long long v7;  // rdx\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 != 3 && v6->field_a8 != 9 && v5 != 0)\n    {\n        v7 = -18446744069414584321;\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if (v6->field_a8 == 3 && v5 == 0 || v5 == 0 && v6->field_a8 == 9 || v6->field_a8 != 3 && v5 != 0 && v6->field_a8 != 9)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_411ef0",
            "funcStartAddr": "0x411ef0",
            "funcEndAddr": "0x411f01",
            "decompiledFuncCode": "int sub_411ef0()\n{\n}\n"
        },
        {
            "funcName": "sub_4099b0",
            "funcStartAddr": "0x4099b0",
            "funcEndAddr": "0x4099dc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[112];\n    unsigned long long field_70;\n    unsigned int field_78;\n} struct_0;\n\nint sub_4099b0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[16];  // rsi\n    unsigned long long v3;  // rax\n\n    if (v1->field_70 <= v2[14])\n    {\n        if (v1->field_70 >= v2[14])\n        {\n            v3 = (unsigned int)v2[15] - v1->field_78;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_70 < v2[14] || (unsigned int)v2[15] != v1->field_78)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c2e0",
            "funcStartAddr": "0x40c2e0",
            "funcEndAddr": "0x40c3e5",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n} struct_0;\n\ndouble sub_40c2e0()\n{\n    unsigned long long v1;  // rdi\n    struct_1 *v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rdx\n    unsigned long long *v7;  // rbx\n    unsigned long long v8;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11[2];  // rax\n    unsigned long long v12;  // rsi\n    unsigned long long v14;  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    struct_0 *v17;  // rax\n    void v18;  // xmm0\n    uint128_t v19;  // xmm0\n    unsigned long v20;  // rcx\n    void v21;  // xmm0\n\n    v2 = v1;\n    *(v6) = v7;\n    v8 = *(v7);\n    if (*(v7) != 0)\n    {\n        v7 = sub_40c2b0();\n        if (v8 != v1)\n        {\n            v1 = v3;\n            v10 = *((long long *)(r12<8> + 56))();\n            if (v10 == 0)\n            {\n                v11 = v15->field_8;\n                if (v15->field_8 != 0)\n                {\n                    v12 = *(v11);\n                    if (v1 != *(v11))\n                    {\n                        while (true)\n                        {\n                            v14 = *((long long *)(r12<8> + 56))();\n                            if (v14 == 0)\n                            {\n                                v15 = v15->field_8;\n                                v11 = v15->field_8;\n                                v16 = *(v11);\n                                if (*(v11) == v1 || v15->field_8 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v11 = v15->field_8;\n                            }\n                        }\n                        if (v14 == 0)\n                        {\n                            return v18;\n                        }\n                    }\n                    if ((char)v20 != 0)\n                    {\n                        *((unsigned long long [2])&v15->field_8) = v11[1];\n                        v11[0] = 0;\n                        v11[1] = v2->field_48;\n                        v2->field_48 = v11;\n                    }\n                }\n            }\n        }\n        if ((v8 == v1 || v10 != 0) && (char)v20 != 0)\n        {\n            v17 = v15->field_8;\n            if (v15->field_8 != 0)\n            {\n                v19 = *(v17);\n                *(v15) = *(v17);\n                *((long long *)&v17->field_0) = 0;\n                v17->field_8 = v2->field_48;\n                v2->field_48 = v17;\n                return v19;\n            }\n            *((long long *)&v15->field_0) = 0;\n        }\n        if ((v15->field_8 == 0 || v10 == 0 || (char)v20 == 0) && (v15->field_8 == 0 || (char)v20 == 0 || v8 != v1) && (v8 == v1 || v10 != 0 || v15->field_8 != 0))\n        {\n            return v21;\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 && v15->field_8 == 0 && v8 != v1 || v10 == 0 && v8 != v1 && v1 != *(v11))\n    {\n        return v18;\n    }\n}\n"
        },
        {
            "funcName": "sub_4120e0",
            "funcStartAddr": "0x4120e0",
            "funcEndAddr": "0x4120f1",
            "decompiledFuncCode": "int sub_4120e0()\n{\n}\n"
        },
        {
            "funcName": "sub_404e10",
            "funcStartAddr": "0x404e10",
            "funcEndAddr": "0x404e1e",
            "decompiledFuncCode": "int sub_404e10()\n{\n}\n"
        },
        {
            "funcName": "sub_4080c0",
            "funcStartAddr": "0x4080c0",
            "funcEndAddr": "0x4080e4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nint sub_4080c0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rsi\n\n    if (!(v1->field_48 <= v2->field_48))\n    {\n        return -18446744069414584321;\n    }\n    else if (v1->field_48 != v2->field_48)\n    {\n        return (unsigned long long)(char)(v1->field_48 < v2->field_48);\n    }\n}\n"
        },
        {
            "funcName": "sub_405390",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x405456",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char padding_38[24];\n    char field_50;\n} struct_0;\n\nextern unsigned long long stdout[7];\n\nint sub_405390()\n{\n    void tmp_6;  // tmp #6\n    void tmp_46;  // tmp #46\n    struct_0 *v1;  // rsi\n    char *v2;  // rax\n    unsigned long long v3;  // rdx\n    char *v4;  // rdi\n    unsigned long long v6;  // rdx\n    unsigned long long *v8;  // rbx\n\n    v2 = v1->field_18;\n    v8 = v1->field_10;\n    if (v1->field_18 - v1->field_10 > 7)\n    {\n        if (v1->field_18 == v1->field_10)\n        {\n            v1->field_50 = v1->field_50 | 2;\n        }\n        tmp_6 = &v2[v1->field_30] & !(v1->field_30);\n        v3 = v1->field_20;\n        tmp_46 = !((&v2[v1->field_30] & !(v1->field_30)) - v1->field_8 <= v1->field_20 - v1->field_8);\n        *((int *)&v1->field_18) = (!((&v2[v1->field_30] & !(v1->field_30)) - v1->field_8 <= v1->field_20 - v1->field_8)? v1->field_20 : &v2[v1->field_30] & !(v1->field_30));\n        *((int *)&v1->field_10) = (tmp_46? v3 : tmp_6);\n        fputs_unlocked(v4, stdout);\n        while (true)\n        {\n            v6 = *(v8);\n            v8 = &v8[1];\n            __printf_chk(0x1, \" \", v6);\n            if ((v1->field_18 - v1->field_10 & -8) + v1->field_10 == v8)\n            {\n                break;\n            }\n        }\n        v2 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v2) = 10;\n        }\n    }\n    if (v1->field_18 - v1->field_10 <= 7 || stdout[5] < stdout[6])\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4138f0",
            "funcStartAddr": "0x4138f0",
            "funcEndAddr": "0x413e48",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n} struct_0;\n\nextern char g_413ac4;\nextern char g_413afe;\nextern char g_413b98;\nextern char g_413bf3;\nextern char g_413c66;\nextern char g_413c93;\nextern char g_413cbd;\nextern char g_413cdf;\nextern char g_413d35;\nextern char g_413d75;\nextern char g_413dc1;\nextern char g_413dd6;\nextern char g_413dfc;\nextern char g_413e41;\nextern char g_413e5a;\nextern char g_413e73;\nextern unsigned int g_625918;\n\nint sub_4138f0()\n{\n    unsigned long long v0;  // [bp-0x1b0]\n    unsigned long v1;  // [bp-0x98]\n    char v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x80]\n    struct_0 *|unsigned int [3]|unsigned long long v4;  // [bp-0x78]\n    unsigned long long v5;  // [bp-0x70]\n    unsigned long v6;  // [bp-0x60]\n    unsigned int|unsigned int [3] v7;  // [bp-0x58]\n    unsigned int|unsigned long long *|unsigned long long v8;  // [bp-0x50]\n    unsigned long|unsigned long long|unsigned long long * v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x20]\n    unsigned long v11;  // [bp-0x18]\n    unsigned long v12;  // [bp-0x10]\n    unsigned long v13;  // [bp-0x8]\n    unsigned int v15;  // edi\n    unsigned long long v16;  // rdx\n    unsigned long v17;  // rcx\n    unsigned long long v18;  // rsi\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r13\n    unsigned int *|unsigned int [3] v22;  // r14\n    unsigned long long v23;  // rdx\n    unsigned int|unsigned long v24;  // rax\n    unsigned long long v25;  // rax\n    unsigned int v26[3];  // rdx\n    unsigned long long v28;  // rbx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rax\n    unsigned long long v32;  // r15\n    unsigned long long v34;  // rax\n    unsigned long long *v35;  // r13\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned int v38;  // r9d\n    char v39;  // r8b\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    unsigned long long v43;  // rax\n    unsigned long long *v44;  // r13\n    unsigned long long v45;  // r15\n    unsigned long long *v46;  // r13\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rax\n\n    v7 = v15;\n    v5 = v16;\n    v6 = v17;\n    v9 = 0;\n    rsp<8> = &v2;\n    v8 = wcslen(v18);\n    v20 = v4->field_4;\n    if (v4->field_4 != 0)\n    {\n        v22 = &v4->field_4;\n        v4 = v18;\n        v21 = 0;\n        while (true)\n        {\n            if ((unsigned int)v20 != 91)\n            {\n                while (true)\n                {\n                    v19 = v20 - 33;\n                    if ((unsigned int)(v20 - 33) <= 31)\n                    {\n                        v0 = 3221227009;\n                        rsp<8> = &v2;\n                        if (v22[1] == 40 && ((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) != 0)\n                        {\n                            v21 += 1;\n                            v22 = &v22[1];\n                            v20 = 40;\n                        }\n                        if ((unsigned int)v20 == 41 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40))\n                        {\n                            if (v21 != 0)\n                            {\n                                v20 = v22[1];\n                                v22 = &v22[1];\n                                if ((unsigned int)v20 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v28 = v4;\n                                if (v7 - 63 > 1)\n                                {\n                                    v8 = (v22 - &v4->field_4 >> 2) + 1;\n                                }\n                                v29 = v8;\n                                v30 = v8 * 4 + 15 & -8;\n                                if (((v8 << 2) + 15 & -8) - 8 > 7991 || v29 > 4611686018427387903)\n                                {\n                                    break;\n                                }\n                                rsp<8> = &(&v2)[-1 * (v30 + 23 & -0x10) + -8];\n                                v13 = &g_413b98;\n                                *((int *)(unsigned long long)wmempcpy((&(&v2)[-1 * (v30 + 23 & -0x10) + 15] & -0x10) + 8)) = 0;\n                                v9 = &(&v2)[-1 * (v30 + 23 & -0x10) + 15] & -0x10;\n                                v44 = v9;\n                                *(v9) = 0;\n                                if (v9 == 0)\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v12 = &g_413e73;\n                                    __assert_fail(); /* do not return */\n                                }\n                                else if (v22[-1 + 1] == 41)\n                                {\n                                    v32 = v7 - 33;\n                                    switch (v7)\n                                    {\n                                    case 33:\n                                        if (v5 <= v6)\n                                        {\n                                            v8 = v9;\n                                            *((unsigned int *[3])&v7[0]) = v22;\n                                            while (true)\n                                            {\n                                                v35 = v8;\n                                                while (true)\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v12 = &g_413d35;\n                                                    v36 = sub_413e80();\n                                                    if (v36 != 0)\n                                                    {\n                                                        v35 = *(v35);\n                                                        rsp<8> = rsp<8> - 8;\n                                                        v11 = &g_413d75;\n                                                        v37 = sub_413e80();\n                                                        if (v37 == 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                    break;\n                                                }\n                                                if (v36 == 0 || v35 == 0 && v37 != 0)\n                                                {\n                                                    v35 = v8;\n                                                }\n                                                else if (v36 == 0 || v35 == 0 && v37 != 0)\n                                                {\n                                                    v48 = 1;\n                                                }\n                                                else if (v35 == 0 && v36 != 0)\n                                                {\n                                                    v48 = 0;\n                                                }\n                                            }\n                                            if (true)\n                                            {\n                                                v48 = 1;\n                                            }\n                                            else\n                                            {\n                                                v48 = 0;\n                                            }\n                                        }\n                                    case 42:\n                                        rsp<8> = rsp<8> - 8;\n                                        v12 = &g_413bf3;\n                                    case 43:\n                                        *((unsigned int *[3])&v4[0]) = v22;\n                                        v7 = v38 & 1;\n                                        v3 = v28 - 4;\n                                        while (true)\n                                        {\n                                            if (v5 <= v6)\n                                            {\n                                                v45 = v5;\n                                                v8 = v39;\n                                                do\n                                                {\n                                                    rsp<8> = rsp<8> - 8;\n                                                    v12 = &g_413cbd;\n                                                    v40 = sub_413e80();\n                                                    if (v40 == 0)\n                                                    {\n                                                        if (v5 != v45)\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v11 = &g_413c66;\n                                                            if (sub_413e80() == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v10 = &g_413c93;\n                                                            v43 = sub_413e80();\n                                                            if (v43 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            rsp<8> = rsp<8> - 8;\n                                                            v11 = &g_413cdf;\n                                                            v41 = sub_413e80();\n                                                            if (v41 == 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                        }\n                                                        v44 = v9;\n                                                    }\n                                                    v45 += 4;\n                                                }\n                                                while (v6 >= v45);\n                                                if (v5 == v45 || v40 == 0)\n                                                {\n                                                    v48 = 0;\n                                                }\n                                                else if (v43 != 0 || v40 != 0 || v5 == v45 && v41 != 0)\n                                                {\n                                                    v46 = *(v44);\n                                                    v9 = v46;\n                                                }\n                                            }\n                                            v46 = *(v44);\n                                            v9 = v46;\n                                        }\n                                        if (v5 <= v6)\n                                        {\n                                            v48 = 0;\n                                        }\n                                        else if (v46 == 0)\n                                        {\n                                            v48 = 1;\n                                        }\n                                    case 63:\n                                        rsp<8> = rsp<8> - 8;\n                                        v12 = &g_413dfc;\n                                        v34 = sub_413e80();\n                                        if (v34 != 0)\n                                        {\n                                            while (true)\n                                            {\n                                                rsp<8> = rsp<8> - 8;\n                                                v12 = &g_413dc1;\n                                                wcscat((unsigned int)v44 + 8, (unsigned int)v22);\n                                                rsp<8> = rsp<8> - 8;\n                                                v11 = &g_413dd6;\n                                                v47 = sub_413e80();\n                                                if (v47 != 0)\n                                                {\n                                                    v44 = *(v44);\n                                                    v9 = v44;\n                                                    if (v44 == 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v48 = 0;\n                                                }\n                                            }\n                                            if (v47 != 0)\n                                            {\n                                                v48 = 1;\n                                            }\n                                            else if (v47 == 0)\n                                            {\n                                                return v48;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v48 = 0;\n                                            break;\n                                        }\n                                    default:\n                                        rsp<8> = rsp<8> - 8;\n                                        v12 = &g_413e41;\n                                        __assert_fail(); /* do not return */\n                                    }\n                                    v48 = 1;\n                                    v48 = 0;\n                                }\n                                else\n                                {\n                                    rsp<8> = rsp<8> - 8;\n                                    v12 = &g_413e5a;\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                        }\n                    }\n                    else if ((unsigned int)v20 == 124)\n                    {\n                        if (v21 == 0)\n                        {\n                            v23 = v8;\n                            if (v7 - 63 > 1)\n                            {\n                                v23 = (v22 - &v4->field_4 >> 2) + 1;\n                            }\n                            v25 = v23 * 4 + 15 & -8;\n                            if (v23 > 4611686018427387903 || ((v23 << 2) + 15 & -8) - 8 > 7991)\n                            {\n                                break;\n                            }\n                            rsp<8> = &(&v2)[-1 * (v25 + 23 & -0x10) + -8];\n                            v13 = &g_413ac4;\n                            *((int *)(unsigned long long)wmempcpy((&(&v2)[-1 * (v25 + 23 & -0x10) + 15] & -0x10) + 8)) = 0;\n                            v20 = v22[1];\n                            v22 = &v22[1];\n                            *((long long *)v9) = 0;\n                            v9 = &(&v2)[-1 * (v25 + 23 & -0x10) + 15] & -0x10;\n                        }\n                    }\n                    if ((unsigned int)v20 != 124 && (unsigned int)(v20 - 33) > 31 || v21 != 0 && (unsigned int)(v20 - 33) > 31 || ((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 && (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 || (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 && v22[1] != 40)\n                    {\n                        v20 = v22[1];\n                        v22 = &v22[1];\n                    }\n                }\n                if ((unsigned int)v20 != 124 && (unsigned int)(v20 - 33) > 31 || v21 != 0 && (unsigned int)(v20 - 33) > 31 || ((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 && (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 || v23 <= 4611686018427387903 && ((v23 << 2) + 15 & -8) - 8 <= 7991 && (unsigned int)(v20 - 33) > 31 || (unsigned int)(v20 - 33) <= 31 && (unsigned int)v20 != 41 && v22[1] != 40)\n                {\n                    if ((unsigned int)v20 == 0)\n                    {\n                        break;\n                    }\n                }\n                else if ((unsigned int)v20 == 41 && v21 == 0 && ((v8 << 2) + 15 & -8) - 8 <= 7991 && (unsigned int)(v20 - 33) <= 31 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40) || (unsigned int)v20 == 41 && v21 == 0 && (unsigned int)(v20 - 33) <= 31 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40) || (unsigned int)v20 == 124 && v21 == 0 && ((v23 << 2) + 15 & -8) - 8 <= 7991 && (unsigned int)(v20 - 33) > 31 || (unsigned int)v20 == 41 && (unsigned int)v20 == 0 && (unsigned int)(v20 - 33) <= 31 && v21 != 0 && (((char)((char)*(&((char *)stack_base)[((v19 & 63) >> 3) + -432]) >> (unsigned long long)(char)(v19 & 63 & 7)) & 1) == 0 || v22[1] != 40) || (unsigned int)v20 == 124 && v21 == 0 && (unsigned int)(v20 - 33) > 31)\n                {\n                    v48 = -18446744069414584321;\n                }\n                else if (...)\n                {\n                    return v48;\n                }\n            }\n            else\n            {\n                if (g_625918 == 0)\n                {\n                    v3 = &v4->field_4;\n                    rsp<8> = rsp<8> - 8;\n                    v1 = &g_413afe;\n                    g_625918 = 0 - (unsigned int)(char)(getenv(\"POSIXLY_CORRECT\") < 1) | 1;\n                }\n                v24 = v22[1];\n                if (v22[1] != 33 && (g_625918 >= 0 || (unsigned int)v24 != 94))\n                {\n                    v26 = &v22[1];\n                }\n                if (v22[1] == 33 || g_625918 < 0 && (unsigned int)v24 == 94)\n                {\n                    v26 = &v22[1];\n                    v24 = v22[1];\n                }\n                if ((unsigned int)v24 == 93)\n                {\n                    v24 = v26[1];\n                    v26 = &v26[1];\n                }\n                while (true)\n                {\n                    v22 = &v26[1];\n                    if (v24 != 93)\n                    {\n                        if (v24 == 0)\n                        {\n                            break;\n                        }\n                        v24 = *(v22);\n                        v26 = v22;\n                    }\n                    else\n                    {\n                        v20 = v26[1];\n                    }\n                }\n                if (v24 != 93)\n                {\n                    v48 = -18446744069414584321;\n                }\n            }\n        }\n        if (true)\n        {\n            v48 = -18446744069414584321;\n        }\n        else\n        {\n            return v48;\n        }\n    }\n    v48 = -18446744069414584321;\n    return v48;\n}\n"
        },
        {
            "funcName": "sub_4127c0",
            "funcStartAddr": "0x4127c0",
            "funcEndAddr": "0x4127e0",
            "decompiledFuncCode": "int sub_4127c0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_40c2a0",
            "funcStartAddr": "0x40c2a0",
            "funcEndAddr": "0x40c2a7",
            "decompiledFuncCode": "int sub_40c2a0()\n{\n    unsigned long v1;  // rax\n\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40acf0",
            "funcStartAddr": "0x40acf0",
            "funcEndAddr": "0x40adf3",
            "decompiledFuncCode": "int sub_40acf0()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((*((long long *)(v5 + (v12 << 3))) == 0 || v13 == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_411d42",
            "funcStartAddr": "0x411d42",
            "funcEndAddr": "0x411d6b",
            "decompiledFuncCode": "int sub_411d42()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_405af0",
            "funcStartAddr": "0x405af0",
            "funcEndAddr": "0x405c5c",
            "decompiledFuncCode": "extern int512_t g_405560;\nextern char g_419504;\nextern char g_419530;\nextern uint128_t g_6255e0;\nextern uint128_t g_6255f0;\nextern uint128_t g_625600;\nextern uint128_t g_625610;\nextern uint128_t g_625620;\nextern uint128_t g_625630;\nextern uint128_t g_625640;\nextern uint128_t g_625650;\n\nint sub_405af0()\n{\n    unsigned long v0;  // [bp-0xb8]\n    void v1;  // [bp-0xb0]\n    void v2;  // [bp-0xa0]\n    void v3;  // [bp-0x90]\n    void v4;  // [bp-0x80]\n    void v5;  // [bp-0x70]\n    void v6;  // [bp-0x60]\n    void v7;  // [bp-0x50]\n    void v8;  // [bp-0x40]\n    unsigned int v9;  // [bp-0x30]\n    char v11;  // dil\n    unsigned int *v12;  // rbx\n    unsigned int *|unsigned long long v13;  // rbx\n    unsigned int v14;  // rbp\n    unsigned long|unsigned long long v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned int v18;  // r12\n    unsigned int|unsigned long v19;  // ebp\n    unsigned long long v20;  // rax\n\n    if (v11 == 0)\n    {\n        v12 = &g_419504;\n        v14 = 20;\n        while (true)\n        {\n            v16 = sigismember(0x6255e0, v14);\n            if ((unsigned int)v16 == 0)\n            {\n                if (v12 == 4298032)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v16 = signal(v14, 0x0);\n                if (v12 == 4298032)\n                {\n                    break;\n                }\n            }\n            v14 = *(v12);\n            v12 = &v12[1];\n        }\n        return v16;\n    }\n    v13 = &g_419504;\n    v18 = 20;\n    sigemptyset(0x6255e0);\n    v15 = &g_419504;\n    while (true)\n    {\n        sigaction();\n        if (v0 != 1)\n        {\n            sigaddset(0x6255e0, v18);\n        }\n        if (v15 == 4298032)\n        {\n            break;\n        }\n        v18 = *((int *)v15);\n        v15 += 4;\n    }\n    v9 = 0x10000000;\n    v19 = 20;\n    *((uint128_t *)&v1) = g_6255e0;\n    *((uint128_t *)&v2) = g_6255f0;\n    *((uint128_t *)&v3) = g_625600;\n    *((uint128_t *)&v4) = g_625610;\n    *((uint128_t *)&v5) = g_625620;\n    *((uint128_t *)&v6) = g_625630;\n    *((uint128_t *)&v7) = g_625640;\n    *((uint128_t *)&v8) = g_625650;\n    while (true)\n    {\n        v20 = sigismember(0x6255e0, v14);\n        if ((unsigned int)v20 != 0)\n        {\n            *((int *)&v0) = (v19 == 20? &g_405560 : 4212784);\n            v20 = sigaction();\n        }\n        if (v13 == 4298032)\n        {\n            break;\n        }\n        v19 = *(v13);\n        v13 = &v13[1];\n    }\n    return v20;\n}\n"
        },
        {
            "funcName": "sub_416190",
            "funcStartAddr": "0x416190",
            "funcEndAddr": "0x41678e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_41fba0;\nextern unsigned int g_41fbc0;\nextern unsigned int g_41fbf0;\nextern unsigned int g_41fc10;\nextern unsigned int g_41fc40;\nextern unsigned int g_41fc91;\nextern unsigned long long stderr;\n\nint sub_416190()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long *|unsigned long long v19;  // rbx\n    unsigned int|unsigned long|unsigned long long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (*((int *)(v19 + 24)) != *((int *)(v27 + 24)) || v29 != 0 || *((int *)(v19 + 8)) != *((int *)(v27 + 8)) || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fba0, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fbc0, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x41fc91, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 += 32;\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((*(v19) == 0 || v22 == 0) && (*(v19) == 0 || v23 == v17) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fc40, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fc10, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if (*(v15) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v25 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0) && (*((long long *)v18) != 0 || v36 != 0))\n        {\n            return v46;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0 || v36 == 0 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fbf0, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_406c60",
            "funcStartAddr": "0x406c60",
            "funcEndAddr": "0x4075a1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[16];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n    char padding_34[4];\n    unsigned int field_38;\n    char padding_3c[36];\n    unsigned long long field_60;\n    unsigned long long field_68;\n    unsigned long long field_70;\n    unsigned long long field_78;\n    unsigned long long field_80;\n    unsigned long long field_88;\n    char padding_90[24];\n    unsigned int field_a8;\n    char padding_ac[12];\n    char field_b8;\n    char padding_b9[3];\n    unsigned int field_bc;\n} struct_0;\n\nextern unsigned int g_41b08b;\nextern unsigned int g_41b096;\nextern unsigned int g_41b09b;\nextern unsigned int g_624404;\nextern char g_6245a8;\nextern char g_6245a9;\nextern char g_624788;\nextern unsigned long long g_6255b8;\nextern char g_6256bc;\nextern unsigned int g_6256d4;\nextern char g_6256d8;\nextern char g_6256ec;\nextern char g_6256ed;\nextern char g_6256ee;\nextern unsigned int g_6256f4;\nextern unsigned int g_6256fc;\nextern unsigned int g_625700;\nextern unsigned int g_62570c;\nextern unsigned int g_62571c;\nextern char g_625724;\nextern char g_625725;\nextern unsigned long long g_625730;\nextern unsigned long long g_625738;\nextern unsigned long long stdout;\n\nint sub_406c60()\n{\n    void tmp_12;  // tmp #12\n    void tmp_18;  // tmp #18\n    unsigned long v0;  // [bp-0x1358]\n    unsigned long v1;  // [bp-0x1350]\n    unsigned int v2;  // [bp-0x1344]\n    unsigned long v3;  // [bp-0x1340]\n    unsigned long long v4;  // [bp-0x1330]\n    char v5;  // [bp-0x1324]\n    unsigned long long v6;  // [bp-0x1323]\n    unsigned short v7;  // [bp-0x131b]\n    char v8;  // [bp-0x131a]\n    char v9;  // [bp-0x1319]\n    unsigned long|unsigned long long v10;  // [bp-0x1318]\n    unsigned long|unsigned long long v11;  // [bp-0x1310]\n    char v12;  // [bp-0xe78]\n    char v13;  // [bp-0xe74]\n    struct_0 *v15;  // rdi\n    struct_0 *v16;  // rbp\n    unsigned int|unsigned long v17;  // rax\n    unsigned long long v18;  // rdx\n    void *v19;  // rbx\n    unsigned long long v20;  // r9\n    void *v21;  // rbx\n    unsigned long long v22;  // r15\n    unsigned long long v23;  // rax\n    unsigned int v24;  // eax\n    unsigned long long v26;  // rcx\n    void *v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v30;  // rbx\n    unsigned long long v33;  // rdi\n    unsigned long long v37;  // r14\n    unsigned long long v39;  // rax\n    unsigned int v40;  // eax\n    unsigned long long v42;  // rcx\n    void *v43;  // rax\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // cc_dep2\n    unsigned long long v47;  // r9\n    unsigned long long v48;  // rdx\n    unsigned long long v49;  // rsi\n    unsigned long long v50;  // rdi\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // rax\n    void *v53;  // rbx\n    void *v54;  // r13\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // rax\n    unsigned long long v57;  // rax\n    unsigned int|unsigned long v58;  // r8d\n    unsigned long long v59;  // r13\n    unsigned long long v61;  // rax\n\n    v16 = v15;\n    if (v15->field_b8 != 0)\n    {\n        sub_40bb60();\n    }\n    else\n    {\n        v5 = *((char *)(4300744 + (unsigned long long)v15->field_a8));\n        v6 = 4557430888798830399;\n        v7 = 16191;\n        v9 = 0;\n    }\n    if (g_625724 == 0)\n    {\n        v8 = 0;\n    }\n    else\n    {\n        if (v15->field_bc != 1)\n        {\n        }\n        else\n        {\n            v8 = 46;\n        }\n        if (v15->field_bc == 2)\n        {\n            v17 = g_6256f4;\n            v8 = 43;\n        }\n    }\n    if (g_625724 == 0 || v15->field_bc == 1 || v15->field_bc != 2)\n    {\n        v17 = g_6256f4;\n    }\n    if (g_6256f4 != 1)\n    {\n        if (v17 == 0)\n        {\n            v10 = v16->field_70;\n            v18 = v16->field_b8;\n            v11 = v16->field_78;\n        }\n        else if (v17 != 2)\n        {\n            abort(); /* do not return */\n        }\n        if (v17 == 2)\n        {\n            v10 = v16->field_60;\n            v18 = v16->field_b8;\n            v11 = v16->field_68;\n        }\n    }\n    else\n    {\n        v10 = v16->field_80;\n        v18 = v16->field_b8;\n        v11 = v16->field_88;\n    }\n    if (v17 == 0 || v17 == 2 || g_6256f4 == 1)\n    {\n        if (g_6256bc == 0)\n        {\n            v19 = &v12;\n        }\n        else\n        {\n            if (v18 != 0 && v16->field_20 != 0)\n            {\n                v20 = (unsigned int)sub_40e520();\n            }\n            v21 = &v12;\n            __sprintf_chk((unsigned int)&v12, 0x1, 0xe3b, 0x41b09b);\n            do\n            {\n                tmp_12 = (unsigned int)*((int *)&v12);\n                v21 = &v13;\n            }\n            while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n            v18 = v16->field_b8;\n            v19 = (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v21 + 2 : v21) - 3 - (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) >> 16) : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) >> 16) : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)((unsigned long long)((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) >> 16) : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1);\n        }\n        if (g_6256ec != 0)\n        {\n            v22 = \"?\";\n            if (v18 != 0)\n            {\n                v22 = (unsigned int)sub_40d5d0();\n            }\n            v23 = sub_40eb70();\n            v24 = g_62571c - v23;\n            if ((unsigned int)(g_62571c - v23) > 0)\n            {\n                v26 = v19 + (unsigned long long)v24 - 1 + 1;\n                v27 = v19;\n                do\n                {\n                    v27 += 1;\n                    *((char *)&v27[-1]) = 32;\n                }\n                while (v27 != v26);\n                v19 = v19 + (unsigned long long)v24 - 1 + 1;\n            }\n            do\n            {\n                v22 += 1;\n                v19 += 1;\n                tmp_18 = *((char *)(v22 - 1));\n                *((char *)&v19[-1]) = *((char *)(v22 - 1));\n            }\n            while (tmp_18 != 0);\n            *((char *)&v19[-1]) = 32;\n            v18 = v16->field_b8;\n        }\n        v28 = \"?\";\n        if (v18 != 0)\n        {\n            v28 = sub_40e520();\n        }\n        v0 = v28;\n        __sprintf_chk((unsigned int)v19, 0x1, 0xffffffff, 0x41b08b);\n        v53 = v19 + strlen(v19);\n        if (g_6256d8 != 0)\n        {\n            fwrite_unlocked(\"  \", 0x1, 0x2, stdout);\n            g_6255b8 = g_6255b8 + 2;\n        }\n        if (g_6245a8 != 0 || g_625725 != 0 || g_6245a9 != 0 || g_6256ee != 0)\n        {\n            v30 = v53 - &v12;\n            fputs_unlocked(&v12, stdout);\n            g_6255b8 = g_6255b8 + v30;\n            if (g_6245a9 != 0)\n            {\n                sub_405520();\n            }\n            if (g_6245a8 != 0)\n            {\n                if (v16->field_b8 != 0 && g_6256ed == 0)\n                {\n                    v3 = v15->field_38;\n                    v2 = g_62570c;\n                    v33 = (unsigned int)sub_40e2f0();\n                }\n                sub_405460();\n            }\n            if (g_6256ee != 0)\n            {\n                sub_405520();\n            }\n            v53 = &v12;\n            if (g_625725 != 0)\n            {\n                sub_405460();\n            }\n        }\n        if (!(v16->field_b8 != 0))\n        {\n            v37 = \"?\";\n        }\n        else if (((unsigned short)v16->field_30 & 0xb000) != 0x2000)\n        {\n            v37 = (unsigned int)sub_40d5d0();\n        }\n        else\n        {\n            sub_40e520();\n            v1 = (unsigned int)sub_40e520();\n            v0 = g_625700;\n            __sprintf_chk((unsigned int)v53, 0x1, 0xffffffff, 0x41b096);\n            v53 = v53 + (long long)(int)g_6256fc + 1;\n        }\n        if (v16->field_b8 == 0 || ((unsigned short)v16->field_30 & 0xb000) != 0x2000)\n        {\n            v39 = sub_40eb70();\n            v40 = g_6256fc - v39;\n            if ((unsigned int)(g_6256fc - v39) > 0)\n            {\n                v42 = v53 + (unsigned long long)v40 - 1 + 1;\n                v43 = v53;\n                do\n                {\n                    v43 += 1;\n                    *((char *)&v43[-1]) = 32;\n                }\n                while (v43 != v42);\n                v53 = v53 + (unsigned long long)v40 - 1 + 1;\n            }\n            do\n            {\n                v37 += 1;\n                v53 += 1;\n                tmp_18 = *((char *)(v37 - 1));\n                *((char *)&v53[-1]) = *((char *)(v37 - 1));\n            }\n            while (tmp_18 != 0);\n            *((char *)&v53[-1]) = 32;\n        }\n        *((char *)v53) = 1;\n        if (v16->field_b8 != 0)\n        {\n            v44 = sub_4176f0();\n            if (v44 != 0)\n            {\n                v48 = g_625730;\n                v51 = v10;\n                v49 = g_625738;\n                v47 = v11;\n                v45 = v10;\n                if (g_625730 >= v10)\n                {\n                    if (g_625730 <= v45)\n                    {\n                    }\n                    else\n                    {\n                        v50 = v48 - 15778476;\n                    }\n                }\n                if (g_625730 < v10 || g_625730 <= v45 && (unsigned int)(g_625738 - v47) < 0)\n                {\n                    sub_40c150();\n                    v51 = v10;\n                    v47 = v11;\n                    v48 = g_625730;\n                    v49 = g_625738;\n                    v50 = g_625730 - 15778476;\n                }\n                if (g_624788 != 0)\n                {\n                    v52 = sub_410650();\n                    if (v52 != 0)\n                    {\n                        v53 += v52;\n                    }\n                }\n            }\n            if ((v44 == 0 || v52 == 0 && g_624788 != 0) && *((char *)v53) != 0 && v16->field_b8 != 0)\n            {\n                v55 = (unsigned int)sub_40e480();\n            }\n            if ((v44 == 0 || g_624788 != 0) && (*((char *)v53) == 0 || v44 != 0) && (*((char *)v53) == 0 || v52 != 0))\n            {\n                v54 = v53 + 1;\n                *((short *)v53) = 32;\n            }\n        }\n        if (g_624404 < 0 && (v16->field_b8 == 0 || *((char *)v53) != 0) && (v44 == 0 || v52 == 0 || v16->field_b8 == 0) && (v44 == 0 || v16->field_b8 == 0 || g_624788 != 0))\n        {\n            v4 = 0;\n            v56 = sub_4176f0();\n            if (v56 != 0 && g_624788 == 0)\n            {\n                v57 = sub_410650();\n                if (v57 != 0)\n                {\n                    v58 = (unsigned int)sub_40e9b0();\n                    g_624404 = v58;\n                }\n            }\n            if (v56 == 0 || v57 == 0 && g_624788 == 0)\n            {\n                v58 = g_624404;\n            }\n            if (v58 < 0)\n            {\n                g_624404 = 0;\n            }\n        }\n        if (v16->field_b8 == 0 || v44 == 0 && *((char *)v53) != 0 || v52 == 0 && g_624788 != 0 && *((char *)v53) != 0)\n        {\n            __sprintf_chk((unsigned int)v53, 0x1, 0xffffffff, 0x41b09b);\n            v54 = v53 + strlen(v53);\n        }\n        v59 = v54 - &v12;\n        fputs_unlocked(&v12, stdout);\n        g_6255b8 = g_6255b8 + v59;\n        v61 = sub_406690();\n        if (v16->field_a8 != 6)\n        {\n            v61 = g_6256d4;\n            if (g_6256d4 != 0)\n            {\n                v61 = sub_4058a0();\n            }\n        }\n        else if (v16->field_8 != 0)\n        {\n            fwrite_unlocked(\" -> \", 0x1, 0x4, stdout);\n            g_6255b8 = g_6255b8 + 4;\n            v61 = sub_406690();\n            if (g_6256d4 != 0)\n            {\n                v61 = sub_4058a0();\n            }\n        }\n        return v61;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c480",
            "funcStartAddr": "0x40c480",
            "funcEndAddr": "0x40c5ba",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[40];\n    struct struct_1 *field_48;\n} struct_0;\n\nint sub_40c480()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // r14\n    unsigned long long v3[4];  // rsi\n    unsigned long long v4[4];  // r13\n    struct_0 *v5;  // rdi\n    unsigned long long v6[10];  // rbp\n    unsigned long long v7;  // r15\n    unsigned long long v8[2];  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbx\n    unsigned long long v11;  // r15\n    unsigned long long v12[2];  // r12\n    unsigned long long v13[2];  // rbx\n    unsigned long long v14[2];  // rax\n    unsigned long long v15;  // rdx\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v5;\n    v12 = *(v3);\n    if (*(v3) < v3[1])\n    {\n        while (true)\n        {\n            v11 = *(v12);\n            if (*(v12) != 0)\n            {\n                v10 = v12[1];\n                if (v12[1] != 0)\n                {\n                    while (true)\n                    {\n                        v7 = *(v10);\n                        v8 = sub_40c2b0();\n                        v9 = v10[1];\n                        if (*(v8) != 0)\n                        {\n                            v10[1] = v8[1];\n                            v8[1] = v10;\n                            v10 = v9;\n                            if (v9 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v8[0] = v7;\n                            v6[3] = v6[3] + 1;\n                            v10[0] = 0;\n                            *((unsigned long long [10])&v10[1]) = v6[9];\n                            v6[9] = v10;\n                            if (v10 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v11 = *(v12);\n                }\n                v12[1] = 0;\n                if (v2 == 0)\n                {\n                    v13 = (unsigned long long)(unsigned int)sub_40c2b0();\n                    if (*(v13) != 0)\n                    {\n                        v14 = v6[9];\n                        if (v6[9] != 0)\n                        {\n                            v6[9] = v5->field_48->field_8;\n                        }\n                        else\n                        {\n                            v14 = malloc(0x10);\n                            if (v14 == 0)\n                            {\n                                return 0;\n                            }\n                        }\n                        if (v6[9] != 0 || v14 != 0)\n                        {\n                            v15 = v13[1];\n                            v14[0] = v11;\n                            v14[1] = v15;\n                            v13[1] = v14;\n                        }\n                    }\n                    else\n                    {\n                        v13[0] = v11;\n                        v6[3] = v6[3] + 1;\n                    }\n                    if (v14 != 0)\n                    {\n                        v12[0] = 0;\n                        v12 = &v12[2];\n                        v4[3] = v4[3] - 1;\n                        if (v4[1] <= v12)\n                        {\n                            break;\n                        }\n                    }\n                }\n            }\n            if (*(v12) == 0 || v2 != 0)\n            {\n                v12 = &v12[2];\n                if (v3[1] <= v12)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_408580",
            "funcStartAddr": "0x408580",
            "funcEndAddr": "0x40920c",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n    char padding_34[36];\n    unsigned long long field_58;\n    char padding_60[72];\n    unsigned int field_a8;\n    unsigned int field_ac;\n    unsigned long long field_b0;\n    char field_b8;\n    char field_b9;\n    char padding_ba[2];\n    unsigned int field_bc;\n    char field_c0;\n    char padding_c1[3];\n    unsigned int field_c4;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[1];\n    char field_1;\n} struct_2;\n\nextern char g_4086dd;\nextern char g_408723;\nextern char g_4087d4;\nextern char g_408940;\nextern char g_408959;\nextern char g_40896b;\nextern int512_t g_4089a4;\nextern int512_t g_4089ae;\nextern int512_t g_408a06;\nextern int512_t g_408a30;\nextern int512_t g_408a38;\nextern int512_t g_408a8a;\nextern int512_t g_408a92;\nextern int512_t g_408abb;\nextern int512_t g_408ac3;\nextern char g_408b07;\nextern char g_408b14;\nextern char g_408b67;\nextern char g_408b85;\nextern char g_408b94;\nextern char g_408bbf;\nextern int512_t g_408c08;\nextern int512_t g_408c10;\nextern int512_t g_408d72;\nextern int512_t g_408d7c;\nextern char g_408dd6;\nextern char g_408e29;\nextern char g_408e4b;\nextern char g_408e63;\nextern char g_408e74;\nextern char g_408e95;\nextern char g_408ea0;\nextern char g_408ed1;\nextern char g_408f0c;\nextern int512_t g_408f88;\nextern int512_t g_408fa8;\nextern int512_t g_408fed;\nextern char g_409050;\nextern char g_4090c5;\nextern char g_4090df;\nextern char g_4090f2;\nextern char g_40915a;\nextern char g_409175;\nextern char g_409191;\nextern char g_4091a0;\nextern int512_t g_409228;\nextern int512_t g_40923b;\nextern char g_409259;\nextern unsigned int g_41b064;\nextern unsigned int g_41b0a5;\nextern unsigned int g_41b0bd;\nextern unsigned int g_41b0ce;\nextern char g_6245a8;\nextern char g_6245a9;\nextern int512_t g_6245aa;\nextern unsigned long long g_6246a8;\nextern unsigned long long g_6246b0;\nextern unsigned long long g_6246b8;\nextern char g_625660;\nextern char g_625661;\nextern char g_6256b5;\nextern unsigned int g_6256b8;\nextern char g_6256bc;\nextern char g_6256bd;\nextern char g_6256d1;\nextern char g_6256d2;\nextern unsigned int g_6256d4;\nextern char g_6256ec;\nextern char g_6256ed;\nextern char g_6256ee;\nextern unsigned int g_6256f8;\nextern unsigned int g_6256fc;\nextern unsigned int g_625700;\nextern unsigned int g_625704;\nextern unsigned int g_625708;\nextern unsigned int g_62570c;\nextern unsigned int g_625710;\nextern unsigned int g_625714;\nextern unsigned int g_625718;\nextern unsigned int g_62571c;\nextern unsigned int g_625720;\nextern char g_625724;\nextern char g_625725;\nextern char g_625750;\nextern char g_625768;\nextern char g_625769;\nextern unsigned long long g_625770;\nextern unsigned long long g_625778;\nextern unsigned long long g_625780;\n\nint sub_408580()\n{\n    void tmp_11;  // tmp #11\n    void tmp_12;  // tmp #12\n    unsigned long v0;  // [bp-0x330]\n    unsigned long v1;  // [bp-0x328]\n    unsigned long v2;  // [bp-0x320]\n    unsigned long v3;  // [bp-0x318]\n    unsigned long v4;  // [bp-0x310]\n    char v5;  // [bp-0x2fa]\n    char v6;  // [bp-0x2f9]\n    char|unsigned int *|unsigned long long|unsigned long|unsigned int v7;  // [bp-0x2f8]\n    char *v8;  // [bp-0x2f0]\n    char v9;  // [bp-0x2c8]\n    char v10;  // [bp-0x2c4]\n    unsigned int v11;  // [bp-0x2b0]\n    unsigned long v12;  // [bp-0x38]\n    unsigned long v13;  // [bp-0x30]\n    unsigned long v14;  // [bp-0x28]\n    unsigned long v15;  // [bp-0x20]\n    unsigned long v16;  // [bp-0x18]\n    unsigned long v17;  // [bp-0x10]\n    unsigned long v18;  // [bp-0x8]\n    unsigned long v20;  // rcx\n    unsigned int|unsigned long v21;  // r15\n    unsigned int v22;  // esi\n    unsigned int v23;  // r14d\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // r13\n    char *v26;  // rdi\n    unsigned long v27;  // rdx\n    unsigned long long v28;  // rax\n    unsigned long long *v30;  // rcx\n    unsigned long long *v31;  // rdi\n    struct_1 *v32;  // rbx\n    unsigned long long *v33;  // rdi\n    unsigned long long v34;  // rcx\n    unsigned long v35;  // d\n    unsigned long long v36;  // rax\n    char v37[2];  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // dl\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rax\n    char *v48;  // rdi\n    struct_2 *v49;  // rsi\n    unsigned long long v52;  // r10\n    char *v53;  // rax\n    unsigned long long v54;  // rdx\n    char *v55;  // rcx\n    unsigned long long v56;  // r8\n    char *|unsigned long long v57;  // r12\n    unsigned long long v58;  // rax\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // rax\n    unsigned int *v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // r12\n    unsigned long long v68;  // r14\n    unsigned long long v69;  // r14\n    unsigned int|unsigned long v71;  // eax\n    unsigned long long v72;  // rax\n    unsigned long v75;  // rsi\n    char *v76;  // r14\n    unsigned long long v80;  // r15\n    unsigned long long v83;  // rax\n    unsigned long long v87;  // rdi\n    unsigned int|unsigned long v88;  // rax\n    unsigned int *v89;  // rax\n    unsigned long long v90;  // rdx\n    unsigned long v91;  // rdx\n    char *v93;  // rdi\n    unsigned int|unsigned long v97;  // rax\n    unsigned long long v99;  // rdx\n    unsigned long long v101;  // rax\n\n    v21 = v20;\n    v23 = v22;\n    v25 = v24;\n    rsp<8> = stack_base + -776;\n    v30 = g_625770;\n    v8 = v26;\n    v31 = g_625780;\n    if (g_625770 == g_625778)\n    {\n        v27 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, 0x190<64>, rcx<8>, cc_ndep<8>);\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (0x190<64> Mull rcx<8>)), 0x0<64>, cc_ndep<8>)) && v27 == 0)\n        {\n            rsp<8> = stack_base + -784;\n            v28 = sub_4129e0();\n            v30 = g_625770;\n            g_625778 = g_625778 * 2;\n            g_625780 = v28;\n            v31 = v28;\n        }\n        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (0x190<64> Mull rcx<8>)), 0x0<64>, cc_ndep<8>) || v27 != 0)\n        {\n            sub_412bd0(); /* do not return */\n        }\n    }\n    if (g_625770 != g_625778 || v27 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (0x190<64> Mull rcx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v32 = (char *)v31 + 0xc8 * v30;\n        *((long long *)((char *)v31 + 0xc8 * v30)) = 0;\n        *((long long *)&((char *)((char *)v31 + 0xc8 * v30))[188]) = 0;\n        v33 = &((unsigned long long *)((char *)v31 + 0xc8 * v30))[1] & -8;\n        for (v34 = (unsigned long long)((unsigned int)(v32 - v33) + 196) >> 3; v34 != 0; v33 = &v33[v35])\n        {\n            v34 -= 1;\n            *(v33) = 0;\n        }\n        v32->field_20 = 0;\n        v32->field_a8 = v22;\n        v32->field_c4 = -1;\n        if (g_625769 == 0 && g_625768 != 0)\n        {\n            rsp<8> = stack_base + -784;\n            v36 = sub_404e20();\n            v32->field_c4 = v36;\n            if (v36 != 0)\n            {\n                g_625769 = 1;\n            }\n        }\n        v56 = g_6256d1;\n        if (v25 != 0)\n        {\n            v54 = *(v8);\n            v57 = v8;\n            if (*(v8) != 47)\n            {\n                v38 = v37[0];\n            }\n            if (...)\n            {\n                v7 = g_6256b8;\n                rsp<8> = rsp<8> - 8;\n                v3 = &g_408bbf;\n                v60 = __xstat(0x1, (unsigned int)v57, v21);\n                if (v7 != 3)\n                {\n                    if (v60 >= 0)\n                    {\n                    }\n                    else\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v2 = &g_4090c5;\n                        v62 = __errno_location();\n                    }\n                }\n            }\n        }\n        else if (!(g_6256d1 == 0))\n        {\n            v54 = *(v8);\n            if (*(v8) == 47)\n            {\n                v57 = v8;\n            }\n            else\n            {\n                v38 = v37[0];\n                v57 = v8;\n            }\n        }\n        else if (g_625661 == 0)\n        {\n            if (v22 == 3 && g_6256d2 != 0)\n            {\n                v7 = g_6256d1;\n                rsp<8> = stack_base + -784;\n                v39 = sub_404ae0();\n                v56 = v7;\n                if (v39 == 0)\n                {\n                    rsp<8> = stack_base + -784;\n                    v40 = sub_404ae0();\n                    v56 = v7;\n                    if (v40 == 0)\n                    {\n                        rsp<8> = stack_base + -784;\n                        v41 = sub_404ae0();\n                        v56 = v7;\n                    }\n                }\n            }\n            if (g_6256d2 == 0 || v22 != 3 || v41 == 0 && v40 == 0 && v39 == 0)\n            {\n                if (!(g_6256bc == 0))\n                {\n                    v42 = (char)(v22 == 0);\n                }\n                else if (g_625660 != 0)\n                {\n                    v42 = v34;\n                }\n            }\n        }\n        if (...)\n        {\n            v64 = 0;\n        }\n        if (...)\n        {\n            v64 = 0;\n            if (v22 == 5 && g_6256d4 != 3)\n            {\n                *((unsigned long long *)&v7) = v56;\n                if (g_6256d2 != 0)\n                {\n                    rsp<8> = stack_base + -784;\n                    v43 = sub_404ae0();\n                    v56 = v7;\n                    if (v43 == 0)\n                    {\n                        rsp<8> = stack_base + -784;\n                        v44 = sub_404ae0();\n                        v56 = v7;\n                        if (v44 == 0)\n                        {\n                            rsp<8> = stack_base + -784;\n                            v45 = sub_404ae0();\n                            v56 = v7;\n                            if (v45 == 0)\n                            {\n                                rsp<8> = stack_base + -784;\n                                v46 = sub_404ae0();\n                                v56 = v7;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (...)\n        {\n            v54 = *(v8);\n            if (*(v8) != 47)\n            {\n                v38 = v37[0];\n            }\n        }\n        if (...)\n        {\n            v21 = &v32->field_18;\n            v57 = v8;\n        }\n        if (...)\n        {\n            *((unsigned long long *)&v5) = v56;\n            *((unsigned long long *)&v6) = v54;\n            *((unsigned long long *)&v7) = v38;\n            v47 = strlen(v8) + strlen(v37) + 25 & -0x10;\n            rsp<8> = stack_base + -776 - v47;\n            v48 = stack_base + -776 - v47 + 15 & -0x10;\n            v57 = stack_base + -776 - v47 + 15 & -0x10;\n            if (v7 == 46)\n            {\n                v53 = stack_base + -776 - v47 + 15 & -0x10;\n            }\n            if (v37[1] != 0 || v7 != 46)\n            {\n                v37 = v21;\n                while (true)\n                {\n                    v53 = &v48[1];\n                    v49 = &v49->field_1;\n                    *((unsigned long long *)&v48) = v38;\n                    if (r10b<1> == 0)\n                    {\n                        break;\n                    }\n                    v38 = r10<8>;\n                    v52 = v49->field_1;\n                    v48 = v53;\n                }\n                if (v49 < v49 && v49[-1].field_1 != 47)\n                {\n                    *(v53) = 47;\n                    v53 = &v48[2];\n                }\n            }\n            if (v6 != 0)\n            {\n                v55 = v8;\n                do\n                {\n                    v55 = &v55[1];\n                    v53 = &v53[1];\n                    *((unsigned long long *)&v53[-1]) = v54;\n                    v54 = *(v55);\n                }\n                while ((char)v54 != 0);\n            }\n            *(v53) = 0;\n        }\n        if (...)\n        {\n            rsp<8> = rsp<8> - 8;\n            v4 = &g_408b67;\n            v58 = sub_40b070();\n            v32->field_10 = v58;\n            if (v58 == 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v3 = &g_408b85;\n                dcgettext(0x0, 0x41b0a5, 0x5);\n                rsp<8> = rsp<8> - 8;\n                v2 = &g_408b94;\n                sub_405580();\n            }\n        }\n        if (...)\n        {\n            v21 = (unsigned int)v32 + 24;\n        }\n        if (...)\n        {\n            rsp<8> = rsp<8> - 8;\n            v3 = &g_4086dd;\n            v61 = __xstat(0x1, (unsigned int)v57, v21);\n        }\n        if (...)\n        {\n            rsp<8> = rsp<8> - 8;\n            v18 = &g_408940;\n            v63 = __lxstat(0x1, (unsigned int)v57, v21);\n        }\n        if (...)\n        {\n            rsp<8> = rsp<8> - 8;\n            v17 = &g_408959;\n            dcgettext(0x0, 0x41b0bd, 0x5);\n            v64 = 0;\n            rsp<8> = rsp<8> - 8;\n            v16 = &g_40896b;\n            sub_405580();\n        }\n        if (...)\n        {\n            v32->field_b8 = 1;\n            if ((v23 == 5 || ((unsigned short)v32->field_30 & 0xf000) == 0x8000) && g_6256d2 != 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v17 = &g_408b07;\n                if (sub_404ae0() != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v16 = &g_408b14;\n                    v68 = v32->field_18;\n                    *(__errno_location()) = 95;\n                    if (false)\n                    {\n                        g_6246b8 = v68;\n                    }\n                    v32->field_c0 = 0;\n                }\n            }\n            if (g_6256f8 == 0 || g_625725 != 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v17 = &g_408723;\n                v69 = v32->field_18;\n                *((int *)*((long long *)&v7)) = 95;\n                if (false)\n                {\n                    g_6246b0 = v69;\n                }\n                v32->field_b0 = \"?\";\n            }\n            if (g_6256f8 != 0)\n            {\n                if (g_625725 != 0)\n                {\n                    v32->field_bc = 0;\n                }\n                v71 = v32->field_30 & 0xf000;\n            }\n            else if (g_6246b0 != g_6246a8)\n            {\n                *((int *)*((long long *)&v7)) = 0;\n                v7 = __errno_location();\n                rsp<8> = rsp<8> - 8;\n                v16 = &g_408dd6;\n                v72 = sub_40b900();\n                if (v72 > 0)\n                {\n                    v32->field_bc = 2;\n                    g_625724 = 1;\n                }\n                else\n                {\n                    if (((unsigned int)((unsigned long long)*(v7) - 22) & -17) == 0 || *(v7) == 95)\n                    {\n                        g_6246a8 = v32->field_18;\n                    }\n                    v32->field_bc = 0;\n                    if (v72 < 0)\n                    {\n                        v7 = v7;\n                        rsp<8> = rsp<8> - 8;\n                        v15 = &g_40915a;\n                        sub_412110();\n                        v75 = *(v7);\n                        rsp<8> = rsp<8> - 8;\n                        v14 = &g_409175;\n                        error(0x0, v75, \"%s\");\n                    }\n                }\n                v71 = v32->field_30 & 0xf000;\n            }\n            else\n            {\n                *((int *)*((long long *)&v7)) = 95;\n                tmp_11 = v32->field_30;\n                v32->field_bc = 0;\n                v71 = (unsigned int)tmp_11 & 0xf000;\n            }\n            if (((unsigned short)v32->field_30 & 0xf000) == 0xa000 && g_6256f8 != 0 || g_6246b0 == g_6246a8 && ((unsigned short)tmp_11 & 0xf000) == 0xa000 && g_6256f8 == 0 || g_6256f8 == 0 && ((unsigned short)v32->field_30 & 0xf000) == 0xa000 && g_6246b0 != g_6246a8)\n            {\n                if (g_6256f8 == 0 || g_6256bd != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v17 = &g_408e29;\n                    v76 = (unsigned long long)(unsigned int)sub_40abf0();\n                    v32->field_8 = v76;\n                    if (v76 == 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v16 = &g_409191;\n                        dcgettext(0x0, 0x41b0ce, 0x5);\n                        rsp<8> = rsp<8> - 8;\n                        v15 = &g_4091a0;\n                        sub_405580();\n                        v76 = v32->field_8;\n                    }\n                    if (v32->field_8 != 0 || v76 != 0)\n                    {\n                        if (*(v76) != 47)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v16 = &g_408e4b;\n                            if (v7 != 0)\n                            {\n                                *((int *)&v7) = sub_40b7b0();\n                                rsp<8> = rsp<8> - 8;\n                                v15 = &g_408e63;\n                                strlen(v76);\n                                rsp<8> = rsp<8> - 8;\n                                v14 = &g_408e74;\n                                v80 = (unsigned int)sub_412980();\n                                rsp<8> = rsp<8> - 8;\n                                v13 = &g_408e95;\n                                rsp<8> = rsp<8> - 8;\n                                v12 = &g_408ea0;\n                                strcpy((unsigned long long)stpncpy(v80, (unsigned int)v57), v76);\n                            }\n                        }\n                        if (*(v76) == 47 || v7 == 0)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v16 = &g_409050;\n                            v80 = (unsigned int)sub_412bb0();\n                        }\n                        if (v80 != 0)\n                        {\n                            if (v32->field_c4 == 0)\n                            {\n                                rsp<8> = rsp<8> - 8;\n                                v15 = &g_409259;\n                                if (sub_404e20() != 0)\n                                {\n                                    v32->field_c4 = -1;\n                                }\n                            }\n                            if (g_6256bd != 0 || g_6256d4 > 1)\n                            {\n                                rsp<8> = rsp<8> - 8;\n                                v14 = &g_408f0c;\n                                v83 = __xstat(0x1, v80, (unsigned int)&v9);\n                                if (v83 == 0)\n                                {\n                                    v32->field_b9 = 1;\n                                    if (v25 == 0 || g_6256f8 == 0 || ((unsigned short)v11 & 0xf000) != 0x4000)\n                                    {\n                                        v32->field_ac = v11;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v80 == 0 || v32->field_8 == 0 && v76 == 0)\n                    {\n                        v80 = 0;\n                    }\n                    rsp<8> = rsp<8> - 8;\n                    v13 = &g_408ed1;\n                    free(v80);\n                    v71 = v32->field_30 & 0xf000;\n                }\n                if ((g_6256bd == 0 || ((unsigned short)v32->field_30 & 0xf000) == 0xa000) && (((unsigned short)v32->field_30 & 0xf000) == 0xa000 || g_6256f8 != 0))\n                {\n                    v32->field_a8 = 6;\n                }\n            }\n            if (g_6256f8 == 0 && ((unsigned short)v32->field_30 & 0xf000) != 0xa000 || g_6256bd != 0 && ((unsigned short)v32->field_30 & 0xf000) != 0xa000 || ((unsigned short)v32->field_30 & 0xf000) != 0xa000 && g_6256f8 != 0 || g_6246b0 == g_6246a8 && g_6256f8 == 0 && ((unsigned short)tmp_11 & 0xf000) != 0xa000 || g_6256f8 == 0 && g_6246b0 != g_6246a8 && ((unsigned short)v32->field_30 & 0xf000) != 0xa000)\n            {\n                if (v71 != 0x4000)\n                {\n                    v32->field_a8 = 5;\n                }\n                else\n                {\n                    if (v25 != 0 && g_6256b5 == 0)\n                    {\n                        v32->field_a8 = 9;\n                    }\n                    if (v25 == 0 || g_6256b5 != 0)\n                    {\n                        v32->field_a8 = 3;\n                    }\n                }\n            }\n            v64 = v32->field_58;\n            if (g_6256f8 == 0 || g_6256ec != 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_4089a4;\n                sub_40d5d0();\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_4089ae;\n                if (g_62571c > g_62571c)\n                {\n                    g_62571c = sub_40eb70();\n                }\n            }\n            if (g_6256f8 != 0)\n            {\n            }\n            else\n            {\n                if (g_6245a9 != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408f88;\n                    if (g_625710 > g_625710)\n                    {\n                        g_625710 = sub_408410();\n                    }\n                }\n                if (g_6245a8 != 0)\n                {\n                    if (g_6256ed == 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        *((long long **)rsp<8>) = &g_409228;\n                        v87 = (unsigned int)sub_40e2f0();\n                        if (v87 != 0)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            *((long long **)rsp<8>) = &g_40923b;\n                            v88 = sub_40eb70();\n                            v88 = (v88 < 0? 0 : (unsigned int)rax<8>);\n                        }\n                    }\n                    if (v87 == 0 || g_6256ed != 0)\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        *((long long **)rsp<8>) = &g_408fed;\n                        __sprintf_chk((unsigned int)&v9, 0x1, 0x15, 0x41b064);\n                        v89 = &v9;\n                        do\n                        {\n                            tmp_12 = (unsigned int)*((int *)&v9);\n                            v89 = &v10;\n                            v90 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                        }\n                        while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                        v91 = (unsigned int)(((unsigned int)v90 & 32896) == 0? (unsigned int)(v90 >> 16) : (unsigned int)v90);\n                        v88 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v89 + 2) : v89) + -1 * ((v91 + v91 <= v91? 1 : 0) & 1) + -0x1 * &v9;\n                    }\n                    if (g_62570c < v88)\n                    {\n                        *((unsigned long *)&g_62570c) = v88;\n                    }\n                }\n                if (g_6256ee != 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408fa8;\n                    if (g_625708 > g_625708)\n                    {\n                        g_625708 = sub_408410();\n                    }\n                }\n            }\n            if (g_625725 != 0)\n            {\n                v93 = v32->field_b0;\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_408a06;\n                if (g_625714 > g_625714)\n                {\n                    g_625714 = strlen(v93);\n                }\n            }\n            if ((g_6256f8 == 0 || g_625725 != 0) && g_6256f8 == 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_408a30;\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_408a38;\n                if (g_625718 > g_625718)\n                {\n                    g_625718 = strlen((unsigned long long)(unsigned int)sub_40e520());\n                }\n                if (((unsigned short)v32->field_30 & 0xb000) == 0x2000)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408a8a;\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408a92;\n                    if (g_625704 > g_625704)\n                    {\n                        g_625704 = strlen((unsigned long long)(unsigned int)sub_40e520());\n                    }\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408abb;\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408ac3;\n                    v97 = strlen((unsigned long long)(unsigned int)sub_40e520());\n                    v99 = g_625700;\n                    if (g_625700 > g_625700)\n                    {\n                        g_625700 = v97;\n                        v99 = g_625700;\n                    }\n                    v97 = v99 + g_625704 + 2;\n                }\n                else\n                {\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408d72;\n                    sub_40d5d0();\n                    rsp<8> = rsp<8> - 8;\n                    *((long long **)rsp<8>) = &g_408d7c;\n                    v97 = sub_40eb70();\n                }\n                if (((unsigned short)v32->field_30 & 0xb000) == 0x2000 && (unsigned int)(v99 + g_625704 + 2) > g_6256fc || (unsigned int)v97 > g_6256fc && ((unsigned short)v32->field_30 & 0xb000) != 0x2000)\n                {\n                    *((unsigned long *)&g_6256fc) = v97;\n                }\n            }\n            if (g_6256bc != 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_408c08;\n                rsp<8> = rsp<8> - 8;\n                *((long long **)rsp<8>) = &g_408c10;\n                if (g_625720 > g_625720)\n                {\n                    g_625720 = strlen((unsigned long long)(unsigned int)sub_40e520());\n                }\n            }\n        }\n        if (...)\n        {\n            rsp<8> = rsp<8> - 8;\n            v1 = &g_4090df;\n            dcgettext(0x0, 0x41b0bd, 0x5);\n            v64 = 0;\n            rsp<8> = rsp<8> - 8;\n            v0 = &g_4090f2;\n            sub_405580();\n        }\n        if (...)\n        {\n            rsp<8> = rsp<8> - 8;\n            v15 = &g_4087d4;\n            g_625770 = g_625770 + 1;\n            v32->field_0 = (unsigned int)sub_412bb0();\n        }\n        v101 = v64;\n        return v101;\n    }\n}\n"
        },
        {
            "funcName": "sub_411c40",
            "funcStartAddr": "0x411c40",
            "funcEndAddr": "0x411c73",
            "decompiledFuncCode": "extern int512_t g_6258e0;\n\nint sub_411c40()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6258e0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6258e0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40c2b0",
            "funcStartAddr": "0x40c2b0",
            "funcEndAddr": "0x40c2d6",
            "decompiledFuncCode": "int sub_40c2b0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[3];  // rbx\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v5 = v2[2];\n    v6 = v2[6]();\n    if (v2[2] <= v6)\n    {\n        abort(); /* do not return */\n    }\n    return v6 * 16 + *(v2);\n}\n"
        },
        {
            "funcName": "sub_410670",
            "funcStartAddr": "0x410670",
            "funcEndAddr": "0x410709",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_6257c0;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_410670()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_6257c0 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4186f0",
            "funcStartAddr": "0x4186f0",
            "funcEndAddr": "0x41870c",
            "decompiledFuncCode": "int sub_4186f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    tzset();\n}\n"
        },
        {
            "funcName": "obstack_allocated_p",
            "funcStartAddr": "0x417260",
            "funcEndAddr": "0x41728d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_allocated_p()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rax\n    unsigned long v3;  // rsi\n\n    v2 = v1->field_8;\n    if (v1->field_8 != 0)\n    {\n        while (true)\n        {\n            if (*(v2) >= v3 && v3 > v2)\n            {\n                return 1;\n            }\n            if (*(v2) < v3 || v3 <= v2)\n            {\n                v2 = v2[1];\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_412ce0",
            "funcStartAddr": "0x412ce0",
            "funcEndAddr": "0x412d01",
            "decompiledFuncCode": "int sub_412ce0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_412c10();\n}\n"
        },
        {
            "funcName": "sub_40b700",
            "funcStartAddr": "0x40b700",
            "funcEndAddr": "0x40b708",
            "decompiledFuncCode": "extern char g_625790;\n\nint sub_40b700()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_625790 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_412240",
            "funcStartAddr": "0x412240",
            "funcEndAddr": "0x41224a",
            "decompiledFuncCode": "int sub_412240()\n{\n}\n"
        },
        {
            "funcName": "sub_405100",
            "funcStartAddr": "0x405100",
            "funcEndAddr": "0x405108",
            "decompiledFuncCode": "int sub_405100()\n{\n}\n"
        },
        {
            "funcName": "obstack_memory_used",
            "funcStartAddr": "0x417310",
            "funcEndAddr": "0x417334",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint _obstack_memory_used()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2[2];  // rdx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n\n    v2 = v1->field_8;\n    v3 = 0;\n    if (v1->field_8 != 0)\n    {\n        do\n        {\n            v4 = (unsigned long long [2])(*(v2) + -0x1 * v2);\n            v2 = v2[1];\n            v3 += v4;\n        }\n        while (v2 != 0);\n        return v3;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4120d0",
            "funcStartAddr": "0x4120d0",
            "funcEndAddr": "0x4120dd",
            "decompiledFuncCode": "int sub_4120d0()\n{\n}\n"
        },
        {
            "funcName": "sub_40edd0",
            "funcStartAddr": "0x40edd0",
            "funcEndAddr": "0x40eddf",
            "decompiledFuncCode": "int sub_40edd0()\n{\n}\n"
        },
        {
            "funcName": "sub_412250",
            "funcStartAddr": "0x412250",
            "funcEndAddr": "0x412262",
            "decompiledFuncCode": "int sub_412250()\n{\n}\n"
        },
        {
            "funcName": "sub_418798",
            "funcStartAddr": "0x418798",
            "funcEndAddr": "0x4187b8",
            "decompiledFuncCode": "extern unsigned long long g_623e30;\n\nint sub_418798()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_623e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4178c0",
            "funcStartAddr": "0x4178c0",
            "funcEndAddr": "0x417ce8",
            "decompiledFuncCode": "int sub_4178c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409fc0",
            "funcStartAddr": "0x409fc0",
            "funcEndAddr": "0x40a020",
            "decompiledFuncCode": "int sub_409fc0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = strrchr();\n    strrchr();\n    v2 = sub_4050d0();\n    if ((unsigned int)v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_40afb0",
            "funcStartAddr": "0x40afb0",
            "funcEndAddr": "0x40b01d",
            "decompiledFuncCode": "int sub_40afb0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_40acf0();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_40ae10();\n        sub_40ae90();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40c810",
            "funcStartAddr": "0x40c810",
            "funcEndAddr": "0x40c85b",
            "decompiledFuncCode": "int sub_40c810()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rsi\n    unsigned long long *v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8[2];  // rbx\n    unsigned long long v9;  // rsi\n\n    v2 = v1;\n    v9 = *(v6);\n    if (*(v6) != 0)\n    {\n        v6 = sub_40c2b0();\n        while (true)\n        {\n            if (v9 != v1)\n            {\n                v1 = v3;\n                v7 = *((long long *)(r12<8> + 56))();\n                if (v7 == 0)\n                {\n                    v8 = v8[1];\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                    v9 = *(v8);\n                }\n            }\n            if (v9 == v1 || v7 != 0)\n            {\n                return stack_base + 0;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b870",
            "funcStartAddr": "0x40b870",
            "funcEndAddr": "0x40b8c2",
            "decompiledFuncCode": "int sub_40b870()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40ae10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40ae7c",
            "decompiledFuncCode": "extern unsigned int g_41d72d;\nextern unsigned int g_41d748;\n\nint sub_40ae10()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x41d72d, 0x5);\n    }\n    dcgettext(0x0, 0x41d748, 0x5);\n    sub_412270();\n    sub_411f60();\n}\n"
        },
        {
            "funcName": "sub_414eb0",
            "funcStartAddr": "0x414eb0",
            "funcEndAddr": "0x4158d1",
            "decompiledFuncCode": "int sub_414eb0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4047f8",
            "funcStartAddr": "0x4047f8",
            "funcEndAddr": "0x404834",
            "decompiledFuncCode": "int sub_4047f8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4123db",
            "funcStartAddr": "0x4123db",
            "funcEndAddr": "0x4123e0",
            "decompiledFuncCode": "int sub_4123db()\n{\n}\n"
        },
        {
            "funcName": "sub_4181f0",
            "funcStartAddr": "0x4181f0",
            "funcEndAddr": "0x4182a2",
            "decompiledFuncCode": "int sub_4181f0()\n{\n    char|unsigned long|unsigned long long v0;  // [bp-0x30]\n    unsigned long long *v2;  // rdx\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rsi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rsi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n    unsigned long long *v13;  // rsi\n    unsigned long long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rdi\n\n    v5 = v4;\n    v7 = v6;\n    v8 = v2;\n    v9 = &v0;\n    v0 = *(v2);\n    v15 = v5();\n    if (v15 == 0)\n    {\n        v16 = *(v7);\n        v10 = 0;\n        if (*(v7) != 0)\n        {\n            while (true)\n            {\n                v11 = (v16 >> 1) + (v10 >> 1);\n                v12 = ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1);\n                if (v16 != v12 && v10 != ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1))\n                {\n                    break;\n                }\n                v0 = v12;\n                v13 = v2;\n                v14 = &v0;\n                v15 = r12<8>();\n                if (v15 == 0)\n                {\n                    v16 = v12;\n                    v12 = v10;\n                }\n                v10 = v12;\n            }\n            if (v15 == 0 && v10 != 0)\n            {\n                v0 = v10;\n                v17 = &v0;\n                return (long long)(stack_base)[-24]();\n            }\n        }\n    }\n    if (v10 == 0 || *(v7) == 0 || v15 != 0 || v15 != 0)\n    {\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b710",
            "funcStartAddr": "0x40b710",
            "funcEndAddr": "0x40b7ae",
            "decompiledFuncCode": "extern unsigned int g_41d787;\nextern unsigned int g_6245c0;\nextern char g_625790;\nextern unsigned long long g_625798;\n\nint sub_40b710()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4178e0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_625790 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x41d787, 0x5);\n            if (g_625798 != 0)\n            {\n                sub_4120e0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_625790 != 0)\n    {\n        v3 = sub_4178e0();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_625790 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6245c0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_408280",
            "funcStartAddr": "0x408280",
            "funcEndAddr": "0x4082a7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nint sub_408280()\n{\n    struct_0 *v1;  // rsi\n    struct_0 *v2;  // rdi\n\n    if (!(v1->field_48 <= v2->field_48))\n    {\n        return -18446744069414584321;\n    }\n    else if (v1->field_48 != v2->field_48)\n    {\n        return (unsigned long long)(char)(v1->field_48 < v2->field_48);\n    }\n}\n"
        },
        {
            "funcName": "sub_408200",
            "funcStartAddr": "0x408200",
            "funcEndAddr": "0x408263",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[88];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_408200()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if ((v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9) && v6->field_48 <= v1->field_48 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9) && v6->field_48 != v1->field_48)\n    {\n        return (unsigned long long)(char)(v6->field_48 < v1->field_48);\n    }\n    if (v5 == 0 && (v6->field_a8 == 3 || v6->field_a8 == 9))\n    {\n        return 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v6->field_48 > v1->field_48) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v6->field_48 > v1->field_48) && (v6->field_a8 != 9 || v6->field_48 > v1->field_48))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a470",
            "funcStartAddr": "0x40a470",
            "funcEndAddr": "0x40a51e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nextern char g_41b08a;\n\nint sub_40a470()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned int v5;  // eax\n    char v6;  // al\n    unsigned int v7;  // ecx\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rsi\n    unsigned long long v10;  // r12\n    unsigned long long v11;  // rbx\n    char *v12;  // rax\n    char *v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n\n    v5 = v4->field_a8;\n    v6 = v4->field_a8 == 9;\n    v8 = v7 | rax<4>;\n    if (v9->field_a8 != 3 && v9->field_a8 != 9 && v8 != 0)\n    {\n        return -18446744069414584321;\n    }\n    if (v9->field_a8 == 3 || v9->field_a8 == 9 || v8 == 0)\n    {\n        if (v8 == 0 && (v9->field_a8 == 3 || v9->field_a8 == 9))\n        {\n            return 1;\n        }\n        if (v8 != 0 || v9->field_a8 != 3 && v9->field_a8 != 9)\n        {\n            v2 = v10;\n            v1 = stack_base + 0;\n            v0 = v11;\n            v13 = (unsigned long long)strrchr();\n            v12 = strrchr();\n            if (v12 != 0)\n            {\n                v13 = (v13 == 0? &g_41b08a : v13);\n            }\n            else\n            {\n                v12 = &g_41b08a;\n            }\n            if (v13 != 0 || v12 != 0)\n            {\n                v14 = strcmp(v13, v12);\n                if ((unsigned int)v14 != 0)\n                {\n                    v15 = v0;\n                    v16 = v2;\n                    return v14;\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_412b30",
            "funcStartAddr": "0x412b30",
            "funcEndAddr": "0x412b47",
            "decompiledFuncCode": "int sub_412b30()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_412980();\n}\n"
        },
        {
            "funcName": "sub_40a530",
            "funcStartAddr": "0x40a530",
            "funcEndAddr": "0x40abe0",
            "decompiledFuncCode": "extern unsigned int g_41b196;\nextern unsigned int g_41b650;\nextern unsigned int g_41b678;\nextern unsigned int g_41b6a0;\nextern unsigned int g_41b730;\nextern unsigned int g_41b780;\nextern unsigned int g_41b890;\nextern unsigned int g_41b930;\nextern unsigned int g_41baa0;\nextern unsigned int g_41bc10;\nextern unsigned int g_41bdb8;\nextern unsigned int g_41bdf8;\nextern unsigned int g_41bef0;\nextern unsigned int g_41bf40;\nextern unsigned int g_41bfd8;\nextern unsigned int g_41c180;\nextern unsigned int g_41c218;\nextern unsigned int g_41c380;\nextern unsigned int g_41c418;\nextern unsigned int g_41c580;\nextern unsigned int g_41c6b0;\nextern unsigned int g_41c900;\nextern unsigned int g_41c9c8;\nextern unsigned int g_41cbd0;\nextern unsigned int g_41cc20;\nextern unsigned int g_41ccb0;\nextern unsigned int g_41ce28;\nextern unsigned int g_41cf98;\nextern unsigned int g_41cfc8;\nextern unsigned int g_41d000;\nextern unsigned int g_41d0a0;\nextern unsigned int g_41d218;\nextern unsigned int g_41d338;\nextern unsigned int g_41d3f8;\nextern unsigned int g_41d440;\nextern unsigned int g_41d460;\nextern unsigned int g_6245ac;\nextern unsigned long long g_6257c0;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_40a530()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    char *v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    char *v51;  // rbp\n    char *v52;  // rsi\n    unsigned long long v53[2];  // rbx\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rbx\n    char *v58;  // rax\n    char *v59;  // rax\n    unsigned long long v60;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41b650, 0x5), g_6257c0);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41b678, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b6a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b730, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b780, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b890, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b930, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41baa0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bc10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bdb8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bdf8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bef0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bf40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bfd8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c180, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c218, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c380, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c418, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c580, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c6b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c900, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c9c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41cbd0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41cc20, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41ccb0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41ce28, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41cf98, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41cfc8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d000, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d0a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d218, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d338, 0x5), stdout);\n        if (g_6245ac != 1)\n        {\n            v51 = (g_6245ac != 2? \"v\" : \"dir\");\n        }\n        else\n        {\n            v51 = \"ls\";\n        }\n        v0 = \"[\";\n        v52 = \"[\";\n        v53 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreuti\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        do\n        {\n            v54 = strcmp(v51, v52);\n            if (v54 == 0)\n            {\n                break;\n            }\n            v53 = &v2;\n            v52 = v2;\n        }\n        while (v2 != 0);\n        v55 = v53[1];\n        if (v55 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41b196, 0x5));\n            v59 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41b196, 0x5));\n            v58 = setlocale(0x5, 0x0);\n            if (v58 != 0)\n            {\n                v60 = strncmp(v58, \"en_\", 0x3);\n            }\n            if (v58 == 0 || v60 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41d440, 0x5));\n            }\n        }\n        if ((v55 == 0 || v59 != 0) && (v55 == 0 || strncmp(v59, \"en_\", 0x3) != 0) && (v58 != 0 || v55 != 0) && (v55 != 0 || v60 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41d3f8, 0x5));\n        }\n        if (v55 != 0 || v58 != 0 && v60 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41d440, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41d460, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40e160",
            "funcStartAddr": "0x40e160",
            "funcEndAddr": "0x40e1e6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    char field_10;\n} struct_0;\n\nextern char g_41b08a;\nextern struct_0 *g_6257b8;\n\nint sub_40e160()\n{\n    struct_0 *v1;  // rbx\n    unsigned int v2;  // edi\n    unsigned long long *v4;  // rax\n    unsigned long long v5;  // rdi\n    char *v6;  // r12\n    struct_0 *v8;  // rax\n    unsigned long long v9;  // rax\n\n    v1 = g_6257b8;\n    if (g_6257b8 != 0 && v2 != g_6257b8->field_0)\n    {\n        do\n        {\n            v1 = v1->field_8;\n        }\n        while (v1->field_0 != v2 && v1 != 0);\n        if (true)\n        {\n            v6 = &g_41b08a;\n            v4 = getpwuid();\n        }\n        else if (v1 != 0)\n        {\n            v9 = 0;\n        }\n    }\n    if (g_6257b8 == 0 || v4 != 0 && v2 != g_6257b8->field_0)\n    {\n        v6 = &g_41b08a;\n        v4 = getpwuid();\n        if (v4 != 0)\n        {\n            v6 = *(v4);\n            v5 = strlen(*(v4)) + 24 & -8;\n        }\n        v1->field_0 = v2;\n        v1 = (unsigned long long)(unsigned int)sub_412980();\n        strcpy(&v1->field_10, v6);\n        v8 = g_6257b8;\n        g_6257b8 = v1;\n        v1->field_8 = v8;\n    }\n    v9 = 0;\n    if (v1->field_10 != 0)\n    {\n        v9 = &v1->field_10;\n    }\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_412050",
            "funcStartAddr": "0x412050",
            "funcEndAddr": "0x41205f",
            "decompiledFuncCode": "int sub_412050()\n{\n}\n"
        },
        {
            "funcName": "sub_417f10",
            "funcStartAddr": "0x417f10",
            "funcEndAddr": "0x417f88",
            "decompiledFuncCode": "int sub_417f10()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_417f90() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4129a0",
            "funcStartAddr": "0x4129a0",
            "funcEndAddr": "0x4129c1",
            "decompiledFuncCode": "int sub_4129a0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_412bd0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40d220",
            "funcStartAddr": "0x40d220",
            "funcEndAddr": "0x40d254",
            "decompiledFuncCode": "int sub_40d220()\n{\n    unsigned long long v0;  // [bp-0x10]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v3 = v2;\n    v4 = sub_40cfa0();\n    if (v4 != -1)\n    {\n        if (v4 == 0)\n        {\n            v3 = v0;\n        }\n        v5 = v3;\n        return v5;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405a30",
            "funcStartAddr": "0x405a30",
            "funcEndAddr": "0x405ade",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nextern char g_41b08a;\n\nint sub_405a30()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned int v5;  // eax\n    char v6;  // al\n    unsigned int v7;  // ecx\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rsi\n    unsigned long long v10;  // r12\n    unsigned long long v11;  // rbx\n    char *v12;  // rax\n    char *v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n\n    v5 = v4->field_a8;\n    v6 = v4->field_a8 == 9;\n    v8 = v7 | rax<4>;\n    if (v9->field_a8 != 3 && v9->field_a8 != 9 && v8 != 0)\n    {\n        return -18446744069414584321;\n    }\n    if (v9->field_a8 == 3 || v9->field_a8 == 9 || v8 == 0)\n    {\n        if (v8 == 0 && (v9->field_a8 == 3 || v9->field_a8 == 9))\n        {\n            return 1;\n        }\n        if (v8 != 0 || v9->field_a8 != 3 && v9->field_a8 != 9)\n        {\n            v2 = v10;\n            v1 = stack_base + 0;\n            v0 = v11;\n            v13 = (unsigned long long)strrchr();\n            v12 = strrchr();\n            if (v12 != 0)\n            {\n                v13 = (v13 == 0? &g_41b08a : v13);\n            }\n            else\n            {\n                v12 = &g_41b08a;\n            }\n            if (v13 != 0 || v12 != 0)\n            {\n                v14 = strcmp(v13, v12);\n                if ((unsigned int)v14 != 0)\n                {\n                    v15 = v0;\n                    v16 = v2;\n                    return v14;\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4176f0",
            "funcStartAddr": "0x4176f0",
            "funcEndAddr": "0x417786",
            "decompiledFuncCode": "int sub_4176f0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // r13\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = (unsigned int)sub_417620();\n        if (v2 != 0)\n        {\n            v5 = localtime_r(v3, v4);\n            if (v5 != 0)\n            {\n                v6 = sub_4174a0();\n                if (v6 != 0)\n                {\n                    if (v2 != 1)\n                    {\n                        v8 = sub_4173c0();\n                    }\n                    if (v2 == 1 || v8 != 0)\n                    {\n                        return v4;\n                    }\n                }\n            }\n            if ((v6 == 0 || v5 == 0) && v2 != 1)\n            {\n                sub_4173c0();\n            }\n        }\n        if (v2 == 0 || v6 == 0 || v5 == 0 || v8 == 0 && v2 != 1)\n        {\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_408040",
            "funcStartAddr": "0x408040",
            "funcEndAddr": "0x4080a3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[88];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_408040()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if ((v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9) && v6->field_48 <= v1->field_48 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9) && v6->field_48 != v1->field_48)\n    {\n        return (unsigned long long)(char)(v6->field_48 < v1->field_48);\n    }\n    if (v5 == 0 && (v6->field_a8 == 3 || v6->field_a8 == 9))\n    {\n        return 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v6->field_48 > v1->field_48) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v6->field_48 > v1->field_48) && (v6->field_a8 != 9 || v6->field_48 > v1->field_48))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a150",
            "funcStartAddr": "0x40a150",
            "funcEndAddr": "0x40a1f1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_40a150()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned int v5;  // eax\n    char v6;  // al\n    unsigned int v7;  // ecx\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rsi\n    unsigned long long v10;  // r12\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // r12\n\n    v5 = v4->field_a8;\n    v6 = v4->field_a8 == 9;\n    v8 = v7 | rax<4>;\n    if (v9->field_a8 != 3 && v9->field_a8 != 9 && v8 != 0)\n    {\n        return -18446744069414584321;\n    }\n    if (v9->field_a8 == 3 || v9->field_a8 == 9 || v8 == 0)\n    {\n        if (v8 == 0 && (v9->field_a8 == 3 || v9->field_a8 == 9))\n        {\n            return 1;\n        }\n        if (v8 != 0 || v9->field_a8 != 3 && v9->field_a8 != 9)\n        {\n            v2 = v10;\n            v1 = stack_base + 0;\n            v0 = v11;\n            v12 = strrchr();\n            strrchr();\n            v13 = sub_4050d0();\n            if ((unsigned int)v13 != 0)\n            {\n                v14 = v0;\n                v15 = v2;\n                return v13;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_412110",
            "funcStartAddr": "0x412110",
            "funcEndAddr": "0x412183",
            "decompiledFuncCode": "int sub_412110()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_411a40();\n}\n"
        },
        {
            "funcName": "sub_4179a0",
            "funcStartAddr": "0x4179a0",
            "funcEndAddr": "0x417ef4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_41b08a;\nextern char g_625960[2];\n\nint sub_4179a0()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_625960;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_41b08a : (unsigned long long)nl_langinfo(0xe));\n    if (g_625960 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_41b08a;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v63 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v63;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_41b08a;\n                                        v10 = (tmp_10 == 0? &g_41b08a : tmp_10);\n                                        free(NULL);\n                                        sub_417f10();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v62 = *(v61);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)(v62 != -1);\n                                    }\n                                }\n                                while (v62 != 10 && v63 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_41b08a : tmp_10);\n                            sub_417f10();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && v62 == -1)\n                    {\n                        v9 = &g_41b08a;\n                    }\n                    else if (v37 == 0 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 || ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && v62 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_41b08a;\n            free(v17);\n        }\n        *((char *[2])&g_625960[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_41b08a : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_408300",
            "funcStartAddr": "0x408300",
            "funcEndAddr": "0x408374",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned int field_88;\n    char padding_8c[28];\n    unsigned int field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[128];\n    unsigned long long field_80;\n    unsigned long long field_88;\n    char padding_90[24];\n    unsigned int field_a8;\n} struct_1;\n\nint sub_408300()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_1 *v6;  // rsi\n    unsigned long long v7;  // rax\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9)\n    {\n        if (v1->field_80 <= v6->field_80 && (v6->field_a8 != 3 || v5 != 0) && (v5 != 0 || v6->field_a8 != 9))\n        {\n            if (v1->field_80 >= v6->field_80)\n            {\n                v7 = (unsigned int)v6->field_88 - v1->field_88;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v5 == 0 || v1->field_80 <= v6->field_80) && (v5 == 0 || v1->field_80 >= v6->field_80) && (v5 == 0 || (unsigned int)v6->field_88 != v1->field_88) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_80 <= v6->field_80) && (v6->field_a8 == 3 || v6->field_a8 == 9 || v1->field_80 >= v6->field_80) && (v6->field_a8 == 3 || v6->field_a8 == 9 || (unsigned int)v6->field_88 != v1->field_88))\n        {\n            return v7;\n        }\n    }\n    if (v5 == 0)\n    {\n        v7 = 1;\n    }\n    if ((v6->field_a8 != 3 || v5 != 0) && (v6->field_a8 != 3 || v1->field_80 > v6->field_80) && (v5 != 0 || v6->field_a8 != 9) && (v5 != 0 || v1->field_80 > v6->field_80) && (v6->field_a8 != 9 || v1->field_80 > v6->field_80))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_412220",
            "funcStartAddr": "0x412220",
            "funcEndAddr": "0x412233",
            "decompiledFuncCode": "int sub_412220()\n{\n}\n"
        },
        {
            "funcName": "sub_407630",
            "funcStartAddr": "0x407630",
            "funcEndAddr": "0x40768a",
            "decompiledFuncCode": "int sub_407630()\n{\n    char v0;  // [bp-0x2029]\n    unsigned long v1;  // [bp-0x2028]\n    unsigned long v2;  // [bp-0x2020]\n    char v3;  // [bp-0x2018]\n    unsigned long v6;  // rdi\n\n    v1 = &v3;\n    sub_405ea0();\n    if (v1 != &v3 && &v3 != v6)\n    {\n        free(&v3);\n    }\n    return v0 + v2;\n}\n"
        },
        {
            "funcName": "sub_405ea0",
            "funcStartAddr": "0x405ea0",
            "funcEndAddr": "0x406293",
            "decompiledFuncCode": "extern char g_625698;\nextern char g_625768;\nextern char g_625769;\n\nint sub_405ea0()\n{\n    unsigned int|unsigned long|unsigned long long v0;  // [bp-0x70]\n    unsigned int|char|unsigned long v1;  // [bp-0x60]\n    char *v2;  // [bp-0x50]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long long *v5;  // rdi\n    char *v6;  // r13\n    unsigned int v7;  // ecx\n    unsigned long v8;  // r9\n    char v10;  // al\n    void *v11;  // rsi\n    unsigned long long v12;  // r9\n    unsigned int|unsigned long v13;  // r10\n    void *v14;  // rsi\n    unsigned long v15;  // r12\n    unsigned long long v16;  // r14\n    unsigned long long *v20;  // r8\n    unsigned long long v23;  // rbp\n    unsigned long long v24;  // rbp\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r12\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rcx\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rdx\n    unsigned long long v35;  // r15\n    unsigned long|unsigned long long v36;  // rbx\n    unsigned long long v37;  // r14\n    char *v39;  // rax\n    char *v40;  // rdx\n    unsigned long long v41;  // rax\n    unsigned int v42;  // eax\n    char v43;  // al\n\n    v6 = *(v5);\n    v0 = v7;\n    v2 = v8;\n    v10 = sub_411c20() <= 2 & g_625698;\n    v1 = rax<4> <= 2 & g_625698;\n    if ((rax<4> <= 2 & g_625698) == 0)\n    {\n        v13 = 0;\n        if ((int)v0 == 0)\n        {\n            v6 = v11;\n            v12 = strlen(v11);\n            if (v20 != 0)\n            {\n                v0 = v12;\n                v12 = v0;\n                if ((unsigned long long)__ctype_get_mb_cur_max() <= 1)\n                {\n                    v24 = &v6[v12];\n                    if (&v6[v12] > v6)\n                    {\n                        v0 = v12;\n                        v36 = 0;\n                        v39 = v6;\n                        do\n                        {\n                            v36 = v36 - -1 - (char)((*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)*(v39) * 2)) & 0x4000) < 1);\n                            v39 = &v39[1];\n                        }\n                        while (v24 != v39);\n                    }\n                    else\n                    {\n                        v36 = 0;\n                    }\n                }\n                else\n                {\n                    v36 = (unsigned int)sub_40e9b0();\n                }\n                if (g_625768 == 0)\n                {\n                    *(v2) = 0;\n                }\n            }\n            else\n            {\n                if (g_625768 == 0)\n                {\n                    *(v2) = 0;\n                }\n            }\n        }\n    }\n    else if ((int)v0 == 0)\n    {\n        v36 = strlen(v11);\n        v15 = v36 + 1;\n        if (v36 > 8191)\n        {\n            v6 = (unsigned long long)(unsigned int)sub_412980();\n        }\n        memcpy(v6, v14, v15);\n        v1 = 0;\n    }\n    else\n    {\n        v13 = 1;\n    }\n    if ((int)v0 != 0)\n    {\n        *((unsigned long *)&v0) = v13;\n        v12 = (unsigned int)sub_411cd0();\n        if (v12 > 8191)\n        {\n            v16 = v12 + 1;\n            v1 = v0;\n            v0 = v12;\n            v6 = (unsigned long long)(unsigned int)sub_412980();\n            sub_411cd0();\n            v13 = v1;\n            v12 = v0;\n        }\n        v1 = 1;\n        if (*((char *)v11) == *(v6))\n        {\n            v1 = v12;\n            *((unsigned long *)&v0) = v13;\n            v1 = v1 != strlen(v6);\n        }\n        v36 = v12;\n    }\n    if ((rax<4> <= 2 & g_625698) != 0 || (int)v0 != 0)\n    {\n        v23 = &v6[v36];\n        if ((unsigned long long)__ctype_get_mb_cur_max() <= 1)\n        {\n            if (v16 > v6)\n            {\n                v40 = v6;\n                do\n                {\n                    if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)*(v40) << 1) + 1)) & 64) == 0)\n                    {\n                        *(v40) = 63;\n                    }\n                    v40 = &v40[1];\n                }\n                while (v40 != v16);\n            }\n            v12 = v36;\n        }\n        else if (v16 > v6)\n        {\n            v35 = v6;\n            v37 = v6;\n            v36 = 0;\n            do\n            {\n                v26 = (char)*((char *)v37);\n                if (*((char *)v37) <= 63 && (v26 - 32 & 255) <= 3 || *((char *)v37) <= 63 && v26 >= 37 || (v26 - 97 & 255) <= 29 && *((char *)v37) > 63 && v26 >= 65 || v26 <= 95 && *((char *)v37) > 63 && v26 >= 65)\n                {\n                    *((unsigned long long *)v35) = v26;\n                    v37 += 1;\n                    v36 = 1;\n                    v35 += 1;\n                }\n                else\n                {\n                    v3 = 0;\n                    while (true)\n                    {\n                        v27 = v35 + 1;\n                        if (v0 == -1)\n                        {\n                            *((char *)v35) = 63;\n                            v37 += 1;\n                            v36 += 1;\n                        }\n                        else if (v0 != -2)\n                        {\n                            *((int *)&v0) = sub_416e80();\n                            if (v0 != 0)\n                            {\n                                v29 = wcwidth();\n                                v31 = v0;\n                                v30 = v37 + v0;\n                                if ((unsigned int)v29 >= 0)\n                                {\n                                    v33 = 0;\n                                    do\n                                    {\n                                        *((char *)(v35 + v33)) = *((char *)(v37 + v33));\n                                        v33 += 1;\n                                    }\n                                    while (v0 != v33);\n                                    v37 += v31;\n                                    v35 += v31;\n                                }\n                            }\n                            else\n                            {\n                                v29 = wcwidth();\n                                v30 = v37 + 1;\n                                if ((unsigned int)v29 >= 0)\n                                {\n                                    v32 = (char)*((char *)v37);\n                                    v37 = v30;\n                                    *((unsigned long long *)v35) = v32;\n                                }\n                            }\n                            if (v0 == 0 && (unsigned int)v29 < 0 || (unsigned int)v29 < 0 && v0 != 0)\n                            {\n                                *((char *)v35) = 63;\n                                v36 += 1;\n                                v35 = v27;\n                                v37 = v30;\n                            }\n                            if (v0 == 0 && (unsigned int)v29 >= 0 || v0 != 0 && (unsigned int)v29 >= 0)\n                            {\n                                v36 += v29;\n                            }\n                            if (mbsinit((unsigned int)&v3) != 0)\n                            {\n                                break;\n                            }\n                        }\n                        if (v0 == -2)\n                        {\n                            *((char *)v35) = 63;\n                            v36 += 1;\n                            v16 = v23;\n                        }\n                    }\n                }\n            }\n            while (v37 > v37);\n            v12 = v35 + -0x1 * v6;\n        }\n        else\n        {\n            v12 = 0;\n            v36 = 0;\n        }\n        v41 = g_625768;\n    }\n    if (g_625768 != 0)\n    {\n        v42 = (unsigned int)g_625769 ^ 1;\n        v43 = (char)((unsigned int)g_625769 ^ 1) | v1;\n        v41 = (unsigned int)(rax<4> ^ 1);\n    }\n    if (g_625768 != 0)\n    {\n        *((unsigned long long *)&v2) = v41;\n    }\n    if (v20 != 0)\n    {\n        *(v20) = v36;\n    }\n    *(v5) = v6;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_40d480",
            "funcStartAddr": "0x40d480",
            "funcEndAddr": "0x40d4b4",
            "decompiledFuncCode": "int sub_40d480()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long long v7[3];  // rdi\n    unsigned long long v8[3];  // rsi\n    unsigned long v9;  // r15\n    unsigned long v10;  // r14\n    unsigned long v11;  // r13\n    unsigned long v12;  // r12\n    unsigned long v13;  // rbx\n\n    if (v7[1] == v8[1] && v7[2] == v8[2])\n    {\n        v5 = v9;\n        v4 = v10;\n        v3 = v11;\n        v2 = v12;\n        v1 = stack_base + 0;\n        v0 = v13;\n    }\n    if (v7[1] != v8[1] || v7[2] != v8[2])\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_416e00",
            "funcStartAddr": "0x416e00",
            "funcEndAddr": "0x416e13",
            "decompiledFuncCode": "int sub_416e00()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_416d80();\n}\n"
        },
        {
            "funcName": "sub_40d4ca",
            "funcStartAddr": "0x40d4ca",
            "funcEndAddr": "0x40d4e3",
            "decompiledFuncCode": "int sub_40d4ca()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v3;  // rdi\n    unsigned long long v5;  // rax\n    char v6;  // al\n\n    v5 = strcmp(*(v3), *(v1));\n    v6 = (unsigned int)v5 == 0;\n    return rax<8>;\n}\n"
        },
        {
            "funcName": "sub_40c190",
            "funcStartAddr": "0x40c190",
            "funcEndAddr": "0x40c1e6",
            "decompiledFuncCode": "int sub_40c190()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_412290",
            "funcStartAddr": "0x412290",
            "funcEndAddr": "0x4122a6",
            "decompiledFuncCode": "int sub_412290()\n{\n}\n"
        },
        {
            "funcName": "sub_412d40",
            "funcStartAddr": "0x412d40",
            "funcEndAddr": "0x412de7",
            "decompiledFuncCode": "int sub_412d40()\n{\n    unsigned long long v0;  // [bp-0x158]\n    unsigned long long v1;  // [bp-0x30]\n    unsigned int *v3;  // r12\n    void *v6;  // rax\n    unsigned long long v7;  // rbp\n    unsigned long long v8;  // rax\n\n    v1 = 34;\n    v3 = __errno_location();\n    while (true)\n    {\n        *((char *)(rax<8> + v1 - 2)) = 0;\n        *(v3) = 0;\n        v6 = gethostname(rax<8>, v1 - 1);\n        if (v6 == 0)\n        {\n            rax<8> = sub_412ae0();\n            return v8;\n        }\n        v7 = *(v3);\n        if (*(v3) > 36)\n        {\n            break;\n        }\n        v0 = 68723675137;\n    }\n    free(rax<8>);\n    *(v3) = v7;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4056f0",
            "funcStartAddr": "0x4056f0",
            "funcEndAddr": "0x405740",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[168];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_4056f0()\n{\n    struct_0 *v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n    unsigned int v4;  // ecx\n    unsigned long long v5;  // rcx\n    struct_0 *v6;  // rsi\n\n    v2 = v1->field_a8;\n    v3 = v1->field_a8 == 9;\n    v5 = v4 | rax<4>;\n    if (v6->field_a8 != 3 && v6->field_a8 != 9 && v5 != 0)\n    {\n        return -18446744069414584321;\n    }\n    if ((v6->field_a8 == 3 || v5 == 0 || v6->field_a8 == 9) && v5 == 0 && (v6->field_a8 == 3 || v6->field_a8 == 9))\n    {\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b020",
            "funcStartAddr": "0x40b020",
            "funcEndAddr": "0x40b06c",
            "decompiledFuncCode": "int sub_40b020()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40bb60",
            "funcStartAddr": "0x40bb60",
            "funcEndAddr": "0x40bb68",
            "decompiledFuncCode": "int sub_40bb60()\n{\n}\n"
        },
        {
            "funcName": "sub_40b6f0",
            "funcStartAddr": "0x40b6f0",
            "funcEndAddr": "0x40b6f8",
            "decompiledFuncCode": "extern unsigned long long g_625798;\n\nint sub_40b6f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_625798 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_418780",
            "funcStartAddr": "0x418780",
            "funcEndAddr": "0x418798",
            "decompiledFuncCode": "extern int512_t g_6243e8;\n\nint sub_418780()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402e90",
            "funcEndAddr": "0x4046ff",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4298560];\n    unsigned int field_419740;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[4305559];\n    char field_41b297;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_2;\n\nextern unsigned int g_419740[4];\nextern int512_t g_4197d0;\nextern int512_t g_419830;\nextern int512_t g_419890;\nextern int512_t g_419e80;\nextern int512_t g_419f50;\nextern unsigned long long g_419fa0;\nextern unsigned int g_41b08a;\nextern unsigned int g_41b1b1;\nextern unsigned int g_41b1e9;\nextern unsigned int g_41b207;\nextern unsigned int g_41b2a8;\nextern unsigned int g_41b2d0;\nextern unsigned int g_41b2e6;\nextern unsigned int g_41b341;\nextern unsigned int g_41d498;\nextern unsigned int g_41d508;\nextern unsigned int g_41d550;\nextern unsigned int g_41d590;\nextern unsigned int g_41d600;\nextern unsigned int g_41d6c8;\nextern int512_t g_41ea00;\nextern unsigned long long g_624410;\nextern unsigned long long g_624418;\nextern unsigned long long g_624420;\nextern unsigned short *g_624428;\nextern unsigned long long g_624430;\nextern char *g_624438;\nextern unsigned long long g_624490;\nextern unsigned long long g_624498;\nextern unsigned long long g_6245a0;\nextern char g_6245a8;\nextern char g_6245a9;\nextern unsigned int g_6245ac;\nextern unsigned int g_6245c0;\nextern unsigned int g_62463c;\nextern char g_6253a0;\nextern unsigned long long g_6254b0;\nextern unsigned long long *g_6254b8;\nextern unsigned long long g_6255b8;\nextern int512_t g_6255c0;\nextern unsigned int g_6255d0;\nextern unsigned int g_6255d4;\nextern unsigned int g_6255d8;\nextern void g_625660;\nextern char g_625661;\nextern unsigned long long g_625668;\nextern unsigned long long g_625670;\nextern char g_625678;\nextern unsigned long long g_625680;\nextern unsigned long long g_625688;\nextern unsigned long long g_625690;\nextern char g_625698;\nextern unsigned long long g_6256a0[2];\nextern unsigned long long g_6256a8[2];\nextern unsigned int g_6256b0;\nextern char g_6256b4;\nextern char g_6256b5;\nextern char g_6256b6;\nextern unsigned int g_6256b8;\nextern char g_6256bc;\nextern char g_6256bd;\nextern unsigned long long g_6256c0;\nextern unsigned long long g_6256c8[5];\nextern char g_6256d0;\nextern char g_6256d1;\nextern char g_6256d2;\nextern unsigned int g_6256d4;\nextern char g_6256d8;\nextern unsigned int g_6256dc;\nextern unsigned long long g_6256e0;\nextern unsigned int g_6256e8;\nextern char g_6256ec;\nextern char g_6256ed;\nextern char g_6256ee;\nextern char g_6256ef;\nextern unsigned int g_6256f0;\nextern unsigned int g_6256f4;\nextern unsigned int g_6256f8;\nextern char g_625725;\nextern unsigned long long g_625730;\nextern unsigned long long g_625738;\nextern unsigned long long g_625740[4];\nextern int512_t g_625748;\nextern char g_625750;\nextern void g_625768;\nextern unsigned long long g_625770;\nextern unsigned long long g_625778;\nextern unsigned long long g_625780;\nextern unsigned long long g_625788;\nextern unsigned long long g_625970;\nextern unsigned long long stderr;\nextern unsigned long long stdout[7];\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x78]\n    void tmp_19;  // tmp #19\n    unsigned long|unsigned long long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x60]\n    unsigned short|char v3;  // [bp-0x53]\n    char v4;  // [bp-0x52]\n    char v5;  // [bp-0x51]\n    char [3]|unsigned long|unsigned long long v6;  // [bp-0x50]\n    unsigned int|char|unsigned long v7;  // [bp-0x48]\n    unsigned short v8;  // [bp-0x46]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11;  // rdi\n    unsigned long long v22;  // r12\n    char *v23;  // r12\n    unsigned long long v25;  // r12\n    unsigned long long v29;  // r12\n    unsigned long long v30;  // r15\n    unsigned long long v31;  // r14\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rax\n    unsigned long long v37;  // rax\n    struct_0 *v40;  // rax\n    unsigned int v44;  // rdx\n    unsigned int v48;  // eax\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rax\n    unsigned long long v52;  // rax\n    unsigned long long v54;  // rbx\n    unsigned long long v56;  // r13\n    unsigned int v59;  // r13d\n    unsigned long long v60;  // rax\n    unsigned int v61;  // eax\n    char v62;  // al\n    struct_1 *v65;  // rax\n    char *v66;  // r13\n    unsigned long long v69;  // r12\n    unsigned long long v70;  // rax\n    unsigned long long v72;  // rax\n    char *v73;  // r12\n    char *v74;  // rdi\n    char *v75;  // r13\n    char *v77;  // r14\n    unsigned long long v78;  // rax\n    unsigned long long *v79;  // rbx\n    unsigned long v81;  // rcx\n    unsigned long long v82;  // rbx\n    unsigned long long v87;  // r12\n    char *v88;  // rax\n    unsigned long long v89;  // rax\n    char v90[3];  // rax\n    unsigned long long v91;  // rdx\n    unsigned long long v92[5];  // rax\n    char *v96;  // rax\n    unsigned long long v97;  // r13\n    char *v98;  // rsi\n    unsigned long long v99;  // rax\n    unsigned long long v100;  // rax\n    unsigned long long v101;  // rax\n    unsigned long long v103;  // r13\n    char *v104;  // r15\n    unsigned long long v105;  // rax\n    unsigned long long v106;  // rax\n    char *v107;  // rdi\n    unsigned long long v108;  // rcx\n    char v109;  // cc_dep2\n    unsigned long v110;  // d\n    struct_2 *v111;  // rdi\n    void *v112;  // r13\n    unsigned long long v117;  // rax\n    unsigned long long v121;  // rax\n    unsigned long long v124;  // rax\n    unsigned int v125;  // ecx\n    unsigned long long v126;  // rdx\n    unsigned int v127;  // ecx\n    unsigned int v128;  // ecx\n    unsigned long long v129;  // r13\n    unsigned int v130;  // r13d\n    unsigned int v132;  // cc_dep1\n    unsigned long long v139[4];  // rbx\n    char *v140;  // rax\n    unsigned long long v141;  // rdi\n    void *v143;  // rax\n    unsigned int|unsigned long v147;  // rbx\n    unsigned int v148;  // cc_dep1\n    unsigned long long v152;  // rax\n\n    sub_410670();\n    setlocale(0x6, 0x41b08a);\n    bindtextdomain(0x41b1b1, 0x41d498);\n    textdomain(0x41b1b1);\n    g_6245c0 = 2;\n    sub_418780();\n    g_625678 = 1;\n    g_625730 = 0x8000000000000000;\n    g_6255d0 = 0;\n    g_625740[0] = 0;\n    g_625738 = -1;\n    g_625698 = 0;\n    if (!(g_6245ac != 2))\n    {\n        g_6256f8 = 2;\n        sub_411c30();\n    }\n    else if (g_6245ac != 3)\n    {\n        if (g_6245ac != 1)\n        {\n            abort(); /* do not return */\n        }\n    }\n    if (g_6245ac == 3)\n    {\n        g_6256f8 = 0;\n        sub_411c30();\n    }\n    if (g_6245ac == 1)\n    {\n        if (isatty(0x1) == 0)\n        {\n            g_6256f8 = 1;\n        }\n        else\n        {\n            g_6256f8 = 2;\n            sub_411c30();\n            g_625698 = 1;\n        }\n    }\n    if (g_6245ac == 3 || g_6245ac == 1 || g_6245ac == 2)\n    {\n        g_6256ef = 0;\n        g_6256f4 = 0;\n        g_6256f0 = 0;\n        g_6256ed = 0;\n        g_6256ec = 0;\n        g_6256d4 = 0;\n        g_6256bc = 0;\n        g_6256b8 = 1;\n        g_6256b6 = 0;\n        g_6256b5 = 0;\n        g_6256b0 = 0;\n        g_6256a8[0] = 0;\n        g_6256a0[0] = 0;\n        g_625725 = 0;\n        if (getenv(\"QUOTING_STYLE\") != 0)\n        {\n            if (sub_40acf0() >= 0)\n            {\n                sub_411c30();\n            }\n            else\n            {\n                v22 = (unsigned int)sub_412290();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41d508, 0x5));\n            }\n        }\n        g_625670 = 80;\n        v23 = getenv(\"COLUMNS\");\n        if (v23 != 0 && *(v23) != 0 && sub_404b40() == 0)\n        {\n            v25 = (unsigned int)sub_412290();\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41d550, 0x5));\n        }\n        if (ioctl(0x1, 0x5413, (unsigned int)&v7) != -1 && v8 != 0)\n        {\n            g_625670 = v8;\n        }\n        g_625680 = 8;\n        if (getenv(\"TABSIZE\") != 0)\n        {\n            if (sub_412df0() == 0)\n            {\n                g_625680 = *((long long *)&v7);\n            }\n            else\n            {\n                v29 = (unsigned int)sub_412290();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41d590, 0x5));\n            }\n        }\n        v30 = 0;\n        v31 = 0;\n        v69 = 0;\n        while (true)\n        {\n            v7 = -1;\n            v32 = sub_416e00();\n            if (v32 != -1)\n            {\n                v33 = v32 + 131;\n                switch ((unsigned int)v33)\n                {\n                case 0:\n                    v52 = g_6245ac;\n                    if (g_6245ac != 1)\n                    {\n                        v52 = \"v\";\n                    }\n                    v1 = v52;\n                    v0 = 0;\n                    sub_412840();\n                    exit(0x0); /* do not return */\n                case 1:\n                    sub_40a530(); /* do not return */\n                case 180:\n                    g_6256f8 = 1;\n                case 196:\n                    g_6256b0 = 1;\n                case 197:\n                    g_6256a8[0] = \"*~\";\n                    g_6256a8[1] = g_6256a8;\n                    g_6256a8[0] = (unsigned int)sub_412980();\n                    g_6256a8[0] = \".\";\n                    g_6256a8[1] = g_6256a8;\n                    g_6256a8[0] = (unsigned int)sub_412980();\n                    break;\n                case 198:\n                    g_6256f8 = 2;\n                    break;\n                case 199:\n                    g_6256d8 = 1;\n                    break;\n                case 201:\n                    g_6256d4 = 3;\n                    break;\n                case 202:\n                    g_6245a8 = 0;\n                    break;\n                case 203:\n                    g_6256b8 = 3;\n                    break;\n                case 204:\n                    v2 = g_625970;\n                    g_6256a8[0] = v2;\n                    g_6256a8[1] = g_6256a8;\n                    g_6256a8[0] = (unsigned int)sub_412980();\n                    break;\n                case 207:\n                    g_6256b8 = 5;\n                    break;\n                case 209:\n                    sub_411c30();\n                    break;\n                case 212:\n                    sub_411c30();\n                    break;\n                case 213:\n                    g_6256b6 = 1;\n                    break;\n                case 214:\n                    g_6256f0 = 2;\n                    v31 = 1;\n                    break;\n                case 215:\n                    dcgettext(0x0, 0x41b207, 0x5);\n                    v1 = 5;\n                    v0 = 2;\n                    g_625680 = (unsigned int)sub_412c10();\n                    break;\n                case 216:\n                    g_6256f0 = -1;\n                    v31 = 1;\n                    break;\n                case 219:\n                    g_6256f0 = 1;\n                    v31 = 1;\n                    break;\n                case 221:\n                    g_625725 = 1;\n                    break;\n                case 228:\n                    g_6256b0 = 2;\n                    break;\n                case 229:\n                    sub_411c30();\n                    break;\n                case 230:\n                    g_6256f4 = 1;\n                    break;\n                case 231:\n                    g_6256b5 = 1;\n                    break;\n                case 233:\n                    g_6256b0 = 2;\n                    g_6256f0 = -1;\n                    if (g_6256f8 == 0)\n                    {\n                        g_6256f8 = 0 - (unsigned int)(char)(isatty(0x1) < 1) + 2;\n                    }\n                    g_6256ec = 0;\n                    v31 = 1;\n                    g_6256d2 = 0;\n                    g_6256d1 = 0;\n                case 234:\n                    g_6256f8 = 0;\n                    g_6245a9 = 0;\n                    break;\n                case 235:\n                    g_6256e8 = 176;\n                    g_6256dc = 176;\n                    g_6256e0 = 1;\n                    g_6245a0 = 1;\n                    break;\n                case 236:\n                    g_6256bc = 1;\n                    break;\n                case 238:\n                    v30 = 1;\n                    break;\n                case 239:\n                    g_6256f8 = 0;\n                    break;\n                case 240:\n                    g_6256f8 = 4;\n                    break;\n                case 241:\n                    g_6256ed = 1;\n                case 242:\n                    g_6256f8 = 0;\n                    g_6245a8 = 0;\n                    break;\n                case 243:\n                    g_6256d4 = 1;\n                    break;\n                case 244:\n                    g_625698 = 1;\n                    break;\n                case 245:\n                    g_6256ef = 1;\n                    break;\n                case 246:\n                    g_6256ec = 1;\n                    break;\n                case 247:\n                    g_6256f0 = 4;\n                    v31 = 1;\n                    break;\n                case 248:\n                    g_6256f4 = 2;\n                    break;\n                case 249:\n                    g_6256f0 = 3;\n                    v31 = 1;\n                    break;\n                case 250:\n                    v37 = sub_404b40();\n                    v54 = (unsigned int)sub_412290();\n                    dcgettext(0x0, 0x41b1e9, 0x5);\n                    error(0x2, 0x0, \"%s: %s\");\n                case 251:\n                    g_6256f8 = 3;\n                    break;\n                case 259:\n                    g_6256ee = 1;\n                    break;\n                case 260:\n                    if (sub_40dfa0() == 0)\n                    {\n                        g_6256dc = g_6256e8;\n                        g_6245a0 = g_6256e0;\n                    }\n                    else\n                    {\n                        sub_413220(); /* do not return */\n                    }\n                case 261:\n                    if (g_625970 != 0)\n                    {\n                        v48 = g_419740[(unsigned long long)(unsigned int)sub_40afb0()];\n                        if (v48 != 1 && (v50 == 0 || v48 != 2))\n                        {\n                            g_6256d2 = 0;\n                        }\n                        if (v48 == 2)\n                        {\n                            v50 = isatty(0x1);\n                        }\n                    }\n                    if ((g_625970 == 0 || v48 == 1 || v48 == 2) && (g_625970 == 0 || v48 == 1 || v50 != 0))\n                    {\n                        g_6256d2 = 1;\n                        g_625680 = 0;\n                    }\n                case 262:\n                    g_6256b8 = 4;\n                    break;\n                case 263:\n                    g_6256d4 = 2;\n                    break;\n                case 264:\n                    g_6256f8 = *((int *)&((char *)&g_419890)[4 * (unsigned long long)(unsigned int)sub_40afb0()]);\n                    break;\n                case 265:\n                    g_6256f8 = 0;\n                    v69 = \"full-iso\";\n                    break;\n                case 266:\n                    g_6256b4 = 1;\n                    break;\n                case 267:\n                    g_6256a0[0] = g_625970;\n                    g_6256a0[0] = (unsigned int)sub_412980();\n                    *((unsigned int *)&g_6256a0[1]) = v44;\n                    break;\n                case 268:\n                    if (g_625970 != 0)\n                    {\n                        v40 = sub_40afb0();\n                        v44 = *((int *)(0x4 * v40 + (char *)&g_419740[0]));\n                        if (*((int *)(0x4 * v40 + (char *)&g_419740[0])) != 1)\n                        {\n                            v49 = 0;\n                            if (v44 == 2)\n                            {\n                                v49 = (char)(isatty(0x1) != 0);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v49 = 1;\n                    }\n                    *((unsigned long long *)&g_6256d1) = v49;\n                    g_6256d1 = g_6256d1 & 1;\n                case 269:\n                    g_6256d4 = *((int *)&((char *)&g_419f50)[4 * (unsigned long long)(unsigned int)sub_40afb0()]);\n                    break;\n                case 270:\n                    sub_40afb0();\n                    sub_411c30();\n                    break;\n                case 271:\n                    g_625698 = 0;\n                    break;\n                case 272:\n                    g_6256e8 = 144;\n                    g_6256dc = 144;\n                    g_6256e0 = 1;\n                    g_6245a0 = 1;\n                    break;\n                case 273:\n                    v31 = 1;\n                    g_6256f0 = *((int *)&((char *)&g_419830)[4 * (unsigned long long)(unsigned int)sub_40afb0()]);\n                    break;\n                case 274:\n                    g_6256f4 = *((int *)&((char *)&g_4197d0)[4 * (unsigned long long)(unsigned int)sub_40afb0()]);\n                    break;\n                case 275:\n                    v69 = g_625970;\n                    break;\n                default:\n                    sub_40a530(); /* do not return */\n                }\n            }\n            else\n            {\n                if (g_6256e0 == 0)\n                {\n                    v56 = getenv(\"LS_\");\n                    sub_40dfa0();\n                    if (getenv(\"BLOCK_SIZE\") != 0 || v56 != 0)\n                    {\n                        g_6256dc = g_6256e8;\n                        g_6245a0 = g_6256e0;\n                    }\n                    if (v30 != 0)\n                    {\n                        g_6256e8 = 0;\n                        g_6256e0 = 0x400;\n                    }\n                }\n                g_6255c0 = (0 CONCAT g_625670) % 3 + (char)((0 CONCAT g_625670) % 3 >> 64 != 0);\n                v59 = sub_411c20();\n                if (g_6256f8 != 1 && g_6256f8 != 4)\n                {\n                    if (g_625670 == 0)\n                    {\n                        v60 = 0;\n                    }\n                    if (g_6256f8 == 0 || g_625670 != 0)\n                    {\n                        v61 = (v59 & -3) - 1;\n                        v62 = (v59 & -3) == 1;\n                        v60 = rax<4> | g_6256f8;\n                    }\n                }\n                if (g_6256f8 == 1 || g_6256f8 == 4)\n                {\n                    v60 = 0;\n                }\n                *((unsigned long long *)&g_625768) = v60;\n                g_625768 = g_625768 & 1;\n                g_625690 = (unsigned int)sub_411be0();\n                if (v59 == 7)\n                {\n                    sub_411c40();\n                }\n                if (g_6256d4 > 1)\n                {\n                    v65 = (unsigned long long)(g_6256d4 - 2);\n                    v66 = v65 + \"*=>@|\";\n                    if (*((char *)(v65 + \"*=>@|\")) != 0)\n                    {\n                        while (true)\n                        {\n                            v66 = &v66[1];\n                            sub_411c40();\n                            if (*(v66) == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n                g_625688 = (unsigned int)sub_411be0();\n                sub_411c40();\n                if (g_6256d8 != 0 && (g_6256d1 != 0 || g_6256f8 != 0))\n                {\n                    g_6256d8 = 0;\n                }\n                if (v31 == 0 && g_6256f4 - 1 <= 1 && g_6256f8 != 0)\n                {\n                    g_6256f0 = 4;\n                }\n                if (g_6256f8 == 0)\n                {\n                    if (v69 == 0)\n                    {\n                        v69 = getenv(\"TIME_STYLE\");\n                    }\n                    if (v69 != 0 || v69 != 0)\n                    {\n                        while (true)\n                        {\n                            v70 = strncmp(v69, \"posix-\", 0x6);\n                            if (v70 == 0)\n                            {\n                                if (sub_40c190() == 0)\n                                {\n                                    break;\n                                }\n                                v69 += 6;\n                            }\n                            else\n                            {\n                                if (*((char *)v69) != 43)\n                                {\n                                    break;\n                                }\n                                v73 = v69 + 1;\n                                v74 = v73;\n                                v75 = strchr(v74, 0xa);\n                                if (v75 != 0)\n                                {\n                                    v77 = &v75[1];\n                                    v78 = strchr(&v75[1], 0xa);\n                                    if (v78 == 0)\n                                    {\n                                        *(v75) = 0;\n                                    }\n                                    else\n                                    {\n                                        v82 = (unsigned int)sub_412290();\n                                        error(0x2, 0x0, (unsigned long long)dcgettext(0x0, 0x41b2a8, 0x5));\n                                    }\n                                }\n                                else\n                                {\n                                    v77 = v74;\n                                }\n                                if (v78 == 0 || v75 == 0)\n                                {\n                                    g_624410 = v74;\n                                    g_624418 = v77;\n                                }\n                            }\n                        }\n                        if (*((char *)v69) == 43 && v70 != 0 && (v78 == 0 || v75 == 0))\n                        {\n                            sub_404bb0();\n                        }\n                        else if (v70 != 0)\n                        {\n                            v72 = sub_40acf0();\n                        }\n                        else if (v70 == 0)\n                        {\n                            v87 = (int)g_62463c;\n                            if (g_6256d2 == 0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    v72 = sub_40acf0();\n                    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n                    {\n                        sub_40ae10();\n                        v79 = &g_419fa0;\n                        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b2d0, 0x5), stderr);\n                        v81 = \"full-iso\";\n                        while (true)\n                        {\n                            v79 = &v79[1];\n                            __fprintf_chk(stderr, 0x1, 0x41b2e6, v81);\n                            v81 = *(v79);\n                            if (*(v79) == 0)\n                            {\n                                break;\n                            }\n                        }\n                        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d600, 0x5), stderr);\n                    }\n                    else if (v72 == 1)\n                    {\n                        g_624418 = \"%Y-\";\n                        g_624410 = \"%Y-\";\n                    }\n                    else if (v72 > 1)\n                    {\n                        if (v72 == 2)\n                        {\n                            g_624410 = \"%Y-%m-%d \";\n                            g_624418 = \"%m-%d \";\n                        }\n                        else if (v72 == 3)\n                        {\n                            if (sub_40c190() != 0)\n                            {\n                                g_624410 = dcgettext(0x0, g_624410, 0x2);\n                                g_624418 = dcgettext(0x0, g_624418, 0x2);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (v72 == 0)\n                        {\n                            g_624418 = \"%Y-%m-%d %H:%M:%S.%N %z\";\n                            g_624410 = \"%Y-%m-%d %H:%M:%S.%N %z\";\n                        }\n                    }\n                    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v69 != 0 || v69 != 0)\n                    {\n                        sub_404bb0();\n                    }\n                }\n            }\n            if (v32 == -1 && g_6256f8 == 0 && (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v69 != 0 || v69 != 0) || v32 == -1 && g_6256f8 == 0 && (v69 != 0 || v69 != 0) || v31 == 0 && g_6256f4 - 1 <= 1 && v32 == -1 && g_6256f8 != 0 || v32 == -1 && (v31 != 0 || g_6256f4 - 1 > 1) && (g_6256d8 == 0 || g_6256d1 != 0 || g_6256f8 != 0) && g_6256f8 != 0)\n            {\n                *((char **)&v6[0]) = getenv(\"LS_COLORS\");\n                if (v6 != 0 && v6[0] != 0)\n                {\n                    v3 = 16191;\n                    v5 = 0;\n                    v89 = sub_412bb0();\n                    g_6256c0 = v89;\n                    v7 = v89;\n                    while (true)\n                    {\n                        v90 = v6;\n                        v91 = v6[0];\n                        if (v6[0] == 42)\n                        {\n                            v92 = sub_412980();\n                            tmp_19 = g_6256c8;\n                            v6 = &v6[1];\n                            g_6256c8[0] = v92;\n                            v92[4] = tmp_19;\n                            v92[1] = v7;\n                            if (sub_404860() != 0)\n                            {\n                                v96 = v6;\n                                *((char *[3])&v6[0]) = &v6[1];\n                                if (*(v96) == 61)\n                                {\n                                    v92[3] = v7;\n                                    v99 = sub_404860();\n                                }\n                            }\n                        }\n                        else if (v91 == 58)\n                        {\n                            *((char *[3])&v6[0]) = &v90[1];\n                        }\n                        else if (v91 != 0)\n                        {\n                            v6 = &v90[1];\n                            v3 = v90[0];\n                            if (v90[1] != 0)\n                            {\n                                v6 = &v90[2];\n                                v4 = v90[1];\n                                *((char *[3])&v6[0]) = &v90[3];\n                                if (v90[2] == 61)\n                                {\n                                    v97 = 0;\n                                    v98 = \"lc\";\n                                    while (true)\n                                    {\n                                        v100 = strcmp(&v3, v98);\n                                        if (v100 != 0)\n                                        {\n                                            v97 += 1;\n                                            v98 = (&g_419e80)[v97];\n                                        }\n                                        else\n                                        {\n                                            (&g_624420)[1 + 2 * v97] = v7;\n                                            v101 = sub_404860();\n                                            if (v101 != 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        v103 = (unsigned int)sub_412290();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41b341, 0x5));\n                                    }\n                                    if (v100 == 0)\n                                    {\n                                        v90 = v6;\n                                        v91 = v6[0];\n                                    }\n                                    else if (v101 == 0 && v100 == 0 || (&g_419e80)[v97] == 0 && v100 != 0)\n                                    {\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41d6c8, 0x5));\n                                        free(g_6256c0);\n                                    }\n                                }\n                            }\n                        }\n                        if ((v6[0] == 42 || v91 != 58) && (v6[0] == 42 || v91 != 0) && (v6[0] != 42 || v99 != 0))\n                        {\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x41d6c8, 0x5));\n                            free(g_6256c0);\n                            for (v111 = g_6256c8; v111 != 0; v111 = v112)\n                            {\n                                v112 = v111->field_20;\n                                free(v111);\n                            }\n                            g_6256d2 = 0;\n                        }\n                        if (v6[0] == 42 && v99 != 0 || v6[0] != 42 && v91 != 58)\n                        {\n                            if (g_624490 != 6)\n                            {\n                                break;\n                            }\n                            if (strncmp(g_624498, \"target\", 0x6) != 0)\n                            {\n                                break;\n                            }\n                            g_625750 = 1;\n                        }\n                    }\n                }\n                if (v6 == 0 || v6[0] == 0)\n                {\n                    v88 = getenv(\"COLOR\");\n                    if (v88 == 0 || *(v88) == 0)\n                    {\n                        if (getenv(\"TERM\") != 0 && *(getenv(\"TERM\")) != 0)\n                        {\n                            v104 = \"# Configuration file for dircolors, a utility to help you set the\";\n                            while (true)\n                            {\n                                v105 = strncmp(v104, \"TERM \", 0x5);\n                                if (v105 == 0)\n                                {\n                                    v106 = sub_4159a0();\n                                }\n                                if (v105 != 0 || v106 != 0)\n                                {\n                                    v107 = v104;\n                                    v108 = -1;\n                                    while (v108 != 0)\n                                    {\n                                        v108 -= 1;\n                                        v109 = *(v107);\n                                        v107 = &v107[v110];\n                                        break;\n                                    }\n                                    v104 = (char *)(4300768 + !(rcx<8>));\n                                    if ((char *)(4300768 + !(rcx<8>)) - \"# Configuration file for dircolors, a utility to help you set the\" > 4172)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (v105 != 0 || v106 != 0)\n                            {\n                                g_6256d2 = 0;\n                            }\n                            else if (v105 == 0 && v106 == 0)\n                            {\n                                if (g_6256d2 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        g_6256d2 = 0;\n                    }\n                }\n                if (sub_404ae0() == 0 && (sub_404ae0() == 0 || g_625750 == 0))\n                {\n                    if (sub_404ae0() == 0)\n                    {\n                        break;\n                    }\n                    if (g_6256f8 != 0)\n                    {\n                        break;\n                    }\n                }\n                g_6256bd = 1;\n            }\n        }\n        if (g_6256b8 == 1)\n        {\n            v117 = 2;\n            if (g_6256b5 == 0 && g_6256d4 != 3)\n            {\n                v117 = (0 - (unsigned int)(char)(g_6256f8 < 1) & -2) + 4;\n            }\n            *((unsigned long long *)&g_6256b8) = v117;\n        }\n        if (g_6256b6 != 0)\n        {\n            g_625788 = (unsigned int)sub_40ca80();\n            if (g_625788 != 0)\n            {\n                _obstack_begin();\n            }\n            else\n            {\n                sub_412bd0(); /* do not return */\n            }\n        }\n        if (g_6256b6 == 0 || g_625788 != 0)\n        {\n            getenv(\"TZ\");\n            g_625668 = (unsigned int)sub_417410();\n            if ((g_6256f0 - 2 & -3) != 0 && g_6256f8 != 0 && g_625725 == 0 && g_6256ec == 0)\n            {\n                g_625661 = 0;\n                v121 = 1;\n                if (g_6256b6 == 0 && g_6256d2 == 0 && g_6256d4 == 0)\n                {\n                    v121 = g_6256b4;\n                }\n            }\n            if ((g_6256f0 - 2 & -3) == 0 || g_6256f8 == 0 || g_625725 != 0 || g_6256ec != 0)\n            {\n                g_625661 = 1;\n                v121 = 0;\n            }\n            *((unsigned long long *)&g_625660) = v121;\n            g_625660 = g_625660 & 1;\n            if (g_6256d8 != 0)\n            {\n                _obstack_begin();\n                _obstack_begin();\n            }\n            if (g_6256d1 != 0)\n            {\n                v124 = 0;\n                do\n                {\n                    v125 = v124;\n                    if ((unsigned int)v124 <= 90)\n                    {\n                        v126 = 1;\n                        if ((unsigned int)v124 < 65 && (unsigned int)(v124 - 48) > 9)\n                        {\n                            v128 = v125 - 45;\n                        }\n                    }\n                    else\n                    {\n                        v126 = 1;\n                        if ((unsigned int)(v124 - 97) > 25)\n                        {\n                            v127 = v125 - 45;\n                        }\n                    }\n                    if ((unsigned int)v124 != 126 && ((unsigned int)v124 <= 90 || v127 > 1) && ((unsigned int)v124 <= 90 || (unsigned int)(v124 - 97) > 25) && ((unsigned int)v124 < 65 || (unsigned int)v124 > 90) && ((unsigned int)v124 > 90 || v128 > 1) && ((unsigned int)v124 > 90 || (unsigned int)(v124 - 48) > 9))\n                    {\n                        v126 = (char)((unsigned int)v124 == 95);\n                    }\n                    if (((unsigned int)v124 <= 90 || (unsigned int)(v124 - 97) > 25) && ((unsigned int)v124 < 65 || (unsigned int)v124 > 90) && ((unsigned int)v124 <= 90 || v127 <= 1 || (unsigned int)v124 == 126) && ((unsigned int)v124 > 90 || (unsigned int)(v124 - 48) > 9) && (v128 <= 1 || (unsigned int)v124 == 126 || (unsigned int)v124 > 90))\n                    {\n                        v126 = 1;\n                    }\n                    *((unsigned long long *)&(&g_6253a0)[v124]) = (&g_6253a0)[v124] | v126;\n                    v124 += 1;\n                }\n                while (v124 != 0x100);\n                *((int *)&g_625748) = (sub_412d40() == 0? &g_41b08a : rax<8>);\n            }\n            v129 = v11;\n            g_625778 = 100;\n            v130 = v129 - (int)g_62463c;\n            g_625770 = 0;\n            g_625780 = (unsigned int)sub_412980();\n            sub_4084b0();\n            if (v132 > 0)\n            {\n                while (true)\n                {\n                    v87 += 1;\n                    sub_408580();\n                    if ((unsigned int)v129 <= (unsigned int)v87)\n                    {\n                        break;\n                    }\n                }\n                if (g_625770 == 0)\n                {\n                    v139 = g_625740;\n                }\n            }\n            else if (g_6256b5 != 0)\n            {\n                sub_408580();\n            }\n            else\n            {\n                sub_404d90();\n            }\n            if (g_625770 != 0)\n            {\n                sub_404f40();\n                if (g_6256b5 == 0)\n                {\n                    sub_405140();\n                }\n                sub_407ca0();\n                if (g_625740 != 0)\n                {\n                    v140 = stdout[5];\n                    if (stdout[6] > stdout[5])\n                    {\n                        stdout[5] = stdout[5] + 1;\n                        *(v140) = 10;\n                    }\n                    else\n                    {\n                        __overflow();\n                    }\n                    g_6255b8 = g_6255b8 + 1;\n                    v139 = g_625740;\n                }\n            }\n            else if (v132 <= 0 || v130 <= 1)\n            {\n                v139 = g_625740;\n                if (g_625740 != 0 && g_625740[3] == 0)\n                {\n                    g_625678 = 0;\n                }\n            }\n            if (g_625740 != 0 || g_625770 == 0 && v132 > 0 && v130 > 1)\n            {\n                for (; v139 != 0; v139 = g_625740)\n                {\n                    v141 = *(v139);\n                    g_625740 = v139[3];\n                    if (v141 == 0 && g_625788 != 0)\n                    {\n                        if ((char *)g_6254b8 + -1 * g_6254b0 > 15)\n                        {\n                            g_6254b8 = &g_6254b8[-2];\n                            v7 = g_6254b8[-2];\n                            v9 = g_6254b8[-1];\n                            v143 = sub_40d260();\n                            if (v143 != 0)\n                            {\n                                free(v143);\n                                free(*(v139));\n                                free(v139[1]);\n                                free(v139);\n                            }\n                            else\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                        }\n                        else\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                    }\n                    if (g_625788 == 0 || v141 != 0)\n                    {\n                        sub_4092a0();\n                        free(*(v139));\n                        free(v139[1]);\n                        free(v139);\n                        g_625678 = 1;\n                    }\n                }\n            }\n            if (g_6256d2 != 0 && g_6256d0 != 0)\n            {\n                if (*(g_624438) != 109 || g_624420 != 2 || *(g_624428) != 23323 || g_624430 != 1)\n                {\n                    sub_405d40();\n                }\n                fflush_unlocked(stdout);\n                sub_405af0();\n                v147 = g_6255d4;\n                if (g_6255d4 != 0)\n                {\n                    while (true)\n                    {\n                        raise();\n                        v148 = v147;\n                        v147 -= 1;\n                        if (v148 == 1)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if (g_6255d8 != 0)\n                {\n                    raise();\n                }\n            }\n            if (g_6256d8 != 0)\n            {\n                sub_405390();\n                sub_405390();\n                __printf_chk(0x1, \"//DIRED-OPTIONS// --quoting-style=%s\\n\", (unsigned int)(&g_41ea00)[(unsigned long long)(unsigned int)sub_411c20()]);\n            }\n            if (g_625788 != 0)\n            {\n                v152 = sub_40c5f0();\n                if (v152 == 0)\n                {\n                    sub_40ccc0();\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n            if (v152 == 0 || g_625788 == 0)\n            {\n                return g_6255d0;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4122c2",
            "funcStartAddr": "0x4122c2",
            "funcEndAddr": "0x4123c8",
            "decompiledFuncCode": "int sub_4122c2()\n{\n    char v0;  // [bp-0x128]\n    unsigned long v1;  // [bp-0x120]\n    char v2;  // [bp-0x98]\n    unsigned long v3;  // [bp-0x90]\n    unsigned long long v4;  // [bp+0x0]\n    unsigned long long v6;  // [bp+0x10]\n    unsigned long long v7;  // [bp+0x18]\n    unsigned long long v8;  // [bp+0x20]\n    unsigned long long v9;  // [bp+0x28]\n    unsigned long v12;  // r13\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    void *v16;  // r12\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    char|unsigned long|unsigned long long v19;  // bl\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v12 = (unsigned int)sub_40b8d0();\n    v13 = sub_40b8d0();\n    if (v12 == v13)\n    {\n        v14 = memcmp((unsigned long long)(unsigned int)sub_40b870(), (unsigned long long)(unsigned int)sub_40b870(), v12);\n        if (v14 == 0)\n        {\n            v15 = (unsigned long long)(unsigned int)sub_417940();\n            v16 = (unsigned long long)(unsigned int)sub_417940();\n            v17 = __xstat(0x1, (unsigned int)v15, (unsigned int)&v0);\n            if (v17 == 0)\n            {\n                v18 = __xstat(0x1, (unsigned int)v16, (unsigned int)&v2);\n                if (v18 == 0)\n                {\n                    v19 = 0;\n                    if (v1 == v3)\n                    {\n                        v19 = *((long long *)&v0) == *((long long *)&v2);\n                    }\n                    free(v15);\n                    free(v16);\n                }\n                else\n                {\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x1, *(__errno_location()), \"%s\");\n            }\n        }\n    }\n    if (v12 != v13 || v14 != 0 || v18 == 0 && v17 == 0)\n    {\n        v20 = v19;\n        v21 = v4;\n        v22 = v6;\n        v23 = v7;\n        v24 = v8;\n        v25 = v9;\n        return v20;\n    }\n}\n"
        },
        {
            "funcName": "sub_410710",
            "funcStartAddr": "0x410710",
            "funcEndAddr": "0x4107ef",
            "decompiledFuncCode": "extern int512_t g_41dd1e;\nextern int512_t g_41dd22;\n\nint sub_410710()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_4179a0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41dd1e : 4316457);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41dd22 : 4316453);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_413283",
            "funcStartAddr": "0x413283",
            "funcEndAddr": "0x413288",
            "decompiledFuncCode": "int sub_413283()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40a310",
            "funcStartAddr": "0x40a310",
            "funcEndAddr": "0x40a37c",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned long long field_68;\n    char padding_70[56];\n    unsigned int field_a8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n    char padding_6c[60];\n    unsigned int field_a8;\n} struct_0;\n\nint sub_40a310()\n{\n    struct_1 *v1;  // rdi\n    unsigned int v2;  // eax\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // r8\n    char v5;  // al\n    unsigned int v6;  // ecx\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rax\n\n    v2 = v1->field_a8;\n    v4 = v3;\n    v5 = v1->field_a8 == 9;\n    v7 = v6 | rax<4>;\n    if (v3->field_a8 == 3 || v3->field_a8 == 9 || v7 == 0)\n    {\n        if (v3->field_60 <= v1->field_60 && (v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 9 || v7 != 0))\n        {\n            if (v3->field_60 >= v1->field_60)\n            {\n                v8 = (unsigned int)v1->field_68 - v4->field_68;\n            }\n            else\n            {\n                return 1;\n            }\n        }\n        if ((v7 == 0 || v3->field_60 <= v1->field_60) && (v7 == 0 || v3->field_60 >= v1->field_60) && (v7 == 0 || (unsigned int)v1->field_68 != v4->field_68) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_60 <= v1->field_60) && (v3->field_a8 == 3 || v3->field_a8 == 9 || v3->field_60 >= v1->field_60) && (v3->field_a8 == 3 || v3->field_a8 == 9 || (unsigned int)v1->field_68 != v4->field_68))\n        {\n            return v8;\n        }\n    }\n    if (v7 == 0)\n    {\n        v8 = 1;\n    }\n    if ((v3->field_a8 != 3 || v7 != 0) && (v3->field_a8 != 3 || v3->field_60 > v1->field_60) && (v3->field_a8 != 9 || v7 != 0) && (v3->field_a8 != 9 || v3->field_60 > v1->field_60) && (v7 != 0 || v3->field_60 > v1->field_60))\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b910",
            "funcStartAddr": "0x40b910",
            "funcEndAddr": "0x40b99d",
            "decompiledFuncCode": "int sub_40b910()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long|unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // r12\n    unsigned long long v9;  // rdx\n    unsigned long long v10[2];  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n    unsigned long long v17;  // r13\n    unsigned long long *v18;  // rdi\n    void *v19;  // rdi\n\n    if (v5 != 0)\n    {\n        v3 = v7;\n        v2 = v8;\n        v1 = stack_base + 0;\n        v10 = v9;\n        v0 = v11;\n        v5[0] = (unsigned int)sub_412bb0();\n        *((unsigned long long [2])&v5[1]) = v10[1];\n        *((unsigned long long [2])&v5[2]) = *(v10);\n        v13 = sub_40d220();\n        if (!(v13 != 0))\n        {\n            sub_412bd0(); /* do not return */\n        }\n        else if (v5 != v13)\n        {\n            v5 = (unsigned long long)(unsigned int)sub_412980();\n            v3 = v0;\n            v19 = *(v18);\n            free(v19);\n        }\n        else\n        {\n            v15 = v0;\n            v16 = v2;\n            v17 = v3;\n            return v13;\n        }\n    }\n    else\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_417050",
            "funcStartAddr": "0x417050",
            "funcEndAddr": "0x417065",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[80];\n    char field_50;\n} struct_0;\n\nint sub_417050()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_50 & 1) != 0)\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n    else\n    {\n        /* goto *((long long *)&v1->padding_0[56]); */\n    }\n}\n"
        },
        {
            "funcName": "sub_40eba0",
            "funcStartAddr": "0x40eba0",
            "funcEndAddr": "0x40ed9c",
            "decompiledFuncCode": "int sub_40eba0()\n{\n    unsigned long long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long long v2;  // [bp-0x58]\n    unsigned long long v3;  // [bp-0x50]\n    unsigned long long v4;  // [bp-0x48]\n    unsigned long long *v5;  // [bp-0x40]\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rbx\n    unsigned long v9;  // rsi\n    void *v10;  // rdx\n    unsigned long long v11;  // rdi\n    unsigned long long v14;  // rbp\n    unsigned long long v15;  // rsi\n    unsigned long long v16;  // rdi\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rbp\n    unsigned long long v19;  // r15\n    unsigned long long v20;  // r14\n    unsigned long long *v21;  // r12\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // r12\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // rdi\n    unsigned long long v28;  // rax\n    unsigned long long v30;  // r15\n    unsigned long long v31;  // r14\n    unsigned long long v32;  // r12\n    unsigned long long v33;  // rsi\n    unsigned long long v34;  // rdi\n    unsigned long long v36;  // rdx\n\n    v8 = v7;\n    v1 = v9;\n    v3 = v10;\n    if (!(v9 <= 2))\n    {\n        v11 = v7 + (v1 >> 1) * 8;\n        v2 = v1 >> 1;\n        v5 = v11;\n        sub_40eba0();\n        if (v1 == 3)\n        {\n            v18 = *((long long *)v8);\n            *((long long *)v3) = *((long long *)v8);\n        }\n        else\n        {\n            v19 = v3;\n            v20 = v1 >> 2;\n            v21 = v8 + (v1 >> 2) * 8;\n            v4 = v1 >> 2;\n            sub_40eba0();\n            sub_40eba0();\n            v0 = 0;\n            v24 = *((long long *)v8);\n            v25 = *(v21);\n            while (true)\n            {\n                v26 = v25;\n                v27 = v24;\n                v19 += 8;\n                v28 = rcx<8>();\n                if (v28 > 0)\n                {\n                    *((unsigned long long *)(v19 - 8)) = v25;\n                    v20 += 1;\n                    if (v2 != v20)\n                    {\n                        v25 = *((long long *)(v8 + v20 * 8));\n                    }\n                }\n                else\n                {\n                    v0 += 1;\n                    *((unsigned long long *)(v19 - 8)) = v24;\n                    if (v4 != v0)\n                    {\n                        v24 = *((long long *)(v8 + v0 * 8));\n                    }\n                    else\n                    {\n                        v0 = v20;\n                        v4 = v2;\n                    }\n                }\n                if (v4 == v0 && v28 <= 0 || v2 == v20 && v28 > 0)\n                {\n                    memcpy(v19, v8 + v0 * 8, (v4 - v0) * 8);\n                    v18 = *((long long *)v3);\n                }\n            }\n        }\n        v0 = 0;\n        v30 = 0;\n        v31 = v2;\n        v32 = *(v5);\n        while (true)\n        {\n            v33 = v32;\n            v34 = v18;\n            v30 += 1;\n            if (rcx<8>() > 0)\n            {\n                *((unsigned long long *)(v8 + v30 * 8 - 8)) = v32;\n                v31 += 1;\n                if (v1 != v31)\n                {\n                    v32 = *((long long *)(v8 + v31 * 8));\n                }\n            }\n            else\n            {\n                v0 += 1;\n                v17 = v0;\n                *((unsigned long long *)(v8 + v30 * 8 - 8)) = v18;\n                if (v2 == v0)\n                {\n                    break;\n                }\n                v36 = v3;\n                v18 = *((long long *)(v3 + v0 * 8));\n            }\n        }\n    }\n    else if (v9 == 2)\n    {\n        v14 = *((long long *)v7);\n        v15 = *((long long *)(v7 + 8));\n        v16 = *((long long *)v7);\n        v17 = rcx<8>();\n        if ((unsigned int)v17 > 0)\n        {\n            *((long long *)v8) = *((long long *)(v7 + 8));\n            *((unsigned long long *)(v8 + 8)) = v14;\n            return v17;\n        }\n    }\n    if ((unsigned int)v17 <= 0 || v9 > 2 || v9 != 2)\n    {\n        return v17;\n    }\n}\n"
        },
        {
            "funcName": "sub_409ac0",
            "funcStartAddr": "0x409ac0",
            "funcEndAddr": "0x409aef",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n} struct_0;\n\nint sub_409ac0()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2[14];  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1->field_60 <= v2[12])\n    {\n        if (v1->field_60 >= v2[12])\n        {\n            v3 = (unsigned int)v2[13] - v1->field_68;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_60 < v2[12] || (unsigned int)v2[13] != v1->field_68)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_409e20",
            "funcStartAddr": "0x409e20",
            "funcEndAddr": "0x409e4f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[96];\n    unsigned long long field_60;\n    unsigned int field_68;\n} struct_0;\n\nint sub_409e20()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2[14];  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1->field_60 <= v2[12])\n    {\n        if (v1->field_60 >= v2[12])\n        {\n            v3 = (unsigned int)v2[13] - v1->field_68;\n        }\n        else\n        {\n            v3 = 1;\n        }\n        if (v1->field_60 < v2[12] || (unsigned int)v2[13] != v1->field_68)\n        {\n            return v3;\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_411f20",
            "funcStartAddr": "0x411f20",
            "funcEndAddr": "0x411f36",
            "decompiledFuncCode": "int sub_411f20()\n{\n}\n"
        },
        {
            "funcName": "sub_4167b0",
            "funcStartAddr": "0x4167b0",
            "funcEndAddr": "0x416d17",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_41fc68;\nextern unsigned int g_41fc99;\nextern unsigned long long stderr;\n\nint sub_4167b0()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9d\n    unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned int|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[2];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[2];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_4160b0();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_4160b0();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_416190();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fc68, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fc99, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41fc68, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_416190();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_dir.elf"
}