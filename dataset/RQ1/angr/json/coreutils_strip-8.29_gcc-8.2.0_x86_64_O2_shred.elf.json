{
    "funcInfo": [
        {
            "funcName": "sub_4069a0",
            "funcStartAddr": "0x4069a0",
            "funcEndAddr": "0x406a35",
            "decompiledFuncCode": "extern struct_0 *g_60f338;\nextern unsigned long long g_60f340;\nextern unsigned long long g_60f348;\nextern unsigned int g_60f350;\nextern unsigned long long g_60f3c0;\n\nint sub_4069a0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_60f350;\n    if (g_60f350 > 1)\n    {\n        v2 = &g_60f338[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_60f338[(unsigned long long)(g_60f350 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_60f338->field_8 != 6353856)\n    {\n        v1 = free(g_60f338->field_8);\n        g_60f340 = 0x100;\n        g_60f348 = &g_60f3c0;\n    }\n    if (g_60f338 != 6353728)\n    {\n        v1 = free(g_60f338);\n        g_60f338 = &g_60f340;\n    }\n    g_60f350 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406e00",
            "funcStartAddr": "0x406e00",
            "funcEndAddr": "0x406e23",
            "decompiledFuncCode": "int sub_406e00()\n{\n    unsigned long long v1[3];  // rax\n    unsigned long v2;  // rdi\n\n    v1 = sub_408240();\n    v1[0] = v2;\n    v1[2] = 0;\n    v1[1] = 0;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4082e0",
            "funcStartAddr": "0x4082e0",
            "funcEndAddr": "0x408301",
            "decompiledFuncCode": "int sub_4082e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_408490(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4068bb",
            "funcStartAddr": "0x4068bb",
            "funcEndAddr": "0x406981",
            "decompiledFuncCode": "int sub_4068bb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_405360();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_408240();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_405360();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408100",
            "funcStartAddr": "0x408100",
            "funcEndAddr": "0x4081b8",
            "decompiledFuncCode": "int sub_408100()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_407ca0();\n    }\n}\n"
        },
        {
            "funcName": "sub_409940",
            "funcStartAddr": "0x409940",
            "funcEndAddr": "0x409996",
            "decompiledFuncCode": "extern unsigned int g_60f354;\nextern unsigned int g_60f358;\nextern unsigned int g_60f35c;\nextern unsigned int g_60f500;\nextern unsigned int g_60f504;\nextern unsigned int g_60f508;\nextern unsigned long long g_60f510;\nextern unsigned long long g_60f540;\n\nint sub_409940()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_60f500 = g_60f35c;\n    g_60f504 = g_60f358;\n    v1 = (unsigned int)v2;\n    v0 = &g_60f500;\n    g_60f35c = g_60f500;\n    g_60f540 = g_60f510;\n    g_60f354 = g_60f508;\n    return sub_409370();\n}\n"
        },
        {
            "funcName": "sub_404040",
            "funcStartAddr": "0x404040",
            "funcEndAddr": "0x4040ac",
            "decompiledFuncCode": "extern unsigned int g_40b5c5;\nextern unsigned int g_40b5e0;\n\nint sub_404040()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x40b5c5, 0x5);\n    }\n    dcgettext(0x0, 0x40b5e0, 0x5);\n    sub_406dc0();\n    sub_406ab0();\n}\n"
        },
        {
            "funcName": "sub_4044d0",
            "funcStartAddr": "0x4044d0",
            "funcEndAddr": "0x404516",
            "decompiledFuncCode": "int sub_4044d0()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_407c50();\n}\n"
        },
        {
            "funcName": "sub_4051c0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x405259",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_60f3b0;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4051c0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_60f3b0 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406e30",
            "funcStartAddr": "0x406e30",
            "funcEndAddr": "0x406e5f",
            "decompiledFuncCode": "int sub_406e30()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rax\n\n    v1 = (unsigned int)sub_407050();\n    v2 = 0;\n    if (v1 != 0)\n    {\n        v2 = sub_408240();\n        *((unsigned long long *)v2) = v1;\n        *((long long *)(v2 + 16)) = 0;\n        *((long long *)(v2 + 8)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4082a0",
            "funcStartAddr": "0x4082a0",
            "funcEndAddr": "0x4082d0",
            "decompiledFuncCode": "int sub_4082a0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_408490(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a210",
            "funcStartAddr": "0x40a210",
            "funcEndAddr": "0x40a228",
            "decompiledFuncCode": "extern int512_t g_60f2c8;\n\nint sub_40a210()\n{\n}\n"
        },
        {
            "funcName": "sub_408c10",
            "funcStartAddr": "0x408c10",
            "funcEndAddr": "0x408c66",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_408c10()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40703a",
            "funcStartAddr": "0x40703a",
            "funcEndAddr": "0x40703f",
            "decompiledFuncCode": "int sub_40703a()\n{\n}\n"
        },
        {
            "funcName": "sub_406790",
            "funcStartAddr": "0x406790",
            "funcEndAddr": "0x4067c3",
            "decompiledFuncCode": "extern int512_t g_60f4c0;\n\nint sub_406790()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_60f4c0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_60f4c0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_406a90",
            "funcStartAddr": "0x406a90",
            "funcEndAddr": "0x406aa2",
            "decompiledFuncCode": "int sub_406a90()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x4020a0",
            "funcEndAddr": "0x4028dc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1];\n    char field_1;\n} struct_0;\n\nextern unsigned int g_40a3d8;\nextern unsigned int g_40a3e6;\nextern unsigned int g_40a408;\nextern unsigned int g_40a43e;\nextern unsigned int g_40a453;\nextern unsigned int g_40a464;\nextern unsigned int g_40a478;\nextern unsigned int g_40a491;\nextern unsigned int g_40a4a3;\nextern unsigned int g_40a4b8;\nextern unsigned int g_40b1d0;\nextern unsigned int g_40b240;\nextern unsigned int g_40b268;\nextern unsigned int g_40b298;\nextern int512_t g_40b580;\nextern unsigned int g_40cccf;\nextern unsigned int g_60f35c;\nextern unsigned long long g_60f398;\nextern unsigned long long g_60f540;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0xb8]\n    char v1;  // [bp-0xa1]\n    unsigned long v2;  // [bp-0xa0]\n    unsigned int v3;  // [bp-0x98]\n    unsigned int v4;  // [bp-0x94]\n    void *v5;  // [bp-0x90]\n    unsigned long|unsigned long long|char v6;  // [bp-0x88]\n    void *v7;  // [bp-0x80]\n    void *v8;  // [bp-0x78]\n    void *v9;  // [bp-0x70]\n    void *v10;  // [bp-0x68]\n    unsigned long long *v11;  // [bp-0x60]\n    void|uint128_t|char v12;  // [bp-0x58]\n    unsigned long|unsigned long long v13;  // [bp-0x50]\n    unsigned long|void|uint128_t|unsigned long long v14;  // [bp-0x48]\n    unsigned int v15;  // [bp-0x40]\n    char v16;  // [bp-0x3c]\n    char v17;  // [bp-0x3b]\n    char v18;  // [bp-0x3a]\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // rsi\n    unsigned long long v22;  // rbx\n    unsigned long long v25;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // r14\n    char *v30;  // rdi\n    unsigned long long v35;  // rbx\n    char *v37;  // r12\n    char *v38;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // cc_dep1\n    unsigned long v43;  // d\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // rax\n    unsigned long|unsigned int v46;  // r14\n    unsigned long long v47;  // rax\n    unsigned int *v48;  // r13\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // rax\n    void *v53;  // rbx\n    unsigned long long v55;  // r14\n    unsigned long v56;  // rdx\n    char *v60;  // rbp\n    struct_0 *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long v67;  // rax\n    unsigned long long|void * v68;  // rbp\n    unsigned long|unsigned long long v69;  // r13\n    unsigned long long *v70;  // r15\n\n    v20 = 0;\n    v22 = v21;\n    v12 = 0;\n    v14 = 0;\n    sub_4051c0();\n    setlocale(0x6, 0x40cccf);\n    bindtextdomain(0x40a3d8, 0x40b1d0);\n    textdomain(0x40a3d8);\n    sub_40a210();\n    v13 = 3;\n    v14 = -1;\n    while (true)\n    {\n        v25 = sub_4099c0();\n        if ((unsigned int)v25 == -1)\n        {\n            v28 = (int)g_60f35c;\n            if ((unsigned int)v30 != g_60f35c)\n            {\n                g_60f398 = (unsigned int)sub_406e30();\n                if (g_60f398 != 0)\n                {\n                    sub_40a210();\n                    if ((unsigned int)v30 - g_60f35c > 0)\n                    {\n                        v70 = v22 + v28 * 8;\n                        v1 = 1;\n                        v4 = v25;\n                        v2 = v22 + ((unsigned long long)((unsigned int)v30 - g_60f35c) - 1 + v28) * 8 + 8;\n                        while (true)\n                        {\n                            sub_406c60();\n                            v37 = *(v70);\n                            v68 = (unsigned long long)(unsigned int)sub_408470();\n                            v38 = *(v70);\n                            while (rcx<8> != 0)\n                            {\n                                v40 = rcx<8> - 1;\n                                v41 = *(v38);\n                                v30 = &v30[v43];\n                                v38 = &v38[v43];\n                                break;\n                            }\n                            v44 = (v41 > *(v30)) - 0 - (v41 < *(v30));\n                            if ((char)v44 == 0)\n                            {\n                                v45 = sub_408a90();\n                                if ((unsigned int)v45 < 0)\n                                {\n                                    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a453, 0x5));\n                                    v47 = 0;\n                                }\n                                else if ((v45 & 4) == 0)\n                                {\n                                    v47 = sub_4033d0();\n                                }\n                                else\n                                {\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b268, 0x5));\n                                    v47 = 0;\n                                }\n                                *((unsigned long long *)&v1) = v1 & v47;\n                            }\n                            else\n                            {\n                                v46 = (unsigned int)sub_4044d0();\n                                if ((unsigned int)v46 < 0)\n                                {\n                                    v48 = __errno_location();\n                                    if (*(v48) == 13 && (char)v12 != 0)\n                                    {\n                                        v49 = chmod((unsigned int)v37, 0x80);\n                                        if (v49 == 0)\n                                        {\n                                            v50 = sub_4044d0();\n                                            v46 = v50;\n                                        }\n                                    }\n                                    if ((unsigned int)v50 < 0 || (char)v12 == 0 || *(v48) != 13 || v49 != 0)\n                                    {\n                                        v69 = 0;\n                                        error(0x0, *(v48), (unsigned long long)dcgettext(0x0, 0x40b298, 0x5));\n                                    }\n                                }\n                                if ((unsigned int)v46 >= 0 || *(v48) == 13 && v49 == 0 && (unsigned int)v50 >= 0 && (char)v12 != 0)\n                                {\n                                    v69 = (unsigned int)sub_4033d0();\n                                    v51 = close(v46);\n                                    if (v51 != 0)\n                                    {\n                                        v69 = 0;\n                                        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a464, 0x5));\n                                    }\n                                    else if (v69 != 0)\n                                    {\n                                        if ((int)(&v14)[8] != 0)\n                                        {\n                                            v8 = (unsigned long long)(unsigned int)sub_408470();\n                                            v53 = (unsigned long long)(unsigned int)sub_404440();\n                                            v10 = (unsigned long long)(unsigned int)sub_404360();\n                                            sub_406c60();\n                                            v5 = (unsigned long long)(unsigned int)sub_408470();\n                                            v3 = v4;\n                                            if ((int)(&v14)[8] == 3)\n                                            {\n                                                v3 = sub_4044d0();\n                                            }\n                                            if ((char)(&v14)[12] != 0)\n                                            {\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a478, 0x5));\n                                            }\n                                            if ((int)(&v14)[8] != 1)\n                                            {\n                                                v6 = v69;\n                                                v55 = (unsigned long long)(unsigned int)sub_4044a0() - 1;\n                                                v9 = v68;\n                                                v11 = v70;\n                                                v7 = (char *)v53 + -0x1 * v8 + v37;\n                                                while (true)\n                                                {\n                                                    v56 = v55 + 1;\n                                                    if (v55 == -1)\n                                                    {\n                                                        break;\n                                                    }\n                                                    memset(v53, 0x30, v56);\n                                                    *(&((char *)v53)[1 + v55]) = 0;\n                                                    while (true)\n                                                    {\n                                                        if (!(sub_407a00() != 0))\n                                                        {\n                                                            if (v3 >= 0)\n                                                            {\n                                                                v69 = (unsigned int)(sub_402a60() != 0? 0 : (unsigned int)r13<8>);\n                                                            }\n                                                            if ((char)(&v14)[12] != 0)\n                                                            {\n                                                                *((int *)&v6) = ((char)v6 == 0? v37 : (long long)(stack_base)[-112]);\n                                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a491, 0x5));\n                                                                v6 = 0;\n                                                            }\n                                                            memcpy(v7, v53, v55 + 2);\n                                                        }\n                                                        else if (*(__errno_location()) == 17)\n                                                        {\n                                                            v60 = v53 + v55;\n                                                            while (true)\n                                                            {\n                                                                v61 = strchr(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.\", *(v60));\n                                                                if (v61 != 0)\n                                                                {\n                                                                    v62 = v61->field_1;\n                                                                    if (v62 == 0)\n                                                                    {\n                                                                        *(v60) = 48;\n                                                                        v63 = &v60[-1];\n                                                                        if (v53 == v60)\n                                                                        {\n                                                                            break;\n                                                                        }\n                                                                        v60 = v63;\n                                                                    }\n                                                                    else\n                                                                    {\n                                                                        *((unsigned long long *)&v60) = v62;\n                                                                    }\n                                                                }\n                                                                else\n                                                                {\n                                                                    __assert_fail(); /* do not return */\n                                                                }\n                                                            }\n                                                            if (v62 == 0 && v61 != 0)\n                                                            {\n                                                                v55 -= 1;\n                                                            }\n                                                        }\n                                                        v55 -= 1;\n                                                    }\n                                                }\n                                                v70 = v11;\n                                                v68 = v9;\n                                            }\n                                            if (unlink(v37) != 0)\n                                            {\n                                                v69 = 0;\n                                                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a4a3, 0x5));\n                                            }\n                                            else if ((char)(&v14)[12] != 0)\n                                            {\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a4b8, 0x5));\n                                            }\n                                            if (v3 >= 0)\n                                            {\n                                                v69 = (unsigned int)(sub_402a60() != 0? 0 : (unsigned int)r13<8>);\n                                                v67 = close(v3);\n                                                if (v67 != 0)\n                                                {\n                                                    v69 = 0;\n                                                    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a464, 0x5));\n                                                }\n                                            }\n                                            free(v8);\n                                            free(v10);\n                                            free(v5);\n                                        }\n                                    }\n                                }\n                                *((unsigned long long *)&v1) = v1 & v69;\n                            }\n                            v70 = &v70[1];\n                            free(v68);\n                            if (v2 == v70)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v1 = 1;\n                    }\n                }\n                else\n                {\n                    v35 = (unsigned int)sub_406c60();\n                    error(0x1, *(__errno_location()), \"%s\");\n                }\n            }\n            else\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a43e, 0x5));\n            }\n        }\n        else if ((unsigned int)v25 != 115)\n        {\n            if (v25 > 115)\n            {\n                if ((unsigned int)v25 == 120)\n                {\n                    v17 = 1;\n                }\n                else if (v25 <= 120)\n                {\n                    if ((unsigned int)v25 == 117)\n                    {\n                        if (g_60f540 != 0)\n                        {\n                            v15 = *((int *)&((char *)&g_40b580)[4 * (unsigned long long)(unsigned int)sub_4041e0()]);\n                        }\n                        else\n                        {\n                            v15 = 3;\n                        }\n                    }\n                    if ((unsigned int)v25 == 118)\n                    {\n                        v16 = 1;\n                    }\n                }\n                else\n                {\n                    if ((unsigned int)v25 == 122)\n                    {\n                        v18 = 1;\n                    }\n                    if ((unsigned int)v25 == 128)\n                    {\n                        if (v20 != 0)\n                        {\n                            v27 = strcmp(v20, g_60f540);\n                            if (v27 != 0)\n                            {\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40b240, 0x5));\n                            }\n                        }\n                        if (v20 == 0 || v27 == 0)\n                        {\n                            v20 = g_60f540;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if ((unsigned int)v25 == -130)\n                {\n                    sub_403ac0(); /* do not return */\n                }\n                else if (v25 > -18446744069414584450)\n                {\n                    if ((unsigned int)v25 == 102)\n                    {\n                        v12 = 1;\n                    }\n                    if ((unsigned int)v25 == 110)\n                    {\n                        dcgettext(0x0, 0x40a3e6, 0x5);\n                        v13 = (unsigned int)sub_4085a0();\n                    }\n                }\n                else if ((unsigned int)v25 == -131)\n                {\n                    sub_408100();\n                    exit(0x0); /* do not return */\n                }\n            }\n        }\n        if ((unsigned int)v25 == 115)\n        {\n            dcgettext(0x0, 0x40a408, 0x5);\n            v0 = 0;\n            v14 = (unsigned int)sub_4084d0();\n        }\n        if ((unsigned int)v25 == -1 && (unsigned int)v30 == g_60f35c || v25 <= -18446744069414584450 && v25 <= 115 && (unsigned int)v25 != -130 && (unsigned int)v25 != -131 && (unsigned int)v25 != 115 && (unsigned int)v25 != -1 || v25 <= 120 && (unsigned int)v25 != 118 && v25 > 115 && (unsigned int)v25 != 117 && (unsigned int)v25 != 120 && (unsigned int)v25 != 115 && (unsigned int)v25 != -1 || v25 <= 115 && v25 > -18446744069414584450 && (unsigned int)v25 != -130 && (unsigned int)v25 != 110 && (unsigned int)v25 != 115 && (unsigned int)v25 != 102 && (unsigned int)v25 != -1 || v25 > 120 && v25 > 115 && (unsigned int)v25 != 122 && (unsigned int)v25 != 128 && (unsigned int)v25 != 120 && (unsigned int)v25 != 115 && (unsigned int)v25 != -1)\n        {\n            sub_403ac0(); /* do not return */\n        }\n    }\n    return (unsigned int)v1 ^ 1;\n}\n"
        },
        {
            "funcName": "sub_4099e0",
            "funcStartAddr": "0x4099e0",
            "funcEndAddr": "0x4099f5",
            "decompiledFuncCode": "int sub_4099e0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409370();\n}\n"
        },
        {
            "funcName": "sub_406d50",
            "funcStartAddr": "0x406d50",
            "funcEndAddr": "0x406d67",
            "decompiledFuncCode": "int sub_406d50()\n{\n}\n"
        },
        {
            "funcName": "sub_408290",
            "funcStartAddr": "0x408290",
            "funcEndAddr": "0x408292",
            "decompiledFuncCode": "int sub_408290()\n{\n}\n"
        },
        {
            "funcName": "sub_409b20",
            "funcStartAddr": "0x409b20",
            "funcEndAddr": "0x409ba9",
            "decompiledFuncCode": "int sub_409b20()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned int v6;  // r12d\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned int v10;  // ebp\n    unsigned long long v12;  // rax\n\n    v9 = fopen(v2, v3);\n    if (v9 != 0)\n    {\n        v4 = fileno(v9);\n        if (v4 <= 2)\n        {\n            v5 = sub_40a190();\n            v6 = v5;\n            if ((unsigned int)v5 >= 0)\n            {\n                v7 = sub_408a10();\n                if (v7 == 0)\n                {\n                    v9 = fdopen(v6, v3);\n                }\n                if (v9 == 0 || v7 != 0)\n                {\n                    v10 = *((int *)v9);\n                    close(v6);\n                    *(__errno_location()) = v10;\n                    v9 = 0;\n                }\n            }\n            else\n            {\n                v9 = 0;\n                sub_408a10();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v12 = v9;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_4042c0",
            "funcStartAddr": "0x4042c0",
            "funcEndAddr": "0x40435e",
            "decompiledFuncCode": "extern unsigned int g_40b61f;\nextern unsigned int g_60f2e0;\nextern char g_60f3a0;\nextern unsigned long long g_60f3a8;\n\nint sub_4042c0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_409ac0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_60f3a0 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40b61f, 0x5);\n            if (g_60f3a8 != 0)\n            {\n                sub_406c30();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_60f3a0 != 0)\n    {\n        v3 = sub_409ac0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_60f3a0 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_60f2e0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_4067f0",
            "funcStartAddr": "0x4067f0",
            "funcEndAddr": "0x40681b",
            "decompiledFuncCode": "extern char g_60f4c0;\n\nint sub_4067f0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_60f4c0 : v2);\n    *((int *)(tmp_11? &g_60f4c0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_60f4c0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_60f4c0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409a00",
            "funcStartAddr": "0x409a00",
            "funcEndAddr": "0x409a16",
            "decompiledFuncCode": "int sub_409a00()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409940();\n}\n"
        },
        {
            "funcName": "sub_405170",
            "funcStartAddr": "0x405170",
            "funcEndAddr": "0x4051b4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_405170()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_406ba0",
            "funcStartAddr": "0x406ba0",
            "funcEndAddr": "0x406baf",
            "decompiledFuncCode": "int sub_406ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_403f20",
            "funcStartAddr": "0x403f20",
            "funcEndAddr": "0x404023",
            "decompiledFuncCode": "int sub_403f20()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (v0 == -1 || *((long long *)(v5 + (v12 << 3))) == 0) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_406f99",
            "funcStartAddr": "0x406f99",
            "funcEndAddr": "0x406fe1",
            "decompiledFuncCode": "int sub_406f99()\n{\n    unsigned long long v0;  // [bp+0x0]\n    unsigned long long v2;  // [bp+0x10]\n    unsigned long long v3;  // [bp+0x18]\n    unsigned int v4;  // [bp+0x100008]\n    void *v5;  // rbx\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // r12\n    unsigned long long v8;  // r13\n\n    __explicit_bzero_chk();\n    free(v5);\n    *(__errno_location()) = v4;\n    v6 = v0;\n    v7 = v2;\n    v8 = v3;\n    return sub_4074c0();\n}\n"
        },
        {
            "funcName": "sub_406e60",
            "funcStartAddr": "0x406e60",
            "funcEndAddr": "0x406e64",
            "decompiledFuncCode": "int sub_406e60()\n{\n    unsigned long long *v1;  // rdi\n\n    return *(v1);\n}\n"
        },
        {
            "funcName": "sub_4044a0",
            "funcStartAddr": "0x4044a0",
            "funcEndAddr": "0x4044c7",
            "decompiledFuncCode": "int sub_4044a0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408310",
            "funcStartAddr": "0x408310",
            "funcEndAddr": "0x408388",
            "decompiledFuncCode": "int sub_408310() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402b20",
            "funcStartAddr": "0x402b20",
            "funcEndAddr": "0x403389",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_0;\n\nextern unsigned int g_40a28a;\nextern unsigned int g_40a29c;\nextern unsigned int g_40a2b5;\nextern unsigned int g_40a2c8;\nextern unsigned int g_40a2d9;\nextern unsigned int g_40a2f4;\nextern unsigned int g_40a518;\nextern unsigned int g_40a538;\nextern char g_40cccf;\n\nint sub_402b20()\n{\n    void tmp_9;  // tmp #9\n    void tmp_3;  // tmp #3\n    void tmp_7;  // tmp #7\n    unsigned long v0;  // [bp-0x878]\n    unsigned long v1;  // [bp-0x870]\n    unsigned long v2;  // [bp-0x868]\n    unsigned long v3;  // [bp-0x860]\n    unsigned long long v4;  // [bp-0x858]\n    unsigned long|char v5;  // [bp-0x850]\n    unsigned long v6;  // [bp-0x848]\n    char v7;  // [bp-0x83d]\n    unsigned long long v8;  // [bp-0x838]\n    unsigned int *|unsigned int v9;  // [bp-0x830]\n    void *v10;  // [bp-0x828]\n    unsigned long v11;  // [bp-0x820]\n    unsigned long|char * v12;  // [bp-0x810]\n    unsigned long|unsigned long long v13;  // [bp-0x808]\n    unsigned long v14;  // [bp-0x800]\n    unsigned int|char v15;  // [bp-0x7ef]\n    unsigned short v16;  // [bp-0x7eb]\n    char v17;  // [bp-0x7e9]\n    char v18;  // [bp-0x7e8]\n    unsigned short v19;  // [bp-0x2c8]\n    unsigned int v20;  // [bp-0x2c4]\n    unsigned long v22;  // [bp+0x10]\n    unsigned long v23;  // rdi\n    unsigned int v24;  // r12d\n    unsigned int|unsigned long long * v25;  // rcx\n    unsigned long v26;  // rdx\n    unsigned long v27;  // r9\n    unsigned long long v28;  // r14\n    unsigned int v29;  // r8d\n    unsigned long long v30;  // rbx\n    unsigned long long v31;  // r15\n    unsigned long long v32;  // rbx\n    void *v33;  // rax\n    unsigned long long v34;  // rbx\n    struct_0 *v36;  // rsi\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long long v40;  // rbx\n    unsigned long v41;  // cc_ndep\n    unsigned long v42;  // rbp\n    unsigned long long v43;  // r15\n    void *v44;  // rdi\n    unsigned long long v45;  // rdx\n    unsigned long long v48;  // rax\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // rbp\n    unsigned long long v53;  // r15\n    unsigned long long v54;  // rax\n    unsigned int *v55;  // rax\n    unsigned long long v57;  // r9\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // r13\n    unsigned long long|unsigned int v60;  // r14\n    unsigned long long v61;  // r13\n    unsigned long long v62;  // r15\n    unsigned long long v63;  // r15\n    char *v64;  // rbp\n    unsigned long long v65;  // rax\n    unsigned int v66;  // r9d\n    unsigned long long v67;  // rax\n    unsigned long long v69;  // rax\n    char *v70;  // rdx\n    unsigned long long v71;  // rbx\n    unsigned int *v72;  // rax\n    unsigned long long v73;  // rax\n    void *v74;  // rdi\n\n    v24 = v23;\n    v61 = *(v25);\n    v6 = v26;\n    v11 = v27;\n    v28 = getpagesize();\n    if (v29 > 0)\n    {\n        v30 = v29 & 4095;\n        if ((char)(((unsigned int)(v30 << 12) | (unsigned int)v30) >> 8) != (char)((unsigned long long)((unsigned int)(v30 << 12) | v29 & 4095) >> 4) || (char)((unsigned long long)((unsigned int)(v30 << 12) | v29 & 4095) >> 4) != (char)((unsigned int)(v30 << 12) | v29 & 4095))\n        {\n            v8 = 0xf000;\n            v31 = 0xf000;\n        }\n    }\n    if (v29 <= 0 || (char)(((unsigned int)(v30 << 12) | (unsigned int)v30) >> 8) == (char)((unsigned long long)((unsigned int)(v30 << 12) | v29 & 4095) >> 4) && (char)((unsigned long long)((unsigned int)(v30 << 12) | v29 & 4095) >> 4) == (char)((unsigned int)(v30 << 12) | v29 & 4095))\n    {\n        v8 = 0x10000;\n        v31 = 65538;\n    }\n    v32 = v28 - 1;\n    v33 = sub_408240();\n    v10 = v33;\n    tmp_9 = (0 CONCAT v32 + v33) % v28;\n    v60 = v61;\n    v34 = v32 + v33 - (unsigned long long)(tmp_9 >> 64);\n    v7 = (char)[D] amd64g_calculate_condition(0xf<64>, 0x14<64>, r14<8>, 0x0<64>, cc_ndep<8>) & v61 < v8;\n    if (((char)[D] amd64g_calculate_condition(0xf<64>, 0x14<64>, r14<8>, 0x0<64>, cc_ndep<8>) & v61 < v8) == 0)\n    {\n        sub_402a10();\n    }\n    if (((unsigned short)v36->field_18 & 0xf000) == 0x2000)\n    {\n        v19 = 6;\n        v20 = 1;\n        v37 = ioctl(v23, 0x40086d01, (unsigned int)&v19);\n    }\n    if (v37 != 0 || ((unsigned short)v36->field_18 & 0xf000) != 0x2000)\n    {\n        v38 = lseek(v23, 0x0, 0x0);\n        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            *((int *)v34) = 22;\n            v34 = __errno_location();\n            v70 = (unsigned long long)dcgettext(0x0, 0x40a28a, 0x5);\n        }\n    }\n    if (false)\n    {\n        v40 = __errno_location();\n    }\n    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v37 == 0 && ((unsigned short)v36->field_18 & 0xf000) == 0x2000)\n    {\n        if (v29 >= 0)\n        {\n            v25 = v29 & 4095;\n            v41 = [D] amd64g_calculate_rflags_all(0x13<64>, Conv(32->64, ((Conv(64->32, (Conv(32->64, r8<4>) << 0xc<8>)) & 0xfff000<32>) | rcx<4>)), 0x0<64>, cc_ndep<8>);\n            *((unsigned short *)(v34 + 1)) = (unsigned short)((unsigned int)((unsigned long long)v29 * 0x1000) & 0xfff000 | v25) * 0x100 | (unsigned short)((unsigned int)((unsigned long long)v29 * 0x1000) & 0xfff000 | v25) >> 8;\n            *((char *)v34) = (unsigned long long)((unsigned int)((unsigned long long)v29 * 0x1000) & 0xfff000 | v25) >> 4;\n            if (v61 < v31 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v42 = v61 % 2;\n                if (v61 >> 1 <= 2)\n                {\n                    v43 = 3;\n                }\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v60 = v31;\n                v42 = v31 % 2;\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v61 >> 1 > 2 || v61 >= v31)\n            {\n                v43 = 3;\n                while (true)\n                {\n                    v44 = v34 + v43;\n                    v45 = v43;\n                    v43 *= 2;\n                    memcpy(v44, v34, v45);\n                    if (v43 > v42)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v43 >= v60)\n            {\n            }\n            else\n            {\n                memcpy(v34 + v43, v34, v60 - v43);\n            }\n            if (((unsigned short)v29 & 0x1000) != 0 && (v43 < v60 || v60 != 0))\n            {\n                v48 = 0;\n                do\n                {\n                    *((char *)(v34 + v48)) = *((char *)(v34 + v48)) - 128;\n                    v48 += 0x200;\n                }\n                while (v48 < v60);\n            }\n            v2 = (char)*((char *)(v34 + 2));\n            __sprintf_chk((unsigned int)&v15, 0x1, 0x7, 0x40a2f4, (char)*((char *)v34), (char)*((char *)(v34 + 1)));\n        }\n        else\n        {\n            v15 = 1684955506;\n            v16 = 28015;\n            v17 = 0;\n        }\n        if (v22 != 0)\n        {\n            v2 = &v15;\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a29c, 0x5));\n            v14 = time(NULL) + 5;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v37 == 0 && ((unsigned short)v36->field_18 & 0xf000) == 0x2000)\n    {\n        v12 = &g_40cccf;\n        v5 = 0;\n        v13 = 0;\n        v4 = 0;\n        while (true)\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v50 = v4;\n                v51 = v61 - v4;\n                if (v61 - v4 < v8 && (v51 == 0 || v61 < v50))\n                {\n                    v69 = sub_402a60();\n                    if (v69 != 0)\n                    {\n                        v72 = __errno_location();\n                        v74 = v10;\n                        if (*(v72) != 5)\n                        {\n                            break;\n                        }\n                        free(v10);\n                        v73 = 1;\n                    }\n                    else\n                    {\n                        free(v10);\n                        v73 = v5;\n                    }\n                }\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v61 - v4 >= v8)\n            {\n                v51 = v8;\n            }\n            if ((unsigned int)&v15 < 0 && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v61 - v4 >= v8 || v51 != 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v61 - v4 >= v8 || v61 >= v50))\n            {\n                sub_407360();\n            }\n            if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v61 - v4 >= v8 || v51 != 0 && v61 >= v50)\n            {\n                v53 = v61;\n                v59 = 0;\n                while (true)\n                {\n                    v54 = write(v24, tmp_3 - (unsigned long long)(tmp_9 >> 64) + v59, v51 - v59);\n                    if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        v59 += v54;\n                    }\n                    else\n                    {\n                        if (v54 != 0)\n                        {\n                            v55 = __errno_location();\n                            v60 = *(v55);\n                            if (*(v55) != 28)\n                            {\n                                if (v7 == 0 && v60 == 22)\n                                {\n                                    sub_402a10();\n                                    v7 = 1;\n                                }\n                                if (v7 != 0 || v60 != 22)\n                                {\n                                    v71 = (unsigned int)sub_405170();\n                                    error(0x0, v60, (unsigned long long)dcgettext(0x0, 0x40a518, 0x5));\n                                }\n                            }\n                        }\n                        if (*(v55) == 28 || v54 == 0)\n                        {\n                            v62 = v59;\n                            if (9223372036854775807 - v4 >= v59)\n                            {\n                                v63 = v62 + v4;\n                                v61 = v63;\n                                v4 = v63;\n                                *(v25) = v63;\n                                if (v22 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (false)\n                    {\n                        v9 = __errno_location();\n                        v60 = *(v9);\n                        v5 = (unsigned int)sub_405170();\n                        error(0x0, *(v9), (unsigned long long)dcgettext(0x0, 0x40a518, 0x5));\n                        if (*(v9) != 5)\n                        {\n                            break;\n                        }\n                        v57 = v59 | 511;\n                        if ((v59 | 511) >= v51)\n                        {\n                            break;\n                        }\n                        v59 = v57 + 1;\n                        v58 = lseek(v24, v4 + v57 + 1, 0x0);\n                        v5 = 1;\n                        error(0x0, *(v9), (unsigned long long)dcgettext(0x0, 0x40a2c8, 0x5));\n                    }\n                    if (v51 <= v59 && (v7 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (v60 == 22 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v55) != 28) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v54 != 0))\n                    {\n                        tmp_7 = v59;\n                        v61 = v53;\n                        if (9223372036854775807 - v4 >= tmp_7)\n                        {\n                            v63 = tmp_7 + 0;\n                            v4 = tmp_7 + 0;\n                            if (v22 == 0)\n                            {\n                                break;\n                            }\n                            if (v22 != 0 && v61 != tmp_7)\n                            {\n                                v13 = time(NULL);\n                                if (v14 > v13)\n                                {\n                                    break;\n                                }\n                                v64 = (unsigned long long)(unsigned int)sub_4045e0();\n                                v65 = strcmp(v12, v64);\n                                if (v65 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) && (*(v55) == 28 || v54 == 0) && 9223372036854775807 - v4 < v59 || v51 <= v59 && (v7 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (v60 == 22 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v55) != 28) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v54 != 0) && 9223372036854775807 - v4 < tmp_7)\n                    {\n                        v70 = (unsigned long long)dcgettext(0x0, 0x40a2b5, 0x5);\n                    }\n                    if (v51 <= v59 && (v7 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (v60 == 22 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v55) != 28) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v54 != 0) && 9223372036854775807 - v4 >= tmp_7 && v22 != 0 && v61 == tmp_7 || (char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) && 9223372036854775807 - v4 >= v59 && (*(v55) == 28 || v54 == 0) && v22 != 0)\n                    {\n                        if (*(v12) == 0)\n                        {\n                            v13 = time(NULL);\n                            if (v14 > v13)\n                            {\n                                break;\n                            }\n                        }\n                        v64 = (unsigned long long)(unsigned int)sub_4045e0();\n                    }\n                    if (v51 <= v59 && (v7 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (v60 == 22 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v55) != 28) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v54 != 0) && 9223372036854775807 - v4 >= tmp_7 && v22 != 0 && v61 != tmp_7 && v65 != 0 || v51 <= v59 && (v7 == 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (v60 == 22 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || *(v55) != 28) && (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) || v54 != 0) && 9223372036854775807 - v4 >= tmp_7 && v22 != 0 && v61 == tmp_7 || (char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) && 9223372036854775807 - v4 >= v59 && (*(v55) == 28 || v54 == 0) && v22 != 0)\n                    {\n                        if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                        {\n                            v66 = 100;\n                            if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                            {\n                                if (v63 <= 184467440737095516)\n                                {\n                                    v66 = (0 CONCAT v63 * 100) % v61;\n                                }\n                                else\n                                {\n                                    v66 = (0 CONCAT v63) % (((11805916207174113035 * v61 >> 64) + v61 >> 6) - (v61 >> 63));\n                                }\n                            }\n                            v9 = v66;\n                            v64 = (v61 == v63? v60 : rbp<8>);\n                            v3 = v9;\n                            v2 = (unsigned int)sub_4045e0();\n                            v1 = v64;\n                            v0 = &v15;\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a538, 0x5));\n                        }\n                        else\n                        {\n                            v3 = v64;\n                            v2 = &v15;\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a2d9, 0x5));\n                        }\n                        __strcpy_chk((unsigned int)&v18, (unsigned int)v64, 0x28c);\n                        v14 = v13 + 5;\n                        v67 = sub_402a60();\n                        if (v67 != 0)\n                        {\n                            if (*(__errno_location()) != 5)\n                            {\n                                break;\n                            }\n                            v5 = 1;\n                            v12 = &v18;\n                        }\n                        else\n                        {\n                            v12 = &v18;\n                        }\n                    }\n                }\n                if (...)\n                {\n                    v74 = v10;\n                }\n                else if ((9223372036854775807 - v4 < tmp_7 || 9223372036854775807 - v4 < v59) && (v51 <= v59 || 9223372036854775807 - v4 < v59) && (9223372036854775807 - v4 < tmp_7 || *(v55) == 28 || v54 == 0) && (v51 <= v59 || *(v55) == 28 || v54 == 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || 9223372036854775807 - v4 < tmp_7 || v54 != 0) && ((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v51 <= v59 || v54 != 0))\n                {\n                    error(0x0, v36, v70);\n                }\n            }\n        }\n        if (true)\n        {\n            v74 = v10;\n        }\n        else if (true)\n        {\n            error(0x0, v36, v70);\n        }\n        else if (v61 - v4 < v8 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v69 != 0 && (v51 == 0 || v61 < v50))\n        {\n            free(v74);\n            v73 = -18446744069414584321;\n        }\n        else if (v61 - v4 < v8 && !((char)[D] amd64g_calculate_condition(0x4<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && (v69 == 0 || *(v72) == 5) && (v51 == 0 || v61 < v50))\n        {\n            return v73;\n        }\n    }\n    error(0x0, v36, v70);\n    v74 = v10;\n    free(v74);\n    v73 = -18446744069414584321;\n    return v73;\n}\n"
        },
        {
            "funcName": "sub_405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x40533f",
            "decompiledFuncCode": "extern int512_t g_40b726;\nextern int512_t g_40b72a;\n\nint sub_405260()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_409c20();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40b726 : 4241201);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40b72a : 4241197);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_406f70",
            "funcStartAddr": "0x406f70",
            "funcEndAddr": "0x406f8e",
            "decompiledFuncCode": "int sub_406f70()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __explicit_bzero_chk();\n}\n"
        },
        {
            "funcName": "sub_406a40",
            "funcStartAddr": "0x406a40",
            "funcEndAddr": "0x406a51",
            "decompiledFuncCode": "int sub_406a40()\n{\n}\n"
        },
        {
            "funcName": "sub_406dc0",
            "funcStartAddr": "0x406dc0",
            "funcEndAddr": "0x406dd1",
            "decompiledFuncCode": "int sub_406dc0()\n{\n}\n"
        },
        {
            "funcName": "sub_404360",
            "funcStartAddr": "0x404360",
            "funcEndAddr": "0x404378",
            "decompiledFuncCode": "int sub_404360()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_4043e0();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_408490(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_402a10",
            "funcStartAddr": "0x402a10",
            "funcEndAddr": "0x402a59",
            "decompiledFuncCode": "int sub_402a10()\n{\n    unsigned long long v1;  // rax\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rcx\n\n    v1 = sub_408a90();\n    if ((unsigned int)v1 <= 0 || ((char)v2 != 0? (unsigned int)v3 : (unsigned int)rdx<8>) == (unsigned int)v1)\n    {\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4033d0",
            "funcStartAddr": "0x4033d0",
            "funcEndAddr": "0x403a84",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n    char field_1c;\n    char field_1d;\n    char field_1e;\n} struct_0;\n\nextern unsigned int g_40a301;\nextern unsigned int g_40a312;\nextern unsigned int g_40a328;\nextern unsigned int g_40a343;\nextern unsigned long long g_40b340;\nextern unsigned long long g_40b344;\n\nint sub_4033d0()\n{\n    unsigned long long v0;  // [bp-0x138]\n    unsigned long long v1;  // [bp-0x130]\n    unsigned long|unsigned long long v2;  // [bp-0x120]\n    unsigned long long|unsigned int|char v3;  // [bp-0x118]\n    unsigned long v4;  // [bp-0x110]\n    unsigned long|unsigned long long v5;  // [bp-0x108]\n    unsigned long|unsigned long long v6;  // [bp-0x100]\n    unsigned long long v7;  // [bp-0xf8]\n    unsigned long|unsigned long long v8;  // [bp-0xf0]\n    char v9;  // [bp-0xe5]\n    unsigned int v10;  // [bp-0xe4]\n    struct_0 *v11;  // [bp-0xe0]\n    unsigned long v12;  // [bp-0xd0]\n    char v13;  // [bp-0xc8]\n    unsigned int v14;  // [bp-0xb0]\n    unsigned long long v15;  // [bp-0x98]\n    unsigned long v18;  // rdi\n    unsigned long|unsigned long long|unsigned int v19;  // rbp\n    struct_0 *v20;  // rcx\n    unsigned long v21;  // rsi\n    unsigned long v22;  // rdx\n    unsigned long long v23;  // rax\n    unsigned long|unsigned int v24;  // rax\n    unsigned long v25;  // rax\n    unsigned long long v27;  // r13\n    unsigned long v29;  // rdx\n    unsigned long long v33;  // rdx\n    unsigned long long v34;  // r9\n    unsigned long|unsigned int v35;  // rax\n    unsigned long long v36;  // rbx\n    unsigned int *|unsigned long long|void * v37;  // r12\n    unsigned long long v38;  // r14\n    unsigned long v39;  // r15\n    unsigned long long v40;  // rax\n    unsigned long v41;  // rbp\n    void *v42;  // rsi\n    unsigned long long v43;  // r14\n    unsigned long long v44;  // r12\n    unsigned long long v45;  // r12\n    unsigned long long v46;  // r14\n    unsigned long long v47;  // rbx\n    unsigned long v48;  // rbp\n    unsigned long long v50;  // rcx\n    struct_0 *v51;  // rbx\n    unsigned long|unsigned int v52;  // rbp\n    unsigned long long v53;  // r14\n    unsigned long long v54;  // r8\n    unsigned long long v55;  // rbx\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // r12\n    unsigned int v58;  // r9d\n    unsigned int *v59;  // rax\n    struct_0 *v60;  // rbx\n    unsigned long long v61;  // r14\n    unsigned long long v63;  // rdx\n    struct_0 *v64;  // r13\n    unsigned long long v65;  // rbx\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rdx\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n\n    v19 = v18;\n    v60 = v20;\n    v4 = v21;\n    v2 = v22;\n    v6 = 0;\n    if (v20->field_1c != 0)\n    {\n        v6 = v20->field_1e + v20->field_8;\n    }\n    v24 = __fxstat(0x1, v18, (unsigned int)&v13);\n    if (v24 == 0)\n    {\n        v24 = v14 & 0xf000;\n        if (((unsigned short)v14 & 0xf000) == 0x2000)\n        {\n            v23 = isatty(v18);\n            if (v23 == 0)\n            {\n                v24 = v14 & 0xf000;\n            }\n        }\n        if (v23 == 0 || ((unsigned short)v14 & 0xf000) != 0x2000)\n        {\n            v9 = v24 == 0xc000 | (unsigned int)v24 == 0x1000;\n            if ((unsigned int)v24 != 0x1000 && v24 != 0xc000)\n            {\n                if (v24 != 0x8000 || !((char)(v15 - 0 >> 63)))\n                {\n                    v25 = [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x3e<8>), Shr(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x3d<8>), cc_ndep<8>);\n                    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)) && v25 == 0)\n                    {\n                        v27 = (unsigned int)sub_408240();\n                        v5 = v60->field_10;\n                        if (v60->field_10 != -1)\n                        {\n                            v7 = v60->field_8;\n                            if (((unsigned short)v14 & 0xf000) != 0x8000)\n                            {\n                                v8 = 0;\n                            }\n                            else\n                            {\n                                v8 = v15;\n                                if (v15 >= (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) && v7 != 0)\n                                {\n                                    v8 = 0;\n                                }\n                            }\n                            if (v7 == 0 && (v15 >= (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) || ((unsigned short)v14 & 0xf000) != 0x8000))\n                            {\n                                sub_406e60();\n                                v3 = 1;\n                            }\n                        }\n                        else if (((unsigned short)v14 & 0xf000) == 0x8000)\n                        {\n                            v5 = v15;\n                            v3 = v60->field_1d;\n                            v7 = v60->field_8;\n                            if (v60->field_1d == 0)\n                            {\n                                v29 = (v8 >> 63 CONCAT v8) % (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) >> 64;\n                                if ((!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) > v8)\n                                {\n                                    v8 = v15;\n                                }\n                                if (v8 == 0 || (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) <= v8)\n                                {\n                                    v8 = 0;\n                                }\n                                if ((v15 >> 63 CONCAT v15) % (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) >> 64 != 0)\n                                {\n                                    v5 += (9223372036854775807 - v5 <= (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) - v29? 9223372036854775807 - v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) - ((v15 >> 63 CONCAT v15) % (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144]) >> 64));\n                                }\n                            }\n                            else\n                            {\n                                v8 = 0;\n                                if (v7 == 0)\n                                {\n                                    sub_406e60();\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)))\n                            {\n                                v5 = lseek(v18, 0x0, 0x2);\n                                v8 = 0;\n                                v7 = v60->field_8;\n                            }\n                            else\n                            {\n                                v8 = 0;\n                                v7 = v60->field_8;\n                            }\n                            if (((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>) || v60->field_8 == 0) && (v60->field_8 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>))))\n                            {\n                                sub_406e60();\n                                v33 = 0;\n                                v3 = 1;\n                            }\n                        }\n                        if (((unsigned short)v14 & 0xf000) == 0x8000 && v60->field_10 == -1 && v60->field_1d != 0 && v7 != 0 || v60->field_10 == -1 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)) && ((unsigned short)v14 & 0xf000) != 0x8000 && v60->field_8 != 0 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>) && v60->field_10 == -1 && ((unsigned short)v14 & 0xf000) != 0x8000 && v60->field_8 != 0 || ((unsigned short)v14 & 0xf000) == 0x8000 && v7 != 0 && v15 >= (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) && v60->field_10 != -1 || ((unsigned short)v14 & 0xf000) == 0x8000 && (v15 < (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) || v60->field_10 == -1) && (v60->field_1d == 0 || v60->field_10 != -1) && v7 != 0 || ((unsigned short)v14 & 0xf000) != 0x8000 && v60->field_10 != -1 && v7 != 0)\n                        {\n                            v34 = v27;\n                            v11 = v60;\n                            v35 = -18446744069414584322;\n                            v36 = v7;\n                            v10 = v18;\n                            v37 = &g_40b340;\n                            v38 = 0;\n                            while (true)\n                            {\n                                if ((unsigned int)v35 == 0)\n                                {\n                                    v35 = -2;\n                                    v37 = &g_40b344;\n                                }\n                                else\n                                {\n                                    v37 = &v37[1];\n                                    if ((unsigned int)v35 >= 0)\n                                    {\n                                        v39 = v35;\n                                        if (v35 <= v36)\n                                        {\n                                            v41 = v39 * 4;\n                                            v42 = v37;\n                                            v36 -= v39;\n                                            v37 += v39 * 4;\n                                            v34 = memcpy(v34, v42, v39 * 4) + v41;\n                                        }\n                                        else\n                                        {\n                                            v3 = v38;\n                                            v43 = v37;\n                                            v44 = v36;\n                                            v52 = v10;\n                                            v51 = v11;\n                                            if (v39 <= v44 + (v44 << 1) && v44 > 1)\n                                            {\n                                                v11 = v11;\n                                                v47 = v34;\n                                                v10 = v10;\n                                                while (true)\n                                                {\n                                                    v43 += 4;\n                                                    if (v44 != v39)\n                                                    {\n                                                        v48 = v39 - 1;\n                                                    }\n                                                    if (v44 == v39 || v44 > sub_406e70())\n                                                    {\n                                                        v50 = v47 + 4;\n                                                        *((int *)v47) = *((int *)(v43 - 4));\n                                                        v44 -= 1;\n                                                        if (v44 == 1)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v47 = v50;\n                                                        v48 = v39 - 1;\n                                                    }\n                                                    v39 = v48;\n                                                }\n                                                v52 = v10;\n                                                v51 = v11;\n                                            }\n                                            if (v44 <= 1 || v39 > v44 + (v44 << 1))\n                                            {\n                                                v3 += v44;\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((unsigned int)v35 < 0 || (unsigned int)v35 == 0)\n                                {\n                                    v40 = 0 - v35;\n                                    if (v40 < v36)\n                                    {\n                                        v38 += v40;\n                                        v36 -= v40;\n                                    }\n                                    else\n                                    {\n                                        v45 = v36;\n                                        v52 = v10;\n                                        v51 = v11;\n                                        v46 = v38 + v45;\n                                        v3 = v46;\n                                    }\n                                }\n                                if (v35 <= v36 || v40 < v36)\n                                {\n                                    v35 = *(v37);\n                                }\n                                if ((unsigned int)v35 < 0 && v40 >= v36 || (unsigned int)v35 == 0 && v40 >= v36 || (unsigned int)v35 >= 0 && v35 > v36 && (unsigned int)v35 != 0)\n                                {\n                                    *((unsigned long *)&v10) = v52;\n                                    v53 = 0;\n                                    v11 = v51;\n                                    v54 = v7 - 1;\n                                    v55 = v7;\n                                    v56 = v3 - 1;\n                                    v19 = v3 - 1;\n                                    v57 = v7 - v3;\n                                    while (true)\n                                    {\n                                        v58 = *((int *)(v27 + v53 * 4));\n                                        if (v56 <= v19)\n                                        {\n                                            *((int *)(v27 + v57 * 4)) = v3;\n                                            v57 += 1;\n                                            *((int *)(v27 + v53 * 4)) = -1;\n                                            v53 += 1;\n                                            v56 = v56 + v7 - v19;\n                                            if (v53 == v55)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v7 = v54;\n                                            v56 -= v19;\n                                            v3 = v58;\n                                            v59 = v27 + ((unsigned int)sub_406e70() + v53) * 4;\n                                            *((unsigned int *)(v27 + v53 * 4)) = *(v59);\n                                            v53 += 1;\n                                            *(v59) = v3;\n                                            if (v53 == v55)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                    v19 = v10;\n                                    v60 = v11;\n                                }\n                            }\n                        }\n                        if (((unsigned short)v14 & 0xf000) == 0x8000 && v60->field_10 == -1 && v60->field_1d != 0 && v7 != 0 || v60->field_10 == -1 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)) && ((unsigned short)v14 & 0xf000) != 0x8000 && v60->field_8 != 0 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>) && v60->field_10 == -1 && ((unsigned short)v14 & 0xf000) != 0x8000 && v60->field_8 != 0 || ((unsigned short)v14 & 0xf000) == 0x8000 && v7 != 0 && v15 >= (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) && v60->field_10 != -1 || ((unsigned short)v14 & 0xf000) == 0x8000 && (v15 < (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) || v60->field_10 == -1) && (v60->field_1d == 0 || v60->field_10 != -1) && v7 != 0 || ((unsigned short)v14 & 0xf000) != 0x8000 && v60->field_10 != -1 && v7 != 0 || v7 == 0 && ((unsigned short)v14 & 0xf000) == 0x8000 && (v15 < (v5 < (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])? v5 : (!((long long)(stack_base)[-144] - 1 <= 2305843009213693951)? 0x200 : (long long)(stack_base)[-144])) || v60->field_10 == -1) && (v60->field_1d == 0 || v60->field_10 != -1))\n                        {\n                            v61 = (unsigned int)sub_406e60();\n                            if (v8 != 0)\n                            {\n                                v12 = v8;\n                                v63 = v60->field_8;\n                                v3 = 1;\n                            }\n                            else\n                            {\n                                v3 = 1;\n                            }\n                        }\n                        v2 = v27;\n                        v64 = v60;\n                        v65 = 0;\n                        while (true)\n                        {\n                            if ((char)*((char *)(v65 + 30)) + v63 > v65)\n                            {\n                                v65 += 1;\n                                v1 = 0;\n                                v0 = v65;\n                                v66 = sub_402b20();\n                                if ((unsigned int)v66 != 0)\n                                {\n                                    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)))\n                                    {\n                                        v3 = 0;\n                                    }\n                                    else\n                                    {\n                                        v27 = v2;\n                                    }\n                                }\n                                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)))\n                                {\n                                    v63 = *((long long *)(v65 + 8));\n                                }\n                            }\n                            else\n                            {\n                                v65 = v64;\n                                v27 = v2;\n                            }\n                        }\n                        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>) && (unsigned int)v66 != 0 && (char)*((char *)(v65 + 30)) + v63 > v65)\n                        {\n                            free(v27);\n                        }\n                        if (...)\n                        {\n                            if (v5 != 0)\n                            {\n                                v67 = v60->field_8;\n                            }\n                            else\n                            {\n                                if (v60->field_18 != 0)\n                                {\n                                    v69 = ftruncate(v19, 0x0);\n                                    if (v69 != 0 && ((unsigned short)v14 & 0xf000) == 0x8000)\n                                    {\n                                        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a343, 0x5));\n                                    }\n                                }\n                                if (v60->field_18 == 0 || v69 == 0 || ((unsigned short)v14 & 0xf000) != 0x8000)\n                                {\n                                    v9 = v3;\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            v68 = v5;\n                            v5 = 0;\n                            v12 = v68;\n                        }\n                        free(v27);\n                    }\n                }\n                else\n                {\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a328, 0x5));\n                }\n            }\n        }\n        if (((unsigned int)v24 == 0x1000 || ((unsigned short)v14 & 0xf000) == 0x2000 || v24 == 0xc000) && ((unsigned int)v24 == 0x1000 || v24 == 0xc000 || v23 != 0))\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a312, 0x5));\n            v9 = 0;\n        }\n    }\n    else\n    {\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a301, 0x5));\n        v9 = 0;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>) && v24 == 0 && (unsigned int)v24 != 0x1000 && v24 != 0xc000 && (v23 == 0 || ((unsigned short)v14 & 0xf000) != 0x2000) && (v24 != 0x8000 || !((char)(v15 - 0 >> 63))) || v24 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)) && v25 != 0 && (unsigned int)v24 != 0x1000 && v24 != 0xc000 && (v23 == 0 || ((unsigned short)v14 & 0xf000) != 0x2000) && (v24 != 0x8000 || !((char)(v15 - 0 >> 63))))\n    {\n        sub_408490(); /* do not return */\n    }\n    if (v24 != 0 || v24 == 0 && ((unsigned int)v24 == 0x1000 || ((unsigned short)v14 & 0xf000) == 0x2000 || v24 == 0xc000) && ((unsigned int)v24 == 0x1000 || v24 == 0xc000 || v23 != 0) || v24 == 0x8000 && v24 == 0 && (char)(v15 - 0 >> 63) && (unsigned int)v24 != 0x1000 && v24 != 0xc000 && (v23 == 0 || ((unsigned short)v14 & 0xf000) != 0x2000) || v25 == 0 && v24 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x2<8>), Shl(Load(addr=(rbx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x1<8>), cc_ndep<8>)) && (unsigned int)v24 != 0x1000 && v24 != 0xc000 && (v23 == 0 || ((unsigned short)v14 & 0xf000) != 0x2000) && (v24 != 0x8000 || !((char)(v15 - 0 >> 63))))\n    {\n        return (unsigned long long)v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_406a60",
            "funcStartAddr": "0x406a60",
            "funcEndAddr": "0x406a6a",
            "decompiledFuncCode": "int sub_406a60()\n{\n}\n"
        },
        {
            "funcName": "sub_404250",
            "funcStartAddr": "0x404250",
            "funcEndAddr": "0x40429c",
            "decompiledFuncCode": "int sub_404250()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_402a60",
            "funcStartAddr": "0x402a60",
            "funcEndAddr": "0x402b17",
            "decompiledFuncCode": "extern unsigned int g_40a264;\nextern unsigned int g_40a275;\n\nint sub_402a60()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // r12\n    unsigned int v3;  // ebp\n    unsigned int *v4;  // r12\n    unsigned int v5;  // edi\n    unsigned long long v6;  // rax\n    unsigned int v7;  // ebx\n    unsigned long long v8;  // rax\n\n    v1 = fdatasync();\n    if (v1 != 0)\n    {\n        v3 = *(v2);\n        v2 = __errno_location();\n        if ((unsigned int)((unsigned long long)*(v2) - 21) > 1 && v3 != 9)\n        {\n            error(0x0, v3, (unsigned long long)dcgettext(0x0, 0x40a275, 0x5));\n            *(v4) = v3;\n            v8 = -18446744069414584321;\n        }\n        if ((unsigned int)((unsigned long long)*(v2) - 21) <= 1 || v3 == 9)\n        {\n            v6 = fsync(v5);\n            if (v6 != 0)\n            {\n                v7 = *(v4);\n                if ((unsigned int)((unsigned long long)*(v4) - 21) > 1 && v7 != 9)\n                {\n                    error(0x0, v7, (unsigned long long)dcgettext(0x0, 0x40a264, 0x5));\n                    *(v4) = v7;\n                    v8 = -18446744069414584321;\n                }\n                if ((unsigned int)((unsigned long long)*(v4) - 21) <= 1 || v7 == 9)\n                {\n                    sync();\n                }\n            }\n        }\n    }\n    if (v1 == 0 || (unsigned int)((unsigned long long)*(v2) - 21) <= 1 && (unsigned int)((unsigned long long)*(v4) - 21) <= 1 || (unsigned int)((unsigned long long)*(v2) - 21) <= 1 && v7 == 9 || (unsigned int)((unsigned long long)*(v2) - 21) <= 1 && v6 == 0 || (unsigned int)((unsigned long long)*(v4) - 21) <= 1 && v3 == 9 || v3 == 9 && v7 == 9 || v3 == 9 && v6 == 0)\n    {\n        v8 = 0;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_409a40",
            "funcStartAddr": "0x409a40",
            "funcEndAddr": "0x409aaf",
            "decompiledFuncCode": "extern unsigned long long g_40cccf;\n\nint sub_409a40()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40cccf;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_409bc0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4077c0",
            "funcStartAddr": "0x4077c0",
            "funcEndAddr": "0x4079f4",
            "decompiledFuncCode": "int sub_4077c0()\n{\n    void tmp_33;  // tmp #33\n    void tmp_53;  // tmp #53\n    void tmp_70;  // tmp #70\n    void tmp_73;  // tmp #73\n    void tmp_80;  // tmp #80\n    void tmp_90;  // tmp #90\n    void tmp_96;  // tmp #96\n    void tmp_34;  // tmp #34\n    void tmp_58;  // tmp #58\n    void tmp_64;  // tmp #64\n    void tmp_74;  // tmp #74\n    void tmp_77;  // tmp #77\n    unsigned long long v1[259];  // rdi\n    unsigned long long v2[259];  // rdx\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // r8\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r10\n    unsigned long long v7[259];  // rax\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rsi\n    unsigned long long v11;  // r12\n\n    v2 = v1;\n    v7 = v1;\n    v9 = 11021839149480329387;\n    v10 = 9435133421607575758;\n    v8 = 12869931497269318948;\n    v11 = 12580906657422019053;\n    v6 = 10092185256905347744;\n    v5 = 13400657653193689186;\n    v4 = 7240739780546808700;\n    v3 = 5259722845879046933;\n    do\n    {\n        tmp_33 = v3 + v7[5] ^ v9 + v7[7] >> 9;\n        tmp_53 = v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200;\n        tmp_70 = v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) + v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200);\n        tmp_73 = v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23;\n        tmp_80 = v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        tmp_90 = v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200) + v8 + v7[3] - (v9 + v7[7] + v4 + *(v7) - (v10 + v7[4]) ^ v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) >> 23);\n        v4 = v4 + *(v7) - (v10 + v7[4]) + v5 + v7[1] - (v3 + v7[5] ^ v9 + v7[7] >> 9) ^ (v6 + v7[2] - (v11 + v7[6] ^ (v4 + *(v7) - (v10 + v7[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v7[4] - v4;\n        v7[0] = v4;\n        v5 = tmp_70 ^ tmp_80 >> 14;\n        v7[1] = tmp_70 ^ tmp_80 >> 14;\n        v6 = tmp_90 ^ tmp_96 * 0x100000;\n        v7[2] = tmp_90 ^ tmp_96 * 0x100000;\n        v7 = &v7[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v9 = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-5] = tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v11 = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-3] = tmp_33 - (tmp_70 ^ tmp_80 >> 14) + tmp_53 - (tmp_90 ^ tmp_96 * 0x100000);\n        v7[-4] = (tmp_53 - (tmp_90 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_33 - (tmp_70 ^ tmp_80 >> 14);\n        v7[-2] = tmp_53 - (tmp_90 ^ tmp_96 * 0x100000) + tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n        v7[-1] = tmp_73 - (tmp_80 + tmp_96 ^ tmp_33 - (tmp_70 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v7);\n    do\n    {\n        tmp_34 = v3 + v2[5] ^ v9 + v2[7] >> 9;\n        tmp_58 = v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200;\n        tmp_64 = v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_74 = v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23;\n        tmp_77 = v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) + v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200);\n        tmp_80 = v8 + v2[3] - (v9 + v2[7] + v4 + *(v2) - (v10 + v2[4]) ^ v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) >> 23);\n        v4 = v4 + *(v2) - (v10 + v2[4]) + v5 + v2[1] - (v3 + v2[5] ^ v9 + v2[7] >> 9) ^ (v6 + v2[2] - (v11 + v2[6] ^ (v4 + *(v2) - (v10 + v2[4])) * 0x200)) * 0x8000;\n        tmp_96 = v10 + v2[4] - v4;\n        v2[0] = v4;\n        v5 = tmp_77 ^ tmp_80 >> 14;\n        v2[1] = tmp_77 ^ tmp_80 >> 14;\n        v6 = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2[2] = tmp_64 + tmp_80 ^ tmp_96 * 0x100000;\n        v2 = &v2[8];\n        v8 = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v3 = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v9 = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-5] = tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17;\n        v10 = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v11 = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-3] = tmp_34 - (tmp_77 ^ tmp_80 >> 14) + tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000);\n        v2[-4] = (tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000)) * 0x4000 ^ tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n        v2[-2] = tmp_58 - (tmp_64 + tmp_80 ^ tmp_96 * 0x100000) + tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n        v2[-1] = tmp_74 - (tmp_80 + tmp_96 ^ tmp_34 - (tmp_77 ^ tmp_80 >> 14) >> 17);\n    }\n    while (&v1[0x100] != v2);\n    v1[258] = 0;\n    v1[257] = 0;\n    v1[0x100] = 0;\n    return tmp_96 + tmp_34 - (tmp_77 ^ tmp_80 >> 14);\n}\n"
        },
        {
            "funcName": "sub_408260",
            "funcStartAddr": "0x408260",
            "funcEndAddr": "0x408281",
            "decompiledFuncCode": "int sub_408260()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_408490(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4081c0",
            "funcStartAddr": "0x4081c0",
            "funcEndAddr": "0x408234",
            "decompiledFuncCode": "extern unsigned int g_40c501;\nextern unsigned int g_40c52c;\nextern unsigned int g_40c758;\n\nint sub_4081c0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c501, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40c52c, 0x5));\n    dcgettext(0x0, 0x40c758, 0x5);\n}\n"
        },
        {
            "funcName": "sub_408bd0",
            "funcStartAddr": "0x408bd0",
            "funcEndAddr": "0x408c0b",
            "decompiledFuncCode": "int sub_408bd0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_408c10();\n    }\n}\n"
        },
        {
            "funcName": "sub_407340",
            "funcStartAddr": "0x407340",
            "funcEndAddr": "0x407345",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_407340()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_8 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4099c0",
            "funcStartAddr": "0x4099c0",
            "funcEndAddr": "0x4099d3",
            "decompiledFuncCode": "int sub_4099c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409940();\n}\n"
        },
        {
            "funcName": "sub_407ca0",
            "funcStartAddr": "0x407ca0",
            "funcEndAddr": "0x408049",
            "decompiledFuncCode": "extern unsigned int g_40c4ba;\nextern unsigned int g_40c4be;\nextern unsigned int g_40c4ce;\nextern unsigned int g_40c4e5;\nextern unsigned int g_40c540;\nextern unsigned int g_40c610;\nextern unsigned int g_40c630;\nextern unsigned int g_40c658;\nextern unsigned int g_40c680;\nextern unsigned int g_40c6b0;\n\nint sub_407ca0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40c4ba, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c540, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40c4be, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40c4ce, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40c4e5, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40c610, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40c630, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40c658, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40c680, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40c6b0, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_403ac0",
            "funcStartAddr": "0x403ac0",
            "funcEndAddr": "0x403f0d",
            "decompiledFuncCode": "extern unsigned int g_40a3bd;\nextern unsigned int g_40a560;\nextern unsigned int g_40a588;\nextern unsigned int g_40a5a8;\nextern unsigned int g_40a630;\nextern unsigned int g_40a658;\nextern unsigned int g_40a6a8;\nextern unsigned int g_40a7b0;\nextern unsigned int g_40a920;\nextern unsigned int g_40a950;\nextern unsigned int g_40a988;\nextern unsigned int g_40ab68;\nextern unsigned int g_40acd8;\nextern unsigned int g_40ae18;\nextern unsigned int g_40ae88;\nextern unsigned int g_40b060;\nextern unsigned int g_40b130;\nextern unsigned int g_40b178;\nextern unsigned int g_40b198;\nextern unsigned long long stdout;\n\nint sub_403ac0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long *v35;  // rax\n    char *v36;  // rdi\n    char *v37;  // rsi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // cc_dep1\n    unsigned long long v40;  // cc_dep2\n    unsigned long v41;  // d\n    char *v45;  // rax\n    char *v46;  // rax\n    unsigned long long v47;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x40a560, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a588, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a5a8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a630, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a658, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a6a8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a7b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a920, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a950, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a988, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ab68, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40acd8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae88, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b060, 0x5), stdout);\n        v0 = \"[\";\n        v35 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v35 = &v2;\n            v36 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v37 = \"shred\";\n            v38 = 6;\n            if ((v39 > v40) - 0 - (v39 < v40) == 0)\n            {\n                break;\n            }\n            while (v38 != 0)\n            {\n                v38 -= 1;\n                v39 = *(v37);\n                v40 = *(v36);\n                v36 = &v36[v41];\n                v37 = &v37[v41];\n                break;\n            }\n        }\n        if (v3 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3bd, 0x5));\n            v46 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a3bd, 0x5));\n            v45 = setlocale(0x5, 0x0);\n            if (v45 != 0)\n            {\n                v47 = strncmp(v45, \"en_\", 0x3);\n            }\n            if (v45 == 0 || v47 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b178, 0x5));\n            }\n        }\n        if ((v3 == 0 || strncmp(v46, \"en_\", 0x3) != 0) && (v3 == 0 || v46 != 0) && (v45 != 0 || v3 != 0) && (v3 != 0 || v47 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b130, 0x5));\n        }\n        if (v3 != 0 || v45 != 0 && v47 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b178, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b198, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4042a0",
            "funcStartAddr": "0x4042a0",
            "funcEndAddr": "0x4042a8",
            "decompiledFuncCode": "extern unsigned long long g_60f3a8;\n\nint sub_4042a0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_60f3a8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4041e0",
            "funcStartAddr": "0x4041e0",
            "funcEndAddr": "0x40424d",
            "decompiledFuncCode": "int sub_4041e0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_403f20();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_404040();\n        sub_4040c0();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4080a0",
            "funcStartAddr": "0x4080a0",
            "funcEndAddr": "0x4080f9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4080a0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_407ca0();\n}\n"
        },
        {
            "funcName": "sub_4099a0",
            "funcStartAddr": "0x4099a0",
            "funcEndAddr": "0x4099b8",
            "decompiledFuncCode": "int sub_4099a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_409940();\n}\n"
        },
        {
            "funcName": "sub_408490",
            "funcStartAddr": "0x408490",
            "funcEndAddr": "0x4084c1",
            "decompiledFuncCode": "extern unsigned int g_40c82f;\nextern unsigned int g_60f2e0;\n\nint sub_408490()\n{\n    dcgettext(0x0, 0x40c82f, 0x5);\n    error(g_60f2e0, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405360",
            "funcStartAddr": "0x405360",
            "funcEndAddr": "0x406498",
            "decompiledFuncCode": "int sub_405360()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long|unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // rbp\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r8\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // r11\n    unsigned long|unsigned long long v41;  // rbp\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rax\n    char v44;  // al\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rcx\n    unsigned long|unsigned long long|unsigned short v47;  // rax\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // rdx\n    unsigned long long v50;  // rbx\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbp\n    unsigned long long v53;  // r14\n    char *v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // r13\n    unsigned long long v58;  // rcx\n    char v59;  // al\n    char v60;  // al\n    unsigned int v61;  // eax\n    char v62;  // al\n    unsigned int v64;  // eax\n    char v65;  // al\n    unsigned long v66;  // rdx\n    unsigned long long v67;  // rax\n    char v68;  // al\n    unsigned long long v69;  // rdx\n    unsigned long long v70;  // rbx\n    unsigned long long|unsigned int|char v71;  // rsi\n    unsigned long long|char v72;  // r13\n    unsigned long long v73;  // r14\n    unsigned long long v74;  // r12\n    unsigned int v75;  // r13d\n    unsigned long long v76;  // r11\n    char v77;  // dl\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // cc_dep1\n    unsigned long long v80;  // dl\n    unsigned long long v81;  // rax\n    unsigned long long v82;  // rax\n    unsigned long long v83;  // rdx\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // rax\n\n    v29 = v28;\n    v73 = v71;\n    v72 = v30;\n    v7 = v71;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v71 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v70 = 1;\n                v72 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v78 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v71 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v70 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v70 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v72 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v70 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_405260();\n            v27 = (unsigned long long)(unsigned int)sub_405260();\n        }\n        v70 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v34 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v71 > v70)\n                    {\n                        *((unsigned long long *)(v28 + v70)) = v34;\n                    }\n                    v70 += 1;\n                    v34 = (char)*((char *)(v26 + v70));\n                }\n                while ((char)v34 != 0);\n            }\n        }\n        v5 = v76;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v76 = v4;\n    while (true)\n    {\n        v39 = v76;\n        v74 = 0;\n        v40 = v72;\n        while (true)\n        {\n            v72 = (char)(v39 != v74);\n            if (v39 == -1)\n            {\n                v72 = (char)(*((char *)(v7 + v74)) != 0);\n            }\n            if (v72 != 0)\n            {\n                v38 = v7 + v74;\n                v5 = (unsigned int)v40 != 2 & v4;\n                if (((unsigned int)v40 != 2 & v4) != 0)\n                {\n                    v35 = v8;\n                    if (v8 != 0)\n                    {\n                        v36 = v74 + v35;\n                        if (v39 == -1 && v35 > 1)\n                        {\n                            v11 = v40;\n                            v10 = v33;\n                            v9 = v38;\n                            v39 = strlen(v7);\n                        }\n                        if (v36 <= v39)\n                        {\n                            v12 = v40;\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v38;\n                            v37 = memcmp(v38, v13, v8);\n                            v38 = v9;\n                            v33 = (char)v10;\n                            v39 = v11;\n                            v40 = v12;\n                            if (v37 == 0 && v17 == 0)\n                            {\n                                v41 = (char)*((char *)v38);\n                                switch (*((char *)v38))\n                                {\n                                case 0:\n                                    v71 = (char)((unsigned int)v40 == 2);\n                                    v72 = (unsigned int)(0 ^ 1);\n                                    v72 = (char)(0 ^ 1) & (unsigned int)v40 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0)\n                                    {\n                                        if (v71 > v70)\n                                        {\n                                            *((char *)(v28 + v70)) = 39;\n                                        }\n                                        if (v71 > v70 + 1)\n                                        {\n                                            *((char *)(v28 + v70 + 1)) = 36;\n                                        }\n                                        if (v71 > v70 + 2)\n                                        {\n                                            *((char *)(v28 + v70 + 2)) = 39;\n                                        }\n                                        v48 = v70 + 3;\n                                        v70 += 4;\n                                        v33 = rax<8>;\n                                        v72 = 0;\n                                        v41 = 48;\n                                    }\n                                    else\n                                    {\n                                        v48 = v70;\n                                        v72 = 0;\n                                        v70 = v48 + 1;\n                                        v72 = (unsigned int)v72;\n                                        v41 = 48;\n                                        v72 = 0;\n                                        v41 = 48;\n                                        if (1 < v39)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v71 > v70)\n                                                {\n                                                    *((char *)(v28 + v70)) = 48;\n                                                }\n                                                if (v71 > v48 + 2)\n                                                {\n                                                    *((char *)(v28 + v48 + 2)) = 48;\n                                                }\n                                                v70 = v48 + 3;\n                                                v41 = 48;\n                                            }\n                                        }\n                                        v72 = v72;\n                                        v72 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) == 0 || v71 > v70 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v40 == 2) != 0 || v71 > v70))\n                                    {\n                                        *((char *)(v28 + v48)) = 92;\n                                        v33 = v72;\n                                    }\n                                case 7:\n                                    v41 = 97;\n                                case 8:\n                                    v71 = 0;\n                                    v72 = 0;\n                                    v41 = 98;\n                                case 13:\n                                    v41 = 13;\n                                    v46 = 114;\n                                    v71 = (unsigned int)v40 == 2;\n                                case 32:\n                                    v42 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v71 = 0;\n                                case 35: case 126:\n                                    v43 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v42 = v5;\n                                case 92:\n                                    v45 = v4;\n                                    v41 = 92;\n                                    v46 = 92;\n                                    v71 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v74 = 1;\n                                        v47 = 0;\n                                        v72 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v37 != 0 || v36 > v39)\n                    {\n                        v41 = (char)*((char *)v38);\n                        switch (*((char *)v38))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v40 == 2;\n                            }\n                        case 7:\n                            v41 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v72 = 0;\n                            }\n                            else\n                            {\n                                v81 = 0;\n                            }\n                        case 8:\n                            v41 = 98;\n                        case 9:\n                            v41 = 116;\n                        case 10:\n                            v41 = 110;\n                            v71 = 0;\n                            v72 = 0;\n                        case 11:\n                            v41 = 118;\n                            break;\n                        case 12:\n                            v41 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v42 = 0;\n                            v41 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v43 = 0;\n                            v72 = v5;\n                            v71 = 0;\n                            v5 = v43;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v42 = 0;\n                            v72 = v5;\n                            v5 = v42;\n                            v72 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v41 = (char)*((char *)v38);\n                    switch (*((char *)v38))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v74 += 1;\n                            v5 = 0;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            v41 = 0;\n                            break;\n                        }\n                    case 7:\n                        v41 = 7;\n                        v46 = 97;\n                        v71 = (unsigned int)v40 == 2;\n                    case 8:\n                        v41 = 8;\n                        v46 = 98;\n                        v71 = (unsigned int)v40 == 2;\n                    case 9:\n                        v41 = 9;\n                        v46 = 116;\n                        v71 = (unsigned int)v40 == 2;\n                        v5 = v17 & (unsigned int)v40 == 2;\n                        if ((v17 & (unsigned int)v40 == 2) == 0)\n                        {\n                            v41 = v46;\n                            v72 = 0;\n                            v72 = 0;\n                            break;\n                            v72 = ((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1;\n                            v72 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) | v17;\n                            v72 = 0;\n                            v66 = (unsigned int)((unsigned long long)v25[v41 % 32] >> ((char)v41 & 31)) & 1;\n                            v71 = (unsigned int)v40 == 2;\n                            v71 = (unsigned int)v40 == 2;\n                            v74 += 1;\n                            v47 = (v72 ^ 1) & (unsigned int)v33;\n                            if (v47 != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 39;\n                                }\n                                v70 += 2;\n                                v33 = 0;\n                            }\n                            v81 = v71;\n                            v67 = (unsigned int)v33 ^ 1;\n                            v68 = (char)((unsigned int)v33 ^ 1) & v71;\n                            if (((char)((unsigned int)v33 ^ 1) & v71) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v70 + 1 < v73)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v69 = v70 + 2;\n                                if (v70 + 2 < v73)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = rax<8>;\n                            }\n                            *((unsigned long long *)&v4) = v4 & v81;\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                            v74 += 1;\n                        }\n                    case 10:\n                        v41 = 10;\n                        v46 = 110;\n                    case 11:\n                        v41 = 11;\n                        v46 = 118;\n                        v71 = (unsigned int)v40 == 2;\n                    case 12:\n                        v41 = 12;\n                        v46 = 102;\n                        v71 = (unsigned int)v40 == 2;\n                    case 13:\n                        v41 = 13;\n                        v46 = 114;\n                    case 32:\n                        v41 = 32;\n                        v71 = (char)((unsigned int)v40 == 2);\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        v72 = 0;\n                    case 35: case 126:\n                        v71 = (unsigned int)v40 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v71 = (char)((unsigned int)v40 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            if (v71 != 0)\n                            {\n                                v49 = 0;\n                            }\n                            if (v71 == 0 || v14 != 0)\n                            {\n                                if (v71 > v70)\n                                {\n                                    *((char *)(v28 + v70)) = 39;\n                                }\n                                if (v71 > v70 + 1)\n                                {\n                                    *((char *)(v28 + v70 + 1)) = 92;\n                                }\n                                if (v71 > v70 + 2)\n                                {\n                                    v49 = v71;\n                                    *((char *)(v28 + v70 + 2)) = 39;\n                                    v73 = v14;\n                                }\n                                else\n                                {\n                                    v49 = v71;\n                                    v73 = v14;\n                                }\n                            }\n                            v18 = v72;\n                            v70 += 3;\n                            v72 = 0;\n                            v33 = 0;\n                            v14 = v73;\n                            v41 = 39;\n                            v73 = v49;\n                        }\n                        else\n                        {\n                            v18 = v72;\n                            v71 = 0;\n                            v41 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v40 != 2)\n                        {\n                            v41 = 63;\n                            v71 = (char)((unsigned int)v40 == 2);\n                            v72 = 0;\n                            break;\n                            v71 = v7;\n                            v41 = (char)*((char *)(v71 + 2));\n                            v71 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v71 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                            break;\n                            if (v73 > v70)\n                            {\n                                *((char *)(v28 + v70)) = 63;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v28 + v70 + 1)) = 34;\n                            }\n                            if (v73 > v70 + 2)\n                            {\n                                *((char *)(v28 + v70 + 2)) = 34;\n                            }\n                            if (v73 > v70 + 3)\n                            {\n                                *((char *)(v28 + v70 + 3)) = 63;\n                            }\n                            v70 += 4;\n                            v71 = 0;\n                            v72 = 0;\n                            v74 = 2;\n                        }\n                        else\n                        {\n                            v72 = 0;\n                            v72 = 0;\n                            v41 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v40 == 2)\n                        {\n                            v74 += 1;\n                            v47 = v33;\n                            v72 = 0;\n                            v41 = 92;\n                        }\n                    case 123: case 125:\n                        v44 = v39 != 1;\n                        if (v39 == -1)\n                        {\n                            v44 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v71 = (unsigned int)v40 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v75 = v40;\n                v76 = v39;\n                v77 = v75 == 2;\n                if ((v75 == 2 & v17) == 0 || v70 != 0)\n                {\n                    v78 = (unsigned int)v17 ^ 1;\n                    v79 = v77 & (char)((unsigned int)v17 ^ 1);\n                    v80 = v77 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v79 == 0)\n                    {\n                        v80 = v78;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v78 = v73 == 0 & v14 != 0;\n                            if ((v73 == 0 & v14 != 0) == 0)\n                            {\n                                v80 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v70 = (unsigned int)sub_405360();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v72 == 0 && (char)v79 != 0 && v18 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0 || (char)v79 == 0 && v72 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0))\n            {\n                v82 = v13;\n                if (v80 != 0 && v13 != 0)\n                {\n                    v83 = (char)*((char *)v82);\n                    if (*((char *)v82) != 0)\n                    {\n                        v84 = v82 - v70;\n                        do\n                        {\n                            if (v73 > v70)\n                            {\n                                *((unsigned long long *)(v29 + v70)) = v83;\n                            }\n                            v70 += 1;\n                            v83 = (char)*((char *)(v84 + v70));\n                        }\n                        while ((char)v83 != 0);\n                    }\n                }\n                if (v73 > v70)\n                {\n                    *((char *)(v29 + v70)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v40;\n                v10 = v39;\n                v9 = v33;\n                v47 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v41 * 2));\n                tmp_38 = v47 & 0x4000;\n                v47 &= 0x4000;\n                v72 = (tmp_38 & 65535) != 0;\n                v71 = (tmp_38 & 65535) == 0 & v4;\n                if (v71 != 0)\n                {\n                    v71 = v4;\n                    v72 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v39 == -1)\n                {\n                    v11 = v40;\n                    v10 = v33;\n                    v9 = v38;\n                    v39 = strlen(v7);\n                }\n                v21 = v70;\n                v22 = v38;\n                v50 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v41;\n                v11 = v29;\n                v12 = v73;\n                v9 = v39;\n                v10 = v40;\n                do\n                {\n                    v51 = v74 + v50;\n                    v52 = v7 + v74 + v50;\n                    v47 = sub_409a40();\n                    v53 = v47;\n                    if (v47 != 0 && v47 != -2 && v47 != -1)\n                    {\n                        if ((int)v10 == 2 && v47 != 1 && v17 != 0)\n                        {\n                            v54 = v7 + v71 + 1;\n                            v71 = v7 + v53 + v71;\n                            while (true)\n                            {\n                                v55 = (unsigned int)*(v54) - 91;\n                                if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                                {\n                                    v54 = &v54[1];\n                                    if (v71 == v54)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v55 & 63)) == 0 || ((unsigned int)*(v54) - 91 & 255) > 33)\n                            {\n                                v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v50 += v53;\n                                v47 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v72 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v50 += v53;\n                        v47 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v47 == -1)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v72 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = v4;\n                    }\n                    if (v47 == -2)\n                    {\n                        v39 = v9;\n                        v71 = v51;\n                        v47 = v50;\n                        v28 = v50;\n                        v33 = (char)v19;\n                        v41 = v20;\n                        v70 = v21;\n                        v29 = v11;\n                        v73 = v12;\n                        v40 = (unsigned int)v10;\n                        if (v71 < v9 && *((char *)v52) != 0)\n                        {\n                            do\n                            {\n                                v47 += 1;\n                            }\n                            while (v47 < v9 && *((char *)(v22 + v47)) != 0);\n                            v28 = v47;\n                        }\n                        v71 = v4;\n                        v72 = 0;\n                    }\n                    if (v47 == 0 || v47 != -2 && (unsigned int)v47 != 0 && v47 != -1)\n                    {\n                        v28 = v50;\n                        v41 = v20;\n                        v70 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v71 = (unsigned int)v72 ^ 1;\n                        v73 = v12;\n                        v39 = v9;\n                        v40 = (unsigned int)v10;\n                        v71 = (char)((unsigned int)v72 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v47 == 0 || v47 == -2 || v47 == -1 || (unsigned int)v47 != 0)\n                {\n                    v9 = v72;\n                    v71 = 0;\n                    v57 = v17;\n                    v58 = v28 + v74;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v43;\n                v72 = 0;\n            }\n            if (v15 != 1 || v71 != 0)\n            {\n                v9 = v72;\n                v71 = 0;\n                v57 = v17;\n                v58 = v28 + v74;\n                v28 = v5;\n                while (true)\n                {\n                    if (v71 != 0)\n                    {\n                        v59 = (unsigned int)v40 == 2;\n                        if (v57 == 0)\n                        {\n                            v71 = (unsigned int)v33 ^ 1;\n                            v60 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v73 > v70)\n                                {\n                                    *((char *)(v29 + v70)) = 39;\n                                }\n                                if (v73 > v70 + 1)\n                                {\n                                    *((char *)(v29 + v70 + 1)) = 36;\n                                }\n                                v71 = v70 + 2;\n                                if (v73 > v70 + 2)\n                                {\n                                    *((char *)(v29 + v70 + 2)) = 39;\n                                }\n                                v70 += 3;\n                                v33 = v47;\n                            }\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            if (v73 > v70 + 1)\n                            {\n                                v61 = v41;\n                                v62 = (char)v41 % 64;\n                                *((unsigned long long *)(v29 + v70 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v47 = v70 + 2;\n                            if (v73 > v70 + 2)\n                            {\n                                v64 = v41;\n                                v65 = (char)v41 % 8;\n                                v47 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v70 + 2)) = v47;\n                            }\n                            v74 += 1;\n                            v70 += 3;\n                            v41 = ((unsigned int)v41 & 7) + 48;\n                            if (v74 < v58)\n                            {\n                                v71 = v71;\n                            }\n                            else\n                            {\n                                v72 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v59;\n                        }\n                    }\n                    else\n                    {\n                        v47 = (v71 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 92;\n                            }\n                            v70 += 1;\n                        }\n                        v74 += 1;\n                        if (v74 >= v58)\n                        {\n                            v72 = (char)v9;\n                        }\n                        else if (v47 != 0)\n                        {\n                            if (v73 > v70)\n                            {\n                                *((char *)(v29 + v70)) = 39;\n                            }\n                            v47 = v70 + 1;\n                            if (v73 > v70 + 1)\n                            {\n                                *((char *)(v29 + v70 + 1)) = 39;\n                            }\n                            v70 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v74 < v58 || v71 == 0) && (v57 == 0 || v71 == 0) && (v74 < v58 || v71 != 0))\n                    {\n                        if (v73 > v70)\n                        {\n                            *((unsigned long long *)(v29 + v70)) = v41;\n                        }\n                        v41 = (char)*((char *)(v7 + v74));\n                        v70 += 1;\n                    }\n                }\n            }\n            if ((v72 == 0 || (v17 & (unsigned int)v40 == 2) != 0) && (v70 == 0 || (v17 & (unsigned int)v40 == 2) != 0) && ((v75 == 2 & v17) != 0 || (v17 & (unsigned int)v40 == 2) != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v70 = (unsigned int)sub_405360();\n            }\n            if (v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v71) ^ 1) == 0 && v4 == 0 && v5 == 0 && (v17 & (unsigned int)v40 == 2) == 0 || v17 == 0 && (v17 & (unsigned int)v40 == 2) == 0 && v4 != 0 || (v15 != 1 || v71 != 0) && v70 >= v73)\n            {\n                if (v70 < v73)\n                {\n                    *((unsigned long long *)(v29 + v70)) = v41;\n                }\n                v70 += 1;\n                v6 = (v72 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v72 == 0 && (char)v79 != 0 && v18 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && (v73 == 0 & v14 != 0) == 0 || v72 == 0 && (char)v79 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) && v18 == 0 || (char)v79 == 0 && v72 == 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || v72 == 0 && (char)v79 != 0 && v6 != 0 && v18 != 0 && ((v75 == 2 & v17) == 0 || v70 != 0) || (v72 == 0 || (v17 & (unsigned int)v40 == 2) != 0) && (v70 == 0 || (v17 & (unsigned int)v40 == 2) != 0) && ((v75 == 2 & v17) != 0 || (v17 & (unsigned int)v40 == 2) != 0))\n            {\n                v85 = v70;\n                return v85;\n            }\n        }\n        *((char *)v29) = 39;\n        v72 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v78;\n    }\n}\n"
        },
        {
            "funcName": "sub_407a00",
            "funcStartAddr": "0x407a00",
            "funcEndAddr": "0x407c38",
            "decompiledFuncCode": "int sub_407a00()\n{\n    unsigned int *|unsigned int v0;  // [bp-0x160]\n    char v1;  // [bp-0x158]\n    unsigned int v2;  // [bp-0x140]\n    char v3;  // [bp-0xc8]\n    unsigned int v4;  // [bp-0xb0]\n    char v5;  // [bp-0x30]\n    char v6;  // [bp-0x20]\n    char v7;  // [bp+0x0]\n    unsigned long v9;  // rdi\n    unsigned int v10;  // r14d\n    unsigned long v11;  // rdx\n    unsigned int v12;  // r13d\n    char *v13;  // rsi\n    char *v14;  // rcx\n    unsigned int v15;  // r8d\n    unsigned int v16;  // r13\n    unsigned long v17;  // r14\n    unsigned long long v18;  // rdx\n    unsigned int *v19;  // r9\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15b\n    unsigned long long v22;  // rax\n    unsigned int v23;  // eax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v10 = v9;\n    v12 = v11;\n    v18 = syscall(0x13c, v9, (unsigned int)v13, v11, (unsigned int)v14, v15, *((int *)&v5), (unsigned int)&v7, *((int *)&v6), v16, v17, v21);\n    if ((unsigned int)v18 < 0)\n    {\n        v0 = v18;\n        v19 = __errno_location();\n        v20 = *(v19);\n        v21 = ((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95;\n        if ((((unsigned int)(v20 - 22) & -17) != 0 & (unsigned int)v20 != 95) == 0)\n        {\n            if (v15 != 0)\n            {\n                if ((v15 & -2) != 0)\n                {\n                    *(v19) = 95;\n                    v18 = -18446744069414584321;\n                }\n                else\n                {\n                    v0 = v19;\n                    v22 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                    v19 = v0;\n                    if (v22 != 0)\n                    {\n                        v23 = *(v19);\n                        if (*(v19) != 75 && v23 == 2)\n                        {\n                            v21 = 1;\n                        }\n                    }\n                    if (*(v19) == 75 || v22 == 0)\n                    {\n                        *(v0) = 17;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (v15 == 0 || (v15 & -2) == 0 && v23 == 2 && *(v19) != 75 && v22 != 0)\n            {\n                v0 = v19;\n                v24 = strlen(v13);\n                v25 = strlen(v14);\n            }\n            if (v13[v24 + -1] == 47 && v25 != 0 && v24 != 0 && (v15 == 0 || (v15 & -2) == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || *(v19) != 75) && (v15 == 0 || v22 != 0) || v14[v25 + -1] == 47 && v25 != 0 && v24 != 0 && v13[v24 + -1] != 47 && (v15 == 0 || (v15 & -2) == 0) && (v15 == 0 || v23 == 2) && (v15 == 0 || *(v19) != 75) && (v15 == 0 || v22 != 0))\n            {\n                v0 = v0;\n                v26 = __fxstatat(0x1, v9, (unsigned int)v13, (unsigned int)&v1, 0x100);\n                if (v26 == 0)\n                {\n                    if (!(v21 != 0))\n                    {\n                        v0 = v0;\n                        v27 = __fxstatat(0x1, v16, (unsigned int)v14, (unsigned int)&v3, 0x100);\n                        if (v27 == 0)\n                        {\n                            if (((unsigned short)v4 & 0xf000) != 0x4000)\n                            {\n                                *(v0) = 20;\n                            }\n                            else\n                            {\n                                if (((unsigned short)v2 & 0xf000) != 0x4000)\n                                {\n                                    *(v0) = 21;\n                                    v18 = -18446744069414584321;\n                                }\n                            }\n                        }\n                    }\n                    else if (((unsigned short)v2 & 0xf000) != 0x4000)\n                    {\n                        *(v0) = 2;\n                        v18 = -18446744069414584321;\n                    }\n                }\n            }\n            if (...)\n            {\n                v18 = -18446744069414584321;\n            }\n            if (...)\n            {\n                v18 = renameat(v9, (unsigned int)v13, v16, (unsigned int)v14);\n            }\n        }\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_403f10",
            "funcStartAddr": "0x403f10",
            "funcEndAddr": "0x403f1a",
            "decompiledFuncCode": "int sub_403f10()\n{\n}\n"
        },
        {
            "funcName": "sub_408080",
            "funcStartAddr": "0x408080",
            "funcEndAddr": "0x4080a0",
            "decompiledFuncCode": "int sub_408080()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4085d0",
            "funcStartAddr": "0x4085d0",
            "funcEndAddr": "0x4089dd",
            "decompiledFuncCode": "int sub_4085d0()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long|unsigned long long|unsigned int v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rcx\n    unsigned long long v43;  // cc_dep1\n    unsigned long long v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4245624)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v9 != 0 && v15 != 45 && v19 != 0 || *(v12) != v5 && v9 != 0 && v1[0] != 0 && v15 != 45 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v38 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v48 = tmp_11 * v28 * v28;\n                    v33 = v48;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v36 = v30;\n                v37 = 5;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v37;\n                    v37 -= 1;\n                }\n                while (v44 != 1);\n                break;\n            case 18: case 50:\n                v39 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 23:\n                v34 = v30;\n                v35 = 8;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v35;\n                    v35 -= 1;\n                }\n                while (v43 != 1);\n            case 24:\n                v40 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v49 = &v32[v31];\n                *(v12) = v49;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408a90",
            "funcStartAddr": "0x408a90",
            "funcEndAddr": "0x408bbc",
            "decompiledFuncCode": "extern unsigned int g_60f4f8;\n\nint sub_408a90()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_60f4f8 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_408a90();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_60f4f8 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_60f4f8 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_408a90();\n        }\n        if ((*(v12) == 22 || g_60f4f8 < 0) && (g_60f4f8 < 0 || (unsigned int)v15 < 0) && (g_60f4f8 == -1 || g_60f4f8 >= 0) && (g_60f4f8 < 0 || (unsigned int)v15 >= 0) && (g_60f4f8 >= 0 || (unsigned int)v15 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_406770",
            "funcStartAddr": "0x406770",
            "funcEndAddr": "0x40677f",
            "decompiledFuncCode": "extern int512_t g_60f4c0;\n\nint sub_406770()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_60f4c0 : v1));\n}\n"
        },
        {
            "funcName": "sub_408240",
            "funcStartAddr": "0x408240",
            "funcEndAddr": "0x40825a",
            "decompiledFuncCode": "int sub_408240()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_408490(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4067d0",
            "funcStartAddr": "0x4067d0",
            "funcEndAddr": "0x4067e3",
            "decompiledFuncCode": "extern int512_t g_60f4c0;\n\nint sub_4067d0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_60f4c0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_60f4c0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408470",
            "funcStartAddr": "0x408470",
            "funcEndAddr": "0x408483",
            "decompiledFuncCode": "int sub_408470()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_406cd0",
            "funcStartAddr": "0x406cd0",
            "funcEndAddr": "0x406d3c",
            "decompiledFuncCode": "extern uint128_t g_60f4c0;\nextern uint128_t g_60f4d0;\nextern uint128_t g_60f4e0;\nextern unsigned long long g_60f4f0;\n\nint sub_406cd0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_60f4c0;\n    *((uint128_t *)&v1) = g_60f4d0;\n    *((uint128_t *)&v2) = g_60f4e0;\n    v4 = g_60f4f0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_406590();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404380",
            "funcStartAddr": "0x404380",
            "funcEndAddr": "0x4043d8",
            "decompiledFuncCode": "int sub_404380()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_404440();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_409370",
            "funcStartAddr": "0x409370",
            "funcEndAddr": "0x4098d7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40cc80;\nextern unsigned int g_40ccb4;\n\nint sub_409370()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    char *[3]|unsigned long long * v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[2];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[2];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long long *v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = (unsigned int)v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_408c70();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_408c70();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v46;\n                    *((unsigned long long **)&v0->field_0) = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = (unsigned long long)v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (*(v19) == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || *(v19) == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_408d50();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40cc80, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40ccb4, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40cc80, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_408d50();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_409c20",
            "funcStartAddr": "0x409c20",
            "funcEndAddr": "0x40a174",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40cccf;\nextern char g_60f538[2];\n\nint sub_409c20()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rax\n    unsigned long long v64;  // rdx\n    unsigned long long v68;  // rbp\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rbp\n    unsigned long long v72;  // rax\n\n    v9 = g_60f538;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40cccf : (unsigned long long)nl_langinfo(0xe));\n    if (g_60f538 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40cccf;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v64 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v64;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40cccf;\n                                        v10 = (tmp_10 == 0? &g_40cccf : tmp_10);\n                                        free(NULL);\n                                        sub_408a10();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v63 = *(v62);\n                                        v64 = 1;\n                                    }\n                                    else\n                                    {\n                                        v63 = __uflow(v10);\n                                        v64 = (char)(v63 != -1);\n                                    }\n                                }\n                                while (v63 != 10 && v64 != 0);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v38 != 0)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v63 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v38 != 0) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40cccf : tmp_10);\n                            sub_408a10();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v29 > 1 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && (unsigned int)v27 != 32 && (unsigned int)v27 == 35 && v63 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v29 > 1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v38 != 0) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v29 > 1 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && v29 <= 1)\n                    {\n                        v9 = &g_40cccf;\n                    }\n                    else if (((unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v29 > 1 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && (unsigned int)v27 != 32 && (unsigned int)v27 == 35 && v63 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v29 > 1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && v38 != 0) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v29 > 1 || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1 || v38 != 0) && (unsigned int)v27 != 32 && (unsigned int)v27 != 35 && v29 <= 1) && v0 != 0 || v38 == 0 && v29 > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40cccf;\n            free(v17);\n        }\n        *((char *[2])&g_60f538[0]) = v9;\n    }\n    v68 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v69 = strcmp((tmp_10 == 0? &g_40cccf : tmp_10), v9);\n            if (v69 != 0 && (v68 != 42 || v9[1] != 0))\n            {\n                v70 = strlen(v9);\n                v71 = &((char [2])&v9[v70])[1];\n                v72 = strlen(&((char [2])&v9[v70])[1]);\n                v9 = v71 + v72 + 1;\n                v68 = (char)*((char *)(v71 + v72 + 1));\n                if (v68 == 0)\n                {\n                    break;\n                }\n            }\n            if (v69 == 0 || v68 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_408c70",
            "funcStartAddr": "0x408c70",
            "funcEndAddr": "0x408d45",
            "decompiledFuncCode": "int sub_408c70()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407c9c",
            "decompiledFuncCode": "int sub_407c50()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4029a1",
            "funcStartAddr": "0x4029a1",
            "funcEndAddr": "0x4029f8",
            "decompiledFuncCode": "extern char g_60f388;\nextern unsigned long long g_60f390;\n\nint sub_4029a1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_60f388 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_60f390 >= 0)\n            {\n                break;\n            }\n            g_60f390 = g_60f390 + 1;\n            *((long long *)(6352448 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_60f388 = 1;\n        return sub_40294b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406780",
            "funcStartAddr": "0x406780",
            "funcEndAddr": "0x40678f",
            "decompiledFuncCode": "extern int512_t g_60f4c0;\n\nint sub_406780()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_60f4c0 : v1)) = v2;\n    return &g_60f4c0;\n}\n"
        },
        {
            "funcName": "sub_409a20",
            "funcStartAddr": "0x409a20",
            "funcEndAddr": "0x409a38",
            "decompiledFuncCode": "int sub_409a20()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409370();\n}\n"
        },
        {
            "funcName": "sub_40a228",
            "funcStartAddr": "0x40a228",
            "funcEndAddr": "0x40a248",
            "decompiledFuncCode": "extern unsigned long long g_60ee30;\n\nint sub_40a228()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60ee30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407360",
            "funcStartAddr": "0x407360",
            "funcEndAddr": "0x4074a2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    struct struct_1 *field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n} struct_0;\n\nint sub_407360()\n{\n    void tmp_20;  // tmp #20\n    unsigned long long v1[4];  // rdi\n    struct_0 *v2;  // r12\n    void *v3;  // rsi\n    unsigned long v4;  // rdx\n    void *v5;  // rdi\n    void *v6;  // rbp\n    unsigned long v7;  // rbx\n    unsigned long long v9;  // r15\n    unsigned int *v11;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rdi\n    unsigned long v16;  // rdx\n    char *v18;  // r13\n    void *v20;  // r13\n\n    v2 = v1;\n    v6 = v3;\n    v7 = v4;\n    v18 = *(v1);\n    if (*(v1) != 0)\n    {\n        v11 = __errno_location();\n        while (true)\n        {\n            v13 = fread_unlocked(v6, 0x1, v7, v18);\n            v14 = *(v11);\n            v6 += v13;\n            v7 -= v13;\n            if (v7 == v13)\n            {\n                break;\n            }\n            v15 = v2->field_10;\n            tmp_20 = v14;\n            v16 = (unsigned int)((*(v2->field_0) & 32) == 0? 0 : (unsigned int)v14);\n            *(v11) = ((*(v2->field_0) & 32) == 0? 0 : tmp_20);\n            v2->padding_8();\n            v18 = v2->field_0;\n        }\n    }\n    else\n    {\n        v9 = v1[3];\n        v20 = &v1[263];\n        if (v4 > v1[3])\n        {\n            while (true)\n            {\n                v5 = v6;\n                v6 += v9;\n                v7 -= v9;\n                memcpy(v5, 0x800 - v9 + v20, v9);\n                if ((v6 & 7) != 0)\n                {\n                    v9 = 0x800;\n                    sub_407510();\n                }\n                else\n                {\n                    while (true)\n                    {\n                        if (v7 > 2047)\n                        {\n                            v6 += 0x800;\n                            v7 -= 0x800;\n                            v2->field_18 = 0;\n                            return sub_407510();\n                        }\n                    }\n                    sub_407510();\n                }\n            }\n            v9 = 0x800;\n        }\n        else\n        {\n            v20 = &((unsigned long long [4])((char *)&v1[263] + -1 * v1[3]))[0x100];\n        }\n        v13 = memcpy(v6, v20, v7);\n        v2->field_18 = v9 - v7;\n    }\n    return v13;\n}\n"
        },
        {
            "funcName": "sub_407050",
            "funcStartAddr": "0x407050",
            "funcEndAddr": "0x40732c",
            "decompiledFuncCode": "extern char g_406ff0;\n\nint sub_407050()\n{\n    void tmp_2;  // tmp #2\n    void tmp_27;  // tmp #27\n    unsigned long long v0;  // [bp-0x50]\n    unsigned int|char v1;  // [bp-0x48]\n    unsigned long long v3;  // rsi\n    unsigned long long v4;  // rbp\n    unsigned long v5;  // rdi\n    unsigned long long *v6;  // rbx\n    void *v7;  // r13\n    unsigned short v8;  // dx\n    unsigned int v9;  // r15d\n    unsigned long long v10;  // r14\n    unsigned long long v12[2];  // rbx\n    unsigned long long v13;  // rbx\n    unsigned long long v15;  // rbp\n    unsigned long long v17;  // r15\n    unsigned long v18;  // rbp\n    char *v20;  // rdi\n    char *v21;  // rsi\n    unsigned long long v22;  // rcx\n    unsigned long v23;  // d\n    unsigned long long v24;  // r14\n    char *v26;  // rsi\n    unsigned long long v27;  // rcx\n    char *v28;  // rdi\n    unsigned long v29;  // rbp\n    unsigned long long v31;  // rsi\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rbp\n    unsigned long v36;  // r14\n    unsigned long long v38;  // rsi\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rbp\n    unsigned long long v44;  // rsi\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rdx\n    unsigned long long v49;  // rax\n\n    if (v3 != 0)\n    {\n        v4 = v3;\n        if (v5 != 0)\n        {\n            v7 = (unsigned long long)(unsigned int)sub_409b20();\n            if (v7 != 0)\n            {\n                v12[0] = v7;\n                v12[1] = &g_406ff0;\n                v12 = (unsigned long long)(unsigned int)sub_408240();\n                v12[2] = v5;\n                setvbuf(v7, &v12[3], 0x0, (v4 <= 0x1000? v4 : 0x1000));\n            }\n            else\n            {\n                v13 = 0;\n            }\n        }\n        else\n        {\n            *(v6) = 0;\n            v6 = (unsigned long long)(unsigned int)sub_408240();\n            v6[1] = &g_406ff0;\n            v6[2] = 0;\n            v6[3] = 0;\n            v9 = open(\"/dev/urandom\", 0x0, v8);\n            if (v9 >= 0)\n            {\n                v15 = __read_chk(v9, (unsigned int)v6 + 32, (!(rbp<8> <= 0x800)? 0x800 : rbp<8>), 0x1018);\n                close(v9);\n                if (v15 <= 2047)\n                {\n                    tmp_2 = v15;\n                    tmp_27 = (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>);\n                    v17 = (char *)&v6[4] + ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15);\n                    v18 = ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) + (!(0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15) <= 16)? 16 : 0x800 - ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rbp<8>, 0x0<64>, cc_ndep<8>)? 0 : v15));\n                    *((int *)&v0) = (!(0x800 - (tmp_27? 0 : tmp_2) <= 16)? 16 : 0x800 - (tmp_27? 0 : tmp_2));\n                    gettimeofday(&v1, NULL);\n                    v20 = v17;\n                    v21 = &v1;\n                    for (v22 = v0; v22 != 0; v21 = &v21[v23])\n                    {\n                        v22 -= 1;\n                        *(v20) = v1;\n                        v20 = &v20[v23];\n                    }\n                    if (v18 <= 2047)\n                    {\n                        v24 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                        v26 = &v1;\n                        v1 = getpid();\n                        v27 = v24;\n                        v10 = v24 + v18;\n                        for (v28 = (char *)&v6[4] + v18; v27 != 0; v26 = &v26[v23])\n                        {\n                            v27 -= 1;\n                            *(v28) = v1;\n                            v28 = &v28[v23];\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v10 = 20;\n                gettimeofday(&v1, NULL);\n                *((int128_t *)(v13 + 32)) = *((int128_t *)&v1);\n                v1 = getpid();\n                *((unsigned int *)(v13 + 48)) = v1;\n            }\n            if (v9 < 0 || v15 <= 2047 && v18 <= 2047 && v10 <= 2047)\n            {\n                v29 = (!(0x800 - r14<8> <= 4)? 4 : 0x800 - r14<8>);\n                v31 = (char *)&v6[4] + v10;\n                v1 = getppid();\n                if ((unsigned int)v29 != 0)\n                {\n                    v33 = 0;\n                    do\n                    {\n                        v34 = v33;\n                        v33 = (unsigned int)v33 + 1;\n                        *((char *)(v31 + v34)) = v1;\n                    }\n                    while ((unsigned int)v33 < (unsigned int)v29);\n                }\n                v35 = v29 + v10;\n                if (v35 <= 2047)\n                {\n                    v36 = (!(0x800 - rbp<8> <= 4)? 4 : 0x800 - rbp<8>);\n                    v38 = (char *)&v6[4] + v35;\n                    v1 = getuid();\n                    if ((unsigned int)v36 != 0)\n                    {\n                        v40 = 0;\n                        do\n                        {\n                            v41 = v40;\n                            v40 = (unsigned int)v40 + 1;\n                            *((char *)(v38 + v41)) = v1;\n                        }\n                        while ((unsigned int)v40 < (unsigned int)v36);\n                    }\n                    v42 = v35 + v36;\n                    if (v42 <= 2047)\n                    {\n                        v44 = (char *)&v6[4] + v42;\n                        v1 = getgid();\n                        if ((unsigned int)(!(0x800 - v42 <= 4)? 4 : 0x800 - v42) != 0)\n                        {\n                            v46 = 0;\n                            do\n                            {\n                                v47 = v46;\n                                v46 = (unsigned int)v46 + 1;\n                                *((char *)(v44 + v47)) = v1;\n                            }\n                            while ((unsigned int)v46 < (!(0x800 - v42 <= 4)? 4 : 0x800 - v42));\n                        }\n                    }\n                }\n            }\n            sub_4077c0();\n        }\n    }\n    else\n    {\n        v13 = (unsigned int)sub_408240();\n        *((long long *)v13) = 0;\n        *((char **)(v13 + 8)) = &g_406ff0;\n        *((long long *)(v13 + 16)) = 0;\n    }\n    v49 = v13;\n    return v49;\n}\n"
        },
        {
            "funcName": "sub_407350",
            "funcStartAddr": "0x407350",
            "funcEndAddr": "0x407355",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_407350()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rax\n\n    v1->field_10 = v2;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_406de0",
            "funcStartAddr": "0x406de0",
            "funcEndAddr": "0x406df6",
            "decompiledFuncCode": "int sub_406de0()\n{\n}\n"
        },
        {
            "funcName": "sub_406c30",
            "funcStartAddr": "0x406c30",
            "funcEndAddr": "0x406c41",
            "decompiledFuncCode": "int sub_406c30()\n{\n}\n"
        },
        {
            "funcName": "sub_4084d0",
            "funcStartAddr": "0x4084d0",
            "funcEndAddr": "0x408593",
            "decompiledFuncCode": "int sub_4084d0()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    v2 = sub_4085d0();\n    if ((unsigned int)v2 == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            *(v6) = (0 - (unsigned int)(char)(v0 < 0x40000000) & -41) + 75;\n        }\n    }\n    else\n    {\n        v4 = v2;\n        v6 = __errno_location();\n        if (!(v4 != 1))\n        {\n            *(v6) = 75;\n        }\n        else if (v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || (unsigned int)v2 != 0 || v0 > v5)\n    {\n        sub_406de0();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: %s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_4029f8",
            "funcStartAddr": "0x4029f8",
            "funcEndAddr": "0x402a34",
            "decompiledFuncCode": "int sub_4029f8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406ab0",
            "funcStartAddr": "0x406ab0",
            "funcEndAddr": "0x406b1d",
            "decompiledFuncCode": "int sub_406ab0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406590();\n}\n"
        },
        {
            "funcName": "sub_406d70",
            "funcStartAddr": "0x406d70",
            "funcEndAddr": "0x406d83",
            "decompiledFuncCode": "int sub_406d70()\n{\n}\n"
        },
        {
            "funcName": "sub_406892",
            "funcStartAddr": "0x406892",
            "funcEndAddr": "0x4068bb",
            "decompiledFuncCode": "int sub_406892()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_406da0",
            "funcStartAddr": "0x406da0",
            "funcEndAddr": "0x406db2",
            "decompiledFuncCode": "int sub_406da0()\n{\n}\n"
        },
        {
            "funcName": "sub_406730",
            "funcStartAddr": "0x406730",
            "funcEndAddr": "0x406764",
            "decompiledFuncCode": "int sub_406730()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_408440();\n}\n"
        },
        {
            "funcName": "sub_406820",
            "funcStartAddr": "0x406820",
            "funcEndAddr": "0x406892",
            "decompiledFuncCode": "extern int512_t g_60f4c0;\n\nint sub_406820()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_60f4c0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_405360();\n}\n"
        },
        {
            "funcName": "sub_4085a0",
            "funcStartAddr": "0x4085a0",
            "funcEndAddr": "0x4085c1",
            "decompiledFuncCode": "int sub_4085a0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_4084d0();\n}\n"
        },
        {
            "funcName": "sub_407510",
            "funcStartAddr": "0x407510",
            "funcEndAddr": "0x4077b5",
            "decompiledFuncCode": "int sub_407510() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_404520",
            "funcStartAddr": "0x404520",
            "funcEndAddr": "0x4045c8",
            "decompiledFuncCode": "int sub_404520() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4042b0",
            "funcStartAddr": "0x4042b0",
            "funcEndAddr": "0x4042b8",
            "decompiledFuncCode": "extern char g_60f3a0;\n\nint sub_4042b0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_60f3a0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4045e0",
            "funcStartAddr": "0x4045e0",
            "funcEndAddr": "0x404f45",
            "decompiledFuncCode": "int sub_4045e0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406c60",
            "funcStartAddr": "0x406c60",
            "funcEndAddr": "0x406cd3",
            "decompiledFuncCode": "int sub_406c60()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406590();\n}\n"
        },
        {
            "funcName": "sub_406e70",
            "funcStartAddr": "0x406e70",
            "funcEndAddr": "0x406f5b",
            "decompiledFuncCode": "int sub_406e70()\n{\n    char v0;  // [bp-0x40]\n    char v1;  // [bp-0x3f]\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // r15\n    unsigned long long v5;  // rsi\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // r13\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    char *v11;  // rax\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned long v15;  // rsi\n    unsigned long v16;  // rcx\n    unsigned long long v17;  // rbx\n    unsigned long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rbp\n\n    v4 = v3;\n    v6 = v5 + 1;\n    v7 = v5;\n    v14 = v3[1];\n    v13 = v3[2];\n    while (true)\n    {\n        if (v13 < v7)\n        {\n            v8 = v13;\n            v9 = 0;\n            do\n            {\n                v9 += 1;\n                v8 = v8 * 0x100 + 255;\n            }\n            while (v7 > v8);\n            sub_407360();\n            v11 = &v0;\n            do\n            {\n                v11 = &v1;\n                v13 = v13 * 0x100 + 255;\n                v14 = v14 * 0x100 + v0;\n            }\n            while (v7 > v13);\n        }\n        if (v13 == v7 && v13 < v7 || v13 == v7 && v13 >= v7)\n        {\n            v4[2] = 0;\n            v4[1] = 0;\n        }\n        if (v13 < v7 && v13 != v7 || v13 != v7 && v13 >= v7)\n        {\n            v15 = (0 CONCAT v13 - v7) % v6 >> 64;\n            v16 = (0 CONCAT v13 - v7) % v6;\n            v17 = v13 - ((0 CONCAT v13 - v7) % v6 >> 64);\n            v18 = (0 CONCAT v14) % v6;\n            v19 = (0 CONCAT v14) % v6 >> 64;\n            if (v14 > v17)\n            {\n                v13 = v15 - 1;\n                v20 = v19;\n            }\n            else\n            {\n                v4[1] = v18;\n                v4[2] = v16;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_406ff0",
            "funcStartAddr": "0x406ff0",
            "funcEndAddr": "0x40704d",
            "decompiledFuncCode": "extern unsigned int g_40c478;\nextern unsigned int g_40c488;\nextern unsigned int g_60f2e0;\n\nint sub_406ff0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rbp\n    unsigned int *v5;  // rbx\n    char *v6;  // rax\n\n    v0 = v2;\n    if (v3 == 0)\n    {\n        abort(); /* do not return */\n    }\n    v4 = (unsigned int)sub_406de0();\n    v5 = __errno_location();\n    if (*(v5) != 0)\n    {\n        v6 = dcgettext(0x0, 0x40c488, 0x5);\n    }\n    else\n    {\n        v6 = dcgettext(0x0, 0x40c478, 0x5);\n    }\n    error(g_60f2e0, *(v5), v6);\n}\n"
        },
        {
            "funcName": "sub_409bc0",
            "funcStartAddr": "0x409bc0",
            "funcEndAddr": "0x409c16",
            "decompiledFuncCode": "int sub_409bc0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4083a0",
            "funcStartAddr": "0x4083a0",
            "funcEndAddr": "0x4083ea",
            "decompiledFuncCode": "int sub_4083a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40a190",
            "funcStartAddr": "0x40a190",
            "funcEndAddr": "0x40a19e",
            "decompiledFuncCode": "int sub_40a190()\n{\n}\n"
        },
        {
            "funcName": "sub_40855d",
            "funcStartAddr": "0x40855d",
            "funcEndAddr": "0x408562",
            "decompiledFuncCode": "int sub_40855d()\n{\n}\n"
        },
        {
            "funcName": "sub_406c50",
            "funcStartAddr": "0x406c50",
            "funcEndAddr": "0x406c5a",
            "decompiledFuncCode": "int sub_406c50()\n{\n}\n"
        },
        {
            "funcName": "sub_406d40",
            "funcStartAddr": "0x406d40",
            "funcEndAddr": "0x406d49",
            "decompiledFuncCode": "int sub_406d40()\n{\n}\n"
        },
        {
            "funcName": "sub_406d90",
            "funcStartAddr": "0x406d90",
            "funcEndAddr": "0x406d9a",
            "decompiledFuncCode": "int sub_406d90()\n{\n}\n"
        },
        {
            "funcName": "sub_402a00",
            "funcStartAddr": "0x402a00",
            "funcEndAddr": "0x402a15",
            "decompiledFuncCode": "int sub_402a00()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long v3;  // [bp-0x8]\n    unsigned long v5;  // r13\n    unsigned long v6;  // r12\n    unsigned long v7;  // rbx\n\n    v3 = v5;\n    v2 = v6;\n    v1 = stack_base + 0;\n    v0 = v7;\n}\n"
        },
        {
            "funcName": "sub_406baf",
            "funcStartAddr": "0x406baf",
            "funcEndAddr": "0x406c20",
            "decompiledFuncCode": "extern uint128_t g_60f4c0;\nextern uint128_t g_60f4d0;\nextern uint128_t g_60f4e0;\nextern unsigned long long g_60f4f0;\n\nint sub_406baf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_60f4f0;\n    *((uint128_t *)&v0) = g_60f4c0;\n    *((uint128_t *)&v1) = g_60f4d0;\n    *((uint128_t *)&v2) = g_60f4e0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_406590();\n}\n"
        },
        {
            "funcName": "sub_408440",
            "funcStartAddr": "0x408440",
            "funcEndAddr": "0x408468",
            "decompiledFuncCode": "int sub_408440()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_408240();\n}\n"
        },
        {
            "funcName": "sub_408a10",
            "funcStartAddr": "0x408a10",
            "funcEndAddr": "0x408a88",
            "decompiledFuncCode": "int sub_408a10()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_408bd0() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4074c0",
            "funcStartAddr": "0x4074c0",
            "funcEndAddr": "0x407501",
            "decompiledFuncCode": "int sub_4074c0()\n{\n    unsigned long long *v1;  // rdi\n\n    __explicit_bzero_chk();\n    free(v1);\n    if (*(v1) == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_406b20",
            "funcStartAddr": "0x406b20",
            "funcEndAddr": "0x406b89",
            "decompiledFuncCode": "int sub_406b20()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406590();\n}\n"
        },
        {
            "funcName": "sub_406c20",
            "funcStartAddr": "0x406c20",
            "funcEndAddr": "0x406c2d",
            "decompiledFuncCode": "int sub_406c20()\n{\n}\n"
        },
        {
            "funcName": "sub_406990",
            "funcStartAddr": "0x406990",
            "funcEndAddr": "0x40699a",
            "decompiledFuncCode": "int sub_406990()\n{\n}\n"
        },
        {
            "funcName": "sub_406b90",
            "funcStartAddr": "0x406b90",
            "funcEndAddr": "0x406b9c",
            "decompiledFuncCode": "int sub_406b90()\n{\n}\n"
        },
        {
            "funcName": "sub_4043e0",
            "funcStartAddr": "0x4043e0",
            "funcEndAddr": "0x40443a",
            "decompiledFuncCode": "int sub_4043e0()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_404380();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4040c0",
            "funcStartAddr": "0x4040c0",
            "funcEndAddr": "0x4041cf",
            "decompiledFuncCode": "extern unsigned int g_40b5fd;\nextern unsigned long long stderr[7];\n\nint sub_4040c0()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b5fd, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_406de0();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_406de0();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_40294b",
            "funcStartAddr": "0x40294b",
            "funcEndAddr": "0x40296a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_40294b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404fb0",
            "funcStartAddr": "0x404fb0",
            "funcEndAddr": "0x405141",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4241040];\n    unsigned int field_40b690;\n} struct_0;\n\nextern int512_t g_40b690;\n\nint sub_404fb0()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned int *v2;  // rsi\n    unsigned long long *v4;  // rdx\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rax\n    char *v8;  // rbx\n    unsigned long long v9;  // rbp\n    struct_0 *v10;  // rax\n    unsigned int v11;  // ebp\n    unsigned long long v12;  // rdx\n    unsigned long long v13;  // rsi\n\n    v8 = v6;\n    if (v6 == 0)\n    {\n        v8 = getenv(\"BLOCK_SIZE\");\n        if (v8 == 0)\n        {\n            v8 = getenv(\"BLOCKSIZE\");\n            if (v8 == 0)\n            {\n                v7 = getenv(\"POSIXLY_CORRECT\");\n                if (v7 != 0)\n                {\n                    *(v4) = 0x200;\n                    v7 = 0;\n                    *(v2) = 0;\n                }\n                else\n                {\n                    *(v4) = 0x400;\n                    *(v2) = 0;\n                }\n            }\n        }\n    }\n    if (v8 != 0 || v8 != 0 || v6 != 0)\n    {\n        v9 = 0;\n        if (*(v8) == 39)\n        {\n            v8 = &v8[1];\n            v9 = 4;\n        }\n        v10 = sub_403f20();\n        if ((unsigned int)v10 >= 0)\n        {\n            *(v4) = 1;\n            v11 = (unsigned int)v9 | *((int *)(0x4 * v10 + (char *)&g_40b690));\n            v7 = 0;\n            *(v2) = v11;\n        }\n        else\n        {\n            v7 = sub_4085d0();\n            if ((unsigned int)v7 == 0)\n            {\n                if (((unsigned long long)*(v8) - 48 & 255) > 9)\n                {\n                    if (v8 != v0)\n                    {\n                        do\n                        {\n                            v8 = &v8[1];\n                            v13 = *(v8);\n                        }\n                        while ((v13 - 48 & 255) > 9 && v8 != v0);\n                        if ((v13 - 48 & 255) > 9)\n                        {\n                        }\n                        else\n                        {\n                            v12 = *(v4);\n                            *((unsigned long long *)&v2) = v9;\n                        }\n                    }\n                    if (v8 == v0 || *((char *)(v0 - 1)) != 66)\n                    {\n                        if (*((char *)(v0 - 1)) != 66)\n                        {\n                            v9 |= 128;\n                        }\n                        else\n                        {\n                            v9 = (unsigned int)v9 | 384;\n                        }\n                        if (*((char *)(v0 - 2)) == 105 || *((char *)(v0 - 1)) != 66)\n                        {\n                            v9 = (unsigned int)v9 | 32;\n                        }\n                    }\n                }\n                v12 = *(v4);\n                *((unsigned long long *)&v2) = v9;\n            }\n            else\n            {\n                *(v2) = 0;\n                v12 = *(v4);\n            }\n            if (v12 == 0)\n            {\n                *(v4) = (unsigned long long)((unsigned int)(0 - (unsigned long long)(char)(getenv(\"POSIXLY_CORRECT\") < 1)) & 0x200) + 0x200;\n                return 4;\n            }\n        }\n    }\n    if ((unsigned int)v10 >= 0 || v12 != 0 || v8 == 0 && v8 == 0 && v6 == 0)\n    {\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_408410",
            "funcStartAddr": "0x408410",
            "funcEndAddr": "0x40843e",
            "decompiledFuncCode": "int sub_408410()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_408490(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409ac0",
            "funcStartAddr": "0x409ac0",
            "funcEndAddr": "0x409b1c",
            "decompiledFuncCode": "int sub_409ac0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_408a10();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4083f0",
            "funcStartAddr": "0x4083f0",
            "funcEndAddr": "0x408407",
            "decompiledFuncCode": "int sub_4083f0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_408240();\n}\n"
        },
        {
            "funcName": "sub_404440",
            "funcStartAddr": "0x404440",
            "funcEndAddr": "0x404492",
            "decompiledFuncCode": "int sub_404440()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_408d50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x40934e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40cbb8;\nextern unsigned int g_40cbd8;\nextern unsigned int g_40cc08;\nextern unsigned int g_40cc28;\nextern unsigned int g_40cc58;\nextern unsigned long long stderr;\n\nint sub_408d50()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40cbb8, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40cbd8, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (*(v18) == 0 || v22 == v16) && (v22 == v16 || v4 == 0) && (v22 == v16 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40cc58, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40cc28, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v17) != 0 || v34 != 0))\n        {\n            return v42;\n        }\n    }\n    if (*((long long *)v17) == 0 && v28 == 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0 || v34 == 0 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40cc08, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_406a70",
            "funcStartAddr": "0x406a70",
            "funcEndAddr": "0x406a86",
            "decompiledFuncCode": "int sub_406a70()\n{\n}\n"
        },
        {
            "funcName": "sub_406590",
            "funcStartAddr": "0x406590",
            "funcEndAddr": "0x406730",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_60f338;\nextern uint128_t g_60f340;\nextern unsigned int g_60f350;\nextern int512_t g_60f3c0;\n\nint sub_406590()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_60f338;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_60f350 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_60f338 != 6353728)\n            {\n                v16 = sub_4082a0();\n                g_60f338 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4082a0();\n                v17 = v15;\n                g_60f338 = v15;\n                *(v15) = g_60f340;\n            }\n            memset(&v17[(long long)(int)g_60f350], 0x0, (int)((unsigned int)v13 + 1 - g_60f350) * 16);\n            g_60f350 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_408490(); /* do not return */\n        }\n    }\n    if (g_60f350 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_405360();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6353856)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_408240();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_405360();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf"
}