{
    "funcInfo": [
        {
            "funcName": "sub_407cf0",
            "funcStartAddr": "0x407cf0",
            "funcEndAddr": "0x407cff",
            "decompiledFuncCode": "extern int512_t g_623c40;\n\nint sub_407cf0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_623c40 : v1)) = v2;\n    return &g_623c40;\n}\n"
        },
        {
            "funcName": "sub_407e2b",
            "funcStartAddr": "0x407e2b",
            "funcEndAddr": "0x407ef1",
            "decompiledFuncCode": "int sub_407e2b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_4068d0();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_409160();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_4068d0();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4057e0",
            "funcStartAddr": "0x4057e0",
            "funcEndAddr": "0x40584d",
            "decompiledFuncCode": "int sub_4057e0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_405520();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_405640();\n        sub_4056c0();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4155b0",
            "funcStartAddr": "0x4155b0",
            "funcEndAddr": "0x4155c2",
            "decompiledFuncCode": "int sub_4155b0()\n{\n}\n"
        },
        {
            "funcName": "sub_419160",
            "funcStartAddr": "0x419160",
            "funcEndAddr": "0x4192c5",
            "decompiledFuncCode": "extern char g_41924c;\n\nint sub_419160()\n{\n    unsigned long v0;  // [bp-0x48]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v3;  // rdi\n    char *v4;  // rbx\n    unsigned long long v5;  // rdx\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rsi\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // r8\n    unsigned long long *v13;  // rcx\n    unsigned long long v14;  // r8\n    char v15[2];  // r9\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n\n    v4 = v3;\n    v6 = v5 * 8;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>)) && [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rdx<8>, 0x3d<8>), Shr(rdx<8>, 0x3c<8>), cc_ndep<8>) == 0)\n    {\n        if (v5 << 3 <= 4015)\n        {\n            rsp<8> = stack_base + -56 - (v6 + 39 & -0x10);\n            v7 = (stack_base + -56 - (v6 + 39 & -0x10) + 15 & -0x10) + 16;\n        }\n        else\n        {\n            v1 = v8;\n            rsp<8> = stack_base + -64;\n            v7 = (unsigned int)sub_41b0d0();\n            v9 = v1;\n        }\n    }\n    if ([D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rdx<8>, 0x3d<8>), Shr(rdx<8>, 0x3c<8>), cc_ndep<8>) == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>)) && v5 << 3 > 4015 && v7 == 0 || [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rdx<8>, 0x3d<8>), Shr(rdx<8>, 0x3c<8>), cc_ndep<8>) == 0 && v5 << 3 <= 4015 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>)) && (stack_base + -56 - ((v5 << 3) + 39 & -0x10) + 15 & -0x10) + 16 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>)) && [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rdx<8>, 0x3d<8>), Shr(rdx<8>, 0x3c<8>), cc_ndep<8>) != 0 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>))\n    {\n        return 0;\n    }\n    if ([D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rdx<8>, 0x3d<8>), Shr(rdx<8>, 0x3c<8>), cc_ndep<8>) == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>)) && v5 << 3 > 4015 && v7 != 0 || [D] amd64g_calculate_condition(0x5<64>, 0x24<64>, Shr(rdx<8>, 0x3d<8>), Shr(rdx<8>, 0x3c<8>), cc_ndep<8>) == 0 && v5 << 3 <= 4015 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x20<64>, Shl(rdx<8>, 0x3<8>), Shl(rdx<8>, 0x2<8>), cc_ndep<8>)) && (stack_base + -56 - ((v5 << 3) + 39 & -0x10) + 15 & -0x10) + 16 != 0)\n    {\n        *((long long *)(v7 + 8)) = 1;\n        v12 = 0;\n        v10 = 2;\n        if (v5 > 2)\n        {\n            while (true)\n            {\n                v11 = (char)*((char *)(v9 + v10 - 1));\n                if (*((char *)(v9 + v10 - 1)) != *((char *)(v9 + v12)))\n                {\n                    while (true)\n                    {\n                        if (v12 != 0)\n                        {\n                            v12 -= *((long long *)(v7 + v12 * 8));\n                            if (*((char *)(v9 + v12)) == v11)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            *((long long *)(v7 + 2 * 8)) = 2;\n                            v12 = 0;\n                        }\n                    }\n                    if (v12 != 0)\n                    {\n                        v12 += 1;\n                        *((unsigned long long *)(v7 + v10 * 8)) = v10 - v12;\n                    }\n                    else if (v12 == 0)\n                    {\n                        v10 += 1;\n                        if (v5 == v10)\n                        {\n                            break;\n                        }\n                    }\n                }\n                v12 += 1;\n                *((unsigned long long *)(v7 + v10 * 8)) = v10 - v12;\n            }\n        }\n        *(v13) = 0;\n        v14 = *(v4);\n        v15 = v4;\n        v16 = 0;\n        while (v14 != 0)\n        {\n            while (true)\n            {\n                if (*((char *)(v1 + v16)) == v14)\n                {\n                    v17 = v16 + 1;\n                    if (v5 != v17)\n                    {\n                        v14 = v15[1];\n                    }\n                    else\n                    {\n                        *(v13) = v4;\n                    }\n                }\n                else if (v16 != 0)\n                {\n                    v4 = &v4[*((long long *)(v7 + v16 * 8))];\n                    v16 -= *((long long *)(v7 + v16 * 8));\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v14 = v15[1];\n                }\n            }\n            if (v16 != 0 || *((char *)(v1 + v16)) == v14 && v5 == v17)\n            {\n                rsp<8> = rsp<8> - 8;\n                v0 = &g_41924c;\n                sub_41b140();\n                return 1;\n            }\n        }\n        rsp<8> = rsp<8> - 8;\n        v0 = &g_41924c;\n        sub_41b140();\n        return 1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4155e0",
            "funcStartAddr": "0x4155e0",
            "funcEndAddr": "0x4155f2",
            "decompiledFuncCode": "int sub_4155e0()\n{\n}\n"
        },
        {
            "funcName": "sub_40bd10",
            "funcStartAddr": "0x40bd10",
            "funcEndAddr": "0x40be3c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[24];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[16];\n    unsigned long long field_58;\n    char padding_60[24];\n    unsigned long long field_78;\n    char padding_80[8];\n    char field_88;\n    char padding_89[7];\n    unsigned int field_90;\n    char padding_94[36];\n    unsigned long long field_b8;\n} struct_0;\n\nint sub_40bd10()\n{\n    unsigned long long v1[24];  // rdi\n    unsigned long long v2;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // eax\n    unsigned long v8;  // rsi\n    unsigned long long v9;  // rcx\n    char *v10;  // rax\n    char *v11;  // rcx\n\n    if (v1[8] <= 1152921504606846974)\n    {\n        v2 = (unsigned int)sub_40b170();\n        if ((unsigned int)v2 == 0)\n        {\n            v3 = v1[23];\n            if (v3->field_b8 != 0)\n            {\n                v4 = realloc(v3, v3->field_40 * 8 + 8);\n                if (v4 != 0)\n                {\n                    v3->field_b8 = v4;\n                }\n            }\n            if (v3->field_b8 == 0 || v4 != 0)\n            {\n                v5 = v3->field_90;\n                if (v3->field_88 != 0)\n                {\n                    if (v5 <= 1)\n                    {\n                        sub_40b4e0();\n                        return stack_base + 0;\n                    }\n                }\n                else\n                {\n                    if (v5 <= 1)\n                    {\n                        v11 = v3->field_78;\n                        if (v3->field_78 != 0)\n                        {\n                            v10 = v3->field_30;\n                            v8 = (v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58);\n                            if ((v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58) <= v3->field_30)\n                            {\n                                v3->field_30 = v10;\n                                v3->field_38 = v10;\n                            }\n                            else\n                            {\n                                while (true)\n                                {\n                                    v9 = v11[(unsigned long long)v10[v3->field_28 + v3->field_0]];\n                                    *((unsigned long long *)&v10[v3->field_8]) = v9;\n                                    v10 = &v10[1];\n                                    if (v8 == v10)\n                                    {\n                                        break;\n                                    }\n                                    v11 = v3->field_78;\n                                }\n                                v3->field_30 = v8;\n                                v3->field_38 = v8;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        sub_40b560();\n                        return stack_base + 0;\n                    }\n                }\n            }\n        }\n        if ((v3->field_88 == 0 || (unsigned int)v2 != 0) && (v5 <= 1 || (unsigned int)v2 != 0) && (v3->field_b8 == 0 || v4 != 0 || (unsigned int)v2 != 0))\n        {\n            return stack_base + 0;\n        }\n    }\n    if (v1[8] > 1152921504606846974 || v4 == 0 && (unsigned int)v2 == 0 && v3->field_b8 != 0)\n    {\n        return 12;\n    }\n}\n"
        },
        {
            "funcName": "sub_40fde0",
            "funcStartAddr": "0x40fde0",
            "funcEndAddr": "0x40fe05",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    char padding_20[16];\n    char field_30;\n    char padding_31[7];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_40fde0()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    struct_0 *v3;  // rsi\n    unsigned long v4;  // rbx\n\n    if (v3->field_30 == 16)\n    {\n        tmp_19 = v3->field_8->field_38;\n        v3->field_18 = v3->field_8->field_18;\n        v3->field_38 = tmp_19;\n        return 0;\n    }\n    v1 = stack_base + 0;\n    v0 = v4;\n}\n"
        },
        {
            "funcName": "sub_4081d0",
            "funcStartAddr": "0x4081d0",
            "funcEndAddr": "0x408243",
            "decompiledFuncCode": "int sub_4081d0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407b00();\n}\n"
        },
        {
            "funcName": "sub_404631",
            "funcStartAddr": "0x404631",
            "funcEndAddr": "0x404688",
            "decompiledFuncCode": "extern char g_623388;\nextern unsigned long long g_623390;\n\nint sub_404631()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_623388 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_623390 >= 0)\n            {\n                break;\n            }\n            g_623390 = g_623390 + 1;\n            *((long long *)(6434368 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_623388 = 1;\n        return sub_4045db();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40fe08",
            "funcStartAddr": "0x40fe08",
            "funcEndAddr": "0x40fe64",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[8];\n    unsigned int field_28;\n    char padding_2c[4];\n    char field_30;\n    char padding_31[7];\n    unsigned long long field_38;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_1;\n\nint sub_40fe08()\n{\n    unsigned long long v0;  // [bp+0x0]\n    struct_0 *v2;  // rbx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // rbx\n\n    v2->field_18 = v3;\n    v4 = (unsigned int)sub_40bf60();\n    v2->field_38 = v4;\n    if (v4 != -1)\n    {\n        v5 = 0;\n        if (v2->field_30 == 12)\n        {\n            *((unsigned int *)(v4 * 16 + v0 + 8)) = *((int *)(v4 * 16 + v0 + 8)) & -261889 | (unsigned int)((unsigned long long)(v2->field_28 & 1023) * 0x100);\n        }\n    }\n    else\n    {\n        v5 = 12;\n    }\n    v7 = v0;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_407e02",
            "funcStartAddr": "0x407e02",
            "funcEndAddr": "0x407e2b",
            "decompiledFuncCode": "int sub_407e02()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_404780",
            "funcStartAddr": "0x404780",
            "funcEndAddr": "0x4049a9",
            "decompiledFuncCode": "int sub_404780()\n{\n    char *v1;  // rdi\n    char v2[3];  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long|char * v7;  // rbp\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // cc_dep1\n    char v10[2];  // rbx\n    unsigned long long v11;  // cc_dep1\n    unsigned long long v12;  // cc_dep1\n    char v13[2];  // rbx\n    char v14[2];  // rbx\n    char v15[2];  // rbx\n    char v16[2];  // rbx\n    char v17[2];  // rbx\n    char v18[2];  // rax\n    unsigned long long v19;  // rcx\n    unsigned long long v20;  // rbx\n    char v21[2];  // rbx\n    char v22[2];  // rbx\n    char v23[2];  // rdx\n    char v24[2];  // rbx\n    unsigned long long v25;  // r8\n    char v26[2];  // rbx\n    unsigned long long v27;  // rax\n    char *v28;  // rsi\n    unsigned long long v29;  // rdx\n    unsigned long long v30;  // rax\n    char v31[3];  // rcx\n\n    v2 = v1;\n    strlen(v1);\n    v4 = sub_409160();\n    v8 = *(v1);\n    v7 = v4;\n    while (v8 != 0)\n    {\n        while (true)\n        {\n            v6 = v2[1];\n            v31 = &v2[1];\n            if (v8 != 92)\n            {\n                *((unsigned long long *)&v7) = v8;\n                v8 = v6;\n                v7 = &v7[1];\n                v2 = v31;\n                if ((char)v6 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v8;\n                if ((char)v8 != 102)\n                {\n                    if (v9 <= 102)\n                    {\n                        v11 = v8;\n                        if ((char)v8 == 97)\n                        {\n                            *(v7) = 7;\n                            v8 = v2[2];\n                            v7 = &v7[1];\n                            v13 = &v2[2];\n                        }\n                        else if (v11 <= 97)\n                        {\n                            if ((char)v8 == 0)\n                            {\n                                break;\n                            }\n                            if ((char)v8 == 48)\n                            {\n                                v18 = &v2[2];\n                                v19 = 0;\n                                v20 = &v2[5];\n                                while (true)\n                                {\n                                    v8 = v18[0];\n                                    if (((unsigned long long)v18[0] - 48 & 255) <= 7)\n                                    {\n                                        v19 = v8 + v19 * 8 - 48;\n                                        v23 = &v18[1];\n                                        if (v20 != &v18[1])\n                                        {\n                                            v18 = v23;\n                                        }\n                                        else\n                                        {\n                                            v8 = v18[1];\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v26 = v18;\n                                    }\n                                }\n                                *((unsigned long long *)&v7) = v19;\n                                v7 = &v7[1];\n                            }\n                        }\n                        else\n                        {\n                            if ((char)v8 == 98)\n                            {\n                                *(v7) = 8;\n                                v8 = v2[2];\n                                v7 = &v7[1];\n                                v15 = &v2[2];\n                            }\n                            if ((char)v8 == 99)\n                            {\n                                do\n                                {\n                                    v31 = &v31[1];\n                                }\n                                while (v31[0] != 0);\n                                *(v7) = 0;\n                                return v8;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v12 = v8;\n                        if ((char)v8 == 116)\n                        {\n                            *(v7) = 9;\n                            v8 = v2[2];\n                            v7 = &v7[1];\n                            v14 = &v2[2];\n                        }\n                        else if (v12 <= 116)\n                        {\n                            if ((char)v8 == 110)\n                            {\n                                *(v7) = 10;\n                                v8 = v2[2];\n                                v7 = &v7[1];\n                                v16 = &v2[2];\n                            }\n                            if ((char)v8 == 114)\n                            {\n                                *(v7) = 13;\n                                v8 = v2[2];\n                                v7 = &v7[1];\n                                v21 = &v2[2];\n                            }\n                        }\n                        else\n                        {\n                            if ((char)v8 == 118)\n                            {\n                                *(v7) = 11;\n                                v8 = v2[2];\n                                v7 = &v7[1];\n                                v17 = &v2[2];\n                            }\n                            if ((char)v8 == 120)\n                            {\n                                v24 = &v2[2];\n                                v25 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                while (true)\n                                {\n                                    v27 = v24[0];\n                                    v8 = v24[0];\n                                    if ((*((char *)(v25 + ((unsigned long long)v24[0] << 1) + 1)) & 16) != 0)\n                                    {\n                                        v28 = v31 * 16;\n                                        if ((v8 - 97 & 255) > 5)\n                                        {\n                                            v29 = (unsigned int)(v8 - 65 > 5? (unsigned int)(v27 - 48) : (unsigned int)(v27 - 55));\n                                        }\n                                        else\n                                        {\n                                            v29 = v27 - 87;\n                                        }\n                                        v1 = &v1[1];\n                                        v31 = &v28[v29];\n                                        v24 = &v24[1];\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v7 = &v7[2];\n                                        *((short *)(v7 - 2)) = 30812;\n                                    }\n                                    if (v1 == 3 && (*((char *)(v25 + ((unsigned long long)v24[0] << 1) + 1)) & 16) != 0 || (*((char *)(v25 + ((unsigned long long)v24[0] << 1) + 1)) & 16) == 0 && v1 != 0)\n                                    {\n                                        *((char *[3])&v7) = v31;\n                                        v8 = v24[0];\n                                        v7 = &v7[1];\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v9 <= 102 && v11 <= 97 && (char)v8 != 48 && (char)v8 != 97 && (char)v8 != 0 || v9 <= 102 && (char)v8 != 97 && (char)v8 != 98 && v11 > 97 && (char)v8 != 99 || v12 <= 116 && (char)v8 != 116 && (char)v8 != 110 && v9 > 102 && (char)v8 != 114 || (char)v8 != 116 && v9 > 102 && (char)v8 != 120 && (char)v8 != 118 && v12 > 116)\n                    {\n                        *(v7) = 92;\n                        v8 = v2[2];\n                        v7 = &v7[2];\n                        v22 = &v2[2];\n                        *((char *)(v7 - 1)) = v8;\n                    }\n                }\n                else\n                {\n                    *(v7) = 12;\n                    v8 = v2[2];\n                    v7 = &v7[1];\n                    v10 = &v2[2];\n                }\n            }\n        }\n        if (v8 != 92 || v9 <= 102 && v11 <= 97 && (char)v8 != 97 && (char)v8 != 102)\n        {\n            *(v7) = 0;\n            v30 = v4;\n            return v30;\n        }\n    }\n    *(v7) = 0;\n    v30 = v4;\n    return v30;\n}\n"
        },
        {
            "funcName": "sub_4082c0",
            "funcStartAddr": "0x4082c0",
            "funcEndAddr": "0x4082d7",
            "decompiledFuncCode": "int sub_4082c0()\n{\n}\n"
        },
        {
            "funcName": "sub_409d80",
            "funcStartAddr": "0x409d80",
            "funcEndAddr": "0x409e55",
            "decompiledFuncCode": "int sub_409d80()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40c840",
            "funcStartAddr": "0x40c840",
            "funcEndAddr": "0x40c887",
            "decompiledFuncCode": "int sub_40c840()\n{\n    unsigned long v1;  // rsi\n    unsigned long long v2[7];  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v6;  // rdx\n\n    if (v1 + 1 < v2[6] && *((int *)(v2[2] + (v1 + 1 << 2))) == -1)\n    {\n        v6 = 2;\n        while (true)\n        {\n            v3 = v6;\n            if (v6 != v2[6] - v1)\n            {\n                v6 += 1;\n                if (*((int *)(v2[2] + (v1 + 1) * 4 - 4 + (v6 << 2) - 4)) != -1)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return v3;\n            }\n        }\n    }\n    if (v1 + 1 >= v2[6] || *((int *)(v2[2] + (v1 + 1 << 2))) != -1)\n    {\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40c900",
            "funcStartAddr": "0x40c900",
            "funcEndAddr": "0x40c9eb",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_2;\n\nint sub_40c900()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[6];  // r12\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // rax\n    unsigned int v6;  // r8d\n    unsigned long v7;  // rcx\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v11;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n\n    v2 = v1;\n    v14 = v3;\n    while (true)\n    {\n        v4 = sub_40c890();\n        if (v4 == 0)\n        {\n            v5 = v14 * 16 + *(v2);\n            if (*(v5) == v7 && (char)*((char *)((v14 << 4) + *(v2) + 8)) == v6 && v6 == 9)\n            {\n                v15 = sub_40b280();\n            }\n            if (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6)\n            {\n                v8 = sub_40b280();\n                if (v8 != 0)\n                {\n                    v9 = v14 * 24;\n                    v11 = *((long long *)(v2[5] + v9 + 8));\n                    if (*((long long *)(v2[5] + v9 + 8)) != 0)\n                    {\n                        v12 = *((long long *)(v2[5] + v9 + 16));\n                        if (v11 == 2)\n                        {\n                            v13 = sub_40c900();\n                            if ((unsigned int)v13 == 0)\n                            {\n                                v12 = *((long long *)(v2[5] + v9 + 16));\n                            }\n                        }\n                    }\n                }\n            }\n            if ((*(v5) == v7 || v8 == 0) && (v8 == 0 || (char)*((char *)((v14 << 4) + *(v2) + 8)) == v6) && (v15 == 0 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6) && (v6 == 9 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6))\n            {\n                v13 = 12;\n            }\n        }\n        if (v4 != 0 || *(v5) == v7 && (char)*((char *)((v14 << 4) + *(v2) + 8)) == v6 && v15 != 0 || *(v5) == v7 && (char)*((char *)((v14 << 4) + *(v2) + 8)) == v6 && v6 != 9 || *((long long *)(v2[5] + v9 + 8)) == 0 && *(v5) != v7 && v8 != 0 || *((long long *)(v2[5] + v9 + 8)) == 0 && v8 != 0 && (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6)\n        {\n            return 0;\n        }\n        if (v4 == 0 && v11 == 2 && *((long long *)(v2[5] + v9 + 8)) != 0 && v8 != 0 && (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6) && (unsigned int)v13 != 0 || v4 == 0 && (*(v5) == v7 || v8 == 0) && (v8 == 0 || (char)*((char *)((v14 << 4) + *(v2) + 8)) == v6) && (v15 == 0 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6) && (v6 == 9 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6))\n        {\n            return v13;\n        }\n        if (v4 == 0 && v11 == 2 && *((long long *)(v2[5] + v9 + 8)) != 0 && v8 != 0 && (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6) && (unsigned int)v13 == 0 || v4 == 0 && *((long long *)(v2[5] + v9 + 8)) != 0 && v8 != 0 && (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != v6) && v11 != 2)\n        {\n            v14 = *(v12);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4091b0",
            "funcStartAddr": "0x4091b0",
            "funcEndAddr": "0x4091b2",
            "decompiledFuncCode": "int sub_4091b0()\n{\n}\n"
        },
        {
            "funcName": "sub_40c4c0",
            "funcStartAddr": "0x40c4c0",
            "funcEndAddr": "0x40c4eb",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[107];\n    char field_8b;\n} struct_0;\n\nint sub_40c4c0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n\n    v2 = v1;\n    free(v1->field_10);\n    if (v2->field_8b == 0)\n    {\n        return (unsigned long long)free(v2->field_18);\n    }\n}\n"
        },
        {
            "funcName": "sub_408000",
            "funcStartAddr": "0x408000",
            "funcEndAddr": "0x408012",
            "decompiledFuncCode": "int sub_408000()\n{\n}\n"
        },
        {
            "funcName": "sub_40ab30",
            "funcStartAddr": "0x40ab30",
            "funcEndAddr": "0x40ab48",
            "decompiledFuncCode": "int sub_40ab30()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40a480();\n}\n"
        },
        {
            "funcName": "sub_40c5c0",
            "funcStartAddr": "0x40c5c0",
            "funcEndAddr": "0x40c808",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    struct struct_1 *field_10;\n    char padding_18[8];\n    struct struct_2 *field_20;\n    char padding_28[8];\n    char field_30;\n    char padding_31[7];\n    unsigned long long field_38;\n} struct_0;\n\ntypedef struct struct_6 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char padding_30[128];\n    char field_b0;\n} struct_6;\n\ntypedef struct struct_5 {\n    char padding_0[40];\n    unsigned long long field_28;\n} struct_5;\n\ntypedef struct struct_1 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_1;\n\nint sub_40c5c0()\n{\n    void tmp_9;  // tmp #9\n    void tmp_21;  // tmp #21\n    void tmp_8;  // tmp #8\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rdx\n    struct_6 *v3;  // rdi\n    unsigned long long v4[6];  // rdi\n    unsigned long long *v5;  // rdx\n    struct_5 *v6;  // rdi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rax\n    unsigned long long *v9;  // rdx\n    unsigned long long *v10;  // rbp\n    unsigned long long *v11;  // rax\n    struct_1 *v12;  // rdi\n    unsigned long long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // r12\n    unsigned long long v16[2];  // rax\n\n    v2 = v1->field_38;\n    switch (v1->field_30)\n    {\n    case 2:\n        if (v1->field_20 != 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n    case 4:\n        *((unsigned long long *)(v4[3] + v1->field_38 * 8)) = v1->field_20->field_38;\n        if (v1->field_30 == 4)\n        {\n            tmp_9 = v4[5];\n            v9 = v2 * 3;\n            v10 = v4[5] + v9 * 8;\n            *((long long *)(v4[5] + v9 * 8)) = 1;\n            *((long long *)(tmp_9 + v9 * 8 + 8)) = 1;\n            v11 = malloc(0x8);\n            *((unsigned long long **)(tmp_9 + v1->field_38 * 24 + 16)) = v11;\n            if (v11 != 0)\n            {\n                *(v11) = v1->field_20->field_38;\n                v14 = 0;\n            }\n            else\n            {\n                *((long long *)(tmp_9 + v1->field_38 * 24 + 8)) = 0;\n                v14 = 12;\n                *(v10) = 0;\n            }\n        }\n    case 8: case 9: case 12:\n        v5 = v2 * 3;\n        tmp_21 = v6->field_28;\n        v7 = v6->field_28 + v5 * 8;\n        *((long long *)(v6->field_28 + v5 * 8)) = 1;\n        *((long long *)(tmp_21 + v5 * 8 + 8)) = 1;\n        v8 = malloc(0x8);\n        *((unsigned long long **)(tmp_21 + v1->field_38 * 24 + 16)) = v8;\n        if (v8 != 0)\n        {\n            *(v8) = v1->field_20->field_38;\n            return 0;\n        }\n        *((long long *)(tmp_21 + v1->field_38 * 24 + 8)) = 0;\n        v14 = 12;\n        *(v7) = 0;\n        break;\n    case 10: case 11:\n        v3->field_b0 = v3->field_b0 | 1;\n        if (v1->field_8 != 0)\n        {\n            v13 = *((long long *)(v1->field_8->field_18 + 56));\n        }\n        else\n        {\n            v13 = v1->field_20->field_38;\n        }\n        if (v1->field_10 != 0)\n        {\n            v15 = *((long long *)(v1->field_10->field_18 + 56));\n        }\n        else\n        {\n            v15 = v1->field_20->field_38;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            *((long long *)(v3->field_28 + v1->field_38 * 24)) = 2;\n            v16 = malloc(0x10);\n            *((unsigned long long *[2])(tmp_8 + v1->field_38 * 24 + 16)) = v16;\n            if (!(v16 != 0))\n            {\n                v14 = 12;\n            }\n            else if (v13 != v15)\n            {\n                *((long long *)(tmp_8 + v1->field_38 * 24 + 8)) = 2;\n                if (v13 < v15)\n                {\n                    v16[0] = v13;\n                    v16[1] = v15;\n                    v14 = 0;\n                }\n                else\n                {\n                    v16[0] = v15;\n                    v16[1] = v13;\n                    v14 = 0;\n                }\n            }\n            else\n            {\n                *((long long *)(tmp_8 + v1->field_38 * 24 + 8)) = 1;\n                v16[0] = v13;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            __assert_fail(); /* do not return */\n        }\n    case 16:\n        v14 = 0;\n        break;\n    }\n    if ((v1->field_30 & 8) == 0)\n    {\n        *((unsigned long long *)(v12->field_18 + v1->field_38 * 8)) = v1->field_20->field_38;\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n    if (false)\n    {\n        __assert_fail(); /* do not return */\n    }\n    return v14;\n}\n"
        },
        {
            "funcName": "sub_40c460",
            "funcStartAddr": "0x40c460",
            "funcEndAddr": "0x40c4b9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40c460()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long v3[13];  // rdi\n    unsigned long long v4[13];  // rbx\n\n    v0 = v2;\n    v4 = v3;\n    free(v3[6]);\n    free(v4[9]);\n    if (v4[10] != &v4[1])\n    {\n        free(*((long long *)(v4[10] + 16)));\n        free(v4[10]);\n    }\n    free(v4[3]);\n    free(v4[12]);\n    free(v4[11]);\n}\n"
        },
        {
            "funcName": "sub_419140",
            "funcStartAddr": "0x419140",
            "funcEndAddr": "0x419157",
            "decompiledFuncCode": "extern int512_t g_41e840;\n\nint sub_419140()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // eax\n    char v3;  // al\n\n    v2 = v1;\n    v3 = (char)v1 % 32;\n    return (unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)&g_41e840)[4 * (unsigned long long)(unsigned int)(rax<4> & 7)]) >> ((char)v1 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_4085c0",
            "funcStartAddr": "0x4085c0",
            "funcEndAddr": "0x4085f1",
            "decompiledFuncCode": "int sub_4085c0()\n{\n    unsigned long v1;  // rdi\n\n    return (sub_40abd0() != 0? (unsigned int)sub_40abd0() - v1 + 1 : rsi<8>);\n}\n"
        },
        {
            "funcName": "sub_41afe0",
            "funcStartAddr": "0x41afe0",
            "funcEndAddr": "0x41b0af",
            "decompiledFuncCode": "int sub_41afe0()\n{\n    char *v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned int v3;  // r12d\n    unsigned long long v4;  // rax\n    unsigned int v5;  // edx\n    unsigned long long v6;  // rax\n    unsigned int *v7;  // ebp\n    unsigned long long v8;  // rax\n    unsigned int *v10;  // r12\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // rax\n\n    if (*(v1) != 0)\n    {\n        v3 = v2;\n        v4 = sub_418a20();\n        if (v4 != 0)\n        {\n            v6 = iconv_open(v5, v2);\n            v7 = (unsigned int)v6;\n            if (v6 != -1)\n            {\n                v11 = (unsigned int)sub_41ae10();\n                if (!(v11 != 0))\n                {\n                    iconv_close(v7);\n                    *(__errno_location()) = *(v10);\n                }\n                else if (iconv_close(v7) < 0)\n                {\n                    v11 = 0;\n                    free(v1);\n                    *(__errno_location()) = *(v7);\n                }\n            }\n            else\n            {\n                v11 = 0;\n            }\n        }\n    }\n    if (*(v1) == 0 || v4 == 0)\n    {\n        v11 = strdup(v1);\n        if (v11 == 0)\n        {\n            *(__errno_location()) = 12;\n            v8 = v11;\n            return v8;\n        }\n    }\n    if (v11 != 0 || *(v1) != 0 && v4 != 0)\n    {\n        v12 = v11;\n        return v12;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b170",
            "funcStartAddr": "0x40b170",
            "funcEndAddr": "0x40b206",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned long long field_40;\n    char padding_48[67];\n    char field_8b;\n    char padding_8c[4];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40b170()\n{\n    unsigned long v1;  // rsi\n    unsigned long v2;  // rbp\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned long long v7;  // rax\n    void *v8;  // rdi\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    if (v3->field_90 > 1 && v1 <= 2305843009213693951)\n    {\n        v7 = realloc(v3->field_10, v1 * 4);\n        if (v7 != 0)\n        {\n            v8 = v4->field_18;\n            v4->field_10 = v7;\n            if (v8 != 0)\n            {\n                v9 = realloc(v8, v2 * 8);\n                if (v9 != 0)\n                {\n                    v4->field_18 = v9;\n                }\n            }\n        }\n    }\n    if (v4->field_8b != 0 && (v3->field_90 <= 1 || v1 <= 2305843009213693951) && (v3->field_90 <= 1 || v7 != 0) && (v3->field_90 <= 1 || v8 == 0 || v9 != 0))\n    {\n        v10 = realloc(v4->field_8, v2);\n        if (v10 != 0)\n        {\n            v4->field_8 = v10;\n        }\n    }\n    if ((v3->field_90 <= 1 || v1 <= 2305843009213693951) && (v4->field_8b == 0 || v10 != 0) && (v3->field_90 <= 1 || v7 != 0) && (v3->field_90 <= 1 || v8 == 0 || v9 != 0))\n    {\n        v4->field_40 = v2;\n        return 0;\n    }\n    return 12;\n}\n"
        },
        {
            "funcName": "sub_4058c0",
            "funcStartAddr": "0x4058c0",
            "funcEndAddr": "0x40595e",
            "decompiledFuncCode": "extern unsigned int g_41c27f;\nextern unsigned int g_6232e8;\nextern char g_623b10;\nextern unsigned long long g_623b18;\n\nint sub_4058c0()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_418a80();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_623b10 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x41c27f, 0x5);\n            if (g_623b18 != 0)\n            {\n                sub_4081a0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_623b10 != 0)\n    {\n        v3 = sub_418a80();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_623b10 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_6232e8);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40e470",
            "funcStartAddr": "0x40e470",
            "funcEndAddr": "0x40e5ad",
            "decompiledFuncCode": "int sub_40e470()\n{\n    unsigned long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x50]\n    unsigned long long *|unsigned long v2;  // [bp-0x48]\n    unsigned long long|unsigned long long * v3;  // [bp-0x40]\n    unsigned long long v5[32];  // rdi\n    unsigned long long v6[21];  // r12\n    unsigned long long *v7;  // rsi\n    unsigned long long v8[32];  // r15\n    unsigned long long v9;  // rcx\n    unsigned long long v11;  // rbp\n    unsigned long long *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long v14;  // rcx\n    unsigned long long v15;  // r9\n    unsigned long long v16;  // rbx\n    unsigned long long v17[2];  // rax\n    unsigned long long **v18;  // rdx\n    unsigned long long v19;  // rax\n\n    v6 = v5[19];\n    if (*(v7) > 0)\n    {\n        v8 = v5;\n        v16 = 0;\n        while (true)\n        {\n            v11 = (*(v18))[v16];\n            v12 = (*(v18))[v16] * 16 + *(v6);\n            if (*((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) == 8)\n            {\n                v13 = *(v12);\n                if (v13 <= 63)\n                {\n                    *((unsigned long long [21])&v0) = v6[20];\n                    if (((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0)\n                    {\n                        v14 = v8[29];\n                        v15 = v8[31];\n                        if (v8[29] == v8[30])\n                        {\n                            v1 = v18;\n                            v2 = v14 * 2;\n                            v15 = realloc(v5[31], v14 * 16);\n                            if (v15 != 0)\n                            {\n                                v8[31] = v15;\n                                v14 = v8[29];\n                                v8[30] = v2;\n                            }\n                        }\n                        if (v15 != 0 || v8[29] != v8[30])\n                        {\n                            v2 = v15;\n                            v1 = v14;\n                            v3 = v3;\n                            v17 = calloc(0x1, 0x30);\n                            *((unsigned long long *[2])((char *)v2 + 0x8 * v1)) = v17;\n                            if (v17 != 0)\n                            {\n                                v17[0] = v9;\n                                v18 = v3;\n                                v16 += 1;\n                                v17[1] = v11;\n                                v8[29] = (char *)v1 + 1;\n                            }\n                        }\n                        if (v17 == 0 || v15 == 0 && v8[29] == v8[30])\n                        {\n                            v19 = 12;\n                        }\n                    }\n                }\n            }\n            if (((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) == 0 || v13 > 63 || *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) != 8)\n            {\n                v16 += 1;\n                if (v16 >= *(v7))\n                {\n                    break;\n                }\n            }\n        }\n        if (((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) == 0 || v13 > 63 || *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) != 8 || v13 <= 63 && *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) == 8 && ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0 && v17 != 0 && (v15 != 0 || v8[29] != v8[30]) && v16 >= *(v7))\n        {\n            v19 = 0;\n        }\n        else if (v13 <= 63 && *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) == 8 && ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0 && (v15 == 0 || v17 == 0) && (v17 == 0 || v8[29] == v8[30]))\n        {\n            return v19;\n        }\n    }\n    v19 = 0;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_415130",
            "funcStartAddr": "0x415130",
            "funcEndAddr": "0x415339",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[24];\n    unsigned long long field_68;\n    char padding_70[27];\n    char field_8b;\n    char field_8c;\n    char padding_8d[3];\n    unsigned int field_90;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    struct struct_2 *field_8;\n} struct_1;\n\ntypedef struct struct_3 {\n    unsigned int field_0;\n    char padding_4[4];\n    char field_8;\n} struct_3;\n\nint sub_415130()\n{\n    void tmp_27;  // tmp #27\n    char v0;  // [bp-0x30]\n    struct_0 *v2;  // rsi\n    struct_0 *v3;  // r10\n    char v4[9];  // rdx\n    char v5[9];  // rbp\n    struct_1 *v6;  // rdi\n    struct_3 *v7;  // rbx\n    unsigned int *v8;  // r12\n    unsigned long long v9;  // rax\n    unsigned long v10;  // rcx\n    void *v11;  // r11\n    unsigned long long v12;  // r9\n    unsigned long long v13;  // r8\n    char v14;  // r9b\n    unsigned long long v15;  // r12\n    char *v16;  // rax\n    char *v17;  // r11\n    unsigned long long v18;  // r13\n    void *v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v23;  // rdx\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v3 = v2;\n    v5 = v4;\n    v7 = v6;\n    v8 = v2->field_48;\n    if (v2->field_90 != 1)\n    {\n        v9 = sub_40c840();\n        if ((unsigned int)v9 > 1)\n        {\n            tmp_27 = v3->field_10;\n            v7->field_0 = 1;\n            *((int *)&v7->field_8) = *((int *)(tmp_27 + v8 * 4));\n            v3->field_48 = v9 + (char *)v8;\n            return 0;\n        }\n    }\n    if (v2->field_90 == 1 || (unsigned int)v9 <= 1)\n    {\n        v21 = v4[1];\n        v11 = v10 + (char *)v8;\n        v2->field_48 = v10 + (char *)v8;\n        if ((char)((unsigned int)v21 & -5) != 26 && v4[1] != 28)\n        {\n            if (v4[1] == 22 && v14 == 0)\n            {\n                sub_40ada0();\n                v24 = 11;\n            }\n            if (v0 == 21 || v4[1] != 22 || v14 != 0)\n            {\n                v25 = v4[0];\n                v7->field_0 = 0;\n                *((unsigned long long *)&v7->field_8) = v25;\n                v24 = 0;\n            }\n        }\n        if (v4[1] == 28 || (char)((unsigned int)v21 & -5) == 26)\n        {\n            if (v10 + v2->field_48 < v2->field_68)\n            {\n                v12 = v4[0];\n                v13 = 0;\n                while (true)\n                {\n                    v15 = v13;\n                    if (v21 == 30 && v2->field_8b != 0)\n                    {\n                        if (v2->field_8c == 0)\n                        {\n                            v16 = v11 + 1;\n                            v17 = v11 + v3->field_0 + v3->field_28;\n                            v3->field_48 = v16;\n                            v18 = *(v17);\n                        }\n                        else if (v11 == v2->field_30 || *((int *)(v2->field_10 + (v11 << 2))) != -1)\n                        {\n                            v18 = (char)*((char *)(*((long long *)(v3->field_18 + v11 * 8)) + v3->field_0 + v3->field_28));\n                            if ((*((char *)(*((long long *)(v3->field_18 + (v11 << 3))) + v3->field_0 + v3->field_28)) & 128) == 0)\n                            {\n                                v20 = 1;\n                                if (v3->field_90 != 1)\n                                {\n                                    v20 = sub_40c840();\n                                }\n                                v16 = v20 + v11;\n                                v3->field_48 = v16;\n                            }\n                        }\n                    }\n                    if (v2->field_8b == 0 || v21 != 30 || v2->field_8c != 0 && (*((char *)(*((long long *)(v3->field_18 + (v11 << 3))) + v3->field_0 + v3->field_28)) & 128) != 0 || *((int *)(v2->field_10 + (v11 << 2))) == -1 && v11 != v2->field_30 && v2->field_8c != 0)\n                    {\n                        v19 = v3->field_8;\n                        v16 = v11 + 1;\n                        v3->field_48 = v11 + 1;\n                        v18 = (char)*((char *)(v19 + v11));\n                    }\n                    if (v3->field_68 <= v16)\n                    {\n                        break;\n                    }\n                    if (v16[v3->field_8] == 93 && v12 == v18)\n                    {\n                        v3->field_48 = &v16[1];\n                        v6->field_8[v15].field_0 = 0;\n                        v23 = v5[1];\n                        if (v5[1] == 28)\n                        {\n                            v6->field_0 = 2;\n                            v24 = 0;\n                        }\n                        else if (v23 != 30)\n                        {\n                            v24 = 0;\n                            if (v23 != 26)\n                            {\n                                break;\n                            }\n                            v6->field_0 = 3;\n                        }\n                        else\n                        {\n                            v6->field_0 = 4;\n                            v24 = 0;\n                        }\n                    }\n                    if (v16[v3->field_8] != 93 || v12 != v18)\n                    {\n                        *((unsigned long long *)&v6->field_8) = v18;\n                        v13 = 1;\n                        if (false)\n                        {\n                            break;\n                        }\n                        v21 = v5[1];\n                        v11 = v3->field_48;\n                    }\n                }\n                if (v16[v3->field_8] == 93 && v12 == v18 && v3->field_68 > v16)\n                {\n                    return v24;\n                }\n                return 7;\n            }\n            return 7;\n        }\n        if (v10 + v2->field_48 < v2->field_68 || v4[1] != 28 && (char)((unsigned int)v21 & -5) != 26)\n        {\n            return v24;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40fff0",
            "funcStartAddr": "0x40fff0",
            "funcEndAddr": "0x41003e",
            "decompiledFuncCode": "int sub_40fff0()\n{\n    unsigned long v0;  // [bp-0x18]\n    void tmp_18;  // tmp #18\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5[3];  // rdi\n    unsigned long long v6;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (*(v5) > 0)\n    {\n        v6 = 0;\n        while (true)\n        {\n            tmp_18 = v6 * 3;\n            v6 += 1;\n            free(*((long long *)(v5[2] + tmp_18 * 16 + 40)));\n            free(*((long long *)(v5[2] + tmp_18 * 16 + 16)));\n            if (v6 >= *(v5))\n            {\n                break;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_418a20",
            "funcStartAddr": "0x418a20",
            "funcEndAddr": "0x418a74",
            "decompiledFuncCode": "int sub_418a20()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rsi\n    unsigned int|unsigned long v4;  // r8d\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v7;  // rcx\n    unsigned long long v8;  // rdx\n    unsigned int v9;  // r9d\n\n    v1 = 0;\n    if (v2 != v3)\n    {\n        v8 = 0;\n        do\n        {\n            v4 = (char)*((char *)(v2 + v8));\n            v5 = (char)*((char *)(v2 + v8));\n            if ((unsigned int)((unsigned long long)(char)*((char *)(v2 + v8)) - 65) <= 25)\n            {\n                v4 = (unsigned long long)v4 + 32;\n                v5 = (unsigned int)v5 + 32;\n            }\n            v6 = (char)*((char *)(v3 + v8));\n            v7 = (char)*((char *)(v3 + v8));\n            if ((unsigned int)((unsigned long long)(char)*((char *)(v3 + v8)) - 65) <= 25)\n            {\n                v6 = (unsigned int)v6 + 32;\n                v7 = (unsigned int)v7 + 32;\n            }\n            if (v5 == 0)\n            {\n                break;\n            }\n            v8 += 1;\n        }\n        while (v5 == v7);\n        v9 = v6;\n        v1 = v4 - v9;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40aed0",
            "funcStartAddr": "0x40aed0",
            "funcEndAddr": "0x40aee6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char field_30;\n    char padding_31[1];\n    char field_32;\n} struct_0;\n\nint sub_40aed0()\n{\n    struct_0 *v1;  // rsi\n    unsigned long v2;  // rdi\n\n    if (v1->field_30 == 17 && v2 == v1->field_28)\n    {\n        v1->field_32 = v1->field_32 | 8;\n        return 0;\n    }\n    if (v2 != v1->field_28 || v1->field_30 != 17)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4059b0",
            "funcStartAddr": "0x4059b0",
            "funcEndAddr": "0x405b39",
            "decompiledFuncCode": "int sub_4059b0()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v2;  // rdi\n    void *v3;  // rdx\n    unsigned int *v4;  // r14\n    unsigned long long|unsigned int|char v5;  // bl\n    unsigned long long|unsigned long v6;  // bpl\n    unsigned long long v7;  // rax\n    unsigned long long|unsigned long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned long long|unsigned int|unsigned long v10;  // r15\n    unsigned long long v15;  // rax\n\n    v0 = v2;\n    v5 = fileno(v3);\n    v4 = __errno_location();\n    if (!(v5 != 1))\n    {\n        v5 = 0;\n        v6 = 0;\n    }\n    else if (v5 != 2)\n    {\n        if (v5 != 0)\n        {\n            v5 = dup2(0x2, 0x2) != 2;\n        }\n    }\n    if (v5 == 2)\n    {\n        v5 = 0;\n    }\n    if (v5 == 0)\n    {\n        v5 = 0;\n        v6 = 0;\n        v8 = 0;\n    }\n    if (v5 == 2 || v5 != 0 && v5 != 1)\n    {\n        v6 = (char)(dup2(0x1, 0x1) != 1);\n    }\n    if (v5 == 1 || v5 == 2 || v5 != 0)\n    {\n        v7 = dup2(0x0, 0x0);\n        if (v7 != 0)\n        {\n            v8 = (unsigned int)sub_405960();\n            if ((char)v8 != 0)\n            {\n            }\n            else\n            {\n                v8 = 1;\n                v9 = 0;\n            }\n        }\n        else\n        {\n            v8 = 0;\n        }\n        if (v6 != 0 && (v7 == 0 || (char)v8 != 0))\n        {\n            v6 = (unsigned int)sub_405960();\n            if ((char)v6 == 0)\n            {\n                v10 = *(v4);\n                v9 = 0;\n                if (v5 != 0)\n                {\n                    close(0x2);\n                }\n            }\n        }\n        if ((v6 == 0 && v7 == 0 || v6 == 0 && (char)v8 != 0 || v7 == 0 && (char)v6 != 0 || (char)v8 != 0 && (char)v6 != 0) && v5 != 0)\n        {\n            v5 = (unsigned int)sub_405960();\n            if ((char)v5 == 0)\n            {\n                v10 = *(v4);\n                v9 = 0;\n            }\n        }\n    }\n    if (v5 == 0 || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))\n    {\n        v9 = (unsigned int)sub_409c80();\n    }\n    if ((char)v6 != 0 || (char)v5 != 0)\n    {\n        v10 = *(v4);\n    }\n    if ((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)))\n    {\n        close(0x2);\n    }\n    if ((char)v6 == 0 && v6 != 0 && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || ((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 != 0)\n    {\n        close(0x1);\n    }\n    if (((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 == 0 && v8 != 0 || ((char)v6 == 0 && v6 != 0 && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || ((char)v5 == 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0)) || v5 != 0 && (v5 == 0 || (char)v8 == 0 && v7 != 0 && (v5 == 1 || v5 == 2 || v5 != 0) || v5 == 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0) || (char)v5 != 0 && v5 != 0 && (v6 == 0 || (char)v6 != 0) && (v7 == 0 || (char)v8 != 0) && (v5 == 1 || v5 == 2 || v5 != 0))) && v6 != 0) && v8 != 0)\n    {\n        close(0x0);\n    }\n    if (...)\n    {\n        *((unsigned long *)&v4) = v10;\n    }\n    v15 = v9;\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_40d690",
            "funcStartAddr": "0x40d690",
            "funcEndAddr": "0x40d89c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[24];\n    unsigned long long field_28;\n    char padding_30[2];\n    char field_32;\n} struct_0;\n\ntypedef struct struct_1 {\n    struct struct_2 *field_0;\n    char padding_8[48];\n    char field_38;\n} struct_1;\n\ntypedef struct struct_3 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char padding_30[2];\n    char field_32;\n} struct_3;\n\nint sub_40d690()\n{\n    unsigned long v0;  // [bp-0x188]\n    void tmp_25;  // tmp #25\n    void tmp_42;  // tmp #42\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    char v3;  // [bp-0x40]\n    struct_0 *v5;  // rdx\n    struct_0 *v6;  // r12\n    struct_1 *v7;  // rsi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // r11\n    unsigned long long|struct_3 * v12;  // r15\n    unsigned long long|struct_3 * v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned int *v15;  // rdi\n\n    v6 = v5;\n    if (!((v7->field_38 & 16) != 0))\n    {\n        v3 = 8;\n        v1 = &v7->field_0->padding_0[128];\n        v13 = (unsigned long long)(unsigned int)sub_40d500();\n        v3 = 9;\n        v9 = sub_40d500();\n        v12 = v9;\n        v11 = v9;\n    }\n    else if (v5->field_8 != 0)\n    {\n        v8 = v5->field_28;\n        if (v5->field_28 <= 63)\n        {\n            v0 = v7->field_0->field_a0;\n            if (((char)((char)*(&((char *)stack_base)[((v8 & 63) >> 3) + -392]) >> (unsigned long long)(char)(v8 & 63 & 7)) & 1) != 0)\n            {\n                v3 = 8;\n                v1 = &v7->field_0->padding_0[128];\n                v13 = (unsigned int)sub_40d500();\n                v3 = 9;\n                v12 = (unsigned int)sub_40d500();\n            }\n        }\n    }\n    else\n    {\n        v3 = 8;\n        v1 = &v7->field_0->padding_0[128];\n        v13 = (unsigned long long)(unsigned int)sub_40d500();\n        v3 = 9;\n        v10 = sub_40d500();\n        v11 = v10;\n        v12 = v10;\n    }\n    if (v5->field_8 != 0 && ((v7->field_38 & 16) == 0 || v5->field_28 <= 63) && ((v7->field_38 & 16) == 0 || ((char)((char)*(&((char *)stack_base)[((v8 & 63) >> 3) + -392]) >> (unsigned long long)(char)(v8 & 63 & 7)) & 1) != 0))\n    {\n        v3 = 16;\n        v11 = (unsigned int)sub_40d500();\n    }\n    if (v5->field_8 == 0 || (v7->field_38 & 16) == 0 || v5->field_28 <= 63 && ((char)((char)*(&((char *)stack_base)[((v8 & 63) >> 3) + -392]) >> (unsigned long long)(char)(v8 & 63 & 7)) & 1) != 0)\n    {\n        v3 = 16;\n        v2 = v11;\n        v14 = (unsigned int)sub_40d500();\n        if (v14 != 0 && v2 != 0 && v13 != 0 && v12 != 0)\n        {\n            tmp_25 = v6->field_28;\n            v12->field_28 = v6->field_28;\n            v13->field_28 = tmp_25;\n            tmp_42 = v6->field_32;\n            v12->field_32 = v12->field_32 & 4294967031 | (unsigned int)(v6->field_32 & 8);\n            v13->field_32 = (unsigned int)(v13->field_32 & 4294967031) | tmp_42 & 8;\n        }\n        if (v14 == 0 || v12 == 0 || v13 == 0 || v2 == 0)\n        {\n            *(v15) = 12;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_408240",
            "funcStartAddr": "0x408240",
            "funcEndAddr": "0x4082ac",
            "decompiledFuncCode": "extern uint128_t g_623c40;\nextern uint128_t g_623c50;\nextern uint128_t g_623c60;\nextern unsigned long long g_623c70;\n\nint sub_408240()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_623c40;\n    *((uint128_t *)&v1) = g_623c50;\n    *((uint128_t *)&v2) = g_623c60;\n    v4 = g_623c70;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_407b00();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_418b40",
            "funcStartAddr": "0x418b40",
            "funcEndAddr": "0x419094",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_41daff;\nextern char g_623cb8[2];\n\nint sub_418b40()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_623cb8;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_41daff : (unsigned long long)nl_langinfo(0xe));\n    if (g_623cb8 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_41daff;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            ungetc(v26, v10);\n                            v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v28 > 1)\n                            {\n                                v29 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v29 = &v4;\n                                    v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v32 = &v5;\n                                v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v32 = &v6;\n                                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v33;\n                                tmp_56 = (unsigned int)v34 % 0x10000;\n                                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v36 + 2;\n                                    v37 = malloc(v36 + 3);\n                                    v39 = v1;\n                                    v40 = v2;\n                                }\n                                else\n                                {\n                                    v38 = v36 + v0 + 3;\n                                    v0 = v36 + v0 + 2;\n                                    v37 = realloc(NULL, v38);\n                                    v40 = v2;\n                                    v39 = v1;\n                                }\n                                if (v37 != 0)\n                                {\n                                    tmp_1 = -2 - v39;\n                                    v41 = v39 + 1;\n                                    v42 = v0 - v40;\n                                    v43 = tmp_1 + v0 - v40 + v37;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v43) = *((long long *)&v3);\n                                        *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                        v44 = v43 + 8 & -8;\n                                        v43 -= v43 + 8 & -8;\n                                        v45 = &(&v3)[-1 * v43];\n                                        v46 = (unsigned int)(v41 + v43) & -8;\n                                        if (v46 >= 8)\n                                        {\n                                            v43 = 0;\n                                            do\n                                            {\n                                                v48 = v43;\n                                                v43 = (unsigned int)v43 + 8;\n                                                *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                            }\n                                            while ((unsigned int)v43 < (v46 & -8));\n                                        }\n                                    }\n                                    else if ((v41 & 4) != 0)\n                                    {\n                                        *((int *)v43) = *((int *)&v3);\n                                        *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v43) = v3;\n                                        if ((v41 & 2) != 0)\n                                        {\n                                            *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                        }\n                                    }\n                                    v62 = v40 + 1;\n                                    v49 = v37 + v42 - 1;\n                                    if ((unsigned int)v43 >= 8)\n                                    {\n                                        *((long long *)v49) = *((long long *)&v5);\n                                        v43 = v62;\n                                        *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                        v52 = v49 - (v49 + 8 & -8);\n                                        v54 = (unsigned int)(v43 + v52) & -8;\n                                        if (v54 >= 8)\n                                        {\n                                            v57 = 0;\n                                            do\n                                            {\n                                                v58 = v57;\n                                                v57 = (unsigned int)v57 + 8;\n                                                *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                            }\n                                            while ((unsigned int)v57 < (v54 & -8));\n                                        }\n                                    }\n                                    else if (((char)v43 & 4) != 0)\n                                    {\n                                        *((int *)v49) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v43 != 0)\n                                    {\n                                        *((char *)v49) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v37;\n                                    v59 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_41daff;\n                                    v10 = (tmp_10 == 0? &g_41daff : tmp_10);\n                                    free(NULL);\n                                    sub_409bc0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && (unsigned int)v26 != 32 && v28 > 1 && (unsigned int)v26 != 35 && v37 != 0)\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if ((unsigned int)v26 == 35)\n                        {\n                            do\n                            {\n                                v61 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v61[1];\n                                    v61 = (unsigned int)*(v61);\n                                    v62 = 1;\n                                }\n                                else\n                                {\n                                    v61 = __uflow(v10);\n                                    v62 = (char)((unsigned int)v61 != -1);\n                                }\n                            }\n                            while (v61 != 10 && v62 != 0);\n                        }\n                        if (v61 == -1 && (unsigned int)v26 == 35 || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v28 <= 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            v10 = (tmp_10 == 0? &g_41daff : tmp_10);\n                            sub_409bc0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        v9 = &g_41daff;\n                    }\n                    else if (...)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_41daff;\n            free(v17);\n        }\n        *((char *[2])&g_623cb8[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_41daff : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_409c40",
            "funcStartAddr": "0x409c40",
            "funcEndAddr": "0x409c7b",
            "decompiledFuncCode": "int sub_409c40()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_409d20();\n    }\n}\n"
        },
        {
            "funcName": "sub_408503",
            "funcStartAddr": "0x408503",
            "funcEndAddr": "0x408595",
            "decompiledFuncCode": "int sub_408503()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5;  // r13\n    unsigned long long v6;  // r12\n    unsigned long long v7;  // rbx\n    char *v8;  // rdi\n    char *v9;  // rdx\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // r13\n    unsigned long long v14;  // rbp\n    unsigned int *v15;  // r12\n    unsigned int|unsigned long v16;  // r13\n    void *v17;  // rax\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // r12\n    unsigned long long v20;  // r13\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n\n    v3 = v5;\n    v2 = v6;\n    v1 = stack_base + 0;\n    v0 = v7;\n    fopen(v8, v9);\n    if (v7 != 0)\n    {\n        v14 = (unsigned int)sub_408370();\n        v15 = __errno_location();\n        v16 = *(v15);\n        v17 = sub_409bc0();\n        if (v17 == 0)\n        {\n            v18 = v0;\n            v19 = v2;\n            v20 = v3;\n            return stack_base + 0;\n        }\n        if (v17 != 0)\n        {\n            v16 = *(v15);\n            free(v17);\n        }\n        *((unsigned long *)&v15) = v16;\n        v21 = v0;\n        v22 = v2;\n        v23 = v3;\n        return 0;\n    }\n    v11 = v0;\n    v12 = v2;\n    v13 = v3;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4188c0",
            "funcStartAddr": "0x4188c0",
            "funcEndAddr": "0x418910",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n} struct_0;\n\nint sub_4188c0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r8\n    unsigned long v7;  // r14\n    unsigned long v8;  // r13\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    char *v12;  // rsi\n\n    if (((unsigned int)v6 & -8) == 0)\n    {\n        v4 = v7;\n        v3 = v8;\n        v2 = v9;\n        v1 = stack_base + 0;\n        v0 = v10;\n        if ((v6 & 4) == 0)\n        {\n            strlen(v12);\n        }\n    }\n    else\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_411010",
            "funcStartAddr": "0x411010",
            "funcEndAddr": "0x411271",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[120];\n    unsigned int field_90;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n    char padding_21[7];\n    unsigned long long field_28;\n    char padding_30[16];\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_1;\n\nint sub_411010()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rdx\n    unsigned long v3;  // rdi\n    unsigned long long v4[12];  // rcx\n    unsigned long long v5;  // rax\n    char *v6;  // r8\n    unsigned long long v7;  // rdx\n    struct_0 *v8;  // rcx\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rbp\n    char v12;  // r11b\n    unsigned long long v13;  // rdi\n    struct struct_1 **v15;  // r10\n    struct_1 *v16;  // r13\n    unsigned long long v17;  // rsi\n    unsigned long long v18;  // rdx\n    unsigned long long v20;  // rdi\n    unsigned int *v21;  // r8\n    unsigned long long v22;  // rax\n    char *v23;  // rdx\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rbx\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v2 = v1 * 16;\n    if (!(*((char *)(v3 + v2 + 8)) != 7))\n    {\n        v5 = v4[1];\n        v7 = v6[v4[1]];\n        if (v6[v4[1]] > 193)\n        {\n            v9 = v4[11];\n            if (&v6[1] < v9)\n            {\n                v10 = v6[1 + v5];\n                if (v7 > 223)\n                {\n                    if (v7 <= 239)\n                    {\n                        if (v10 > 159 || v7 != 224)\n                        {\n                            v20 = 3;\n                        }\n                    }\n                    else\n                    {\n                        if (v7 <= 247 && (v7 != 240 || v10 > 143))\n                        {\n                            v20 = 4;\n                        }\n                    }\n                }\n                else\n                {\n                    v13 = (unsigned int)v10 - 128;\n                }\n            }\n        }\n    }\n    else if (v8->field_90 != 1)\n    {\n        v11 = (unsigned int)sub_40c840();\n        if (v12 != 5 && v12 == 6 && (unsigned int)v11 > 1)\n        {\n            v16 = *(v15);\n            v17 = *(v15)->field_40;\n            v18 = *(v15)->field_28;\n            if ((*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0))\n            {\n                v22 = 0;\n                do\n                {\n                    v22 += 1;\n                }\n                while (*(v15)->field_28 != v22 && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)(*(v15)->field_0 + (v22 << 2))));\n            }\n        }\n    }\n    if (*((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 <= 251 && v7 > 247 && v6[v4[1]] > 193 && v7 != 248 && v7 > 223 && v7 > 239 || *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 == 248 && v7 <= 251 && v7 > 247 && v6[v4[1]] > 193 && v10 > 135 && v7 > 223 && v7 > 239)\n    {\n        v20 = 5;\n    }\n    if (v7 <= 253 && *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 > 247 && v6[v4[1]] > 193 && v7 > 251 && v7 > 223 && v7 > 239 && v7 != 252 || v7 <= 253 && *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 == 252 && v10 > 131 && v7 > 247 && v6[v4[1]] > 193 && v7 > 251 && v7 > 223 && v7 > 239)\n    {\n        v20 = 6;\n    }\n    if (*((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 <= 239 && v6[v4[1]] > 193 && v7 > 223 && (v10 > 159 || v7 != 224) || *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 <= 251 && v7 > 247 && v6[v4[1]] > 193 && v7 != 248 && v7 > 223 && v7 > 239 || v7 <= 247 && *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v6[v4[1]] > 193 && v7 > 223 && v7 > 239 && (v7 != 240 || v10 > 143) || *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 == 248 && v7 <= 251 && v7 > 247 && v6[v4[1]] > 193 && v10 > 135 && v7 > 223 && v7 > 239 || v7 <= 253 && *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 > 247 && v6[v4[1]] > 193 && v7 > 251 && v7 > 223 && v7 > 239 && v7 != 252 || v7 <= 253 && *((char *)(v3 + v2 + 8)) == 7 && &v6[1] < v9 && v7 == 252 && v10 > 131 && v7 > 247 && v6[v4[1]] > 193 && v7 > 251 && v7 > 223 && v7 > 239)\n    {\n        if (v9 >= &v6[v20])\n        {\n            v23 = &v6[1 + v5];\n            v24 = &v6[v5 + v20];\n            while (true)\n            {\n                if (((unsigned long long)*(v23) - 128 & 255) <= 63)\n                {\n                    v23 = &v23[1];\n                    if (v24 == v23)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        if (((unsigned long long)*(v23) - 128 & 255) <= 63)\n        {\n            return stack_base + 0;\n        }\n    }\n    if ((v12 == 6 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (unsigned int)v11 > 1 && v8->field_90 != 1 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0) || v12 == 6 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (unsigned int)v11 > 1 && v8->field_90 != 1 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v25 = 0;\n        while (true)\n        {\n            v26 = iswctype(*((int *)(v8->field_10 + v21 * 4)), *((long long *)(*(v15)->field_18 + v25 * 8)));\n            if (v26 != 0)\n            {\n                break;\n            }\n            v25 += 1;\n            v17 = *(v15)->field_40;\n        }\n    }\n    if (((v12 == 6 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (unsigned int)v11 > 1 && v8->field_90 != 1 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0) || v12 == 6 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (unsigned int)v11 > 1 && v8->field_90 != 1 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) || (v12 == 6 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (unsigned int)v11 > 1 && v8->field_90 != 1 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0) || v12 == 6 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (unsigned int)v11 > 1 && v8->field_90 != 1 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v27 = 0;\n        while (*((int *)(v8->field_10 + (v21 << 2))) < *((int *)(*(v15)->field_8 + (v27 << 2))) || *((int *)(v8->field_10 + (v21 << 2))) > *((int *)(*(v15)->field_10 + (v27 << 2))))\n        {\n            v27 += 1;\n            if (v27 == v17)\n            {\n                break;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40d5e0",
            "funcStartAddr": "0x40d5e0",
            "funcEndAddr": "0x40d678",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[42];\n    char field_32;\n} struct_0;\n\nint sub_40d5e0()\n{\n    struct_0 *|char v0;  // [bp-0x30]\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    struct_0 *v7;  // rbp\n    unsigned long long v8;  // rdx\n    struct struct_0 **v9;  // r14\n    struct_0 *v10;  // rax\n\n    v3 = v2;\n    v7 = *((long long *)v2);\n    v9 = &v0;\n    while (true)\n    {\n        v10 = sub_40d500();\n        v0 = v10;\n        if (v10 == 0)\n        {\n            break;\n        }\n        v10->field_0 = v7;\n        v7 = v0;\n        v0->field_32 = v0->field_32 | 4;\n        v4 = *((long long *)(v3 + 8));\n        if (*((long long *)(v3 + 8)) != 0)\n        {\n            v9 = &v7->padding_8;\n            v3 = v4;\n        }\n        else\n        {\n            v8 = 0;\n            while (true)\n            {\n                v5 = *((long long *)(v3 + 16));\n                if (*((long long *)(v3 + 16)) != 0 && v3 != v8)\n                {\n                    v9 = &v7->padding_8[8];\n                    v3 = v5;\n                }\n                if (*((long long *)(v3 + 16)) == 0 || v3 == v8)\n                {\n                    v6 = *((long long *)v3);\n                    v7 = v7->field_0;\n                    v8 = v3;\n                    if (*((long long *)v3) != 0)\n                    {\n                        v3 = v6;\n                    }\n                    else\n                    {\n                        v10 = v0;\n                    }\n                }\n            }\n            if (*((long long *)(v3 + 16)) != 0 && v3 != v8)\n            {\n                v10 = sub_40d500();\n            }\n            else if (*((long long *)v3) == 0 && (*((long long *)(v3 + 16)) == 0 || v3 == v8))\n            {\n                return v10;\n            }\n        }\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_415598",
            "funcStartAddr": "0x415598",
            "funcEndAddr": "0x4155a6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_415598()\n{\n    struct_0 *v1;  // rbx\n\n    v1->field_8 = 11;\n}\n"
        },
        {
            "funcName": "sub_40bf60",
            "funcStartAddr": "0x40bf60",
            "funcEndAddr": "0x40c11f",
            "decompiledFuncCode": "typedef struct struct_2 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[124];\n    unsigned int field_b4;\n} struct_2;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    char field_a;\n} struct_3;\n\nint sub_40bf60()\n{\n    void *v0;  // [bp-0x48]\n    void tmp_77;  // tmp #77\n    void tmp_94;  // tmp #94\n    unsigned long long|void * v1;  // [bp-0x40]\n    struct_2 *v3;  // rdi\n    struct_2 *v4;  // rbx\n    unsigned long v5;  // rbp\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // rdx\n    unsigned long long v8;  // rax\n    unsigned long v9;  // r13\n    unsigned long v10;  // rbp\n    unsigned long long *v11;  // r12\n    uint128_t *v12;  // r13\n    void *v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long *v15;  // rdi\n    unsigned long long v16;  // rcx\n    struct_3 *v17;  // rax\n    unsigned long v18;  // rsi\n    char v19;  // cl\n    unsigned int v20;  // ecx\n    unsigned long long v21;  // rax\n\n    v4 = v3;\n    v15 = v3->field_10;\n    v5 = v4->field_8;\n    if (v15 < v4->field_8)\n    {\n        v11 = v4->field_18;\n        v12 = v4->field_28;\n    }\n    else\n    {\n        v6 = v5 * 2;\n        if (v5 << 1 <= 768614336404564650)\n        {\n            v1 = v7;\n            v8 = realloc(v4->field_0, v5 * 32);\n            if (v8 != 0)\n            {\n                v4->field_0 = v8;\n                v9 = v5 * 16;\n                v10 = (v5 + v6) * 16;\n                v11 = realloc(v4->field_18, v9);\n                v0 = realloc(v4->field_20, v9);\n                v12 = realloc(v4->field_28, v10);\n                v13 = realloc(v4->field_30, v10);\n                if (v11 != 0 && v0 != 0 && v12 != 0)\n                {\n                    v14 = v1;\n                    if (v1 != 0)\n                    {\n                        v4->field_18 = v11;\n                        v15 = v4->field_10;\n                        v4->field_20 = v0;\n                        v4->field_28 = v12;\n                        v4->field_30 = v1;\n                        v4->field_8 = v6;\n                    }\n                }\n                if (v11 == 0 || v0 == 0 || v12 == 0 || v1 == 0)\n                {\n                    v1 = v13;\n                    v0 = v0;\n                    free(v11);\n                    free(v0);\n                    free(v12);\n                    free(v1);\n                }\n            }\n        }\n        if (v11 == 0 || v0 == 0 || v12 == 0 || v8 == 0 || v1 == 0 || v5 << 1 > 768614336404564650)\n        {\n            v21 = -1;\n        }\n    }\n    if (v15 < v4->field_8 || v5 << 1 <= 768614336404564650 && v11 != 0 && v0 != 0 && v12 != 0 && v8 != 0 && v1 != 0)\n    {\n        v16 = (unsigned int)v14 & -261889;\n        v17 = v15 * 16 + v4->field_0;\n        *((unsigned long long *)(v15 * 16 + v4->field_0 + 8)) = v14;\n        v17->field_0 = v18;\n        v17->field_8 = (unsigned int)v14 & -261889;\n        v19 = v14 == 6;\n        if (v14 == 5)\n        {\n            v19 = 1 < v4->field_b4;\n        }\n        v20 = (unsigned int)v19 * 16;\n        *(&((char *)&v17->field_8)[2]) = (char)(*(&((char *)&v17->field_8)[2]) & 4294967023) | v20;\n        *((long long *)((char *)v11 + 0x8 * v15)) = -1;\n        tmp_77 = (char *)v12 + 24 * v4->field_10;\n        *((int128_t *)&((char *)v12)[24 * v4->field_10]) = 0;\n        *((long long *)(tmp_77 + 16)) = 0;\n        tmp_94 = v4->field_30 + v4->field_10 * 24;\n        *((int128_t *)(v4->field_30 + v4->field_10 * 24)) = 0;\n        *((long long *)(tmp_94 + 16)) = 0;\n        v21 = v4->field_10;\n        v4->field_10 = v4->field_10 + 1;\n    }\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_40b280",
            "funcStartAddr": "0x40b280",
            "funcEndAddr": "0x40b394",
            "decompiledFuncCode": "int sub_40b280()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbp\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // rbx\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // rax\n    unsigned long v7;  // rsi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // rcx\n    unsigned long long v11[2];  // rdx\n    unsigned long long v12;  // rcx\n\n    v2 = v1;\n    v4 = v3;\n    if (*(v3) != 0)\n    {\n        v7 = v3[1];\n        v8 = v3[2];\n        if (v3[1] == 0)\n        {\n            *((unsigned long long *)v3[2]) = v2;\n            v6 = 1;\n            v3[1] = v3[1] + 1;\n        }\n        else\n        {\n            if (*(v3) == v3[1])\n            {\n                v5 = v3[1] * 16;\n                *(v3) = v3[1] * 2;\n                v8 = realloc(v8, v5);\n                if (v8 != 0)\n                {\n                    v4[2] = v8;\n                    v7 = v4[1];\n                }\n                else\n                {\n                    v6 = 0;\n                }\n            }\n            if (v8 != 0 || *(v3) != v3[1])\n            {\n                v9 = v7 * 8;\n                if (!(*((long long *)v8) > v2))\n                {\n                    v10 = *((long long *)(v8 + v9 - 8));\n                    if (v2 < *((long long *)(v8 + v9 - 8)))\n                    {\n                        do\n                        {\n                            *((unsigned long long *)(v8 + v9)) = v10;\n                            v9 -= 8;\n                            v10 = *((long long *)(v8 + v9 - 8));\n                        }\n                        while (*((long long *)(v8 + v9 - 8)) > v2);\n                    }\n                }\n                else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    v11 = v9 + v8;\n                    do\n                    {\n                        v12 = v11[-1];\n                        v11 = &v11[-1];\n                        v11[1] = v12;\n                    }\n                    while (v11 != v8);\n                    v9 = 0;\n                }\n                *((unsigned long long *)(v8 + v9)) = v2;\n                v6 = 1;\n                v4[1] = v4[1] + 1;\n            }\n        }\n    }\n    else\n    {\n        v3[0] = 1;\n        v3[1] = 1;\n        v6 = malloc(0x8);\n        v3[2] = v6;\n        if (v6 != 0)\n        {\n            *((unsigned long long *)v6) = v1;\n            return 1;\n        }\n        v4[1] = 0;\n        v4[0] = 0;\n    }\n    if (v6 == 0 || *(v3) != 0)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d500",
            "funcStartAddr": "0x40d500",
            "funcEndAddr": "0x40d5d6",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    uint128_t field_30;\n    unsigned long long field_40;\n} struct_1;\n\nint sub_40d500()\n{\n    unsigned int *v0;  // [bp-0x28]\n    void tmp_10;  // tmp #10\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v3;  // rdi\n    unsigned long long *v4;  // rbx\n    unsigned int *v5;  // rsi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r9\n    unsigned long long v8;  // rdi\n    unsigned long long *v9;  // rdx\n    unsigned int v10;  // eax\n    unsigned long long *v11;  // r10\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rsi\n    struct_1 *v14;  // rdi\n    unsigned long long *v15;  // rcx\n    uint128_t *v16;  // r8\n\n    v4 = v3;\n    v8 = (int)*(v5);\n    if (*(v5) != 15)\n    {\n        v11 = *(v4);\n        v10 = v8 + 1;\n        v7 = v8 * 64 + 8;\n    }\n    else\n    {\n        v1 = v6;\n        v0 = v5;\n        v11 = malloc(0x3c8);\n        if (v11 != 0)\n        {\n            tmp_10 = *(v4);\n            v7 = 8;\n            *(v4) = v11;\n            v8 = 0;\n            v9 = v1;\n            *(v11) = tmp_10;\n            v10 = 1;\n        }\n        else\n        {\n            v12 = 0;\n        }\n    }\n    if (*(v5) != 15 || v11 != 0)\n    {\n        *(v0) = v10;\n        v12 = (char *)v11 + v7;\n        v13 = v8 * 64;\n        v14 = &v11[8 * v8];\n        v14->field_8 = 0;\n        v14->field_10 = v9;\n        v14->field_18 = v15;\n        v14->field_30 = *(v16);\n        *(&((char *)v11)[58 + v13]) = *(&((char *)v11)[58 + v13]) & 243;\n        v14->field_20 = 0;\n        v14->field_28 = 0;\n        v14->field_40 = -1;\n        if (v9 != 0)\n        {\n            *(v9) = v12;\n        }\n        if (v15 != 0)\n        {\n            *(v15) = v12;\n        }\n    }\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_410b30",
            "funcStartAddr": "0x410b30",
            "funcEndAddr": "0x410ff7",
            "decompiledFuncCode": "int sub_410b30() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_41893d",
            "funcStartAddr": "0x41893d",
            "funcEndAddr": "0x41896e",
            "decompiledFuncCode": "int sub_41893d()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp+0x0]\n    unsigned long long v5;  // [bp+0x10]\n    unsigned long long v6;  // [bp+0x18]\n    unsigned long long v7;  // [bp+0x20]\n    unsigned long v8;  // rbx\n    unsigned long v9;  // r13\n    unsigned long v10;  // r14\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // r13\n    unsigned long long v15;  // r14\n\n    v2 = v8;\n    v1 = v9;\n    v0 = v10;\n    v11 = v3;\n    v12 = v5;\n    v13 = v6;\n    v15 = v7;\n    return (unsigned long long)(char)(sub_4131a0() != 0);\n}\n"
        },
        {
            "funcName": "sub_415558",
            "funcStartAddr": "0x415558",
            "funcEndAddr": "0x41556a",
            "decompiledFuncCode": "int sub_415558()\n{\n}\n"
        },
        {
            "funcName": "sub_40ada0",
            "funcStartAddr": "0x40ada0",
            "funcEndAddr": "0x40ae92",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[24];\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[32];\n    unsigned int field_90;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    char field_8;\n} struct_2;\n\nint sub_40ada0()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rax\n    struct_2 *v3;  // rdi\n    unsigned long long v4;  // r8\n    unsigned int v5;  // cc_dep1\n    char v6[9];  // rdi\n    unsigned int v7;  // edx\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned int v10;  // edx\n\n    v2 = v1->field_48;\n    if (v1->field_68 > v1->field_48)\n    {\n        v4 = v1->field_8;\n        v5 = v1->field_90;\n        v6[0] = *((char *)(v1->field_8 + v1->field_48));\n        if (v5 <= 1 || v1->field_48 == v1->field_30 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1)\n        {\n            if (*((char *)(v1->field_8 + v1->field_48)) != 92)\n            {\n            }\n            else\n            {\n                if (((char)v7 & 1) != 0 && v1->field_48 + 1 < v1->field_58)\n                {\n                    v1->field_48 = v1->field_48 + 1;\n                    v8 = (char)*((char *)(v4 + v2 + 1));\n                    v6[1] = 1;\n                    *((unsigned long long *)&v6[0]) = v8;\n                    return 1;\n                }\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 91)\n            {\n                if (v1->field_48 + 1 < v1->field_58)\n                {\n                    v9 = (char)*((char *)(v1->field_8 + v1->field_48 + 1));\n                    v6[0] = *((char *)(v1->field_8 + v1->field_48 + 1));\n                    if (v9 != 58)\n                    {\n                        if (*((char *)(v1->field_8 + v1->field_48 + 1)) != 61)\n                        {\n                        }\n                        else\n                        {\n                            v6[1] = 28;\n                            return 2;\n                        }\n                        if (*((char *)(v1->field_8 + v1->field_48 + 1)) == 46)\n                        {\n                            v6[1] = 26;\n                            return 2;\n                        }\n                    }\n                    else if (((char)v10 & 4) != 0)\n                    {\n                        v6[1] = 30;\n                        return 2;\n                    }\n                }\n                if (v1->field_48 + 1 >= v1->field_58 || ((char)v10 & 4) == 0 && v9 == 58 || *((char *)(v1->field_8 + v1->field_48 + 1)) != 61 && *((char *)(v1->field_8 + v1->field_48 + 1)) != 46 && v9 != 58)\n                {\n                    v6[1] = 1;\n                    v6[0] = 91;\n                    return 1;\n                }\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 93)\n            {\n                v6[1] = 21;\n                return 1;\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 94)\n            {\n                v6[1] = 25;\n                return 1;\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 45)\n            {\n                v6[1] = 22;\n                return 1;\n            }\n        }\n        if (*((int *)(v1->field_10 + (v1->field_48 << 2))) == -1 && v5 > 1 && v1->field_48 != v1->field_30 || ((char)v7 & 1) == 0 && *((char *)(v1->field_8 + v1->field_48)) == 92 && (v5 <= 1 || v1->field_48 == v1->field_30 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1) || *((char *)(v1->field_8 + v1->field_48)) == 92 && ((char)v7 & 1) != 0 && v1->field_48 + 1 >= v1->field_58 && (v5 <= 1 || v1->field_48 == v1->field_30 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1) || *((char *)(v1->field_8 + v1->field_48)) != 93 && *((char *)(v1->field_8 + v1->field_48)) != 45 && *((char *)(v1->field_8 + v1->field_48)) != 94 && *((char *)(v1->field_8 + v1->field_48)) != 92 && *((char *)(v1->field_8 + v1->field_48)) != 91 && (v5 <= 1 || v1->field_48 == v1->field_30 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1))\n        {\n            v6[1] = 1;\n            return 1;\n        }\n    }\n    else\n    {\n        v3->field_8 = 2;\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_410040",
            "funcStartAddr": "0x410040",
            "funcEndAddr": "0x4100cb",
            "decompiledFuncCode": "typedef struct struct_3 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_3;\n\ndouble sub_410040()\n{\n    void tmp_16;  // tmp #16\n    void tmp_0;  // tmp #0\n    unsigned long long *v1;  // rdi\n    unsigned long long v2;  // cc_dep1\n    unsigned long long *v3;  // rax\n    unsigned long long *v4;  // rsi\n    unsigned long long *v5;  // r12\n    unsigned long v6;  // rcx\n    unsigned long long *v8;  // rbx\n    struct_3 *v9;  // r9\n    struct_3 *v10;  // rbp\n    unsigned long long *v11;  // rdx\n    unsigned long v12;  // rdx\n    void *v13;  // r8\n    uint128_t v15;  // xmm0\n\n    v2 = *(v1);\n    v3 = *(v1) - 1;\n    *(v1) = *(v1) - 1;\n    if (!((char)(v2 - 1 >> 63)))\n    {\n        v5 = v4;\n        v8 = v3 * 48;\n        v10 = v9;\n        tmp_16 = *(v4) + v3 * 48;\n        *(v11) = *((long long *)(*(v4) + v3 * 48));\n        v12 = v6 * 16;\n        memcpy(v13, *((long long *)(tmp_16 + 16)), v12);\n        free(v9->field_10);\n        free(*((long long *)(*(v4) + (*(v1) - 1) * 48 + 16)));\n        tmp_0 = (char *)v8 + *(v5);\n        v15 = *((int128_t *)&((char *)v8)[24 + *(v5)]);\n        v10->field_0 = *((int128_t *)&((char *)v8)[24 + *(v5)]);\n        v10->field_10 = *((long long *)(tmp_0 + 40));\n        return v15;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4058b0",
            "funcStartAddr": "0x4058b0",
            "funcEndAddr": "0x4058b8",
            "decompiledFuncCode": "extern char g_623b10;\n\nint sub_4058b0()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_623b10 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407fd0",
            "funcStartAddr": "0x407fd0",
            "funcEndAddr": "0x407fda",
            "decompiledFuncCode": "int sub_407fd0()\n{\n}\n"
        },
        {
            "funcName": "sub_415578",
            "funcStartAddr": "0x415578",
            "funcEndAddr": "0x41558a",
            "decompiledFuncCode": "int sub_415578()\n{\n}\n"
        },
        {
            "funcName": "sub_408330",
            "funcStartAddr": "0x408330",
            "funcEndAddr": "0x408341",
            "decompiledFuncCode": "int sub_408330()\n{\n}\n"
        },
        {
            "funcName": "sub_404f00",
            "funcStartAddr": "0x404f00",
            "funcEndAddr": "0x404f64",
            "decompiledFuncCode": "int sub_404f00()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long v5;  // rdx\n    unsigned long long v7;  // rbx\n    unsigned long long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned long long v10;  // rax\n    unsigned long v11;  // r11\n    unsigned long long v12;  // r13\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // r12\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // r13\n\n    if (!((char)(v7 - 1 >> 63)))\n    {\n        v3 = v8;\n        v12 = 0;\n        v2 = v9;\n        v1 = stack_base + 0;\n        v0 = v7;\n        v7 = v5 - 1;\n        while (true)\n        {\n            v10 = sub_404690();\n            if ((unsigned int)v10 < 0)\n            {\n                v13 = v11 - 1;\n            }\n            else if (!((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v12 = v11 + 1;\n            }\n            else\n            {\n                v17 = v0;\n                v18 = v2;\n                v19 = v3;\n                return 1;\n            }\n            if (((unsigned int)v10 < 0 || !((char)[D] amd64g_calculate_condition(0x4<64>, 0x13<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && ((unsigned int)v10 < 0 || v11 + 1 > v13) && (v12 > v11 - 1 || (unsigned int)v10 >= 0))\n            {\n                v14 = v0;\n                v15 = v2;\n                v16 = v3;\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4108f0",
            "funcStartAddr": "0x4108f0",
            "funcEndAddr": "0x410b12",
            "decompiledFuncCode": "int sub_4108f0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40f0a0",
            "funcStartAddr": "0x40f0a0",
            "funcEndAddr": "0x40f2b4",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_4;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_3 *field_10;\n} struct_5;\n\nint sub_40f0a0()\n{\n    unsigned int|unsigned long v0;  // [bp-0x70]\n    struct_4 *v1;  // [bp-0x68]\n    unsigned long v2;  // [bp-0x60]\n    uint128_t v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x48]\n    unsigned long long v6;  // rdx\n    unsigned long long v8[8];  // rdi\n    unsigned long v9;  // rsi\n    struct_5 *v10;  // rbp\n    unsigned long v11;  // rcx\n    unsigned long long v12[8];  // r12\n    unsigned long long v13;  // rax\n    struct_4 *v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v22;  // r10\n    unsigned long long v23;  // rbx\n    unsigned long long v26;  // rdx\n    unsigned long v27;  // r11\n\n    v3 = 0;\n    v10 = v8[7] + v9 * 24;\n    v2 = v11;\n    v4 = 0;\n    v22 = *((long long *)(v8[7] + v9 * 24 + 8));\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n    {\n        v12 = v8;\n        v23 = 0;\n        while (true)\n        {\n            v13 = v10->field_10[v23];\n            if (v9 != v10->field_10[v23] && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0)\n            {\n                v14 = *((long long *)(v12[5] + v13 * 24 + 16));\n                *((unsigned long long [8])&v1) = v12[5] + v13 * 24;\n                v0 = *((long long *)*((long long *)(v12[5] + v13 * 24 + 16)));\n                v15 = sub_40c890();\n                if (v1->field_8 > 1)\n                {\n                    if (v15 == 0)\n                    {\n                        v17 = sub_40c890();\n                    }\n                    if (v17 == 0 || v15 != 0)\n                    {\n                        v18 = v14->field_8;\n                        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                        {\n                            v19 = sub_40c890();\n                            if (v19 == 0)\n                            {\n                                v20 = sub_40c890();\n                            }\n                        }\n                    }\n                }\n                else if (v15 == 0)\n                {\n                    v16 = sub_40c890();\n                }\n            }\n            if (v19 == 0 && v1->field_8 > 1 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) && v9 != v10->field_10[v23] && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && (v17 == 0 || v15 != 0) && v20 != 0 || v15 == 0 && v1->field_8 > 1 && v9 != v10->field_10[v23] && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && v17 != 0 || v1->field_8 <= 1 && v15 == 0 && v9 != v10->field_10[v23] && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && v16 != 0)\n            {\n                if ((int)v0 == 0)\n                {\n                    v22 = v10->field_8;\n                }\n                else\n                {\n                    v0 = sub_40d340();\n                    free(v4);\n                    return v0;\n                }\n            }\n            if (...)\n            {\n                v23 += 1;\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    do\n                    {\n                        if (sub_40c890() == 0)\n                        {\n                            v26 = (unsigned long long)(unsigned int)sub_40c890() - 1;\n                            if (v26 < v27 && !((char)(v26 - 1 >> 63)))\n                            {\n                                *((unsigned long *)(v6 + 8)) = v27 - 1;\n                                sub_40ca00();\n                            }\n                        }\n                    }\n                    while (v10->field_8 > r9<8> + 1);\n                }\n            }\n        }\n    }\n    free(NULL);\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_409020",
            "funcStartAddr": "0x409020",
            "funcEndAddr": "0x4090d8",
            "decompiledFuncCode": "int sub_409020()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_408bc0();\n    }\n}\n"
        },
        {
            "funcName": "sub_40be60",
            "funcStartAddr": "0x40be60",
            "funcEndAddr": "0x40bee1",
            "decompiledFuncCode": "int sub_40be60()\n{\n    unsigned long long v1[25];  // rdi\n    unsigned long long v2;  // r12\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n\n    v2 = v1[24];\n    if (v1[8] <= v3 && v1[8] < v1[11])\n    {\n        v4 = sub_40bd10();\n    }\n    if ((v1[8] >= v1[11] || v1[8] > v3) && v1[6] <= v3 && v1[6] < v1[11])\n    {\n        v4 = sub_40bd10();\n    }\n    if ((unsigned int)v4 == 0 && v1[8] >= v1[11] || (unsigned int)v4 == 0 && v1[8] > v3 || v1[8] < v1[11] && v1[8] <= v3 && (unsigned int)v4 == 0 || v1[6] > v3 && v1[8] >= v1[11] || v1[6] > v3 && v1[8] > v3 || v1[8] >= v1[11] && v1[6] >= v1[11] || v1[8] > v3 && v1[6] >= v1[11])\n    {\n        if (v1[24] < v3)\n        {\n            memset(v1[23] + v2 * 8 + 8, 0x0, (v3 - v2) * 8);\n            v1[24] = v3;\n        }\n        v4 = 0;\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_409440",
            "funcStartAddr": "0x409440",
            "funcEndAddr": "0x409462",
            "decompiledFuncCode": "int sub_409440()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_4093b0(); /* do not return */\n        }\n    }\n    if (v2 != 0 || *(v3) != 12)\n    {\n        v2 = (unsigned int)sub_41afe0();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_405120",
            "funcStartAddr": "0x405120",
            "funcEndAddr": "0x405505",
            "decompiledFuncCode": "extern unsigned int g_41b490;\nextern unsigned int g_41b4b8;\nextern unsigned int g_41b518;\nextern unsigned int g_41b568;\nextern unsigned int g_41b5a0;\nextern unsigned int g_41b5f0;\nextern unsigned int g_41b680;\nextern unsigned int g_41b700;\nextern unsigned int g_41b860;\nextern unsigned int g_41ba08;\nextern unsigned int g_41bad8;\nextern unsigned int g_41bb08;\nextern unsigned int g_41bb68;\nextern unsigned int g_41bbb0;\nextern unsigned int g_41bbd0;\nextern unsigned int g_41bdab;\nextern unsigned long long g_623b20;\nextern unsigned long long stderr;\nextern unsigned long long stdout;\n\nint sub_405120()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v32[2];  // rax\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // cc_dep2\n    unsigned long v38;  // d\n    char *v42;  // rax\n    char *v43;  // rax\n    unsigned long long v44;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41b490, 0x5), g_623b20);\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41b4b8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b518, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b568, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b5a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b5f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b680, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b700, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41b860, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41ba08, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bad8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41bb08, 0x5), stdout);\n        v0 = \"[\";\n        v32 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v32 = &v2;\n            v33 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v34 = \"ptx\";\n            v35 = 4;\n            if ((v36 > v37) - 0 - (v36 < v37) == 0)\n            {\n                break;\n            }\n            while (v35 != 0)\n            {\n                v35 -= 1;\n                v36 = *(v34);\n                v37 = *(v33);\n                v33 = &v33[v38];\n                v34 = &v34[v38];\n                break;\n            }\n        }\n        if (v32[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41bdab, 0x5));\n            v43 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41bdab, 0x5));\n            v42 = setlocale(0x5, 0x0);\n            if (v42 != 0)\n            {\n                v44 = strncmp(v42, \"en\", 0x3);\n            }\n            if (v44 == 0 || v42 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41bbb0, 0x5));\n            }\n        }\n        if ((v32[1] == 0 || strncmp(v43, \"en\", 0x3) != 0) && (v32[1] == 0 || v43 != 0) && (v44 != 0 || v32[1] != 0) && (v42 != 0 || v32[1] != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41bb68, 0x5));\n        }\n        if (v32[1] != 0 || v44 != 0 && v42 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41bbb0, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41bbd0, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_418870",
            "funcStartAddr": "0x418870",
            "funcEndAddr": "0x4188b4",
            "decompiledFuncCode": "int sub_418870()\n{\n    char v0;  // [bp-0x8]\n    unsigned long long v2[6];  // rdi\n    unsigned long long v3[6];  // rbx\n    void *v6;  // rdi\n\n    v3 = v2;\n    if (*(v2) != 0)\n    {\n        sub_40fe70();\n    }\n    v3[0] = 0;\n    v6 = v3[4];\n    v3[1] = 0;\n    free(v6);\n    v3[4] = 0;\n    v3[5] = 0;\n    return (unsigned long long)free(*((long long *)(*((long long *)&v0) + 40)));\n}\n"
        },
        {
            "funcName": "sub_40aab0",
            "funcStartAddr": "0x40aab0",
            "funcEndAddr": "0x40aac8",
            "decompiledFuncCode": "int sub_40aab0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40aa50();\n}\n"
        },
        {
            "funcName": "sub_412e70",
            "funcStartAddr": "0x412e70",
            "funcEndAddr": "0x41316f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[152];\n    struct struct_1 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[152];\n    unsigned long long field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_3;\n\nint sub_412e70()\n{\n    unsigned long v0;  // [bp-0xa8]\n    unsigned long long|unsigned int v1;  // [bp-0x90]\n    unsigned long long *v2;  // [bp-0x88]\n    unsigned int v3;  // [bp-0x7c]\n    unsigned long v4;  // [bp-0x78]\n    unsigned long long v5;  // [bp-0x70]\n    unsigned long v6;  // [bp-0x68]\n    unsigned long v7;  // [bp-0x60]\n    unsigned long long v8;  // [bp-0x58]\n    unsigned long long v9;  // [bp-0x50]\n    unsigned long long *v10;  // [bp-0x48]\n    struct_0 *v12;  // rdi\n    struct_3 *v13;  // r13\n    unsigned long long v14[6];  // rsi\n    unsigned long long v15[7];  // r14\n    unsigned long long v17;  // rax\n    unsigned long long *v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned int|unsigned long v25;  // rax\n    unsigned long v26;  // rbx\n\n    v13 = v12;\n    v26 = v14[3];\n    v8 = 1;\n    v9 = 1;\n    v10 = malloc(0x8);\n    if (v10 != 0)\n    {\n        *((unsigned long long [6])v10) = v14[2];\n        v25 = sub_414900();\n        if ((unsigned int)v25 == 0)\n        {\n            v3 = 0;\n            v7 = &v14[6];\n            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                while (true)\n                {\n                    v2 = v26 * 8;\n                    if (*((long long *)(*(v14) + (v26 << 3))) != 0)\n                    {\n                        v3 = 0;\n                    }\n                    else\n                    {\n                        v3 += 1;\n                    }\n                    if (v12->field_e0 < v3 && *((long long *)(*(v14) + (v26 << 3))) == 0 || v12->field_e0 < 0 && *((long long *)(*(v14) + (v26 << 3))) != 0)\n                    {\n                        memset(*(v14), 0x0, v2);\n                        free(v10);\n                        return 0;\n                    }\n                    if (*((long long *)(*(v14) + (v26 << 3))) == 0 && v12->field_e0 >= v3 || v12->field_e0 >= 0 && *((long long *)(*(v14) + (v26 << 3))) != 0)\n                    {\n                        v26 -= 1;\n                        v9 = 0;\n                        v15 = *((long long *)&((char *)v2)[v13->field_b8 + -8]);\n                        if (*((long long *)&((char *)v2)[v13->field_b8 + -8]) != 0 && v15[5] > 0)\n                        {\n                            v1 = 0;\n                            while (true)\n                            {\n                                if ((*((char *)(*(v12->field_98) + (*((long long *)(v15[6] + (v1 << 3))) << 4) + 10)) & 16) != 0)\n                                {\n                                    v5 = *((long long *)(v15[6] + v1 * 8)) * 16;\n                                    v6 = v13->field_98;\n                                    *((unsigned long long [6])&v4) = v14[3];\n                                    v17 = sub_411010();\n                                    if ((unsigned int)v17 > 0)\n                                    {\n                                        v18 = v17 + v14[3] - 1;\n                                        if (v4 >= v18)\n                                        {\n                                            v19 = *((long long *)(*(v14) + v18 * 8));\n                                            if (v19 != 0)\n                                            {\n                                                v4 = v5;\n                                                v20 = sub_40c890();\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((*((char *)(*(v12->field_98) + (*((long long *)(v15[6] + (v1 << 3))) << 4) + 10)) & 16) == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) && (unsigned int)v17 <= 0 || v20 == 0 && (unsigned int)v17 > 0 && v4 >= v18 || v19 == 0 && (unsigned int)v17 > 0 && v4 >= v18)\n                                {\n                                    v21 = sub_40e6b0();\n                                }\n                                if (...)\n                                {\n                                    v22 = sub_40c890();\n                                }\n                                if (...)\n                                {\n                                    *((unsigned long long [6])&v0) = v14[3] - 1;\n                                    v23 = sub_40cb20();\n                                }\n                                if (...)\n                                {\n                                    v24 = sub_40b280();\n                                    if (v24 == 0)\n                                    {\n                                        v25 = 12;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v1 += 1;\n                                    if (v1 >= v15[5])\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (v22 == 0 || *((long long *)&((char *)v2)[*(v14)]) == 0 || v21 == 0 || v24 != 0 || v14[5] != 0 && v23 != 0)\n                            {\n                                v25 = sub_414900();\n                                if ((unsigned int)v25 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else if (v24 == 0 && (v14[5] == 0 || v23 == 0))\n                            {\n                                *((unsigned long *)&v1) = v25;\n                                free(v10);\n                                return v1;\n                            }\n                        }\n                        v25 = sub_414900();\n                        if (v14[3] - 1 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if ((unsigned int)v25 == 0 && (*((long long *)&((char *)v2)[v13->field_b8 + -8]) == 0 || v15[5] <= 0) && (*((long long *)(*(v14) + (v26 << 3))) == 0 || v12->field_e0 >= 0) && (v12->field_e0 >= 0 || v12->field_e0 >= v3))\n                {\n                    v25 = 0;\n                }\n                else if (v12->field_e0 >= 0 || *((long long *)(*(v14) + (v26 << 3))) == 0 && v12->field_e0 >= v3)\n                {\n                    *((unsigned long *)&v1) = v25;\n                    free(v10);\n                    return v1;\n                }\n            }\n            v25 = 0;\n        }\n        *((unsigned long *)&v1) = v25;\n        free(v10);\n        return v1;\n    }\n    return 12;\n}\n"
        },
        {
            "funcName": "sub_4187f0",
            "funcStartAddr": "0x4187f0",
            "funcEndAddr": "0x41886e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4318592];\n    unsigned long long field_41e580;\n} struct_0;\n\nextern int512_t g_41e580;\n\nint sub_4187f0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rdx\n    void *v3;  // rbp\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // r12\n    void *v6;  // r13\n    unsigned long v7;  // rbx\n\n    if ((unsigned int)v1 > 16)\n    {\n        abort(); /* do not return */\n    }\n    v3 = v2;\n    v5 = v4;\n    v6 = (unsigned long long)dcgettext(0x0, (unsigned int)(char *)(4318752 + *((long long *)(0x8 * v1 + (char *)&g_41e580))), 0x5);\n    v7 = strlen(v6) + 1;\n    if (v4 != 0)\n    {\n        v2 = v7;\n        if (v7 > v4)\n        {\n            v2 = v5 - 1;\n            *(&((char *)v3)[v5 + -1]) = 0;\n        }\n        memcpy(v3, v6, v2);\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_418070",
            "funcStartAddr": "0x418070",
            "funcEndAddr": "0x41807f",
            "decompiledFuncCode": "extern unsigned long long g_6244d0;\n\nint sub_418070()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdi\n\n    v1 = g_6244d0;\n    g_6244d0 = v2;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409160",
            "funcStartAddr": "0x409160",
            "funcEndAddr": "0x40917a",
            "decompiledFuncCode": "int sub_409160()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4093b0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4045db",
            "funcStartAddr": "0x4045db",
            "funcEndAddr": "0x4045fa",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4045db()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40c500",
            "funcStartAddr": "0x40c500",
            "funcEndAddr": "0x40c5b8",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[200];\n    unsigned long long field_c8;\n    char padding_d0[24];\n    unsigned long long field_e8;\n    char padding_f0[8];\n    struct struct_5 **field_f8;\n} struct_4;\n\ntypedef struct struct_1 {\n    char padding_0[16];\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    struct struct_2 *field_28;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_3;\n\nint sub_40c500()\n{\n    unsigned long long v1[32];  // rdi\n    struct_4 *v2;  // r14\n    struct_1 *v3;  // r12\n    unsigned long long v4;  // rbx\n    struct_0 *v5;  // rbp\n    unsigned long long v8;  // r13\n\n    v2 = v1;\n    if (v1[29] > 0)\n    {\n        v8 = 0;\n        while (true)\n        {\n            v3 = v2->field_f8[v8];\n            if (v2->field_f8[v8]->field_20 > 0)\n            {\n                v4 = 0;\n                while (true)\n                {\n                    v5 = v3->field_28[v4];\n                    v4 += 1;\n                    free(v5->field_20);\n                    free(v5);\n                    if (v3->field_20 <= v4)\n                    {\n                        break;\n                    }\n                }\n            }\n            free(v3->field_28);\n            if (v3->field_10 != 0)\n            {\n                free(*((long long *)(v3->field_10 + 16)));\n                free(v3->field_10);\n            }\n            v8 += 1;\n            if (v2->field_e8 <= v8)\n            {\n                break;\n            }\n        }\n    }\n    v2->field_e8 = 0;\n    v2->field_c8 = 0;\n    return (unsigned long long)free(v3);\n}\n"
        },
        {
            "funcName": "sub_40cd70",
            "funcStartAddr": "0x40cd70",
            "funcEndAddr": "0x40cdbd",
            "decompiledFuncCode": "int sub_40cd70()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rdx\n    unsigned long long v5;  // rdi\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n\n    v2 = v1;\n    v12 = v5;\n    while (true)\n    {\n        v6 = v12;\n        v7 = v3;\n        v8 = r12<8>();\n        if ((unsigned int)v8 != 0)\n        {\n            break;\n        }\n        v10 = *((long long *)(v12 + 8));\n        v9 = 0;\n        if (*((long long *)(v12 + 8)) == 0)\n        {\n            while (true)\n            {\n                v10 = *((long long *)(v12 + 16));\n                if (v10 != 0 && *((long long *)(v12 + 16)) != v9)\n                {\n                    break;\n                }\n                v11 = *((long long *)v12);\n                v9 = v12;\n                if (*((long long *)v12) == 0)\n                {\n                    break;\n                }\n                v12 = v11;\n            }\n            if (*((long long *)(v12 + 16)) != v9)\n            {\n                v12 = v10;\n            }\n            else if (v10 == 0 || *((long long *)(v12 + 16)) == v9)\n            {\n                return v8;\n            }\n        }\n        v12 = v10;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_407f00",
            "funcStartAddr": "0x407f00",
            "funcEndAddr": "0x407f0a",
            "decompiledFuncCode": "int sub_407f00()\n{\n}\n"
        },
        {
            "funcName": "sub_409330",
            "funcStartAddr": "0x409330",
            "funcEndAddr": "0x40935e",
            "decompiledFuncCode": "int sub_409330()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4093b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x408fc0",
            "decompiledFuncCode": "int sub_408fa0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4192f0",
            "funcStartAddr": "0x4192f0",
            "funcEndAddr": "0x41930d",
            "decompiledFuncCode": "int sub_4192f0()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40c130",
            "funcStartAddr": "0x40c130",
            "funcEndAddr": "0x40c1cf",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_a;\n} struct_1;\n\nint sub_40c130()\n{\n    void tmp_125;  // tmp #125\n    void tmp_167;  // tmp #167\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    unsigned long long v4;  // rdi\n    unsigned long long v5[5];  // rbx\n    unsigned long long *v6;  // rax\n    unsigned long long *v7;  // rdx\n    unsigned long long *v8;  // rdi\n    unsigned long long v9;  // r8\n    unsigned short v10;  // di\n    struct_1 *v11;  // rsi\n\n    v2 = v1 * 16;\n    v5 = v4;\n    v6 = sub_40bf60();\n    if (v6 != -1)\n    {\n        v8 = v7;\n        v9 = *(v7);\n        v10 = (unsigned short)v7 & 1023;\n        v11 = v6 * 16 + *(v5);\n        tmp_125 = *((int *)(v6 * 16 + *(v5) + 8)) & -261889 | (unsigned int)((unsigned long long)((unsigned int)rdi<8> & 1023) * 0x100);\n        *((unsigned int *)(v6 * 16 + *(v5) + 8)) = *((int *)(v6 * 16 + *(v5) + 8)) & -261889 | (unsigned int)((unsigned long long)((unsigned int)rdi<8> & 1023) * 0x100);\n        tmp_167 = ((unsigned int)((unsigned long long)(unsigned int)*((int *)(v9 + v2 + 8)) >> 8) | rdi<8>) & 1023;\n        v11->field_8 = (unsigned int)((unsigned long long)(((unsigned int)((unsigned long long)(unsigned int)*((int *)(v9 + v2 + 8)) >> 8) | rdi<8>) & 1023) * 0x100) | (unsigned int)tmp_125 & -261889;\n        *(&((char *)&v11->field_8)[2]) = (unsigned int)((unsigned long long)((unsigned int)(tmp_167 * 0x100) | (unsigned int)tmp_125 & -261889) >> 16) | 4;\n        *((unsigned long long *)(v5[4] + v6 * 8)) = v1;\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_40de40",
            "funcStartAddr": "0x40de40",
            "funcEndAddr": "0x40e017",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_a;\n} struct_2;\n\nint sub_40de40()\n{\n    void tmp_90;  // tmp #90\n    unsigned long long v1[3];  // rdx\n    unsigned long long v2;  // rbp\n    unsigned int *v3;  // rdi\n    unsigned long long *v4;  // rax\n    unsigned long long v5[3];  // r14\n    unsigned long long v6[18];  // rsi\n    struct_1 *v8;  // rax\n    unsigned long long v9;  // r10\n    unsigned long long v10;  // r11\n    unsigned long long v11;  // r9\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long *v17;  // rsi\n    unsigned long long v18;  // r8\n    unsigned long long v19;  // r9\n    struct_2 *v20;  // rax\n    unsigned int v21;  // edi\n    unsigned long long v22;  // rdx\n    unsigned long long v23;  // r10\n    char v24;  // dl\n    char v25;  // r10b\n    unsigned int v26;  // edx\n    unsigned int v28;  // ecx\n    char v29;  // al\n    char v30;  // cl\n    unsigned long long v33;  // rax\n    unsigned int *v35;  // rdi\n    unsigned long long v36;  // rax\n\n    v2 = v1[1];\n    if (v1[1] != 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v4 = v1[2];\n            do\n            {\n                v2 += *(v4);\n                v4 = &v4[1];\n            }\n            while (v1[2] + (v1[1] << 3) != v4);\n        }\n        v5 = v1;\n        v8 = v6[8] + (v6[17] & v2) * 24;\n        v9 = *((long long *)(v6[8] + (v6[17] & v2) * 24));\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v10 = v8->field_10;\n            v11 = 0;\n            do\n            {\n                v12 = *((long long *)(v10 + v11 * 8));\n                if (*((long long *)*((long long *)(v10 + (v11 << 3)))) == v2)\n                {\n                    v13 = sub_40ace0();\n                    if (v13 != 0)\n                    {\n                        break;\n                    }\n                }\n                v11 += 1;\n            }\n            while (v9 != v11);\n            if (v13 == 0 || *((long long *)*((long long *)(v10 + (v11 << 3)))) != v2)\n            {\n                v12 = calloc(0x70, 0x1);\n            }\n            else if (*((long long *)*((long long *)(v10 + (v11 << 3)))) == v2)\n            {\n                v36 = v12;\n                return v36;\n            }\n        }\n        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || v12 != 0)\n        {\n            v12 = calloc(0x70, 0x1);\n            if (v12 != 0)\n            {\n                v14 = v12 + 8;\n                v15 = sub_40d930();\n                if (v15 == 0)\n                {\n                    v16 = v1[1];\n                    *((unsigned long long *)(v12 + 80)) = v14;\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                    {\n                        v17 = v5[2];\n                        v18 = *(v6);\n                        v19 = v5[2] + v1[1] * 8;\n                        while (true)\n                        {\n                            v20 = *(v17) * 16 + v18;\n                            v21 = (char)*((char *)(*(v17) * 16 + v18 + 8));\n                            if (*((char *)((*(v17) << 4) + v18 + 8)) != 1)\n                            {\n                                v22 = (char)*(&((char *)&v20->field_8)[2]);\n                                v23 = (char)*((char *)(v12 + 104));\n                                v24 = (unsigned long long)(char)*(&((char *)&v20->field_8)[2]) >> 4;\n                                v25 = (unsigned long long)(char)*((char *)(v12 + 104)) >> 5;\n                                tmp_90 = (rdx<8> | (unsigned int)r10<8>) & 1;\n                                v26 = (unsigned int)((unsigned long long)((rdx<8> | (unsigned int)r10<8>) & 1) * 32) | (char)(*((char *)(v12 + 104)) & 4294967007);\n                                *((char *)(v12 + 104)) = (unsigned int)(tmp_90 * 32) | (char)(*((char *)(v12 + 104)) & 4294967007);\n                                if (v21 == 2)\n                                {\n                                    *((unsigned long long *)(v12 + 104)) = v26 | 16;\n                                }\n                                if (v21 == 4)\n                                {\n                                    *((unsigned long long *)(v12 + 104)) = v26 | 64;\n                                }\n                            }\n                            else if ((v20->field_8 & 0x3ff00) != 0)\n                            {\n                                v28 = (char)*((char *)(v12 + 104));\n                                v29 = (unsigned long long)(char)*(&((char *)&v20->field_8)[2]) >> 4;\n                                v30 = (unsigned long long)(char)*((char *)(v12 + 104)) >> 5;\n                                *((char *)(v12 + 104)) = (unsigned int)((unsigned long long)(((unsigned int)rax<8> | rcx<4>) & 1) * 32) | (char)(*((char *)(v12 + 104)) & 4294967007);\n                            }\n                            if ((v20->field_8 & 0x3ff00) == 0 && *((char *)((*(v17) << 4) + v18 + 8)) == 1 || v21 == 2 && *((char *)((*(v17) << 4) + v18 + 8)) != 1 || v21 == 4 && *((char *)((*(v17) << 4) + v18 + 8)) != 1 || (v20->field_8 & 0x3ff00) == 0 && *((char *)((*(v17) << 4) + v18 + 8)) != 1 && v21 != 12)\n                            {\n                                v17 = &v17[1];\n                                if (v19 == v17)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v17 = &v17[1];\n                                *((char *)(v12 + 104)) = *((char *)(v12 + 104)) | 128;\n                                if (v19 == v17)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    v33 = sub_40b3b0();\n                    if (v33 != 0)\n                    {\n                        sub_40c460();\n                    }\n                }\n                else\n                {\n                    free(v12);\n                }\n            }\n            if (v12 == 0 || v33 != 0 || v15 != 0)\n            {\n                *(v35) = 12;\n                v12 = 0;\n            }\n        }\n    }\n    else\n    {\n        *(v3) = 0;\n        v12 = 0;\n    }\n    v36 = v12;\n    return v36;\n}\n"
        },
        {
            "funcName": "sub_418000",
            "funcStartAddr": "0x418000",
            "funcEndAddr": "0x418066",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n} struct_0;\n\nextern unsigned long long g_6244d0;\n\nint sub_418000()\n{\n    struct_0 *v1;  // rdx\n\n    v1->field_38 = v1->field_38 & 4294967023 | (unsigned int)((unsigned long long)((unsigned int)(g_6244d0 >> 25) & 1) * 16) | -128;\n    if (sub_417250() == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40ace0",
            "funcStartAddr": "0x40ace0",
            "funcEndAddr": "0x40ad1c",
            "decompiledFuncCode": "int sub_40ace0()\n{\n    unsigned long long v1[3];  // rdi\n    unsigned long long v2[3];  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long v4;  // rax\n\n    if (v2 != 0 && v1 != 0)\n    {\n        v3 = v1[1];\n        if (v1[1] == v2[1])\n        {\n            while (true)\n            {\n                v3 -= 1;\n                if (!((char)(v3 - 1 >> 63)))\n                {\n                    if (*((long long *)(v1[2] + (v3 << 3))) != *((long long *)(v2[2] + (v3 << 3))))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    return 1;\n                }\n            }\n        }\n        return v4;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ca00",
            "funcStartAddr": "0x40ca00",
            "funcEndAddr": "0x40ca23",
            "decompiledFuncCode": "int sub_40ca00()\n{\n    unsigned long long *v1;  // rdx\n    unsigned long long *v2;  // rdi\n    unsigned long long *v3;  // rsi\n\n    if (v1 < *(v2))\n    {\n        do\n        {\n            *((long long *)(*(v3) + v1 * 8)) = *((long long *)(*(v3) + v1 * 8 + 8));\n            v1 = (char *)v1 + 1;\n        }\n        while (v1 < *(v2));\n    }\n    return *(v3);\n}\n"
        },
        {
            "funcName": "sub_407fe0",
            "funcStartAddr": "0x407fe0",
            "funcEndAddr": "0x407ff6",
            "decompiledFuncCode": "int sub_407fe0()\n{\n}\n"
        },
        {
            "funcName": "sub_40e8b0",
            "funcStartAddr": "0x40e8b0",
            "funcEndAddr": "0x40f040",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    unsigned long long field_50;\n    unsigned long long field_58;\n    unsigned long long field_60;\n    unsigned long long field_68;\n    unsigned int field_70;\n    char padding_74[4];\n    unsigned long long field_78;\n    unsigned long long field_80;\n    char field_88;\n    char field_89;\n    char padding_8a[1];\n    char field_8b;\n    char field_8c;\n    char field_8d;\n    char field_8e;\n    char padding_8f[1];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40e8b0()\n{\n    void tmp_32;  // tmp #32\n    void tmp_43;  // tmp #43\n    void tmp_14;  // tmp #14\n    void tmp_18;  // tmp #18\n    void tmp_21;  // tmp #21\n    void tmp_19;  // tmp #19\n    void tmp_15;  // tmp #15\n    unsigned int v0;  // [bp-0x74]\n    void tmp_1;  // tmp #1\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x60]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned long long v5;  // [bp-0x40]\n    unsigned int|unsigned long v7;  // rdx\n    unsigned int|unsigned long v8;  // r10\n    struct_0 *v9;  // rdi\n    struct_0 *v10;  // rbx\n    char v11;  // cc_dep1\n    unsigned long long v12;  // rbp\n    char *v13;  // r14\n    unsigned long long v14;  // r13\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // rdi\n    unsigned long v17;  // r14\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // cc_dep1\n    unsigned int v21;  // cc_dep1\n    char *v22;  // rcx\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r12\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // rdx\n    unsigned long v28;  // rcx\n    unsigned long long v29;  // rdx\n    char *v31;  // rax\n    unsigned int v32;  // edx\n    char v33;  // dl\n    unsigned long long v35;  // rax\n    unsigned long long v37;  // rdx\n    unsigned int *v38;  // rdx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rsi\n    unsigned long long v43;  // rdx\n    unsigned long long|unsigned int v44;  // rsi\n    unsigned long long v45;  // rdx\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long|unsigned int|char * v48;  // r12\n    unsigned long long v49;  // r11\n    unsigned long long v50;  // rax\n    char *v51;  // r13\n    unsigned int *v52;  // rax\n    unsigned long long v53;  // rcx\n    unsigned long long v54;  // r13\n    unsigned long long v55;  // r12\n    unsigned long long v56;  // rax\n    unsigned long long|unsigned int|unsigned long v57;  // rdx\n    unsigned long long v59;  // r13\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // rax\n    unsigned int v62;  // eax\n    char v63;  // al\n    unsigned int *v64;  // rax\n    unsigned long long v65;  // rdx\n    unsigned long long v68;  // rax\n    char *v69;  // rcx\n    char *v71;  // rdx\n    char *v72;  // rax\n    char *v73;  // r15\n\n    v8 = v7;\n    v73 = v44;\n    v10 = v9;\n    v12 = v44 - v9->field_28;\n    if (v9->field_28 > v44)\n    {\n        if (v9->field_90 > 1)\n        {\n            v9->field_20 = 0;\n        }\n        tmp_32 = v10->field_50;\n        v10->field_30 = 0;\n        v12 = v44;\n        v10->field_28 = 0;\n        v10->field_58 = tmp_32;\n        tmp_43 = v10->field_60;\n        v10->field_38 = 0;\n        v10->field_68 = tmp_43;\n        v10->field_8c = 0;\n        v11 = v10->field_8b;\n        v10->field_70 = (0 - (unsigned int)(char)(((unsigned int)v7 & 1) < 1) & 2) + 4;\n        if (v11 == 0)\n        {\n            v10->field_8 = v10->field_0;\n        }\n    }\n    if (v12 == 0 || v44 == 0)\n    {\n        v44 = v10->field_90;\n        v46 = v10->field_58;\n        v47 = v10->field_68;\n    }\n    if (v12 != 0 || v44 != 0)\n    {\n        v50 = v10->field_38;\n        v13 = v10->field_30;\n    }\n    if (v10->field_38 > v12)\n    {\n        if ((v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0))\n        {\n            if (v9->field_8c == 0)\n            {\n                v17 = v9->field_30 - v12;\n                v10->field_70 = sub_40e5c0();\n                if (v21 > 1)\n                {\n                    memmove(v10->field_10, v10->field_10 + v12 * 4, v17 * 4);\n                    v17 = v10->field_30 - v12;\n                }\n                v45 = v10->field_8b;\n                if (v10->field_8b != 0)\n                {\n                    memmove(v10->field_8, v10->field_8 + v12, v17);\n                    v45 = v10->field_8b;\n                    v17 = v10->field_30 - v12;\n                }\n                v10->field_38 = v10->field_38 - v12;\n                v10->field_30 = v17;\n            }\n            else\n            {\n                v14 = v10->field_18;\n                v15 = v9->field_30;\n                v16 = 0;\n                while (true)\n                {\n                    v18 = (v16 + v15 >> 63) + v16 + v15 >> 1;\n                    v19 = *((long long *)(v14 + ((v16 + v15 >> 63) + v16 + v15 >> 1) * 8));\n                    v20 = *((long long *)(v14 + ((v16 + v15 >> 63) + v16 + v15 >> 1) * 8));\n                    if (*((long long *)(v14 + ((v16 + v15 >> 63) + v16 + v15 >> 1 << 3))) > v12)\n                    {\n                        v15 = v18;\n                    }\n                    else if (v20 < v12)\n                    {\n                        v16 = v15 + 1;\n                    }\n                    else\n                    {\n                        v24 = v15;\n                    }\n                    if (v20 < v12 || *((long long *)(v14 + ((v16 + v15 >> 63) + v16 + v15 >> 1 << 3))) > v12)\n                    {\n                        v24 = v15 + 1;\n                        if (v19 < v12)\n                        {\n                            break;\n                        }\n                        v24 = v15;\n                    }\n                }\n                v10->field_70 = sub_40e5c0();\n                if (v12 == v24 && v12 < v13 && *((long long *)(v14 + (v24 << 3))) == v12)\n                {\n                    memmove(v10->field_10, v10->field_10 + v12 * 4, &v13[-1 * v12] * 4);\n                    memmove(v10->field_8, v10->field_8 + v12, v10->field_30 - v12);\n                    tmp_14 = v10->field_30;\n                    v10->field_38 = v10->field_38 - v12;\n                    v10->field_30 = tmp_14 - v12;\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        v40 = 0;\n                        v41 = v10->field_18 + v12 * 8;\n                        do\n                        {\n                            *((unsigned long long *)(v10->field_18 + v40 * 8)) = *((long long *)(v41 + v40 * 8)) - v12;\n                            v40 += 1;\n                        }\n                        while (v10->field_30 > v40);\n                    }\n                    v44 = v10->field_90;\n                    v45 = v10->field_8b;\n                    v46 = v10->field_58 - v12;\n                    v47 = v10->field_68 - v12;\n                }\n                if (*((long long *)(v14 + (v24 << 3))) != v12 || v12 >= v13 || v12 != v24)\n                {\n                    tmp_18 = v10->field_50;\n                    tmp_21 = v10->field_60;\n                    v10->field_8c = 0;\n                    v46 = tmp_18 + -0x1 * v73;\n                    v47 = tmp_21 + -0x1 * v73;\n                    v10->field_58 = &((char *)(tmp_18 + -0x1 * v73))[v12];\n                    v10->field_68 = &((char *)(tmp_21 + -0x1 * v73))[v12];\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        while (*((long long *)(v14 + (v24 << 3) - 8)) == v12)\n                        {\n                            v24 -= 1;\n                            if (v24 == 1)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v24 < v13)\n                    {\n                        v38 = v10->field_10;\n                        while (v38[v24] == -1)\n                        {\n                            v24 += 1;\n                            if (v24 == v13)\n                            {\n                                break;\n                            }\n                        }\n                        if (v38[v24] == -1)\n                        {\n                            v10->field_30 = 0;\n                            v43 = 0;\n                        }\n                        else\n                        {\n                            v43 = *((long long *)(v14 + v24 * 8)) - v12;\n                            v10->field_30 = *((long long *)(v14 + v24 * 8)) - v12;\n                        }\n                    }\n                    if (v24 == v13 || v24 < v13)\n                    {\n                        v10->field_30 = 0;\n                        v43 = 0;\n                    }\n                    if (v24 < v13 || v24 != v13)\n                    {\n                        v43 = *((long long *)(v14 + v24 * 8)) - v12;\n                        v10->field_30 = *((long long *)(v14 + v24 * 8)) - v12;\n                        if (v43 != 0)\n                        {\n                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                            {\n                                v52 = v10->field_10;\n                                v53 = v10->field_10 + v43 * 4;\n                                do\n                                {\n                                    *(v52) = -1;\n                                    v52 = &v52[1];\n                                }\n                                while (v53 != v52);\n                            }\n                            memset(v10->field_8, 0xff, v43);\n                            v43 = v10->field_30;\n                            v46 = v10->field_58 - v12;\n                            v47 = v10->field_68 - v12;\n                        }\n                    }\n                    v10->field_38 = v43;\n                    v44 = v10->field_90;\n                    v45 = v10->field_8b;\n                }\n            }\n        }\n    }\n    else\n    {\n        if ((v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0))\n        {\n            if (v9->field_8c != 0)\n            {\n                tmp_19 = v10->field_50;\n                v10->field_8c = 0;\n                v10->field_58 = tmp_19 + v12 + -0x1 * v73;\n                v10->field_68 = v10->field_60 + v12 + -0x1 * v73;\n            }\n            v44 = (int)v10->field_90;\n            v49 = v10->field_28;\n            v10->field_30 = 0;\n            if ((unsigned int)v44 <= 1)\n            {\n                v22 = (unsigned long long)(char)*((char *)(v9->field_28 + v10->field_0 + v12 - 1));\n                v23 = v10->field_78;\n                v10->field_38 = 0;\n                if (v23 != 0)\n                {\n                    v22 = (unsigned long long)v22[v9->field_78];\n                }\n                v7 = 1;\n                if (((char)(*((long long *)(v10->field_80 + ((unsigned long long)v22 >> 6 << 3))) >> (v22 & 63)) & 1) == 0)\n                {\n                    v7 = 0;\n                    if (v22 == 10)\n                    {\n                        v32 = 0;\n                        v33 = v10->field_8d != 0;\n                        v7 = (unsigned long long)(unsigned int)rdx<4> * 2;\n                    }\n                }\n                tmp_15 = v10->field_58;\n                tmp_18 = v10->field_68;\n                *((unsigned long *)&v10->field_70) = v7;\n                v46 = tmp_15 - v12;\n                v47 = tmp_18 - v12;\n                if (v10->field_8b != 0)\n                {\n                    v10->field_28 = v73;\n                    v10->field_58 = v46;\n                    v10->field_68 = v47;\n                }\n            }\n            else\n            {\n                if (v10->field_89 != 0)\n                {\n                    v26 = v10->field_0 + v49;\n                    v27 = v12 - v44 + v10->field_0 + v49;\n                    v48 = v10->field_0 + v49 + v12 - 1;\n                    v28 = (v10->field_0 < v12 - v44 + v10->field_0 + v49? v27 : v10->field_0);\n                    if ((v10->field_0 < v12 - v44 + v10->field_0 + v49? v27 : v10->field_0) <= v10->field_0 + v49 + v12 - 1)\n                    {\n                        while (true)\n                        {\n                            if ((*(v48) & 192) == 128)\n                            {\n                                v48 = &v48[-1];\n                                if (v28 > v48)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v29 = v10->field_58 + v9->field_0 + v9->field_28 + -0x1 * v48;\n                                if (v10->field_78 != 0)\n                                {\n                                    v31 = (long long)(int)((unsigned int)(v29 <= 6? v29 : 6) - 1);\n                                    if ((unsigned int)((v29 <= 6? v29 : 6) - 1) >= 0)\n                                    {\n                                        do\n                                        {\n                                            *((char *)(stack_base + -120 + v31 + 50)) = *((char *)(v9->field_78 + (char)*((char *)(v48 + v31))));\n                                            v31 = &v31[-1];\n                                        }\n                                        while ((unsigned int)v31 >= 0);\n                                    }\n                                }\n                                v0 = v8;\n                                v5 = 0;\n                                v35 = sub_40ab50();\n                                v8 = v0;\n                                v37 = v26 + v12 + -0x1 * v48;\n                                if (v35 <= -3 && (char *)(v26 + v12 + -0x1 * v48) <= v35)\n                                {\n                                    v57 = v4;\n                                    v10->field_20 = 0;\n                                    v48 = v35 - v37;\n                                    v10->field_30 = v48;\n                                    if (v4 != -1)\n                                    {\n                                        break;\n                                    }\n                                }\n                                v49 = v10->field_28;\n                                v50 = v10->field_38;\n                            }\n                        }\n                        if ((*(v48) & 192) == 128 || v4 == -1 || v35 > -3 || (char *)(v26 + v12 + -0x1 * v48) > v35)\n                        {\n                            v51 = v49 + v50;\n                        }\n                    }\n                }\n                if (v10->field_89 == 0 || (v10->field_0 < v12 - v44 + v10->field_0 + v49? v27 : v10->field_0) > v10->field_0 + v49 + v12 - 1 || v73 > v49 + v50)\n                {\n                    v51 = v49 + v50;\n                }\n                if (v73 <= v49 + v50 && (v10->field_89 == 0 || (v10->field_0 < v12 - v44 + v10->field_0 + v49? v27 : v10->field_0) > v10->field_0 + v49 + v12 - 1))\n                {\n                    v54 = v51 - v73;\n                    v10->field_30 = v48;\n                    v48 = v54;\n                }\n                if (v73 > v49 + v50)\n                {\n                    v1 = &v10->field_20;\n                    v2 = stack_base + -64;\n                    do\n                    {\n                        *((unsigned long *)&v0) = v8;\n                        v55 = v10->field_50 + -0x1 * v51;\n                        v3 = v10->field_20;\n                        v56 = sub_40ab50();\n                        v57 = (unsigned int)v5;\n                        v8 = v0;\n                        if (v56 - 1 > -4)\n                        {\n                            if (v55 != 0 && v56 != 0)\n                            {\n                                v57 = v51[v10->field_0];\n                            }\n                            if (v55 == 0 || v56 == 0)\n                            {\n                                v57 = 0;\n                            }\n                            v10->field_20 = v3;\n                            v56 = 1;\n                        }\n                        v51 = &v51[v56];\n                    }\n                    while (v73 > v51);\n                    v59 = v51 - v73;\n                    v48 = v59;\n                    v10->field_30 = v48;\n                }\n                if (v73 > v49 + v50 && v57 == -1 || v73 <= v49 + v50 && (v10->field_89 == 0 || (v10->field_0 < v12 - v44 + v10->field_0 + v49? v27 : v10->field_0) > v10->field_0 + v49 + v12 - 1))\n                {\n                    v10->field_70 = sub_40e5c0();\n                }\n                if (v73 > v49 + v50 && v57 != -1 || (v10->field_0 < v12 - v44 + v10->field_0 + v49? v27 : v10->field_0) <= v10->field_0 + v49 + v12 - 1 && v10->field_89 != 0 && v73 > v49 + v50)\n                {\n                    if (v10->field_8e != 0)\n                    {\n                        *((unsigned long *)&v0) = v57;\n                        v60 = iswalnum(v57);\n                        if (v60 == 0)\n                        {\n                            v57 = v0;\n                        }\n                        if (v0 == 95 || v60 != 0)\n                        {\n                            v61 = 1;\n                        }\n                    }\n                    if (v10->field_8e == 0 || v60 == 0 && v0 != 95)\n                    {\n                        v61 = 0;\n                        if (v57 == 10)\n                        {\n                            v62 = 0;\n                            v63 = v10->field_8d != 0;\n                            v61 = rax<4> * 2;\n                        }\n                    }\n                    *((unsigned long long *)&v10->field_70) = v61;\n                }\n                if (v48 != 0)\n                {\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        v64 = v10->field_10;\n                        v65 = v10->field_10 + v48 * 4;\n                        do\n                        {\n                            *(v64) = -1;\n                            v64 = &v64[1];\n                        }\n                        while (v65 != v64);\n                    }\n                    v45 = v10->field_8b;\n                    if (v10->field_8b != 0)\n                    {\n                        memset(v10->field_8, 0xff, v48);\n                        v48 = v10->field_30;\n                    }\n                }\n                if (v48 == 0 || v10->field_8b != 0)\n                {\n                    v45 = v10->field_8b;\n                }\n                *((unsigned int *)&v10->field_38) = v48;\n            }\n        }\n    }\n    if ((v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && ((unsigned int)v44 > 1 || v10->field_38 > v12) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && (v9->field_8c == 0 || v10->field_38 <= v12))\n    {\n        v44 = v10->field_90;\n        v46 = v10->field_58 - v12;\n        v47 = v10->field_68 - v12;\n    }\n    if ((v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && ((unsigned int)v44 > 1 || v10->field_38 > v12) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v45 == 0 || (unsigned int)v44 <= 1 && v10->field_38 <= v12 && (v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v10->field_8b == 0)\n    {\n        v10->field_8 = v10->field_8 + v12;\n    }\n    if ((v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && ((unsigned int)v44 > 1 || v10->field_38 > v12) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v45 != 0 || (v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && ((unsigned int)v44 > 1 || v10->field_38 > v12) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v45 == 0 || (unsigned int)v44 <= 1 && v10->field_38 <= v12 && (v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v10->field_8b == 0 || v12 == 0 && v9->field_28 <= v44 || v12 == 0 && v11 != 0 || v44 == 0 && v11 == 0 && v9->field_28 > v44)\n    {\n        v10->field_28 = v73;\n        v10->field_58 = v46;\n        v10->field_68 = v47;\n        if (v44 > 1)\n        {\n            if (v10->field_88 == 0)\n            {\n                sub_40b560();\n            }\n            else\n            {\n                v68 = sub_40b710();\n            }\n        }\n    }\n    if (((v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && ((unsigned int)v44 > 1 || v10->field_38 > v12) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v45 != 0 || (v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && ((unsigned int)v44 > 1 || v10->field_38 > v12) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v45 == 0 || (unsigned int)v44 <= 1 && v10->field_38 <= v12 && (v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0) && v10->field_8b == 0 || v12 == 0 && v9->field_28 <= v44 || v12 == 0 && v11 != 0 || v44 == 0 && v11 == 0 && v9->field_28 > v44) && v44 <= 1 || (unsigned int)v44 <= 1 && v10->field_38 <= v12 && v10->field_8b != 0 && (v11 == 0 || v12 != 0) && (v12 != 0 || v9->field_28 > v44) && (v9->field_28 <= v44 || v44 != 0 || v11 != 0))\n    {\n        if (v10->field_8b == 0)\n        {\n            v10->field_30 = v46;\n        }\n        else if (v10->field_88 == 0)\n        {\n            v69 = v10->field_78;\n            if (v10->field_78 != 0)\n            {\n                tmp_1 = v46;\n                v71 = v10->field_30;\n                tmp_19 = v10->field_40 <= v46;\n                v72 = (v10->field_40 <= v46? v10->field_40 : v46);\n                if ((tmp_19? v10->field_40 : tmp_1) <= v10->field_30)\n                {\n                    v72 = v71;\n                }\n                else\n                {\n                    while (true)\n                    {\n                        v71[v10->field_8] = v69[(unsigned long long)(char)*((char *)(&v71[v10->field_0] + v73))];\n                        v71 = &v71[1];\n                        if (v72 == v71)\n                        {\n                            break;\n                        }\n                        v73 = v10->field_28;\n                        v69 = v10->field_78;\n                    }\n                }\n                v10->field_30 = v72;\n                v10->field_38 = v72;\n            }\n        }\n        else\n        {\n            sub_40b4e0();\n        }\n    }\n    if (...)\n    {\n        v10->field_48 = 0;\n        v68 = 0;\n    }\n    return v68;\n}\n"
        },
        {
            "funcName": "sub_40cdd0",
            "funcStartAddr": "0x40cdd0",
            "funcEndAddr": "0x40cf78",
            "decompiledFuncCode": "int sub_40cdd0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4[3];  // rsi\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v7[3];  // r12\n    unsigned long long v8;  // rbx\n    unsigned long long v9[3];  // rdi\n    unsigned long long v10[3];  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long long v13;  // rbp\n    unsigned long v14;  // rsi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rdx\n    unsigned long long *v18;  // rbp\n    unsigned long long|unsigned long long * v19;  // rax\n    unsigned long long *v20;  // rdx\n    unsigned long long *v21;  // rdi\n    void *v22;  // rdi\n    void *v23;  // rsi\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // cc_dep1\n    unsigned long long v28;  // cc_dep2\n    unsigned long long *v29;  // rdi\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rdx\n    unsigned long long *v32;  // rdi\n    void *v33;  // rdi\n    unsigned long long v35;  // rcx\n    unsigned long long *v36;  // r8\n    unsigned long v37;  // rdx\n    unsigned long long *v38;  // rax\n    unsigned long long v39;  // rcx\n    unsigned long long *v40;  // rdi\n    unsigned long long v41;  // rsi\n    unsigned long long v42;  // rcx\n    unsigned long long *v43;  // r9\n    unsigned long v44;  // rdx\n    unsigned long long v46;  // rbx\n    unsigned long long v47;  // r12\n    unsigned long long v48;  // rbx\n    unsigned long long v49;  // r12\n\n    if (v4 != 0)\n    {\n        v5 = v4[1];\n        if (v4[1] != 0)\n        {\n            v2 = v6;\n            v7 = v4;\n            v1 = stack_base + 0;\n            v0 = v8;\n            v17 = v9[1];\n            v10 = v9;\n            v11 = *(v9);\n            if (*(v9) >= v9[1] + (v5 << 1))\n            {\n            }\n            else\n            {\n                v13 = (v5 + v11) * 2;\n                v14 = (v5 + v11) * 16;\n                v15 = realloc(v9[2], v14);\n                if (v15 != 0)\n                {\n                    v17 = v10[1];\n                    v10[2] = v15;\n                    v10[0] = v13;\n                    v5 = v7[1];\n                }\n                else\n                {\n                    v16 = 12;\n                }\n            }\n            if (v15 != 0 || *(v9) >= v9[1] + (v5 << 1))\n            {\n                if ((v9[1] == 0 || *(v9) < v9[1] + (v5 << 1)) && (v17 == 0 || *(v9) >= v9[1] + (v5 << 1)))\n                {\n                    v22 = v10[2];\n                    v23 = v7[2];\n                    v10[1] = v5;\n                    memcpy(v22, v23, v7[1] * 8);\n                }\n                if ((*(v9) < v9[1] + (v5 << 1) || v9[1] != 0) && (v17 != 0 || *(v9) >= v9[1] + (v5 << 1)))\n                {\n                    v18 = v17 + v5 * 2;\n                    v19 = v5 - 1;\n                    v20 = v17 - 1;\n                    v21 = !(v19);\n                    while ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>))\n                    {\n                        while (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n                        {\n                            v26 = *((long long *)(v7[2] + v19 * 8));\n                            v27 = *((long long *)(v10[2] + v20 * 8));\n                            v28 = *((long long *)(v7[2] + v19 * 8));\n                            if (*((long long *)(v10[2] + (v20 << 3))) == *((long long *)(v7[2] + (v19 << 3))))\n                            {\n                                v19 = (char *)&v19[-1] + 7;\n                                v31 = (char *)&v20[-1] + 7;\n                                v32 = !(v19);\n                            }\n                            else if (v27 < v28)\n                            {\n                                v19 = (char *)&v19[-1] + 7;\n                                v18 = (char *)&v18[-1] + 7;\n                                *((unsigned long long *)(v10[2] + v18 * 8)) = v26;\n                                v29 = !(v19);\n                            }\n                            else\n                            {\n                                v30 = (char *)&v20[-1] + 7;\n                            }\n                        }\n                    }\n                    v18 -= (char *)v19 + 1;\n                    v33 = v10[2] + v18 * 8;\n                    memcpy(v33, v7[2], ((char *)v19 + 1) * 8);\n                    v35 = v10[1];\n                    v36 = v10[1] + v7[1] * 2 - 1;\n                    v37 = (char *)(unsigned long long *)(-1 + v10[1] + 2 * v7[1] + -0x1 * v18) + 1;\n                    if ((char *)(unsigned long long *)(-1 + v10[1] + 2 * v7[1] + -0x1 * v18) + 1 != 0)\n                    {\n                        v38 = v35 - 1;\n                        v39 = v35 + v37;\n                        v40 = v10[2];\n                        v10[1] = v39;\n                        while (true)\n                        {\n                            v41 = *((long long *)((char *)v40 + 0x8 * v36));\n                            v42 = *((long long *)((char *)v40 + 0x8 * v38));\n                            v43 = (char *)v40 + 0x8 * ((char *)v38 + v37);\n                            if (*((long long *)((char *)v40 + 0x8 * v36)) > *((long long *)((char *)v40 + 0x8 * v38)))\n                            {\n                                v36 = (char *)&v36[-1] + 7;\n                                *(v43) = v41;\n                                v37 -= 1;\n                                if (v37 == 1)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                *(v43) = v42;\n                                v38 = (char *)&v38[-1] + 7;\n                                v44 = v37 * 8;\n                                memcpy(v40, (char *)v40 + 0x8 * v18, v44);\n                                v46 = v0;\n                                v47 = v2;\n                                return 0;\n                            }\n                        }\n                    }\n                }\n                v16 = 0;\n            }\n            v48 = v0;\n            v49 = v2;\n            return v16;\n        }\n    }\n    if (v4 == 0 || v4[1] == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4189a0",
            "funcStartAddr": "0x4189a0",
            "funcEndAddr": "0x4189ba",
            "decompiledFuncCode": "int sub_4189a0()\n{\n    unsigned long long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp+0x8]\n    unsigned long v5;  // [bp+0x10]\n\n    v3 = 1;\n    v2 = v5;\n    v1 = v4;\n    v0 = 0;\n    return sub_4185b0();\n}\n"
        },
        {
            "funcName": "sub_40b4b0",
            "funcStartAddr": "0x40b4b0",
            "funcEndAddr": "0x40b4d6",
            "decompiledFuncCode": "int sub_40b4b0()\n{\n    char v1;  // dil\n    unsigned int v2;  // ebx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    unsigned long v6;  // rbx\n\n    v2 = v1;\n    v4 = btowc((unsigned long long)v1);\n    if ((unsigned int)v4 == -1)\n    {\n        v4 = (unsigned int)(v5 == 0? (unsigned int)v6 : (unsigned int)rax<8>);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40b100",
            "funcStartAddr": "0x40b100",
            "funcEndAddr": "0x40b14e",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[216];\n    unsigned long long field_d8;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_2;\n\nint sub_40b100()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rsi\n    struct_1 *v3;  // rdi\n    unsigned long v6;  // r8\n    unsigned long long v7;  // rax\n\n    v2 = v1 * 5;\n    if (*((long long *)(v3->field_d8 + (v2 << 3) + 16)) <= v6)\n    {\n        v7 = *((long long *)(v3->field_d8 + v2 * 8 + 24));\n        if (!(v7 >= v6))\n        {\n            return 1;\n        }\n        else if (v7 != v6)\n        {\n            if (*((long long *)(v3->field_d8 + v2 * 8 + 16)) != v6)\n            {\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b4e0",
            "funcStartAddr": "0x40b4e0",
            "funcEndAddr": "0x40b558",
            "decompiledFuncCode": "int sub_40b4e0()\n{\n    void tmp_11;  // tmp #11\n    unsigned long long v1[16];  // rdi\n    unsigned long long v2[16];  // rbp\n    unsigned long v3;  // r12\n    unsigned long long *v4;  // rax\n    unsigned long v5;  // rax\n    void *v6;  // rdx\n    unsigned long long v7;  // rdx\n    char *v8;  // rbx\n\n    v2 = v1;\n    v3 = (v1[8] <= v1[11]? v1[8] : v1[11]);\n    v8 = v1[6];\n    if ((v1[8] <= v1[11]? v1[8] : v1[11]) > v1[6])\n    {\n        v4 = __ctype_toupper_loc();\n        do\n        {\n            v6 = (unsigned long long)v8[v2[5] + *(v2)];\n            if (v2[15] != 0)\n            {\n                v6 = (unsigned long long)(char)*(&((char *)v6)[v1[15]]);\n            }\n            v7 = (unsigned int)*((int *)(*(v4) + v6 * 4));\n            *((unsigned long long *)&v8[v2[1]]) = v7;\n            v8 = &v8[1];\n        }\n        while (v3 != v8);\n        *((int *)&v2[6]) = (v1[8] <= v1[11]? v1[8] : v1[11]);\n        v2[7] = v3;\n        return v4;\n    }\n    tmp_11 = v1[6];\n    v2[6] = v1[6];\n    v2[7] = tmp_11;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_417f30",
            "funcStartAddr": "0x417f30",
            "funcEndAddr": "0x417f4e",
            "decompiledFuncCode": "int sub_417f30()\n{\n}\n"
        },
        {
            "funcName": "sub_409e60",
            "funcStartAddr": "0x409e60",
            "funcEndAddr": "0x40a45e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_41d9d8;\nextern unsigned int g_41d9f8;\nextern unsigned int g_41da28;\nextern unsigned int g_41da48;\nextern unsigned int g_41da78;\nextern unsigned int g_41dac9;\nextern unsigned long long stderr;\n\nint sub_409e60()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char v11;  // [bp+0x18]\n    char *v12;  // r14\n    char *v13;  // rdx\n    unsigned long v14;  // r8\n    char *v15;  // rbp\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // r13\n    unsigned long long v18;  // rcx\n    unsigned long long|unsigned long long * v19;  // rbx\n    unsigned long long|unsigned int|unsigned long v20;  // r12\n    char *v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // r8\n    char *v25;  // rdi\n    unsigned long long v26;  // r15\n    unsigned long long v27;  // rbp\n    unsigned long long v28;  // rax\n    unsigned int v29;  // r9d\n    unsigned long long v30;  // r9\n    unsigned long long v31;  // rdx\n    unsigned int v32;  // ecx\n    unsigned long long *v34;  // rsi\n    char *v35;  // rbp\n    unsigned long long v36;  // rdx\n    unsigned long v39;  // rdi\n    unsigned long long|unsigned long long * v40;  // rbx\n    unsigned long long v41;  // r12\n    unsigned long long v43;  // rbp\n    unsigned long long v46;  // rax\n    unsigned int *v47;  // rdx\n    unsigned long long v48;  // r14\n\n    v12 = v9->field_20;\n    v3 = v13;\n    v2 = v14;\n    v15 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v15 = &v15[1];\n            v16 = *(v15);\n        }\n        while ((char)v16 != 0 && v16 != 61);\n        v17 = v15 - v12;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v17 = 0;\n    }\n    v19 = v18;\n    v20 = 0;\n    v0 = *((long long *)v18);\n    v21 = *((long long *)v18);\n    if (*((long long *)v18) != 0)\n    {\n        while (true)\n        {\n            v22 = strncmp(v21, v9->field_20, v17);\n            if (v22 == 0)\n            {\n                v23 = strlen(v21);\n            }\n            if (v22 != 0 || v23 != v17)\n            {\n                v19 += 32;\n                v21 = *(v19);\n                v24 = v20 + 1;\n                if (*(v19) != 0)\n                {\n                    v20 = v24;\n                }\n                else\n                {\n                    v8 = v20;\n                    v19 = 0;\n                    v6 = -1;\n                    v25 = v0;\n                    v26 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v15;\n                    v27 = v18;\n                    do\n                    {\n                        v28 = strncmp(v25, v9->field_20, v17);\n                        if (v28 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                v6 = v26;\n                                v19 = v27;\n                            }\n                            else if (v29 != 0 || *((int *)(v19 + 24)) != *((int *)(v27 + 24)) || *((long long *)(v19 + 16)) != *((long long *)(v27 + 16)) || *((int *)(v19 + 8)) != *((int *)(v27 + 8)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v26)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v27 += 32;\n                        v25 = *((long long *)v27);\n                        v26 += 1;\n                    }\n                    while (*((long long *)v27) != 0);\n                    v15 = v0;\n                    if (v1 == 0)\n                    {\n                        v30 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v19 == 0)\n                            {\n                                break;\n                            }\n                            v20 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41d9d8, 0x5), *(v34));\n                                v12 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41d9f8, 0x5), *(v34));\n                                v39 = stderr;\n                                v40 = v18;\n                                v43 = v1;\n                                v41 = v1 + v20 + 1;\n                                do\n                                {\n                                    if (*((char *)v43) != 0)\n                                    {\n                                        __fprintf_chk(v39, 0x1, 0x41dac9, *((long long *)&v11));\n                                        v39 = stderr;\n                                    }\n                                    v43 += 1;\n                                    v40 = &v40[4];\n                                }\n                                while (v41 != v43);\n                                fputc(0xa, v39);\n                                funlockfile(stderr);\n                                v12 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v48 = &v12[strlen(v12)];\n                        v9->field_20 = v48;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v46 = 63;\n                    }\n                }\n            }\n            if ((v22 == 0 || *(v19) == 0) && (v22 == 0 || v4 == 0) && (v22 == 0 || v1 == 0) && (*(v19) == 0 || v23 == v17) && (v4 == 0 || v23 == v17) && (v1 == 0 || v23 == v17))\n            {\n                v31 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v31 + 1;\n                v32 = *((int *)(v19 + 8));\n                if (*(v15) == 0)\n                {\n                    if (v32 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v34[1 + v31];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41da78, 0x5), *(v34));\n                            }\n                            v9->field_8 = *((int *)(v19 + 24));\n                            v46 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v32 != 0)\n                    {\n                        v35 = &v15[1];\n                        v9->field_10 = v35;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41da48, 0x5), *(v34));\n                        }\n                        v9->field_8 = *((int *)(v19 + 24));\n                        v46 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v25 && *(v15) == 0 || *(v15) == 0 && v32 != 1 || *(v15) != 0 && v32 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v20;\n                    }\n                    v47 = *((long long *)(v19 + 16));\n                    v46 = (unsigned int)*((int *)(v19 + 24));\n                    if (*((long long *)(v19 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v47) = v46;\n                    v46 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v46;\n        }\n    }\n    if (v29 != 0)\n    {\n        if (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v36 = strchr(v3, v5);\n            v46 = -18446744069414584321;\n        }\n        if ((v36 != 0 || *((long long *)v18) != 0) && (*((char *)(v34[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v18) != 0))\n        {\n            return v46;\n        }\n    }\n    if (v29 == 0 && *((long long *)v18) == 0 || v36 == 0 && v29 != 0 || *((char *)(v34[(long long)(int)v9->field_0] + 1)) == 45 && v29 != 0)\n    {\n        if (v10 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41da28, 0x5), *(v34));\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_415708",
            "funcStartAddr": "0x415708",
            "funcEndAddr": "0x415721",
            "decompiledFuncCode": "int sub_415708()\n{\n    unsigned int v1;  // r15d\n    unsigned long long v2;  // r15\n\n    v2 = v1 & 0x1200;\n}\n"
        },
        {
            "funcName": "sub_404f70",
            "funcStartAddr": "0x404f70",
            "funcEndAddr": "0x405019",
            "decompiledFuncCode": "int sub_404f70()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long long v2;  // rsi\n    unsigned long long *v3;  // rbp\n    char *v4;  // rdi\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    unsigned long long v12;  // cc_dep1\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long *v15;  // rdx\n    unsigned long long v16;  // rbx\n\n    v3 = v2;\n    if (v4 != 0 && *(v4) != 0)\n    {\n        v9 = \"-\";\n        v11 = 2;\n        v10 = v4;\n        while (v11 != 0)\n        {\n            v11 -= 1;\n            v6 = *(v10);\n            v7 = *(v9);\n            v9 = &v9[v8];\n            v10 = &v10[v8];\n            break;\n        }\n        v12 = (v6 > v7) - 0 - (v6 < v7);\n        if ((char)v12 != 0)\n        {\n            v13 = sub_4085a0();\n            *(v3) = v13;\n        }\n    }\n    if (v4 == 0 || *(v4) == 0 || (char)v12 == 0)\n    {\n        v13 = sub_408370();\n        *(v3) = v13;\n    }\n    if (v13 != 0 || v13 != 0)\n    {\n        v14 = v13 + v0;\n        *(v15) = v14;\n        return v14;\n    }\n    if (v4 == 0 && v13 == 0 || *(v4) == 0 && v13 == 0 || (char)v12 == 0 && v13 == 0 || v13 == 0 && v4 != 0 && *(v4) != 0 && (char)v12 != 0)\n    {\n        v16 = (unsigned int)sub_4081d0();\n        error(0x1, *(__errno_location()), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_407d90",
            "funcStartAddr": "0x407d90",
            "funcEndAddr": "0x407e02",
            "decompiledFuncCode": "extern int512_t g_623c40;\n\nint sub_407d90()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_623c40 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_4068d0();\n}\n"
        },
        {
            "funcName": "sub_4156b0",
            "funcStartAddr": "0x4156b0",
            "funcEndAddr": "0x415704",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    char field_8;\n} struct_0;\n\nint sub_4156b0()\n{\n    char v2;  // r15b\n    unsigned long v3;  // r12\n    unsigned long long v4;  // r12\n    unsigned long long v5[12];  // r13\n    struct_0 *v7;  // rbx\n\n    if ((v2 & 8) == 0)\n    {\n        v4 = v3 + 1;\n        if (v4 != v5[11])\n        {\n            v5[9] = v4;\n            sub_415350();\n            v5[9] = v5[9] - 1;\n        }\n    }\n    v7->field_8 = 12;\n    v7->field_0 = 32;\n}\n"
        },
        {
            "funcName": "sub_408090",
            "funcStartAddr": "0x408090",
            "funcEndAddr": "0x4080f9",
            "decompiledFuncCode": "int sub_408090()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407b00();\n}\n"
        },
        {
            "funcName": "sub_40bef0",
            "funcStartAddr": "0x40bef0",
            "funcEndAddr": "0x40bf0e",
            "decompiledFuncCode": "int sub_40bef0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long v3[4];  // rdi\n\n    v0 = v2;\n    free(*(v3));\n    free(v3[3]);\n}\n"
        },
        {
            "funcName": "sub_409180",
            "funcStartAddr": "0x409180",
            "funcEndAddr": "0x4091a1",
            "decompiledFuncCode": "int sub_409180()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4093b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40cfa0",
            "funcStartAddr": "0x40cfa0",
            "funcEndAddr": "0x40d1db",
            "decompiledFuncCode": "typedef struct struct_9 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_8 *field_10;\n} struct_9;\n\ntypedef struct struct_6 {\n    char padding_0[8];\n    char field_8;\n} struct_6;\n\ntypedef struct struct_7 {\n    char padding_0[16];\n    struct struct_8 *field_10;\n} struct_7;\n\ntypedef struct struct_5 {\n    uint128_t field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_5;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\ntypedef struct struct_1 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_1;\n\nint sub_40cfa0()\n{\n    unsigned int v0;  // [bp-0x7c]\n    unsigned long v1;  // [bp-0x78]\n    unsigned long long v2;  // [bp-0x70]\n    unsigned long v3;  // [bp-0x68]\n    void v4;  // [bp-0x58]\n    void *v5;  // [bp-0x48]\n    unsigned long long v7[7];  // rsi\n    unsigned long long v8[7];  // r15\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // r12\n    uint128_t *v11;  // rbp\n    struct_9 *v12;  // rbx\n    unsigned long v13;  // rcx\n    unsigned long long v14;  // rdx\n    unsigned long long v16;  // rax\n    struct_6 *v17;  // rax\n    unsigned long long v18;  // rsi\n    struct_7 *v19;  // rax\n    unsigned long long v20;  // r13\n    unsigned long long v21;  // r14\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rbx\n    struct_5 *v24;  // rax\n    unsigned long long v25;  // rcx\n    unsigned long long v27;  // rax\n    uint128_t *v28;  // rax\n    struct_1 *v30;  // rdi\n\n    v8 = v7;\n    v10 = v9;\n    v11 = v9 * 24;\n    v12 = v7[5] + v9 * 24;\n    v0 = v13;\n    v2 = 0;\n    v1 = *((long long *)(v7[5] + v9 * 24 + 8)) + 1;\n    v3 = malloc((*((long long *)(v7[5] + v9 * 24 + 8)) + 1) * 8);\n    if (v3 != 0)\n    {\n        v14 = *(v8);\n        *((long long *)&((char *)v11)[8 + v8[6]]) = -1;\n        v17 = v14 + v10 * 16;\n        if (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0 && v12->field_8 != 0 && (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) == 0)\n        {\n            v16 = sub_40c1d0();\n            if ((unsigned int)v16 == 0)\n            {\n                v17 = *(v8) + v10 * 16;\n            }\n        }\n        if (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 != 0)\n        {\n            if (((unsigned int)v16 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0) && (v17->field_8 & 8) != 0)\n            {\n                v18 = v8[5];\n                v19 = v8[5] + (char *)v11;\n                if (*((long long *)&((char *)v11)[8 + v8[5]]) > 0)\n                {\n                    v20 = 0;\n                    v21 = 0;\n                    while (true)\n                    {\n                        v23 = v19->field_10[v21] * 24;\n                        v24 = v8[6] + v19->field_10[v21] * 24;\n                        v25 = *((long long *)&((char *)&v24->field_0)[8]);\n                        if (*((long long *)&((char *)&v24->field_0)[8]) != -1)\n                        {\n                            if (v25 != 0)\n                            {\n                                *((uint128_t *)&v4) = v24->field_0;\n                                v5 = v24->field_8;\n                            }\n                            else\n                            {\n                                v16 = sub_40cfa0();\n                                if ((unsigned int)v16 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v16 = sub_40cdd0();\n                            if ((unsigned int)v16 != 0)\n                            {\n                                break;\n                            }\n                            if (*((long long *)(v8[6] + v23 + 8)) == 0)\n                            {\n                                v20 = 1;\n                                free(v5);\n                            }\n                            v18 = v8[5];\n                            v21 += 1;\n                            v19 = v8[5] + (char *)v11;\n                        }\n                        else\n                        {\n                            v19 = v18 + (char *)v11;\n                            v20 = 1;\n                            v21 += 1;\n                        }\n                        v27 = sub_40b280();\n                        if (v27 == 0)\n                        {\n                            break;\n                        }\n                        v28 = v8[6];\n                        if (v20 == 0 || (char)v0 == 1)\n                        {\n                            break;\n                        }\n                        *((long long *)&((char *)v11)[8 + v8[6]]) = 0;\n                    }\n                    if ((*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && (*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0 || v25 != 0) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21 || v25 != 0) && v27 != 0 && (char)v0 != 1 || (*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && (*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0 || v25 != 0) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21 || v25 != 0) && v27 != 0)\n                    {\n                        *((int128_t *)(v28 + v11)) = *((int128_t *)&v1);\n                        *((unsigned long *)(v28 + v11 + 16)) = v3;\n                    }\n                    else if ((*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && (*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0 || v25 != 0) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21 || v25 != 0))\n                    {\n                        return 12;\n                    }\n                    else if ((unsigned int)v16 == 0 || v25 != 0 || *((long long *)&((char *)&v24->field_0)[8]) != -1)\n                    {\n                        return v16;\n                    }\n                    else if ((*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && (*((long long *)&((char *)v11)[8 + v8[5]]) <= v21 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)&v24->field_0)[8]) == -1) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0 || v25 != 0) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21 || v25 != 0) && v27 != 0 && (char)v0 != 1 && v20 != 0)\n                    {\n                        v30->field_10 = v3;\n                        v30->field_0 = *((int128_t *)&v1);\n                        return 0;\n                    }\n                }\n            }\n            if (((*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) == 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0) && ((*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) == 0 || (v17->field_8 & 8) != 0) && ((unsigned int)v16 != 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0) && ((unsigned int)v16 != 0 || (v17->field_8 & 8) != 0) && (*((long long *)&((char *)v11)[8 + v8[5]]) > 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0) && (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0 || (v17->field_8 & 8) != 0))\n            {\n                return v16;\n            }\n        }\n        if ((*((long long *)&((char *)v11)[8 + v8[5]]) <= 0 || (v17->field_8 & 8) == 0 || v12->field_8 == 0) && (*((long long *)&((char *)v11)[8 + v8[5]]) <= 0 || (v17->field_8 & 8) == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0) && ((unsigned int)v16 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 == 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0))\n        {\n            v22 = sub_40b280();\n            if (v22 != 0)\n            {\n                v28 = v8[6];\n            }\n        }\n        if ((v22 != 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0) && (v22 != 0 || (v17->field_8 & 8) != 0) && (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v22 != 0 || v12->field_8 != 0) && ((unsigned int)v16 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 == 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0))\n        {\n            *((int128_t *)(v28 + v11)) = *((int128_t *)&v1);\n            *((unsigned long *)(v28 + v11 + 16)) = v3;\n            v30->field_10 = v3;\n            v30->field_0 = *((int128_t *)&v1);\n            return 0;\n        }\n    }\n    if (v3 == 0 || (unsigned int)v16 == 0 && v22 == 0 || v22 == 0 && ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v22 == 0 && v12->field_8 == 0 || v22 == 0 && (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 && *((long long *)&((char *)v11)[8 + v8[5]]) > 0 && (v17->field_8 & 8) != 0 || (unsigned int)v16 == 0 && *((long long *)&((char *)v11)[8 + v8[5]]) > 0 && (v17->field_8 & 8) != 0 && v12->field_8 != 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0 && (v17->field_8 & 8) != 0 && (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0 && v12->field_8 != 0)\n    {\n        return 12;\n    }\n}\n"
        },
        {
            "funcName": "sub_4119c0",
            "funcStartAddr": "0x4119c0",
            "funcEndAddr": "0x41222c",
            "decompiledFuncCode": "int sub_4119c0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_40fe70",
            "funcStartAddr": "0x40fe70",
            "funcEndAddr": "0x40ffe2",
            "decompiledFuncCode": "extern int512_t g_41e560;\n\nint sub_40fe70()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long long v6[29];  // rdi\n    unsigned long long v7[29];  // r12\n    unsigned long v8;  // rbx\n    unsigned long long v10;  // rbx\n    unsigned long long v12;  // rbx\n    unsigned long long v16;  // r13\n    unsigned long long *v17;  // rdi\n    unsigned long long v18;  // rbx\n    unsigned long long v19[3];  // rbp\n\n    v2 = v4;\n    v1 = v5;\n    v7 = v6;\n    v0 = v8;\n    if (*(v6) != 0 && v7[2] != 0)\n    {\n        v10 = 0;\n        while (true)\n        {\n            v10 += 1;\n            sub_40bf10();\n            if (v7[2] <= v10)\n            {\n                break;\n            }\n        }\n    }\n    v12 = 0;\n    free(v7[3]);\n    if (v7[2] != 0)\n    {\n        do\n        {\n            if (v7[6] != 0)\n            {\n                free(*((long long *)(v7[6] + v12 * 24 + 16)));\n            }\n            if (v7[7] != 0)\n            {\n                free(*((long long *)(v7[7] + v12 * 24 + 16)));\n            }\n            if (v7[5] != 0)\n            {\n                free(*((long long *)(v7[5] + v12 * 24 + 16)));\n            }\n            v12 += 1;\n        }\n        while (v7[2] > v12);\n    }\n    v16 = 0;\n    free(v7[5]);\n    free(v7[6]);\n    free(v7[7]);\n    free(*(v7));\n    v17 = v7[8];\n    if (v7[8] != 0)\n    {\n        while (true)\n        {\n            v18 = 0;\n            v19 = &v17[3 * v16];\n            if (v17[2 * v16 + v16] > 0)\n            {\n                while (true)\n                {\n                    v18 += 1;\n                    sub_40c460();\n                    if (v18 >= *(v19))\n                    {\n                        break;\n                    }\n                }\n            }\n            v16 += 1;\n            free(v19[2]);\n            if (v7[17] < v16)\n            {\n                break;\n            }\n            v17 = v7[8];\n        }\n        v17 = v7[8];\n    }\n    free(v17);\n    if (v7[15] != 4318560)\n    {\n        free(v7[15]);\n    }\n    free(v7[28]);\n}\n"
        },
        {
            "funcName": "sub_415668",
            "funcStartAddr": "0x415668",
            "funcEndAddr": "0x415686",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_415668()\n{\n    unsigned int v1;  // r15d\n    unsigned long long v2;  // r15\n    struct_0 *v3;  // rbx\n\n    v2 = v1 & 0x8400;\n    v3->field_8 = 10;\n}\n"
        },
        {
            "funcName": "sub_41b410",
            "funcStartAddr": "0x41b410",
            "funcEndAddr": "0x41b428",
            "decompiledFuncCode": "extern int512_t g_6232a8;\n\nint sub_41b410()\n{\n}\n"
        },
        {
            "funcName": "sub_40ca30",
            "funcStartAddr": "0x40ca30",
            "funcEndAddr": "0x40cab9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    char padding_10[24];\n    char field_28;\n    char padding_29[7];\n    char field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[24];\n    unsigned long long field_28;\n    char field_30;\n} struct_1;\n\nint sub_40ca30()\n{\n    void tmp_45;  // tmp #45\n    struct_0 *v1;  // rsi\n    unsigned long long v2[29];  // rdi\n    unsigned long long *v3;  // rax\n    struct_1 *v4;  // rax\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long v7[29];  // rdi\n\n    if (!(v1->field_30 != 4))\n    {\n        v3 = v2[28];\n        if (v2[28] != 0)\n        {\n            tmp_45 = 1 << ((char)v3[(long long)*((int *)&v1->field_28)] & 31);\n            *((unsigned long long *)&v1->field_28) = v3[(long long)*((int *)&v1->field_28)];\n            v2[20] = v2[20] | tmp_45;\n            return 0;\n        }\n    }\n    else if (v1->field_30 == 17)\n    {\n        v4 = v1->field_8;\n        if (v1->field_8 != 0 && v1->field_8->field_30 == 17)\n        {\n            v5 = v4->field_28;\n            v6 = v4->field_8;\n            v1->field_8 = v1->field_8->field_8;\n            if (v6 != 0)\n            {\n                *((struct_0 **)v1->field_8->field_8) = v1;\n            }\n            *((long long *)(v7[28] + v1->field_8->field_28 * 8)) = *((long long *)(v7[28] + *((long long *)&v1->field_28) * 8));\n            if (v5 <= 63)\n            {\n                v7[20] = v7[20] & (-2 << (v5 & 63) | -2 >> 64 - (v5 & 63));\n            }\n        }\n    }\n    if (v2[28] == 0 || v1->field_30 != 4)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b710",
            "funcStartAddr": "0x40b710",
            "funcEndAddr": "0x40bce4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[16];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    unsigned long long field_68;\n    char padding_70[8];\n    unsigned long long field_78;\n    char padding_80[10];\n    char field_8a;\n    char padding_8b[1];\n    char field_8c;\n    char padding_8d[3];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40b710()\n{\n    unsigned long long|unsigned int|void *|unsigned long v0;  // [bp-0xa8]\n    void tmp_24;  // tmp #24\n    void tmp_25;  // tmp #25\n    unsigned long long|unsigned int|unsigned long v1;  // [bp-0xa0]\n    unsigned long long|void *|unsigned long v2;  // [bp-0x98]\n    unsigned long v3;  // [bp-0x90]\n    unsigned int v4;  // [bp-0x84]\n    unsigned long v5;  // [bp-0x80]\n    char v6;  // [bp-0x78]\n    struct_0 *v8;  // rdi\n    struct_0 *v9;  // r14\n    void *v10;  // rbp\n    unsigned int *v11;  // r13\n    unsigned long long v12;  // rax\n    unsigned long v14;  // r12\n    unsigned int v15;  // r13d\n    unsigned int v16;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long v20;  // rax\n    unsigned int *v23;  // rcx\n    unsigned long long v24;  // rax\n    char *v25;  // rdx\n    unsigned long long v27;  // r10\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rdi\n    unsigned long v30;  // rbp\n    unsigned int v31;  // r13d\n    char *v33;  // rax\n    unsigned long v34;  // r10\n    void *v35;  // rcx\n    void *v37;  // r8\n    unsigned long v40;  // rax\n    unsigned long long v41;  // rax\n    void *v42;  // rax\n    void *v43;  // rdx\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rax\n    void *v47;  // rsi\n    void *v48;  // rdx\n    unsigned long long v49;  // rcx\n    unsigned int *v50;  // rdx\n    void *v52;  // r15\n    unsigned long long v54;  // rsi\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rax\n    unsigned long long v57;  // r10\n    unsigned long long v58;  // rbx\n    unsigned long v59;  // rbx\n    unsigned long long|void * v60;  // r12\n    unsigned long long v61;  // rax\n\n    v9 = v8;\n    v59 = (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58);\n    v52 = v8->field_30;\n    if (v8->field_8a == 0 && v8->field_78 == 0 && v8->field_8c == 0)\n    {\n        if (v8->field_30 < (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58))\n        {\n            v0 = &v8->field_20;\n            do\n            {\n                v10 = v52;\n                v11 = (unsigned long long)(char)*(&((char *)v52)[v9->field_0 + v9->field_28]);\n                if ((*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) == 0)\n                {\n                    v12 = mbsinit(v0);\n                    if (v12 != 0)\n                    {\n                        *((unsigned long long *)&((char *)v52)[v9->field_8]) = (unsigned int)*((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + v11 * 4));\n                        *((unsigned int *)(v9->field_10 + v52 * 4)) = (char)*(&((char *)v52)[v9->field_8]);\n                        v52 += 1;\n                    }\n                }\n                if (v12 == 0 || (*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) != 0)\n                {\n                    v5 = v9->field_20;\n                    v2 = (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58) - v52;\n                    v3 = stack_base + -132;\n                    v14 = (unsigned int)sub_40ab50();\n                    if (v14 <= -3)\n                    {\n                        v1 = v4;\n                        v15 = towupper(v4);\n                        if (v1 != v15)\n                        {\n                            v18 = wcrtomb((unsigned int)&v6, v15, (unsigned int)&v5);\n                            if (v14 == v18)\n                            {\n                                memcpy(v9->field_8 + v52, &v6, v14);\n                            }\n                            else\n                            {\n                                v60 = v52;\n                            }\n                        }\n                        else\n                        {\n                            memcpy(v9->field_8 + v52, v9->field_28 + v52 + v9->field_0, v14);\n                        }\n                        if (v14 == v18 || v1 == v15)\n                        {\n                            v20 = v9->field_10;\n                            v52 += 1;\n                            *((unsigned int *)(v9->field_10 + v10 * 4)) = v15;\n                            if (v52 < v52)\n                            {\n                                v23 = v20 + v10 * 4 + 4;\n                                v24 = v20 + v52 * 4;\n                                do\n                                {\n                                    *(v23) = -1;\n                                    v23 = &v23[1];\n                                }\n                                while (v24 != v23);\n                                v52 = v10 + v14;\n                            }\n                        }\n                    }\n                    else if (v14 != -2)\n                    {\n                        tmp_24 = (char)*(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        *(&((char *)v52)[v9->field_8]) = *(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        v52 += 1;\n                        *((unsigned int *)(v9->field_10 + v10 * 4)) = tmp_24;\n                        v9->field_20 = v5;\n                    }\n                    else if (v9->field_40 >= v9->field_58)\n                    {\n                        v16 = (char)*(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        *(&((char *)v52)[v9->field_8]) = *(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        v52 += 1;\n                        *((unsigned int *)(v9->field_10 + v10 * 4)) = v16;\n                    }\n                    else\n                    {\n                        v9->field_20 = v5;\n                    }\n                }\n            }\n            while (!((v14 == v18 && v14 <= -3 || v14 <= -3 && v1 == v15 || (*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) == 0 && v12 != 0 || v14 != -2 && v14 > -3 || v14 > -3 && v9->field_40 >= v9->field_58) && (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58) <= v52));\n            if (v14 <= -3 && v14 != v18 && v1 != v15 && (v12 == 0 || (*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) != 0))\n            {\n                v25 = v9->field_78;\n                v5 = v9->field_20;\n            }\n            else\n            {\n                v9->field_30 = v52;\n                v61 = 0;\n                v9->field_38 = v52;\n            }\n        }\n        if (v9->field_78 != 0 || v8->field_30 >= (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58))\n        {\n            v9->field_30 = v52;\n            v61 = 0;\n            v9->field_38 = v52;\n        }\n    }\n    if (v8->field_8c != 0 || v8->field_78 != 0 || v8->field_8a != 0)\n    {\n        v60 = v8->field_38;\n    }\n    v25 = v9->field_78;\n    v5 = v9->field_20;\n    if (v9->field_78 == 0)\n    {\n        v1 = v9->field_28 + v60 + v9->field_0;\n    }\n    else\n    {\n        if (v9->field_90 > 0 && v2 > 0)\n        {\n            v27 = (unsigned long long)v9->field_90 - 1;\n            v28 = 0;\n            v29 = v9->field_28 + v60 + v9->field_0;\n            do\n            {\n                v6 = v25[(unsigned long long)(char)*((char *)(v29 + v28))];\n                v28 += 1;\n            }\n            while (v2 != v28 && v27 != v28);\n        }\n        v1 = &v6;\n    }\n    v30 = (unsigned int)sub_40ab50();\n    if (v30 <= -3)\n    {\n        v0 = v4;\n        v31 = towupper(v4);\n        if (v0 != v31)\n        {\n            v2 = v52;\n            v0 = &v6;\n            v34 = wcrtomb((unsigned int)&v6, v31, (unsigned int)&v5);\n            if (v30 == v34)\n            {\n                v0 = v2;\n                memcpy(v9->field_8 + v52, &v6, v30);\n                v37 = v0;\n            }\n            else\n            {\n                if (v34 != -1)\n                {\n                    v0 = v52 + v34;\n                    v40 = v9->field_40;\n                    if (v52 + v34 <= v9->field_40)\n                    {\n                        if (v9->field_18 == 0)\n                        {\n                            v2 = &v6;\n                            v1 = v34;\n                            v41 = malloc(v40 * 8);\n                            v34 = v1;\n                            v9->field_18 = v41;\n                            if (v41 == 0)\n                            {\n                                v61 = 12;\n                            }\n                        }\n                        if (v9->field_18 != 0 || v41 != 0)\n                        {\n                            if (v9->field_8c == 0)\n                            {\n                                if (v52 != 0)\n                                {\n                                    v45 = 0;\n                                    do\n                                    {\n                                        *((unsigned long long *)(v9->field_18 + v45 * 8)) = v45;\n                                        v45 += 1;\n                                    }\n                                    while (v52 != v45);\n                                }\n                                v9->field_8c = 1;\n                            }\n                            v1 = v34;\n                            memcpy(v9->field_8 + v52, &v6, v34);\n                            v54 = v9->field_10 + v52 * 4;\n                            tmp_25 = v9->field_18;\n                            *((unsigned int *)(v9->field_10 + v52 * 4)) = v31;\n                            v55 = tmp_25 + v52 * 8;\n                            v56 = 1;\n                            *((void **)(tmp_25 + v52 * 8)) = v60;\n                            if (v1 > 1)\n                            {\n                                do\n                                {\n                                    *((void **)(v55 + v56 * 8)) = (v30 <= v56? v30 - 1 : v56) + v60;\n                                    *((int *)(v54 + v56 * 4)) = -1;\n                                    v56 += 1;\n                                }\n                                while (v56 != v1);\n                            }\n                            v57 = v1 - v30;\n                            v58 = v9->field_58 + v57;\n                            v9->field_58 = v9->field_58 + v57;\n                            if (v60 < v9->field_60)\n                            {\n                                v9->field_68 = v9->field_68 + v57;\n                            }\n                            v52 = v0;\n                            v59 = (v9->field_40 <= v58? v9->field_40 : v58);\n                            v60 += v30;\n                        }\n                    }\n                }\n            }\n        }\n        if ((v0 == v31 || v34 == -1) && (v0 == v31 || v30 != v34))\n        {\n            v0 = v37;\n            memcpy(v9->field_8 + v52, v1, v30);\n            v37 = v0;\n        }\n        if (v0 == v31 || v30 == v34 || v34 == -1)\n        {\n            if (v9->field_8c == 0)\n            {\n                v42 = v60 + v30;\n            }\n            else\n            {\n                v42 = v60;\n                if (v30 != 0)\n                {\n                    v42 = v30 + v60;\n                    v43 = v9->field_18 + (v52 - v60) * 8;\n                    do\n                    {\n                        *((void **)((char *)v43 + 0x8 * v60)) = v60;\n                        v60 += 1;\n                    }\n                    while (v42 != v60);\n                }\n            }\n            v60 = v42;\n            v46 = v9->field_10;\n            v52 += 1;\n            v47 = v37 + v30;\n            v48 = v37 * 4;\n            *((unsigned int *)(v9->field_10 + v37 * 4)) = v31;\n            if (v52 < v37 + v30)\n            {\n                v50 = v46 + v48 + 4;\n                v49 = v46 + v52 * 4;\n                do\n                {\n                    *(v50) = -1;\n                    v50 = &v50[1];\n                }\n                while (v49 != v50);\n                v52 = v47;\n            }\n        }\n    }\n    else if (v9->field_40 >= v9->field_58 || v30 != -2)\n    {\n        v33 = (unsigned long long)(char)*(&((char *)v60)[v9->field_28 + v9->field_0]);\n        if (v9->field_78 != 0)\n        {\n            v33 = (unsigned long long)v33[v9->field_78];\n        }\n        v35 = v52;\n        *((char **)&((char *)v52)[v9->field_8]) = v33;\n        if (v9->field_8c != 0)\n        {\n            *((void **)(v9->field_18 + v52 * 8)) = v60;\n        }\n        v60 += 1;\n        v52 += 1;\n        *((unsigned int *)(v9->field_10 + v35 * 4)) = (unsigned int)v33;\n        if (v30 == -1)\n        {\n            v9->field_20 = v5;\n        }\n    }\n    if ((v30 > -3 && (v9->field_40 >= v9->field_58 || v30 != -2) || v30 <= -3 && (v0 == v31 || v30 == v34 || v34 == -1) || v52 + v34 <= v9->field_40 && v30 <= -3 && v0 != v31 && v30 != v34 && v34 != -1 && (v9->field_18 != 0 || v41 != 0) || v8->field_8c != 0 || v8->field_78 != 0 || v8->field_8a != 0) && v52 < v59)\n    {\n        v0 = &v9->field_20;\n        v2 = v59 - v52;\n        v3 = stack_base + -132;\n    }\n    if ((v9->field_40 < v9->field_58 || v30 <= -3) && (v30 <= -3 || v30 == -2) && (v0 != v31 || v30 > -3) && (v30 != v34 || v30 > -3) && (v52 + v34 > v9->field_40 || v30 > -3) && (v30 > -3 || v34 != -1))\n    {\n        v9->field_20 = v5;\n    }\n    if ((v9->field_40 < v9->field_58 || v30 <= -3) && (v30 <= -3 || v30 == -2) && (v0 != v31 || v30 > -3) && (v30 != v34 || v30 > -3) && (v52 + v34 > v9->field_40 || v30 > -3) && (v30 > -3 || v34 != -1) || (v30 > -3 && (v9->field_40 >= v9->field_58 || v30 != -2) || v30 <= -3 && (v0 == v31 || v30 == v34 || v34 == -1) || v52 + v34 <= v9->field_40 && v30 <= -3 && v0 != v31 && v30 != v34 && v34 != -1 && (v9->field_18 != 0 || v41 != 0) || v8->field_8c != 0 || v8->field_78 != 0 || v8->field_8a != 0) && v52 >= v59)\n    {\n        v9->field_30 = v52;\n        v61 = 0;\n        v9->field_38 = v60;\n    }\n    return v61;\n}\n"
        },
        {
            "funcName": "sub_412290",
            "funcStartAddr": "0x412290",
            "funcEndAddr": "0x412410",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[200];\n    unsigned long long field_c8;\n    unsigned long long field_d0;\n    unsigned long long field_d8;\n    unsigned int field_e0;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[32];\n    char field_20;\n} struct_3;\n\ntypedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n    char padding_21[1];\n    unsigned short field_22;\n} struct_1;\n\nint sub_412290()\n{\n    unsigned long long v0;  // [bp-0x58]\n    void tmp_21;  // tmp #21\n    void tmp_24;  // tmp #24\n    unsigned long long v1;  // [bp-0x40]\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rdi\n    struct_2 *v8;  // rbx\n    struct_0 *v9;  // rdx\n    unsigned long long v10;  // r15\n    unsigned long v11;  // rdx\n    unsigned long long *v12;  // rsi\n    unsigned long long v13;  // rcx\n    void *v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    struct_3 *v20;  // r8\n    struct_1 *v21;  // rdi\n    unsigned int v22;  // edx\n    char v23;  // dl\n    unsigned int v25;  // r15d\n\n    v6 = v5;\n    v8 = v7;\n    v0 = 8;\n    v17 = sub_4112a0();\n    if ((unsigned int)v17 == 0)\n    {\n        v10 = v9->field_8;\n        v18 = v8->field_c8;\n        v11 = v8->field_d0;\n        v13 = *(v12);\n        v14 = v8->field_d8;\n        if (v8->field_c8 >= v8->field_d0)\n        {\n            v1 = *(v12);\n            v15 = realloc(v14, v11 * 80);\n            if (v15 != 0)\n            {\n                tmp_21 = v8->field_d0;\n                tmp_24 = v8->field_c8;\n                v1 = v1;\n                v8->field_d8 = v15;\n                memset(v15 + (tmp_24 + tmp_24 * 4) * 8, 0x0, (tmp_21 + tmp_21 * 4) * 8);\n                v8->field_d0 = v8->field_d0 * 2;\n                v18 = v8->field_c8;\n                v14 = v8->field_d8;\n                v13 = v1;\n            }\n            else\n            {\n                free(v8->field_d8);\n                v17 = 12;\n            }\n        }\n        if (v8->field_c8 < v8->field_d0 || v15 != 0)\n        {\n            v19 = v18 * 40;\n            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v20 = v14 + v19 - 40;\n                if (v6 == *((long long *)&((char *)v14)[v19 + -32]))\n                {\n                    v20->field_20 = 1;\n                }\n            }\n            v21 = v14 + v19;\n            v22 = 0;\n            v23 = v10 == v13;\n            v21->field_0 = v3;\n            v21->field_8 = v6;\n            *((unsigned long long *)&v21->field_22) = (unsigned int)(0 - rdx<4>);\n            v21->field_10 = v13;\n            v21->field_18 = v10;\n            v8->field_c8 = v18 + 1;\n            v21->field_20 = 0;\n            if ((int)v8->field_e0 < v10 - v13)\n            {\n                v25 = v10 - v13;\n                v8->field_e0 = v25;\n            }\n        }\n    }\n    if ((unsigned int)v17 != 0 || v15 == 0 && v8->field_c8 >= v8->field_d0)\n    {\n        return v17;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b3b0",
            "funcStartAddr": "0x40b3b0",
            "funcEndAddr": "0x40b4a2",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    struct struct_2 *field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_1;\n\nint sub_40b3b0()\n{\n    unsigned long long v1[18];  // rdi\n    unsigned long long v2[18];  // r14\n    struct_1 *v3;  // rsi\n    unsigned long v5;  // r15\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long *v10;  // r13\n    unsigned long long v11[3];  // rbx\n    unsigned long long *v12;  // rdx\n    unsigned long long *v13;  // rax\n    unsigned long v14;  // rsi\n    unsigned long long v15;  // r12\n    unsigned long v16;  // rsi\n\n    v2 = v1;\n    v5 = v3->field_10;\n    v3->field_0 = v6;\n    v3->field_28 = 0;\n    v3->field_20 = v5;\n    v7 = malloc(v5 * 8);\n    v3->field_30 = v7;\n    if (v7 != 0)\n    {\n        v9 = 0;\n        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) > *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))))\n        {\n            v10 = v6 & v2[17];\n            v11 = v2[8] + v10 * 24;\n            v12 = *((long long *)(v2[8] + v10 * 24));\n            v13 = *((long long *)(v2[8] + v10 * 24 + 16));\n            v14 = *((long long *)(v2[8] + v10 * 24)) + 1;\n            if (*((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) > *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))) || v13 != 0)\n            {\n                v11[0] = v14;\n                *((struct_1 **)((char *)v13 + 0x8 * v12)) = v3;\n                return 0;\n            }\n        }\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            do\n            {\n                if ((*((char *)((v3->field_18[v9] << 4) + *(v1) + 8)) & 8) == 0)\n                {\n                    v8 = sub_40b210();\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                }\n                v9 += 1;\n            }\n            while (v3->field_10 > v9);\n            if ((*((char *)((v3->field_18[v9] << 4) + *(v1) + 8)) & 8) != 0 || v8 != 0)\n            {\n                v10 = v6 & v2[17];\n                v11 = v2[8] + v10 * 24;\n                v12 = *((long long *)(v2[8] + v10 * 24));\n                v13 = *((long long *)(v2[8] + v10 * 24 + 16));\n                v14 = *((long long *)(v2[8] + v10 * 24)) + 1;\n            }\n            else if ((*((char *)((v3->field_18[v9] << 4) + *(v1) + 8)) & 8) == 0)\n            {\n                return 12;\n            }\n        }\n        else if (*((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) <= *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))))\n        {\n            v15 = v14 * 2;\n            v16 = v14 * 16;\n            v13 = realloc(*((long long *)(v1[8] + v10 * 24 + 16)), v16);\n            if (v13 != 0)\n            {\n                v12 = *(v11);\n                v11[2] = v13;\n                v11[1] = v15;\n                v14 = (char *)v12 + 1;\n            }\n        }\n    }\n    if (v7 == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) && *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) <= *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))) && v13 == 0 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) && *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) > *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))))\n    {\n        return 12;\n    }\n}\n"
        },
        {
            "funcName": "sub_416fb0",
            "funcStartAddr": "0x416fb0",
            "funcEndAddr": "0x4170e5",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_416fb0()\n{\n    unsigned long v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    char v3;  // [bp-0x40]\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rbp\n    unsigned int *v7;  // r9\n    unsigned int *v8;  // rbx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rsi\n    unsigned long v11;  // r8\n    unsigned long long|unsigned long v14;  // r14\n    unsigned long long v15;  // rax\n    unsigned long long v19;  // rax\n\n    v6 = v5;\n    v8 = v7;\n    v0 = v9;\n    v2 = *(v10);\n    v14 = (unsigned int)sub_415ac0();\n    if (*(v7) == 0 || v14 != 0)\n    {\n        while (true)\n        {\n            v15 = v6->field_8;\n            if ((v6->field_8 & 247) == 2)\n            {\n                break;\n            }\n            for (; v11 == 0 || v15 != 9; v14 = (v14 == 0? v1 : v14))\n            {\n                if (v1 == 0 && *(v8) != 0)\n                {\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                    sub_40ad30();\n                }\n                if (*(v8) == 0 || v1 != 0)\n                {\n                    if (v14 != 0 && v1 != 0)\n                    {\n                        v1 = (unsigned int)sub_415ac0();\n                        v3 = 16;\n                        if (v14 != 0)\n                        {\n                            v14 = sub_40d500();\n                            v15 = v6->field_8;\n                            if ((v6->field_8 & 247) == 2)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            sub_40ad30();\n                            sub_40ad30();\n                            v14 = 0;\n                            *(v8) = 12;\n                        }\n                    }\n                }\n            }\n            if (v1 == 0 && *(v8) != 0 && (v11 == 0 || v15 != 9))\n            {\n                v14 = 0;\n            }\n            else if (v15 == 9 || v14 != 0 && v1 != 0)\n            {\n                v19 = v14;\n                return v19;\n            }\n        }\n        if ((v6->field_8 & 247) != 2)\n        {\n            v14 = 0;\n        }\n        else\n        {\n            v19 = v14;\n            return v19;\n        }\n    }\n    v14 = 0;\n    v19 = v14;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_409360",
            "funcStartAddr": "0x409360",
            "funcEndAddr": "0x409388",
            "decompiledFuncCode": "int sub_409360()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409160();\n}\n"
        },
        {
            "funcName": "sub_418080",
            "funcStartAddr": "0x418080",
            "funcEndAddr": "0x418143",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[24];\n    struct struct_1 *field_20;\n    char padding_28[16];\n    char field_38;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[16];\n    char field_38;\n} struct_2;\n\nint sub_418080()\n{\n    void tmp_48;  // tmp #48\n    struct_0 *v1;  // rdi\n    unsigned long long v2[32];  // rbp\n    unsigned long long v4[13];  // r12\n    unsigned long long v5;  // rcx\n    unsigned long v6;  // d\n    unsigned long long *v7;  // rdi\n    unsigned long long v9;  // rax\n\n    v2 = v1->field_20;\n    v4 = v1->field_0;\n    tmp_48 = &v1->field_20->padding_8;\n    v1->field_20->field_0 = 0;\n    v2[31] = 0;\n    v7 = tmp_48 & -8;\n    for (v5 = (unsigned long long)((unsigned int)(unsigned long long [32])((char *)v2 + -1 * (tmp_48 & -8)) + 0x100) >> 3; v5 != 0; v7 = &v7[v6])\n    {\n        v5 -= 1;\n        *(v7) = 0;\n    }\n    sub_410b30();\n    v9 = v4[10];\n    if (v4[9] != v4[10])\n    {\n        sub_410b30();\n        v9 = v4[9];\n    }\n    if (v4[11] != v9)\n    {\n        sub_410b30();\n        v9 = v4[9];\n    }\n    if (v4[12] != v9)\n    {\n        sub_410b30();\n    }\n    v1->field_38 = v1->field_38 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ab10",
            "funcStartAddr": "0x40ab10",
            "funcEndAddr": "0x40ab26",
            "decompiledFuncCode": "int sub_40ab10()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40aa50();\n}\n"
        },
        {
            "funcName": "sub_41b1d0",
            "funcStartAddr": "0x41b1d0",
            "funcEndAddr": "0x41b380",
            "decompiledFuncCode": "extern unsigned int g_41e840[4];\n\nint sub_41b1d0()\n{\n    char v0;  // [bp-0x58]\n    unsigned long long v1;  // [bp-0x54]\n    char v2;  // [bp-0x4c]\n    char *v3;  // [bp-0x48]\n    unsigned long long|unsigned long v4;  // [bp-0x40]\n    char v5;  // [bp-0x38]\n    unsigned int v6;  // [bp-0x34]\n    char *v9;  // rdi\n    char *v10;  // rdx\n    unsigned int v11;  // eax\n    char v12;  // al\n    unsigned long long v13;  // rax\n    unsigned long long v16;  // rbx\n    char *v17;  // rdi\n    unsigned long long v18;  // rax\n\n    if ((unsigned long long)__ctype_get_mb_cur_max() <= 1)\n    {\n        v16 = strlen(v17);\n    }\n    else\n    {\n        v3 = v9;\n        v16 = 0;\n        v0 = 0;\n        v1 = 0;\n        v2 = 0;\n        while (true)\n        {\n            if (v0 == 0)\n            {\n                v10 = v3;\n                v11 = *(v3);\n                v12 = (unsigned long long)*(v3) >> 5;\n                if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0)\n                {\n                    v4 = 1;\n                    v5 = 1;\n                    v6 = *(v10);\n                }\n                else\n                {\n                    v13 = mbsinit((unsigned int)&v1);\n                    if (v13 != 0)\n                    {\n                        v0 = 1;\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n            }\n            if (v0 != 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) == 0 && v13 != 0)\n            {\n                __ctype_get_mb_cur_max();\n                sub_4085c0();\n                v4 = (unsigned int)sub_40ab50();\n            }\n            if (v0 != 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) == 0 && v13 != 0)\n            {\n                if (v4 == -1)\n                {\n                    v4 = 1;\n                    v5 = 0;\n                }\n                else if (v4 != -2)\n                {\n                    if (v4 == 0)\n                    {\n                        if (*(v3) != 0)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                        else if (v6 != 0)\n                        {\n                            __assert_fail(); /* do not return */\n                        }\n                    }\n                    if ((*(v3) == 0 || v4 != 0) && (v6 == 0 || v4 != 0))\n                    {\n                        v5 = 1;\n                        if (mbsinit((unsigned int)&v1) != 0)\n                        {\n                            v0 = 0;\n                        }\n                    }\n                }\n                if (v4 == -2)\n                {\n                    v5 = 0;\n                    v4 = strlen(v3);\n                }\n                if (v4 == 0)\n                {\n                    v4 = 1;\n                }\n            }\n            if (v6 == 0 && (v0 == 0 || v4 != -2) && (v0 == 0 || v4 != -1) && (v4 != -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v4 != -1) && (*(v3) == 0 || v0 == 0 || v4 != 0) && (*(v3) == 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v4 != 0) && (v13 != 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v3) & 31)) & 1) != 0 || v0 != 0))\n            {\n                break;\n            }\n            if (...)\n            {\n                v3 = &v3[v4];\n                v16 = 1;\n                v2 = 0;\n            }\n        }\n    }\n    v18 = v16;\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_407d00",
            "funcStartAddr": "0x407d00",
            "funcEndAddr": "0x407d33",
            "decompiledFuncCode": "extern int512_t g_623c40;\n\nint sub_407d00()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_623c40 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_623c40 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_419310",
            "funcStartAddr": "0x419310",
            "funcEndAddr": "0x419c8d",
            "decompiledFuncCode": "int sub_419310() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4091c0",
            "funcStartAddr": "0x4091c0",
            "funcEndAddr": "0x4091f0",
            "decompiledFuncCode": "int sub_4091c0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4093b0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_418960",
            "funcStartAddr": "0x418960",
            "funcEndAddr": "0x418978",
            "decompiledFuncCode": "int sub_418960()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r8\n\n    v1 = 1;\n    v0 = v3;\n    return sub_418150();\n}\n"
        },
        {
            "funcName": "sub_40c1d0",
            "funcStartAddr": "0x40c1d0",
            "funcEndAddr": "0x40c43e",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_4;\n\ntypedef struct struct_5 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_5;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\ntypedef struct struct_6 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_a;\n} struct_6;\n\nint sub_40c1d0()\n{\n    unsigned long long *v0;  // [bp-0x48]\n    unsigned long v1;  // [bp-0x40]\n    unsigned long long v3;  // rsi\n    unsigned long long *v4;  // r9\n    unsigned long long v5;  // rdx\n    unsigned long v6;  // r8\n    unsigned long long v7;  // rdi\n    unsigned long long v8[6];  // rbx\n    unsigned long v9;  // rcx\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // rdi\n    unsigned long long *v12;  // r14\n    struct_4 *v13;  // rax\n    unsigned long long *v14;  // r14\n    struct_5 *v15;  // r8\n    unsigned long long v16;  // rsi\n    unsigned long long *v17;  // r15\n    unsigned long long *v18;  // r9\n    struct_1 *v20;  // rdi\n    unsigned long long *v21;  // r15\n    unsigned long long|unsigned long long * v22;  // r13\n    unsigned long long v24;  // rsi\n    struct_6 *v25;  // rax\n    unsigned int|unsigned long v26;  // r12d\n    unsigned long long v27;  // rdx\n    unsigned long long *v28;  // r8\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // r13\n    unsigned long long v34;  // rax\n    unsigned long long v36;  // rdx\n    unsigned long long v37;  // rax\n\n    v4 = v3;\n    v22 = v5;\n    v26 = v6;\n    v8 = v7;\n    v1 = v9;\n    while (true)\n    {\n        v10 = *(v8);\n        v11 = v8[5];\n        v12 = v22;\n        v13 = v4 * 16 + *(v8);\n        if (*((char *)((v4 << 4) + *(v8) + 8)) != 4)\n        {\n            v14 = v4 * 24;\n            v15 = v11 + v4 * 24;\n            v16 = *((long long *)(v11 + v4 * 24 + 8));\n            if (*((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0)\n            {\n                v20 = v11 + v22 * 24;\n                v21 = *((long long *)v15->field_10);\n                v20->field_8 = 0;\n                if (v16 != 1)\n                {\n                    v24 = v8[2] - 1;\n                    v25 = (v8[2] - 1) * 16 + v10;\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0)\n                    {\n                        v27 = v8[2] * 16;\n                        v28 = v8[4];\n                        v29 = &((struct struct_6 *)&(struct struct_6 *)(v10 + -0x1 * v25)->padding_0[v27])[-3].padding_0[7];\n                        while (true)\n                        {\n                            if (v28[v24] == v4 && (unsigned int)v26 == ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023))\n                            {\n                                v32 = sub_40b280();\n                                break;\n                            }\n                            if (v28[v24] != v4 || (unsigned int)v26 != ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023))\n                            {\n                                v25 = &v25->padding_0[v29];\n                                v24 -= 1;\n                                v30 = (char)(*(&((char *)&v25->field_8)[2]) & 4);\n                                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (char)v30 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if (v28[v24] == v4 && (unsigned int)v26 == ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023))\n                        {\n                            v0 = *((long long *)(*((long long *)&((char *)v14)[16 + v8[5]]) + 8));\n                            v22 = (unsigned int)sub_40c130();\n                        }\n                        else if (v28[v24] != v4 || (unsigned int)v26 != ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023))\n                        {\n                            v33 = (unsigned int)sub_40c130();\n                        }\n                        else if (v28[v24] == v4 && (unsigned int)v26 == ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023))\n                        {\n                            v37 = 12;\n                        }\n                    }\n                    if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) == 0 || v22 != -1)\n                    {\n                        v33 = (unsigned int)sub_40c130();\n                        if (v33 != -1)\n                        {\n                            v34 = sub_40b280();\n                            if (v34 != 0)\n                            {\n                                v37 = sub_40c1d0();\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    if (v4 == v1 && v4 != v22)\n                    {\n                        v36 = (unsigned int)sub_40b280();\n                        v37 = 0;\n                        if (v36 != 0)\n                        {\n                            break;\n                        }\n                    }\n                    if (v4 == v22 || v4 != v1)\n                    {\n                        v26 |= (unsigned int)((unsigned long long)v13->field_8 >> 8) & 1023;\n                        v22 = (unsigned long long)(unsigned int)sub_40c130();\n                        if (v22 != -1)\n                        {\n                            v31 = sub_40b280();\n                            if (v31 != 0)\n                            {\n                                v4 = v21;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                *((long long *)(v8[3] + v22 * 8)) = *((long long *)(v8[3] + v4 * 8));\n                v37 = 0;\n            }\n        }\n        else\n        {\n            v17 = v4 * 8;\n            v18 = *((long long *)(v8[3] + v4 * 8));\n            *((long long *)(v11 + v22 * 24 + 8)) = 0;\n            v0 = v18;\n            v22 = (unsigned int)sub_40c130();\n            if (v22 != -1)\n            {\n                v0 = v0;\n                *((long long *)(v8[3] + v12 * 8)) = *((long long *)&((char *)v17)[v8[3]]);\n            }\n        }\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((char *)((v4 << 4) + *(v8) + 8)) != 4 && *((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0 && v16 != 1 && (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0 && v22 != -1 || v34 != 0 && *((char *)((v4 << 4) + *(v8) + 8)) != 4 && *((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0 && v16 != 1 && v33 != -1 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) == 0 || v22 != -1) && (unsigned int)v37 == 0)\n        {\n            v0 = *((long long *)(*((long long *)&((char *)v14)[16 + v8[5]]) + 8));\n            v22 = (unsigned int)sub_40c130();\n        }\n        if ((!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((char *)((v4 << 4) + *(v8) + 8)) != 4 && *((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0 && v16 != 1 && (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0 && v22 != -1 || v34 != 0 && *((char *)((v4 << 4) + *(v8) + 8)) != 4 && *((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0 && v16 != 1 && v33 != -1 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) == 0 || v22 != -1) && (unsigned int)v37 == 0) && v22 != -1 || *((char *)((v4 << 4) + *(v8) + 8)) == 4 && v22 != -1)\n        {\n            v4 = v0;\n        }\n        if (...)\n        {\n            v37 = 12;\n        }\n    }\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_4085b0",
            "funcStartAddr": "0x4085b0",
            "funcEndAddr": "0x4085ba",
            "decompiledFuncCode": "int sub_4085b0()\n{\n}\n"
        },
        {
            "funcName": "sub_4170f0",
            "funcStartAddr": "0x4170f0",
            "funcEndAddr": "0x417239",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[168];\n    unsigned long long field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    char field_8;\n} struct_1;\n\nint sub_4170f0()\n{\n    unsigned long v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long long *v2;  // [bp-0x50]\n    char v3;  // [bp-0x40]\n    unsigned long long v5;  // rdi\n    struct struct_0 **v7;  // rsi\n    struct_0 *v8;  // rbx\n    unsigned int *v9;  // r9\n    struct_1 *v10;  // rdx\n    unsigned long v11;  // r8\n    unsigned long long v12;  // rcx\n    unsigned long long v13;  // r15\n    unsigned long long v15;  // rax\n\n    v8 = *(v7);\n    v2 = v7;\n    v1 = *(v7)->field_a8;\n    if (*(v9) == 0 || v13 != 0)\n    {\n        for (v13 = (unsigned int)sub_416fb0(); v10->field_8 == 10; *(v9) = 12)\n        {\n            *((unsigned long long *)(v5 + 72)) = *((long long *)(v5 + 72)) + (unsigned long long)(unsigned int)sub_415350();\n            if ((v10->field_8 & 247) != 2 && (v11 == 0 || v10->field_8 != 9))\n            {\n                v0 = v8->field_a8;\n                v8->field_a8 = v1;\n                v12 = (unsigned int)sub_416fb0();\n                if (v12 == 0 && *(v9) != 0)\n                {\n                    if (v13 == 0)\n                    {\n                        break;\n                    }\n                    sub_40ad30();\n                }\n                if (*(v9) == 0 || v12 != 0)\n                {\n                    v8->field_a8 = v8->field_a8 | v0;\n                }\n            }\n            if (*(v9) == 0 || (v10->field_8 & 247) == 2 || v12 != 0 || v10->field_8 == 9 && v11 != 0)\n            {\n                v3 = 10;\n                v13 = (unsigned int)sub_40d500();\n            }\n        }\n        if (v12 == 0 && *(v9) != 0 && (v10->field_8 & 247) != 2 && (v11 == 0 || v10->field_8 != 9))\n        {\n            v13 = 0;\n        }\n        else\n        {\n            v15 = v13;\n            return v15;\n        }\n    }\n    v13 = 0;\n    v15 = v13;\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_4067d0",
            "funcStartAddr": "0x4067d0",
            "funcEndAddr": "0x4068af",
            "decompiledFuncCode": "extern int512_t g_41c563;\nextern int512_t g_41c567;\n\nint sub_4067d0()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_418b40();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41c563 : 4310382);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41c567 : 4310378);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_412430",
            "funcStartAddr": "0x412430",
            "funcEndAddr": "0x412c5b",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[32];\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    char padding_60[56];\n    struct struct_1 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[8];\n    unsigned long long field_c8;\n    char padding_d0[8];\n    unsigned long long field_d8;\n    char padding_e0[8];\n    unsigned long long field_e8;\n    char padding_f0[8];\n    unsigned long long field_f8;\n} struct_4;\n\ntypedef struct struct_6 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_6;\n\ntypedef struct struct_7 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_2 **field_28;\n} struct_7;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\ntypedef struct struct_5 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_5;\n\nint sub_412430()\n{\n    unsigned long long v0;  // [bp-0xf8]\n    void tmp_15;  // tmp #15\n    unsigned long long v1;  // [bp-0xe0]\n    unsigned long long|unsigned long v2;  // [bp-0xd8]\n    unsigned long long|unsigned long v3;  // [bp-0xd0]\n    unsigned long long|struct_2 *|char *|unsigned long v4;  // [bp-0xc8]\n    unsigned long long *|unsigned int|unsigned long v5;  // [bp-0xc0]\n    unsigned long long *|unsigned long|struct_2 * v6;  // [bp-0xb8]\n    unsigned long long v7[7];  // [bp-0xb0]\n    unsigned long long|unsigned long long *|unsigned long v8;  // [bp-0xa8]\n    unsigned long long *v9;  // [bp-0xa0]\n    unsigned long long *v10;  // [bp-0x98]\n    struct struct_5 **v11;  // [bp-0x90]\n    unsigned long v12;  // [bp-0x88]\n    unsigned long long *v13;  // [bp-0x80]\n    unsigned long long v14;  // [bp-0x78]\n    unsigned long long v15;  // [bp-0x70]\n    unsigned int v16;  // [bp-0x5c]\n    char v17;  // [bp-0x48]\n    unsigned long long v19[32];  // rdi\n    struct_4 *v20;  // r14\n    unsigned long long v21;  // r15\n    unsigned long long *v22;  // rsi\n    unsigned long v23;  // rdx\n    unsigned long long v24;  // r13\n    unsigned long long *v25;  // rbp\n    struct_6 *v26;  // rax\n    unsigned long v28;  // rbx\n    unsigned int v30;  // ecx\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // rdx\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // rdi\n    unsigned long long *v40;  // rax\n    struct_7 *v41;  // rbx\n    unsigned long long *v42;  // rcx\n    struct_2 *v43;  // r9\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rbp\n    unsigned long long v47;  // r8\n    unsigned long long v48;  // r12\n    unsigned long long v49;  // r10\n    unsigned long long|unsigned long long * v50;  // r12\n    unsigned long long *v51;  // r13\n    unsigned long long v52;  // r15\n    unsigned long long|char * v53;  // r15\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rax\n    unsigned long long v56[4];  // rax\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rdi\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // rsi\n    unsigned long long v61;  // rbp\n    unsigned long long *v62;  // rax\n    unsigned long long v64;  // rsi\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rax\n    unsigned long long v67[2];  // rax\n    unsigned long long *v69;  // rdx\n    unsigned long long v70;  // r15\n    unsigned long long v71;  // r13\n    unsigned long long v72[7];  // r12\n    unsigned long long v73[32];  // rax\n    unsigned long long v74[28];  // r14\n    unsigned long long v76[4];  // rax\n    unsigned long long v77;  // rbp\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // rdx\n    unsigned long long *v80;  // rbp\n    unsigned long long v82;  // r11\n    struct_5 *v83;  // rax\n    struct struct_5 **v84;  // rdx\n\n    v20 = v19;\n    v21 = v19[9];\n    v10 = v22;\n    v9 = v23;\n    *((unsigned long long [32])&v7[0]) = v19[19];\n    *((unsigned long long [32])&v11) = v19[9] * 8;\n    v1 = 0;\n    if (*(v22) > 0)\n    {\n        while (true)\n        {\n            v24 = *((long long *)(*(v9) + v1 * 8));\n            v25 = *((long long *)(*(v9) + v1 * 8)) * 16;\n            v26 = *(v7) + *((long long *)(*(v9) + v1 * 8)) * 16;\n            if (*((char *)(*(v7) + (*((long long *)(*(v9) + (v1 << 3))) << 4) + 8)) == 4)\n            {\n                if ((v26->field_8 & 0x3ff00) != 0)\n                {\n                    v28 = (unsigned long long)v26->field_8 % 0x100;\n                    v30 = rbx<8>;\n                }\n                if ((v26->field_8 & 0x3ff00) == 0 || (sub_40e5c0() & 1) == 0 && (bl<1> & 4) == 0 && ((char)rcx<4> & 128) == 0 && ((unsigned short)rbx<8> & 1023 & 32) == 0 || ((char)rbx<8> & 8) == 0 && ((char)rcx<4> & 128) == 0 && ((unsigned short)rbx<8> & 1023 & 32) == 0 && (sub_40e5c0() & 1) != 0 || (sub_40e5c0() & 1) == 0 && (bl<1> & 4) == 0 && ((char)rcx<4> & 128) == 0 && (sub_40e5c0() & 2) != 0 || (sub_40e5c0() & 1) == 0 && (bl<1> & 4) == 0 && ((unsigned short)rbx<8> & 1023 & 32) == 0 && (sub_40e5c0() & 8) != 0 || ((char)rbx<8> & 8) == 0 && ((char)rcx<4> & 128) == 0 && (sub_40e5c0() & 1) != 0 && (sub_40e5c0() & 2) != 0 || ((char)rbx<8> & 8) == 0 && ((unsigned short)rbx<8> & 1023 & 32) == 0 && (sub_40e5c0() & 1) != 0 && (sub_40e5c0() & 8) != 0 || (sub_40e5c0() & 1) == 0 && (bl<1> & 4) == 0 && (sub_40e5c0() & 8) != 0 && (sub_40e5c0() & 2) != 0 || ((char)rbx<8> & 8) == 0 && (sub_40e5c0() & 1) != 0 && (sub_40e5c0() & 8) != 0 && (sub_40e5c0() & 2) != 0)\n                {\n                    v33 = v20->field_c8;\n                    v34 = 0;\n                    for (v35 = v20->field_c8; v34 < v35; v35 = v37)\n                    {\n                        v36 = v20->field_d8;\n                        if (v3 > *((long long *)(v20->field_d8 + (((v34 + v35 >> 63) + v34 + v35 >> 1) + ((v34 + v35 >> 63) + v34 + v35 >> 1 << 2) << 3) + 8)))\n                        {\n                            v39 = v37;\n                            v37 = v35;\n                        }\n                        else\n                        {\n                            for (v37 = (v34 + v35 >> 63) + v34 + v35 >> 1; v37 > 0; v37 = v38)\n                            {\n                                v38 = (v37 + 0 >> 63) + v37 + 0 >> 1;\n                                v39 = (v37 + 0 >> 63) + v37 + 0 >> 1;\n                                if (v3 > *((long long *)(v36 + (((v37 + 0 >> 63) + v37 + 0 >> 1) + ((v37 + 0 >> 63) + v37 + 0 >> 1 << 2) << 3) + 8)))\n                                {\n                                    break;\n                                }\n                            }\n                            if (v37 > 0)\n                            {\n                                v34 = v39 + 1;\n                            }\n                        }\n                        v34 = v39 + 1;\n                    }\n                    v40 = v20->field_d8 + v34 * 40;\n                    if (*((long long *)(v20->field_d8 + (v34 + (v34 << 2) << 3) + 8)) == v3 && v34 != -1)\n                    {\n                        while (v8 != *(v40))\n                        {\n                            v40 = &v40[5];\n                            if ((char)v40[-1] == 0)\n                            {\n                                break;\n                            }\n                        }\n                        if (true)\n                        {\n                            v16 = 0;\n                        }\n                        else if (v8 != *(v40))\n                        {\n                            v69 = *(v20->field_98);\n                            v13 = &v20->field_98->field_0;\n                            v12 = *((long long *)&((char *)v25)[*(v20->field_98)]);\n                        }\n                    }\n                    v69 = *(v20->field_98);\n                    v13 = &v20->field_98->field_0;\n                    v12 = *((long long *)&((char *)v25)[*(v20->field_98)]);\n                    if (v20->field_e8 <= 0 || *((long long *)(v20->field_d8 + (v34 + (v34 << 2) << 3) + 8)) == v3 && v34 != -1)\n                    {\n                        v16 = 0;\n                    }\n                    if (v20->field_e8 > 0)\n                    {\n                        v3 = v21;\n                        v2 = 0;\n                        v4 = v20->field_8;\n                        v8 = v24;\n                        v14 = v33;\n                        while (true)\n                        {\n                            v41 = *((long long *)(v20->field_f8 + v2 * 8));\n                            if (v12 == v69[2 * *((long long *)(*((long long *)(v20->field_f8 + (v2 << 3))) + 8))])\n                            {\n                                v50 = v41->field_0;\n                                v49 = v3;\n                                if (v41->field_20 > 0)\n                                {\n                                    v42 = v50;\n                                    v46 = 0;\n                                    v48 = v4;\n                                    v47 = v3;\n                                    while (true)\n                                    {\n                                        v43 = v41->field_28[v46];\n                                        v51 = v41->field_28[v46]->field_8;\n                                        v44 = v41->field_28[v46]->field_8 + -0x1 * v42;\n                                        v52 = (char *)(v41->field_28[v46]->field_8 + -0x1 * v42) + v47;\n                                        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                        {\n                                            if (v20->field_30 < v52)\n                                            {\n                                                v5 = v44;\n                                                v4 = v43;\n                                                if (v20->field_58 >= v52)\n                                                {\n                                                    v15 = v47;\n                                                    v6 = v42;\n                                                    v54 = sub_40be60();\n                                                    if ((unsigned int)v54 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v48 = v20->field_8;\n                                                    v44 = v5;\n                                                    v43 = v4;\n                                                    v47 = v15;\n                                                    v42 = v6;\n                                                }\n                                            }\n                                            if (v20->field_58 >= v52 || v20->field_30 >= v52)\n                                            {\n                                                v6 = v43;\n                                                v5 = v42;\n                                                v4 = v47;\n                                                v45 = memcmp(v48 + v47, v48 + (char *)v42, v44);\n                                                v47 = v4;\n                                                v42 = v5;\n                                            }\n                                            if ((v20->field_58 < v52 || v45 != 0) && (v20->field_30 < v52 || v45 != 0))\n                                            {\n                                                v4 = v48;\n                                                v49 = v47;\n                                                v50 = v42;\n                                                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v41->field_20 > v46)\n                                                {\n                                                    break;\n                                                }\n                                                v51 = v42;\n                                                v52 = v47;\n                                            }\n                                        }\n                                        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v45 == 0 && v20->field_58 >= v52 || v45 == 0 && v20->field_30 >= v52)\n                                        {\n                                            v54 = sub_412290();\n                                            v48 = v20->field_8;\n                                        }\n                                        if ((v45 == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) && (unsigned int)v54 <= 1 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v20->field_58 >= v52 || v20->field_30 >= v52))\n                                        {\n                                            v46 += 1;\n                                            v42 = v51;\n                                            v47 = v52;\n                                            v4 = v48;\n                                        }\n                                        if ((unsigned int)v54 <= 1)\n                                        {\n                                            v50 = (char *)v51 + 1;\n                                            v49 = v52;\n                                        }\n                                    }\n                                    if ((v20->field_58 < v52 || v45 != 0) && (v20->field_30 < v52 || v45 != 0) && (v45 != 0 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))) && (v20->field_58 < v52 || (unsigned int)v54 == 0 || v20->field_30 >= v52) && ((unsigned int)v54 == 0 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) || v20->field_30 >= v52))\n                                    {\n                                        v2 += 1;\n                                    }\n                                    else if ((v20->field_30 < v52 || (unsigned int)v54 > 1) && (v45 == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v20->field_30 < v52) && (v20->field_58 >= v52 || (unsigned int)v54 > 1) && (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) || (unsigned int)v54 > 1) && (v45 == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v20->field_58 >= v52) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || (unsigned int)v54 == 0 || v20->field_58 >= v52 || v20->field_30 >= v52))\n                                    {\n                                        return v54;\n                                    }\n                                }\n                                if (v3 >= v50)\n                                {\n                                    v53 = v49;\n                                    while (true)\n                                    {\n                                        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                        {\n                                            if (v20->field_30 <= v53)\n                                            {\n                                                if (v20->field_58 <= v53)\n                                                {\n                                                    break;\n                                                }\n                                                v54 = sub_40bd10();\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                v4 = v20->field_8;\n                                            }\n                                            v55 = &v53[1];\n                                            if (*((char *)(v4 + v53)) != *((char *)(v4 + v50 - 1)))\n                                            {\n                                                break;\n                                            }\n                                            v53 = v55;\n                                        }\n                                        v56 = *((long long *)(v20->field_b8 + v50 * 8));\n                                        if (*((long long *)(v20->field_b8 + (v50 << 3))) != 0)\n                                        {\n                                            v57 = v56[2];\n                                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v58 = v56[3];\n                                                v59 = 0;\n                                                v60 = *(v13);\n                                                while (true)\n                                                {\n                                                    v61 = *((long long *)(v58 + v59 * 8));\n                                                    v62 = *((long long *)(v58 + v59 * 8)) * 16 + v60;\n                                                    if (*((char *)((*((long long *)(v58 + (v59 << 3))) << 4) + v60 + 8)) == 9 && v12 == *(v62))\n                                                    {\n                                                        if (v61 == -1)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (v41->field_10 == 0)\n                                                        {\n                                                            v5 = v41->field_0;\n                                                            v64 = calloc(0x18, v50 - v5 + 1);\n                                                            v41->field_10 = v64;\n                                                        }\n                                                        if (v41->field_10 != 0 || v64 != 0)\n                                                        {\n                                                            v0 = 9;\n                                                            v54 = sub_4112a0();\n                                                            if ((unsigned int)v54 == 1)\n                                                            {\n                                                                break;\n                                                            }\n                                                            if ((unsigned int)v54 != 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                            if ((unsigned int)v54 == 0)\n                                                            {\n                                                                v65 = v41->field_18;\n                                                                if (v41->field_20 == v41->field_18)\n                                                                {\n                                                                    v5 = v65 * 2 + 1;\n                                                                    v66 = realloc(v41->field_28, (v65 * 2 + 1) * 8);\n                                                                    if (v66 != 0)\n                                                                    {\n                                                                        v41->field_28 = v66;\n                                                                        v41->field_18 = v5;\n                                                                    }\n                                                                }\n                                                                if (v66 != 0 || v41->field_20 != v41->field_18)\n                                                                {\n                                                                    v67 = calloc(0x1, 0x28);\n                                                                    if (v67 != 0)\n                                                                    {\n                                                                        tmp_15 = v41->field_20;\n                                                                        v41->field_28[v41->field_20] = &v67;\n                                                                        v67[0] = v61;\n                                                                        v67[1] = v50;\n                                                                        v41->field_20 = tmp_15 + 1;\n                                                                        sub_412290();\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                        if ((v41->field_10 == 0 || (unsigned int)v54 == 0) && (v64 == 0 || (unsigned int)v54 == 0) && (v66 == 0 || v67 == 0 || v41->field_10 == 0) && (v66 == 0 || v67 == 0 || v64 == 0) && (v67 == 0 || v41->field_20 == v41->field_18 || v41->field_10 == 0) && (v67 == 0 || v41->field_20 == v41->field_18 || v64 == 0))\n                                                        {\n                                                            v54 = 12;\n                                                        }\n                                                    }\n                                                    if (*((char *)((*((long long *)(v58 + (v59 << 3))) << 4) + v60 + 8)) != 9 || v12 != *(v62))\n                                                    {\n                                                        v59 += 1;\n                                                        if (v57 == v59)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                                if (...)\n                                                {\n                                                    v50 = &((char *)v50)[1];\n                                                }\n                                                else if (...)\n                                                {\n                                                    return v54;\n                                                }\n                                            }\n                                        }\n                                        v50 = &((char *)v50)[1];\n                                    }\n                                    if (...)\n                                    {\n                                        v2 += 1;\n                                    }\n                                    else if ((*((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1)) || v20->field_30 <= v53) && (v20->field_30 <= v53 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))) && (v20->field_30 <= v53 || *((long long *)(v20->field_b8 + (v50 << 3))) != 0) && (v20->field_58 > v53 || v20->field_30 > v53))\n                                    {\n                                        return v54;\n                                    }\n                                }\n                            }\n                            v2 += 1;\n                            if (v2 < v20->field_e8)\n                            {\n                                v69 = *(v13);\n                            }\n                            else\n                            {\n                                v70 = v3;\n                                v71 = v8;\n                                v16 = 0;\n                                if (v14 >= v20->field_c8)\n                                {\n                                    break;\n                                }\n                                v72 = v7;\n                                v8 *= 8;\n                                v12 = v71 * 24;\n                                v73 = v20;\n                                v74 = v14;\n                                while (true)\n                                {\n                                    v76 = v74[27] + v74 * 40;\n                                    if (v70 == v76[1] && v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))))\n                                    {\n                                        v77 = v76[3];\n                                        v78 = v76[2];\n                                        v79 = v7[6];\n                                        v4 = v77 - v78;\n                                        if (v77 == v78)\n                                        {\n                                            v3 = v79 + *((long long *)*((long long *)(v72[5] + v12 + 16))) * 24;\n                                        }\n                                        else\n                                        {\n                                            v3 = v79 + *((long long *)&((char *)v8)[v72[3]]) * 24;\n                                        }\n                                        v80 = v77 + v70 - v78;\n                                        v2 = 0;\n                                        v82 = v74[23] + v80 * 8;\n                                        v83 = *((long long *)&((char *)v11)[v74[23]]);\n                                        v84 = *((long long *)(v74[23] + v80 * 8));\n                                        if (*((long long *)&((char *)v11)[v74[23]]) != 0)\n                                        {\n                                            v2 = v83->field_10;\n                                        }\n                                        if (v84 != 0)\n                                        {\n                                            v5 = sub_40e5c0();\n                                            v6 = v49;\n                                            v16 = sub_40d9b0();\n                                            if (v16 == 0)\n                                            {\n                                                *((unsigned long long [28])&v5) = v6 + v74[23];\n                                                *(v5) = (unsigned int)sub_40db40();\n                                                free(*((long long *)&v17));\n                                                v84 = v74[23];\n                                            }\n                                            else\n                                            {\n                                                free(*((long long *)&v17));\n                                                v54 = v16;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v5 = v82;\n                                            *(v5) = (unsigned int)sub_40db40();\n                                        }\n                                        if (v16 == 0 || v84 == 0)\n                                        {\n                                            if ((*((long long *)(v74[23] + (v80 << 3))) == 0 || v84 == 0) && (*((long long *)((char *)v84 + 0x8 * v80)) == 0 || v84 != 0))\n                                            {\n                                                v54 = v16;\n                                                if (v16 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            if (v4 == 0 && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0))\n                                            {\n                                                v2 = v3 + 16;\n                                                v54 = sub_40e470();\n                                                v16 = v54;\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                v54 = sub_412430();\n                                                v16 = v54;\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                v74 = (char *)&v74[0] + 1;\n                                            }\n                                        }\n                                    }\n                                    if (v4 == 0 && v70 == v76[1] && v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && *((long long *)(*((long long *)(v84 + v11)) + 16)) <= v2 || v70 == v76[1] && v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v4 != 0 || v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && v70 != v76[1] || v71 != *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))))\n                                    {\n                                        v74 = (char *)&v74[0] + 1;\n                                    }\n                                    if (v4 == 0 && v70 == v76[1] && v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && v74 >= v74[25] || (v4 == 0 && v70 == v76[1] && v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && *((long long *)(*((long long *)(v84 + v11)) + 16)) <= v2 || v70 == v76[1] && v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v4 != 0 || v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && v70 != v76[1] || v71 != *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3)))) && v74 >= v74[25])\n                                    {\n                                        v74 = v73;\n                                    }\n                                }\n                                if ((v71 != *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) || v70 == v76[1] && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v4 != 0 || v4 == 0 && v70 == v76[1] && *((long long *)(*((long long *)(v84 + v11)) + 16)) <= v2 && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) || v71 == *((long long *)(v74[27] + ((char *)v74 + 0x4 * v74 << 3))) && v70 != v76[1]) && v74 >= v74[25] || v4 == 0 && v70 == v76[1] && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && (unsigned int)v54 == 0 && (unsigned int)v54 == 0 && v74 >= v74[25])\n                                {\n                                    v1 += 1;\n                                }\n                                else if (v70 == v76[1] && v16 != 0 && v84 != 0 || v4 == 0 && v70 == v76[1] && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) || v70 == v76[1] && (v16 == 0 || v84 == 0) && (*((long long *)(v74[23] + (v80 << 3))) == 0 || v84 == 0) && (*((long long *)((char *)v84 + 0x8 * v80)) == 0 || v84 != 0) || v4 == 0 && v70 == v76[1] && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || v84 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && (unsigned int)v54 == 0)\n                                {\n                                    return v54;\n                                }\n                            }\n                        }\n                        if (v2 >= v20->field_e8)\n                        {\n                            v1 += 1;\n                        }\n                        else if (v41->field_20 > 0 || v3 >= v50 || v14 < v20->field_c8 && v2 >= v20->field_e8)\n                        {\n                            return v54;\n                        }\n                    }\n                }\n            }\n            v1 += 1;\n        }\n        if (true)\n        {\n            v54 = 0;\n        }\n        else\n        {\n            return v54;\n        }\n    }\n    v54 = 0;\n    return v54;\n}\n"
        },
        {
            "funcName": "sub_419cf0",
            "funcStartAddr": "0x419cf0",
            "funcEndAddr": "0x41ab39",
            "decompiledFuncCode": "extern unsigned int g_41e840[4];\n\nint sub_419cf0()\n{\n    unsigned long long|char [2]|char * v0;  // [bp-0x188]\n    unsigned long long v1;  // [bp-0x180]\n    char v2;  // [bp-0x178]\n    unsigned long long v3;  // [bp-0x174]\n    char v4;  // [bp-0x16c]\n    char *v5;  // [bp-0x168]\n    unsigned long long|unsigned long v6;  // [bp-0x160]\n    char v7;  // [bp-0x158]\n    unsigned int v8;  // [bp-0x154]\n    char v9;  // [bp-0x138]\n    unsigned long long v10;  // [bp-0x134]\n    char v11;  // [bp-0x12c]\n    char *v12;  // [bp-0x128]\n    unsigned long long|unsigned long v13;  // [bp-0x120]\n    char v14;  // [bp-0x118]\n    unsigned int v15;  // [bp-0x114]\n    char v16;  // [bp-0xf8]\n    unsigned long v17;  // [bp-0xf4]\n    char v18;  // [bp-0xec]\n    char *v19;  // [bp-0xe8]\n    unsigned long long|unsigned long v20;  // [bp-0xe0]\n    char v21;  // [bp-0xd8]\n    unsigned int v22;  // [bp-0xd4]\n    void v23;  // [bp-0xc8]\n    uint128_t|char|void v24;  // [bp-0xb8]\n    char v25;  // [bp-0xac]\n    uint128_t|char *|unsigned long v26;  // [bp-0xa8]\n    unsigned long long|unsigned long|void v27;  // [bp-0xa0]\n    uint128_t|char|void v28;  // [bp-0x98]\n    unsigned int v29;  // [bp-0x94]\n    void v30;  // [bp-0x88]\n    char v31;  // [bp-0x78]\n    unsigned long long v32;  // [bp-0x74]\n    char v33;  // [bp-0x6c]\n    char *v34;  // [bp-0x68]\n    unsigned long long|unsigned long v35;  // [bp-0x60]\n    char v36;  // [bp-0x58]\n    unsigned int v37;  // [bp-0x54]\n    void *v39;  // rdi\n    unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    char *v42;  // r9\n    unsigned long long v43;  // r15\n    unsigned int v45;  // eax\n    char v46;  // al\n    unsigned long long v48;  // rax\n    char *v49;  // rsi\n    unsigned long long|char [2] v50;  // r9\n    unsigned long long v51;  // r12\n    unsigned long long v52;  // rdx\n    unsigned long long v53;  // r8\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rbx\n    unsigned long long v56;  // r14\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    unsigned long long v59;  // rdi\n    unsigned long long v60;  // rcx\n    unsigned long long v61;  // rsi\n    unsigned long long v62;  // rbp\n    char v63[2];  // rax\n    unsigned long long v65;  // rcx\n    char *v68;  // rdx\n    unsigned int v69;  // eax\n    char v70;  // al\n    unsigned long long v71;  // rax\n    unsigned long long|unsigned long v73;  // rax\n    unsigned long long v74;  // al\n    unsigned long long|unsigned long v75;  // rbx\n    unsigned long long v76;  // r14\n    unsigned long long|unsigned long v77;  // rax\n    unsigned long long v78;  // al\n    unsigned long long v79;  // rax\n    unsigned long long v80;  // r14\n    char *v81;  // rdx\n    unsigned int v82;  // eax\n    char v83;  // al\n    unsigned long long v84;  // rax\n    char *v87;  // rdx\n    unsigned int v88;  // eax\n    char v89;  // al\n    unsigned long long v90;  // rax\n    unsigned long long v92;  // rax\n    unsigned long long v93;  // rdx\n    unsigned long v94;  // r15\n    unsigned long long v95;  // rax\n    unsigned int v96;  // eax\n    char v97;  // al\n    unsigned long long v98;  // rax\n    unsigned long long v100;  // rax\n    char *v101;  // rdx\n    unsigned int v102;  // eax\n    char v103;  // al\n    unsigned long long v104;  // rax\n    unsigned long long v106;  // rax\n    char *v107;  // rdx\n    unsigned int v108;  // eax\n    char v109;  // al\n    unsigned long long v110;  // rax\n    unsigned int v111;  // eax\n    unsigned long long v113;  // rax\n    char v115;  // al\n    unsigned long long v116;  // rdx\n    unsigned long long v117;  // r12\n    unsigned long long v119;  // rax\n\n    v40 = v39;\n    v41 = __ctype_get_mb_cur_max();\n    if (v41 <= 1)\n    {\n        v43 = *(v42);\n        v119 = v39;\n        if (*(v42) != 0)\n        {\n            v65 = (char)*((char *)v40);\n            if (*((char *)v40) != 0)\n            {\n                v42 = v49;\n                v51 = 0;\n                v52 = 0;\n                v53 = 0;\n                v54 = 1;\n                while (true)\n                {\n                    v51 += 1;\n                    v55 = v52 + 1;\n                    v56 = v40 + 1;\n                    if (v43 != v65)\n                    {\n                        if (*((char *)(v40 + 1)) == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v57 = v42[1];\n                        v58 = (char)*((char *)v40);\n                        if (v42[1] == 0 || *((char *)v40) == 0)\n                        {\n                            break;\n                        }\n                        v55 = v52 + 2;\n                        if (v57 == v58)\n                        {\n                            v59 = &v42[-1 * v52];\n                            v52 = 0 - v52 + v40;\n                            while (true)\n                            {\n                                v60 = (char)*((char *)(v59 + v55));\n                                if (*((char *)(v59 + v55)) != 0)\n                                {\n                                    v61 = (char)*((char *)(v52 + v55));\n                                    v55 += 1;\n                                    if (*((char *)(v52 + v55)) == 0 || v60 != v61)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (*((char *)(v59 + v55)) != 0)\n                            {\n                                v119 = 0;\n                            }\n                            else if (*((char *)(v52 + v55)) != 0 && *((char *)(v59 + v55)) != 0)\n                            {\n                                v62 = v52;\n                            }\n                            else if (*((char *)(v59 + v55)) == 0)\n                            {\n                                v119 = v40;\n                            }\n                        }\n                    }\n                    v62 = v52;\n                    if (((char)!(r12<8> <= 9) & v54) != 0)\n                    {\n                        if (v55 >= v51 + (v51 << 2))\n                        {\n                            if (v50 != 0)\n                            {\n                                *((char *[2])&v0[0]) = v50;\n                                v63 = strnlen(v50, v55 - v53);\n                                v53 = v55;\n                                v50 = v0 + v63;\n                            }\n                            if (*((char *)(v0 + v63)) == 0 || v50 == 0)\n                            {\n                                v0 = v53;\n                                strlen(v42);\n                                v54 = sub_419160();\n                                v53 = v0;\n                                if (v54 != 0)\n                                {\n                                    break;\n                                }\n                                v50 = 0;\n                            }\n                        }\n                        if (v55 < v51 + (v51 << 2) || *((char *)(v0 + v63)) != 0 && v50 != 0)\n                        {\n                            v54 = v62;\n                        }\n                    }\n                    v65 = (char)*((char *)v54);\n                    v40 = v56;\n                    v52 = v55;\n                }\n                if (((char)!(r12<8> <= 9) & v54) != 0 && v55 >= v51 + (v51 << 2) && (*((char *)(v0 + v63)) == 0 || v50 == 0))\n                {\n                    v119 = *((long long *)&v31);\n                }\n                else if (v43 == v65)\n                {\n                    v119 = v40;\n                }\n                else if (v43 != v65 || v42[1] != 0)\n                {\n                    v119 = 0;\n                }\n            }\n        }\n    }\n    else\n    {\n        v5 = v42;\n        v2 = 0;\n        v45 = *(v42);\n        v4 = 0;\n        v3 = 0;\n        v46 = (unsigned long long)*(v42) >> 5;\n        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0)\n        {\n            v6 = 1;\n            v8 = *(v49);\n            v7 = 1;\n            v4 = 1;\n        }\n        else\n        {\n            v48 = mbsinit((unsigned int)&v3);\n            if (v48 != 0)\n            {\n                v2 = 1;\n                __ctype_get_mb_cur_max();\n                sub_4085c0();\n                v6 = (unsigned int)sub_40ab50();\n                if (v6 == -1)\n                {\n                    v6 = 1;\n                    v7 = 0;\n                    v4 = 1;\n                }\n                else if (v6 != -2)\n                {\n                    if ((*(v5) == 0 || v6 != 0) && (v8 == 0 || v6 != 0))\n                    {\n                        v7 = 1;\n                        if (mbsinit((unsigned int)&v3) != 0)\n                        {\n                            v2 = 0;\n                        }\n                        v4 = 1;\n                    }\n                }\n                if (v6 == -2)\n                {\n                    v7 = 0;\n                    v6 = strlen(v5);\n                    v4 = 1;\n                }\n                if (v6 == 0)\n                {\n                    v6 = 1;\n                }\n            }\n        }\n        if ((((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v48 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0))\n        {\n            if (v6 == -1 || v6 == -2 || v8 != 0)\n            {\n                if (v6 == -1 || v6 == -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0)\n                {\n                    v12 = v42;\n                    v117 = 0;\n                    v75 = 0;\n                    v76 = 1;\n                    v9 = 0;\n                    v10 = 0;\n                    v11 = 0;\n                    v19 = v39;\n                    v16 = 0;\n                    v17 = 0;\n                    v18 = 0;\n                    v1 = 0;\n                    while (true)\n                    {\n                        if (v16 == 0)\n                        {\n                            v68 = v19;\n                            v69 = *(v19);\n                            v70 = (unsigned long long)*(v19) >> 5;\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) != 0)\n                            {\n                                v20 = 1;\n                                v77 = *(v68);\n                                v21 = 1;\n                                v22 = *(v68);\n                                v18 = 1;\n                            }\n                            else\n                            {\n                                v71 = mbsinit((unsigned int)&v17);\n                                if (v71 == 0)\n                                {\n                                    break;\n                                }\n                                v16 = 1;\n                            }\n                        }\n                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) == 0 || v16 != 0)\n                        {\n                            __ctype_get_mb_cur_max();\n                            v0 = v19;\n                            sub_4085c0();\n                            v73 = sub_40ab50();\n                            v20 = v73;\n                            if (v73 == -1)\n                            {\n                                v20 = 1;\n                                v21 = 0;\n                                v18 = 1;\n                            }\n                            else if (v73 != -2)\n                            {\n                                if (v73 == 0)\n                                {\n                                    v20 = 1;\n                                    if (*(v19) != 0 || v22 != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                                v21 = 1;\n                                v77 = mbsinit((unsigned int)&v17);\n                                if ((unsigned int)v77 != 0)\n                                {\n                                    v16 = 0;\n                                }\n                                v18 = 1;\n                            }\n                            if (v73 == -2)\n                            {\n                                v73 = strlen(v19);\n                                v21 = 0;\n                                v20 = v73;\n                                v18 = 1;\n                            }\n                            if (v75 < v117 + (v117 << 2) && ((char)!(r12<8> <= 9) & v76) != 0 && (v73 == -2 || v73 == -1))\n                            {\n                                v75 += 1;\n                                v76 = v73;\n                            }\n                            if (((char)!(r12<8> <= 9) & v76) == 0 && (v73 == -2 || v73 == -1))\n                            {\n                                v75 += 1;\n                            }\n                        }\n                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) == 0 || v73 == -2)\n                        {\n                            v74 = (char)!(r12<8> <= 9) & v76;\n                        }\n                        if ((v16 == 0 || v73 != -2) && (v16 == 0 || v73 != -1) && (v73 != -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) != 0 || v73 != -1))\n                        {\n                            if (v22 == 0)\n                            {\n                                break;\n                            }\n                            if (v22 != 0)\n                            {\n                                v78 = (char)!(r12<8> <= 9) & v76;\n                                if (((char)!(r12<8> <= 9) & v76) == 0)\n                                {\n                                    v75 += 1;\n                                }\n                                else if (v75 < v117 + (v117 << 2))\n                                {\n                                    v75 += 1;\n                                    v76 = v77;\n                                }\n                            }\n                        }\n                        if (((char)!(r12<8> <= 9) & v76) != 0 && v22 != 0 && (v16 == 0 || v73 != -2) && (v16 == 0 || v73 != -1) && (v73 != -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) != 0 || v73 != -1) && v75 >= v117 + (v117 << 2) || ((char)!(r12<8> <= 9) & v76) != 0 && (v73 == -2 || v73 == -1) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v19) & 31)) & 1) == 0 || v16 != 0) && v75 >= v117 + (v117 << 2))\n                        {\n                            v79 = v11;\n                            v80 = v75 - v1;\n                            v11 = 0;\n                            v12 = &v12[v13];\n                            v80 -= 1;\n                            if (v9 == 0)\n                            {\n                                if (v80 != 1 || v79 == 0 && v75 != v1)\n                                {\n                                    v81 = v12;\n                                    v82 = *(v12);\n                                    v83 = (unsigned long long)*(v12) >> 5;\n                                    if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) != 0)\n                                    {\n                                        v13 = 1;\n                                        v14 = 1;\n                                        v15 = *(v81);\n                                        v11 = 1;\n                                    }\n                                    else\n                                    {\n                                        v84 = mbsinit((unsigned int)&v10);\n                                        if (v84 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v9 = 1;\n                                    }\n                                }\n                                if (v80 == 1 || v75 == v1 && v79 == 0 || v11 == 0 && v15 == 0)\n                                {\n                                    v87 = v12;\n                                    v88 = *(v12);\n                                    v89 = (unsigned long long)*(v12) >> 5;\n                                    if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) != 0)\n                                    {\n                                        v13 = 1;\n                                        v14 = 1;\n                                        v15 = *(v87);\n                                        v11 = 1;\n                                    }\n                                    else\n                                    {\n                                        v90 = mbsinit((unsigned int)&v10);\n                                        if (v90 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v9 = 1;\n                                    }\n                                }\n                            }\n                            if ((v79 == 0 || v80 != 1) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 || v9 != 0) && (v80 != 1 || v75 != v1))\n                            {\n                                __ctype_get_mb_cur_max();\n                                sub_4085c0();\n                                v13 = (unsigned int)sub_40ab50();\n                                if (v13 == -1)\n                                {\n                                    v13 = 1;\n                                    v14 = 0;\n                                }\n                                else if (v13 != -2)\n                                {\n                                    if (v13 == 0)\n                                    {\n                                        v13 = 1;\n                                        if (*(v12) != 0 || v15 != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    v14 = 1;\n                                    if (mbsinit((unsigned int)&v10) != 0)\n                                    {\n                                        v9 = 0;\n                                    }\n                                    v11 = 1;\n                                }\n                                if (v13 == -2)\n                                {\n                                    v14 = 0;\n                                    v13 = strlen(v12);\n                                }\n                            }\n                            if (v80 == 1 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 || v80 == 1 && v9 != 0 || v75 == v1 && v79 == 0 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v12) & 31)) & 1) == 0 && v11 == 0 && v15 == 0 || v75 == v1 && v79 == 0 && v9 != 0 || v11 == 0 && v15 == 0 && v9 != 0)\n                            {\n                                __ctype_get_mb_cur_max();\n                                sub_4085c0();\n                                v13 = (unsigned int)sub_40ab50();\n                                if (v13 == -1)\n                                {\n                                    v13 = 1;\n                                    v14 = 0;\n                                    v11 = 1;\n                                }\n                                else if (v13 != -2)\n                                {\n                                    if (v13 == 0)\n                                    {\n                                        v13 = 1;\n                                        if (*(v12) != 0 || v15 != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    v14 = 1;\n                                    v92 = mbsinit((unsigned int)&v10);\n                                    if (v92 != 0)\n                                    {\n                                        v9 = 0;\n                                    }\n                                    v11 = 1;\n                                }\n                                if (v13 == -2)\n                                {\n                                    v14 = 0;\n                                    v13 = strlen(v12);\n                                    v11 = 1;\n                                }\n                            }\n                            if (...)\n                            {\n                                v93 = v21;\n                                v76 = 1;\n                            }\n                            if (...)\n                            {\n                                v76 = (unsigned int)sub_419310();\n                                if ((char)v76 != 0)\n                                {\n                                    break;\n                                }\n                                v93 = v21;\n                            }\n                            v1 = v75;\n                            v75 += 1;\n                        }\n                        if (...)\n                        {\n                            v94 = v20;\n                            if (v20 == v6)\n                            {\n                                v95 = memcmp(v19, v5, v94);\n                            }\n                        }\n                        if (...)\n                        {\n                            v34 = v42;\n                            v31 = 0;\n                            v26 = *((int128_t *)&(&v20)[-1]);\n                            v26 = (long long)v26 + *((long long *)&((char *)&v26)[8]);\n                            v96 = *(v42);\n                            v97 = (unsigned long long)*(v42) >> 5;\n                            v24 = *((int128_t *)&v16);\n                            v28 = *((int128_t *)&v21);\n                            *((int128_t *)&v30) = (int128_t)v23;\n                            v25 = 0;\n                            v33 = 0;\n                            v32 = 0;\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0)\n                            {\n                                v35 = 1;\n                                v37 = *(v42);\n                                v36 = 1;\n                                v33 = 1;\n                            }\n                            else\n                            {\n                                v98 = mbsinit((unsigned int)&v32);\n                                if (v98 == 0)\n                                {\n                                    break;\n                                }\n                                if (v98 != 0)\n                                {\n                                    v31 = 1;\n                                    __ctype_get_mb_cur_max();\n                                    v0 = v34;\n                                    sub_4085c0();\n                                    v35 = (unsigned int)sub_40ab50();\n                                    if (v35 == -1)\n                                    {\n                                        v35 = 1;\n                                        v36 = 0;\n                                    }\n                                    else if (v35 != -2)\n                                    {\n                                        if (v35 == 0)\n                                        {\n                                            v35 = 1;\n                                            if (v37 != 0 || *(v34) != 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        v36 = 1;\n                                        v100 = mbsinit((unsigned int)&v32);\n                                        if (v100 != 0)\n                                        {\n                                            v31 = 0;\n                                        }\n                                        v33 = 1;\n                                    }\n                                    if (v35 == -2)\n                                    {\n                                        v36 = 0;\n                                        v35 = strlen(v34);\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            abort(); /* do not return */\n                        }\n                        if (...)\n                        {\n                            v33 = 0;\n                            v75 += 1;\n                            v34 = &v34[v35];\n                            while (true)\n                            {\n                                if (v31 == 0)\n                                {\n                                    v101 = v34;\n                                    v102 = *(v34);\n                                    v103 = (unsigned long long)*(v34) >> 5;\n                                    if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) != 0)\n                                    {\n                                        v35 = 1;\n                                        v36 = 1;\n                                        v37 = *(v101);\n                                        v33 = 1;\n                                    }\n                                    else\n                                    {\n                                        v104 = mbsinit((unsigned int)&v32);\n                                        if (v104 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v31 = 1;\n                                    }\n                                }\n                                if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0)\n                                {\n                                    __ctype_get_mb_cur_max();\n                                    sub_4085c0();\n                                    v35 = (unsigned int)sub_40ab50();\n                                    if (v35 == -1)\n                                    {\n                                        v35 = 1;\n                                        v36 = 0;\n                                        v33 = 1;\n                                    }\n                                    else if (v35 != -2)\n                                    {\n                                        if (v35 == 0)\n                                        {\n                                            v35 = 1;\n                                            if (v37 != 0 || *(v34) != 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        v36 = 1;\n                                        v106 = mbsinit((unsigned int)&v32);\n                                        if (v106 != 0)\n                                        {\n                                            v31 = 0;\n                                        }\n                                        v33 = 1;\n                                    }\n                                    if (v35 == -2)\n                                    {\n                                        v36 = 0;\n                                        v35 = strlen(v34);\n                                        v33 = 1;\n                                    }\n                                }\n                                if (v37 != 0 || v35 == -2 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v35 == -1 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v35 == -2 && v31 != 0 || v35 == -1 && v31 != 0)\n                                {\n                                    if (v25 == 0)\n                                    {\n                                        if ((char)v24 == 0)\n                                        {\n                                            v107 = v26;\n                                            v108 = *(v26);\n                                            v109 = (unsigned long long)*(v26) >> 5;\n                                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0)\n                                            {\n                                                v27 = 1;\n                                                v28 = 1;\n                                                v29 = *(v107);\n                                                v25 = 1;\n                                            }\n                                            else\n                                            {\n                                                v110 = mbsinit((unsigned int)&v24);\n                                                if (v110 == 0)\n                                                {\n                                                    break;\n                                                }\n                                                v24 = 1;\n                                            }\n                                        }\n                                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (char)v24 != 0)\n                                        {\n                                            __ctype_get_mb_cur_max();\n                                            sub_4085c0();\n                                            v27 = (unsigned int)sub_40ab50();\n                                            if ((long long)v27 == -1)\n                                            {\n                                                v27 = 1;\n                                                v28 = 0;\n                                                v25 = 1;\n                                            }\n                                            else if ((long long)v27 != -2)\n                                            {\n                                                if ((long long)v27 == 0)\n                                                {\n                                                    v27 = 1;\n                                                    if ((int)(&v28)[4] != 0 || *(v26) != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                v28 = 1;\n                                                v113 = mbsinit((unsigned int)&v24);\n                                                if (v113 != 0)\n                                                {\n                                                    v24 = 0;\n                                                }\n                                                v111 = *((int *)&((char *)&v28)[4]);\n                                                v25 = 1;\n                                            }\n                                            if ((long long)v27 == -2)\n                                            {\n                                                v28 = 0;\n                                                v27 = strlen(v26);\n                                                v25 = 1;\n                                            }\n                                        }\n                                    }\n                                    if (v25 == 0 || (char)v28 != 0)\n                                    {\n                                        if (((char)v24 == 0 || v25 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0 || v25 != 0))\n                                        {\n                                            v111 = (int)(&v28)[4];\n                                            if ((int)(&v28)[4] == 0)\n                                            {\n                                                break;\n                                            }\n                                        }\n                                        if ((int)(&v28)[4] != 0 && v36 != 0 && ((char)v24 == 0 || (long long)v27 != -1 || v25 != 0) && ((char)v24 == 0 || (long long)v27 != -2 || v25 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0 || (long long)v27 != -1 || v25 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) != 0 || (long long)v27 != -2 || v25 != 0))\n                                        {\n                                            v115 = v37 != v111;\n                                        }\n                                    }\n                                    if ((char)v28 == 0 && v25 != 0 || v36 == 0 && (int)(&v28)[4] != 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 && (long long)v27 == -1 && v25 == 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 && (long long)v27 == -2 && v25 == 0 || (long long)v27 == -1 && v25 == 0 && (char)v24 != 0 || (long long)v27 == -2 && v25 == 0 && (char)v24 != 0)\n                                    {\n                                        if ((long long)v27 != v35)\n                                        {\n                                            break;\n                                        }\n                                        v115 = memcmp(v26, v34, (long long)v27) != 0;\n                                    }\n                                    if ((int)(&v28)[4] != 0 || (char)v28 == 0 && v25 != 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 && (long long)v27 == -1 && v25 == 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 && (long long)v27 == -2 && v25 == 0 || (long long)v27 == -1 && v25 == 0 && (char)v24 != 0 || (long long)v27 == -2 && v25 == 0 && (char)v24 != 0)\n                                    {\n                                        v116 = v75 + 1;\n                                        if (v115 != 0)\n                                        {\n                                            break;\n                                        }\n                                        v26 = (long long)v26 + *((long long *)&((char *)&v26)[8]);\n                                        v75 = v116;\n                                        v34 = &v34[v35];\n                                        v25 = 0;\n                                        v33 = 0;\n                                    }\n                                }\n                                else\n                                {\n                                    v119 = v19;\n                                }\n                            }\n                            if (v35 == 0 && v35 != -2 && v35 != -1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0) && (v104 != 0 || v31 != 0) || v25 == 0 && (long long)v27 == 0 && (long long)v27 != -1 && (long long)v27 != -2 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (char)v24 != 0) && (v110 != 0 || (char)v24 != 0))\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                            else if (...)\n                            {\n                                v94 = v20;\n                            }\n                            else if (...)\n                            {\n                                v119 = 0;\n                            }\n                            else if ((((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || v31 == 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v25 == 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || (char)v24 == 0) && (v25 == 0 || v31 == 0) && ((char)v24 == 0 || v31 == 0))\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                            else if (v25 == 0 && (long long)v27 == 0 && *(v26) == 0 && (long long)v27 != -1 && (long long)v27 != -2 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v26) & 31)) & 1) == 0 || (char)v24 != 0) && (v110 != 0 || (char)v24 != 0) || *(v34) == 0 && v35 == 0 && v35 != -2 && v35 != -1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v34) & 31)) & 1) == 0 || v31 != 0) && (v104 != 0 || v31 != 0))\n                            {\n                                sub_4192f0(); /* do not return */\n                            }\n                            else if (...)\n                            {\n                                return v119;\n                            }\n                        }\n                        if (v37 != 0 || v20 == v6 || v95 == 0)\n                        {\n                            v94 = v20;\n                        }\n                        if (...)\n                        {\n                            v19 = &v19[v94];\n                            v117 = 1;\n                            v18 = 0;\n                        }\n                    }\n                    if (...)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        v119 = *((long long *)&v31);\n                    }\n                    else if (true)\n                    {\n                        v119 = 0;\n                    }\n                    else if (...)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        sub_4192f0(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        return v119;\n                    }\n                }\n                if (*(v5) == 0 || v6 == -1 || v6 == -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0)\n                {\n                    sub_4192f0(); /* do not return */\n                }\n            }\n            if ((v6 == -1 || v6 == 0 || v6 == -2 || v8 != 0) && (v6 == -1 || v6 == -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || *(v5) != 0 || v6 != 0))\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if ((((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0) && (v6 == -1 || v48 == 0 || v6 == -2 || v8 != 0) && (v6 == -1 || v48 == 0 || v6 == -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n        {\n            __assert_fail(); /* do not return */\n        }\n    }\n    if (...)\n    {\n        v119 = v40;\n    }\n    if (*((char *)v40) == 0 && v41 <= 1 && *(v42) != 0 || v41 <= 1 && *((char *)v40) != 0 && *(v42) != 0 || v41 > 1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v48 != 0) && (v6 == -1 || v6 == -2 || v8 != 0) && (v6 == -1 || v6 == -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n    {\n        v119 = 0;\n    }\n    if (v41 <= 1 && *((char *)v40) != 0 && *(v42) != 0 || v41 > 1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) == 0 || v8 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v48 != 0) && (v6 == -1 || v6 == -2 || v8 != 0) && (v6 == -1 || v6 == -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v42) & 31)) & 1) != 0 || v6 != 0))\n    {\n        v119 = *((long long *)&v31);\n    }\n    if (...)\n    {\n        return v119;\n    }\n}\n"
        },
        {
            "funcName": "sub_40bf40",
            "funcStartAddr": "0x40bf40",
            "funcEndAddr": "0x40bf54",
            "decompiledFuncCode": "int sub_40bf40()\n{\n    sub_40bf10();\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_417f00",
            "funcStartAddr": "0x417f00",
            "funcEndAddr": "0x417f09",
            "decompiledFuncCode": "int sub_417f00()\n{\n}\n"
        },
        {
            "funcName": "sub_40c890",
            "funcStartAddr": "0x40c890",
            "funcEndAddr": "0x40c8ea",
            "decompiledFuncCode": "int sub_40c890()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v2;  // r8\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdi\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v2 = *(v1);\n        v8 = v3 - 1;\n        for (v7 = 0; v7 < v8; v8 = v6)\n        {\n            if (v4 > v2[v7 + v8 >> 1])\n            {\n                v5 = v6;\n                v6 = v8;\n            }\n            else\n            {\n                for (v6 = v7 + v8 >> 1; v7 < v6; v6 = v5)\n                {\n                    v5 = 0 + v6 >> 1;\n                    if (v2[0 + v6 >> 1] < v4)\n                    {\n                        break;\n                    }\n                }\n                if (v7 < v6)\n                {\n                    v7 = v5 + 1;\n                }\n            }\n            v7 = v5 + 1;\n        }\n        return v7 + 1;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408620",
            "funcStartAddr": "0x408620",
            "funcEndAddr": "0x408b82",
            "decompiledFuncCode": "extern unsigned int g_41e840[4];\n\nint sub_408620()\n{\n    void tmp_12;  // tmp #12\n    void *v0;  // [bp-0x88]\n    void tmp_14;  // tmp #14\n    char v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x7c]\n    char v3;  // [bp-0x74]\n    void *v4;  // [bp-0x70]\n    unsigned long long|unsigned long v5;  // [bp-0x68]\n    char v6;  // [bp-0x60]\n    unsigned int v7;  // [bp-0x5c]\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    void *v13;  // r12\n    unsigned long long v14;  // rax\n    unsigned int v15;  // esi\n    unsigned int v16;  // esi\n    void *v18;  // rbx\n    char *v19;  // r13\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    void *v22;  // r14\n    unsigned long v23;  // rax\n    unsigned long long v24;  // rdx\n    unsigned int v25;  // eax\n    char v26;  // al\n    unsigned int v27;  // eax\n    void *v33;  // rdx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rcx\n    void *v37;  // rbp\n    unsigned long long v38;  // rax\n    unsigned long v40;  // rax\n    unsigned long long v41;  // rdx\n    unsigned int v42;  // eax\n    char v43;  // al\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rbx\n    unsigned long long v47;  // rax\n    void *v48;  // rbp\n    void *v49;  // r15\n    unsigned long long|char|unsigned long v50;  // r14\n    unsigned int v51;  // cc_dep1\n    char *v53;  // r13\n    void *v54;  // rbx\n    void *v56;  // rax\n\n    if (v11 != 0)\n    {\n        v11 = strdup(v9);\n        v14 = __ctype_get_mb_cur_max();\n        if (v14 > 1)\n        {\n            if (v16 != 0)\n            {\n                v4 = v18;\n                do\n                {\n                    tmp_12 = (unsigned int)*((int *)v18);\n                    v18 += 4;\n                    v20 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                }\n                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                v1 = 0;\n                v22 = v18;\n                v3 = 0;\n                v2 = 0;\n                v23 = (unsigned int)(((unsigned int)v20 & 32896) == 0? (unsigned int)(v20 >> 16) : (unsigned int)v20);\n                v24 = v18 + 2;\n                v54 = (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v18 + 2 : v18) - 3 - ((v23 + v23 <= v23? 1 : 0) & 1);\n                v0 = (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v24 : v22) - 3 - ((v23 + v23 <= v23? 1 : 0) & 1);\n                if ((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v24 : v22) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) > v18)\n                {\n                    while (true)\n                    {\n                        if (v1 == 0)\n                        {\n                            v25 = (char)*((char *)v22);\n                            v26 = (unsigned long long)(char)*((char *)v22) >> 5;\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v22) & 31)) & 1) != 0)\n                            {\n                                v5 = 1;\n                                v27 = (char)*((char *)v22);\n                                v6 = 1;\n                                v22 = v4;\n                                v7 = v27;\n                                v3 = 1;\n                            }\n                            else\n                            {\n                                if (mbsinit((unsigned int)&v2) == 0)\n                                {\n                                    break;\n                                }\n                                v1 = 1;\n                            }\n                        }\n                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v22) & 31)) & 1) == 0 || v1 != 0)\n                        {\n                            v5 = (unsigned int)sub_40ab50();\n                            if (v5 != -1)\n                            {\n                                v22 = v4;\n                                if (v5 != -2)\n                                {\n                                    if (v5 == 0)\n                                    {\n                                        v5 = 1;\n                                        if (v7 != 0 || *((char *)v22) != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    v6 = 1;\n                                    if (mbsinit((unsigned int)&v2) != 0)\n                                    {\n                                        v1 = 0;\n                                    }\n                                    v3 = 1;\n                                }\n                            }\n                            else\n                            {\n                                v5 = 1;\n                                v22 = v4;\n                                v6 = 0;\n                                v3 = 1;\n                            }\n                            if (v5 == -2)\n                            {\n                                v6 = 0;\n                                v3 = 1;\n                                v5 = v0 - v22;\n                            }\n                        }\n                        if ((v1 == 0 || v5 != -1) && (v1 == 0 || v5 != -2) && (v5 != -1 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v22) & 31)) & 1) != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v22) & 31)) & 1) != 0 || v5 != -2))\n                        {\n                            if (iswspace(v7) == 0)\n                            {\n                                break;\n                            }\n                            v54 = v0;\n                            v22 += v5;\n                            v3 = 0;\n                            v4 = v22;\n                            if (v22 >= v0)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (true)\n                    {\n                        memmove(v18, v22, strlen(v22) + 1);\n                    }\n                    else if (*((char *)v22) == 0 && v5 == 0)\n                    {\n                        sub_408600(); /* do not return */\n                    }\n                    else if (v5 == 0)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v22) & 31)) & 1) == 0 && v1 == 0)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n                if ((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v24 : v22) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) <= v18 || v16 != 1)\n                {\n                    memmove(v18, v22, strlen(v22) + 1);\n                }\n            }\n            if (v16 == 0 || v16 != 1)\n            {\n                v4 = v18;\n                v37 = v18;\n                do\n                {\n                    tmp_14 = (unsigned int)*((int *)v37);\n                    v37 += 4;\n                    v38 = (unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152;\n                }\n                while (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152) == 0);\n                v1 = 0;\n                v18 = v13;\n                v3 = 0;\n                v2 = 0;\n                v40 = (unsigned int)(((unsigned int)v38 & 32896) == 0? (unsigned int)(v38 >> 16) : (unsigned int)v38);\n                v41 = v37 + 2;\n                v50 = 0;\n                v0 = (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? v41 : v37) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1);\n                if ((((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? v41 : v37) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) > v13)\n                {\n                    while (true)\n                    {\n                        if (v1 == 0)\n                        {\n                            v42 = (char)*((char *)v54);\n                            v43 = (unsigned long long)(char)*((char *)v54) >> 5;\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v54) & 31)) & 1) != 0)\n                            {\n                                v5 = 1;\n                                v49 = v4;\n                                v48 = v0;\n                                v6 = 1;\n                                v7 = (char)*((char *)v54);\n                                v54 = v4 + 1;\n                            }\n                            else\n                            {\n                                v44 = mbsinit((unsigned int)&v2);\n                                if (v44 == 0)\n                                {\n                                    break;\n                                }\n                                v1 = 1;\n                            }\n                        }\n                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v54) & 31)) & 1) == 0 || v1 != 0)\n                        {\n                            v45 = sub_40ab50();\n                            v46 = v45;\n                            v5 = v45;\n                            if (v45 != -1)\n                            {\n                                v49 = v4;\n                                if (v45 != -2)\n                                {\n                                    if (v45 == 0)\n                                    {\n                                        v5 = 1;\n                                        if (v7 != 0 || *((char *)v49) != 0)\n                                        {\n                                            break;\n                                        }\n                                        v46 = 1;\n                                    }\n                                    v6 = 1;\n                                    v54 = v46 + v49;\n                                    v47 = mbsinit((unsigned int)&v2);\n                                    v48 = v0;\n                                    if (v47 != 0)\n                                    {\n                                        v1 = 0;\n                                    }\n                                }\n                                else\n                                {\n                                    v54 = v0;\n                                    v6 = 0;\n                                    v48 = v0;\n                                    v5 = v0 - v49;\n                                }\n                            }\n                            else\n                            {\n                                v49 = v4;\n                                v48 = v0;\n                                v6 = 0;\n                                v5 = 1;\n                                v54 = v4 + 1;\n                            }\n                        }\n                        v3 = 1;\n                        if (v50 == 0)\n                        {\n                            v50 = 1;\n                            if (v6 != 0)\n                            {\n                                v50 = 0;\n                                v50 = iswspace(v7) == 0;\n                            }\n                        }\n                        if (v50 == 1 && v6 != 0)\n                        {\n                            v51 = iswspace(v7);\n                            v53 = (v51 != 0? v49 : r13<8>);\n                            v50 = (unsigned int)(v51 != 0? 2 : (unsigned int)r14<8>);\n                        }\n                        if (v50 == 2 && v6 != 0)\n                        {\n                            v4 = v54;\n                            v3 = 0;\n                            v50 = (iswspace(v7) == 0? 1 : (unsigned int)r14<8>);\n                        }\n                        if ((v6 == 0 || v50 != 2) && (v50 == 2 || v50 != 1) && (v50 == 2 || v50 != 0))\n                        {\n                            v50 = 1;\n                        }\n                        if (v50 == 1 || v6 == 0 || v50 == 0 || v50 != 2)\n                        {\n                            v4 = v54;\n                            v3 = 0;\n                        }\n                        if (v50 != 2)\n                        {\n                            break;\n                        }\n                        *(v53) = 0;\n                    }\n                    if (v45 == 0 && *((char *)v49) == 0 && v45 != -2 && v45 != -1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v54) & 31)) & 1) == 0 || v1 != 0) && (v44 != 0 || v1 != 0))\n                    {\n                        sub_408600(); /* do not return */\n                    }\n                    else if (v45 == 0 && v45 != -2 && v45 != -1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v54) & 31)) & 1) == 0 || v1 != 0) && (v44 != 0 || v1 != 0))\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (v1 == 0 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*((char *)v54) & 31)) & 1) == 0)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (...)\n                    {\n                        v56 = v18;\n                        return v56;\n                    }\n                }\n                if ((v16 != 0 || (((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? v41 : v37) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) > v13) && ((((unsigned int)(tmp_14 - 16843009) & !((unsigned int)tmp_14) & 2155905152 & 32896) == 0? v41 : v37) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) > v13 || (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v24 : v22) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) > v18))\n                {\n                    __assert_fail(); /* do not return */\n                    __assert_fail(); /* do not return */\n                    sub_408600(); /* do not return */\n                }\n            }\n        }\n        else\n        {\n            if (v15 != 0)\n            {\n                v54 = (unsigned long long)(char)*((char *)v18);\n                if (*((char *)v18) != 0)\n                {\n                    v19 = v18;\n                    v21 = *((long long *)(unsigned long long)__ctype_b_loc());\n                    while ((*((char *)(v21 + (v54 << 1) + 1)) & 32) != 0)\n                    {\n                        v19 = &v19[1];\n                        v54 = (unsigned long long)*(v19);\n                        if ((char)v54 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    v19 = v18;\n                }\n                memmove(v18, v19, strlen(v19) + 1);\n            }\n            if (v15 == 0 || v16 != 1)\n            {\n                v33 = v18;\n                do\n                {\n                    tmp_12 = (unsigned int)*((int *)v33);\n                    v33 += 4;\n                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                }\n                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                v36 = v33 + 2;\n                v54 = (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v36 : v33) - 3 - ((v35 + v35 <= v35? 1 : 0) & 1) - 1;\n                if (v18 <= (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v36 : v33) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) - 1)\n                {\n                    while (true)\n                    {\n                        if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)(char)*((char *)v54) << 1) + 1)) & 32) != 0)\n                        {\n                            *((char *)v54) = 0;\n                            v54 -= 1;\n                            if (v54 > v54)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (v16 == 0 || v14 <= 1 || (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? v24 : v22) - 3 - ((v40 + v40 <= v40? 1 : 0) & 1) <= v18 || v16 != 1)\n        {\n            v56 = v18;\n            return v56;\n        }\n    }\n    else\n    {\n        sub_4093b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409390",
            "funcStartAddr": "0x409390",
            "funcEndAddr": "0x4093a3",
            "decompiledFuncCode": "int sub_409390()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_405510",
            "funcStartAddr": "0x405510",
            "funcEndAddr": "0x40551a",
            "decompiledFuncCode": "int sub_405510()\n{\n}\n"
        },
        {
            "funcName": "sub_409c80",
            "funcStartAddr": "0x409c80",
            "funcEndAddr": "0x409d1a",
            "decompiledFuncCode": "int sub_409c80()\n{\n    void *v2;  // rax\n    unsigned long v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // r13d\n    unsigned long long v6;  // rax\n    unsigned int *v7;  // rax\n    unsigned short v8;  // dx\n    unsigned long long v10;  // rax\n    unsigned long v11;  // rdi\n    unsigned long long v14;  // rax\n\n    if (v2 != 0 && v3 != 0)\n    {\n        v4 = fileno(v2);\n        v5 = v4;\n        v6 = dup2(v4, v4);\n        if (v6 < 0)\n        {\n            v7 = __errno_location();\n            if (*(v7) == 9 && v5 != (unsigned int)v3)\n            {\n                v10 = dup2(v3, v5);\n                v3 = (unsigned int)open(\"/dev/null\", 0x80000, v8);\n                if (v10 >= 0)\n                {\n                    close(v11);\n                }\n                else\n                {\n                    close(v11);\n                }\n            }\n        }\n    }\n    if (v2 == 0 || v3 == 0 || v6 >= 0 || *(v7) != 9 || v10 < 0 && v5 != (unsigned int)v3)\n    {\n        v2 = (unsigned long long)freopen();\n        return v14;\n    }\n}\n"
        },
        {
            "funcName": "sub_40cb20",
            "funcStartAddr": "0x40cb20",
            "funcEndAddr": "0x40cd62",
            "decompiledFuncCode": "int sub_40cb20()\n{\n    unsigned long v0;  // [bp-0x70]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long v2;  // [bp-0x60]\n    unsigned long v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x50]\n    unsigned long long v5;  // [bp-0x48]\n    unsigned long v6;  // [bp+0x8]\n    unsigned long long v7;  // rbx\n    unsigned long long v8[28];  // rdi\n    unsigned long long v9;  // r15\n    unsigned long v10;  // r8\n    unsigned long long v11;  // r10\n    unsigned long long v12;  // r13\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rbp\n    unsigned long long v17;  // r10\n    unsigned long long v18;  // r14\n    unsigned long long v19;  // rbp\n    unsigned long long *v20;  // rsi\n    unsigned long v21;  // r9\n    unsigned long long v22;  // r14\n    unsigned long v23;  // rcx\n    unsigned int v24;  // ebx\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n\n    v7 = 0;\n    v9 = v8[25];\n    *((unsigned long long [28])&v0) = v8[19];\n    for (v13 = v8[25]; v7 < v13; v13 = v11)\n    {\n        if (v10 > *((long long *)(v8[27] + (((v7 + v13 >> 63) + v7 + v13 >> 1) + ((v7 + v13 >> 63) + v7 + v13 >> 1 << 2) << 3) + 8)))\n        {\n            v12 = v11;\n            v11 = v13;\n        }\n        else\n        {\n            for (v11 = (v7 + v13 >> 63) + v7 + v13 >> 1; 0 < v11; v11 = v13)\n            {\n                v13 = (0 + v11 >> 63) + 0 + v11 >> 1;\n                v12 = (0 + v11 >> 63) + 0 + v11 >> 1;\n                if (*((long long *)(v8[27] + (((0 + v11 >> 63) + 0 + v11 >> 1) + ((0 + v11 >> 63) + 0 + v11 >> 1 << 2) << 3) + 8)) < v10)\n                {\n                    break;\n                }\n            }\n            if (0 < v11)\n            {\n                v7 = v12 + 1;\n            }\n        }\n        v7 = v12 + 1;\n    }\n    v14 = -1;\n    v14 = (v10 != *((long long *)(v8[27] + (v7 + (v7 << 2) << 3) + 8))? -1 : v7);\n    v15 = v9;\n    for (v16 = 0; v16 < v15; v15 = v17)\n    {\n        if (v6 > *((long long *)(v8[27] + (((v16 + v15 >> 63) + v16 + v15 >> 1) + ((v16 + v15 >> 63) + v16 + v15 >> 1 << 2) << 3) + 8)))\n        {\n            v18 = v17;\n            v17 = v15;\n        }\n        else\n        {\n            for (v17 = (v16 + v15 >> 63) + v16 + v15 >> 1; v16 < v17; v17 = v15)\n            {\n                v15 = (0 + v17 >> 63) + 0 + v17 >> 1;\n                v18 = (0 + v17 >> 63) + 0 + v17 >> 1;\n                if (*((long long *)(v8[27] + (((0 + v17 >> 63) + 0 + v17 >> 1) + ((0 + v17 >> 63) + 0 + v17 >> 1 << 2) << 3) + 8)) < v6)\n                {\n                    break;\n                }\n            }\n            if (v16 < v17)\n            {\n                v16 = v18 + 1;\n            }\n        }\n        v16 = v18 + 1;\n    }\n    v19 = -1;\n    v19 = (v6 != *((long long *)(v8[27] + (v16 + (v16 << 2) << 3) + 8))? -1 : v16);\n    if (*(v20) > 0)\n    {\n        v3 = v21;\n        v22 = 0;\n        v2 = v10;\n        v1 = v23;\n        v4 = v14;\n        v5 = v19;\n        while (true)\n        {\n            v24 = sub_40b100();\n            v25 = sub_40b100();\n            if (v24 != v25)\n            {\n                v26 = 1;\n            }\n            else\n            {\n                v22 += 1;\n                if (v22 >= *(v20))\n                {\n                    break;\n                }\n            }\n        }\n        if (v24 == v25)\n        {\n            v26 = 0;\n        }\n        else if (v24 != v25)\n        {\n            return v26;\n        }\n    }\n    v26 = 0;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_40d9b0",
            "funcStartAddr": "0x40d9b0",
            "funcEndAddr": "0x40db12",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_2 *field_10;\n} struct_1;\n\ntypedef struct struct_0 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40d9b0()\n{\n    unsigned long long v1[3];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3[3];  // rdx\n    unsigned long long v4;  // r15\n    unsigned long long v5[3];  // rdi\n    struct_1 *v7;  // rbp\n    void *v9;  // rax\n    unsigned long long *v10;  // rdi\n    unsigned long long v12;  // r14\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rdx\n    struct_0 *v15;  // rdi\n    unsigned long long v16;  // rax\n    unsigned long long *v17;  // rsi\n    unsigned long long *v18;  // r9\n    unsigned long long v19;  // rsi\n    unsigned long long v20;  // r8\n    unsigned long long v21;  // cc_dep2\n    unsigned long v22;  // r12\n    unsigned long long v25;  // rdx\n    void *v26;  // rdi\n    unsigned long long v27;  // rbx\n    unsigned long v28;  // rdx\n\n    if (v1 != 0)\n    {\n        v2 = v1[1];\n        if (v3 != 0 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v4 = v3[1];\n            v7 = v3;\n            *(v5) = v1[1] + v3[1];\n            v9 = malloc((v2 + v4) * 8);\n            v5[2] = v5;\n            if (v5 != 0)\n            {\n                v5 = v9;\n                v12 = 0;\n                v13 = 0;\n                v14 = 0;\n                while (true)\n                {\n                    v17 = v1[2] + v14 * 8;\n                    if (v4 > v13)\n                    {\n                        v18 = v7->field_10;\n                        v19 = *(v17);\n                        v12 += 1;\n                        v20 = v7->field_10[v13];\n                        v21 = v7->field_10[v13];\n                        if (v19 <= v7->field_10[v13])\n                        {\n                            *(v10) = v19;\n                            v14 += 1;\n                            v13 += (char)(v19 == v21);\n                        }\n                        else\n                        {\n                            v13 += 1;\n                            *(v10) = v20;\n                        }\n                        v2 = v1[1];\n                        v10 = &v10[1];\n                        v25 = v7->field_8;\n                        if (v13 >= v7->field_8)\n                        {\n                            break;\n                        }\n                        v26 = &v5[v12];\n                        v27 = v25 - v13;\n                        v28 = (v25 - v13) * 8;\n                        v12 += v27;\n                        memcpy(v26, &v18[v13], v28);\n                    }\n                    else\n                    {\n                        v22 = v2 - v14;\n                        v12 += v22;\n                        memcpy(v10, v17, v22 * 8);\n                    }\n                }\n                v5[1] = v12;\n                return 0;\n            }\n            v16 = 12;\n        }\n    }\n    if (v3[1] <= 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>))\n    {\n        v15->field_10 = 0;\n        v16 = 0;\n        v15->field_0 = 0;\n    }\n    if (v3[1] <= 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) || v5 == 0)\n    {\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_415a00",
            "funcStartAddr": "0x415a00",
            "funcEndAddr": "0x415aa6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nint sub_415a00()\n{\n    unsigned long long v1;  // rdi\n    char v3[9];  // rsi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rax\n\n    v5 = -1;\n    while (true)\n    {\n        *((unsigned long long *)(v1 + 72)) = *((long long *)(v1 + 72)) + (unsigned long long)(unsigned int)sub_415350();\n        if (v3[1] != 2)\n        {\n            if (v3[0] == 44 || v3[1] == 24)\n            {\n                break;\n            }\n            if (((unsigned long long)v3[0] - 48 & 255) <= 9 && v3[1] == 1 && v5 != -2)\n            {\n                if (v5 != -1)\n                {\n                    v5 = (32816 < v4 + (v5 + (v5 << 2) << 1)? 32816 : v4 + (v5 + (v5 << 2) << 1)) - 48;\n                }\n                else\n                {\n                    v5 = (int)((unsigned int)v3[0] - 48);\n                }\n            }\n            if (v5 == -2 || ((unsigned long long)v3[0] - 48 & 255) > 9 || v3[1] != 1)\n            {\n                v5 = -2;\n            }\n        }\n        else\n        {\n            v5 = -2;\n        }\n    }\n    v6 = v5;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_405c20",
            "funcStartAddr": "0x405c20",
            "funcEndAddr": "0x406449",
            "decompiledFuncCode": "extern unsigned int g_41e840[4];\n\nint sub_405c20()\n{\n    void *v0;  // [bp-0xc0]\n    char v1;  // [bp-0xb8]\n    unsigned long long|char v2;  // [bp-0xb4]\n    char v3;  // [bp-0xac]\n    char *|char [2]|unsigned long v4;  // [bp-0xa8]\n    unsigned long long|unsigned long v5;  // [bp-0xa0]\n    char v6;  // [bp-0x98]\n    unsigned int v7;  // [bp-0x94]\n    char v8;  // [bp-0x78]\n    unsigned long long v9;  // [bp-0x74]\n    char v10;  // [bp-0x6c]\n    char *v11;  // [bp-0x68]\n    unsigned long long|unsigned long v12;  // [bp-0x60]\n    char v13;  // [bp-0x58]\n    unsigned int v14;  // [bp-0x54]\n    char *v16;  // rdi\n    char *v17;  // rbx\n    unsigned long long v19;  // rax\n    char *v20;  // r13\n    unsigned long long v22;  // cc_dep1\n    unsigned long long v25;  // cc_dep1\n    char *v26;  // rbx\n    unsigned int v27;  // eax\n    char v28;  // al\n    unsigned int|unsigned long v29;  // r15\n    char *v32;  // rbx\n    char *v34;  // rbx\n    unsigned long long v35;  // rax\n    char *v36;  // rdx\n    unsigned int v37;  // eax\n    char v38;  // al\n    unsigned long long v39;  // rax\n    char *v42;  // rdx\n    unsigned int v43;  // eax\n    char v44;  // al\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rax\n    char *v48;  // rdx\n    unsigned int v49;  // eax\n    char v50;  // al\n    unsigned long long v51;  // rax\n    unsigned long long v53;  // rax\n    unsigned long long|unsigned int|unsigned long v54;  // rbx\n    unsigned long long v55;  // rax\n    unsigned int v56;  // eax\n    char v57;  // al\n    unsigned long long v58;  // rax\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // r13\n    unsigned long long v63;  // rax\n\n    v17 = v16;\n    v0 = (unsigned long long)(unsigned int)sub_408620();\n    while (true)\n    {\n        while (true)\n        {\n            if (v4 == 0)\n            {\n                break;\n            }\n            v19 = __ctype_get_mb_cur_max();\n            if (v19 <= 1)\n            {\n                v20 = &v4[strlen(v0)];\n                if (v17 < v4)\n                {\n                    v22 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)v4[-1 + 7] * 2)) & 8);\n                }\n                if (((char)v22 == 0 || v17 >= v4) && *(v20) != 0)\n                {\n                    v25 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)*(v20) * 2)) & 8);\n                }\n                if ((v17 < v4 || (char)v25 != 0) && (v17 < v4 || *(v20) != 0) && ((char)v25 != 0 || (char)v22 != 0) && (*(v20) != 0 || (char)v22 != 0))\n                {\n                    if (v4[0] == 0)\n                    {\n                        break;\n                    }\n                    v17 = &v4[1];\n                    if (v4[1] == 0)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v61 = 1;\n                }\n            }\n            else\n            {\n                v4 = v17;\n                v61 = &v2;\n                v1 = 0;\n                v2 = 0;\n                v3 = 0;\n                if (v17 < v4)\n                {\n                    while (true)\n                    {\n                        if (v1 == 0)\n                        {\n                            v26 = v4;\n                            v27 = *(v4);\n                            v28 = (unsigned long long)*(v4) >> 5;\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0)\n                            {\n                                v5 = 1;\n                                v29 = *(v26);\n                                v6 = 1;\n                                v7 = *(v26);\n                                v3 = 1;\n                            }\n                            else\n                            {\n                                if (mbsinit((unsigned int)&v2) == 0)\n                                {\n                                    break;\n                                }\n                                v1 = 1;\n                            }\n                        }\n                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0)\n                        {\n                            __ctype_get_mb_cur_max();\n                            sub_4085c0();\n                            v5 = (unsigned int)sub_40ab50();\n                            if (v5 == -1)\n                            {\n                                v29 = v7;\n                                v32 = v4;\n                                v6 = 0;\n                                v5 = 1;\n                            }\n                            else if (v5 != -2)\n                            {\n                                if (v5 == 0)\n                                {\n                                    v5 = 1;\n                                    v29 = v7;\n                                    if (v7 != 0 || *(v4) != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    v29 = v7;\n                                }\n                                v6 = 1;\n                                if (mbsinit((unsigned int)&v2) != 0)\n                                {\n                                    v1 = 0;\n                                }\n                                v3 = 1;\n                            }\n                            if (v5 == -2)\n                            {\n                                v32 = v4;\n                                v6 = 0;\n                                v29 = v7;\n                                v5 = strlen(v4);\n                            }\n                        }\n                        if ((v1 == 0 || v5 != -1) && (v1 == 0 || v5 != -2) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0 || v5 != -1) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0 || v5 != -2))\n                        {\n                            if (v29 == 0)\n                            {\n                                break;\n                            }\n                            v32 = v4;\n                        }\n                        v34 = &v32[v5];\n                        v35 = v6;\n                        v3 = 0;\n                        v4 = v34;\n                        if (v35 == 0)\n                        {\n                            break;\n                        }\n                        v61 = (char)(iswalnum(v29) == 0);\n                    }\n                    if (v4 >= v4 && (v5 == -1 || v5 == -2 || v29 != 0))\n                    {\n                        v61 = 1;\n                    }\n                    else if (v4 >= v4 && v35 != 0 && (v5 == -1 || v5 == -2 || v29 != 0))\n                    {\n                        v4 = (unsigned long long)(unsigned int)sub_419cf0();\n                        v1 = 0;\n                        v2 = 0;\n                        v3 = 0;\n                        v11 = v0;\n                        v8 = 0;\n                        v9 = 0;\n                        v10 = 0;\n                    }\n                    else if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 && v1 == 0)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (v4[0] == 0 && v5 == 0)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (v5 == 0)\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else\n                    {\n                        abort(); /* do not return */\n                    }\n                }\n                v61 = 1;\n                v4 = (unsigned long long)(unsigned int)sub_419cf0();\n                v1 = 0;\n                v2 = 0;\n                v3 = 0;\n                v11 = v0;\n                v8 = 0;\n                v9 = 0;\n                v10 = 0;\n                while (true)\n                {\n                    if (v8 == 0)\n                    {\n                        v36 = v11;\n                        v37 = *(v11);\n                        v38 = (unsigned long long)*(v11) >> 5;\n                        if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v11) & 31)) & 1) != 0)\n                        {\n                            v12 = 1;\n                            v13 = 1;\n                            v14 = *(v36);\n                            v10 = 1;\n                        }\n                        else\n                        {\n                            v39 = mbsinit((unsigned int)&v9);\n                            if (v39 == 0)\n                            {\n                                break;\n                            }\n                            v8 = 1;\n                        }\n                    }\n                    if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v11) & 31)) & 1) == 0 || v8 != 0)\n                    {\n                        __ctype_get_mb_cur_max();\n                        sub_4085c0();\n                        v12 = (unsigned int)sub_40ab50();\n                        if (v12 == -1)\n                        {\n                            v12 = 1;\n                            v13 = 0;\n                            v10 = 1;\n                        }\n                        else if (v12 != -2)\n                        {\n                            if (v12 == 0)\n                            {\n                                v12 = 1;\n                                if (v14 != 0 || *(v11) != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v13 = 1;\n                            if (mbsinit((unsigned int)&v9) != 0)\n                            {\n                                v8 = 0;\n                            }\n                            v10 = 1;\n                        }\n                        if (v12 == -2)\n                        {\n                            v13 = 0;\n                            v12 = strlen(v11);\n                            v10 = 1;\n                        }\n                    }\n                    if (v14 != 0 || v12 == -2 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v11) & 31)) & 1) == 0 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v11) & 31)) & 1) == 0 && v12 == -1 || v12 == -2 && v8 != 0 || v12 == -1 && v8 != 0)\n                    {\n                        if (v3 == 0)\n                        {\n                            if (v1 == 0)\n                            {\n                                v42 = v4;\n                                v43 = *(v4);\n                                v44 = (unsigned long long)*(v4) >> 5;\n                                if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0)\n                                {\n                                    v5 = 1;\n                                    v6 = 1;\n                                    v7 = *(v42);\n                                    v3 = 1;\n                                }\n                                else\n                                {\n                                    v45 = mbsinit((unsigned int)&v2);\n                                    if (v45 == 0)\n                                    {\n                                        break;\n                                    }\n                                    v1 = 1;\n                                }\n                            }\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0)\n                            {\n                                __ctype_get_mb_cur_max();\n                                sub_4085c0();\n                                v5 = (unsigned int)sub_40ab50();\n                                if (v5 == -1)\n                                {\n                                    v5 = 1;\n                                    v6 = 0;\n                                }\n                                else if (v5 != -2)\n                                {\n                                    if (v5 == 0)\n                                    {\n                                        v5 = 1;\n                                        if (v7 != 0 || *(v4) != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                    v6 = 1;\n                                    v47 = mbsinit((unsigned int)&v2);\n                                    if (v47 != 0)\n                                    {\n                                        v1 = 0;\n                                    }\n                                    v3 = 1;\n                                }\n                                if (v5 == -2)\n                                {\n                                    v6 = 0;\n                                    v5 = strlen(v4);\n                                }\n                            }\n                        }\n                        if (v7 == 0 && (v3 == 0 || v6 != 0) && (v1 == 0 || v5 != -1 || v3 != 0) && (v1 == 0 || v5 != -2 || v3 != 0) && (v5 != -1 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0 || v3 != 0) && (v5 != -2 || ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0 || v3 != 0))\n                        {\n                            break;\n                        }\n                        v4 = &v4[v5];\n                        v11 = &v11[v12];\n                        v3 = 0;\n                        v10 = 0;\n                    }\n                    else\n                    {\n                        if (v3 == 0)\n                        {\n                            if (v1 == 0)\n                            {\n                                v48 = v4;\n                                v49 = *(v4);\n                                v50 = (unsigned long long)*(v4) >> 5;\n                                if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0)\n                                {\n                                    v5 = 1;\n                                    v54 = *(v48);\n                                    v6 = 1;\n                                    v7 = *(v48);\n                                    v3 = 1;\n                                }\n                                else\n                                {\n                                    v51 = mbsinit((unsigned int)&v2);\n                                    if (v51 == 0)\n                                    {\n                                        break;\n                                    }\n                                    v1 = 1;\n                                }\n                            }\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0)\n                            {\n                                __ctype_get_mb_cur_max();\n                                sub_4085c0();\n                                v5 = (unsigned int)sub_40ab50();\n                                if (v5 == -1)\n                                {\n                                    v5 = 1;\n                                    v54 = v7;\n                                    v6 = 0;\n                                    v3 = 1;\n                                }\n                                else if (v5 != -2)\n                                {\n                                    if (v5 != 0)\n                                    {\n                                        v54 = v7;\n                                    }\n                                    if (v4[0] == 0 && v5 == 0)\n                                    {\n                                        v54 = v7;\n                                    }\n                                    if ((v7 == 0 || v5 != 0) && (v4[0] == 0 || v5 != 0))\n                                    {\n                                        v6 = 1;\n                                        v53 = mbsinit((unsigned int)&v2);\n                                        if (v53 != 0)\n                                        {\n                                            v1 = 0;\n                                        }\n                                        v3 = 1;\n                                    }\n                                }\n                                if (v5 == -2)\n                                {\n                                    v6 = 0;\n                                    v54 = v7;\n                                    v5 = strlen(v4);\n                                    v3 = 1;\n                                }\n                                if (v5 == 0)\n                                {\n                                    v5 = 1;\n                                    if (*(v4) != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v54 = v7;\n                        }\n                        if ((v6 == 0 && v3 != 0 || v5 == -1 && v3 == 0 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0) || v5 == -2 && v3 == 0 && v5 != -1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0) || v54 != 0 && (v3 != 0 && v6 != 0 || v3 == 0 && v1 == 0 && ((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) != 0 || v3 == 0 && v5 != -1 && v5 != -2 && (v7 == 0 || v5 != 0) && (v4[0] == 0 || v5 != 0) && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0))) && v6 != 0)\n                        {\n                            v55 = iswalnum(v54);\n                        }\n                        if (...)\n                        {\n                            break;\n                        }\n                        if (...)\n                        {\n                            v4 = &v4[0];\n                            v1 = 0;\n                            v2 = 0;\n                            v3 = 0;\n                            v56 = v4[0];\n                            v57 = (unsigned long long)v4[0] >> 5;\n                            if (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (v4[0] & 31)) & 1) != 0)\n                            {\n                                v5 = 1;\n                                v6 = 1;\n                                v7 = v4[0];\n                                v3 = 1;\n                            }\n                            else\n                            {\n                                v58 = mbsinit((unsigned int)&v2);\n                                if (v58 == 0)\n                                {\n                                    break;\n                                }\n                                if (v58 != 0)\n                                {\n                                    v1 = 1;\n                                    __ctype_get_mb_cur_max();\n                                    sub_4085c0();\n                                    v5 = (unsigned int)sub_40ab50();\n                                    if (v5 == -1)\n                                    {\n                                        v5 = 1;\n                                    }\n                                    if (v5 == -2)\n                                    {\n                                        v5 = strlen(v4);\n                                    }\n                                    if (v5 == 0)\n                                    {\n                                        v5 = 1;\n                                        if (*(v4) != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            sub_405c00(); /* do not return */\n                        }\n                        if (...)\n                        {\n                            v6 = 1;\n                            v60 = mbsinit((unsigned int)&v2);\n                            if (v60 != 0)\n                            {\n                                v1 = 0;\n                            }\n                            v3 = 1;\n                        }\n                        if (...)\n                        {\n                            break;\n                        }\n                        if (...)\n                        {\n                            v17 = &v4[v5];\n                        }\n                    }\n                }\n                if (...)\n                {\n                    if (*(v17) == 0)\n                    {\n                        break;\n                    }\n                }\n                else if (...)\n                {\n                    v61 = 0;\n                }\n                else if (...)\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (*(v11) == 0 && v12 == 0 && v12 != -2 && v12 != -1 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v11) & 31)) & 1) == 0 || v8 != 0) && (v39 != 0 || v8 != 0) || v3 == 0 && v5 == 0 && v4[0] == 0 && v5 != -1 && v5 != -2 && (((char)((unsigned long long)g_41e840[(unsigned long long)(unsigned int)(rax<4> & 7)] >> (*(v4) & 31)) & 1) == 0 || v1 != 0) && (v45 != 0 || v1 != 0))\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (...)\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (...)\n                {\n                    abort(); /* do not return */\n                }\n                else if (...)\n                {\n                    free(v0);\n                    v63 = v61;\n                    return v63;\n                }\n                if (v17 < v4 || *(v17) != 0)\n                {\n                    abort(); /* do not return */\n                    __assert_fail(); /* do not return */\n                    __assert_fail(); /* do not return */\n                    __assert_fail(); /* do not return */\n                }\n            }\n        }\n        if (v4 == 0 || v19 <= 1)\n        {\n            if (true)\n            {\n                v61 = 0;\n            }\n            else if (v19 <= 1 && (char)v25 == 0 && (char)v22 == 0 || v19 <= 1 && *(v20) == 0 && (char)v22 == 0 || v4 != 0 && v19 > 1 || v19 <= 1 && (char)v25 == 0 && v17 >= v4 || v19 <= 1 && *(v20) == 0 && v17 >= v4)\n            {\n                free(v0);\n                v63 = v61;\n                return v63;\n            }\n        }\n        v61 = 0;\n    }\n    free(v0);\n    v63 = v61;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40aad0",
            "funcStartAddr": "0x40aad0",
            "funcEndAddr": "0x40aae3",
            "decompiledFuncCode": "int sub_40aad0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40aa50();\n}\n"
        },
        {
            "funcName": "sub_4189c0",
            "funcStartAddr": "0x4189c0",
            "funcEndAddr": "0x4189dc",
            "decompiledFuncCode": "int sub_4189c0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp+0x8]\n    unsigned long v5;  // [bp+0x10]\n    unsigned long v6;  // [bp+0x18]\n\n    v3 = 0;\n    v2 = v6;\n    v1 = v5;\n    v0 = v4;\n    return sub_4185b0();\n}\n"
        },
        {
            "funcName": "sub_40cac0",
            "funcStartAddr": "0x40cac0",
            "funcEndAddr": "0x40cb0f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    struct struct_2 *field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    char padding_28[8];\n    char field_30;\n} struct_0;\n\nint sub_40cac0()\n{\n    void tmp_13;  // tmp #13\n    struct_0 *v1;  // rsi\n\n    if (!(v1->field_30 != 11))\n    {\n        v1->field_8->field_20 = v1;\n        return 0;\n    }\n    else if (v1->field_30 != 16)\n    {\n        if (v1->field_8 != 0)\n        {\n            v1->field_8->field_20 = v1->field_20;\n        }\n        if (v1->field_10 != 0)\n        {\n            v1->field_10->field_20 = v1->field_20;\n        }\n        return 0;\n    }\n    tmp_13 = v1->field_10;\n    v1->field_8->field_20 = v1->field_10->field_18;\n    *((unsigned long long *)(tmp_13 + 32)) = v1->field_20;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40aef0",
            "funcStartAddr": "0x40aef0",
            "funcEndAddr": "0x40b0ea",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[152];\n    struct struct_1 *field_98;\n    char padding_a0[56];\n    unsigned long long field_d8;\n} struct_0;\n\ntypedef struct struct_6 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_3 *field_10;\n} struct_6;\n\ntypedef struct struct_8 {\n    char padding_0[40];\n    unsigned long long field_28;\n} struct_8;\n\ntypedef struct struct_7 {\n    unsigned long long field_0;\n    char padding_8[26];\n    unsigned short field_22;\n} struct_7;\n\nint sub_40aef0()\n{\n    unsigned int v0;  // [bp-0x74]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long long v2;  // [bp-0x60]\n    unsigned int v3;  // [bp-0x58]\n    unsigned short v4;  // [bp-0x52]\n    unsigned long v5;  // [bp-0x50]\n    unsigned long long v6[3];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // r15\n    unsigned long v11;  // rcx\n    struct_0 *v12;  // rdi\n    unsigned long long v13;  // rcx\n    unsigned long v14;  // r8\n    unsigned long long v15;  // esi\n    unsigned long long v16;  // rbp\n    unsigned long long *v17;  // rax\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // rbx\n    unsigned long long v20[7];  // r14\n    struct_8 *v21;  // r15\n    struct_7 *v22;  // r12\n    unsigned long long v23;  // rax\n    struct_6 *v24;  // r13\n    unsigned long long v25[7];  // r15\n    unsigned long long v26;  // r14\n\n    v10 = v9;\n    v1 = v11;\n    v24 = v12->field_98->field_30 + v11 * 24;\n    if (*((long long *)(v12->field_98->field_30 + (v11 + (v11 << 1) << 3) + 8)) > 0)\n    {\n        v13 = v10;\n        v26 = v10;\n        v19 = 0;\n        v25 = v12->field_98;\n        v5 = v14 * 40;\n        v2 = 1 << (v13 & 63);\n        v4 = !((unsigned int)(1 << (v13 & 63)));\n        *((unsigned long long *)&v0) = v15 & 2;\n        *((unsigned long long *)&v3) = v15 & 1;\n        while (true)\n        {\n            v16 = v24->field_10[v19];\n            v17 = v24->field_10[v19] * 16 + *(v25);\n            v18 = (char)*((char *)(v24->field_10[v19] * 16 + *(v25) + 8));\n            if (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8)\n            {\n                if (v18 == 4 && v18 != 9 && v14 != -1)\n                {\n                    v15 = v26;\n                    v6[0] = v24;\n                    v7 = v19;\n                    v20 = v25;\n                    v21 = v16;\n                    v22 = v5 + v12->field_d8;\n                    while (true)\n                    {\n                        if (v22->field_0 == v21 && (v15 > 63 || (v22->field_22 & v2) != 0))\n                        {\n                            if (v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))))\n                            {\n                                v23 = sub_40aef0();\n                                if (v23 == -1)\n                                {\n                                    break;\n                                }\n                                if (v23 == 0 && v0 != 0)\n                                {\n                                    break;\n                                }\n                                if (v15 <= 63)\n                                {\n                                    v22->field_22 = v22->field_22 & v4;\n                                }\n                            }\n                            else\n                            {\n                                return 0 - (v15 & 1);\n                            }\n                        }\n                        if (v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))) || v22->field_0 != v21 || v15 <= 63 && (v22->field_22 & v2) == 0)\n                        {\n                            v22 = (char *)&v22[1].field_0 + 4;\n                            v24 = v6;\n                            v21 = v20;\n                            v26 = v15;\n                            v19 = v7 + 1;\n                            break;\n                        }\n                    }\n                    if (v22->field_0 == v21 && v23 == 0 && v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))) && v23 != -1 && (v15 > 63 || (v22->field_22 & v2) != 0))\n                    {\n                        return 0;\n                    }\n                    else if (v22->field_0 == v21 && v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))) && (v15 > 63 || (v22->field_22 & v2) != 0))\n                    {\n                        return -18446744069414584321;\n                    }\n                    else if (v22[-1].padding_8[20] == 0)\n                    {\n                        v16 = v24->field_10[v19];\n                        v17 = v24->field_10[v19] * 16 + *(v25);\n                        v18 = (char)*((char *)(v24->field_10[v19] * 16 + *(v25) + 8));\n                    }\n                    else if (v22[-1].padding_8[20] == 0)\n                    {\n                        return (long long)v15 >> 1;\n                    }\n                }\n                if ((v18 == 9 || v18 == 4) && (*(v17) == v26 || v18 != 9) && (v18 == 9 || v14 != -1) && (v18 != 9 || v0 != 0))\n                {\n                    return 0;\n                }\n            }\n            if (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 && v3 == 0 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 && *(v17) != v26 || v18 == 9 && v0 == 0 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 || v18 == 9 && *(v17) != v26 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 || v14 == -1 && v18 != 9 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 || v18 != 9 && v18 != 4 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8)\n            {\n                v19 += 1;\n                if (v24->field_8 <= v19)\n                {\n                    break;\n                }\n            }\n            if ((v18 == 4 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8) && (*(v17) == v26 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8) && (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 || v18 != 9) && (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 || v14 != -1) && (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 || v3 != 0))\n            {\n                return -18446744069414584321;\n            }\n        }\n    }\n    return (long long)v15 >> 1;\n}\n"
        },
        {
            "funcName": "sub_4068d0",
            "funcStartAddr": "0x4068d0",
            "funcEndAddr": "0x407a08",
            "decompiledFuncCode": "int sub_4068d0()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned int|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long long|char|unsigned long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long|unsigned long v39;  // r11\n    unsigned long long|unsigned long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long long|unsigned short|unsigned long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int|unsigned long v77;  // rsi\n    unsigned long long|unsigned int|char|unsigned long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long|unsigned long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    char|unsigned long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    char|unsigned long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char|unsigned long v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_4067d0();\n            v27 = (unsigned long long)(unsigned int)sub_4067d0();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                    v78 = 0;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                    if (v4 == 0)\n                                    {\n                                        v55 = 0;\n                                    }\n                                    else\n                                    {\n                                        v40 = v45;\n                                        v78 = 0;\n                                    }\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 != 0)\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v48 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v49 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v89 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                            v80 += 1;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 32:\n                        v40 = 32;\n                        v89 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                        else\n                        {\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_4068d0();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40ab50();\n                    v58 = v46;\n                    if (v46 != -2 && v46 != 0 && v46 != -1)\n                    {\n                        if (v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -2 || v46 == 0 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v15 != 1 || v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v63 == 0 || v89 == 0) && (v89 == 0 || v80 < v64) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || v17 != 0) && (v76 == 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_4068d0();\n            }\n            if ((v46 == 0 || v17 == 0) && (v46 == 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0) && (v17 == 0 || v15 != 1 || v89 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v15 != 1 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v6 != 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || v17 != 0) && (v76 == 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0))\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_409d20",
            "funcStartAddr": "0x409d20",
            "funcEndAddr": "0x409d76",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_409d20()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_409410",
            "funcStartAddr": "0x409410",
            "funcEndAddr": "0x409432",
            "decompiledFuncCode": "int sub_409410()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_4093b0(); /* do not return */\n        }\n    }\n    if (v2 != 0 || *(v3) != 12)\n    {\n        v2 = (unsigned int)sub_41ae10();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40e0e0",
            "funcStartAddr": "0x40e0e0",
            "funcEndAddr": "0x40e434",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[152];\n    struct struct_2 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[8];\n    unsigned long long field_c8;\n    char padding_d0[8];\n    unsigned long long field_d8;\n} struct_1;\n\nint sub_40e0e0()\n{\n    unsigned long v0;  // [bp-0x98]\n    unsigned long long *|unsigned long v1;  // [bp-0x90]\n    unsigned long long|unsigned long v2;  // [bp-0x88]\n    unsigned long long v3;  // [bp-0x80]\n    unsigned long v4;  // [bp-0x78]\n    unsigned int v5;  // [bp-0x6c]\n    unsigned int v6;  // [bp-0x5c]\n    unsigned long long v7;  // [bp-0x58]\n    unsigned long long v8;  // [bp-0x50]\n    unsigned long long *v9;  // [bp-0x48]\n    unsigned long long v11;  // r11\n    struct_1 *v12;  // rdi\n    unsigned long long v13;  // rbp\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r9\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long v20;  // rcx\n    unsigned long long v21;  // rbx\n    unsigned int v22;  // r8d\n    unsigned long long v23[28];  // rbp\n    unsigned long v24;  // rsi\n    unsigned long long v25[4];  // r15\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r14\n    unsigned long long v28;  // r14\n    unsigned int|unsigned long v29;  // rax\n    unsigned long long v30;  // r10\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // r10\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rax\n    unsigned int v35;  // r14d\n    unsigned int v36;  // r15d\n\n    v11 = 0;\n    v13 = v12->field_c8;\n    for (v18 = v12->field_c8; v11 < v18; v18 = v16)\n    {\n        if (v14 > *((long long *)(v12->field_d8 + (((v11 + v18 >> 63) + v11 + v18 >> 1) + ((v11 + v18 >> 63) + v11 + v18 >> 1 << 2) << 3) + 8)))\n        {\n            v17 = v16;\n            v16 = v18;\n        }\n        else\n        {\n            for (v16 = (v11 + v18 >> 63) + v11 + v18 >> 1; v16 > 0; v16 = v15)\n            {\n                v15 = (v16 + 0 >> 63) + v16 + 0 >> 1;\n                v17 = (v16 + 0 >> 63) + v16 + 0 >> 1;\n                if (v14 > *((long long *)(v12->field_d8 + (((v16 + 0 >> 63) + v16 + 0 >> 1) + ((v16 + 0 >> 63) + v16 + 0 >> 1 << 2) << 3) + 8)))\n                {\n                    break;\n                }\n            }\n            if (v16 > 0)\n            {\n                v11 = v17 + 1;\n            }\n        }\n        v11 = v17 + 1;\n    }\n    v19 = v12->field_d8;\n    v3 = v11 * 40;\n    if (*((long long *)(v12->field_d8 + (v11 + (v11 << 2) << 3) + 8)) == v14 && v11 != -1)\n    {\n        v4 = v20;\n        v21 = v14;\n        v5 = v22;\n        v23 = v12;\n        v0 = v24 + 16;\n        while (true)\n        {\n            v25 = v19 + v3;\n            while (true)\n            {\n                v26 = sub_40c890();\n                if (v26 != 0)\n                {\n                    v27 = v25[3] + v21 - v25[2];\n                    if (v21 != v25[3] + v21 - v25[2])\n                    {\n                        v30 = v23[23] + v27 * 8;\n                        v2 = v27 * 8;\n                        v1 = *((long long *)(v12->field_98->field_18 + v16 * 8));\n                        if (*((long long *)(v23[23] + (v27 << 3))) != 0)\n                        {\n                            v31 = sub_40c890();\n                            if (v31 == 0)\n                            {\n                                v6 = sub_40d930();\n                                v33 = sub_40b280();\n                                if (v6 == 0 && v33 == 1)\n                                {\n                                    v32 = v2 + v23[23];\n                                }\n                                if (v6 != 0 || v33 != 1)\n                                {\n                                    free(v9);\n                                    v34 = v6;\n                                    if (v6 != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v2 = v30;\n                            v7 = 1;\n                            v8 = 1;\n                            v9 = malloc(0x8);\n                            if (v9 != 0)\n                            {\n                                v6 = 0;\n                                v32 = v2;\n                                *(v9) = v1;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v28 = *((long long *)*((long long *)(v12->field_98->field_28 + v16 * 24 + 16)));\n                        v29 = sub_40c890();\n                        if (v29 == 0)\n                        {\n                            v7 = 1;\n                            v8 = 1;\n                            v9 = malloc(0x8);\n                            if (v9 != 0)\n                            {\n                                *(v9) = v28;\n                                v29 = 0;\n                            }\n                            else\n                            {\n                                v8 = 0;\n                                v29 = 12;\n                                v7 = 0;\n                            }\n                            *((unsigned long *)&v6) = v29;\n                            v35 = (unsigned long long)sub_40d200();\n                            v36 = sub_40cdd0();\n                            free(v9);\n                            v34 = v6;\n                            if (v6 == 0 && v35 == 0 && v36 == 0)\n                            {\n                                v19 = v12->field_d8;\n                            }\n                            else\n                            {\n                                if ((unsigned int)v34 != 0)\n                                {\n                                    break;\n                                }\n                                v34 = (unsigned int)(v35 != 0? (unsigned int)r14<8> : (unsigned int)r15<8>);\n                            }\n                        }\n                    }\n                }\n                if (v6 == 0 && v31 == 0 && v33 == 1 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 || *((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v9 != 0 && v26 != 0)\n                {\n                    v1 = v32;\n                    *(v1) = (unsigned int)sub_40de40();\n                    free(v9);\n                    if (*((long long *)(v23[23] + (v27 << 3))) == 0)\n                    {\n                        v34 = v6;\n                    }\n                }\n                if (v31 == 0 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && (v6 != 0 || v33 != 1) && v6 == 0 || *((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v26 != 0 && v9 == 0)\n                {\n                    return 12;\n                }\n                if ((v6 == 0 && v31 == 0 && v33 == 1 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 || *((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v9 != 0 && v26 != 0) && *((long long *)(v23[23] + (v27 << 3))) == 0 && v6 == 0 || (v6 == 0 && v31 == 0 && v33 == 1 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 || *((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v9 != 0 && v26 != 0) && *((long long *)(v23[23] + (v27 << 3))) != 0 || v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v31 != 0 || v21 == v25[3] + v21 - v25[2] && v26 != 0 && v29 != 0 || v26 == 0)\n                {\n                    v25 = &v25[5];\n                    if ((char)v25[-1] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v21 == v25[3] + v21 - v25[2] && v26 != 0 && v29 != 0 || v26 == 0 || (*((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v9 != 0 && v26 != 0 || v6 == 0 && v31 == 0 && v33 == 1 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0) && *((long long *)(v23[23] + (v27 << 3))) == 0 && v6 == 0 || v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v31 != 0 || (*((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v9 != 0 && v26 != 0 || v6 == 0 && v31 == 0 && v33 == 1 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0) && *((long long *)(v23[23] + (v27 << 3))) != 0)\n            {\n                v34 = 0;\n            }\n            else if (v21 == v25[3] + v21 - v25[2] && v6 == 0 && v29 == 0 && v35 == 0 && v36 == 0 && v26 != 0)\n            {\n                v25 = v19 + v3;\n            }\n            else if (v21 == v25[3] + v21 - v25[2] && v29 == 0 && v26 != 0 && (v6 != 0 || v35 != 0 || v36 != 0) || v21 == v25[3] + v21 - v25[2] && v29 == 0 && v26 != 0 && (v6 != 0 || v35 != 0 || v36 != 0) && (unsigned int)v34 == 0 || (*((long long *)(v23[23] + (v27 << 3))) == 0 && v21 != v25[3] + v21 - v25[2] && v9 != 0 && v26 != 0 || v6 == 0 && v31 == 0 && v33 == 1 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0) && *((long long *)(v23[23] + (v27 << 3))) == 0 && v6 != 0 || v31 == 0 && v21 != v25[3] + v21 - v25[2] && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && (v6 != 0 || v33 != 1))\n            {\n                return v34;\n            }\n        }\n        if (true)\n        {\n            v34 = 0;\n        }\n        else\n        {\n            return v34;\n        }\n    }\n    v34 = 0;\n    return v34;\n}\n"
        },
        {
            "funcName": "sub_4112a0",
            "funcStartAddr": "0x4112a0",
            "funcEndAddr": "0x411977",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[72];\n    struct struct_1 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[72];\n    unsigned long long field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_2;\n\ntypedef struct struct_4 {\n    char padding_0[40];\n    unsigned long long field_28;\n    struct struct_5 *field_30;\n    char padding_38[48];\n    char field_68;\n} struct_4;\n\nint sub_4112a0()\n{\n    unsigned int|unsigned long v0;  // [bp-0xf8]\n    unsigned long long *v1;  // [bp-0xf0]\n    unsigned long long v2;  // [bp-0xe8]\n    unsigned long long *v3;  // [bp-0xe0]\n    unsigned long long v4[4];  // [bp-0xd8]\n    unsigned long v5;  // [bp-0xd0]\n    unsigned long v6;  // [bp-0xc0]\n    unsigned long v7;  // [bp-0xb8]\n    unsigned long long v8;  // [bp-0xb0]\n    unsigned long long v9[3];  // [bp-0xa8]\n    unsigned long v10;  // [bp-0xa0]\n    unsigned long v11;  // [bp-0x98]\n    unsigned long v12;  // [bp-0x90]\n    unsigned int v13;  // [bp-0x80]\n    unsigned int v14;  // [bp-0x7c]\n    uint128_t|unsigned long long v15;  // [bp-0x78]\n    unsigned long long v16;  // [bp-0x70]\n    unsigned long long v17;  // [bp-0x68]\n    uint128_t v18;  // [bp-0x58]\n    unsigned long long v19;  // [bp-0x50]\n    unsigned long long v20;  // [bp-0x48]\n    struct_0 *v22;  // rdi\n    struct_2 *v23;  // r12\n    unsigned long long v24;  // rcx\n    unsigned long long v26[3];  // rsi\n    unsigned long long v27;  // r15\n    unsigned long v28;  // r8\n    unsigned long long *v29;  // rdx\n    unsigned long v30;  // r9\n    unsigned long v31;  // rbx\n    unsigned long long v34;  // rax\n    unsigned long long *v36;  // r14\n    unsigned long long v37;  // rcx\n    unsigned long long|unsigned long long * v38;  // rax\n    unsigned long long v39;  // r14\n    unsigned long long *v40;  // r13\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rdx\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rax\n    unsigned long long v49;  // r14\n    struct_4 *v50;  // r15\n    unsigned long long|unsigned long long * v51;  // rbx\n    unsigned long long v52;  // rax\n\n    v23 = v22;\n    v27 = v26[1];\n    v9[0] = v26;\n    v12 = v28;\n    v4[0] = v22->field_98;\n    v6 = *((long long *)(v29 * 16 + v22->field_98->field_0));\n    v13 = 0;\n    if ((int)v22->field_e0 + v30 >= v26[1])\n    {\n        v31 = (int)v22->field_e0 + v30 + 1;\n        if (9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1 && v27 + v31 <= 2305843009213693951)\n        {\n            v34 = realloc(v9[2], (v26[1] + (int)v22->field_e0 + v30 + 1) * 8);\n            if (v34 != 0)\n            {\n                v9[2] = v34;\n                v9[1] = v27 + v31;\n                memset(v34 + v27 * 8, 0x0, v31 * 8);\n            }\n        }\n    }\n    if ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951 && v34 != 0 && 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1)\n    {\n        v51 = *(v9);\n        v36 = v9[2];\n        v10 = v23->field_b8;\n        v37 = v23->field_48;\n        *((unsigned long long [3])&v23->field_b8) = v9[2];\n        v11 = v37;\n        v15 = 1;\n        v16 = 1;\n        v17 = malloc(0x8);\n    }\n    if ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951 && v34 != 0 && 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1)\n    {\n        if (v51 != 0)\n        {\n            v23->field_48 = v51;\n            v0 = sub_40e5c0();\n        }\n        else\n        {\n            v23->field_48 = v51;\n            v0 = sub_40e5c0();\n        }\n        if (v17 != 0)\n        {\n            *((unsigned long long **)v17) = v29;\n            v51 = v24;\n            v13 = 0;\n            v13 = (int)sub_40d200();\n            if (v13 == 0 && v16 != 0)\n            {\n                v13 = sub_40e0e0();\n            }\n        }\n    }\n    if (false)\n    {\n        v50 = *((long long *)((char *)v36 + 0x8 * v51));\n        v17 = 0;\n        v15 = 0;\n        v52 = sub_40d930();\n        v13 = v52;\n    }\n    if (v17 == 0 || v34 == 0 && (int)v22->field_e0 + v30 >= v26[1] || 9223372036854775807 - v26[1] < (int)v22->field_e0 + v30 + 1 && (int)v22->field_e0 + v30 >= v26[1] || v27 + v31 > 2305843009213693951 && (int)v22->field_e0 + v30 >= v26[1])\n    {\n        v52 = 12;\n    }\n    if (v13 == 0 && v17 != 0 && (v27 + v31 <= 2305843009213693951 || (int)v22->field_e0 + v30 < v26[1]) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 != 0 || v13 == 0 && v17 != 0 && (v27 + v31 <= 2305843009213693951 || (int)v22->field_e0 + v30 < v26[1]) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 == 0)\n    {\n        v50 = (unsigned long long)(unsigned int)sub_40db40();\n    }\n    if ((v13 == 0 && v17 != 0 && (v27 + v31 <= 2305843009213693951 || (int)v22->field_e0 + v30 < v26[1]) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 != 0 || v13 == 0 && v17 != 0 && (v27 + v31 <= 2305843009213693951 || (int)v22->field_e0 + v30 < v26[1]) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 == 0) && v50 == 0 && v13 == 0 || (v13 == 0 && v17 != 0 && (v27 + v31 <= 2305843009213693951 || (int)v22->field_e0 + v30 < v26[1]) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 != 0 || v13 == 0 && v17 != 0 && (v27 + v31 <= 2305843009213693951 || (int)v22->field_e0 + v30 < v26[1]) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 == 0) && v50 != 0)\n    {\n        *((struct_4 **)(v23->field_b8 + v51 * 8)) = v50;\n        if (v51 < v30 && v23->field_e0 >= 0)\n        {\n            v2 = 0;\n            v38 = v23->field_b8;\n            v49 = (char *)v51 + 1;\n            do\n            {\n                v16 = 0;\n                v0 = v49 - 1;\n                v3 = v49 * 8;\n                if (v38[v49] != 0)\n                {\n                    v13 = sub_40cdd0();\n                    if (v13 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v50 == 0)\n                {\n                    v51 = v49;\n                }\n                if (v50 != 0 && (v13 == 0 || v38[v49] == 0))\n                {\n                    v14 = 0;\n                    v18 = 0;\n                    v20 = 0;\n                    if (v50->field_28 > 0)\n                    {\n                        v8 = v49;\n                        v5 = &v22->field_98[6].field_18;\n                        v39 = 0;\n                        while (true)\n                        {\n                            v40 = v50->field_30[v39];\n                            if ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0)\n                            {\n                                v41 = sub_411010();\n                                if ((unsigned int)v41 > 1)\n                                {\n                                    v1 = v40 * 8;\n                                    v42 = v41 + v0;\n                                    v43 = *((long long *)(v22->field_98->field_18 + v40 * 8));\n                                    v19 = 0;\n                                    if (*((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0)\n                                    {\n                                        v7 = v43;\n                                        v14 = sub_40cdd0();\n                                    }\n                                    if (v14 == 0 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) == 0)\n                                    {\n                                        v45 = sub_40b280();\n                                        if (v45 != 0)\n                                        {\n                                            *((unsigned long long *)(v42 * 8 + v23->field_b8)) = (unsigned int)sub_40de40();\n                                        }\n                                    }\n                                    if (v14 != 0 && (*((long long *)(v23->field_b8 + (v42 << 3))) == 0 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0) && (*((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0 || v45 != 0))\n                                    {\n                                        v49 = v8;\n                                        free(v20);\n                                        v13 = v14;\n                                        if (v14 != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0 || (unsigned int)v41 == 0 && (unsigned int)v41 <= 1)\n                            {\n                                v44 = sub_40e6b0();\n                            }\n                            if (((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0 || (unsigned int)v41 <= 1) && ((unsigned int)v41 != 0 || v44 != 0) && ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 || v44 != 0))\n                            {\n                                v1 = v40 * 8;\n                            }\n                            if ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0 && v44 != 0 || (unsigned int)v41 <= 1 && v44 != 0 || (unsigned int)v41 <= 1 && (unsigned int)v41 != 0 && (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 || v14 == 0 && v45 != 0 && (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 && (unsigned int)v41 > 1 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) == 0 && *((long long *)(v23->field_b8 + (v42 << 3))) != 0 && v45 != 0 && (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 && (unsigned int)v41 > 1)\n                            {\n                                v47 = sub_40b280();\n                            }\n                            if (...)\n                            {\n                                free(v20);\n                                v13 = 12;\n                            }\n                            if (...)\n                            {\n                                v39 += 1;\n                                v49 = v8;\n                            }\n                        }\n                        if (false)\n                        {\n                            v51 = v49;\n                        }\n                        else if (v39 >= v50->field_28 && (v44 == 0 || v47 != 0))\n                        {\n                            free(NULL);\n                            v13 = 0;\n                        }\n                        else if (v47 == 0 || v45 == 0 && (unsigned int)v41 > 1 || *((long long *)(v23->field_b8 + (v42 << 3))) == 0 && v14 != 0 && (unsigned int)v41 > 1 || v14 != 0 && *((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0 && (unsigned int)v41 > 1)\n                        {\n                            free(v17);\n                            v52 = v13;\n                        }\n                    }\n                    if (v50->field_28 <= 0 || v16 != 0)\n                    {\n                        free(NULL);\n                        v13 = 0;\n                    }\n                }\n                if (v13 == 0 && v38[v49] != 0 || v38[v49] == 0 && v50 != 0)\n                {\n                    v51 = v49;\n                    if (v16 != 0)\n                    {\n                        v13 = (int)sub_40d200();\n                        v13 = sub_40e0e0();\n                        if (v13 != 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                sub_40e5c0();\n                v50 = (unsigned long long)(unsigned int)sub_40db40();\n                if (v50 != 0)\n                {\n                    v38 = v23->field_b8;\n                    v2 = 0;\n                    *((struct_4 **)&((char *)v3)[v23->field_b8]) = v50;\n                }\n                else\n                {\n                    if (v13 != 0)\n                    {\n                        break;\n                    }\n                    v38 = v23->field_b8;\n                    v2 += 1;\n                    *((long long *)&((char *)v3)[v23->field_b8]) = 0;\n                }\n                if (v30 <= v49)\n                {\n                    break;\n                }\n                v49 += 1;\n            }\n            while ((int)v23->field_e0 >= v2);\n            if (v50 == 0 || v50->field_28 > 0 || v38[v49] != 0 || v16 != 0)\n            {\n                free(v17);\n                v52 = v13;\n            }\n            else if (v13 == 0 || v50 != 0)\n            {\n                free(v17);\n            }\n        }\n    }\n    if (...)\n    {\n        free(v17);\n        v52 = v13;\n    }\n    if (...)\n    {\n        free(v17);\n        if (*((long long *)(v23->field_b8 + (v30 << 3))) != 0)\n        {\n            v9[0] = v51;\n            v23->field_b8 = v10;\n            v23->field_48 = v11;\n            v52 = (char)(sub_40c890() == 0);\n        }\n        else\n        {\n            v9[0] = v51;\n            v23->field_b8 = v10;\n            v23->field_48 = v11;\n            v52 = 1;\n        }\n    }\n    return v52;\n}\n"
        },
        {
            "funcName": "sub_407f10",
            "funcStartAddr": "0x407f10",
            "funcEndAddr": "0x407fa5",
            "decompiledFuncCode": "extern struct_0 *g_623338;\nextern unsigned long long g_623340;\nextern unsigned long long g_623348;\nextern unsigned int g_623350;\nextern unsigned long long g_623b40;\n\nint sub_407f10()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_623350;\n    if (g_623350 > 1)\n    {\n        v2 = &g_623338[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_623338[(unsigned long long)(g_623350 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_623338->field_8 != 6437696)\n    {\n        v1 = free(g_623338->field_8);\n        g_623340 = 0x100;\n        g_623348 = &g_623b40;\n    }\n    if (g_623338 != 6435648)\n    {\n        v1 = free(g_623338);\n        g_623338 = &g_623340;\n    }\n    g_623350 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40bf10",
            "funcStartAddr": "0x40bf10",
            "funcEndAddr": "0x40bf30",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_0;\n\nint sub_40bf10()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_8 & 262399) != 6 && (v1->field_8 & 262399) != 3)\n    {\n        return v1->field_8 & 262399;\n    }\n}\n"
        },
        {
            "funcName": "sub_414900",
            "funcStartAddr": "0x414900",
            "funcEndAddr": "0x4150bc",
            "decompiledFuncCode": "typedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_4 *field_10;\n} struct_3;\n\ntypedef struct struct_8 {\n    char padding_0[16];\n    unsigned long long field_10;\n    struct struct_4 *field_18;\n} struct_8;\n\ntypedef struct struct_7 {\n    unsigned long long field_0;\n    char field_8;\n} struct_7;\n\ntypedef struct struct_6 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n} struct_6;\n\ntypedef struct struct_5 {\n    char padding_0[104];\n    char field_68;\n} struct_5;\n\nint sub_414900()\n{\n    void tmp_43;  // tmp #43\n    void tmp_14;  // tmp #14\n    unsigned long v0;  // [bp-0xe8]\n    unsigned int|unsigned long long [28] v1;  // [bp-0xd0]\n    struct_8 *v2;  // [bp-0xc8]\n    unsigned long long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb8]\n    unsigned long v5;  // [bp-0xb0]\n    unsigned long long v6;  // [bp-0xa8]\n    unsigned long long v7;  // [bp-0xa0]\n    unsigned long long v8;  // [bp-0x98]\n    unsigned long long v9;  // [bp-0x90]\n    unsigned int v10;  // [bp-0x7c]\n    unsigned long long|unsigned int|void v11;  // [bp-0x78]\n    unsigned long long|void v12;  // [bp-0x68]\n    unsigned long long v13;  // [bp-0x60]\n    void v14;  // [bp-0x58]\n    unsigned long v15;  // [bp-0x50]\n    void *v16;  // [bp-0x48]\n    unsigned long long v18;  // rdx\n    unsigned long long v20[3];  // rcx\n    struct_3 *v21;  // rbp\n    unsigned long long v22;  // rsi\n    unsigned long long v23[28];  // rdi\n    unsigned long long *v24;  // r12\n    unsigned long long v25;  // rdx\n    struct struct_5 **v26;  // rcx\n    unsigned long long v27;  // rdi\n    unsigned long long *v29;  // rbx\n    unsigned long long v30[10];  // r15\n    unsigned long long v31;  // r13\n    unsigned long long v32;  // rax\n    unsigned long long v33[4];  // rdx\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rsi\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // r13\n    unsigned long long|unsigned long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long long *v40;  // rcx\n    unsigned long long v41;  // rsi\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rdi\n    unsigned long long *v44;  // rdx\n    unsigned int v45;  // r13d\n    struct_7 *v46;  // rax\n    unsigned long long v47;  // r13\n    unsigned long long v48;  // rbx\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbx\n    unsigned long long *v53;  // r13\n    unsigned long long|unsigned int|unsigned long v54;  // rax\n    unsigned long long v55;  // r12\n    unsigned long long v56;  // rsi\n    unsigned long long v57;  // rax\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // r8\n    unsigned long long *v62;  // r13\n    unsigned long long v63;  // r15\n    unsigned long long v64;  // r14\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // r12\n    struct_6 *v68;  // rbx\n    unsigned long long v69;  // r10\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rax\n    unsigned long long v74;  // rdx\n    unsigned long long v76;  // rdx\n    unsigned long long v78;  // rax\n\n    v21 = v20;\n    tmp_43 = v18 * 8;\n    v52 = v22;\n    v24 = v23[19];\n    v25 = v20[1];\n    v3 = tmp_43;\n    v26 = tmp_43 + v23[23];\n    v1[0] = v23;\n    v27 = *((long long *)(tmp_43 + v23[23]));\n    v10 = 0;\n    v2 = v27;\n    if (v2 != 0)\n    {\n        if (v25 == 0)\n        {\n            *((long long *)(*((long long *)v22) + v6 * 8)) = 0;\n            v54 = 0;\n        }\n        else\n        {\n            v11 = 0;\n            v30 = (unsigned long long)(unsigned int)sub_40de40();\n            v54 = v11;\n            if (v11 == 0)\n            {\n                v31 = v30[7];\n                v4 = &v30[7];\n                if (v30[7] == 0)\n                {\n                    tmp_14 = v21->field_8;\n                    v30[8] = 0;\n                    v30[7] = tmp_14;\n                    v32 = malloc(tmp_14 * 8);\n                    v30[9] = v32;\n                    if (v32 != 0)\n                    {\n                        v11 = 0;\n                        if (v21->field_8 > 0)\n                        {\n                            do\n                            {\n                                v11 = sub_40cdd0();\n                                v31 += 1;\n                            }\n                            while (v11 == 0 && v31 < v21->field_8);\n                            if (v11 == 0)\n                            {\n                                v5 = &v2->padding_0[8];\n                                v54 = sub_40d340();\n                                v10 = v54;\n                            }\n                            else\n                            {\n                                v54 = 12;\n                            }\n                        }\n                    }\n                    if ((v32 == 0 || v21->field_8 > 0) && (v32 == 0 || (unsigned int)v54 != 0))\n                    {\n                        v54 = 12;\n                    }\n                }\n                if (v32 != 0 || v30[7] != 0)\n                {\n                    if (v21->field_8 <= 0 || (unsigned int)v54 != 0 || v30[7] != 0)\n                    {\n                        v5 = &v2->padding_0[8];\n                        v54 = sub_40d340();\n                        v10 = v54;\n                    }\n                    if ((unsigned int)v54 == 0 && (v21->field_8 <= 0 || v30[7] != 0))\n                    {\n                        if (*((long long *)(v22 + 40)) != 0)\n                        {\n                            *((unsigned long long [28])&v4) = v1[27];\n                            if (*((long long *)(v22 + 40)) > 0)\n                            {\n                                v51 = 0;\n                                while (true)\n                                {\n                                    v33 = v4 + *((long long *)(*((long long *)(v52 + 48)) + v51 * 8)) * 40;\n                                    if (v6 <= v33[1] && v6 > *((long long *)(v4 + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) << 2) << 3) + 16)))\n                                    {\n                                        v34 = *(v24);\n                                        v35 = v21->field_8;\n                                        v36 = *((long long *)(*(v24) + *(v33) * 16));\n                                        if (v6 != v33[3])\n                                        {\n                                            v37 = 0;\n                                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v6 = v52;\n                                                v42 = v36;\n                                                while (true)\n                                                {\n                                                    v46 = v34 + v21->field_10[v37] * 16;\n                                                    if ((unsigned int)v46->field_8 - 8 <= 1 && v42 == v46->field_0)\n                                                    {\n                                                        v54 = sub_40f0a0();\n                                                        if ((unsigned int)v54 != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if ((unsigned int)v54 == 0)\n                                                        {\n                                                            v37 += 1;\n                                                        }\n                                                    }\n                                                    if ((unsigned int)v46->field_8 - 8 > 1 || v42 != v46->field_0)\n                                                    {\n                                                        v37 += 1;\n                                                    }\n                                                    if ((unsigned int)v54 == 0 || (unsigned int)v46->field_8 - 8 > 1 || v42 != v46->field_0)\n                                                    {\n                                                        if (((unsigned int)v46->field_8 - 8 <= 1 || v37 < v21->field_8) && (v42 == v46->field_0 || v37 < v21->field_8) && (v37 < v21->field_8 || (unsigned int)v46->field_8 - 8 > 1 || v42 != v46->field_0))\n                                                        {\n                                                            v34 = *(v24);\n                                                        }\n                                                        if (((unsigned int)v46->field_8 - 8 <= 1 || v37 >= v21->field_8) && (v42 == v46->field_0 || v37 >= v21->field_8) && ((unsigned int)v46->field_8 - 8 > 1 || v42 != v46->field_0 || v37 >= v21->field_8))\n                                                        {\n                                                            v52 = v6;\n                                                        }\n                                                    }\n                                                }\n                                                if (((unsigned int)v46->field_8 - 8 <= 1 || v37 >= v21->field_8) && (v42 == v46->field_0 || v37 >= v21->field_8) && ((unsigned int)v54 == 0 || (unsigned int)v46->field_8 - 8 > 1 || v42 != v46->field_0) && ((unsigned int)v46->field_8 - 8 > 1 || v42 != v46->field_0 || v37 >= v21->field_8))\n                                                {\n                                                    v51 += 1;\n                                                    if (v51 >= *((long long *)(v52 + 40)))\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                else if ((unsigned int)v46->field_8 - 8 <= 1 && v42 == v46->field_0)\n                                                {\n                                                    return v54;\n                                                }\n                                            }\n                                        }\n                                        else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                        {\n                                            v38 = -1;\n                                            v39 = &v21->field_10[v35];\n                                            v40 = v21->field_10;\n                                            v41 = -1;\n                                            while (true)\n                                            {\n                                                v43 = *(v40);\n                                                v44 = *(v40) * 16 + v34;\n                                                v45 = (char)*((char *)(*(v40) * 16 + v34 + 8));\n                                                if (*((char *)((*(v40) << 4) + v34 + 8)) != 8)\n                                                {\n                                                    if (v45 == 9)\n                                                    {\n                                                        v38 = (v42 == *(v44)? v43 : r9<8>);\n                                                    }\n                                                    v40 = &v40[1];\n                                                    if (v39 == v40)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v41 = (v42 == *(v44)? v43 : rsi<8>);\n                                                    v40 = &v40[1];\n                                                    if (v39 == v40)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            v47 = v38;\n                                            v6 = v38;\n                                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v54 = sub_40f0a0();\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            if (((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (unsigned int)v54 == 0) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || v21->field_8 > 0) && (!((char)(v6 - 0 >> 63)) || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>))))\n                                            {\n                                                v7 = v52;\n                                                v48 = 0;\n                                                while (true)\n                                                {\n                                                    v49 = sub_40c890();\n                                                    if (v49 == 0)\n                                                    {\n                                                        v50 = sub_40c890();\n                                                        if (v50 == 0)\n                                                        {\n                                                            v54 = sub_40f0a0();\n                                                        }\n                                                    }\n                                                    if (v49 != 0 || v50 != 0)\n                                                    {\n                                                        v48 += 1;\n                                                    }\n                                                    if (v21->field_8 <= v48 && ((unsigned int)v54 == 0 || v49 != 0 || v50 != 0))\n                                                    {\n                                                        v52 = v7;\n                                                    }\n                                                }\n                                                if (v49 == 0 && v50 == 0 && (unsigned int)v54 != 0)\n                                                {\n                                                    return v54;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if (((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (unsigned int)v54 == 0) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || v21->field_8 > 0) && (!((char)(v6 - 0 >> 63)) || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>))) && v51 >= *((long long *)(v52 + 40)) || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) && (char)(v6 - 0 >> 63) || v51 >= *((long long *)(v52 + 40)) || (unsigned int)v54 == 0 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && v21->field_8 <= 0 || (unsigned int)v54 == 0 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || v6 <= *((long long *)(v4 + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) << 2) << 3) + 16)) || v6 > v33[1])\n                                {\n                                    v10 = 0;\n                                }\n                                else if (!((char)(v6 - 0 >> 63)) || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                {\n                                    return v54;\n                                }\n                            }\n                            v10 = 0;\n                        }\n                        v53 = v3 + *((long long *)v52);\n                        *(v53) = (unsigned int)sub_40de40();\n                        v54 = v10;\n                        if (v10 == 0)\n                        {\n                            v54 = 0;\n                        }\n                    }\n                }\n            }\n        }\n        if (v10 == 0 && v11 == 0 && (unsigned int)v54 == 0 && v25 != 0 && (v21->field_8 <= 0 || v30[7] != 0) && (v32 != 0 || v30[7] != 0) && (*((char *)(*((long long *)(v3 + v1[23])) + 104)) & 64) != 0 || v25 == 0 && (*(v26)->field_68 & 64) != 0)\n        {\n            v55 = 0;\n            v56 = v1[25];\n            for (v57 = v1[25]; v55 < v57; v57 = v59)\n            {\n                if (v6 > *((long long *)(v1[27] + (((v55 + v57 >> 63) + v55 + v57 >> 1) + ((v55 + v57 >> 63) + v55 + v57 >> 1 << 2) << 3) + 8)))\n                {\n                    v61 = v59;\n                    v59 = v57;\n                }\n                else\n                {\n                    for (v59 = (v55 + v57 >> 63) + v55 + v57 >> 1; 0 < v59; v59 = v60)\n                    {\n                        v60 = (0 + v59 >> 63) + 0 + v59 >> 1;\n                        v61 = (0 + v59 >> 63) + 0 + v59 >> 1;\n                        if (v6 > *((long long *)(v1[27] + (((0 + v59 >> 63) + 0 + v59 >> 1) + ((0 + v59 >> 63) + 0 + v59 >> 1 << 2) << 3) + 8)))\n                        {\n                            break;\n                        }\n                    }\n                    if (0 < v59)\n                    {\n                        v55 = v61 + 1;\n                    }\n                }\n                v55 = v61 + 1;\n            }\n            v7 = v55 * 40;\n            if (v6 == *((long long *)(v1[27] + (v55 + (v55 << 2) << 3) + 8)) && v55 != -1)\n            {\n                v62 = v1[19];\n                v11 = 0;\n                if (v2->field_10 > 0)\n                {\n                    v6 = v18;\n                    v63 = 0;\n                    v64 = v52;\n                    v8 = v55;\n                    while (true)\n                    {\n                        v65 = v2->field_18[v63];\n                        v66 = (char)*((char *)(v2->field_18[v63] * 16 + *(v62) + 8));\n                        if (v66 == 4 && (v2->field_18[v63] != *((long long *)(v64 + 16)) || v6 != *((long long *)(v64 + 24))))\n                        {\n                            v9 = v63;\n                            v67 = v8;\n                            v68 = v7 + v1[27];\n                            v5 = v12 * 24;\n                            v4 = v12 * 8;\n                            while (true)\n                            {\n                                if (v12 == v68->field_0)\n                                {\n                                    v69 = v6 + v68->field_18 - v68->field_10;\n                                    if (v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10)\n                                    {\n                                        v70 = sub_40c890();\n                                        if (v70 != 0)\n                                        {\n                                            v0 = v69;\n                                            v71 = sub_40cb20();\n                                            if ((long long)v11 == 0 && v71 == 0)\n                                            {\n                                                *((int128_t *)&v11) = *((int128_t *)v64);\n                                                *((int128_t *)&v12) = *((int128_t *)(v64 + 16));\n                                                *((int128_t *)&v14) = *((int128_t *)(v64 + 32));\n                                                v16 = *((long long *)(v64 + 48));\n                                                v54 = sub_40d930();\n                                            }\n                                        }\n                                    }\n                                }\n                                if (v12 == v68->field_0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 == 0 && (unsigned int)v54 == 0 || v12 == v68->field_0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 != 0)\n                                {\n                                    v12 = v65;\n                                    v13 = v6;\n                                    v72 = sub_40b280();\n                                    if (v72 != 0)\n                                    {\n                                        v54 = sub_412e70();\n                                        if ((unsigned int)v54 == 0)\n                                        {\n                                            v74 = (long long)v11;\n                                            if (*((long long *)(v64 + 8)) != 0)\n                                            {\n                                                v54 = sub_40e030();\n                                                if ((unsigned int)v54 == 0)\n                                                {\n                                                    v74 = (long long)v11;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v54 = 12;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    break;\n                                }\n                                if ((v12 == v68->field_0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 == 0 && (unsigned int)v54 == 0 || v12 == v68->field_0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 != 0) && v72 != 0 && (unsigned int)v54 == 0 && *((long long *)(v64 + 8)) != 0 && (unsigned int)v54 == 0 || (v12 == v68->field_0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 == 0 && (unsigned int)v54 == 0 || v12 == v68->field_0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 != 0) && v72 != 0 && (unsigned int)v54 == 0 && *((long long *)(v64 + 8)) == 0)\n                                {\n                                    *((long long *)(v74 + v3)) = *((long long *)((long long)v11 + v3));\n                                    v76 = (unsigned long long)(unsigned int)sub_40c890() - 1;\n                                    if (!((char)(v76 - 1 >> 63)) && (long long)(&v14)[8] > v76)\n                                    {\n                                        v15 = (long long)(&v14)[8] - 1;\n                                        sub_40ca00();\n                                    }\n                                    v68 = v1[27] + v67 * 40;\n                                }\n                                if (...)\n                                {\n                                    v67 += 1;\n                                    v78 = (char *)&v68[1].field_0 + 7;\n                                    if (v68->field_20 != 0)\n                                    {\n                                        v68 = v78;\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v54 == 0 && *((long long *)(v64 + 8)) != 0 && v72 != 0 && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (unsigned int)v54 != 0 || v12 == v68->field_0 && (long long)v11 == 0 && v71 == 0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && (unsigned int)v54 != 0 || v72 != 0 && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (unsigned int)v54 != 0 || v72 == 0 && ((unsigned int)v54 == 0 || (long long)v11 != 0))\n                            {\n                                *((unsigned long *)&v1) = v54;\n                                free(v16);\n                                v54 = v1;\n                            }\n                            else if ((v12 != v68->field_0 || v69 > *((long long *)(v64 + 24)) || v71 != 0 || *((long long *)(*((long long *)v64) + (v69 << 3))) == 0 || v70 == 0 || (unsigned int)v54 == 0 && !((char)(v76 - 1 >> 63)) && v72 != 0 && (*((long long *)(v64 + 8)) == 0 || (unsigned int)v54 == 0) && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (long long)(&v14)[8] > v76 || (unsigned int)v54 == 0 && v72 != 0 && (*((long long *)(v64 + 8)) == 0 || (unsigned int)v54 == 0) && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (char)(v76 - 1 >> 63) || (unsigned int)v54 == 0 && !((char)(v76 - 1 >> 63)) && v72 != 0 && (*((long long *)(v64 + 8)) == 0 || (unsigned int)v54 == 0) && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (long long)(&v14)[8] <= v76) && v68->field_20 == 0)\n                            {\n                                v63 = 1;\n                            }\n                            else if ((unsigned int)v54 == 0 && *((long long *)(v64 + 8)) != 0 && v72 != 0 && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (unsigned int)v54 != 0 || v12 == v68->field_0 && (long long)v11 == 0 && v71 == 0 && v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v70 != 0 && (unsigned int)v54 != 0 || v72 != 0 && ((unsigned int)v54 == 0 || (long long)v11 != 0) && (unsigned int)v54 != 0 || v72 == 0 && ((unsigned int)v54 == 0 || (long long)v11 != 0))\n                            {\n                                return v54;\n                            }\n                        }\n                        v63 = 1;\n                        if ((long long)v11 == 0)\n                        {\n                            break;\n                        }\n                        v54 = 0;\n                        *((unsigned long *)&v1) = v54;\n                        free(v16);\n                        v54 = v1;\n                    }\n                    if (1 >= v2->field_10)\n                    {\n                        v54 = 0;\n                    }\n                    else if (v66 == 4 && v2->field_18[v63] != *((long long *)(v64 + 16)) || v66 == 4 && v6 != *((long long *)(v64 + 24)) || (long long)v11 != 0 && 1 >= v2->field_10)\n                    {\n                        return v54;\n                    }\n                }\n            }\n            v54 = 0;\n        }\n    }\n    else\n    {\n        v29 = v3 + *((long long *)v22);\n        if (v25 == 0)\n        {\n            *((long long *)(v3 + *((long long *)v22))) = 0;\n            v54 = 0;\n        }\n        else\n        {\n            *(v29) = (unsigned int)sub_40de40();\n            v54 = v10;\n        }\n    }\n    return v54;\n}\n"
        },
        {
            "funcName": "sub_409200",
            "funcStartAddr": "0x409200",
            "funcEndAddr": "0x409221",
            "decompiledFuncCode": "int sub_409200()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4093b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_415688",
            "funcStartAddr": "0x415688",
            "funcEndAddr": "0x41569a",
            "decompiledFuncCode": "int sub_415688()\n{\n}\n"
        },
        {
            "funcName": "sub_40f2d0",
            "funcStartAddr": "0x40f2d0",
            "funcEndAddr": "0x40fd95",
            "decompiledFuncCode": "int sub_40f2d0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_410120",
            "funcStartAddr": "0x410120",
            "funcEndAddr": "0x4108e1",
            "decompiledFuncCode": "extern int512_t g_400000;\n\nint sub_410120()\n{\n    unsigned long long *v0;  // [bp-0x38]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long long v2;  // rcx\n    unsigned long long *v3;  // r13\n    unsigned long long v4;  // r9\n    unsigned long long v5;  // rbp\n    unsigned long long *v6;  // rbx\n    unsigned long long|char * v7;  // rsi\n    unsigned long long v8;  // rcx\n    unsigned long long v9;  // cc_dep1\n    unsigned long long v10;  // cc_dep2\n    unsigned long v11;  // d\n    unsigned long long|char * v12;  // rdi\n    unsigned long long v13;  // cc_dep1\n    unsigned long long|char * v14;  // r12\n    unsigned long long v15;  // rcx\n    unsigned long long *v16;  // rdx\n    void *v17;  // rax\n    unsigned long long *v18;  // r8\n    unsigned long long v19;  // cc_dep1\n    unsigned long long v20;  // cc_dep2\n    unsigned long long v21;  // r14\n    unsigned long long *v22;  // r13\n    unsigned long long v23;  // cc_dep1\n    unsigned long long v24;  // cc_dep2\n    unsigned long long v25;  // cc_dep1\n    char *v26;  // rdi\n    char *v27;  // rsi\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep2\n    char *v30;  // rdx\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    unsigned long long v34;  // rcx\n    char *v35;  // rsi\n    unsigned long long *v36;  // rsi\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // cc_dep1\n    unsigned long long v39;  // cc_dep2\n    char *v40;  // rdx\n    unsigned long long v41;  // cc_dep1\n    unsigned long long v42;  // rax\n    char *v43;  // rdi\n    unsigned long long v44;  // rcx\n    char *v45;  // rsi\n    unsigned long long v46;  // rcx\n    unsigned long long *v47;  // rsi\n    unsigned long long v48;  // cc_dep1\n    unsigned long long v49;  // cc_dep2\n    unsigned long long v50;  // rdx\n    unsigned long long v51;  // cc_dep1\n    unsigned long long v52;  // rax\n    char *v53;  // rdi\n    unsigned long long v54;  // rcx\n    char *v55;  // rsi\n    unsigned long long *v56;  // rsi\n    unsigned long long v57;  // cc_dep1\n    unsigned long long v58;  // cc_dep2\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // cc_dep1\n    unsigned long long v61;  // rax\n    char *v62;  // rdi\n    unsigned long long v63;  // rcx\n    char *v64;  // rsi\n    unsigned long long *v65;  // rsi\n    unsigned long long v66;  // cc_dep1\n    unsigned long long v67;  // cc_dep2\n    unsigned long long v68;  // rdx\n    unsigned long long v69;  // cc_dep1\n    unsigned long long v70;  // rax\n    char *v71;  // rdi\n    unsigned long long v72;  // rcx\n    char *v73;  // rsi\n    unsigned long long *v74;  // rsi\n    unsigned long long v75;  // cc_dep1\n    unsigned long long v76;  // cc_dep2\n    unsigned long long v77;  // rdx\n    unsigned long long v78;  // cc_dep1\n    unsigned long long v79;  // rax\n    char *v80;  // rdi\n    unsigned long long v81;  // rcx\n    char *v82;  // rsi\n    unsigned long long *v83;  // rsi\n    unsigned long long v84;  // cc_dep1\n    unsigned long long v85;  // cc_dep2\n    unsigned long long v86;  // rdx\n    unsigned long long v87;  // cc_dep1\n    unsigned long long v88;  // rax\n    char *v89;  // rdi\n    unsigned long long v90;  // rcx\n    char *v91;  // rsi\n    unsigned long long *v92;  // rsi\n    unsigned long long v93;  // cc_dep1\n    unsigned long long v94;  // cc_dep2\n    unsigned long long v95;  // rax\n    unsigned long long v96;  // cc_dep1\n    unsigned long long v97;  // rdx\n    char *v98;  // rdi\n    unsigned long long v99;  // rcx\n    char *v100;  // rsi\n    unsigned long long *v101;  // rsi\n    unsigned long long v102;  // cc_dep1\n    unsigned long long v103;  // cc_dep2\n    char *v104;  // rdx\n    unsigned long long v105;  // cc_dep1\n    unsigned long long v106;  // rax\n    unsigned long long v107;  // rax\n    unsigned long long *v108;  // rsi\n    unsigned long long v109;  // rsi\n    unsigned long long v110;  // rax\n    unsigned long long v111;  // rax\n    char *v112;  // rsi\n    unsigned long long *v113;  // rdx\n    unsigned long long v114;  // rax\n    unsigned long long v115;  // rax\n    unsigned long long v116;  // rsi\n    unsigned long long *v117;  // rdx\n    unsigned long long v118;  // rax\n    unsigned long long *v119;  // rdx\n\n    v3 = v2;\n    v14 = v4;\n    v5 = v12;\n    v6 = v7;\n    if (((unsigned int)v1 & 0x400000) != 0)\n    {\n        v12 = \"uppe\";\n        v8 = 6;\n        v7 = v4;\n        while (v8 != 0)\n        {\n            v8 -= 1;\n            v9 = *(v7);\n            v10 = *(v12);\n            v12 = &v12[v11];\n            v7 = &v7[v11];\n            break;\n        }\n        v13 = (v9 > v10) - 0 - (v9 < v10);\n        if ((char)v13 == 0)\n        {\n            v14 = \"alpha\";\n        }\n        else\n        {\n            v15 = 6;\n            v12 = \"lower\";\n            v7 = v4;\n            while (v15 != 0)\n            {\n                v15 -= 1;\n                v19 = *(v7);\n                v20 = *(v12);\n                v12 = &v12[v11];\n                v7 = &v7[v11];\n                break;\n            }\n            v32 = *(v3);\n            v14 = ((v19 > v20) - 0 - (v19 < v20) == 0? \"alpha\" : v4);\n            v17 = *(v16);\n        }\n    }\n    if ((char)v13 == 0 || ((unsigned int)v1 & 0x400000) == 0)\n    {\n        v32 = *(v3);\n        v17 = *(v16);\n    }\n    if ((char)v13 == 0 && *(v18) == *(v3) || ((unsigned int)v1 & 0x400000) == 0 && *(v18) == *(v3) || *(v18) == *(v3) && (char)v13 != 0 && ((unsigned int)v1 & 0x400000) != 0)\n    {\n        v21 = v32 * 2 + 1;\n        v0 = v16;\n        v17 = realloc(v17, (v32 * 2 + 1) * 8);\n    }\n    if ((char)v13 == 0 && *(v18) == *(v3) || ((unsigned int)v1 & 0x400000) == 0 && *(v18) == *(v3) || *(v18) == *(v3) && (char)v13 != 0 && ((unsigned int)v1 & 0x400000) != 0)\n    {\n        if (v17 != 0)\n        {\n            *(v0) = v17;\n            *(v18) = v21;\n            v32 = *(v3);\n        }\n        else\n        {\n            v114 = 12;\n        }\n    }\n    if (v17 != 0 || (char)v13 == 0 && *(v18) != *(v3) || ((unsigned int)v1 & 0x400000) == 0 && *(v18) != *(v3) || (char)v13 != 0 && ((unsigned int)v1 & 0x400000) != 0 && *(v18) != *(v3))\n    {\n        *(v3) = v32 + 1;\n        v22 = v17 + v32 * 8;\n        *(v22) = wctype((unsigned int)v14);\n        while (v32 != 0)\n        {\n            v32 -= 1;\n            v23 = *(v7);\n            v24 = *(v12);\n            v12 = &v12[v11];\n            v7 = &v7[v11];\n            break;\n        }\n        v25 = (v23 > v24) - 0 - (v23 < v24);\n        if ((char)v25 != 0)\n        {\n            v26 = \"cntrl\";\n            v46 = 6;\n            v27 = v14;\n            while (v46 != 0)\n            {\n                v46 -= 1;\n                v28 = *(v27);\n                v29 = *(v26);\n                v26 = &v26[v11];\n                v27 = &v27[v11];\n                break;\n            }\n            v31 = (v28 > v29) - 0 - (v28 < v29);\n            if ((char)v31 == 0)\n            {\n                v40 = *((long long *)(unsigned long long)__ctype_b_loc());\n                if (v5 == 0)\n                {\n                    do\n                    {\n                        if ((v40[2 * v46] & 2) != 0)\n                        {\n                            v6[v46 >> 6] = v6[v46 >> 6] | 1 << (v46 & 63);\n                        }\n                        v46 += 1;\n                    }\n                    while (v46 != 0x100);\n                }\n                else\n                {\n                    v42 = 0;\n                    do\n                    {\n                        if ((v40[2 * v42] & 2) != 0)\n                        {\n                            v47 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v42)) >> 3) & 24);\n                            *((long long *)(v6 + v47)) = *((long long *)(v6 + v47)) | 1 << (*((char *)(v5 + v42)) & 63);\n                        }\n                        v42 += 1;\n                    }\n                    while (v42 != 0x100);\n                }\n            }\n            else\n            {\n                v33 = \"lower\";\n                v34 = 6;\n                v35 = v14;\n                while (v34 != 0)\n                {\n                    v34 -= 1;\n                    v38 = *(v35);\n                    v39 = *(v33);\n                    v33 = &v33[v11];\n                    v35 = &v35[v11];\n                    break;\n                }\n                v41 = (v38 > v39) - 0 - (v38 < v39);\n                if ((char)v41 != 0)\n                {\n                    v43 = \"space\";\n                    v44 = 6;\n                    v45 = v14;\n                    while (v44 != 0)\n                    {\n                        v44 -= 1;\n                        v48 = *(v45);\n                        v49 = *(v43);\n                        v43 = &v43[v11];\n                        v45 = &v45[v11];\n                        break;\n                    }\n                    v51 = (v48 > v49) - 0 - (v48 < v49);\n                    if ((char)v51 == 0)\n                    {\n                        v59 = *((long long *)(unsigned long long)__ctype_b_loc());\n                        if (v5 == 0)\n                        {\n                            do\n                            {\n                                if ((*((char *)(v59 + (v44 << 1) + 1)) & 32) != 0)\n                                {\n                                    v6[v44 >> 6] = v6[v44 >> 6] | 1 << (v44 & 63);\n                                }\n                                v44 += 1;\n                            }\n                            while (v44 != 0x100);\n                        }\n                        else\n                        {\n                            v61 = 0;\n                            do\n                            {\n                                if ((*((char *)(v59 + (v61 << 1) + 1)) & 32) != 0)\n                                {\n                                    v65 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v61)) >> 3) & 24);\n                                    *((long long *)(v6 + v65)) = *((long long *)(v6 + v65)) | 1 << (*((char *)(v5 + v61)) & 63);\n                                }\n                                v61 += 1;\n                            }\n                            while (v61 != 0x100);\n                        }\n                    }\n                    else\n                    {\n                        v53 = \"alpha\";\n                        v54 = 6;\n                        v55 = v14;\n                        while (v54 != 0)\n                        {\n                            v54 -= 1;\n                            v57 = *(v55);\n                            v58 = *(v53);\n                            v53 = &v53[v11];\n                            v55 = &v55[v11];\n                            break;\n                        }\n                        v60 = (v57 > v58) - 0 - (v57 < v58);\n                        if ((char)v60 != 0)\n                        {\n                            v62 = \"digit\";\n                            v63 = 6;\n                            v64 = v14;\n                            while (v63 != 0)\n                            {\n                                v63 -= 1;\n                                v66 = *(v64);\n                                v67 = *(v62);\n                                v62 = &v62[v11];\n                                v64 = &v64[v11];\n                                break;\n                            }\n                            v69 = (v66 > v67) - 0 - (v66 < v67);\n                            if ((char)v69 == 0)\n                            {\n                                v77 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                if (v5 == 0)\n                                {\n                                    do\n                                    {\n                                        if ((*((char *)(v77 + (v63 << 1) + 1)) & 8) != 0)\n                                        {\n                                            v6[v63 >> 6] = v6[v63 >> 6] | 1 << (v63 & 63);\n                                        }\n                                        v63 += 1;\n                                    }\n                                    while (v63 != 0x100);\n                                }\n                                else\n                                {\n                                    v79 = 0;\n                                    do\n                                    {\n                                        if ((*((char *)(v77 + (v79 << 1) + 1)) & 8) != 0)\n                                        {\n                                            v83 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v79)) >> 3) & 24);\n                                            *((long long *)(v6 + v83)) = *((long long *)(v6 + v83)) | 1 << (*((char *)(v5 + v79)) & 63);\n                                        }\n                                        v79 += 1;\n                                    }\n                                    while (v79 != 0x100);\n                                }\n                            }\n                            else\n                            {\n                                v71 = \"print\";\n                                v72 = 6;\n                                v73 = v14;\n                                while (v72 != 0)\n                                {\n                                    v72 -= 1;\n                                    v75 = *(v73);\n                                    v76 = *(v71);\n                                    v71 = &v71[v11];\n                                    v73 = &v73[v11];\n                                    break;\n                                }\n                                v78 = (v75 > v76) - 0 - (v75 < v76);\n                                if ((char)v78 == 0)\n                                {\n                                    v86 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                    if (v5 == 0)\n                                    {\n                                        do\n                                        {\n                                            if ((*((char *)(v86 + (v72 << 1) + 1)) & 64) != 0)\n                                            {\n                                                v6[v72 >> 6] = v6[v72 >> 6] | 1 << (v72 & 63);\n                                            }\n                                            v72 += 1;\n                                        }\n                                        while (v72 != 0x100);\n                                    }\n                                    else\n                                    {\n                                        v88 = 0;\n                                        do\n                                        {\n                                            if ((*((char *)(v86 + (v88 << 1) + 1)) & 64) != 0)\n                                            {\n                                                v92 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v88)) >> 3) & 24);\n                                                *((long long *)(v6 + v92)) = *((long long *)(v6 + v92)) | 1 << (*((char *)(v5 + v88)) & 63);\n                                            }\n                                            v88 += 1;\n                                        }\n                                        while (v88 != 0x100);\n                                    }\n                                }\n                                else\n                                {\n                                    v80 = \"uppe\";\n                                    v81 = 6;\n                                    v82 = v14;\n                                    while (v81 != 0)\n                                    {\n                                        v81 -= 1;\n                                        v84 = *(v82);\n                                        v85 = *(v80);\n                                        v80 = &v80[v11];\n                                        v82 = &v82[v11];\n                                        break;\n                                    }\n                                    v87 = (v84 > v85) - 0 - (v84 < v85);\n                                    if ((char)v87 == 0)\n                                    {\n                                        v95 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                        if (v5 == 0)\n                                        {\n                                            do\n                                            {\n                                                if ((*((char *)(v95 + (v81 << 1) + 1)) & 1) != 0)\n                                                {\n                                                    v6[v81 >> 6] = v6[v81 >> 6] | 1 << (v81 & 63);\n                                                }\n                                                v81 += 1;\n                                            }\n                                            while (v81 != 0x100);\n                                        }\n                                        else\n                                        {\n                                            v97 = 0;\n                                            do\n                                            {\n                                                if ((*((char *)(v95 + (v97 << 1) + 1)) & 1) != 0)\n                                                {\n                                                    v101 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v97)) >> 3) & 24);\n                                                    *((long long *)(v6 + v101)) = *((long long *)(v6 + v101)) | 1 << (*((char *)(v5 + v97)) & 63);\n                                                }\n                                                v97 += 1;\n                                            }\n                                            while (v97 != 0x100);\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v89 = \"blank\";\n                                        v90 = 6;\n                                        v91 = v14;\n                                        while (v90 != 0)\n                                        {\n                                            v90 -= 1;\n                                            v93 = *(v91);\n                                            v94 = *(v89);\n                                            v89 = &v89[v11];\n                                            v91 = &v91[v11];\n                                            break;\n                                        }\n                                        v96 = (v93 > v94) - 0 - (v93 < v94);\n                                        if ((char)v96 == 0)\n                                        {\n                                            v104 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                            if (v5 == 0)\n                                            {\n                                                do\n                                                {\n                                                    if ((v104[2 * v90] & 1) != 0)\n                                                    {\n                                                        v6[v90 >> 6] = v6[v90 >> 6] | 1 << (v90 & 63);\n                                                    }\n                                                    v90 += 1;\n                                                }\n                                                while (v90 != 0x100);\n                                            }\n                                            else\n                                            {\n                                                v106 = 0;\n                                                do\n                                                {\n                                                    if ((v104[2 * v106] & 1) != 0)\n                                                    {\n                                                        v108 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v106)) >> 3) & 24);\n                                                        *((long long *)(v6 + v108)) = *((long long *)(v6 + v108)) | 1 << (*((char *)(v5 + v106)) & 63);\n                                                    }\n                                                    v106 += 1;\n                                                }\n                                                while (v106 != 0x100);\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v98 = \"graph\";\n                                            v99 = 6;\n                                            v100 = v14;\n                                            while (v99 != 0)\n                                            {\n                                                v99 -= 1;\n                                                v102 = *(v100);\n                                                v103 = *(v98);\n                                                v98 = &v98[v11];\n                                                v100 = &v100[v11];\n                                                break;\n                                            }\n                                            v105 = (v102 > v103) - 0 - (v102 < v103);\n                                            if ((char)v105 == 0)\n                                            {\n                                                v109 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                                if (v5 == 0)\n                                                {\n                                                    do\n                                                    {\n                                                        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x6<64>, Conv(16->64, Load(addr=(rsi<8> + (rax<8> << 0x1<8>)), size=2, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))\n                                                        {\n                                                            v6[v99 >> 6] = v6[v99 >> 6] | 1 << (v99 & 63);\n                                                        }\n                                                        v99 += 1;\n                                                    }\n                                                    while (v99 != 0x100);\n                                                }\n                                                else\n                                                {\n                                                    v111 = 0;\n                                                    do\n                                                    {\n                                                        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x6<64>, Conv(16->64, Load(addr=(rsi<8> + (rax<8> << 0x1<8>)), size=2, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))\n                                                        {\n                                                            v113 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v111)) >> 3) & 24);\n                                                            *((long long *)(v6 + v113)) = *((long long *)(v6 + v113)) | 1 << (*((char *)(v5 + v111)) & 63);\n                                                        }\n                                                        v111 += 1;\n                                                    }\n                                                    while (v111 != 0x100);\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v107 = strcmp(v14, \"punct\");\n                                                if (v107 == 0)\n                                                {\n                                                    v112 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                                    if (v5 == 0)\n                                                    {\n                                                        do\n                                                        {\n                                                            if ((v112[2 * v99] & 4) != 0)\n                                                            {\n                                                                v6[v99 >> 6] = v6[v99 >> 6] | 1 << (v99 & 63);\n                                                            }\n                                                            v99 += 1;\n                                                        }\n                                                        while (v99 != 0x100);\n                                                    }\n                                                    else\n                                                    {\n                                                        v115 = 0;\n                                                        do\n                                                        {\n                                                            if ((v112[2 * v115] & 4) != 0)\n                                                            {\n                                                                v117 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v115)) >> 3) & 24);\n                                                                *((long long *)(v6 + v117)) = *((long long *)(v6 + v117)) | 1 << (*((char *)(v5 + v115)) & 63);\n                                                            }\n                                                            v115 += 1;\n                                                        }\n                                                        while (v115 != 0x100);\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v110 = strcmp(v14, \"x\");\n                                                    if (v110 == 0)\n                                                    {\n                                                        v116 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                                        if (v5 == 0)\n                                                        {\n                                                            do\n                                                            {\n                                                                if ((*((char *)(v116 + (v99 << 1) + 1)) & 16) != 0)\n                                                                {\n                                                                    v6[v99 >> 6] = v6[v99 >> 6] | 1 << (v99 & 63);\n                                                                }\n                                                                v99 += 1;\n                                                            }\n                                                            while (v99 != 0x100);\n                                                        }\n                                                        else\n                                                        {\n                                                            v118 = 0;\n                                                            do\n                                                            {\n                                                                if ((*((char *)(v116 + (v118 << 1) + 1)) & 16) != 0)\n                                                                {\n                                                                    v119 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v118)) >> 3) & 24);\n                                                                    *((long long *)(v6 + v119)) = *((long long *)(v6 + v119)) | 1 << (*((char *)(v5 + v118)) & 63);\n                                                                }\n                                                                v118 += 1;\n                                                            }\n                                                            while (v118 != 0x100);\n                                                        }\n                                                    }\n                                                    else\n                                                    {\n                                                        v114 = 4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v68 = *((long long *)(unsigned long long)__ctype_b_loc());\n                            if (v5 == 0)\n                            {\n                                do\n                                {\n                                    if ((*((char *)(v68 + (v54 << 1) + 1)) & 4) != 0)\n                                    {\n                                        v6[v54 >> 6] = v6[v54 >> 6] | 1 << (v54 & 63);\n                                    }\n                                    v54 += 1;\n                                }\n                                while (v54 != 0x100);\n                            }\n                            else\n                            {\n                                v70 = 0;\n                                do\n                                {\n                                    if ((*((char *)(v68 + (v70 << 1) + 1)) & 4) != 0)\n                                    {\n                                        v74 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v70)) >> 3) & 24);\n                                        *((long long *)(v6 + v74)) = *((long long *)(v6 + v74)) | 1 << (*((char *)(v5 + v70)) & 63);\n                                    }\n                                    v70 += 1;\n                                }\n                                while (v70 != 0x100);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v50 = *((long long *)(unsigned long long)__ctype_b_loc());\n                    if (v5 == 0)\n                    {\n                        do\n                        {\n                            if ((*((char *)(v50 + (v34 << 1) + 1)) & 2) != 0)\n                            {\n                                v6[v34 >> 6] = v6[v34 >> 6] | 1 << (v34 & 63);\n                            }\n                            v34 += 1;\n                        }\n                        while (v34 != 0x100);\n                    }\n                    else\n                    {\n                        v52 = 0;\n                        do\n                        {\n                            if ((*((char *)(v50 + (v52 << 1) + 1)) & 2) != 0)\n                            {\n                                v56 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v52)) >> 3) & 24);\n                                *((long long *)(v6 + v56)) = *((long long *)(v6 + v56)) | 1 << (*((char *)(v5 + v52)) & 63);\n                            }\n                            v52 += 1;\n                        }\n                        while (v52 != 0x100);\n                    }\n                }\n            }\n        }\n        else\n        {\n            v30 = *((long long *)(unsigned long long)__ctype_b_loc());\n            if (v5 == 0)\n            {\n                do\n                {\n                    if ((v30[2 * v32] & 8) != 0)\n                    {\n                        v6[v32 >> 6] = v6[v32 >> 6] | 1 << (v32 & 63);\n                    }\n                    v32 += 1;\n                }\n                while (v32 != 0x100);\n            }\n            else\n            {\n                v37 = 0;\n                do\n                {\n                    if ((v30[2 * v37] & 8) != 0)\n                    {\n                        v36 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v37)) >> 3) & 24);\n                        *((long long *)(v6 + v36)) = *((long long *)(v6 + v36)) | 1 << (*((char *)(v5 + v37)) & 63);\n                    }\n                    v37 += 1;\n                }\n                while (v37 != 0x100);\n            }\n        }\n        if (...)\n        {\n            v114 = 0;\n        }\n    }\n    return v114;\n}\n"
        },
        {
            "funcName": "sub_4049d0",
            "funcStartAddr": "0x4049d0",
            "funcEndAddr": "0x404a69",
            "decompiledFuncCode": "extern unsigned int g_41bcd1;\nextern char g_623b00;\n\nint sub_4049d0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5[7];  // rdi\n    char *v6;  // rbx\n    unsigned long long v9;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    v6 = *(v5);\n    v5[5] = &v5[9];\n    v5[1] = 0;\n    v5[2] = 0;\n    *((int *)&v5[6]) = (g_623b00 == 0? 0 : 6436672);\n    strlen(v6);\n    sub_418000();\n    if (v3 != 0)\n    {\n        v9 = (unsigned int)sub_408350();\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x41bcd1, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_408310",
            "funcStartAddr": "0x408310",
            "funcEndAddr": "0x408322",
            "decompiledFuncCode": "int sub_408310()\n{\n}\n"
        },
        {
            "funcName": "sub_4090e0",
            "funcStartAddr": "0x4090e0",
            "funcEndAddr": "0x409154",
            "decompiledFuncCode": "extern unsigned int g_41d31c;\nextern unsigned int g_41d347;\nextern unsigned int g_41d578;\n\nint sub_4090e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41d31c, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41d347, 0x5));\n    dcgettext(0x0, 0x41d578, 0x5);\n}\n"
        },
        {
            "funcName": "sub_40a480",
            "funcStartAddr": "0x40a480",
            "funcEndAddr": "0x40a9e7",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_1;\n\nextern unsigned int g_41daa0;\nextern unsigned int g_41dae4;\nextern unsigned long long stderr;\n\nint sub_40a480()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_0 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char * v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long long *|unsigned long v26;  // rax\n    unsigned int|unsigned long v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char *v53;  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v57;  // rdx\n    unsigned int v58;  // eax\n    char v60[3];  // rax\n    unsigned long long v62;  // r14\n    char v63;  // r14b\n    unsigned long long v64;  // r14\n    char v65;  // r14b\n    unsigned long long v66;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_409d80();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = *(v34);\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_409d80();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || *(v19) == 0) && (v19 == 0 || *(v19) == 0 || (unsigned int)v17 != 0) && (v19 == 0 || *(v19) == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_409e60();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41daa0, 0x5), *((long long *)v15));\n                    }\n                    v0->field_8 = v45;\n                    v62 = 0;\n                    v63 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41dae4, 0x5), *((long long *)v15));\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v57 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v57 == 0))\n            {\n                v58 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v58;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v60 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v60;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    __fprintf_chk(stderr, 0x1, dcgettext(0x0, 0x41daa0, 0x5), *((long long *)v15));\n                }\n                v0->field_8 = v45;\n                v64 = 0;\n                v65 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v57 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_409e60();\n    }\n    v66 = v45;\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_407d60",
            "funcStartAddr": "0x407d60",
            "funcEndAddr": "0x407d8b",
            "decompiledFuncCode": "extern char g_623c40;\n\nint sub_407d60()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_623c40 : v2);\n    *((int *)(tmp_11? &g_623c40 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_623c40;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_623c40;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4056c0",
            "funcStartAddr": "0x4056c0",
            "funcEndAddr": "0x4057cf",
            "decompiledFuncCode": "extern unsigned int g_41c25d;\nextern unsigned int g_41c272;\nextern unsigned int g_41c27a;\nextern unsigned long long stderr[7];\n\nint sub_4056c0()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v8;  // rbx\n    char *v9;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v8 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41c25d, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v8 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v8 += 1;\n                    v7 += v5;\n                    __fprintf_chk((unsigned int)stderr, 0x1, 0x41c27a, sub_408350());\n                    if (v4[v8] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v8 == 0 || v6 != 0)\n            {\n                v8 += 1;\n                v1 = v7;\n                v7 += v5;\n                __fprintf_chk((unsigned int)stderr, 0x1, 0x41c272, sub_408350());\n                if (v4[v8] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v9 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v9) = 10;\n        return v9;\n    }\n}\n"
        },
        {
            "funcName": "sub_415610",
            "funcStartAddr": "0x415610",
            "funcEndAddr": "0x415654",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    char field_8;\n} struct_0;\n\nextern int512_t g_800008;\n\nint sub_415610()\n{\n    struct_0 *v4;  // rbx\n\n    v4->field_8 = 12;\n    v4->field_0 = 16;\n}\n"
        },
        {
            "funcName": "sub_407ce0",
            "funcStartAddr": "0x407ce0",
            "funcEndAddr": "0x407cef",
            "decompiledFuncCode": "extern int512_t g_623c40;\n\nint sub_407ce0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_623c40 : v1));\n}\n"
        },
        {
            "funcName": "sub_40e5c0",
            "funcStartAddr": "0x40e5c0",
            "funcEndAddr": "0x40e696",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[64];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned int field_70;\n    char padding_74[12];\n    unsigned long long field_80;\n    char padding_88[5];\n    char field_8d;\n    char field_8e;\n    char padding_8f[1];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40e5c0()\n{\n    struct_0 *v1;  // rdi\n    void *v2;  // rsi\n    unsigned int v3;  // edx\n    void *v5;  // rax\n    unsigned int v6;  // ebx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned int v9;  // eax\n    char v10;  // al\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        if (v1->field_58 != v2)\n        {\n            if (v1->field_90 > 1)\n            {\n                v5 = v1->field_10;\n                while (true)\n                {\n                    v6 = *((int *)((char *)v5 + 0x4 * v2));\n                    if (*((int *)((char *)v5 + 0x4 * v2)) == -1)\n                    {\n                        v2 -= 1;\n                        if (v2 == -1)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        if (v1->field_8e != 0)\n                        {\n                            v8 = iswalnum(v6);\n                            if (v6 == 95 || v8 != 0)\n                            {\n                                v7 = 1;\n                            }\n                        }\n                        if (v1->field_8e == 0 || v8 == 0 && v6 != 95)\n                        {\n                            v7 = 0;\n                            break;\n                        }\n                    }\n                }\n                if (*((int *)((char *)v5 + 0x4 * v2)) != -1 && (v8 == 0 || v1->field_8e == 0) && (v1->field_8e == 0 || v6 != 95))\n                {\n                    v9 = 0;\n                    v10 = v1->field_8d != 0;\n                    return (unsigned long long)(unsigned int)rax<4> * 2;\n                }\n                else if (*((int *)((char *)v5 + 0x4 * v2)) != -1)\n                {\n                    return v7;\n                }\n                else if (*((int *)((char *)v5 + 0x4 * v2)) == -1)\n                {\n                    return v1->field_70;\n                }\n            }\n            else\n            {\n                v7 = 1;\n                if (((char)(*((long long *)(v1->field_80 + ((unsigned long long)(char)*(&((char *)v2)[v1->field_8]) >> 6 << 3))) >> (*(&((char *)v2)[v1->field_8]) & 63)) & 1) == 0)\n                {\n                    v7 = 0;\n                }\n            }\n            if ((((char)(*((long long *)(v1->field_80 + ((unsigned long long)(char)*(&((char *)v2)[v1->field_8]) >> 6 << 3))) >> (*(&((char *)v2)[v1->field_8]) & 63)) & 1) == 0 || v1->field_90 > 1) && (*(&((char *)v2)[v1->field_8]) == 10 || v1->field_90 > 1))\n            {\n                v9 = 0;\n                v10 = v1->field_8d != 0;\n                return (unsigned long long)(unsigned int)rax<4> * 2;\n            }\n        }\n        else\n        {\n            v7 = (0 - (unsigned int)(char)((v3 & 2) < 1) & 2) + 8;\n        }\n        if (v1->field_58 == v2 || v1->field_90 > 1 || ((char)(*((long long *)(v1->field_80 + ((unsigned long long)(char)*(&((char *)v2)[v1->field_8]) >> 6 << 3))) >> (*(&((char *)v2)[v1->field_8]) & 63)) & 1) != 0 || *(&((char *)v2)[v1->field_8]) != 10)\n        {\n            return v7;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || v1->field_58 != v2 && v1->field_90 > 1)\n    {\n        return v1->field_70;\n    }\n}\n"
        },
        {
            "funcName": "sub_404690",
            "funcStartAddr": "0x404690",
            "funcEndAddr": "0x40473b",
            "decompiledFuncCode": "extern int512_t g_623740;\nextern char g_623b00;\n\nint sub_404690()\n{\n    void tmp_11;  // tmp #11\n    void tmp_14;  // tmp #14\n    unsigned long long v1[2];  // rsi\n    unsigned long long v2;  // r10\n    unsigned long long v3[2];  // rdi\n    unsigned long long v4;  // r9\n    unsigned long v5;  // r8\n    unsigned long long v6;  // rdi\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdi\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rdx\n\n    v2 = v1[1];\n    v4 = v3[1];\n    v5 = (v1[1] <= v3[1]? v1[1] : v3[1]);\n    if (g_623b00 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>)))\n        {\n            v6 = *(v3);\n            v7 = *(v1);\n            v10 = (char)(*((char *)v6) - *((char *)v7));\n            if ((char)*((char *)v6) == (unsigned int)(char)*((char *)v7))\n            {\n                v11 = 0;\n                do\n                {\n                    v11 += 1;\n                    v10 = (char)(*((char *)(v6 + v11)) - *((char *)(v7 + v11)));\n                }\n                while ((char)*((char *)(v6 + v11)) == (unsigned int)(char)*((char *)(v7 + v11)) && v5 != v11);\n                if (v5 != v11)\n                {\n                    return v10;\n                }\n            }\n        }\n    }\n    else\n    {\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>)))\n        {\n            v8 = *(v3);\n            v9 = *(v1);\n            tmp_11 = (char)*((char *)v8);\n            tmp_14 = (char)*((char *)v9);\n            v10 = (char)(*(&((char *)&g_623740)[tmp_11]) - *(&((char *)&g_623740)[tmp_14]));\n            if ((char)*(&((char *)&g_623740)[tmp_11]) == (unsigned int)(char)*(&((char *)&g_623740)[tmp_14]))\n            {\n                v12 = 0;\n                while (true)\n                {\n                    v12 += 1;\n                    if (v5 != v12)\n                    {\n                        v10 = (char)(*(&((char *)&g_623740)[(unsigned long long)(char)*((char *)(v8 + v12))]) - *(&((char *)&g_623740)[(unsigned long long)(char)*((char *)(v9 + v12))]));\n                        if ((char)*(&((char *)&g_623740)[(unsigned long long)(char)*((char *)(v8 + v12))]) != (unsigned int)(char)*(&((char *)&g_623740)[(unsigned long long)(char)*((char *)(v9 + v12))]))\n                        {\n                            break;\n                        }\n                    }\n                }\n                if (v5 != v12)\n                {\n                    return v10;\n                }\n            }\n        }\n    }\n    if (v2 > v4 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>) || (char)*(&((char *)&g_623740)[tmp_11]) == (unsigned int)(char)*(&((char *)&g_623740)[tmp_14]) || g_623b00 == 0) && ((char)*((char *)v6) == (unsigned int)(char)*((char *)v7) || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>) || g_623b00 != 0))\n    {\n        v10 = -18446744069414584321;\n    }\n    if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>) && v2 <= v4)\n    {\n        return (unsigned long long)(char)(v2 < v4);\n    }\n    if (v2 > v4 || g_623b00 == 0 && (char)*((char *)v6) != (unsigned int)(char)*((char *)v7) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>)) || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, (((Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE) <=s Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))) ? (Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE)) : (Load(addr=(rdi<8> + 0x8<64>), size=8, endness=Iend_LE))), 0x0<64>, cc_ndep<8>)) && (char)*(&((char *)&g_623740)[tmp_11]) != (unsigned int)(char)*(&((char *)&g_623740)[tmp_14]) && g_623b00 != 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x405623",
            "decompiledFuncCode": "int sub_405520()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (v13 != 0 || v0 != -1 || *((long long *)(v5 + (v12 << 3))) != 0))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_40d930",
            "funcStartAddr": "0x40d930",
            "funcEndAddr": "0x40d9a3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40d930()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4[3];  // rsi\n    unsigned long v5;  // rdx\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // r12\n    struct_0 *v8;  // rbp\n    unsigned long long v9;  // rbx\n    void *v11;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n\n    v5 = v4[1];\n    *((unsigned long long [3])&v6->field_8) = v4[1];\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v2 = v7;\n        v1 = stack_base + 0;\n        v8 = v6;\n        v0 = v9;\n        *((unsigned long *)&v6->field_0) = v5;\n        v11 = malloc(v5 * 8);\n        v6->field_10 = v11;\n        if (v11 != 0)\n        {\n            memcpy(v11, v4[2], v5 * 8);\n            v14 = 0;\n        }\n        else\n        {\n            v8->field_8 = 0;\n            v14 = 12;\n            *((long long *)&v8->field_0) = 0;\n        }\n        v15 = v0;\n        v16 = v2;\n        return v14;\n    }\n    v6->field_10 = 0;\n    *((int128_t *)&v6->field_0) = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40d8b0",
            "funcStartAddr": "0x40d8b0",
            "funcEndAddr": "0x40d923",
            "decompiledFuncCode": "int sub_40d8b0()\n{\n    unsigned int v0;  // [bp-0x1c]\n    struct struct_0 *v2[3];  // rsi\n    unsigned long long *v3;  // rax\n    unsigned long long *v4;  // rax\n\n    v0 = 0;\n    if (v2[1] != 0 && *((char *)(v2[1] + 48)) == 17)\n    {\n        v3 = sub_40d690();\n        v2[1] = &v3;\n        if (v3 != 0)\n        {\n            *(v3) = v2;\n        }\n    }\n    if (v2[2] != 0 && *((char *)(v2[2] + 48)) == 17)\n    {\n        v4 = sub_40d690();\n        v2[2] = &v4;\n        if (v4 != 0)\n        {\n            *(v4) = v2;\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_407fb0",
            "funcStartAddr": "0x407fb0",
            "funcEndAddr": "0x407fc1",
            "decompiledFuncCode": "int sub_407fb0()\n{\n}\n"
        },
        {
            "funcName": "sub_415ac0",
            "funcStartAddr": "0x415ac0",
            "funcEndAddr": "0x416f60",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[120];\n    unsigned long long field_78;\n    char padding_80[24];\n    unsigned long long field_98;\n    unsigned long long field_a0;\n    unsigned long long field_a8;\n    char field_b0;\n    char padding_b1[3];\n    unsigned int field_b4;\n    unsigned long long field_b8;\n    unsigned long long field_c0;\n    uint128_t field_c8;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    char field_8;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[120];\n    unsigned long long field_78;\n    char padding_80[32];\n    unsigned long long field_a0;\n    unsigned long long field_a8;\n    char field_b0;\n    char padding_b1[3];\n    unsigned int field_b4;\n    unsigned long long field_b8;\n    unsigned long long field_c0;\n    uint128_t field_c8;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[184];\n    unsigned long long field_b8;\n} struct_3;\n\nint sub_415ac0()\n{\n    void tmp_18;  // tmp #18\n    void tmp_31;  // tmp #31\n    unsigned long long v0;  // [bp-0x238]\n    unsigned long v1;  // [bp-0x128]\n    unsigned long long|unsigned long v2;  // [bp-0x118]\n    unsigned long v3;  // [bp-0x110]\n    struct_1 *v4;  // [bp-0x108]\n    unsigned long long|void *|unsigned long v5;  // [bp-0x100]\n    uint128_t|unsigned long long|unsigned long|unsigned long long [14] v6;  // [bp-0xf8]\n    unsigned int *v7;  // [bp-0xe8]\n    char|struct_0 * v8;  // [bp-0xe0]\n    unsigned long long [9]|char v9;  // [bp-0xd8]\n    unsigned int|void * v10;  // [bp-0xd0]\n    unsigned int v11;  // [bp-0xc8]\n    unsigned int v12;  // [bp-0xc0]\n    unsigned int v13;  // [bp-0xbc]\n    unsigned long long v14;  // [bp-0xb0]\n    unsigned int v15;  // [bp-0xa8]\n    unsigned long long v16;  // [bp-0xa0]\n    unsigned int v17;  // [bp-0x98]\n    unsigned long long v18;  // [bp-0x90]\n    char v19;  // [bp-0x80]\n    unsigned long long|unsigned long v20;  // [bp-0x78]\n    char v21;  // [bp-0x70]\n    char v22;  // [bp-0x58]\n    unsigned long long|char v23;  // [bp-0x50]\n    unsigned long long v25[7];  // rsi\n    struct_0 *v26;  // rdx\n    struct_0 *v27;  // r12\n    unsigned long long v28;  // r9\n    unsigned long v29;  // rcx\n    unsigned long long v30[14];  // rdi\n    void *v31;  // rax\n    unsigned int *v32;  // rbx\n    struct_1 *v33;  // rbx\n    unsigned long v34;  // r8\n    unsigned long long v36;  // rbx\n    unsigned long long v37;  // rax\n    struct_1 *v38;  // rbx\n    struct_2 *v39;  // rcx\n    unsigned long long v40;  // rax\n    char v42;  // al\n    unsigned long long v43;  // r14\n    unsigned long long v45;  // rbx\n    unsigned long long v46;  // rbp\n    unsigned long v47;  // r8\n    unsigned long long v48;  // r14\n    unsigned long long v50;  // rax\n    unsigned long long v52;  // rax\n    char v53;  // al\n    unsigned long long v55;  // rbp\n    unsigned int v57;  // r9d\n    char *v58;  // rdi\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // rcx\n    unsigned int v62;  // ebx\n    unsigned long long v63;  // rdi\n    unsigned long long v64;  // rbx\n    unsigned long long v65;  // rbx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // r14\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rdx\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rax\n    unsigned long long v73;  // rax\n    unsigned int *v74;  // rdx\n    unsigned int *v75;  // rax\n    unsigned long v77;  // rsi\n    unsigned long long v78;  // rcx\n    char v79;  // cc_dep2\n    unsigned long v80;  // d\n    char *v81;  // rdi\n    unsigned long long v82;  // rcx\n    char *v83;  // rdi\n    unsigned long long v84;  // rcx\n    unsigned int|unsigned long v85;  // rcx\n    char v86;  // cc_dep2\n    unsigned long v87;  // d\n    unsigned long long v88;  // rcx\n    char *v89;  // rdi\n    char v90;  // cc_dep2\n    unsigned int|unsigned long v91;  // r8\n    unsigned long long v92[9];  // rdx\n    unsigned int|unsigned long v93;  // r9\n    unsigned int *v94;  // rax\n    unsigned int *v95;  // rcx\n    void *v96;  // rax\n    void *v97;  // rax\n    unsigned int *v98;  // rcx\n    unsigned long long v99;  // rax\n    unsigned long long v100;  // rcx\n    unsigned long long v101;  // rbx\n    unsigned long long v102;  // rax\n    unsigned long long v103;  // rcx\n    unsigned long long v104;  // rax\n    unsigned long long v105;  // rax\n    unsigned long long v106;  // rdx\n    unsigned int v107;  // edx\n    unsigned long long v110;  // rax\n    unsigned int v111;  // cc_dep1\n    unsigned long long v113;  // rdx\n    unsigned long long v114;  // rax\n    unsigned long long v115;  // rax\n    unsigned long long v117;  // rbp\n    char v118;  // bl\n    unsigned long long v119;  // r13\n    uint128_t v120;  // xmm0\n    unsigned long long v121;  // rbx\n    uint128_t v122;  // xmm0\n    unsigned long long v123;  // rax\n    unsigned long long v124;  // rax\n    unsigned long long v125;  // rdx\n    unsigned long long v126;  // rax\n    unsigned long long v127;  // rax\n    char v128;  // al\n    unsigned long long v129;  // rax\n    char v130;  // al\n    unsigned long long v132;  // rbp\n    unsigned long long v133;  // rbp\n    unsigned long long v134;  // r12\n    unsigned long long v135;  // rbx\n    unsigned long long v137;  // r14\n    unsigned long long v138;  // r14\n    unsigned long long v139[14];  // r15\n    unsigned long long v141;  // rbx\n    unsigned long long v143;  // rax\n\n    *((unsigned long long [7])&v4) = *(v25);\n    switch (v26->field_8)\n    {\n    case 1:\n        v5 = (unsigned int)sub_40d500();\n        if (v5 != 0)\n        {\n            v43 = v5;\n            if (v4->field_b4 > 1)\n            {\n                while (true)\n                {\n                    if (*((int *)(v139[2] + (v30[9] << 2))) == -1 && v30[9] != v139[6] && v139[13] > v139[9])\n                    {\n                        v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n                        v23 = 16;\n                        v52 = sub_40d500();\n                        v43 = v52;\n                        v53 = v52 == 0;\n                        if (!((unsigned long long)(unsigned int)sub_40d500() != 0 && v52 != 0))\n                        {\n                            break;\n                        }\n                    }\n                    if (v30[9] == v139[6] || v139[13] <= v139[9] || *((int *)(v139[2] + (v30[9] << 2))) != -1)\n                    {\n                        v5 = v43;\n                    }\n                }\n                if (*((int *)(v139[2] + (v30[9] << 2))) == -1 && v30[9] != v139[6] && v139[13] > v139[9])\n                {\n                    *(v7) = 12;\n                    break;\n                }\n                else if (v30[9] == v139[6] || v139[13] <= v139[9] || *((int *)(v139[2] + (v30[9] << 2))) != -1)\n                {\n                    v117 = v27->field_8;\n                }\n            }\n        }\n    case 4:\n        if ((1 << (unsigned long long)((char)*((long long *)&v26->field_0) & 31) & v4->field_a8) != 0)\n        {\n            v38 = v4;\n            v4->field_a0 = v4->field_a0 | 1 << ((char)*((long long *)&v26->field_0) & 31);\n            v5 = (unsigned int)sub_40d500();\n            if (v5 != 0)\n            {\n                v38->field_98 = v38->field_98 + 1;\n                v38->field_b0 = v38->field_b0 | 2;\n            }\n        }\n        else\n        {\n            v5 = 0;\n            *(v7) = 6;\n        }\n    case 5:\n        v33 = v4;\n        v5 = (unsigned int)sub_40d500();\n        if (v5 != 0 && v4->field_b4 > 1)\n        {\n            v33->field_b0 = v33->field_b0 | 2;\n        }\n    case 8:\n        v2 = v34;\n        v25[6] = v25[6] + 1;\n        v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n        if (!(v26->field_8 != 9))\n        {\n            if (v25[6] <= 8)\n            {\n                v4->field_a8 = v4->field_a8 | 1 << ((char)v25[6] & 31);\n            }\n            v23 = 17;\n            v5 = (unsigned int)sub_40d500();\n            if (v5 != 0)\n            {\n                *((unsigned long long [7])(v5 + 40)) = v25[6];\n            }\n        }\n        else if (*(v7) == 0)\n        {\n            if (v26->field_8 != 9)\n            {\n                if (sub_4170f0() != 0)\n                {\n                    sub_40ad30();\n                }\n                *(v7) = 8;\n            }\n        }\n    case 9:\n        if (((unsigned int)v3 & 0x20000) == 0)\n        {\n            v5 = 0;\n            *(v7) = 16;\n        }\n    case 11: case 18: case 19:\n        if (!(((char)v3 & 32) == 0))\n        {\n            v5 = 0;\n            *(v7) = 13;\n        }\n        else if (!(((char)v3 & 16) == 0))\n        {\n            v2 = v47;\n            v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n            v5 = (unsigned int)sub_415ac0();\n        }\n    case 12:\n        v48 = (unsigned int)*((int *)&v27->field_0);\n        if (((unsigned short)*((int *)&v27->field_0) & 783) != 0 && (v4->field_b0 & 16) == 0)\n        {\n            v39 = v4;\n            v40 = (unsigned int)v4->field_b0 | 16;\n            *((unsigned long long *)&v4->field_b0) = v40;\n            if ((v40 & 8) == 0)\n            {\n                v39->field_b8 = 0x3ff000000000000;\n                v39->field_c0 = 576460745995190270;\n                if ((v40 & 4) != 0)\n                {\n                    *((int128_t *)&(&v39->field_c0)[1]) = 0;\n                    v48 = (unsigned int)*((int *)&v27->field_0);\n                }\n                else\n                {\n                    v45 = 128;\n                    v46 = 2;\n                }\n            }\n            else\n            {\n                v45 = 0;\n                v46 = 0;\n            }\n            if ((v40 & 4) == 0 || (v40 & 8) != 0)\n            {\n                tmp_18 = v46;\n                v55 = v46 * 64;\n                v57 = v45 + 0x100 - v55;\n                v58 = *((long long *)(unsigned long long)__ctype_b_loc()) + v45 * 2;\n                do\n                {\n                    v60 = 0;\n                    do\n                    {\n                        v61 = v60;\n                        if ((unsigned int)(v45 + v60) == 95 || (v58[2 * v60] & 8) != 0)\n                        {\n                            (&v4->field_b8)[tmp_18] = (&v4->field_b8)[tmp_18] | 1 << (v61 & 63);\n                        }\n                        v60 += 1;\n                    }\n                    while (v60 != 64);\n                    v62 = (unsigned int)v45 + 64;\n                    v63 = &v58[-18446744073709551488];\n                }\n                while (v57 != v62);\n            }\n        }\n        if (((unsigned int)(v48 - 0x100) & -257) == 0)\n        {\n            if ((unsigned int)v48 != 0x100)\n            {\n                *((int *)&v27->field_0) = 5;\n                *((int *)&v27->field_0) = 10;\n                v65 = (unsigned int)sub_40d500();\n            }\n            else\n            {\n                *((int *)&v27->field_0) = 6;\n                *((int *)&v27->field_0) = 9;\n                v65 = (unsigned int)sub_40d500();\n            }\n            v67 = (unsigned int)sub_40d500();\n            v23 = 10;\n            v68 = sub_40d500();\n            v103 = v68;\n            v5 = v68;\n        }\n        else\n        {\n            v5 = (unsigned int)sub_40d500();\n            if (v5 != 0)\n            {\n                v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n            }\n        }\n        if ((v67 == 0 || v65 == 0 || ((unsigned int)(v48 - 0x100) & -257) != 0) && (((unsigned int)(v48 - 0x100) & -257) == 0 || v5 == 0))\n        {\n            *(v7) = 12;\n        }\n    case 20:\n        v14 = 0;\n        v31 = calloc(0x20, 0x1);\n        v36 = v31;\n        v2 = v31;\n        v37 = calloc(0x50, 0x1);\n        v42 = v37 == 0;\n        if (v37 != 0 && v36 != 0)\n        {\n            v50 = v27->field_8;\n            if (v27->field_8 != 2)\n            {\n                v8 = 0;\n                if (v26->field_8 != 25)\n                {\n                    if (v50 == 21)\n                    {\n                        v27->field_8 = 1;\n                    }\n                    v6 = 0;\n                    v66 = v2;\n                    v5 = 0;\n                    while (true)\n                    {\n                        v16 = stack_base + -120;\n                        v15 = 3;\n                        v104 = sub_415130();\n                        if ((unsigned int)v104 == 0)\n                        {\n                            v101 = (unsigned int)sub_40ada0();\n                            if (((unsigned int)1 & -3) != 0)\n                            {\n                                v69 = v27->field_8;\n                                if (v69 == 22 && v27->field_8 != 2)\n                                {\n                                    v139[9] = v139[9] + v101;\n                                    sub_40ada0();\n                                    if (v19 != 21 && v19 != 2)\n                                    {\n                                        v17 = 3;\n                                        v18 = stack_base + -88;\n                                        v104 = sub_415130();\n                                        if (v104 == 0)\n                                        {\n                                            v101 = (unsigned int)sub_40ada0();\n                                            v92 = (2 <= v4->field_b4? v20 : 0);\n                                            v9 = (unsigned int)3 == 3;\n                                            if ((unsigned int)3 == 3)\n                                            {\n                                                v78 = -1;\n                                                v81 = v16;\n                                                while (v78 != 0)\n                                                {\n                                                    v78 -= 1;\n                                                    v79 = *(v81);\n                                                    v81 = &v81[v80];\n                                                    break;\n                                                }\n                                                v84 = !(rcx<8>) + -1;\n                                                if (v84 <= 1)\n                                                {\n                                                    v88 = -1;\n                                                    v89 = v18;\n                                                    while (v88 != 0)\n                                                    {\n                                                        v88 -= 1;\n                                                        v90 = *(v89);\n                                                        v89 = &v89[v80];\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            else if ((unsigned int)3 != 0)\n                                            {\n                                                v85 = 0;\n                                            }\n                                        }\n                                    }\n                                    if (v19 == 21)\n                                    {\n                                        v139[9] = v139[9] + (long long)(int)(0 - (unsigned int)v101);\n                                        v27->field_8 = 1;\n                                    }\n                                }\n                            }\n                            if ((((unsigned int)1 & -3) == 0 || v27->field_8 != 2) && (v19 == 21 || ((unsigned int)1 & -3) == 0 || v69 != 22) && (((unsigned int)1 & -3) == 0 || v69 != 22 || v19 != 2))\n                            {\n                                switch ((unsigned int)3)\n                                {\n                                case 0:\n                                    *((long long *)(v66 + ((unsigned int)((unsigned long long)(char)v16 >> 3) & 24))) = *((long long *)(v66 + ((unsigned int)((unsigned long long)(char)v16 >> 3) & 24))) | 1 << ((char)v16 & 63);\n                                    break;\n                                case 1:\n                                    v74 = *((long long *)(v20 + 40));\n                                    v75 = *((long long *)v20);\n                                    if (*((long long *)(v20 + 40)) == v5)\n                                    {\n                                        v77 = (v5 * 2 + 1) * 4;\n                                        v5 = v5 * 2 + 1;\n                                        v75 = realloc(*((long long *)v20), v77);\n                                        if (v75 != 0)\n                                        {\n                                            *((unsigned int **)v20) = v75;\n                                            v74 = *((long long *)(v20 + 40));\n                                        }\n                                    }\n                                case 2:\n                                    v71 = sub_4100d0();\n                                    *((unsigned long long *)&v7) = v71;\n                                    if (v71 != 0)\n                                    {\n                                        break;\n                                    }\n                                case 3:\n                                    v72 = sub_4100d0();\n                                    *((unsigned long long *)&v7) = v72;\n                                case 4:\n                                    v1 = v3;\n                                    v73 = sub_410120();\n                                    *((unsigned long long *)&v7) = v73;\n                                    if (v73 != 0)\n                                    {\n                                        break;\n                                    }\n                                default:\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                        }\n                        if ((unsigned int)v104 != 0 || v69 == 22 && v27->field_8 != 2 && v19 != 21 && v104 != 0 && ((unsigned int)1 & -3) != 0 && v19 != 2)\n                        {\n                            *((unsigned long long *)&v7) = v104;\n                        }\n                        if (false)\n                        {\n                            v82 = -1;\n                            v83 = v18;\n                            while (v82 != 0)\n                            {\n                                v82 -= 1;\n                                v86 = *(v83);\n                                v83 = &v83[v87];\n                                break;\n                            }\n                        }\n                        if ((unsigned int)v104 == 0 && *((long long *)(3 * 8 + 4318288)) == 4286205 && (unsigned int)3 <= 4 && (((unsigned int)1 & -3) == 0 || v27->field_8 != 2) && (v19 == 21 || ((unsigned int)1 & -3) == 0 || v69 != 22) && (((unsigned int)1 & -3) == 0 || v69 != 22 || v19 != 2) && *((long long *)(v20 + 40)) == v5 && v75 != 0 || (unsigned int)v104 == 0 && *((long long *)(3 * 8 + 4318288)) == 4286205 && (unsigned int)3 <= 4 && (((unsigned int)1 & -3) == 0 || v27->field_8 != 2) && (v19 == 21 || ((unsigned int)1 & -3) == 0 || v69 != 22) && (((unsigned int)1 & -3) == 0 || v69 != 22 || v19 != 2) && *((long long *)(v20 + 40)) != v5)\n                        {\n                            *((unsigned int **)(v20 + 40)) = (char *)v74 + 1;\n                            *((int *)((char *)v75 + 0x4 * v74)) = v16;\n                        }\n                        if ((unsigned int)v104 == 0 && v69 == 22 && v84 <= 1 && (unsigned int)3 == 3 && v104 == 0 && v27->field_8 != 2 && v19 != 21 && ((unsigned int)1 & -3) != 0 && v19 != 2 && !(rcx<8>) - 1 <= 1 || (unsigned int)v104 == 0 && v69 == 22 && v84 <= 1 && (unsigned int)3 == 3 && v104 == 0 && v27->field_8 != 2 && v19 != 21 && ((unsigned int)1 & -3) != 0 && v19 != 2 && (unsigned int)3 != 3 || (unsigned int)v104 == 0 && v69 == 22 && v104 == 0 && (unsigned int)3 == 0 && v27->field_8 != 2 && v19 != 21 && (unsigned int)3 != 3 && ((unsigned int)1 & -3) != 0 && v19 != 2)\n                        {\n                            if ((unsigned int)3 != 0)\n                            {\n                                v85 = 0;\n                            }\n                            if ((unsigned int)3 == 3)\n                            {\n                                v85 = v22;\n                            }\n                        }\n                        if (((unsigned int)v104 == 0 && v69 == 22 && v84 <= 1 && (unsigned int)3 == 3 && v104 == 0 && v27->field_8 != 2 && v19 != 21 && ((unsigned int)1 & -3) != 0 && v19 != 2 && !(rcx<8>) - 1 <= 1 || (unsigned int)v104 == 0 && v69 == 22 && v84 <= 1 && (unsigned int)3 == 3 && v104 == 0 && v27->field_8 != 2 && v19 != 21 && ((unsigned int)1 & -3) != 0 && v19 != 2 && (unsigned int)3 != 3 || (unsigned int)v104 == 0 && v69 == 22 && v104 == 0 && (unsigned int)3 == 0 && v27->field_8 != 2 && v19 != 21 && (unsigned int)3 != 3 && ((unsigned int)1 & -3) != 0 && v19 != 2) && (unsigned int)3 == 0 || (unsigned int)v104 == 0 && v69 == 22 && v104 == 0 && v27->field_8 != 2 && v19 != 21 && (unsigned int)3 != 3 && ((unsigned int)1 & -3) != 0 && v19 != 2 && (unsigned int)3 != 0 && (unsigned int)3 == 0)\n                        {\n                            v85 = (char)v18;\n                        }\n                        if (...)\n                        {\n                            if ((unsigned int)3 != 0)\n                            {\n                                v91 = (unsigned int)v16;\n                            }\n                            if ((unsigned int)3 == 0 || v9 != 0)\n                            {\n                                *((unsigned long *)&v10) = v85;\n                                v9[0] = v92;\n                                v91 = sub_40b4b0();\n                                v92 = v9;\n                            }\n                            if ((unsigned int)3 != 0)\n                            {\n                                v93 = (unsigned int)v18;\n                            }\n                            if ((unsigned int)3 == 3 || (unsigned int)3 == 0)\n                            {\n                                *((unsigned long *)&v10) = v91;\n                                v9[0] = v92;\n                                v93 = (unsigned int)sub_40b4b0();\n                            }\n                        }\n                        if (...)\n                        {\n                            *(v7) = 3;\n                        }\n                        if (...)\n                        {\n                            v94 = v92[8];\n                            v95 = v92[1];\n                            if (v92[8] == v6)\n                            {\n                                v13 = v93;\n                                *((unsigned long *)&v12) = v91;\n                                v9[0] = v92;\n                                tmp_31 = (v6 * 2 + 1) * 4;\n                                v6 = v6 * 2 + 1;\n                                *((long long *)&v11) = tmp_31;\n                                v96 = realloc(v95, tmp_31);\n                                v10 = v96;\n                                v97 = realloc(v9[2], *((long long *)&v11));\n                                v95 = v10;\n                                if (v10 != 0)\n                                {\n                                    v92 = v9;\n                                    v91 = v12;\n                                    v93 = v13;\n                                    if (v5 != 0)\n                                    {\n                                        v92[2] = v5;\n                                        v94 = v92[8];\n                                        v92[1] = v10;\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            *(v7) = 11;\n                        }\n                        if (...)\n                        {\n                            v5 = v97;\n                            free(v10);\n                            free(v5);\n                            *(v7) = 12;\n                        }\n                        if (...)\n                        {\n                            *((unsigned long *)((char *)v95 + 0x4 * v94)) = v91;\n                            v98 = v92[2];\n                            v92[8] = (char *)v94 + 1;\n                            *((unsigned long *)((char *)v98 + 0x4 * v94)) = v93;\n                        }\n                        if (...)\n                        {\n                            v99 = 0;\n                            do\n                            {\n                                v100 = v99;\n                                if (v91 <= (unsigned int)v99 && v93 >= (unsigned int)v99)\n                                {\n                                    *((unsigned long long *)(v66 + (v99 >> 6) * 8)) = *((long long *)(v66 + (v99 >> 6) * 8)) | 1 << (v100 & 63);\n                                }\n                                v99 += 1;\n                            }\n                            while (v99 != 0x100);\n                            *(v7) = 0;\n                        }\n                        if (...)\n                        {\n                            v102 = v27->field_8;\n                            if (v102 == 21 && v27->field_8 != 2)\n                            {\n                                v139[9] = v139[9] + v101;\n                                if (v8 != 0)\n                                {\n                                    v105 = v2;\n                                    v106 = v2 + 32;\n                                    do\n                                    {\n                                        *((long long *)v105) = !(*((long long *)v105));\n                                        v105 += 8;\n                                    }\n                                    while (v106 != v105);\n                                }\n                                v107 = v4->field_b4;\n                                if (v4->field_b4 > 1)\n                                {\n                                    v110 = 0;\n                                    do\n                                    {\n                                        *((long long *)(v2 + v110)) = *((long long *)(v2 + v110)) & *((long long *)(v4->field_78 + v110));\n                                        v110 += 8;\n                                    }\n                                    while (v110 != 32);\n                                }\n                                if (*((long long *)(v20 + 48)) == 0 && *((long long *)(v20 + 40)) == 0 && *((long long *)(v20 + 64)) == 0 && *((long long *)(v20 + 56)) == 0)\n                                {\n                                    v111 = v107;\n                                    if ((v107 <= 1 || *((long long *)(v20 + 72)) == 0) && (v107 <= 1 || (*((char *)(v20 + 32)) & 1) == 0))\n                                    {\n                                        sub_40bef0();\n                                        v21 = 3;\n                                        v20 = v2;\n                                        v5 = (unsigned int)sub_40d500();\n                                        if (v5 != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (*((long long *)(v20 + 48)) != 0 || *((long long *)(v20 + 40)) != 0 || *((long long *)(v20 + 64)) != 0 || *((long long *)(v20 + 56)) != 0 || v107 > 1 && *((long long *)(v20 + 72)) != 0 || v107 > 1 && (*((char *)(v20 + 32)) & 1) != 0)\n                                {\n                                    v4->field_b0 = v4->field_b0 | 2;\n                                    v21 = 6;\n                                    v20 = v37;\n                                    v5 = (unsigned int)sub_40d500();\n                                    v113 = v2 + 32;\n                                    v114 = v2;\n                                    if (v2 != 0)\n                                    {\n                                        while (true)\n                                        {\n                                            if (*((long long *)v114) == 0)\n                                            {\n                                                v114 += 8;\n                                                free(v2);\n                                            }\n                                            else\n                                            {\n                                                v21 = 3;\n                                                v20 = v2;\n                                                v115 = sub_40d500();\n                                                if (v115 == 0)\n                                                {\n                                                    break;\n                                                }\n                                                v23 = 10;\n                                                v5 = (unsigned int)sub_40d500();\n                                                if (v5 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        if (*((long long *)v114) != 0)\n                                        {\n                                            *(v7) = 12;\n                                        }\n                                        else if (v113 == v114 && *((long long *)v114) == 0 || v115 != 0 && *((long long *)v114) != 0)\n                                        {\n                                            v117 = v27->field_8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            *(v7) = 7;\n                        }\n                        if (...)\n                        {\n                            *(v7) = 12;\n                        }\n                    }\n                    if (...)\n                    {\n                        free(v2);\n                        sub_40bef0();\n                    }\n                    else if (...)\n                    {\n                        v117 = v27->field_8;\n                    }\n                }\n                else\n                {\n                    *((char *)(v20 + 32)) = *((char *)(v20 + 32)) | 1;\n                    if (((unsigned short)v3 & 0x100) != 0)\n                    {\n                        *((long long *)v2) = *((long long *)v2) | 0x400;\n                    }\n                    v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_40ada0();\n                    v64 = (unsigned int)sub_40ada0();\n                    v50 = v27->field_8;\n                    if (v27->field_8 != 2)\n                    {\n                        v8 = 1;\n                    }\n                }\n            }\n            else\n            {\n                *(v7) = 2;\n                free(v2);\n                sub_40bef0();\n                if (*(v7) == 0)\n                {\n                    v5 = 0;\n                }\n            }\n        }\n        if (v37 == 0 || v36 == 0)\n        {\n            free(v2);\n            free(v20);\n        }\n    case 24:\n        v26->field_8 = 1;\n        v5 = (unsigned int)sub_40d500();\n        if (v5 != 0)\n        {\n            v117 = v27->field_8;\n            for (v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350(); v117 <= 23; v5 = 0)\n            {\n                v118 = v117 == 18;\n                v0 = 0x8c0800;\n                if (((char)((char)*(&((char *)stack_base)[((v117 & 63) >> 3) + -568]) >> (unsigned long long)(char)(v117 & 63 & 7)) & 1) == 0)\n                {\n                    break;\n                }\n                v119 = v139[9];\n                v120 = *((int128_t *)&v27);\n                if (v117 != 23)\n                {\n                    v121 = v118;\n                    if (v117 != 19)\n                    {\n                        v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n                        if (v5 != 0)\n                        {\n                            if (v117 == 18)\n                            {\n                                v2 = -1;\n                                v121 = 1;\n                                v125 = v5;\n                            }\n                            else if (*((char *)(v5 + 48)) != 17)\n                            {\n                                v2 = -1;\n                                v121 = 0;\n                                v6 = 0;\n                            }\n                            else\n                            {\n                                v2 = -1;\n                                v121 = 0;\n                                v6 = 0;\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v6 = v120;\n                    v122 = v6;\n                    v2 = (unsigned int)sub_415a00();\n                    if (v2 != -1)\n                    {\n                        if (v2 != -2)\n                        {\n                            v123 = v27->field_8;\n                            if (v27->field_8 == 24)\n                            {\n                                v121 = v2;\n                            }\n                            else if (v123 == 1)\n                            {\n                                if (v27->field_0 == 44)\n                                {\n                                    v121 = v2;\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if (v27->field_8 == 1 && v27->field_0 == 44)\n                        {\n                            v121 = 0;\n                        }\n                    }\n                    if ((v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v2 == -1 || v2 != -2) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1))\n                    {\n                        v6 = v6;\n                        v122 = v6;\n                        v2 = (unsigned int)sub_415a00();\n                    }\n                    if (v27->field_8 == 2 && ((unsigned int)v3 & 0x200000) == 0 && (v2 == -2 || v2 != -1) && (v2 == -2 || v27->field_8 != 24) && (v2 == -2 || v123 != 1) && (v27->field_8 == 1 || v2 != -1))\n                    {\n                        *(v7) = 9;\n                    }\n                }\n                if (v117 == 19)\n                {\n                    v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n                    if (v5 != 0)\n                    {\n                        if (*((char *)(v5 + 48)) != 17)\n                        {\n                            v2 = 1;\n                            v124 = 10;\n                            v6 = 0;\n                        }\n                        else\n                        {\n                            v2 = 1;\n                            v6 = 0;\n                        }\n                    }\n                }\n                if (v117 == 23 && v123 == 1 && v2 != -1 && ((unsigned int)v3 & 0x200000) != 0 && v27->field_8 != 24 && v2 != -2 && v27->field_0 != 44 || v117 == 23 && ((unsigned int)v3 & 0x200000) != 0 && (v27->field_0 == 44 || v2 != -1) && (v2 == -2 || v2 != -1) && (v2 == -2 || v27->field_8 != 24) && (v2 == -2 || v123 != 1) && (v27->field_8 == 1 || v2 != -1))\n                {\n                    v139[9] = v119;\n                    v126 = v5;\n                    *((uint128_t *)&v27) = v122;\n                    v27->field_8 = 1;\n                }\n                if ((v117 == 23 && v123 == 1 && v27->field_0 == 44 && v2 != -1 && v2 >= v121 && v27->field_8 != 24 && v2 != -2 || v117 == 23 && v2 == -1 && v2 != -2 && (v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1)) && v27->field_8 == 24 && v2 == -1)\n                {\n                    v129 = 0;\n                    v130 = 32767 < v121;\n                }\n                if (...)\n                {\n                    *(v7) = 10;\n                }\n                if (v117 == 23 && v27->field_8 == 24 && v2 != -1 && v2 != -2 || (v117 == 23 && v123 == 1 && v27->field_0 == 44 && v2 != -1 && v2 >= v121 && v27->field_8 != 24 && v2 != -2 || v117 == 23 && v2 == -1 && v2 != -2 && (v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1)) && v27->field_8 == 24 && v2 != -1)\n                {\n                    v127 = 0;\n                    v128 = 32767 < v2;\n                }\n                if ((v117 == 23 && v123 == 1 && v27->field_0 == 44 && v2 != -1 && v2 >= v121 && v27->field_8 != 24 && v2 != -2 || v117 == 23 && v2 == -1 && v2 != -2 && (v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1)) && v27->field_8 == 24 && v2 == -1 && rax<8> != 0 || (v117 == 23 && v27->field_8 == 24 && v2 != -1 && v2 != -2 || (v117 == 23 && v123 == 1 && v27->field_0 == 44 && v2 != -1 && v2 >= v121 && v27->field_8 != 24 && v2 != -2 || v117 == 23 && v2 == -1 && v2 != -2 && (v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1)) && v27->field_8 == 24 && v2 != -1) && rax<8> != 0)\n                {\n                    *(v7) = 15;\n                }\n                if ((v117 == 23 && v123 == 1 && v27->field_0 == 44 && v2 != -1 && v2 >= v121 && v27->field_8 != 24 && v2 != -2 || v117 == 23 && v2 == -1 && v2 != -2 && (v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1)) && v27->field_8 == 24 && v2 == -1 && rax<8> == 0 || (v117 == 23 && v27->field_8 == 24 && v2 != -1 && v2 != -2 || (v117 == 23 && v123 == 1 && v27->field_0 == 44 && v2 != -1 && v2 >= v121 && v27->field_8 != 24 && v2 != -2 || v117 == 23 && v2 == -1 && v2 != -2 && (v2 == -1 || v123 == 1) && (v2 == -1 || v27->field_0 == 44) && (v2 == -1 || v27->field_8 != 24) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1)) && v27->field_8 == 24 && v2 != -1) && rax<8> == 0)\n                {\n                    v139[9] = v139[9] + (unsigned long long)(unsigned int)sub_415350();\n                    if (v5 != 0)\n                    {\n                        if (v2 == 0 && v121 == 0)\n                        {\n                            sub_40ad30();\n                        }\n                        else if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rbx<8>, 0x0<64>, 0x0<64>))\n                        {\n                            v132 = v5;\n                            v125 = 0;\n                        }\n                        else if (v121 != 1)\n                        {\n                            v6[0] = v139;\n                            v133 = 2;\n                            v8 = v27;\n                            v134 = v121;\n                            v135 = &v4[-82351536043346212];\n                            while (true)\n                            {\n                                v23 = 16;\n                                v137 = (unsigned int)sub_40d500();\n                                if (v137 != 0)\n                                {\n                                    if (v137 == 0)\n                                    {\n                                        break;\n                                    }\n                                    v133 += 1;\n                                    v121 = v134;\n                                    v138 = (unsigned int)sub_40d5e0();\n                                    v27 = v8;\n                                    v139 = v6;\n                                    v125 = v137;\n                                }\n                            }\n                            if (v137 == 0 || v121 >= v133)\n                            {\n                                *(v7) = 12;\n                            }\n                        }\n                        else\n                        {\n                            v125 = v5;\n                        }\n                    }\n                }\n                if (...)\n                {\n                    break;\n                }\n                if (...)\n                {\n                    v5 = 0;\n                }\n                if (...)\n                {\n                    v6 = v125;\n                    v132 = (unsigned int)sub_40d5e0();\n                }\n                if (...)\n                {\n                    v6 = v125;\n                }\n                if (...)\n                {\n                    sub_40ad30();\n                }\n                if (...)\n                {\n                    v124 = 10;\n                }\n                if (...)\n                {\n                    v124 = 11;\n                }\n                if (...)\n                {\n                    v23 = v124;\n                    v125 = (unsigned int)sub_40d500();\n                    if (v125 != 0)\n                    {\n                        v141 = v121 + 2;\n                        if (v141 <= v2)\n                        {\n                            v8 = v27;\n                            while (true)\n                            {\n                                v23 = 16;\n                                v143 = sub_40d500();\n                                if ((unsigned long long)(unsigned int)sub_40d5e0() == 0)\n                                {\n                                    break;\n                                }\n                                if (v143 == 0)\n                                {\n                                    break;\n                                }\n                                v23 = 10;\n                                if (v125 == 0)\n                                {\n                                    break;\n                                }\n                                v141 += 1;\n                                v27 = v8;\n                                v125 = (unsigned int)sub_40d500();\n                            }\n                            if (v143 == 0 || v125 == 0 || v141 <= v2)\n                            {\n                                *(v7) = 12;\n                            }\n                        }\n                    }\n                }\n                if (...)\n                {\n                    v23 = 16;\n                    v126 = sub_40d500();\n                }\n                if (...)\n                {\n                    *(v7) = 12;\n                }\n                if (...)\n                {\n                    v5 = v125;\n                }\n                if (...)\n                {\n                    v5 = v126;\n                }\n                if (...)\n                {\n                    break;\n                }\n                if (...)\n                {\n                    v117 = v27->field_8;\n                    if (v5 == 0)\n                    {\n                        break;\n                    }\n                    sub_40ad30();\n                }\n                if (...)\n                {\n                    sub_40ad30();\n                }\n            }\n            if (...)\n            {\n                v5 = 0;\n            }\n            else if (((unsigned int)v3 & 0x1000000) != 0 && (v117 == 23 || v117 == 11))\n            {\n                v5 = 0;\n                *(v7) = 13;\n            }\n            else\n            {\n                return v5;\n            }\n        }\n    case 32: case 33:\n        v32 = v7;\n        v5 = (unsigned int)sub_4108f0();\n        if (*(v32) != 0 && v5 == 0)\n        {\n            break;\n        }\n    case 34: case 35:\n        v32 = v7;\n    case 36:\n        v5 = 0;\n        *(v7) = 5;\n    }\n    if (v26->field_8 <= 36)\n    {\n        v27 = v26;\n        v7 = v28;\n        v3 = v29;\n        v139 = v30;\n    }\n    v5 = 0;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_41ae10",
            "funcStartAddr": "0x41ae10",
            "funcEndAddr": "0x41afc6",
            "decompiledFuncCode": "int sub_41ae10()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long long|unsigned long v2;  // [bp-0x48]\n    unsigned long v3;  // [bp-0x40]\n    unsigned long v5;  // rsi\n    unsigned int v6;  // r14d\n    char *v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned int v9;  // eax\n    unsigned long v10;  // rbp\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r12\n    unsigned long v14;  // r13\n    unsigned long long v15;  // rax\n    unsigned int *v16;  // r15\n    unsigned long v17;  // rbp\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // rdi\n    unsigned long long v23;  // rax\n\n    v6 = v5;\n    v0 = v7;\n    v1 = strlen(v7);\n    v14 = (0x10000000 <= v1? v1 : v1 << 4) + 1;\n    v13 = malloc((0x10000000 <= v1? v1 : v1 << 4) + 1);\n    if (v13 != 0)\n    {\n        iconv(v6, 0x0, 0x0, 0x0, 0x0);\n        v2 = v13;\n        *((int *)&v3) = (0x10000000 <= v1? v1 : v1 << 4);\n        while (true)\n        {\n            v8 = iconv(v6, (unsigned int)&v0, (unsigned int)&v1, (unsigned int)&v2, (unsigned int)&v3);\n            if (v8 == -1)\n            {\n                v16 = __errno_location();\n                v9 = *(v16);\n                if (v9 == 7 && v14 < v14 << 1)\n                {\n                    v12 = realloc(v13, v14);\n                    if (v13 != 0)\n                    {\n                        v13 = v12;\n                        v14 = v10;\n                        v2 = v12 + v11;\n                        v3 = v10 - 1 - v11;\n                    }\n                }\n                if (v9 == 7)\n                {\n                    v10 = v14 * 2;\n                    v11 = v2 - v13;\n                }\n            }\n            if (v9 == 22 || v8 != -1)\n            {\n                while (true)\n                {\n                    v15 = iconv(v6, 0x0, 0x0, (unsigned int)&v2, (unsigned int)&v3);\n                    if (v15 == -1)\n                    {\n                        v16 = __errno_location();\n                        v17 = v14 * 2;\n                        v18 = v2 - v13;\n                        if (*(v16) != 7 || v14 >= v14 << 1)\n                        {\n                            break;\n                        }\n                        v19 = realloc(v13, v14);\n                        if (v13 == 0)\n                        {\n                            break;\n                        }\n                        v14 = v17;\n                        v13 = v19;\n                        v2 = v19 + v18;\n                        v3 = v17 - 1 - v18;\n                    }\n                    else\n                    {\n                        v20 = v2;\n                        v2 += 1;\n                        *((char *)v20) = 0;\n                        v21 = v2 - v13;\n                        if (v14 <= v2 - v13)\n                        {\n                            break;\n                        }\n                        v13 = (realloc(v13, v21) != 0? v20 : r12<8>);\n                    }\n                }\n                if (*(v16) == 7 && v15 == -1)\n                {\n                    *(v16) = 12;\n                }\n                else if (v15 == -1)\n                {\n                    v22 = v13;\n                    v13 = 0;\n                    free(v22);\n                }\n                else if (v15 != -1)\n                {\n                    v23 = v13;\n                    return v23;\n                }\n            }\n            if (v9 == 22 || v8 != -1 || v9 == 7 && v13 == 0 || v9 == 7 && v14 >= v14 << 1)\n            {\n                *(v16) = 12;\n            }\n            if (v9 == 22 || v13 == 0 || v8 != -1 || v9 != 7 || v14 >= v14 << 1)\n            {\n                v22 = v13;\n                v13 = 0;\n                free(v22);\n            }\n        }\n    }\n    else\n    {\n        *(__errno_location()) = 12;\n    }\n    v23 = v13;\n    return v23;\n}\n"
        },
        {
            "funcName": "sub_4131a0",
            "funcStartAddr": "0x4131a0",
            "funcEndAddr": "0x41482d",
            "decompiledFuncCode": "int sub_4131a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409230",
            "funcStartAddr": "0x409230",
            "funcEndAddr": "0x4092a8",
            "decompiledFuncCode": "int sub_409230() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407d40",
            "funcStartAddr": "0x407d40",
            "funcEndAddr": "0x407d53",
            "decompiledFuncCode": "extern int512_t g_623c40;\n\nint sub_407d40()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_623c40 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_623c40 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40aaf0",
            "funcStartAddr": "0x40aaf0",
            "funcEndAddr": "0x40ab05",
            "decompiledFuncCode": "int sub_40aaf0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40a480();\n}\n"
        },
        {
            "funcName": "sub_418a80",
            "funcStartAddr": "0x418a80",
            "funcEndAddr": "0x418adc",
            "decompiledFuncCode": "int sub_418a80()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_409bc0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4058a0",
            "funcStartAddr": "0x4058a0",
            "funcEndAddr": "0x4058a8",
            "decompiledFuncCode": "extern unsigned long long g_623b18;\n\nint sub_4058a0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_623b18 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408370",
            "funcStartAddr": "0x408370",
            "funcEndAddr": "0x4084f5",
            "decompiledFuncCode": "int sub_408370()\n{\n    unsigned long long *v0;  // [bp-0xd0]\n    char v1;  // [bp-0xc8]\n    unsigned int v2;  // [bp-0xb0]\n    unsigned long v3;  // [bp-0x98]\n    unsigned long v5;  // rsi\n    void *v6;  // rdi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbp\n    unsigned int *v10;  // r14\n    unsigned long long v11;  // rax\n    unsigned int v12;  // rsi\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // r12\n    unsigned int *v16;  // r14\n    unsigned int|unsigned long v17;  // r15d\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // rdi\n    unsigned long long v21;  // rax\n\n    v0 = v5;\n    v7 = __fxstat(0x1, fileno(v6), (unsigned int)&v1);\n    if (v7 >= 0 && ((unsigned short)v2 & 0xf000) == 0x8000)\n    {\n        v8 = ftello(v6);\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && v3 > v8)\n        {\n            v13 = v3 - v8 + 1;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v3 <= v8 || v7 < 0 || ((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v13 = 0x2000;\n    }\n    v15 = malloc(v13);\n    if (v15 != 0)\n    {\n        v9 = 0;\n        while (true)\n        {\n            v10 = v13 - v9;\n            v11 = fread(v15 + v9, 0x1, v13 - v9, v6);\n            v9 += v11;\n            if (v10 != v11)\n            {\n                v16 = __errno_location();\n                v17 = *(v16);\n                v18 = ferror((unsigned int)v6);\n                if (v18 == 0)\n                {\n                    v19 = v13 - 1;\n                    if (v19 > v9)\n                    {\n                        v15 = (realloc(v15, v9 + 1) != 0? v18 : r12<8>);\n                    }\n                    *((char *)(v15 + v9)) = 0;\n                    *(v0) = v9;\n                }\n            }\n            else if (v13 != -1)\n            {\n                v12 = (!(v13 >> 1) <= v13? -1 : (v13 >> 1) + v13);\n                v13 = (!(v13 >> 1) <= v13? -1 : (v13 >> 1) + v13);\n                v14 = realloc(v15, v12);\n                if (v15 != 0)\n                {\n                    v15 = v14;\n                }\n                else\n                {\n                    v17 = *(v10);\n                    v10 = __errno_location();\n                }\n            }\n            else\n            {\n                v15 = 0;\n                free(v6);\n                *(__errno_location()) = 12;\n            }\n            if ((v10 == v11 || v18 != 0) && (v15 == 0 || v10 != v11) && (v10 != v11 || v13 != -1))\n            {\n                v20 = v15;\n                v15 = 0;\n                free(v20);\n                *((unsigned long *)&v16) = v17;\n            }\n        }\n    }\n    v21 = v15;\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_40b560",
            "funcStartAddr": "0x40b560",
            "funcEndAddr": "0x40b6f3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[16];\n    unsigned long long field_58;\n    char padding_60[24];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40b560()\n{\n    unsigned int v0;  // [bp-0x6c]\n    char v1;  // [bp-0x68]\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned int *v5;  // rbp\n    unsigned long v6;  // r12\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rcx\n    char *v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned int|char * v13;  // rdx\n    char *v14;  // rcx\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // rsi\n    unsigned int *v17;  // rdi\n    unsigned int *v18;  // rdx\n    unsigned long long v19;  // rcx\n\n    v4 = v3;\n    v5 = v3->field_30;\n    v6 = (v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58);\n    if ((v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58) > v3->field_30)\n    {\n        while (true)\n        {\n            v10 = v4->field_78;\n            v7 = v4->field_20;\n            v8 = v6 + -0x1 * v5;\n            if (v4->field_90 > 0 && v4->field_78 != 0)\n            {\n                v11 = 0;\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    while (true)\n                    {\n                        v9 = v10[(unsigned long long)(char)*(&((char *)v5)[v4->field_28 + v11 + v4->field_0])];\n                        *(&((char *)v5)[v11 + v4->field_8]) = v10[(unsigned long long)(char)*(&((char *)v5)[v4->field_28 + v11 + v4->field_0])];\n                        *((unsigned long long *)&v1) = v9;\n                        if (v4->field_90 > (unsigned int)(v11 + 1))\n                        {\n                            v11 += 1;\n                            if (v8 == v11)\n                            {\n                                break;\n                            }\n                            v10 = v4->field_78;\n                        }\n                    }\n                }\n            }\n            v12 = sub_40ab50();\n            if (v12 - 1 <= -3)\n            {\n                v13 = (unsigned long long)v0;\n                if (v12 == -2)\n                {\n                    v12 = v4->field_58;\n                    if (v4->field_40 < v4->field_58)\n                    {\n                        v4->field_20 = v7;\n                    }\n                }\n            }\n            if (v12 - 1 > -3 || v12 == -2 && v4->field_40 >= v4->field_58)\n            {\n                v14 = v4->field_78;\n                v13 = (unsigned long long)(char)*(&((char *)v5)[v4->field_28 + v4->field_0]);\n                v0 = (char)*(&((char *)v5)[v4->field_28 + v4->field_0]);\n                if (v4->field_78 != 0)\n                {\n                    v13 = (char)*((char *)(v14 + v13));\n                    v0 = v13;\n                }\n                v4->field_20 = v7;\n                v12 = 1;\n            }\n            if (v12 != -2 || v12 - 1 > -3 || v4->field_40 >= v4->field_58)\n            {\n                v15 = v4->field_10;\n                v16 = (char *)v5 + 1;\n                v17 = v5 * 4;\n                *((char **)(v4->field_10 + v5 * 4)) = v13;\n                v5 = (char *)v5 + v12;\n                v5 = v16;\n                if (v5 < v5)\n                {\n                    v18 = &((unsigned int *)(v15 + (char *)v17))[1];\n                    v19 = v15 + v5 * 4;\n                    do\n                    {\n                        *(v18) = -1;\n                        v18 = &v18[1];\n                    }\n                    while (v19 != v18);\n                    if (v5 >= v6)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    v4->field_30 = v5;\n    v4->field_38 = v5;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_4085a0",
            "funcStartAddr": "0x4085a0",
            "funcEndAddr": "0x4085aa",
            "decompiledFuncCode": "int sub_4085a0()\n{\n}\n"
        },
        {
            "funcName": "sub_408020",
            "funcStartAddr": "0x408020",
            "funcEndAddr": "0x40808d",
            "decompiledFuncCode": "int sub_408020()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_407b00();\n}\n"
        },
        {
            "funcName": "sub_40d340",
            "funcStartAddr": "0x40d340",
            "funcEndAddr": "0x40d4d1",
            "decompiledFuncCode": "int sub_40d340()\n{\n    unsigned long long v0;  // [bp-0x20]\n    void tmp_21;  // tmp #21\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rsi\n    unsigned long long v6;  // r10\n    unsigned long long v7[3];  // rdx\n    unsigned long long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned long long v10[3];  // r12\n    unsigned long long v11[3];  // rbp\n    unsigned long long v12;  // rbx\n    unsigned long long v13[3];  // rdi\n    unsigned long long v14[3];  // rbx\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // r13\n    unsigned long v17;  // r13\n    unsigned long long v19;  // r8\n    unsigned long long *v20;  // r13\n    unsigned long long *v21;  // r11\n    unsigned long long *v22;  // rax\n    unsigned long long *v23;  // r10\n    unsigned long long|unsigned long long * v24;  // rsi\n    unsigned long long *v25;  // rcx\n    unsigned long long v26;  // r8\n    unsigned long long v27;  // rdx\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep2\n    unsigned long long v30;  // r9\n    unsigned long long *v31;  // r10\n    unsigned long long v32;  // r8\n    unsigned long long v33;  // rcx\n    unsigned long long *v34;  // r10\n    unsigned long long *v35;  // rax\n    unsigned long long *v36;  // r9\n    unsigned long v37;  // rdx\n    unsigned long long v38;  // rdx\n    unsigned long long *v39;  // rdi\n    void *v40;  // rsi\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rbx\n    unsigned long long v44;  // r12\n    unsigned long long v45;  // r13\n\n    v6 = v5[1];\n    if (v5[1] != 0)\n    {\n        v19 = v7[1];\n        if (v7[1] != 0)\n        {\n            v3 = v8;\n            v2 = v9;\n            v10 = v7;\n            v1 = stack_base + 0;\n            v11 = v5;\n            v0 = v12;\n            v14 = v13;\n            v15 = v13[1];\n            v16 = *(v13);\n            v39 = v13[2];\n            if (v5[1] + v7[1] + v15 > v16)\n            {\n                v17 = v16 + v5[1] + v7[1];\n                v39 = realloc(v39, v17 * 8);\n                if (v39 != 0)\n                {\n                    v15 = v14[1];\n                    v6 = v11[1];\n                    v14[2] = v39;\n                    v14[0] = v17;\n                    v19 = v7[1];\n                }\n                else\n                {\n                    v42 = 12;\n                }\n            }\n            if (v5[1] + v7[1] + v15 <= v16 || v39 != 0)\n            {\n                v20 = v11[2];\n                v21 = v10[2];\n                tmp_21 = v15 + v6;\n                v22 = v19 - 1;\n                v23 = v6 - 1;\n                v24 = tmp_21 + v19;\n                v25 = v15 - 1;\n                v26 = *((long long *)(v11[2] + v23 * 8));\n                v27 = *((long long *)(v10[2] + v22 * 8));\n                while (true)\n                {\n                    v28 = v26;\n                    v29 = v27;\n                    if (v28 < v29)\n                    {\n                        v22 = (char *)&v22[-1] + 7;\n                        if ((char)((char *)&v22[-1] + 7 >> 63))\n                        {\n                            break;\n                        }\n                    }\n                    v27 = *((long long *)((char *)v21 + 0x8 * v22));\n                    v28 = v26;\n                    v29 = *((long long *)((char *)v21 + 0x8 * v22));\n                    if (v26 == v27 || v26 == *((long long *)((char *)v21 + 0x8 * v22)))\n                    {\n                        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                        {\n                            while (true)\n                            {\n                                v30 = *((long long *)((char *)v39 + 0x8 * v25));\n                                if (*((long long *)((char *)v39 + 0x8 * v25)) > v26)\n                                {\n                                    v25 = (char *)&v25[-1] + 7;\n                                    if (v25 == -1)\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    break;\n                                }\n                            }\n                            if (true)\n                            {\n                                v24 -= 1;\n                                *((unsigned long long *)((char *)v39 + 0x8 * v24)) = v26;\n                            }\n                            else if (*((long long *)((char *)v39 + 0x8 * v25)) <= v26)\n                            {\n                                v23 = (char *)&v23[-1] + 7;\n                                if ((char)((char *)&v23[-1] + 7 >> 63))\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v24 -= 1;\n                        *((unsigned long long *)((char *)v39 + 0x8 * v24)) = v26;\n                        v22 = (char *)&v22[-1] + 7;\n                        if ((char)((char *)&v22[-1] + 7 >> 63))\n                        {\n                            break;\n                        }\n                        v26 = *((long long *)((char *)v20 + 0x8 * v23));\n                    }\n                    v31 = (char *)&v23[-1] + 7;\n                    if ((char)((char *)&v23[-1] + 7 >> 63))\n                    {\n                        break;\n                    }\n                    v26 = *((long long *)((char *)v20 + 0x8 * v31));\n                }\n                v35 = v14[1] - 1;\n                v36 = v11[1] + v14[1] + v10[1] - 1;\n                v37 = v11[1] + v14[1] + v10[1] - v24;\n                v14[1] = v14[1] + v11[1] + v14[1] + v10[1] - v24;\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    while (true)\n                    {\n                        v32 = *((long long *)((char *)v39 + 0x8 * v36));\n                        v33 = *((long long *)((char *)v39 + 0x8 * v35));\n                        v34 = (char *)v39 + 0x8 * ((char *)v35 + v37);\n                        if (*((long long *)((char *)v39 + 0x8 * v36)) > *((long long *)((char *)v39 + 0x8 * v35)))\n                        {\n                            v36 = (char *)&v36[-1] + 7;\n                            *(v34) = v32;\n                            v37 -= 1;\n                            v39 = v14[2];\n                            v38 = 0;\n                        }\n                        else\n                        {\n                            v35 = (char *)&v35[-1] + 7;\n                            *(v34) = v33;\n                            v38 = v37 * 8;\n                            v39 = v14[2];\n                        }\n                    }\n                }\n                else\n                {\n                    v38 = v37 * 8;\n                }\n                v40 = &v39[v24];\n                memcpy(v39, v40, v38);\n                v42 = 0;\n            }\n            v43 = v0;\n            v44 = v2;\n            v45 = v3;\n            return v42;\n        }\n    }\n    if (v7[1] == 0 || v5[1] == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_4082e0",
            "funcStartAddr": "0x4082e0",
            "funcEndAddr": "0x4082f3",
            "decompiledFuncCode": "int sub_4082e0()\n{\n}\n"
        },
        {
            "funcName": "sub_41b428",
            "funcStartAddr": "0x41b428",
            "funcEndAddr": "0x41b448",
            "decompiledFuncCode": "extern unsigned long long g_622e30;\n\nint sub_41b428()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_622e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408110",
            "funcStartAddr": "0x408110",
            "funcEndAddr": "0x40811f",
            "decompiledFuncCode": "int sub_408110()\n{\n}\n"
        },
        {
            "funcName": "sub_415640",
            "funcStartAddr": "0x415640",
            "funcEndAddr": "0x415659",
            "decompiledFuncCode": "int sub_415640()\n{\n    unsigned int v1;  // r15d\n    unsigned long long v2;  // r15\n\n    v2 = v1 & 0x1200;\n}\n"
        },
        {
            "funcName": "sub_417ea0",
            "funcStartAddr": "0x417ea0",
            "funcEndAddr": "0x417efc",
            "decompiledFuncCode": "int sub_417ea0()\n{\n    unsigned long v1;  // rcx\n    unsigned long long v6;  // rax\n    char v8[11];  // r8\n\n    v6 = &v8[2 + 2 * v1];\n    while (true)\n    {\n        if (v8[1] != 1)\n        {\n            if ((unsigned long long)v8[1] == 5)\n            {\n                v8[1] = 7;\n            }\n        }\n        else\n        {\n            if (v8[0] < 0)\n            {\n                v8[1 + 2] = v8[1 + 2] & 223;\n            }\n        }\n        v8 = &v8[2];\n    }\n}\n"
        },
        {
            "funcName": "sub_405c00",
            "funcStartAddr": "0x405c00",
            "funcEndAddr": "0x405c1d",
            "decompiledFuncCode": "int sub_405c00()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40ab50",
            "funcStartAddr": "0x40ab50",
            "funcEndAddr": "0x40abbf",
            "decompiledFuncCode": "extern unsigned long long g_41daff;\n\nint sub_40ab50()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_41daff;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_418ae0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40aa50",
            "funcStartAddr": "0x40aa50",
            "funcEndAddr": "0x40aaa6",
            "decompiledFuncCode": "extern unsigned int g_623354;\nextern unsigned int g_623358;\nextern unsigned int g_62335c;\nextern unsigned int g_623c80;\nextern unsigned int g_623c84;\nextern unsigned int g_623c88;\nextern unsigned long long g_623c90;\nextern unsigned long long g_6244c8;\n\nint sub_40aa50()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_623c80 = g_62335c;\n    g_623c84 = g_623358;\n    v1 = (unsigned int)v2;\n    v0 = &g_623c80;\n    g_62335c = g_623c80;\n    g_6244c8 = g_623c90;\n    g_623354 = g_623c88;\n    return sub_40a480();\n}\n"
        },
        {
            "funcName": "sub_408100",
            "funcStartAddr": "0x408100",
            "funcEndAddr": "0x40810c",
            "decompiledFuncCode": "int sub_408100()\n{\n}\n"
        },
        {
            "funcName": "sub_408fc0",
            "funcStartAddr": "0x408fc0",
            "funcEndAddr": "0x409019",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_408fc0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_408bc0();\n}\n"
        },
        {
            "funcName": "sub_40e7e0",
            "funcStartAddr": "0x40e7e0",
            "funcEndAddr": "0x40e8a1",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[152];\n    struct struct_2 *field_98;\n} struct_1;\n\nint sub_40e7e0()\n{\n    void tmp_19;  // tmp #19\n    void tmp_22;  // tmp #22\n    unsigned long long v1;  // rsi\n    unsigned long long *v4;  // rdx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // rax\n    struct_1 *v7;  // rdi\n    unsigned long long v8;  // r8\n    unsigned int v9;  // r10d\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rcx\n    unsigned int v12;  // edi\n    unsigned short v13;  // di\n    unsigned long long v14;  // rsi\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v5 = *(v4);\n        v6 = (unsigned int)(sub_40e5c0() & 1);\n        v14 = 0;\n        v8 = *(v7->field_98);\n        v9 = v6;\n        while (true)\n        {\n            v10 = *((long long *)(v5 + v14 * 8));\n            v11 = (unsigned long long)(unsigned int)*((int *)(*((long long *)(v5 + v14 * 8)) * 16 + v8 + 8)) >> 8;\n            v12 = (unsigned long long)(unsigned int)*((int *)(*((long long *)(v5 + v14 * 8)) * 16 + v8 + 8)) >> 8;\n            v13 = (unsigned short)((unsigned long long)(unsigned int)*((int *)(*((long long *)(v5 + v14 * 8)) * 16 + v8 + 8)) >> 8) & 1023;\n            if (*((char *)((*((long long *)(v5 + (v14 << 3))) << 4) + v8 + 8)) == 2 && v13 != 0 && ((char)rdi<4> & 128) != 0 && (v9 == 0 || ((char)v11 & 8) == 0) && ((v13 & 32) == 0 || ((char)tmp_19 & 2) != 0) && ((v11 & 4) == 0 || v9 != 0) && ((char)tmp_22 & 8) != 0 || *((char *)((*((long long *)(v5 + (v14 << 3))) << 4) + v8 + 8)) == 2 && v13 != 0 && (v9 == 0 || ((char)v11 & 8) == 0) && ((v13 & 32) == 0 || ((char)tmp_19 & 2) != 0) && ((v11 & 4) == 0 || v9 != 0) && ((char)rdi<4> & 128) == 0 || *((char *)((*((long long *)(v5 + (v14 << 3))) << 4) + v8 + 8)) == 2 && v13 == 0)\n            {\n                return v10;\n            }\n            if (...)\n            {\n                v14 += 1;\n                if (v14 == v1)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4081c0",
            "funcStartAddr": "0x4081c0",
            "funcEndAddr": "0x4081ca",
            "decompiledFuncCode": "int sub_4081c0()\n{\n}\n"
        },
        {
            "funcName": "sub_41b0d0",
            "funcStartAddr": "0x41b0d0",
            "funcEndAddr": "0x41b13c",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    char padding_8[4];\n    unsigned int field_c;\n} struct_1;\n\nextern int512_t g_623cc0;\n\nint sub_41b0d0()\n{\n    unsigned long v1;  // rdi\n    struct_1 *v3;  // rsi\n    unsigned long long v5;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rdi<8>, 0x10<64>, cc_ndep<8>)))\n    {\n        v3 = malloc(v1 + 16);\n        if (v3 != 0)\n        {\n            v3->field_c = 336984906;\n            v5 = *((long long *)&((char *)(0x8 * v3 + -2056 * ((unsigned long long)(&v3[1] * -71777214294589695 >> 64) >> 8) + (char *)&g_623cc0))[128]);\n            *((struct_1 **)&((char *)(0x8 * v3 + -2056 * ((unsigned long long)(&v3[1] * -71777214294589695 >> 64) >> 8) + (char *)&g_623cc0))[128]) = &v3[1];\n            v3->field_0 = v5;\n        }\n        return &v3[1];\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40ad30",
            "funcStartAddr": "0x40ad30",
            "funcEndAddr": "0x40ad9a",
            "decompiledFuncCode": "int sub_40ad30()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rdx\n    unsigned long long v5;  // rdi\n    unsigned long long v6[3];  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned long long v9[3];  // rdx\n    unsigned long long v10[3];  // rax\n    unsigned long long v11[3];  // rbx\n    unsigned long long v12[3];  // rsi\n\n    v2 = v1;\n    v11 = v5;\n    while (true)\n    {\n        v10 = v11[1];\n        if (v11[1] == 0)\n        {\n            v10 = v11[2];\n            if (v11[2] == 0)\n            {\n                v6 = v11;\n                v7 = v3;\n                v8 = r12<8>();\n                if ((unsigned int)v8 != 0)\n                {\n                    break;\n                }\n                while (true)\n                {\n                    v9 = *(v11);\n                    v10 = v9[2];\n                    v11 = v9;\n                    if (*(v11) == 0 || v9[2] != v9 && v9[2] != 0)\n                    {\n                        break;\n                    }\n                    v12 = v11;\n                    v8 = r12<8>();\n                    if ((unsigned int)v8 != 0)\n                    {\n                        break;\n                    }\n                }\n                if (*(v11) != 0)\n                {\n                    v11 = v10;\n                }\n                else\n                {\n                    return v8;\n                }\n            }\n        }\n        v11 = v10;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_409310",
            "funcStartAddr": "0x409310",
            "funcEndAddr": "0x409327",
            "decompiledFuncCode": "int sub_409310()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409160();\n}\n"
        },
        {
            "funcName": "sub_405850",
            "funcStartAddr": "0x405850",
            "funcEndAddr": "0x40589c",
            "decompiledFuncCode": "int sub_405850()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_404a70",
            "funcStartAddr": "0x404a70",
            "funcEndAddr": "0x404ab1",
            "decompiledFuncCode": "extern unsigned long long stdout[7];\n\nint sub_404a70()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // rbx\n    char *v6;  // rax\n    unsigned long long v7;  // rbx\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v0 = v3;\n        v5 = v4;\n        do\n        {\n            v6 = stdout[5];\n            if (stdout[5] < stdout[6])\n            {\n                stdout[5] = stdout[5] + 1;\n                *(v6) = 32;\n            }\n            else\n            {\n                v6 = __overflow();\n            }\n            v5 -= 1;\n        }\n        while (v5 != 1);\n        v7 = v0;\n        return v6;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_41b140",
            "funcStartAddr": "0x41b140",
            "funcEndAddr": "0x41b1b8",
            "decompiledFuncCode": "extern unsigned long long g_623cc0[4];\n\nint sub_41b140()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rcx\n    unsigned long long *v4;  // rcx\n\n    if (v1 != 0 && *((int *)(v1 - 4)) == 336984906)\n    {\n        v2 = v1 - ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) * 257;\n        v3 = g_623cc0[v1 + -257 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)];\n        if (g_623cc0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] != 0)\n        {\n            if (g_623cc0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] != v1)\n            {\n                while (true)\n                {\n                    v2 = *((long long *)(v3 - 16));\n                    if (*((long long *)(v3 - 16)) != 0)\n                    {\n                        if (v1 != v2)\n                        {\n                            v3 = v2;\n                        }\n                        else\n                        {\n                            v4 = v3 - 16;\n                        }\n                    }\n                }\n                if (v1 == v2 && *((long long *)(v3 - 16)) != 0)\n                {\n                    *(v4) = *((long long *)(v1 - 16));\n                }\n                else if (*((long long *)(v3 - 16)) == 0)\n                {\n                    return v2;\n                }\n            }\n            else\n            {\n                v4 = &g_623cc0[v1 + -257 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)];\n            }\n            *(v4) = *((long long *)(v1 - 16));\n        }\n    }\n    if (g_623cc0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] == 0 || v1 == 0 || *((int *)(v1 - 4)) != 336984906 || g_623cc0[v1 + -1 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8) + -0x100 * ((unsigned long long)(v1 * -71777214294589695 >> 64) >> 8)] != v1)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_408190",
            "funcStartAddr": "0x408190",
            "funcEndAddr": "0x40819d",
            "decompiledFuncCode": "int sub_408190()\n{\n}\n"
        },
        {
            "funcName": "sub_4155d0",
            "funcStartAddr": "0x4155d0",
            "funcEndAddr": "0x4155de",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_4155d0()\n{\n    struct_0 *v1;  // rbx\n\n    v1->field_8 = 5;\n}\n"
        },
        {
            "funcName": "sub_412cb0",
            "funcStartAddr": "0x412cb0",
            "funcEndAddr": "0x412e50",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[72];\n    struct struct_1 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    unsigned long long field_c0;\n} struct_0;\n\ntypedef struct struct_4 {\n    char padding_0[104];\n    char field_68;\n} struct_4;\n\ntypedef struct struct_3 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[80];\n    unsigned long long field_50;\n} struct_2;\n\nint sub_412cb0()\n{\n    unsigned long long *v0;  // [bp-0x60]\n    void v1;  // [bp-0x58]\n    void *v2;  // [bp-0x48]\n    struct_0 *v4;  // rsi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rdx\n    struct_3 *v7;  // rax\n    struct_2 *v8;  // rdx\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // rax\n    unsigned int *v13;  // rdi\n    struct_4 *v15;  // rbp\n    unsigned long long v16;  // rax\n\n    v5 = v4->field_48;\n    if (v4->field_c0 < v4->field_48)\n    {\n        *((unsigned long long *)(v4->field_b8 + v4->field_48 * 8)) = v6;\n        v15 = v6;\n        v4->field_c0 = v5;\n    }\n    else if (*((long long *)(v4->field_b8 + (v4->field_48 << 3))) != 0)\n    {\n        v7 = *((long long *)(*((long long *)(v4->field_b8 + v4->field_48 * 8)) + 80));\n        if (v8 != 0)\n        {\n            v10 = v8->field_50;\n            v11 = sub_40d9b0();\n            *((unsigned long long *)&v13) = v11;\n            if (v11 == 0)\n            {\n                sub_40e5c0();\n                v0 = v4->field_b8 + v4->field_48 * 8;\n                v15 = (unsigned long long)(unsigned int)sub_40db40();\n                *(v0) = v15;\n                if (v10 != 0)\n                {\n                    free(v2);\n                }\n            }\n        }\n        else\n        {\n            *((uint128_t *)&v1) = v7->field_0;\n            v2 = v7->field_10;\n            sub_40e5c0();\n            v15 = (unsigned long long)(unsigned int)sub_40db40();\n            *((struct_4 **)(v4->field_b8 + v4->field_48 * 8)) = v15;\n        }\n    }\n    else\n    {\n        *((unsigned long long *)(v4->field_b8 + v4->field_48 * 8)) = v9;\n        v15 = v9;\n    }\n    if ((*((long long *)(v4->field_b8 + (v4->field_48 << 3))) == 0 || v4->field_c0 < v4->field_48 || v8 == 0 || v11 == 0) && v4->field_98->field_98 != 0 && v15 != 0)\n    {\n        v16 = sub_40e470();\n        *((unsigned long long *)&v13) = v16;\n        if (v16 == 0 && (v15->field_68 & 64) != 0)\n        {\n            *(v13) = sub_412430();\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_405b60",
            "funcStartAddr": "0x405b60",
            "funcEndAddr": "0x405bf9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_623b20;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_405b60()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_623b20 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_41abc0",
            "funcStartAddr": "0x41abc0",
            "funcEndAddr": "0x41adf4",
            "decompiledFuncCode": "int sub_41abc0()\n{\n    unsigned int v0;  // [bp-0x1078]\n    unsigned long v1;  // [bp-0x1060]\n    unsigned long v2;  // [bp-0x1058]\n    unsigned long v3;  // [bp-0x1050]\n    unsigned long long|unsigned long v4;  // [bp-0x1048]\n    unsigned long long|unsigned long v5;  // [bp-0x1040]\n    unsigned long v6;  // [bp-0x1038]\n    unsigned int v8;  // [bp+0x100008]\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // r13\n    unsigned int v11;  // edx\n    unsigned int v12;  // ebx\n    unsigned long v13;  // rdi\n    unsigned long long v14;  // rax\n    unsigned int v15;  // eax\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rbx\n    unsigned long long *v20;  // rcx\n    void *v21;  // r14\n    unsigned long long *v22;  // r8\n    unsigned long long v23;  // rax\n    unsigned int *v24;  // rax\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n\n    v10 = v9;\n    v12 = v11;\n    v1 = v13;\n    iconv(v11, 0x0, 0x0, 0x0, 0x0);\n    v2 = v13;\n    v16 = 0;\n    v3 = v10;\n    if (v10 != 0)\n    {\n        while (true)\n        {\n            v4 = stack_base + -4152;\n            v5 = 0x1000;\n            v14 = iconv(v12, (unsigned int)&v2, (unsigned int)&v3, (unsigned int)&v4, (unsigned int)&v5);\n            if (v14 == -1)\n            {\n                v15 = *(__errno_location());\n                if (v15 != 7)\n                {\n                    break;\n                }\n            }\n            if (v15 == 7 || v14 != -1)\n            {\n                v16 += v4 - (stack_base + -4152);\n                if (v3 == 0)\n                {\n                    break;\n                }\n            }\n        }\n        if (true)\n        {\n            v4 = stack_base + -4152;\n            v5 = 0x1000;\n            v17 = iconv(v12, 0x0, 0x0, (unsigned int)&v4, (unsigned int)&v5);\n        }\n        else if (v14 == -1 && v15 != 7)\n        {\n            v18 = -18446744069414584321;\n        }\n    }\n    if (v10 == 0 || v17 != -1)\n    {\n        v4 = stack_base + -4152;\n        v5 = 0x1000;\n        v17 = iconv(v12, 0x0, 0x0, (unsigned int)&v4, (unsigned int)&v5);\n    }\n    if (v17 != -1)\n    {\n        *((void **)&v0) = v4 - (stack_base + -4152) + v16;\n        if (v4 - (stack_base + -4152) + v16 != 0)\n        {\n            v21 = *(v20);\n            if (*(v20) == 0 || *(v22) < *((long long *)&v0))\n            {\n                v21 = malloc(*((long long *)&v0));\n                if (v21 == 0)\n                {\n                    *(__errno_location()) = 12;\n                }\n            }\n            if ((*(v20) != 0 || v21 != 0) && (*(v22) >= *((long long *)&v0) || v21 != 0))\n            {\n                iconv(v12, 0x0, 0x0, 0x0, 0x0);\n                v4 = v10;\n                v5 = v21;\n                v3 = v1;\n                v6 = *((long long *)&v0);\n                while (true)\n                {\n                    if (v10 != 0)\n                    {\n                        v23 = iconv(v12, (unsigned int)&v3, (unsigned int)&v4, (unsigned int)&v5, (unsigned int)(stack_base + -4152));\n                        if (v23 != -1)\n                        {\n                            v10 = v4;\n                        }\n                        else\n                        {\n                            v24 = __errno_location();\n                        }\n                    }\n                    if (v10 == 0 || *(v24) == 22 && v23 == -1)\n                    {\n                        v25 = iconv(v12, 0x0, 0x0, (unsigned int)&v5, (unsigned int)(stack_base + -4152));\n                    }\n                    if (v10 == 0 || v23 == -1)\n                    {\n                        if ((v25 == -1 || *(v24) != 22) && (v25 == -1 || v10 != 0))\n                        {\n                            v18 = -18446744069414584321;\n                            if (*(v20) == v21)\n                            {\n                                break;\n                            }\n                            free(v21);\n                            *(__errno_location()) = v8;\n                        }\n                        if (v25 != -1 && (*(v24) == 22 || v10 == 0))\n                        {\n                            if (v6 != 0)\n                            {\n                                abort(); /* do not return */\n                            }\n                            v18 = 0;\n                            *(v20) = v21;\n                            *(v22) = *((long long *)&v0);\n                        }\n                    }\n                }\n            }\n        }\n        else\n        {\n            v18 = 0;\n            *(v22) = 0;\n        }\n    }\n    if (v21 == 0 && v4 - (stack_base + -4152) + v16 != 0 && v17 != -1 && (*(v20) == 0 || *(v22) < *((long long *)&v0)) || (v10 == 0 || v17 != -1) && v17 == -1 || v10 != 0 && v17 == -1)\n    {\n        v18 = -18446744069414584321;\n    }\n    v26 = v18;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_4186e0",
            "funcStartAddr": "0x4186e0",
            "funcEndAddr": "0x4187e4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    char field_38;\n} struct_0;\n\nint sub_4186e0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rdx\n    char *v6;  // rsi\n    unsigned long long v8;  // rbx\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v1->field_0 = 0;\n    v1->field_8 = 0;\n    v1->field_10 = 0;\n    v3 = malloc(0x100);\n    v1->field_20 = v3;\n    if (v3 != 0)\n    {\n        v4 = 0;\n        if (((char)v5 & 4) != 0)\n        {\n            v4 = 1;\n        }\n        v2->field_28 = 0;\n        v2->field_38 = (unsigned int)((unsigned long long)((unsigned int)v5 % 8 & 1) * 16) | v2->field_38 & 111 | (unsigned int)v4 * 128;\n        strlen(v6);\n        v8 = (unsigned int)sub_417250();\n        if ((unsigned int)v8 != 16)\n        {\n        }\n        else\n        {\n            v8 = 8;\n        }\n        if ((unsigned int)v8 == 0)\n        {\n            sub_418080();\n        }\n        if ((unsigned int)v8 == 16 || (unsigned int)v8 != 0)\n        {\n            free(v2->field_20);\n            v2->field_20 = 0;\n        }\n        v10 = v8;\n        return v10;\n    }\n    return 12;\n}\n"
        },
        {
            "funcName": "sub_409470",
            "funcStartAddr": "0x409470",
            "funcEndAddr": "0x409b36",
            "decompiledFuncCode": "int sub_409470()\n{\n    unsigned long long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x58]\n    char v2;  // [bp-0x49]\n    char v3;  // [bp-0x40]\n    unsigned long v5;  // rcx\n    unsigned int v6;  // edx\n    unsigned int v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned int *v9;  // r13\n    unsigned int *v10;  // r13\n    char v11[3];  // r15\n    unsigned int v12;  // edi\n    char *v13;  // r8\n    unsigned int v14;  // eax\n    unsigned long long v15;  // r13\n    unsigned long long|unsigned int|unsigned long v16;  // r12\n    unsigned long long v17;  // rbp\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    char v24;  // sil\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // r9\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r9\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // rsi\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rcx\n    unsigned long long v45;  // r9\n    unsigned long long|unsigned int v46;  // rdi\n    unsigned long long|unsigned int|unsigned long v47;  // r10\n    unsigned long long v48;  // rcx\n    unsigned long long v49;  // r9\n    unsigned long long|unsigned int v50;  // edi\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // r9\n    unsigned long long|unsigned int v53;  // rdi\n    unsigned long long v54;  // rcx\n    unsigned long long|unsigned int v55;  // rdi\n    unsigned long long|unsigned int v56;  // rdi\n    unsigned long v57;  // rax\n    unsigned long long v58;  // cc_dep1\n    unsigned int v59;  // cc_dep1\n    unsigned long long v60;  // cc_dep1\n    unsigned long long v61;  // cc_dep1\n    unsigned int v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep1\n    char *v64;  // rsi\n    unsigned long long v65;  // rax\n\n    v1 = v5;\n    if (v6 <= 36)\n    {\n        v8 = (v7 == 0? &v3 : v7);\n        *(v9) = 0;\n        v9 = __errno_location();\n        v11 = *(v8);\n        v17 = __strtol_internal(v12, v7, v6, 0x0);\n        if (*(v8) != v50)\n        {\n            v14 = *(v10);\n            if (*(v10) == 0)\n            {\n                v16 = 0;\n            }\n            else\n            {\n                v16 = 4;\n                if (v14 == 34)\n                {\n                    v16 = 1;\n                }\n            }\n            if ((v14 == 34 || *(v10) == 0) && v13 != 0)\n            {\n                v15 = v11[0];\n                if (v11[0] != 0)\n                {\n                    v19 = strchr(v13, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n        }\n        else\n        {\n            if (v13 != 0)\n            {\n                v15 = v11[0];\n                v16 = 4;\n                if (v11[0] != 0)\n                {\n                    v17 = 1;\n                    v16 = 0;\n                    v18 = strchr(v13, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n            if ((v13 == 0 || v18 == 0) && (v13 == 0 || v11[0] != 0))\n            {\n                v16 = 4;\n            }\n        }\n        if (*(v8) == v50 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v50 && (v14 == 34 || *(v10) == 0) && v19 != 0)\n        {\n            v20 = v15 - 69;\n            if ((v15 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v2) = v20;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0)\n                {\n                    v21 = strchr(v13, 0x30);\n                    if (v21 != 0 && v11[1] != 68)\n                    {\n                        if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 105)\n                        {\n                            v25 = v2;\n                            if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 66)\n                            {\n                                /* goto *((long long *)(rdx<8> * 8 + 4315208)); */\n                            }\n                        }\n                        else\n                        {\n                            v23 = 0;\n                            v22 = 0x400;\n                            v24 = v11[2] == 66;\n                            v40 = rsi<8> * 2 + 1;\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v8) == v50 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v50 && (v14 == 34 || *(v10) == 0) && v19 != 0) && (v15 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0 && v21 == 0 || (*(v8) == v50 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v50 && (v14 == 34 || *(v10) == 0) && v19 != 0) && (v15 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) == 0 || (*(v8) == v50 && v13 != 0 && v11[0] != 0 && v18 != 0 || v13 != 0 && v11[0] != 0 && *(v8) != v50 && (v14 == 34 || *(v10) == 0) && v19 != 0) && (v15 - 69 & 255) > 47)\n        {\n            v40 = 1;\n            v22 = 0x400;\n        }\n        if (...)\n        {\n            v40 = 2;\n            v22 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v15 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (v17 >= -0x20000000000000 && v17 <= 9007199254740991)\n                {\n                    v17 *= 0x400;\n                    break;\n                }\n            case 3:\n                v34 = v22;\n                v35 = (-1 CONCAT 0x8000000000000000) % v22;\n                v36 = v35;\n            case 5: case 37:\n                v37 = v22;\n                v38 = (-1 CONCAT 0x8000000000000000) % v22;\n                v39 = v38;\n                v56 = 3;\n                v47 = 0;\n                do\n                {\n                    if (v17 < v39)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v37 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v63 = v56;\n                    v56 -= 1;\n                }\n                while (v63 != 1);\n            case 9: case 41:\n                v42 = v22;\n                v41 = (-1 CONCAT 0x8000000000000000) % v22;\n            case 11: case 43:\n                v42 = v22;\n                v28 = (-1 CONCAT 0x8000000000000000) % v22;\n                v43 = v28;\n            case 14:\n                v44 = v22;\n                v29 = (-1 CONCAT 0x8000000000000000) % v22;\n                v45 = v29;\n                v46 = 5;\n                v47 = 0;\n                do\n                {\n                    if (v45 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v44 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v58 = v46;\n                    v46 -= 1;\n                }\n                while (v58 != 1);\n            case 18: case 50:\n                v51 = v22;\n                v31 = (-1 CONCAT 0x8000000000000000) % v22;\n                v52 = v31;\n                v53 = 4;\n                v47 = 0;\n                do\n                {\n                    if (v52 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v51 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v60 = v53;\n                    v53 -= 1;\n                }\n                while (v60 != 1);\n                v16 = (unsigned int)v16 | v47;\n                break;\n            case 23:\n                v48 = v22;\n                v30 = (-1 CONCAT 0x8000000000000000) % v22;\n                v49 = v30;\n                v50 = 8;\n                v47 = 0;\n                do\n                {\n                    if (v49 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v47 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n                    {\n                        v17 = v48 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v47 = 1;\n                    }\n                    v59 = v50;\n                    v50 = (unsigned long long)v50 - 1;\n                }\n                while (v59 != 1);\n            case 24:\n                v54 = v22;\n                v32 = (-1 CONCAT 0x8000000000000000) % v22;\n                v33 = v32;\n            case 33:\n                break;\n            case 53:\n                if (v17 >= 0xc000000000000000 && v17 <= 4611686018427387903)\n                {\n                    v17 *= 2;\n                    break;\n                }\n            default:\n                v16 = (unsigned int)v16 | 2;\n                *(v1) = v17;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v40 = 1;\n        v34 = 0x400;\n        v36 = -0x20000000000000;\n        v50 = 6;\n        v47 = 0;\n        do\n        {\n            if (v17 < v36)\n            {\n                v17 = 0x8000000000000000;\n                v47 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n            {\n                v17 = v34 * v17;\n            }\n            else\n            {\n                v17 = 9223372036854775807;\n                v47 = 1;\n            }\n            v62 = v50;\n            v50 = (unsigned long long)v50 - 1;\n        }\n        while (v62 != 1);\n        v40 = 1;\n        v51 = 0x400;\n        v52 = -0x20000000000000;\n        v40 = 1;\n        v37 = 0x400;\n        v39 = -0x20000000000000;\n        v40 = 1;\n        v48 = 0x400;\n        v49 = -0x20000000000000;\n        v40 = 1;\n        if (v17 >= -0x40000000000000 && v17 <= 18014398509481983)\n        {\n            v17 *= 0x200;\n        }\n        v40 = 1;\n        v42 = 0x400;\n        v41 = -0x20000000000000;\n        if (v17 >= v41)\n        {\n            v57 = (0 CONCAT 9223372036854775807) % v42;\n            if (v57 >= v17)\n            {\n                v17 = v42 * v17;\n            }\n            else\n            {\n                v17 = 9223372036854775807;\n                v16 = 1;\n            }\n        }\n        else\n        {\n            v17 = 0x8000000000000000;\n            v16 = 1;\n            v64 = &v11[v40];\n            *(v8) = v64;\n            v16 = (unsigned int)(*(v64) != 0? v16 | 2 : (unsigned int)r12<8>);\n        }\n        v40 = 1;\n        v54 = 0x400;\n        v33 = -0x20000000000000;\n        v55 = 7;\n        v47 = 0;\n        do\n        {\n            if (v33 > v17)\n            {\n                v17 = 0x8000000000000000;\n                v47 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v44 >= v17)\n            {\n                v17 = v54 * v17;\n            }\n            else\n            {\n                v17 = 9223372036854775807;\n                v47 = 1;\n            }\n            v61 = v55;\n            v55 -= 1;\n        }\n        while (v61 != 1);\n        v40 = 1;\n        v42 = 0x400;\n        v43 = -0x20000000000000;\n        if (v17 >= v43)\n        {\n            v57 = (0 CONCAT 9223372036854775807) % v42;\n            if (v17 <= (0 CONCAT 9223372036854775807) % v42)\n            {\n                v17 = v42 * v17;\n            }\n        }\n        v40 = 1;\n        v40 = 1;\n        v44 = 0x400;\n        v45 = -0x20000000000000;\n        if (v17 < v41 || v13 != 0 && *(v8) != v50 && (v14 == 34 || *(v10) == 0) && v11[0] == 0 || *(v8) != v50 && (v14 == 34 || *(v10) == 0) && v13 == 0)\n        {\n            *(v1) = v17;\n        }\n        v65 = v16;\n        return v65;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4082b0",
            "funcStartAddr": "0x4082b0",
            "funcEndAddr": "0x4082b9",
            "decompiledFuncCode": "int sub_4082b0()\n{\n}\n"
        },
        {
            "funcName": "sub_409bc0",
            "funcStartAddr": "0x409bc0",
            "funcEndAddr": "0x409c38",
            "decompiledFuncCode": "int sub_409bc0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_409c40() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404ac0",
            "funcStartAddr": "0x404ac0",
            "funcEndAddr": "0x404e93",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[6435936];\n    char field_623460;\n} struct_0;\n\nextern int512_t g_41c2a0;\nextern int512_t g_41c3a0;\nextern int512_t g_623460;\nextern unsigned int g_623b04;\nextern unsigned long long stdout[7];\n\nint sub_404ac0()\n{\n    unsigned int|char v0;  // [bp-0x2c]\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    unsigned long long v4;  // [bp-0x8]\n    unsigned long long v6;  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long v8;  // rax\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // r13\n    unsigned long long v11;  // r12\n    unsigned long long v12;  // rbx\n    char v13[6435937];  // rdx\n    char v14[6435937];  // rax\n    struct_0 *v15;  // rbx\n    unsigned long long v16;  // rsi\n    unsigned long long v17;  // rcx\n    unsigned long long|char * v18;  // rax\n    unsigned long long v19;  // cc_dep1\n    unsigned long long v20[7];  // rcx\n    unsigned long long v21;  // cc_dep1\n    unsigned long long v22;  // cc_dep1\n    char *v23;  // rax\n    char *v24;  // rax\n    char *v25;  // rbp\n    unsigned long long v26;  // rbx\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // r13\n\n    if (v6 > v7)\n    {\n        v4 = v9;\n        v10 = v6;\n        v3 = v11;\n        v2 = stack_base + 0;\n        v25 = v7;\n        v1 = v12;\n        while (true)\n        {\n            v13 = (unsigned long long)*(v25);\n            v14 = (unsigned long long)*(v25);\n            v15 = (unsigned long long)*(v25);\n            if (*(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0)\n            {\n                v16 = (char)*((char *)(v14 + &g_41c2a0));\n                if (g_623b04 == 3 && *((char *)(v14 + &g_41c2a0)) != 0)\n                {\n                    v17 = (char)*((char *)(v14 + &g_41c3a0));\n                    v18 = (char)*((char *)(v14 + &g_41c3a0));\n                    switch (v16)\n                    {\n                    case 0:\n                        v20 = stdout;\n                        v21 = v18;\n                        if (v18 == 79)\n                        {\n                            v18 = fwrite_unlocked(\"\\\\OE{}\", 0x1, 0x5, stdout);\n                        }\n                        else if (v21 > 79)\n                        {\n                            if (v18 == 97)\n                            {\n                                v18 = fwrite_unlocked(\"\\\\ae{}\", 0x1, 0x5, stdout);\n                            }\n                            if (v18 == 111)\n                            {\n                                v18 = fwrite_unlocked(\"\\\\oe{}\", 0x1, 0x5, stdout);\n                            }\n                        }\n                        else if (v18 != 65)\n                        {\n                            v18 = v20[5];\n                            if (v20[5] < v20[6])\n                            {\n                                v20[5] = &v18[1];\n                                *(v18) = 32;\n                            }\n                            else\n                            {\n                                v18 = __overflow();\n                            }\n                        }\n                        else\n                        {\n                            v18 = fwrite_unlocked(\"\\\\AE{}\", 0x1, 0x5, stdout);\n                        }\n                    case 1: case 2:\n                        v18 = __printf_chk(0x1, \"\\\\'%s%c\", (unsigned int)((unsigned int)v17 == 105? \"\\\\\" : 4315903), v17);\n                    case 3:\n                        v18 = __printf_chk(0x1, \"\\\\^%s%c\", (unsigned int)((unsigned int)v17 == 105? \"\\\\\" : 4315903), v17);\n                    case 4:\n                        v18 = __printf_chk(0x1, \"\\\\\\\"%s%c\", (unsigned int)((unsigned int)v17 == 105? \"\\\\\" : 4315903), v17);\n                    case 5:\n                        v18 = __printf_chk(0x1, \"\\\\~%s%c\", (unsigned int)((unsigned int)v17 == 105? \"\\\\\" : 4315903), v17);\n                    case 6:\n                        v18 = __printf_chk(0x1, \"\\\\c{%c}\", (unsigned int)v17);\n                    case 7:\n                        v20 = stdout;\n                        if (v18 == 65)\n                        {\n                            v18 = fwrite_unlocked(\"\\\\AA{}\", 0x1, 0x5, stdout);\n                        }\n                        if (v18 == 97)\n                        {\n                            v18 = fwrite_unlocked(\"\\\\aa{}\", 0x1, 0x5, stdout);\n                        }\n                    case 8:\n                        v20 = stdout;\n                        if (v18 == 79)\n                        {\n                            v18 = fwrite_unlocked(\"\\\\O{}\", 0x1, 0x4, stdout);\n                        }\n                        if (v18 == 111)\n                        {\n                            v18 = fwrite_unlocked(\"\\\\o{}\", 0x1, 0x4, stdout);\n                        }\n                    }\n                }\n                if (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3)\n                {\n                    v19 = v15;\n                    if (v15 == 92)\n                    {\n                        v18 = fwrite_unlocked(\"\\\\backslash{}\", 0x1, 0xc, stdout);\n                    }\n                    else if (v19 <= 92)\n                    {\n                        v22 = v15;\n                        if (v15 == 34)\n                        {\n                            v23 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v23) = 34;\n                            }\n                            else\n                            {\n                                __overflow();\n                            }\n                            v18 = stdout[5];\n                            if (stdout[5] < stdout[6])\n                            {\n                                stdout[5] = stdout[5] + 1;\n                                *(v18) = 34;\n                            }\n                            else\n                            {\n                                v18 = __overflow();\n                            }\n                        }\n                    }\n                    else if (v15 == 125 || v15 == 123)\n                    {\n                        v18 = __printf_chk(0x1, \"$\\\\%c$\", *((int *)&v0));\n                    }\n                }\n            }\n            if (v15 <= 38 && v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v22 >= 34 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v15 == 95 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 125 && v15 != 123 && v15 != 92 && v19 > 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3))\n            {\n                v24 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v24) = 92;\n                }\n                else\n                {\n                    v0 = (unsigned int)v13;\n                    __overflow();\n                }\n            }\n            if (v22 < 34 && v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v22 >= 34 && v15 > 38 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 125 && v15 != 123 && v15 != 95 && v15 != 92 && v19 > 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3))\n            {\n                v18 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    stdout[5] = stdout[5] + 1;\n                    *(v18) = 32;\n                }\n                else\n                {\n                    v18 = __overflow();\n                }\n            }\n            if (*(&((char *)&g_623460)[(unsigned long long)*(v25)]) == 0 || v15 <= 38 && v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v22 >= 34 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v15 == 95 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 125 && v15 != 123 && v15 != 92 && v19 > 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3))\n            {\n                v18 = stdout[5];\n                if (stdout[5] < stdout[6])\n                {\n                    v25 = &v25[1];\n                    stdout[5] = stdout[5] + 1;\n                    *((struct_0 **)&v18) = v15;\n                    if (v10 == v25)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v18 = __overflow();\n                }\n            }\n            if (g_623b04 == 3 && *((char *)(v14 + &g_41c2a0)) != 0 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 || v15 == 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v15 == 34 && v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v22 < 34 && v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 92 && v19 > 92 && (v15 == 125 || v15 == 123) && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v22 >= 34 && v15 > 38 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 125 && v15 != 123 && v15 != 95 && v15 != 92 && v19 > 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || stdout[5] >= stdout[6] && (*(&((char *)&g_623460)[(unsigned long long)*(v25)]) == 0 || v15 <= 38 && v19 <= 92 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v22 >= 34 && v15 != 34 && v15 != 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3) || v15 == 95 && *(&((char *)&g_623460)[(unsigned long long)*(v25)]) != 0 && v15 != 125 && v15 != 123 && v15 != 92 && v19 > 92 && (*((char *)(v14 + &g_41c2a0)) == 0 || g_623b04 != 3)))\n            {\n                v25 = &v25[1];\n                if (v10 == v25)\n                {\n                    break;\n                }\n            }\n        }\n        v26 = v1;\n        v27 = v3;\n        v28 = v4;\n        return v18;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_408600",
            "funcStartAddr": "0x408600",
            "funcEndAddr": "0x40861d",
            "decompiledFuncCode": "int sub_408600()\n{\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4189e0",
            "funcStartAddr": "0x4189e0",
            "funcEndAddr": "0x418a1a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n} struct_0;\n\nint sub_4189e0()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v1;  // rdx\n    struct_0 *v2;  // rdi\n    unsigned long long v3[3];  // rsi\n    unsigned long v4;  // rcx\n    unsigned long v5;  // r8\n    struct_0 *v6;  // rdi\n    unsigned long long v7[3];  // rsi\n    unsigned long v8;  // rax\n\n    if (v1 != 0)\n    {\n        tmp_19 = v2->field_38;\n        v2->field_38 = (unsigned int)(v2->field_38 & 4294967033) | 2;\n        v3[0] = v1;\n        v3[1] = v4;\n        v3[2] = v5;\n        return tmp_19 & -7 | 2;\n    }\n    v6->field_38 = v6->field_38 & 249;\n    v7[0] = 0;\n    v7[2] = 0;\n    v7[1] = 0;\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_408bc0",
            "funcStartAddr": "0x408bc0",
            "funcEndAddr": "0x408f69",
            "decompiledFuncCode": "extern unsigned int g_41d2c2;\nextern unsigned int g_41d2ce;\nextern unsigned int g_41d2d5;\nextern unsigned int g_41d2d9;\nextern unsigned int g_41d2e9;\nextern unsigned int g_41d300;\nextern unsigned int g_41d360;\nextern unsigned int g_41d430;\nextern unsigned int g_41d450;\nextern unsigned int g_41d478;\nextern unsigned int g_41d4a0;\nextern unsigned int g_41d4d0;\nextern unsigned int g_41d620;\n\nint sub_408bc0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    char v10;  // [bp-0x30]\n    unsigned long long v12[9];  // r8\n    unsigned long long v13[9];  // rbx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // edi\n    unsigned int v16;  // edi\n    unsigned int v17;  // edx\n    void *v18;  // rdi\n    unsigned long v20;  // r9\n    unsigned long v21;  // rsi\n    unsigned long long v22;  // r8\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r12\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // r14\n    unsigned long v28;  // rbx\n    unsigned long v29;  // rax\n    unsigned long long v30;  // r8\n    unsigned long v31;  // rax\n    unsigned long v32;  // rax\n\n    v13 = v12;\n    if (v14 != 0)\n    {\n        __fprintf_chk(v15, 0x1, 0x41d2c2, v14);\n    }\n    else\n    {\n        __fprintf_chk(v16, 0x1, 0x41d2ce, v17);\n    }\n    __fprintf_chk((unsigned int)v18, 0x1, 0x41d620, dcgettext(0x0, 0x41d2d5, 0x5));\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41d360, 0x5), v18);\n    switch (v20)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x41d2d9, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x41d2e9, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x41d300, 0x5);\n        break;\n    case 4:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x41d430, 0x5);\n    case 5:\n        v27 = v13[3];\n        v28 = *(v13);\n        v29 = dcgettext(0x0, 0x41d450, 0x5);\n        *((unsigned long long [9])&v5) = v12[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v12[1];\n        v31 = dcgettext(0x0, 0x41d478, 0x5);\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v13[2];\n        *((unsigned long long [9])&v6) = v13[1];\n        v31 = dcgettext(0x0, 0x41d4a0, 0x5);\n        *((unsigned long long [9])&v5) = v12[6];\n        *((unsigned long long [9])&v4) = v12[5];\n        *((unsigned long long [9])&v3) = v12[4];\n        *((unsigned long long [9])&v2) = v12[3];\n    case 8:\n        v23 = v13[6];\n        v24 = v13[5];\n        v25 = v13[4];\n        *((unsigned long long [9])&v8) = v13[7];\n        v26 = v13[3];\n        *((unsigned long long [9])&v6) = v13[2];\n        *((unsigned long long [9])&v7) = v13[1];\n        v32 = dcgettext(0x0, 0x41d4d0, 0x5);\n    case 9:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v30 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v30;\n    default:\n        v21 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v22 = v12[1];\n        v23 = v13[6];\n        v24 = v13[5];\n        *((unsigned long long [9])&v9) = v13[8];\n        v25 = v13[4];\n        v26 = v13[3];\n        *((unsigned long long [9])&v8) = v13[7];\n        *((unsigned long long [9])&v6) = v13[2];\n        v7 = v22;\n    }\n    v32 = dcgettext(0x0, v21, 0x5);\n    v5 = v9;\n    v4 = v27;\n    __fprintf_chk((unsigned int)v18, 0x1, v29, v28);\n    return v4;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n    v4 = v8;\n    v3 = v23;\n    v2 = v24;\n    v1 = v25;\n    v0 = v26;\n    return __fprintf_chk((unsigned int)v18, 0x1, v29, *((long long *)&v10));\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402010",
            "funcEndAddr": "0x40449b",
            "decompiledFuncCode": "int main() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405640",
            "funcStartAddr": "0x405640",
            "funcEndAddr": "0x4056ac",
            "decompiledFuncCode": "extern unsigned int g_41c225;\nextern unsigned int g_41c240;\n\nint sub_405640()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x41c225, 0x5);\n    }\n    dcgettext(0x0, 0x41c240, 0x5);\n    sub_408330();\n    sub_408020();\n}\n"
        },
        {
            "funcName": "sub_40e030",
            "funcStartAddr": "0x40e030",
            "funcEndAddr": "0x40e0d5",
            "decompiledFuncCode": "int sub_40e030()\n{\n    unsigned int v0;  // [bp-0x4c]\n    char v1;  // [bp-0x38]\n    unsigned long long v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp-0x8]\n    unsigned long long v8;  // r14\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rdx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rsi\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // r13\n    unsigned long long v22;  // r14\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v6 = v8;\n        v5 = v9;\n        v4 = v12;\n        v3 = stack_base + 0;\n        v2 = v13;\n        v18 = 0;\n        while (true)\n        {\n            v14 = *((long long *)(v10 + v18 * 8));\n            if (*((long long *)(v15 + (v18 << 3))) != 0)\n            {\n                if (v14 != 0)\n                {\n                    v17 = sub_40d9b0();\n                    v0 = v17;\n                    if ((unsigned int)v17 != 0)\n                    {\n                        break;\n                    }\n                    *((unsigned long long *)(v15 + v18 * 8)) = (unsigned int)sub_40de40();\n                    free(*((long long *)&v1));\n                    v17 = v0;\n                    if (v0 != 0)\n                    {\n                        break;\n                    }\n                }\n                v18 += 1;\n            }\n            else\n            {\n                *((unsigned long long *)(v15 + v18 * 8)) = v14;\n                v18 += 1;\n            }\n            v17 = 0;\n        }\n        v19 = v2;\n        v20 = v4;\n        v21 = v5;\n        v22 = v6;\n        return v17;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_415600",
            "funcStartAddr": "0x415600",
            "funcEndAddr": "0x41560e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_415600()\n{\n    struct_0 *v1;  // rbx\n\n    v1->field_8 = 20;\n}\n"
        },
        {
            "funcName": "sub_40811f",
            "funcStartAddr": "0x40811f",
            "funcEndAddr": "0x408190",
            "decompiledFuncCode": "extern uint128_t g_623c40;\nextern uint128_t g_623c50;\nextern uint128_t g_623c60;\nextern unsigned long long g_623c70;\n\nint sub_40811f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_623c70;\n    *((uint128_t *)&v0) = g_623c40;\n    *((uint128_t *)&v1) = g_623c50;\n    *((uint128_t *)&v2) = g_623c60;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_407b00();\n}\n"
        },
        {
            "funcName": "sub_407ca0",
            "funcStartAddr": "0x407ca0",
            "funcEndAddr": "0x407cd4",
            "decompiledFuncCode": "int sub_407ca0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_409360();\n}\n"
        },
        {
            "funcName": "sub_418ae0",
            "funcStartAddr": "0x418ae0",
            "funcEndAddr": "0x418b36",
            "decompiledFuncCode": "int sub_418ae0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_415350",
            "funcStartAddr": "0x415350",
            "funcEndAddr": "0x415830",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[27];\n    char field_8b;\n    char field_8c;\n    char padding_8d[3];\n    unsigned int field_90;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    char field_8;\n} struct_2;\n\ntypedef struct struct_4 {\n    char field_0;\n    char padding_1[7];\n    char field_8;\n    char padding_9[1];\n    char field_a;\n} struct_4;\n\nint sub_415350()\n{\n    void tmp_8;  // tmp #8\n    unsigned int|unsigned long v0;  // [bp-0x50]\n    struct_1 *v2;  // rsi\n    unsigned int *v3;  // r12\n    struct_2 *v4;  // rdi\n    unsigned int v5;  // edx\n    unsigned int v6;  // r15d\n    unsigned long long v7;  // rdx\n    struct_1 *v8;  // r13\n    unsigned int v9;  // eax\n    struct_4 *v10;  // rdi\n    struct_4 *v11;  // rbx\n    unsigned long long v12;  // rbp\n    unsigned long long v13;  // rax\n    unsigned short v15;  // ax\n    unsigned int v16;  // ecx\n    void *v17;  // rcx\n    char v19;  // al\n    unsigned int|unsigned long v20;  // rbp\n    unsigned long long v21;  // rsi\n    char *v22;  // rdi\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r14d\n    unsigned long long v26;  // rdi\n    char *v27;  // rsi\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned short v30;  // ax\n    char v31;  // al\n    unsigned long long v32;  // r14\n    unsigned long long v33;  // r14\n\n    v3 = v2->field_48;\n    if (v2->field_68 > v2->field_48)\n    {\n        v6 = v5;\n        v7 = v2->field_8;\n        v8 = v2;\n        v9 = v2->field_90;\n        v11 = v10;\n        v12 = (char)*((char *)(v2->field_8 + v2->field_48));\n        v10->field_a = v10->field_a & 4294966943;\n        *((unsigned long long *)&v10->field_0) = v12;\n        if (v9 > 1)\n        {\n            if (v2->field_48 != v2->field_30 && *((int *)(v2->field_10 + (v2->field_48 << 2))) == -1)\n            {\n                *((int *)&v10->field_8) = *((int *)&v10->field_8) & -0x200100 | 2097153;\n                v13 = 1;\n            }\n            if ((v2->field_48 == v2->field_30 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1) && *((char *)(v2->field_8 + v2->field_48)) != 92)\n            {\n                tmp_8 = v2->field_10;\n                v10->field_8 = 1;\n                v0 = v7;\n                v19 = iswalnum(*((int *)(tmp_8 + v3 * 4))) != 0;\n                v11->field_a = v11->field_a & 4294966975 | (unsigned int)((unsigned long long)(rax<4> | (unsigned int)v2->field_10) * 64);\n            }\n        }\n        else if (*((char *)(v2->field_8 + v2->field_48)) != 92)\n        {\n            v10->field_8 = 1;\n            v0 = v0;\n            v15 = (unsigned long long)(unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)(char)*((char *)(v2->field_8 + v2->field_48)) * 2)) >> 3;\n            v10->field_a = v10->field_a & 4294966943 | (unsigned int)((unsigned long long)((unsigned int)rax<8> & 1 | v16) * 64);\n        }\n        if (*((char *)(v2->field_8 + v2->field_48)) != 92)\n        {\n            if (v9 <= 1 || v2->field_48 == v2->field_30 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1)\n            {\n                if ((char)((unsigned int)(char)*((char *)(v2->field_8 + v2->field_48)) - 10) <= 115)\n                {\n                    /* goto *((long long *)((unsigned long long)((unsigned int)(char)*((char *)(v2->field_8 + v2->field_48)) - 10) * 8 + 4316368)); */\n                }\n                else\n                {\n                    v13 = 1;\n                }\n            }\n        }\n        else\n        {\n            if (v9 <= 1 || v2->field_48 == v2->field_30 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1)\n            {\n                v17 = (char *)v3 + 1;\n                if ((char *)v3 + 1 >= v2->field_58)\n                {\n                    v10->field_8 = 36;\n                    return 1;\n                }\n                if (v2->field_8b != 0)\n                {\n                    if (v2->field_90 > 1)\n                    {\n                        v20 = (unsigned int)*((int *)(v8->field_10 + v17 * 4));\n                        if ((*((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) == -1 || *((int *)(v8->field_10 + (v17 << 2))) == -1) && (*((int *)(v8->field_10 + (v17 << 2))) == -1 || v8->field_30 != &((char *)v3)[2]))\n                        {\n                            v23 = (char)*(&((char *)v3)[1 + v2->field_8]);\n                            v11->field_8 = 1;\n                            v24 = v0;\n                            v11->field_0 = v0;\n                            v0 = v23;\n                        }\n                    }\n                    if (v2->field_90 <= 1 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                    {\n                        v21 = v2->field_0;\n                        v22 = v8->field_28;\n                        if (v8->field_8c != 0)\n                        {\n                            v27 = &v22[v21 + *((long long *)(v8->field_18 + v17 * 8))];\n                            v24 = *(v27);\n                            v0 = *(v27);\n                        }\n                        else\n                        {\n                            v26 = (char)*((char *)(v21 + v17 + v22));\n                            v24 = v26;\n                            v0 = v24;\n                        }\n                    }\n                }\n                if (v2->field_8b == 0 || v2->field_90 <= 1 && (*(v27) & 128) != 0 && v8->field_8c != 0 || v8->field_30 == &((char *)v3)[2] && (*(v27) & 128) != 0 && v8->field_8c != 0 && *((int *)(v8->field_10 + (v17 << 2))) != -1 || (*(v27) & 128) != 0 && v8->field_8c != 0 && *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                {\n                    v0 = (char)*(&((char *)v3)[1 + v0]);\n                    v24 = (char)*(&((char *)v3)[1 + v0]);\n                }\n                if (v2->field_90 <= 1 || v2->field_8b == 0 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                {\n                    *((unsigned long long *)&v11->field_0) = v24;\n                    v11->field_8 = 1;\n                }\n                if (v2->field_90 <= 1 || v2->field_8b == 0 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                {\n                    if (v9 > 1)\n                    {\n                        v20 = *((int *)(v8->field_10 + v17 * 4));\n                    }\n                    else\n                    {\n                        v29 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v24 * 2));\n                        v30 = v29 >> 3;\n                        v11->field_a = (unsigned int)(((unsigned int)rax<8> & 1 | v7) * 64) | v11->field_a & 4294966975;\n                    }\n                }\n                if (v9 > 1 || *((int *)(v8->field_10 + (v17 << 2))) == -1 && v2->field_90 > 1 && v2->field_8b != 0 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) == -1 && v2->field_90 > 1 && v8->field_30 != &((char *)v3)[2] && v2->field_8b != 0)\n                {\n                    v28 = iswalnum(v20);\n                    v31 = v28 != 0;\n                    v11->field_a = v11->field_a & 4294966975 | (unsigned int)((rax<4> | v7) * 64);\n                }\n                v32 = v24 - 39;\n                switch (v32)\n                {\n                case 0:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 128;\n                    }\n                case 1:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x2000) == 0)\n                    {\n                        v11->field_8 = 8;\n                    }\n                case 2:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x2000) == 0)\n                    {\n                        v11->field_8 = 9;\n                    }\n                case 4:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 1026) == 2)\n                    {\n                        v11->field_8 = 18;\n                    }\n                case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x4000) == 0)\n                    {\n                        v11->field_8 = 4;\n                        *((long long *)&v11->field_0) = (int)(v0 - 49);\n                    }\n                case 21:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 6;\n                    }\n                case 23:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 9;\n                    }\n                case 24:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 1026) == 2)\n                    {\n                        v11->field_8 = 19;\n                    }\n                case 27:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 0x200;\n                    }\n                case 44:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 35;\n                    }\n                case 48:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 33;\n                    }\n                case 57:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 64;\n                    }\n                case 59:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 0x100;\n                    }\n                case 76:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 34;\n                    }\n                case 80:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 32;\n                    }\n                case 84:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 0x1200) == 0x200)\n                    {\n                        v11->field_8 = 23;\n                    }\n                case 85:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x8400) == 0)\n                    {\n                        v11->field_8 = 10;\n                    }\n                case 86:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 0x1200) == 0x200)\n                    {\n                        v11->field_8 = 24;\n                    }\n                default:\n                    v13 = 2;\n                }\n                if (v32 <= 86)\n                {\n                    v33 = v32;\n                }\n            }\n        }\n    }\n    else\n    {\n        v4->field_8 = 2;\n        v13 = 0;\n    }\n    if (*((char *)(v2->field_8 + v2->field_48)) == 92 && (char *)v3 + 1 < v2->field_58 && v2->field_68 > v2->field_48 && (v9 <= 1 || v2->field_48 == v2->field_30 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1) || *((int *)(v2->field_10 + (v2->field_48 << 2))) == -1 && v9 > 1 && v2->field_48 != v2->field_30 && v2->field_68 > v2->field_48 || *((char *)(v2->field_8 + v2->field_48)) != 92 && (char)((unsigned int)(char)*((char *)(v2->field_8 + v2->field_48)) - 10) > 115 && v2->field_68 > v2->field_48 && (v9 <= 1 || v2->field_48 == v2->field_30 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1) || v2->field_68 <= v2->field_48)\n    {\n        return v13;\n    }\n}\n"
        },
        {
            "funcName": "sub_407b00",
            "funcStartAddr": "0x407b00",
            "funcEndAddr": "0x407ca0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_623338;\nextern uint128_t g_623340;\nextern unsigned int g_623350;\nextern int512_t g_623b40;\n\nint sub_407b00()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_623338;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_623350 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_623338 != 6435648)\n            {\n                v16 = sub_4091c0();\n                g_623338 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4091c0();\n                v17 = v15;\n                g_623338 = v15;\n                *(v15) = g_623340;\n            }\n            memset(&v17[(long long)(int)g_623350], 0x0, (int)((unsigned int)v13 + 1 - g_623350) * 16);\n            g_623350 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4093b0(); /* do not return */\n        }\n    }\n    if (g_623350 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_4068d0();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6437696)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_409160();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_4068d0();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_4064c0",
            "funcStartAddr": "0x4064c0",
            "funcEndAddr": "0x406541",
            "decompiledFuncCode": "extern unsigned int g_41c542;\n\nint sub_4064c0()\n{\n    char *v1;  // rdi\n    unsigned long v3;  // rax\n    char *v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v7;  // rax\n\n    if (v1 != v3)\n    {\n        v4 = sub_405c20();\n        if (v4 == 0)\n        {\n            v6 = strlen(v3);\n            strlen(v1);\n            __sprintf_chk(v7, 0x1, 0xffffffff, 0x41c542);\n            return sub_409160();\n        }\n    }\n    if (v1 == v3 || v4 != 0)\n    {\n        v3 = dcgettext(0x0, (unsigned int)v1, 0x5);\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_4190b0",
            "funcStartAddr": "0x4190b0",
            "funcEndAddr": "0x4190cf",
            "decompiledFuncCode": "int sub_4190b0()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n\n    v1 = wcwidth();\n    if ((unsigned int)v1 >= 0)\n    {\n        return v1;\n    }\n    return (unsigned long long)(char)(iswcntrl(v2) == 0);\n}\n"
        },
        {
            "funcName": "sub_4092c0",
            "funcStartAddr": "0x4092c0",
            "funcEndAddr": "0x40930a",
            "decompiledFuncCode": "int sub_4092c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4081a0",
            "funcStartAddr": "0x4081a0",
            "funcEndAddr": "0x4081b1",
            "decompiledFuncCode": "int sub_4081a0()\n{\n}\n"
        },
        {
            "funcName": "sub_40abd0",
            "funcStartAddr": "0x40abd0",
            "funcEndAddr": "0x40acb3",
            "decompiledFuncCode": "int sub_40abd0()\n{\n    unsigned long long v1;  // rdx\n    char|void * v2;  // dil\n    char|unsigned long v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    void *v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while (*((char *)v2) != (char)v3 && (v2 & 7) != 0 && v1 != 1);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if ((char)v6[-1] == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v3 == *((char *)v2) && (v2 & 7) != 0 && v1 != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_408300",
            "funcStartAddr": "0x408300",
            "funcEndAddr": "0x40830a",
            "decompiledFuncCode": "int sub_408300()\n{\n}\n"
        },
        {
            "funcName": "sub_404ed0",
            "funcStartAddr": "0x404ed0",
            "funcEndAddr": "0x404ef7",
            "decompiledFuncCode": "int sub_404ed0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rdi\n    unsigned long long *v3;  // r11\n\n    v1 = sub_404690();\n    if ((unsigned int)v1 == 0)\n    {\n        if (*(v2) >= *(v3))\n        {\n            v1 = (char)(*(v2) > *(v3));\n        }\n        else\n        {\n            return -18446744069414584321;\n        }\n    }\n    if (*(v2) >= *(v3) || (unsigned int)v1 != 0)\n    {\n        return v1;\n    }\n}\n"
        },
        {
            "funcName": "sub_4093f0",
            "funcStartAddr": "0x4093f0",
            "funcEndAddr": "0x40940f",
            "decompiledFuncCode": "int sub_4093f0()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if ((unsigned int)v2 < 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_4093b0(); /* do not return */\n        }\n    }\n    if (*(v3) != 12 || (unsigned int)v2 >= 0)\n    {\n        v2 = (unsigned int)sub_41abc0();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40db40",
            "funcStartAddr": "0x40db40",
            "funcEndAddr": "0x40de1e",
            "decompiledFuncCode": "typedef struct struct_7 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_7;\n\ntypedef struct struct_3 {\n    char padding_0[80];\n    unsigned long long field_50;\n    char padding_58[16];\n    char field_68;\n} struct_3;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_2;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_6 *field_10;\n} struct_5;\n\ntypedef struct struct_4 {\n    char padding_0[10];\n    char field_a;\n} struct_4;\n\nextern unsigned long long g_10;\nextern unsigned long long g_50;\nextern char g_68;\n\nint sub_40db40()\n{\n    unsigned long v0;  // [bp-0x58]\n    void tmp_90;  // tmp #90\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned long long v4[3];  // rdx\n    unsigned int *v5;  // rdi\n    unsigned long v6;  // rcx\n    unsigned long long *v7;  // rax\n    unsigned long long v8;  // r12\n    unsigned int v9;  // r15d\n    unsigned long long v10[18];  // rsi\n    unsigned long long v11[18];  // r13\n    struct_7 *v12;  // rax\n    unsigned long long v13;  // r11\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // r10\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    struct_2 *v18;  // r15\n    unsigned long long v19;  // cc_dep1\n    unsigned long long v20;  // r10\n    struct_3 *v21;  // r12\n    unsigned long long v22;  // r14\n    struct_5 *v23;  // r15\n    struct_4 *v24;  // rax\n    unsigned int v25;  // esi\n    unsigned int v26;  // ebx\n    unsigned short v27;  // bx\n    unsigned int v28;  // edi\n    unsigned long long v30;  // r11\n    char v31;  // al\n    char v32;  // r11b\n    unsigned int v33;  // eax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rdx\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // r10\n    unsigned long long v43;  // rax\n    struct_3 *|unsigned long long v45;  // r14\n    unsigned int *v46;  // rdi\n    unsigned long long v47;  // rax\n\n    if (v4[1] != 0)\n    {\n        v8 = v6 + v4[1];\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v7 = *((long long *)(v4 + &g_10));\n            do\n            {\n                v8 += *(v7);\n                v7 = &v7[1];\n            }\n            while (*((long long *)(v4 + &g_10)) + (v4[1] << 3) != v7);\n        }\n        v9 = v6;\n        v11 = v10;\n        v12 = v10[8] + (v10[17] & v8) * 24;\n        v13 = *((long long *)(v10[8] + (v10[17] & v8) * 24));\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v14 = *((long long *)(v12 + &g_10));\n            v15 = 0;\n            do\n            {\n                v45 = *((long long *)(v14 + v15 * 8));\n                if (*((long long *)*((long long *)(v14 + (v15 << 3)))) == v8 && ((&g_68)[v45] & 15) == (unsigned int)v6)\n                {\n                    v16 = sub_40ace0();\n                    if (v16 != 0)\n                    {\n                        break;\n                    }\n                }\n                v15 += 1;\n            }\n            while (v15 != v13);\n            if (v16 == 0 || *((long long *)*((long long *)(v14 + (v15 << 3)))) != v8 || ((&g_68)[v45] & 15) != (unsigned int)v6)\n            {\n                v45 = calloc(0x70, 0x1);\n            }\n            else if (*((long long *)*((long long *)(v14 + (v15 << 3)))) == v8 && ((&g_68)[v45] & 15) == (unsigned int)v6)\n            {\n                v47 = v45;\n                return v47;\n            }\n        }\n        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || v45 != 0)\n        {\n            v45 = calloc(0x70, 0x1);\n            if (v45 != 0)\n            {\n                v0 = &v45->padding_0[8];\n                v17 = sub_40d930();\n                if (v17 == 0)\n                {\n                    v19 = v18->field_8;\n                    *((char *)(v45 + &g_68)) = (char)(*((char *)(v45 + &g_68)) & 0xfffffef0) | (unsigned int)v6 & 15;\n                    *((unsigned long *)(v45 + &g_50)) = v0;\n                    if (v19 > 0)\n                    {\n                        v2 = v8;\n                        v20 = 0;\n                        v1 = &v45->padding_0[24];\n                        v21 = v45;\n                        v22 = 0;\n                        v18 = v4;\n                        while (true)\n                        {\n                            v24 = *((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11);\n                            v25 = (char)*((char *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8));\n                            v26 = (unsigned long long)(unsigned int)*((int *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8)) >> 8;\n                            v27 = (unsigned short)((unsigned long long)(unsigned int)*((int *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8)) >> 8) & 1023;\n                            v28 = (unsigned short)((unsigned long long)(unsigned int)*((int *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8)) >> 8) & 1023;\n                            if (*((char *)((*((long long *)(*((long long *)(v23 + &g_10)) + (v22 << 3))) << 4) + *(v11) + 8)) != 1 || v28 != 0)\n                            {\n                                v30 = (&g_68)[v22];\n                                v31 = (unsigned long long)v24->field_a >> 4;\n                                v32 = (unsigned long long)(&g_68)[v22] >> 5;\n                                tmp_90 = (rax<8> | (unsigned int)r11<8>) & 1;\n                                v33 = (unsigned int)((unsigned long long)((rax<8> | (unsigned int)r11<8>) & 1) * 32) | (&g_68)[v22] & 4294967007;\n                                (&g_68)[v22] = (unsigned int)(tmp_90 * 32) | (&g_68)[v22] & 4294967007;\n                                if (v25 == 2)\n                                {\n                                    *((unsigned long long *)&(&g_68)[v22]) = v33 | &g_10;\n                                }\n                                else if (v25 == 4)\n                                {\n                                    *((unsigned long long *)&(&g_68)[v22]) = v33 | 64;\n                                }\n                            }\n                            if (v28 != 0)\n                            {\n                                if (v0 == *((long long *)&((char *)&g_50)[v22]))\n                                {\n                                    v36 = malloc(0x18);\n                                    *((unsigned long long *)&((char *)&g_50)[v22]) = v36;\n                                    if (v36 != 0)\n                                    {\n                                        v37 = sub_40d930();\n                                        if (v37 != 0)\n                                        {\n                                            break;\n                                        }\n                                        (&g_68)[v22] = (&g_68)[v22] | 128;\n                                        v20 = 0;\n                                    }\n                                    else\n                                    {\n                                        sub_40c460();\n                                    }\n                                }\n                                if ((v0 != *((long long *)&((char *)&g_50)[v22]) || v36 != 0) && (((char)v6 & 1) == 0 && (v27 & 1) != 0 || ((char)v6 & 4) == 0 && ((char)rbx<4> & 64) != 0 || ((char)v6 & 2) == 0 && (v27 & 16) != 0 || ((char)v6 & 1) != 0 && (v27 & 2) != 0))\n                                {\n                                    v38 = v22 - v20;\n                                    if (!((char)(v22 - v20 >> 63)))\n                                    {\n                                        v39 = *((long long *)&((char *)&g_10)[v22]);\n                                        if (v38 < *((long long *)&((char *)&g_10)[v22]))\n                                        {\n                                            *((unsigned long long *)&((char *)&g_10)[v22]) = v39 - 1;\n                                            sub_40ca00();\n                                        }\n                                    }\n                                    v41 = v20 + 1;\n                                }\n                            }\n                            if (v28 == 0 || v0 != *((long long *)&((char *)&g_50)[v22]) || v36 != 0)\n                            {\n                                v22 += 1;\n                                v22 = v21;\n                            }\n                        }\n                        if (((((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) && ((v27 & 16) == 0 || ((char)v6 & 2) != 0) && ((char)rbx<4> & 64) == 0 || ((char)rbx<4> & 64) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) && ((v27 & 16) == 0 || ((char)v6 & 2) != 0) && ((char)v6 & 4) != 0 || v28 == 0 || !((char)(v22 - v20 >> 63)) && (((char)v6 & 1) == 0 && (v27 & 1) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || (v27 & 1) == 0 && ((char)v6 & 1) != 0 && (v27 & 2) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 1) != 0 && (v27 & 2) != 0 && (v27 & 1) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 2) == 0 && (v27 & 16) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 4) == 0 && ((char)rbx<4> & 64) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) && ((v27 & 16) == 0 || ((char)v6 & 2) != 0)) && v38 >= *((long long *)&((char *)&g_10)[v22]) || !((char)(v22 - v20 >> 63)) && (((char)v6 & 1) == 0 && (v27 & 1) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || (v27 & 1) == 0 && ((char)v6 & 1) != 0 && (v27 & 2) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 1) != 0 && (v27 & 2) != 0 && (v27 & 1) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 2) == 0 && (v27 & 16) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 4) == 0 && ((char)rbx<4> & 64) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) && ((v27 & 16) == 0 || ((char)v6 & 2) != 0)) && v38 < *((long long *)&((char *)&g_10)[v22]) || (((char)v6 & 1) == 0 && (v27 & 1) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || (v27 & 1) == 0 && ((char)v6 & 1) != 0 && (v27 & 2) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 1) != 0 && (v27 & 2) != 0 && (v27 & 1) != 0 && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 2) == 0 && (v27 & 16) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) || ((char)v6 & 4) == 0 && ((char)rbx<4> & 64) != 0 && (((char)v6 & 1) == 0 || (v27 & 2) == 0) && ((v27 & 1) == 0 || ((char)v6 & 1) != 0) && (v37 == 0 || v0 != *((long long *)&((char *)&g_50)[v22])) && ((v27 & 16) == 0 || ((char)v6 & 2) != 0)) && (char)(v22 - v20 >> 63)) && v22 >= v23->field_8)\n                        {\n                            v43 = sub_40b3b0();\n                        }\n                        else if (v0 == *((long long *)&((char *)&g_50)[v22]) && v28 != 0)\n                        {\n                            v45 = 0;\n                            *(v46) = 12;\n                        }\n                    }\n                    if (v19 <= 0 || v43 != 0)\n                    {\n                        v43 = sub_40b3b0();\n                    }\n                    if (v43 != 0)\n                    {\n                        sub_40c460();\n                    }\n                }\n                else\n                {\n                    free(v45);\n                }\n            }\n            if (v45 == 0 || v17 != 0 || v43 != 0)\n            {\n                v45 = 0;\n                *(v46) = 12;\n            }\n        }\n    }\n    else\n    {\n        *(v5) = 0;\n        v45 = 0;\n    }\n    v47 = v45;\n    return v47;\n}\n"
        },
        {
            "funcName": "sub_4093b0",
            "funcStartAddr": "0x4093b0",
            "funcEndAddr": "0x4093e1",
            "decompiledFuncCode": "extern unsigned int g_41d64f;\nextern unsigned int g_6232e8;\n\nint sub_4093b0()\n{\n    dcgettext(0x0, 0x41d64f, 0x5);\n    error(g_6232e8, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4100d0",
            "funcStartAddr": "0x4100d0",
            "funcEndAddr": "0x410114",
            "decompiledFuncCode": "int sub_4100d0()\n{\n    unsigned long long v1;  // rdi\n    char *v3;  // rsi\n    char *v4;  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = strlen(v3);\n    if (v5 == 1)\n    {\n        *((unsigned long long *)(v1 + ((unsigned int)((unsigned long long)*(v4) >> 3) & 24))) = *((long long *)(v1 + ((unsigned int)((unsigned long long)*(v4) >> 3) & 24))) | v5 << (*(v4) & 63);\n        return 0;\n    }\n    return 3;\n}\n"
        },
        {
            "funcName": "sub_418150",
            "funcStartAddr": "0x418150",
            "funcEndAddr": "0x418573",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char field_38;\n} struct_0;\n\nint sub_418150()\n{\n    unsigned long long v0;  // [bp-0x88]\n    void tmp_23;  // tmp #23\n    unsigned long long|unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long long|unsigned int|unsigned long v3;  // [bp-0x60]\n    unsigned long long|void *|unsigned long v4;  // [bp-0x58]\n    unsigned long long|char v5;  // [bp-0x50]\n    unsigned long v6;  // [bp-0x48]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    unsigned long long v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    unsigned long long v11;  // r8\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r12\n    unsigned long long v15;  // rdx\n    unsigned long long v16;  // rbx\n    unsigned long v17;  // rsi\n    struct_0 *v18;  // rdi\n    struct_0 *v19;  // r15\n    unsigned long long v20;  // r8\n    unsigned long long v21;  // rax\n    unsigned int v22;  // ecx\n    char v23;  // cl\n    unsigned int v24;  // ecx\n    char v25;  // cl\n    unsigned long v26;  // r9\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // r14\n    unsigned long long v31;  // r13\n    unsigned long long v32;  // rdi\n    void *v33;  // rbp\n    unsigned long long v34;  // rax\n    unsigned int v35;  // eax\n    unsigned long long v36;  // rdx\n    char v37;  // al\n    unsigned int v38;  // eax\n    unsigned long v39;  // r14\n    void *v40;  // rax\n    unsigned long long v41;  // rax\n    void *v42;  // r14\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // r8\n    unsigned long long v46;  // rdi\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rsi\n    unsigned long long v49;  // rsi\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // r9\n    unsigned long long v52;  // r12\n    unsigned long long v53;  // rax\n\n    v12 = v11;\n    v20 = v11 + v13;\n    v14 = v9;\n    v7 = v10;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v13 <= v15)\n    {\n        v16 = v13;\n        v3 = v17;\n        v19 = v18;\n        if (v20 <= v15)\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n            {\n            }\n            else\n            {\n                v21 = v19->field_38;\n                v20 = 0;\n                v22 = v19->field_38;\n                v23 = (unsigned long long)v19->field_38 >> 5;\n                v8 = rcx<4> & 3;\n            }\n        }\n        if (v20 > v15 || v13 > v20 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v20 = v15;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) || v20 > v15)\n        {\n            v21 = v19->field_38;\n            v24 = v19->field_38;\n            v25 = (unsigned long long)v19->field_38 >> 5;\n            v8 = rcx<4> & 3;\n            if (v20 > v13 && v19->field_20 != 0 && (v18->field_38 & 8) == 0)\n            {\n                v6 = v26;\n                v5 = v15;\n                v4 = v20;\n                sub_418080();\n                v21 = v19->field_38;\n                v20 = v4;\n            }\n        }\n        if ((v21 & 16) == 0 && v9 != 0)\n        {\n            v28 = (unsigned int)v21 & 6;\n            v29 = v19->field_30;\n            if (v28 == 4)\n            {\n                v30 = *((long long *)v14);\n                if (*((long long *)v14) <= v18->field_30)\n                {\n                    v31 = v30;\n                }\n            }\n            if (*((long long *)v14) > v18->field_30 || v28 != 4)\n            {\n                v30 = v29 + 1;\n                v31 = v29 + 1;\n            }\n            if (*((long long *)v14) > v18->field_30 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) || v28 != 4)\n            {\n                v32 = v30 * 16;\n            }\n        }\n        if (v9 == 0 || (v21 & 16) != 0 || *((long long *)v14) <= v18->field_30 && (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>) && v28 == 4)\n        {\n            v32 = 16;\n            v30 = 1;\n            v31 = 1;\n            v14 = 0;\n        }\n        v6 = v6;\n        v5 = v5;\n        v4 = v20;\n        v33 = malloc(v32);\n        if (v1 != 0)\n        {\n            v2 = v8;\n            v1 = v33;\n            v0 = v30;\n            v34 = sub_4131a0();\n            if (v34 != 0)\n            {\n                v52 = -1;\n            }\n            else if (v14 != 0)\n            {\n                v35 = v19->field_38;\n                v36 = v31 + 1;\n                v37 = (unsigned long long)v19->field_38 >> 1;\n                v38 = rax<4> & 3;\n                if (!(v38 != 0))\n                {\n                    v39 = v3 * 8;\n                    v3 = v36;\n                    v40 = malloc(v3 * 8);\n                    *((unsigned long long *)(v14 + 8)) = v4;\n                    if (v4 != 0)\n                    {\n                        v3 = v3;\n                        v4 = v40;\n                        v41 = malloc(v39);\n                        *((unsigned long long *)(v14 + 16)) = v41;\n                        if (v41 != 0)\n                        {\n                            *((unsigned long long *)v14) = v3;\n                            v51 = 1;\n                        }\n                        else\n                        {\n                            free(v4);\n                        }\n                    }\n                }\n                else if (v38 != 1)\n                {\n                    if (!(v38 == 2))\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (v30 <= *((long long *)v14))\n                    {\n                        v51 = 2;\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n                else\n                {\n                    if (*((long long *)v14) < v3)\n                    {\n                        v5 = 1;\n                        v4 = v3;\n                        *((unsigned long *)&v3) = v3 * 8;\n                        v42 = realloc(*((long long *)(v14 + 8)), v3 * 8);\n                        if (v42 != 0)\n                        {\n                            v43 = realloc(*((long long *)(v14 + 16)), *((long long *)&v3));\n                            v51 = v5;\n                            if (v43 != 0)\n                            {\n                                *((void **)(v14 + 8)) = v42;\n                                *((unsigned long long *)(v14 + 16)) = v43;\n                                *((unsigned long *)v14) = v4;\n                            }\n                            else\n                            {\n                                free(v42);\n                                v51 = 0;\n                            }\n                        }\n                    }\n                }\n                if (v38 == 1)\n                {\n                    v51 = 1;\n                }\n            }\n        }\n        else\n        {\n            v52 = -2;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>) || v13 > v15)\n    {\n        v52 = -1;\n    }\n    if (v34 == 0 && v38 == 1 && v13 <= v15 && v38 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && *((long long *)v14) < v3 && v42 == 0 || v38 == 0 && v34 == 0 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v4 != 0 && v1 != 0 && v41 == 0 || v38 == 0 && v34 == 0 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && v4 == 0)\n    {\n        v51 = 0;\n    }\n    if (v38 == 2 && v34 == 0 && v13 <= v15 && v38 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v38 != 1 && v1 != 0 && v30 <= *((long long *)v14) || v34 == 0 && v38 == 1 && v13 <= v15 && v38 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && *((long long *)v14) < v3 && v42 != 0 && v43 != 0 || v34 == 0 && v38 == 1 && v13 <= v15 && v38 != 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && *((long long *)v14) >= v3 || v38 == 0 && v34 == 0 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v4 != 0 && v1 != 0 && v41 != 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v45 = *((long long *)(v14 + 8));\n            v46 = *((long long *)(v14 + 16));\n            v44 = v31;\n            v47 = 0;\n            v48 = v31 * 8;\n            do\n            {\n                *((long long *)(v45 + v47)) = *((long long *)(v1 + v47 * 2));\n                *((long long *)(v46 + v47)) = *((long long *)(v1 + v47 * 2 + 8));\n                v47 += 8;\n            }\n            while (v47 != v48);\n        }\n        else\n        {\n            v44 = 0;\n            v31 = 0;\n        }\n        if (*((long long *)v14) > v44)\n        {\n            v49 = *((long long *)(v14 + 16));\n            v50 = *((long long *)(v14 + 8));\n            do\n            {\n                v31 += 1;\n                *((long long *)(v49 + v44 * 8)) = -1;\n                *((long long *)(v50 + v44 * 8)) = -1;\n                v44 = v31;\n            }\n            while (*((long long *)v14) > v31);\n        }\n    }\n    if (...)\n    {\n        tmp_23 = v19->field_38;\n        v19->field_38 = v19->field_38 & 4294967033 | (unsigned int)v51 * 2;\n    }\n    if (...)\n    {\n        v52 = -2;\n    }\n    if (...)\n    {\n        v52 = *((long long *)v1);\n        if ((char)v7 != 0)\n        {\n            if (v16 == v52)\n            {\n                v52 = *((long long *)(v1 + 8)) - v52;\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n    }\n    if (...)\n    {\n        free(v1);\n    }\n    if (...)\n    {\n        v53 = v52;\n        return v53;\n    }\n}\n"
        },
        {
            "funcName": "sub_4188fd",
            "funcStartAddr": "0x4188fd",
            "funcEndAddr": "0x418906",
            "decompiledFuncCode": "int sub_4188fd()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long v4;  // rbx\n\n    v2 = v4;\n    v1 = 0;\n    v0 = 0;\n}\n"
        },
        {
            "funcName": "sub_417250",
            "funcStartAddr": "0x417250",
            "funcEndAddr": "0x417ea8",
            "decompiledFuncCode": "int sub_417250() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408350",
            "funcStartAddr": "0x408350",
            "funcEndAddr": "0x408366",
            "decompiledFuncCode": "int sub_408350()\n{\n}\n"
        },
        {
            "funcName": "sub_404688",
            "funcStartAddr": "0x404688",
            "funcEndAddr": "0x4046c4",
            "decompiledFuncCode": "int sub_404688() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4185b0",
            "funcStartAddr": "0x4185b0",
            "funcEndAddr": "0x4186c4",
            "decompiledFuncCode": "int sub_4185b0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x3c]\n    unsigned long v5;  // [bp+0x10]\n    unsigned long v6;  // [bp+0x18]\n    unsigned int v7;  // [bp+0x20]\n    unsigned long v8;  // r8\n    unsigned long v9;  // rbp\n    unsigned long v10;  // rdx\n    unsigned long v11;  // rbx\n    unsigned long v12;  // rdi\n    unsigned long v14;  // r9\n    unsigned long long v15;  // r13\n    unsigned long long v16;  // rbx\n    void *v17;  // rsi\n    void *v19;  // rcx\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // rax\n\n    v9 = v8;\n    v11 = v10;\n    v12 = v8 % 0x8000000000000000;\n    v21 = v7;\n    if ((char)(v6 >> 63) == 0 && dil<1> == 0 && !((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rbx<8>, rbp<8>, cc_ndep<8>)))\n    {\n        if (v9 != 0)\n        {\n            v15 = 0;\n            if (v11 != 0)\n            {\n                v3 = v7;\n                v6 = v6;\n                v2 = v14;\n                v15 = malloc(v11 + v9);\n                if (v15 != 0)\n                {\n                    memcpy(v15, v17, v11);\n                    memcpy(v15 + v11, v19, v9);\n                    v21 = v3;\n                }\n            }\n        }\n        else\n        {\n            v15 = 0;\n        }\n        if (v11 == 0 || v9 == 0 || v15 != 0)\n        {\n            v1 = v21;\n            v0 = v5;\n            v16 = (unsigned int)sub_418150();\n            free(v15);\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rbx<8>, rbp<8>, cc_ndep<8>) || (char)(v6 >> 63) != 0 || dil<1> != 0 || v15 == 0 && v11 != 0 && v9 != 0)\n    {\n        v16 = -2;\n    }\n    v22 = v16;\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_404750",
            "funcStartAddr": "0x404750",
            "funcEndAddr": "0x40477b",
            "decompiledFuncCode": "extern unsigned int g_41b468;\n\nint sub_404750()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41b468, 0x5));\n}\n"
        },
        {
            "funcName": "sub_418980",
            "funcStartAddr": "0x418980",
            "funcEndAddr": "0x418995",
            "decompiledFuncCode": "int sub_418980()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_418150();\n}\n"
        },
        {
            "funcName": "sub_40b210",
            "funcStartAddr": "0x40b210",
            "funcEndAddr": "0x40b26b",
            "decompiledFuncCode": "int sub_40b210()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // rbx\n    unsigned long v5;  // rsi\n    unsigned long long *v6;  // rax\n    unsigned long long *v7;  // rsi\n    unsigned long long v8;  // rax\n\n    v4 = v3;\n    v7 = v3[1];\n    v6 = v3[2];\n    if (*(v3) == v3[1])\n    {\n        v5 = (v3[1] + 1) * 16;\n        *(v3) = (v3[1] + 1) * 2;\n        v6 = realloc(v6, v5);\n        if (v6 != 0)\n        {\n            v4[2] = v6;\n            v7 = v4[1];\n        }\n        else\n        {\n            v8 = 0;\n        }\n    }\n    if (*(v3) != v3[1] || v6 != 0)\n    {\n        v3[1] = (char *)v7 + 1;\n        *((unsigned long long *)((char *)v6 + 0x8 * v7)) = v1;\n        v8 = 1;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_405960",
            "funcStartAddr": "0x405960",
            "funcEndAddr": "0x4059a9",
            "decompiledFuncCode": "int sub_405960()\n{\n    unsigned long long v1;  // rbx\n    unsigned short v2;  // dx\n    unsigned long v3;  // rax\n    unsigned long v4;  // rdi\n    unsigned long long v6;  // rax\n\n    v1 = 1;\n    v3 = open(\"/dev/null\", 0x0, v2);\n    if ((unsigned int)v4 != v3)\n    {\n        v1 = 0;\n        if (v3 >= 0)\n        {\n            close(v3);\n            *(__errno_location()) = 9;\n            return 0;\n        }\n    }\n    if ((unsigned int)v4 == v3 || v3 < 0)\n    {\n        v6 = v1;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4190e0",
            "funcStartAddr": "0x4190e0",
            "funcEndAddr": "0x419131",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char field_10;\n    char padding_11[3];\n    unsigned int field_14;\n} struct_0;\n\nint sub_4190e0()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    struct_0 *v3;  // rsi\n    struct_0 *v4;  // rbx\n    void *v6;  // rsi\n    unsigned long long v8;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    v6 = v3->field_0;\n    if (v6 != &v3[1])\n    {\n        v1->field_0 = v6;\n    }\n    else\n    {\n        v2->field_0 = memcpy(&v1[1], v6, v4->field_8);\n    }\n    v8 = v4->field_10;\n    v2->field_8 = v4->field_8;\n    *((unsigned long long *)&v2->field_10) = v8;\n    if (v8 != 0)\n    {\n        v8 = v4->field_14;\n        v2->field_14 = v4->field_14;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_406550",
            "funcStartAddr": "0x406550",
            "funcEndAddr": "0x4067b0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned short field_8;\n    char field_a;\n} struct_0;\n\nextern unsigned int g_41c542;\n\nint sub_406550()\n{\n    void *|unsigned long v0;  // [bp-0x40]\n    void *v2;  // rsi\n    unsigned long long|void * v3;  // rbx\n    void *v4;  // rdi\n    void *v6;  // r14\n    unsigned long long v7;  // rax\n    void *v8;  // r12\n    unsigned long long|void * v9;  // r14\n    struct_0 *v10;  // r15\n    unsigned long long v11;  // rax\n    unsigned long long|unsigned long v12;  // r15\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rbp\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rbx\n    unsigned long long v24;  // rax\n\n    v3 = v2;\n    v6 = (unsigned long long)(unsigned int)sub_418b40();\n    v7 = sub_418a20();\n    if (!(v7 == 0))\n    {\n        v8 = (unsigned long long)(unsigned int)sub_409440();\n        v10 = strlen(v6) + v0;\n        v10->field_0 = 5499825612410597167;\n        v10->field_8 = 21577;\n        v10->field_a = 0;\n        v0 = memcpy((unsigned long long)(unsigned int)sub_409160(), v6, v10);\n        v9 = (unsigned long long)(unsigned int)sub_409440();\n        free(v0);\n        if (v9 != 0)\n        {\n            v11 = strchr(v9, 0x3f);\n            if (v11 != 0)\n            {\n                free(v9);\n            }\n            else\n            {\n                if (v8 != 0)\n                {\n                    v12 = v9;\n                    v13 = strcmp(v8, v4);\n                    if (v13 == 0 && v8 != v9)\n                    {\n                        free(v9);\n                    }\n                }\n                else\n                {\n                    v12 = v9;\n                    v3 = 0;\n                    v8 = v9;\n                }\n            }\n        }\n        if (v9 == 0 || v11 != 0)\n        {\n            if (v8 != 0)\n            {\n                v14 = strcmp(v8, v4);\n                if (v14 != 0)\n                {\n                    v12 = 0;\n                    v9 = 0;\n                }\n            }\n            else\n            {\n                v8 = v4;\n                v12 = 0;\n                v3 = 0;\n                v9 = 0;\n            }\n        }\n        if (v8 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0))\n        {\n            v18 = sub_405c20();\n            if (v18 == 0)\n            {\n                v3 = v8;\n                v16 = v8;\n            }\n            else\n            {\n                v16 = v8;\n            }\n        }\n    }\n    else if (v2 != 0)\n    {\n        v12 = v3;\n        v8 = v3;\n        v9 = 0;\n    }\n    else\n    {\n        v12 = 0;\n        v8 = v4;\n        v9 = 0;\n    }\n    if (v8 == 0 || v7 == 0)\n    {\n        v15 = strcmp(v8, v4);\n        if (v15 != 0)\n        {\n            v16 = 0;\n            v17 = sub_405c20();\n        }\n    }\n    if ((v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 != 0)\n    {\n        v19 = sub_405c20();\n    }\n    if (((v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 != 0 && v19 == 0 || (v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 == 0) && v12 != 0)\n    {\n        v20 = sub_405c20();\n    }\n    if (((v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 != 0 && v19 == 0 || (v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 == 0) && v12 != 0 && v20 == 0 || ((v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 != 0 && v19 == 0 || (v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 == 0) && v12 == 0)\n    {\n        v21 = strlen(v8);\n        strlen(v8);\n        __sprintf_chk((unsigned int)v8, 0x1, 0xffffffff, 0x41c542);\n        if (v16 != 0)\n        {\n            free(v16);\n        }\n        v8 = (unsigned long long)(unsigned int)sub_409160();\n    }\n    if (v18 != 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || (((v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 != 0 && v19 == 0 || (v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 == 0) && v12 != 0 && v20 != 0 || (v18 == 0 && v8 != 0 && v7 != 0 && (v11 == 0 || v14 != 0) && (v14 != 0 || v9 != 0) && (v9 == 0 || v13 != 0 || v11 != 0) || v15 != 0 && (v8 == 0 || v7 == 0) && v17 == 0) && v3 != 0 && v19 != 0) && v16 != 0)\n    {\n        free(v16);\n    }\n    if (...)\n    {\n        v8 = (unsigned long long)dcgettext(0x0, (unsigned int)v4, 0x5);\n    }\n    if (...)\n    {\n        free(v9);\n    }\n    v24 = v8;\n    return v24;\n}\n"
        },
        {
            "funcName": "sub_40e6b0",
            "funcStartAddr": "0x40e6b0",
            "funcEndAddr": "0x40e7ba",
            "decompiledFuncCode": "int sub_40e6b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rdx\n    unsigned long v4;  // rcx\n    unsigned long v5;  // rsi\n    unsigned long v6;  // rbx\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rbx\n    unsigned long v9;  // rbx\n    unsigned long v10;  // rax\n    unsigned int v11;  // edx\n    unsigned long v12;  // rbx\n\n    v4 = (char)*((char *)(*((long long *)(v2 + 8)) + v3));\n    if (*((char *)(v5 + 8)) != 3)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)))\n        {\n            if (*((char *)(v5 + 8)) != 5 && *((char *)(v5 + 8)) != 7)\n            {\n                return 0;\n            }\n            if ((*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0))\n            {\n                if (*((char *)(*((long long *)(v2 + 8)) + v3)) != 10)\n                {\n                }\n                else\n                {\n                    if ((*((char *)(*((long long *)(v2 + 152)) + 216)) & 64) == 0)\n                    {\n                        return 0;\n                    }\n                }\n            }\n        }\n        else if (!(*((char *)(v5 + 8)) == 1))\n        {\n            return 0;\n        }\n    }\n    else\n    {\n        if (((char)(*((long long *)(*((long long *)v5) + ((unsigned long long)v4 >> 6 << 3))) >> (v4 & 63)) & 1) == 0)\n        {\n            return 0;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>) && *((char *)(v5 + 8)) == 1 && *((char *)v5) != *((char *)(*((long long *)(v2 + 8)) + v3)) && *((char *)(v5 + 8)) != 3 || *((char *)(v5 + 8)) == 7 && *((char *)(*((long long *)(v2 + 8)) + v3)) < 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && *((char *)(v5 + 8)) != 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) == 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && (*((char *)(*((long long *)(v2 + 152)) + 216)) & 128) != 0 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 10 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0))\n    {\n        return 0;\n    }\n    if (*((char *)(v5 + 8)) == 3 && ((char)(*((long long *)(*((long long *)v5) + ((unsigned long long)v4 >> 6 << 3))) >> (v4 & 63)) & 1) != 0 || *((char *)v5) == *((char *)(*((long long *)(v2 + 8)) + v3)) && (char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>) && *((char *)(v5 + 8)) == 1 && *((char *)(v5 + 8)) != 3 || *((char *)(*((long long *)(v2 + 8)) + v3)) == 10 && (*((char *)(*((long long *)(v2 + 152)) + 216)) & 64) != 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0) || !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 0 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 10 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0) || *((char *)(*((long long *)(v2 + 8)) + v3)) == 0 && (*((char *)(*((long long *)(v2 + 152)) + 216)) & 128) == 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 10 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0))\n    {\n        v0 = v6;\n        v10 = 1;\n        if (((unsigned int)*((int *)(v5 + 8)) & 0x3ff00) != 0)\n        {\n            v7 = (unsigned int)sub_40e5c0();\n            if (!(((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0))\n            {\n                v10 = 0;\n                if ((v7 & 1) != 0 && ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) != 0)\n                {\n                    v8 = v0;\n                    return 0;\n                }\n            }\n            else if (((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) != 0)\n            {\n                if (((char)v7 & 1) != 0)\n                {\n                    v9 = v0;\n                    return 0;\n                }\n            }\n            if ((((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0 || ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) == 0) && (((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) == 0 || ((char)v7 & 1) == 0) && (((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0 || (v7 & 1) != 0))\n            {\n                if (((char)((unsigned short)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 1023) & 32) != 0)\n                {\n                    v10 = 0;\n                }\n                if (((char)((unsigned short)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 1023) & 32) == 0 || (v7 & 2) != 0)\n                {\n                    v11 = (unsigned int)v7 % 8 & 1;\n                    v10 = (unsigned int)((v4 & 128) != 0? (unsigned int)rdx<8> : 1);\n                }\n            }\n        }\n        if (((unsigned int)*((int *)(v5 + 8)) & 0x3ff00) == 0 || ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) == 0 || ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0 && ((char)v7 & 1) == 0 || (v7 & 1) == 0 && ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) != 0)\n        {\n            v12 = v0;\n            return v10;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_417f10",
            "funcStartAddr": "0x417f10",
            "funcEndAddr": "0x417f39",
            "decompiledFuncCode": "int sub_417f10()\n{\n}\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x405112",
            "decompiledFuncCode": "int sub_405030()\n{\n    unsigned long long v0;  // [bp-0x38]\n    unsigned long long v1;  // [bp-0x30]\n    unsigned long long v3;  // rsi\n    unsigned long long v4[3];  // r12\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rdi\n    char *v8;  // rbx\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // rbp\n\n    v4 = v3;\n    sub_404f70();\n    v10 = v0;\n    v6 = v1;\n    v4[0] = 0;\n    v7 = 0;\n    v4[1] = 0;\n    v4[2] = 0;\n    if (v0 < v1)\n    {\n        while (true)\n        {\n            v8 = v10;\n            while (true)\n            {\n                if (*(v8) != 10)\n                {\n                    v8 = &v8[1];\n                }\n                if ((v8 == v1 || *(v8) == 10) && (*(v8) == 10 || v4[1] == 0) && (v10 < v8 || *(v8) != 10) && (v4[1] == 0 || *(v8) != 10))\n                {\n                    v7 = (unsigned int)sub_409230();\n                    v4[0] = v7;\n                }\n                if (v10 < v8 && *(v8) == 10 || v8 == v1 && *(v8) != 10)\n                {\n                    *((unsigned long long *)(0 * 16 + v7)) = v10;\n                    *((char **)(0 * 16 + v7 + 8)) = &v8[-1 * v10];\n                    v4[2] = 1;\n                }\n                v9 = &v8[(unsigned long long)(char)(v8 < v6)];\n                v10 = v9;\n                break;\n            }\n            if (true)\n            {\n                return qsort(v7);\n            }\n            v8 = v10;\n        }\n    }\n    return qsort(v7);\n}\n"
        },
        {
            "funcName": "sub_40d200",
            "funcStartAddr": "0x40d200",
            "funcEndAddr": "0x40d334",
            "decompiledFuncCode": "typedef struct struct_2 {\n    uint128_t field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_2;\n\ntypedef struct struct_4 {\n    uint128_t field_0;\n    unsigned long long field_8;\n    struct struct_5 *field_10;\n} struct_4;\n\ntypedef struct struct_3 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_3;\n\ndouble sub_40d200()\n{\n    unsigned int v0;  // [bp-0x4c]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long long v2;  // [bp-0x40]\n    void *v3;  // [bp-0x38]\n    struct_2 *v5;  // rsi\n    struct_4 *v6;  // r14\n    unsigned long long v7;  // rdi\n    unsigned long long v8[7];  // r13\n    unsigned long v9;  // rcx\n    unsigned int v10;  // ebx\n    void v11;  // xmm0\n    struct_3 *v12;  // rsi\n    unsigned long long v13;  // r9\n    unsigned long long v14;  // r11\n    unsigned long long v15;  // r10\n    unsigned long long v16;  // rcx\n    unsigned long long v17;  // rdi\n    unsigned long long *v18;  // rax\n    unsigned long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r12\n    void v22;  // xmm0\n\n    v6 = v5;\n    v8 = v7;\n    v10 = v9;\n    v2 = 0;\n    v1 = *((long long *)&((char *)&v5->field_0)[8]);\n    v3 = malloc(*((long long *)&((char *)&v5->field_0)[8]) * 8);\n    if (v3 != 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v21 = 0;\n            while (true)\n            {\n                v12 = v8[6] + *((long long *)(v6->field_8 + v21 * 8)) * 24;\n                v13 = *((long long *)(v8[6] + *((long long *)(v6->field_8 + v21 * 8)) * 24 + 8));\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v14 = v12->field_10;\n                    v15 = *(v8);\n                    v16 = 0;\n                    while (true)\n                    {\n                        v17 = *((long long *)(v14 + v16 * 8));\n                        v18 = *((long long *)(v14 + v16 * 8)) * 16 + v15;\n                        if (v19 == *(v18) && v10 == (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)))\n                        {\n                            if (v17 == -1)\n                            {\n                                break;\n                            }\n                            v20 = sub_40c900();\n                            break;\n                        }\n                        if (v19 != *(v18) || v10 != (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)))\n                        {\n                            v16 += 1;\n                            if (v13 == v16)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v19 == *(v18) && v10 == (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)) && v17 != -1)\n                    {\n                        *((unsigned long long *)&v0) = v20;\n                        free(v3);\n                        return v22;\n                    }\n                    else if (true)\n                    {\n                        v20 = sub_40cdd0();\n                    }\n                    else if (v19 == *(v18) && v10 == (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)) && v17 != -1)\n                    {\n                        v21 += 1;\n                        if (*((long long *)&((char *)&v6->field_0)[8]) <= v21)\n                        {\n                            break;\n                        }\n                    }\n                }\n                v20 = sub_40cdd0();\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) || v20 != 0)\n                {\n                    *((unsigned long long *)&v0) = v20;\n                    free(v3);\n                    return v22;\n                }\n            }\n        }\n        free(v6->field_8);\n        v6->field_8 = v3;\n        v6->field_0 = *((int128_t *)&v1);\n        return *((int128_t *)&v1);\n    }\n    return v11;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_ptx.elf"
}