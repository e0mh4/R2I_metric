{
    "funcInfo": [
        {
            "funcName": "sub_403b20",
            "funcStartAddr": "0x403b20",
            "funcEndAddr": "0x403b92",
            "decompiledFuncCode": "extern int512_t g_6095a0;\n\nint sub_403b20()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6095a0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_402660();\n}\n"
        },
        {
            "funcName": "sub_403d70",
            "funcStartAddr": "0x403d70",
            "funcEndAddr": "0x403d86",
            "decompiledFuncCode": "int sub_403d70()\n{\n}\n"
        },
        {
            "funcName": "sub_401e0b",
            "funcStartAddr": "0x401e0b",
            "funcEndAddr": "0x401e2a",
            "decompiledFuncCode": "extern unsigned long long g_609428;\n\nint sub_401e0b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &g_609428;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_403e20",
            "funcStartAddr": "0x403e20",
            "funcEndAddr": "0x403e89",
            "decompiledFuncCode": "int sub_403e20()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403890();\n}\n"
        },
        {
            "funcName": "sub_403fd0",
            "funcStartAddr": "0x403fd0",
            "funcEndAddr": "0x40403c",
            "decompiledFuncCode": "extern uint128_t g_6095a0;\nextern uint128_t g_6095b0;\nextern uint128_t g_6095c0;\nextern unsigned long long g_6095d0;\n\nint sub_403fd0()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6095a0;\n    *((uint128_t *)&v1) = g_6095b0;\n    *((uint128_t *)&v2) = g_6095c0;\n    v4 = g_6095d0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_403890();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403a70",
            "funcStartAddr": "0x403a70",
            "funcEndAddr": "0x403a7f",
            "decompiledFuncCode": "extern int512_t g_6095a0;\n\nint sub_403a70()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6095a0 : v1));\n}\n"
        },
        {
            "funcName": "sub_405680",
            "funcStartAddr": "0x405680",
            "funcEndAddr": "0x405693",
            "decompiledFuncCode": "int sub_405680()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_405600();\n}\n"
        },
        {
            "funcName": "sub_403ea0",
            "funcStartAddr": "0x403ea0",
            "funcEndAddr": "0x403eaf",
            "decompiledFuncCode": "int sub_403ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_404500",
            "funcStartAddr": "0x404500",
            "funcEndAddr": "0x404559",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_404500()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_404100();\n}\n"
        },
        {
            "funcName": "sub_403eaf",
            "funcStartAddr": "0x403eaf",
            "funcEndAddr": "0x403f20",
            "decompiledFuncCode": "extern uint128_t g_6095a0;\nextern uint128_t g_6095b0;\nextern uint128_t g_6095c0;\nextern unsigned long long g_6095d0;\n\nint sub_403eaf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6095d0;\n    *((uint128_t *)&v0) = g_6095a0;\n    *((uint128_t *)&v1) = g_6095b0;\n    *((uint128_t *)&v2) = g_6095c0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_403890();\n}\n"
        },
        {
            "funcName": "sub_405fe0",
            "funcStartAddr": "0x405fe0",
            "funcEndAddr": "0x406058",
            "decompiledFuncCode": "int sub_405fe0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_406060() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_404100",
            "funcStartAddr": "0x404100",
            "funcEndAddr": "0x4044a9",
            "decompiledFuncCode": "extern unsigned int g_40776b;\nextern unsigned int g_40776f;\nextern unsigned int g_40777f;\nextern unsigned int g_407796;\nextern unsigned int g_4077f8;\nextern unsigned int g_4078c8;\nextern unsigned int g_4078e8;\nextern unsigned int g_407910;\nextern unsigned int g_407938;\nextern unsigned int g_407968;\n\nint sub_404100()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40776b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4077f8, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40776f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40777f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x407796, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x4078c8, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x4078e8, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x407910, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x407938, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x407968, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_403f30",
            "funcStartAddr": "0x403f30",
            "funcEndAddr": "0x403f41",
            "decompiledFuncCode": "int sub_403f30()\n{\n}\n"
        },
        {
            "funcName": "sub_401ec0",
            "funcStartAddr": "0x401ec0",
            "funcEndAddr": "0x402245",
            "decompiledFuncCode": "extern unsigned int g_406228;\nextern unsigned int g_4062d0;\nextern unsigned int g_4062f8;\nextern unsigned int g_406358;\nextern unsigned int g_406388;\nextern unsigned int g_4063d8;\nextern unsigned int g_4064c8;\nextern unsigned int g_4064f8;\nextern unsigned int g_406530;\nextern unsigned int g_4065f0;\nextern unsigned int g_4066d8;\nextern unsigned int g_406720;\nextern unsigned int g_406740;\nextern unsigned long long stdout;\n\nint sub_401ec0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v29[2];  // rax\n    char *v30;  // rdi\n    char *v31;  // rsi\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // cc_dep1\n    unsigned long long v34;  // cc_dep2\n    unsigned long v35;  // d\n    char *v39;  // rax\n    char *v40;  // rax\n    unsigned long long v41;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x4062d0, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4062f8, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x406358, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x406388, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4063d8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4064c8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4064f8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x406530, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4065f0, 0x5));\n        v0 = \"[\";\n        v29 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v29 = &v2;\n            v30 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v31 = \"kill\";\n            v32 = 5;\n            if ((v33 > v34) - 0 - (v33 < v34) == 0)\n            {\n                break;\n            }\n            while (v32 != 0)\n            {\n                v32 -= 1;\n                v33 = *(v31);\n                v34 = *(v30);\n                v30 = &v30[v35];\n                v31 = &v31[v35];\n                break;\n            }\n        }\n        if (v29[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406228, 0x5));\n            v40 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406228, 0x5));\n            v39 = setlocale(0x5, 0x0);\n            if (v39 != 0)\n            {\n                v41 = strncmp(v39, \"en_\", 0x3);\n            }\n            if (v39 == 0 || v41 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406720, 0x5));\n            }\n        }\n        if ((v29[1] == 0 || strncmp(v40, \"en_\", 0x3) != 0) && (v29[1] == 0 || v40 != 0) && (v29[1] != 0 || v39 != 0) && (v29[1] != 0 || v41 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4066d8, 0x5));\n        }\n        if (v29[1] != 0 || v39 != 0 && v41 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406720, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x406740, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403d90",
            "funcStartAddr": "0x403d90",
            "funcEndAddr": "0x403da2",
            "decompiledFuncCode": "int sub_403d90()\n{\n}\n"
        },
        {
            "funcName": "sub_402560",
            "funcStartAddr": "0x402560",
            "funcEndAddr": "0x40263f",
            "decompiledFuncCode": "extern int512_t g_406a1e;\nextern int512_t g_406a22;\n\nint sub_402560()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_405a70();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_406a1e : 4221481);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_406a22 : 4221477);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[4] == 56 && (v3[2] & 223) == 70 && (v3[1] & 223) == 84 && v1 == v2 && v3[5] == 0 && (v3[0] & 223) == 85 || (v3[1] & 223) == 66 && v4 == 71 && v1 == v2 && v3[3] == 56 && v3[2] == 49 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_404850",
            "funcStartAddr": "0x404850",
            "funcEndAddr": "0x404867",
            "decompiledFuncCode": "int sub_404850()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4046a0();\n}\n"
        },
        {
            "funcName": "sub_403f20",
            "funcStartAddr": "0x403f20",
            "funcEndAddr": "0x403f2d",
            "decompiledFuncCode": "int sub_403f20()\n{\n}\n"
        },
        {
            "funcName": "sub_4048a0",
            "funcStartAddr": "0x4048a0",
            "funcEndAddr": "0x4048c8",
            "decompiledFuncCode": "int sub_4048a0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4046a0();\n}\n"
        },
        {
            "funcName": "sub_4056e0",
            "funcStartAddr": "0x4056e0",
            "funcEndAddr": "0x4056f8",
            "decompiledFuncCode": "int sub_4056e0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_405030();\n}\n"
        },
        {
            "funcName": "sub_4056c0",
            "funcStartAddr": "0x4056c0",
            "funcEndAddr": "0x4056d6",
            "decompiledFuncCode": "int sub_4056c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_405600();\n}\n"
        },
        {
            "funcName": "sub_404770",
            "funcStartAddr": "0x404770",
            "funcEndAddr": "0x4047e8",
            "decompiledFuncCode": "int sub_404770() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4060a0",
            "funcStartAddr": "0x4060a0",
            "funcEndAddr": "0x4060f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4060a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_404800",
            "funcStartAddr": "0x404800",
            "funcEndAddr": "0x40484a",
            "decompiledFuncCode": "int sub_404800() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403b92",
            "funcStartAddr": "0x403b92",
            "funcEndAddr": "0x403bbb",
            "decompiledFuncCode": "int sub_403b92()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_403ad0",
            "funcStartAddr": "0x403ad0",
            "funcEndAddr": "0x403ae3",
            "decompiledFuncCode": "extern int512_t g_6095a0;\n\nint sub_403ad0()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6095a0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6095a0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4040a0",
            "funcStartAddr": "0x4040a0",
            "funcEndAddr": "0x4040b2",
            "decompiledFuncCode": "int sub_4040a0()\n{\n}\n"
        },
        {
            "funcName": "sub_4040c0",
            "funcStartAddr": "0x4040c0",
            "funcEndAddr": "0x4040d1",
            "decompiledFuncCode": "int sub_4040c0()\n{\n}\n"
        },
        {
            "funcName": "sub_404870",
            "funcStartAddr": "0x404870",
            "funcEndAddr": "0x40489e",
            "decompiledFuncCode": "int sub_404870()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4048f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403af0",
            "funcStartAddr": "0x403af0",
            "funcEndAddr": "0x403b1b",
            "decompiledFuncCode": "extern char g_6095a0;\n\nint sub_403af0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6095a0 : v2);\n    *((int *)(tmp_11? &g_6095a0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6095a0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_6095a0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4056a0",
            "funcStartAddr": "0x4056a0",
            "funcEndAddr": "0x4056b5",
            "decompiledFuncCode": "int sub_4056a0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_405030();\n}\n"
        },
        {
            "funcName": "sub_403f60",
            "funcStartAddr": "0x403f60",
            "funcEndAddr": "0x403fd3",
            "decompiledFuncCode": "int sub_403f60()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403890();\n}\n"
        },
        {
            "funcName": "sub_4059b0",
            "funcStartAddr": "0x4059b0",
            "funcEndAddr": "0x405a0c",
            "decompiledFuncCode": "int sub_4059b0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_405fe0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405700",
            "funcStartAddr": "0x405700",
            "funcEndAddr": "0x40576f",
            "decompiledFuncCode": "extern unsigned long long g_407c27;\n\nint sub_405700()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_407c27;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_405a10() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_403db0",
            "funcStartAddr": "0x403db0",
            "funcEndAddr": "0x403e1d",
            "decompiledFuncCode": "int sub_403db0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_403890();\n}\n"
        },
        {
            "funcName": "sub_4046c0",
            "funcStartAddr": "0x4046c0",
            "funcEndAddr": "0x4046e1",
            "decompiledFuncCode": "int sub_4046c0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4048f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404a10",
            "funcStartAddr": "0x404a10",
            "funcEndAddr": "0x40500e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_407b00;\nextern unsigned int g_407b20;\nextern unsigned int g_407b50;\nextern unsigned int g_407b70;\nextern unsigned int g_407ba0;\nextern unsigned long long stderr;\n\nint sub_404a10()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v1 != 0 || v4 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x407b00, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x407b20, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v1 == 0 || v21 == 0) && (v1 == 0 || v22 == v16) && (v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (*(v18) == 0 || v22 == v16) && (v4 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x407ba0, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x407b70, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x407b50, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_404050",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x404067",
            "decompiledFuncCode": "int sub_404050()\n{\n}\n"
        },
        {
            "funcName": "sub_4058e0",
            "funcStartAddr": "0x4058e0",
            "funcEndAddr": "0x40599d",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    unsigned short field_4;\n} struct_0;\n\nextern unsigned int g_407c38;\nextern unsigned long long g_609280;\nextern int512_t g_609284;\n\nint sub_4058e0()\n{\n    unsigned int *v1;  // rcx\n    unsigned long long v2;  // rdx\n    char *v3;  // rsi\n    struct_0 *v4;  // rbp\n    unsigned long long v5;  // rdi\n    unsigned long long v6;  // rbx\n    unsigned long long v8;  // r12\n    unsigned long long v10;  // rax\n\n    v1 = &g_609280;\n    v2 = 0;\n    v4 = v3;\n    v6 = v5;\n    while (true)\n    {\n        if (*(v1) != (unsigned int)v5)\n        {\n            v2 = (unsigned int)v2 + 1;\n            v1 = &v1[3];\n            if ((unsigned int)v2 == 35)\n            {\n                v8 = __libc_current_sigrtmin();\n                if ((unsigned int)v5 <= (unsigned int)v8 && (unsigned int)v5 >= (unsigned int)v8)\n                {\n                    if ((unsigned int)v8 < (unsigned int)v5)\n                    {\n                        v4->field_0 = 1095586898;\n                        v8 = __libc_current_sigrtmax();\n                        v4->field_4 = 88;\n                    }\n                    else\n                    {\n                        v4->field_0 = 1229804626;\n                        v4->field_4 = 78;\n                    }\n                    v10 = v6 - v8;\n                    if ((unsigned int)v6 != (unsigned int)v8)\n                    {\n                        __sprintf_chk((unsigned int)v4 + 5, 0x1, 0xffffffff, 0x407c38, v10);\n                        return 0;\n                    }\n                }\n                if ((unsigned int)v5 < (unsigned int)v8 || (unsigned int)v5 > (unsigned int)v8)\n                {\n                    v10 = -18446744069414584321;\n                }\n            }\n        }\n        else\n        {\n            strcpy(v3, 6328964 + 12 * v2);\n            v10 = 0;\n        }\n        if (*(v1) == (unsigned int)v5 || (unsigned int)v6 == (unsigned int)v8 && (unsigned int)v2 == 35 || (unsigned int)v2 == 35 && (unsigned int)v5 < (unsigned int)v8 || (unsigned int)v2 == 35 && (unsigned int)v5 > (unsigned int)v8)\n        {\n            return v10;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_403ca0",
            "funcStartAddr": "0x403ca0",
            "funcEndAddr": "0x403d35",
            "decompiledFuncCode": "extern struct_0 *g_609258;\nextern unsigned long long g_609260;\nextern unsigned long long g_609268;\nextern unsigned int g_609270;\nextern unsigned long long g_6094a0;\n\nint sub_403ca0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_609270;\n    if (g_609270 > 1)\n    {\n        v2 = &g_609258[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_609258[(unsigned long long)(g_609270 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_609258->field_8 != 6329504)\n    {\n        v1 = free(g_609258->field_8);\n        g_609260 = 0x100;\n        g_609268 = &g_6094a0;\n    }\n    if (g_609258 != 6328928)\n    {\n        v1 = free(g_609258);\n        g_609258 = &g_609260;\n    }\n    g_609270 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_404930",
            "funcStartAddr": "0x404930",
            "funcEndAddr": "0x404a05",
            "decompiledFuncCode": "int sub_404930()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_403f50",
            "funcStartAddr": "0x403f50",
            "funcEndAddr": "0x403f5a",
            "decompiledFuncCode": "int sub_403f50()\n{\n}\n"
        },
        {
            "funcName": "sub_403a30",
            "funcStartAddr": "0x403a30",
            "funcEndAddr": "0x403a64",
            "decompiledFuncCode": "int sub_403a30()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4048a0();\n}\n"
        },
        {
            "funcName": "sub_4024c0",
            "funcStartAddr": "0x4024c0",
            "funcEndAddr": "0x402559",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_609488;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4024c0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_609488 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403d40",
            "funcStartAddr": "0x403d40",
            "funcEndAddr": "0x403d51",
            "decompiledFuncCode": "int sub_403d40()\n{\n}\n"
        },
        {
            "funcName": "sub_404070",
            "funcStartAddr": "0x404070",
            "funcEndAddr": "0x404083",
            "decompiledFuncCode": "int sub_404070()\n{\n}\n"
        },
        {
            "funcName": "sub_405780",
            "funcStartAddr": "0x405780",
            "funcEndAddr": "0x4058d1",
            "decompiledFuncCode": "extern int512_t g_609280;\nextern char g_609284;\n\nint sub_405780()\n{\n    char v0;  // [bp-0x30]\n    char *v2;  // r13\n    void *v3;  // rdi\n    void *v5;  // rbp\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rbx\n    char *v11;  // rdi\n    unsigned long long v12;  // rcx\n    void *v13;  // rsi\n    unsigned long long v14;  // cc_dep1\n    unsigned long long v15;  // cc_dep2\n    unsigned long v16;  // d\n    unsigned long long v17;  // cc_dep1\n    unsigned long long v18;  // rax\n    char *v19;  // rdi\n    unsigned long long v20;  // rcx\n    unsigned long long v21;  // cc_dep1\n    unsigned long long v22;  // cc_dep2\n    unsigned long long v23;  // cc_dep1\n    unsigned long long v24;  // rbx\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // rax\n\n    v2 = \"HUP\";\n    v5 = v13;\n    v6 = 0;\n    if ((unsigned int)(char)*((char *)v3) - 48 <= 9)\n    {\n        v8 = strtol(v3, &v0, 0xa);\n    }\n    else\n    {\n        while (true)\n        {\n            v7 = strcmp(v2, v3);\n            if (v7 != 0)\n            {\n                v6 = (unsigned int)v6 + 1;\n                v2 = &v2[12];\n                v9 = __libc_current_sigrtmin();\n                v10 = __libc_current_sigrtmax();\n                if ((unsigned int)v9 > 0)\n                {\n                    v11 = \"RTMIN\";\n                    v12 = 5;\n                    v13 = v3;\n                    while (v12 != 0)\n                    {\n                        v12 -= 1;\n                        v14 = (char)*((char *)v13);\n                        v15 = *(v11);\n                        v11 = &v11[v16];\n                        v13 += v16;\n                        break;\n                    }\n                    v17 = (v14 > v15) - 0 - (v14 < v15);\n                    if ((char)v17 == 0)\n                    {\n                        v18 = strtol(v13 + 5, &v0, 0xa);\n                        if (*((char *)*((long long *)&v0)) != 0)\n                        {\n                            break;\n                        }\n                        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n                        {\n                            break;\n                        }\n                        v24 = v10 - v9;\n                        if (v18 > v24)\n                        {\n                            break;\n                        }\n                        v8 = v18 + v9;\n                    }\n                }\n                if ((unsigned int)v9 <= 0 || (char)v17 != 0)\n                {\n                    if ((unsigned int)v10 <= 0)\n                    {\n                        break;\n                    }\n                    v19 = \"RTMAX\";\n                    v20 = 5;\n                    while (v20 != 0)\n                    {\n                        v20 -= 1;\n                        v21 = (char)*((char *)v13);\n                        v22 = *(v19);\n                        v19 = &v19[v16];\n                        v13 += v16;\n                        break;\n                    }\n                    v23 = (v21 > v22) - 0 - (v21 < v22);\n                    if ((char)v23 != 0)\n                    {\n                        break;\n                    }\n                    v26 = v9 - v10;\n                    if (v25 < v26 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        break;\n                    }\n                    v25 = strtol(v13 + 5, &v0, 0xa);\n                    if (*((char *)*((long long *)&v0)) != 0)\n                    {\n                        break;\n                    }\n                    v8 = v25 + v10;\n                }\n            }\n            else\n            {\n                v8 = (unsigned int)*((int *)&((char *)&g_609280)[12 * v6]);\n            }\n        }\n        if (*((char *)*((long long *)&v0)) == 0 && (char)v17 == 0 && (unsigned int)v6 == 35 && (unsigned int)v9 > 0 && v7 != 0 || *((char *)*((long long *)&v0)) == 0 && (char)v17 == 0 && (unsigned int)v6 == 35 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && (unsigned int)v9 > 0 && v7 != 0 || (char)v17 == 0 && (unsigned int)v6 == 35 && (unsigned int)v9 > 0 && v7 != 0 || (char)v23 == 0 && *((char *)*((long long *)&v0)) == 0 && (unsigned int)v6 == 35 && (unsigned int)v10 > 0 && v7 != 0 && ((unsigned int)v9 <= 0 || (char)v17 != 0) && v25 >= v26 || (char)v23 == 0 && *((char *)*((long long *)&v0)) == 0 && (unsigned int)v6 == 35 && (unsigned int)v10 > 0 && v7 != 0 && ((unsigned int)v9 <= 0 || (char)v17 != 0) || (unsigned int)v6 == 35 && v7 != 0 && ((unsigned int)v9 <= 0 || (char)v17 != 0) || (char)v23 == 0 && (unsigned int)v6 == 35 && (unsigned int)v10 > 0 && v7 != 0 && ((unsigned int)v9 <= 0 || (char)v17 != 0) || (unsigned int)v6 == 35 && (unsigned int)v10 > 0 && v7 != 0 && ((unsigned int)v9 <= 0 || (char)v17 != 0))\n        {\n            *((int *)v5) = -1;\n            v27 = -18446744069414584321;\n        }\n        else if (*((char *)*((long long *)&v0)) == 0 && (char)v17 == 0 && (unsigned int)v6 == 35 && v18 <= v24 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && (unsigned int)v9 > 0 && v7 != 0 || (char)v23 == 0 && *((char *)*((long long *)&v0)) == 0 && (unsigned int)v6 == 35 && (unsigned int)v10 > 0 && v7 != 0 && ((unsigned int)v9 <= 0 || (char)v17 != 0) && v25 >= v26 && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v7 == 0)\n        {\n            *((unsigned int *)v5) = v8;\n            v27 = v8 >> 31;\n        }\n    }\n    if ((unsigned int)(char)*((char *)v3) - 48 > 9 || *((char *)*((long long *)&v0)) == 0 && v8 <= 64)\n    {\n        *((unsigned int *)v5) = v8;\n        v27 = v8 >> 31;\n    }\n    if (*((char *)*((long long *)&v0)) != 0 || (unsigned int)(char)*((char *)v3) - 48 > 9 || v8 > 64)\n    {\n        *((int *)v5) = -1;\n        v27 = -18446744069414584321;\n    }\n    return v27;\n}\n"
        },
        {
            "funcName": "sub_405030",
            "funcStartAddr": "0x405030",
            "funcEndAddr": "0x405597",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_407bc8;\nextern unsigned int g_407c0c;\n\nint sub_405030()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[2];  // rcx\n    unsigned long v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char *v34;  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long|unsigned long long v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char *v58;  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_404930();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = *(v34);\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_404930();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19[0] == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19[0] == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19[0] == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (((char)(v18 - 43) & 253) == 0 || v19[0] == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_404a10();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x407bc8, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x407c0c, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x407bc8, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_404a10();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_403a90",
            "funcStartAddr": "0x403a90",
            "funcEndAddr": "0x403ac3",
            "decompiledFuncCode": "extern int512_t g_6095a0;\n\nint sub_403a90()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6095a0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6095a0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_406170",
            "funcStartAddr": "0x406170",
            "funcEndAddr": "0x406188",
            "decompiledFuncCode": "extern int512_t g_609208;\n\nint sub_406170()\n{\n}\n"
        },
        {
            "funcName": "sub_404560",
            "funcStartAddr": "0x404560",
            "funcEndAddr": "0x404618",
            "decompiledFuncCode": "int sub_404560()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_404100();\n    }\n}\n"
        },
        {
            "funcName": "sub_402400",
            "funcStartAddr": "0x402400",
            "funcEndAddr": "0x402408",
            "decompiledFuncCode": "extern unsigned long long g_609480;\n\nint sub_402400()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_609480 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4046f0",
            "funcStartAddr": "0x4046f0",
            "funcEndAddr": "0x4046f2",
            "decompiledFuncCode": "int sub_4046f0()\n{\n}\n"
        },
        {
            "funcName": "sub_406188",
            "funcStartAddr": "0x406188",
            "funcEndAddr": "0x4061a8",
            "decompiledFuncCode": "extern unsigned long long g_608e30;\n\nint sub_406188()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_608e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401840",
            "funcEndAddr": "0x401dba",
            "decompiledFuncCode": "extern unsigned int g_406243;\nextern unsigned int g_406253;\nextern unsigned int g_40629d;\nextern unsigned int g_406778;\nextern unsigned int g_4067e8;\nextern unsigned int g_407c27;\nextern unsigned int g_60927c;\nextern unsigned long long g_609620;\n\nint main()\n{\n    void tmp_12;  // tmp #12\n    void tmp_64;  // tmp #64\n    unsigned long v0;  // [bp-0x98]\n    unsigned long|void * v1;  // [bp-0x90]\n    unsigned int v2;  // [bp-0x7c]\n    char v3;  // [bp-0x58]\n    char v4;  // [bp-0x54]\n    unsigned long long v6;  // r14\n    unsigned long|unsigned long long v7;  // r13\n    unsigned int v8;  // r12d\n    unsigned long long v9;  // rsi\n    unsigned long long v10;  // rbx\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rcx\n    unsigned long long *v16;  // rsi\n    unsigned long|void * v17;  // rdi\n    unsigned long long v18;  // rcx\n    char v19;  // cc_dep2\n    unsigned long v20;  // d\n    unsigned long|unsigned long long|unsigned int v21;  // rbp\n    unsigned long long v22;  // rbx\n    unsigned long v27;  // rsi\n    unsigned long v28;  // rbp\n    unsigned long long v29;  // r12\n    unsigned int *v30;  // r15\n    unsigned long long v31;  // r13\n    unsigned long|unsigned long long|unsigned int v32;  // r13d\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rdx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r12\n    unsigned long long *v38;  // r14\n    unsigned long long v39;  // rax\n    void *v43;  // rdx\n    unsigned long|unsigned long long|unsigned int v45;  // ebp\n    unsigned long long v48;  // r14\n    unsigned long long v49;  // rax\n    unsigned long|unsigned int v51;  // ebp\n    unsigned long long v53;  // rax\n    unsigned long long v55;  // rax\n\n    v6 = 0;\n    v7 = 0;\n    v8 = v17;\n    v21 = -18446744069414584321;\n    v10 = v9;\n    sub_4024c0();\n    setlocale(0x6, 0x407c27);\n    bindtextdomain(0x406243, 0x406778);\n    textdomain(0x406243);\n    sub_406170();\n    while (true)\n    {\n        if (v2 != -1 && v2 != 76)\n        {\n            if (v2 <= 57 && v2 <= 76)\n            {\n                if (v2 < 48)\n                {\n                    if (v2 == -131)\n                    {\n                        sub_404560();\n                        exit(0x0); /* do not return */\n                    }\n                    if (v2 == -130)\n                    {\n                        sub_401ec0(); /* do not return */\n                    }\n                }\n                else\n                {\n                    v14 = (int)g_60927c;\n                    if (g_60927c != 2)\n                    {\n                        g_60927c = g_60927c - 1;\n                    }\n                }\n            }\n            if ((v2 <= 90 || v2 <= 76) && (v2 <= 76 || v2 <= 108) && (v2 <= 76 || v2 != 108) && (v2 > 57 || v2 > 76) && (v2 > 76 || v2 >= 65))\n            {\n                v14 = (int)g_60927c;\n            }\n        }\n        if (g_60927c == 2 && v2 <= 57 && v2 <= 76 && v2 >= 48 && v2 != -1 && v2 != 76 || v2 != -1 && v2 != 76 && (v2 <= 90 || v2 <= 76) && (v2 <= 76 || v2 <= 108) && (v2 <= 76 || v2 != 108) && (v2 > 57 || v2 > 76) && (v2 > 76 || v2 >= 65))\n        {\n            v15 = g_609620;\n            v16 = v10 + v14 * 8 - 8;\n            v43 = *((long long *)(v10 + v14 * 8 - 8));\n            if (g_609620 == 0)\n            {\n                v17 = v43;\n                v18 = -1;\n                while (v18 != 0)\n                {\n                    v18 -= 1;\n                    v19 = *((char *)v17);\n                    v17 += v20;\n                    break;\n                }\n                v15 = v43 + !(rcx<8>) - 1;\n                g_609620 = v15;\n                v43 = *(v16);\n            }\n            if (v15 == v43 + 2)\n            {\n                g_609620 = v43 + 1;\n            }\n            else\n            {\n                v2 = sub_405680();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x406253, 0x5));\n                sub_401ec0(); /* do not return */\n            }\n        }\n        if (v2 == 76 || v2 == 116 && v2 != 115 && v2 != 108 && v2 != -1 && v2 > 76 && v2 > 108)\n        {\n            v6 = 1;\n        }\n        if (v2 == -1 || v2 <= 57 && v2 <= 76 && v2 >= 48 && g_60927c != 2 && v2 != 76)\n        {\n            if ((unsigned int)v21 != -1)\n            {\n                v27 = \"cannot combine signal with -l or -t\";\n            }\n            else if (v7 != 0)\n            {\n                v28 = 0;\n                if (v8 > g_60927c)\n                {\n                    v28 = v10 + (int)g_60927c * 8;\n                }\n                if (v6 != 0)\n                {\n                    v32 = 1;\n                    do\n                    {\n                        if (sub_4058e0() == 0)\n                        {\n                            v43 = &v3;\n                            do\n                            {\n                                tmp_12 = (unsigned int)*((int *)&v3);\n                                v43 = &v4;\n                            }\n                            while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                            tmp_64 = v43;\n                        }\n                        v32 = (unsigned long long)v32 + 1;\n                    }\n                    while ((unsigned int)v32 != 65);\n                    if (v28 == 0)\n                    {\n                        v51 = 1;\n                        do\n                        {\n                            if (sub_4058e0() == 0)\n                            {\n                                v53 = strsignal(v51);\n                                if (v53 == 0)\n                                {\n                                    v53 = \"?\";\n                                }\n                                v1 = v43;\n                                v0 = v53;\n                                __printf_chk(0x1, \"%*d %-*s %s\\n\", 2);\n                            }\n                            v51 = (unsigned long long)v51 + 1;\n                        }\n                        while ((unsigned int)v51 != 65);\n                    }\n                    else\n                    {\n                        for (v31 = 0; *((long long *)v28) != 0; v28 += 8)\n                        {\n                            v48 = (unsigned int)sub_402250();\n                            if ((unsigned int)v48 < 0)\n                            {\n                                v31 = 1;\n                            }\n                            else\n                            {\n                                v49 = strsignal(v48);\n                                if (v49 == 0)\n                                {\n                                    v49 = \"?\";\n                                }\n                                v1 = v17;\n                                v0 = v49;\n                                __printf_chk(0x1, \"%*d %-*s %s\\n\", 2);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    if (v28 == 0)\n                    {\n                        v45 = 1;\n                        do\n                        {\n                            if (sub_4058e0() == 0)\n                            {\n                                puts(&v3);\n                            }\n                            v45 = (unsigned long long)v45 + 1;\n                        }\n                        while ((unsigned int)v45 != 65);\n                    }\n                    else\n                    {\n                        for (v31 = 0; *((long long *)v28) != 0; v28 += 8)\n                        {\n                            v39 = sub_402250();\n                            if (v39 < 0)\n                            {\n                                v31 = 1;\n                            }\n                            else if ((unsigned int)(char)*((char *)*((long long *)v28)) - 48 <= 9)\n                            {\n                                puts(&v3);\n                            }\n                            else\n                            {\n                                __printf_chk(0x1, \"%d\\n\", v39);\n                            }\n                        }\n                    }\n                }\n                if (v28 == 0)\n                {\n                    v31 = 0;\n                }\n            }\n            else\n            {\n                v21 = 15;\n            }\n            if (v7 == 0)\n            {\n                v27 = \"no process ID specified\";\n                if (g_60927c < v8)\n                {\n                    v38 = v10 + (int)g_60927c * 8;\n                    v31 = 0;\n                    v29 = *(v38);\n                    v30 = __errno_location();\n                    do\n                    {\n                        *(v30) = 0;\n                        v33 = __strtol_internal(v29, (unsigned int)&v3, 0xa, 0x0);\n                        if (*(v30) != 34)\n                        {\n                            v34 = v33;\n                            if (*((char *)*((long long *)&v3)) == 0 && v29 != *((long long *)&v3))\n                            {\n                                v35 = kill(*((long long *)&v3), v51);\n                                if (v35 != 0)\n                                {\n                                    v31 = 1;\n                                    sub_4040e0();\n                                    error(0x0, *(v30), \"%s\");\n                                }\n                            }\n                        }\n                        if (v29 == *((long long *)&v3) || *(v30) == 34 || *((char *)*((long long *)&v3)) != 0)\n                        {\n                            v31 = 1;\n                            v36 = (unsigned int)sub_4040e0();\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40629d, 0x5));\n                        }\n                        v38 = &v38[1];\n                        v29 = *(v38);\n                    }\n                    while (*(v38) != 0);\n                }\n            }\n        }\n        if (v2 == 76 || v2 == 108 && v2 != -1 && v2 > 76 || v2 == 116 && v2 != 115 && v2 != -1 && v2 > 76 && v2 > 108)\n        {\n            if (v7 == 0)\n            {\n                v7 = 1;\n            }\n            else\n            {\n                v27 = \"multiple -l or -t options specified\";\n            }\n        }\n        if (v2 != 108 && v2 != -1 && v2 != 76 && v2 > 76 && v2 > 108 && (v2 == 110 || v2 == 115) && (v2 == 115 || v2 != 116) || v15 == v43 + 2 && (g_60927c == 2 && v2 <= 57 && v2 <= 76 && v2 >= 48 && v2 != -1 && v2 != 76 || v2 != -1 && v2 != 76 && (v2 <= 90 || v2 <= 76) && (v2 <= 76 || v2 <= 108) && (v2 <= 76 || v2 != 108) && (v2 > 57 || v2 > 76) && (v2 > 76 || v2 >= 65)))\n        {\n            if ((unsigned int)v21 == -1)\n            {\n                v21 = (unsigned int)sub_402250();\n            }\n            else\n            {\n                v22 = (unsigned int)sub_4040e0();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4067e8, 0x5));\n                sub_401ec0(); /* do not return */\n            }\n        }\n        if (v7 == 0 && g_60927c >= v8 && (v2 <= 57 || v2 == -1) && (v2 == -1 || v2 <= 76) && (v2 == -1 || v2 >= 48) && (v2 == -1 || g_60927c != 2) && (v2 == -1 || v2 != 76) || (unsigned int)v21 != -1 && v7 != 0 && (v2 <= 57 || v2 == -1) && (v2 == -1 || v2 <= 76) && (v2 == -1 || v2 >= 48) && (v2 == -1 || g_60927c != 2) && (v2 == -1 || v2 != 76) || v7 != 0 && (v2 == 76 || v2 != -1) && (v2 == 76 || v2 > 76) && (v2 == 108 || v2 == 76 || v2 == 116) && (v2 == 108 || v2 == 76 || v2 != 115) && (v2 == 108 || v2 == 76 || v2 > 108))\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, v27, 0x5));\n        }\n        if (...)\n        {\n            sub_401ec0(); /* do not return */\n        }\n    }\n    v55 = v31;\n    return v55;\n}\n"
        },
        {
            "funcName": "sub_405a10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405a66",
            "decompiledFuncCode": "int sub_405a10()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_402410",
            "funcStartAddr": "0x402410",
            "funcEndAddr": "0x402418",
            "decompiledFuncCode": "extern char g_609478;\n\nint sub_402410()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_609478 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403d60",
            "funcStartAddr": "0x403d60",
            "funcEndAddr": "0x403d6a",
            "decompiledFuncCode": "int sub_403d60()\n{\n}\n"
        },
        {
            "funcName": "sub_406060",
            "funcStartAddr": "0x406060",
            "funcEndAddr": "0x40609b",
            "decompiledFuncCode": "int sub_406060()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4060a0();\n    }\n}\n"
        },
        {
            "funcName": "sub_405660",
            "funcStartAddr": "0x405660",
            "funcEndAddr": "0x405678",
            "decompiledFuncCode": "int sub_405660()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_405600();\n}\n"
        },
        {
            "funcName": "sub_401eb8",
            "funcStartAddr": "0x401eb8",
            "funcEndAddr": "0x401ef4",
            "decompiledFuncCode": "int sub_401eb8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404620",
            "funcStartAddr": "0x404620",
            "funcEndAddr": "0x404694",
            "decompiledFuncCode": "extern unsigned int g_4077b2;\nextern unsigned int g_4077dd;\nextern unsigned int g_407a10;\n\nint sub_404620()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4077b2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4077dd, 0x5));\n    dcgettext(0x0, 0x407a10, 0x5);\n}\n"
        },
        {
            "funcName": "sub_401e61",
            "funcStartAddr": "0x401e61",
            "funcEndAddr": "0x401eb8",
            "decompiledFuncCode": "extern char g_609468;\nextern unsigned long long g_609470;\n\nint sub_401e61()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_609468 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_609470 >= 0)\n            {\n                break;\n            }\n            g_609470 = g_609470 + 1;\n            *((long long *)(6327872 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_609468 = 1;\n        return sub_401e0b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404740",
            "funcStartAddr": "0x404740",
            "funcEndAddr": "0x404761",
            "decompiledFuncCode": "int sub_404740()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4048f0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_4048f0",
            "funcStartAddr": "0x4048f0",
            "funcEndAddr": "0x404921",
            "decompiledFuncCode": "extern unsigned int g_407aef;\nextern unsigned int g_609218;\n\nint sub_4048f0()\n{\n    dcgettext(0x0, 0x407aef, 0x5);\n    error(g_609218, 0x0, \"%s\");\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403bbb",
            "funcStartAddr": "0x403bbb",
            "funcEndAddr": "0x403c81",
            "decompiledFuncCode": "int sub_403bbb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_402660();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4046a0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_402660();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_404040",
            "funcStartAddr": "0x404040",
            "funcEndAddr": "0x404049",
            "decompiledFuncCode": "int sub_404040()\n{\n}\n"
        },
        {
            "funcName": "sub_4044e0",
            "funcStartAddr": "0x4044e0",
            "funcEndAddr": "0x404500",
            "decompiledFuncCode": "int sub_4044e0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_405a70",
            "funcStartAddr": "0x405a70",
            "funcEndAddr": "0x405fc4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_407c27;\nextern char g_609618[2];\n\nint sub_405a70()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_609618;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_407c27 : (unsigned long long)nl_langinfo(0xe));\n    if (g_609618 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_407c27;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v11 != 0) && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1)\n                        {\n                            if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                            {\n                                ungetc(v26, v10);\n                                v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v28 > 1)\n                                {\n                                    v29 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v29 = &v4;\n                                        v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v32 = &v5;\n                                    v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v32 = &v6;\n                                        v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v33;\n                                    tmp_56 = (unsigned int)v34 % 0x10000;\n                                    v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                    v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v36 + 2;\n                                        v37 = malloc(v36 + 3);\n                                        v39 = v1;\n                                        v40 = v2;\n                                    }\n                                    else\n                                    {\n                                        v38 = v36 + v0 + 3;\n                                        v0 = v36 + v0 + 2;\n                                        v37 = realloc(NULL, v38);\n                                        v40 = v2;\n                                        v39 = v1;\n                                    }\n                                    if (v37 != 0)\n                                    {\n                                        tmp_1 = -2 - v39;\n                                        v41 = v39 + 1;\n                                        v42 = v0 - v40;\n                                        v43 = tmp_1 + v0 - v40 + v37;\n                                        if ((unsigned int)v41 >= 8)\n                                        {\n                                            *((long long *)v43) = *((long long *)&v3);\n                                            *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                            v44 = v43 + 8 & -8;\n                                            v43 -= v43 + 8 & -8;\n                                            v45 = &(&v3)[-1 * v43];\n                                            v46 = (unsigned int)(v41 + v43) & -8;\n                                            if (v46 >= 8)\n                                            {\n                                                v43 = 0;\n                                                do\n                                                {\n                                                    v48 = v43;\n                                                    v43 = (unsigned int)v43 + 8;\n                                                    *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                                }\n                                                while ((unsigned int)v43 < (v46 & -8));\n                                            }\n                                        }\n                                        else if ((v41 & 4) != 0)\n                                        {\n                                            *((int *)v43) = *((int *)&v3);\n                                            *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                        }\n                                        else if ((unsigned int)v41 != 0)\n                                        {\n                                            *((char *)v43) = v3;\n                                            if ((v41 & 2) != 0)\n                                            {\n                                                *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                            }\n                                        }\n                                        v62 = v40 + 1;\n                                        v49 = v37 + v42 - 1;\n                                        if ((unsigned int)v43 >= 8)\n                                        {\n                                            *((long long *)v49) = *((long long *)&v5);\n                                            v43 = v62;\n                                            *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                            v52 = v49 - (v49 + 8 & -8);\n                                            v54 = (unsigned int)(v43 + v52) & -8;\n                                            if (v54 >= 8)\n                                            {\n                                                v57 = 0;\n                                                do\n                                                {\n                                                    v58 = v57;\n                                                    v57 = (unsigned int)v57 + 8;\n                                                    *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                                }\n                                                while ((unsigned int)v57 < (v54 & -8));\n                                            }\n                                        }\n                                        else if (((char)v43 & 4) != 0)\n                                        {\n                                            *((int *)v49) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v43 != 0)\n                                        {\n                                            *((char *)v49) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v37;\n                                        v59 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_407c27;\n                                        v10 = (tmp_10 == 0? &g_407c27 : tmp_10);\n                                        free(NULL);\n                                        sub_405fe0();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v26 == 35)\n                            {\n                                do\n                                {\n                                    v61 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v61[1];\n                                        v61 = (unsigned int)*(v61);\n                                        v62 = 1;\n                                    }\n                                    else\n                                    {\n                                        v61 = __uflow(v10);\n                                        v62 = (char)((unsigned int)v61 != -1);\n                                    }\n                                }\n                                while (v62 != 0 && v61 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v37 != 0 && v28 > 1 && (unsigned int)v26 != 32 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v26 != 35)\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v37 != 0 && v28 > 1 && (unsigned int)v26 != 32 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v26 != 35) && (unsigned int)v60 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_407c27 : tmp_10);\n                            sub_405fe0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1)\n                    {\n                        v9 = &g_407c27;\n                    }\n                    else if ((v28 > 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 == 0 || v28 > 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 != 0) && v37 == 0 || ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1 || (unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v61 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_407c27;\n            free(v17);\n        }\n        *((char *[2])&g_609618[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_407c27 : tmp_10), v9);\n            if (v67 != 0 && (v66 != 42 || v9[1] != 0))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v66 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_4048d0",
            "funcStartAddr": "0x4048d0",
            "funcEndAddr": "0x4048e3",
            "decompiledFuncCode": "int sub_4048d0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_404700",
            "funcStartAddr": "0x404700",
            "funcEndAddr": "0x404730",
            "decompiledFuncCode": "int sub_404700()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4048f0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_403a80",
            "funcStartAddr": "0x403a80",
            "funcEndAddr": "0x403a8f",
            "decompiledFuncCode": "extern int512_t g_6095a0;\n\nint sub_403a80()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6095a0 : v1)) = v2;\n    return &g_6095a0;\n}\n"
        },
        {
            "funcName": "sub_4040e0",
            "funcStartAddr": "0x4040e0",
            "funcEndAddr": "0x4040f6",
            "decompiledFuncCode": "int sub_4040e0()\n{\n}\n"
        },
        {
            "funcName": "sub_403890",
            "funcStartAddr": "0x403890",
            "funcEndAddr": "0x403a30",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_609258;\nextern uint128_t g_609260;\nextern unsigned int g_609270;\nextern int512_t g_6094a0;\n\nint sub_403890()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_609258;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_609270 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_609258 != 6328928)\n            {\n                v16 = sub_404700();\n                g_609258 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_404700();\n                v17 = v15;\n                g_609258 = v15;\n                *(v15) = g_609260;\n            }\n            memset(&v17[(long long)(int)g_609270], 0x0, (int)((unsigned int)v13 + 1 - g_609270) * 16);\n            g_609270 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4048f0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_609270 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_402660();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6329504)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4046a0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_402660();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_4046a0",
            "funcStartAddr": "0x4046a0",
            "funcEndAddr": "0x4046ba",
            "decompiledFuncCode": "int sub_4046a0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4048f0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_402420",
            "funcStartAddr": "0x402420",
            "funcEndAddr": "0x4024be",
            "decompiledFuncCode": "extern unsigned int g_4069c4;\nextern unsigned int g_609218;\nextern char g_609478;\nextern unsigned long long g_609480;\n\nint sub_402420()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4059b0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_609478 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x4069c4, 0x5);\n            if (g_609480 != 0)\n            {\n                sub_403f30();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_609478 != 0)\n    {\n        v3 = sub_4059b0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_609478 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_609218);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_405600",
            "funcStartAddr": "0x405600",
            "funcEndAddr": "0x405656",
            "decompiledFuncCode": "extern unsigned int g_609274;\nextern unsigned int g_609278;\nextern unsigned int g_60927c;\nextern unsigned int g_6095e0;\nextern unsigned int g_6095e4;\nextern unsigned int g_6095e8;\nextern unsigned long long g_6095f0;\nextern unsigned long long g_609620;\n\nint sub_405600()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_6095e0 = g_60927c;\n    g_6095e4 = g_609278;\n    v1 = (unsigned int)v2;\n    v0 = &g_6095e0;\n    g_60927c = g_6095e0;\n    g_609620 = g_6095f0;\n    g_609274 = g_6095e8;\n    return sub_405030();\n}\n"
        },
        {
            "funcName": "sub_402250",
            "funcStartAddr": "0x402250",
            "funcEndAddr": "0x4023e2",
            "decompiledFuncCode": "extern unsigned int g_4069ac;\n\nint sub_402250()\n{\n    unsigned int v0;  // [bp-0x34]\n    char v1;  // [bp-0x30]\n    char *v3;  // rdi\n    char v4[3];  // rax\n    char v5[3];  // r13\n    unsigned int *v6;  // rbx\n    unsigned int *v7;  // rbx\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rbx\n    char v11[3];  // rbp\n    unsigned long|unsigned int v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned int v15;  // edx\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rbx\n\n    if ((unsigned int)*(v3) - 48 <= 9)\n    {\n        *(v6) = 0;\n        v6 = __errno_location();\n        if (*((long long *)&v1) != v3 && *((char *)*((long long *)&v1)) == 0)\n        {\n            v14 = *(v7);\n            if (*(v7) == 0)\n            {\n                v15 = strtol(v3, &v1, 0xa);\n                if (v15 != -1)\n                {\n                    v0 = (254 < v15? 255 : 127) & (unsigned int)rdx<8>;\n                }\n                else\n                {\n                    v0 = v15;\n                }\n            }\n        }\n        if (*((long long *)&v1) == v3 || *(v7) != 0 || *((char *)*((long long *)&v1)) != 0)\n        {\n            v0 = -1;\n        }\n    }\n    else\n    {\n        v4 = sub_4048d0();\n        v12 = v4[0];\n        v5 = v4;\n        v11 = v4;\n        if (v4[0] != 0)\n        {\n            do\n            {\n                v9 = strchr(\"abcdefghijklmnopqrstuvwxyz\", v12);\n                if (v9 != 0)\n                {\n                    v10 = (unsigned long long)v12 - 32;\n                    *((unsigned long long *)&v11[0]) = v10;\n                }\n                v11 = &v11[1];\n                v12 = v11[0];\n            }\n            while ((char)v12 != 0);\n        }\n        v13 = sub_405780();\n        if (v13 != 0)\n        {\n            if (v5[0] == 83 && v5[1] == 73 && v5[2] == 71)\n            {\n                v16 = sub_405780();\n            }\n            if (v5[0] != 83 || v5[2] != 71 || v16 != 0 || v5[1] != 73)\n            {\n                v0 = -1;\n                free(v5);\n            }\n        }\n        if ((v5[0] == 83 || v13 == 0) && (v5[2] == 71 || v13 == 0) && (v16 == 0 || v13 == 0) && (v5[1] == 73 || v13 == 0))\n        {\n            free(v5);\n        }\n    }\n    if ((unsigned int)*(v3) - 48 <= 9 && *(v7) == 0 && *((char *)*((long long *)&v1)) == 0 && *((long long *)&v1) != v3 && v15 != -1 || (unsigned int)*(v3) - 48 > 9 && (v5[0] == 83 || v13 == 0) && (v5[2] == 71 || v13 == 0) && (v16 == 0 || v13 == 0) && (v5[1] == 73 || v13 == 0) && v0 >= 0)\n    {\n        v17 = sub_4058e0();\n        if (v17 == 0)\n        {\n            v18 = v0;\n        }\n    }\n    if ((unsigned int)*(v3) - 48 <= 9 && *(v7) == 0 && *((char *)*((long long *)&v1)) == 0 && v15 == -1 && *((long long *)&v1) != v3 || (unsigned int)*(v3) - 48 <= 9 && (*((long long *)&v1) == v3 || *(v7) != 0 || *((char *)*((long long *)&v1)) != 0) || (unsigned int)*(v3) - 48 > 9 && v13 != 0 && (v5[0] != 83 || v5[2] != 71 || v16 != 0 || v5[1] != 73) || ((unsigned int)*(v3) - 48 <= 9 && *(v7) == 0 && *((char *)*((long long *)&v1)) == 0 && *((long long *)&v1) != v3 && v15 != -1 || (unsigned int)*(v3) - 48 > 9 && (v5[0] == 83 || v13 == 0) && (v5[2] == 71 || v13 == 0) && (v16 == 0 || v13 == 0) && (v5[1] == 73 || v13 == 0) && v0 >= 0) && v17 != 0 || (unsigned int)*(v3) - 48 > 9 && (v5[0] == 83 || v13 == 0) && (v5[2] == 71 || v13 == 0) && (v16 == 0 || v13 == 0) && (v5[1] == 73 || v13 == 0) && v0 < 0)\n    {\n        v19 = (unsigned int)sub_4040e0();\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4069ac, 0x5));\n        v18 = -18446744069414584321;\n    }\n    return v18;\n}\n"
        },
        {
            "funcName": "sub_403c90",
            "funcStartAddr": "0x403c90",
            "funcEndAddr": "0x403c9a",
            "decompiledFuncCode": "int sub_403c90()\n{\n}\n"
        },
        {
            "funcName": "sub_403e90",
            "funcStartAddr": "0x403e90",
            "funcEndAddr": "0x403e9c",
            "decompiledFuncCode": "int sub_403e90()\n{\n}\n"
        },
        {
            "funcName": "sub_402660",
            "funcStartAddr": "0x402660",
            "funcEndAddr": "0x403798",
            "decompiledFuncCode": "int sub_402660()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    unsigned long long|char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long long|unsigned int v77;  // rsi\n    unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long|char v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_402560();\n            v27 = (unsigned int)sub_402560();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                        v78 = v78;\n                                        v78 = 0;\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v34 > v38 || v78 != 0)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                            v48 = v5;\n                            v89 = 0;\n                            v5 = v42;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                            if (v17 == 0)\n                            {\n                                v89 = (unsigned int)v39 == 2;\n                                v80 += 1;\n                                v46 = (v78 ^ 1) & (unsigned int)v33;\n                                if (v46 != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v79 > v76 + 1)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 39;\n                                    }\n                                    v76 += 2;\n                                    v33 = 0;\n                                }\n                                v73 = (unsigned int)v33 ^ 1;\n                                v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                                if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                                {\n                                    if (v79 > v76)\n                                    {\n                                        *((char *)(v29 + v76)) = 39;\n                                    }\n                                    if (v76 + 1 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 1)) = 36;\n                                    }\n                                    v75 = v76 + 2;\n                                    if (v76 + 2 < v79)\n                                    {\n                                        *((char *)(v29 + v76 + 2)) = 39;\n                                    }\n                                    v76 += 3;\n                                    v33 = rax<8>;\n                                }\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 92;\n                                }\n                                v76 += 1;\n                                v80 += 1;\n                            }\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                            v50 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                        }\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_402660();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_402660();\n                        }\n                    }\n                }\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v86 != 0 && v13 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_405700();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && v46 != -1 && (unsigned int)v46 != 0)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n                v78 = 0;\n                v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                v89 = (unsigned int)v39 == 2;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v89 == 0) && (v89 == 0 || v63 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v17 == 0 || v46 == 0) && (v46 == 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0) && (v17 == 0 || v89 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v78 == 0 && v6 == 0 && v18 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && (char)v85 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v18 != 0 && v6 != 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && v76 == 0 && (v81 == 2 & v17) != 0)\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_404090",
            "funcStartAddr": "0x404090",
            "funcEndAddr": "0x40409a",
            "decompiledFuncCode": "int sub_404090()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_kill.elf"
}