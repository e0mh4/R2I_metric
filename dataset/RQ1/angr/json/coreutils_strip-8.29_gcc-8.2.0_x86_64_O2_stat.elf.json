{
    "funcInfo": [
        {
            "funcName": "sub_405824",
            "funcStartAddr": "0x405824",
            "funcEndAddr": "0x405996",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char field_4;\n    char field_5;\n    char field_6;\n    char field_7;\n    char field_8;\n    char field_9;\n    unsigned short field_a;\n} struct_0;\n\nint sub_405824()\n{\n    unsigned long long v1;  // rax\n    unsigned int v2;  // edi\n    struct_0 *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n\n    v1 = 45;\n    if (((unsigned short)v2 & 0xf000) != 0x8000)\n    {\n        v1 = 100;\n        if (((unsigned short)v2 & 0xf000) != 0x4000)\n        {\n            v1 = 98;\n            if (((unsigned short)v2 & 0xf000) != 0x6000)\n            {\n                v1 = 99;\n                if (((unsigned short)v2 & 0xf000) != 0x2000)\n                {\n                    v1 = 108;\n                    if (((unsigned short)v2 & 0xf000) != 0xa000)\n                    {\n                        v1 = 112;\n                        if (((unsigned short)v2 & 0xf000) != 0x1000)\n                        {\n                            v1 = (unsigned int)((v2 & 0xf000) != 0xc000? 63 : 115);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    *((unsigned long long *)&v3->field_0) = v1;\n    v3->field_1 = (0 - (unsigned int)(char)((v2 & 0x100) < 1) & -69) + 114;\n    v3->field_2 = (0 - (unsigned int)(char)((v2 & 128) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x800) != 0)\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -32) + 115;\n    }\n    else\n    {\n        v4 = (0 - (unsigned int)(char)((v2 & 64) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_3) = v4;\n    v3->field_4 = (0 - (unsigned int)(char)((v2 & 32) < 1) & -69) + 114;\n    v3->field_5 = (0 - (unsigned int)(char)((v2 & 16) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x400) != 0)\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -32) + 115;\n    }\n    else\n    {\n        v5 = (0 - (unsigned int)(char)((v2 & 8) < 1) & -75) + 120;\n    }\n    *((unsigned long long *)&v3->field_6) = v5;\n    v3->field_7 = (0 - (unsigned int)(char)((v2 & 4) < 1) & -69) + 114;\n    v3->field_8 = (0 - (unsigned int)(char)((v2 & 2) < 1) & -74) + 119;\n    if (((unsigned short)v2 & 0x200) != 0)\n    {\n        v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -32) + 116;\n        v3->field_a = 32;\n        return 32;\n    }\n    v3->field_9 = (0 - (unsigned int)(char)((v2 & 1) < 1) & -75) + 120;\n    v3->field_a = 32;\n    return 32;\n}\n"
        },
        {
            "funcName": "sub_403bcd",
            "funcStartAddr": "0x403bcd",
            "funcEndAddr": "0x403bdd",
            "decompiledFuncCode": "int sub_403bcd()\n{\n}\n"
        },
        {
            "funcName": "sub_408860",
            "funcStartAddr": "0x408860",
            "funcEndAddr": "0x408894",
            "decompiledFuncCode": "int sub_408860()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_409760();\n}\n"
        },
        {
            "funcName": "sub_4028cb",
            "funcStartAddr": "0x4028cb",
            "funcEndAddr": "0x4028ea",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4028cb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40ced0",
            "funcStartAddr": "0x40ced0",
            "funcEndAddr": "0x40cf48",
            "decompiledFuncCode": "int sub_40ced0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_40cf50() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_410358",
            "funcStartAddr": "0x410358",
            "funcEndAddr": "0x410378",
            "decompiledFuncCode": "extern unsigned long long g_616e30;\n\nint sub_410358()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_616e30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_410340",
            "funcStartAddr": "0x410340",
            "funcEndAddr": "0x410358",
            "decompiledFuncCode": "extern int512_t g_617308;\n\nint sub_410340()\n{\n}\n"
        },
        {
            "funcName": "sub_402978",
            "funcStartAddr": "0x402978",
            "funcEndAddr": "0x4029b4",
            "decompiledFuncCode": "int sub_402978() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4059c0",
            "funcStartAddr": "0x4059c0",
            "funcEndAddr": "0x405a56",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_4059c0()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    char *v3;  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rcx\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        do\n        {\n            v2 = &v2[-1];\n            v8 = v8 * 14757395258967641293 >> 64 >> 3;\n            *(v2) = (unsigned int)(v8 - (v8 * 14757395258967641293 >> 64 >> 3) * 10) + 48;\n        }\n        while (v8 != 0);\n        return v2;\n    }\n    while (true)\n    {\n        v3 = &v2[-1];\n        v7 = ((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63);\n        *((unsigned long long *)&v2[-1]) = 48 + (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63)) * 10 - rdi<8>;\n        if (((unsigned long long)(rdi<8> * 7378697629483820647 >> 64) >> 2) - (rdi<8> >> 63) == 0)\n        {\n            break;\n        }\n        v2 = v3;\n    }\n    v9 = &v2[-2];\n    v2[-1] = 45;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40c750",
            "funcStartAddr": "0x40c750",
            "funcEndAddr": "0x40cca4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_4137e7;\nextern char g_617620[2];\n\nint sub_40c750()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    unsigned long|char * v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rdx\n    unsigned long long v66;  // rbp\n    unsigned long long v67;  // rax\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rbp\n    unsigned long long v70;  // rax\n\n    v9 = g_617620;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_4137e7 : (unsigned long long)nl_langinfo(0xe));\n    if (g_617620 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v11 == 0 || v15[v11 + -1] == 47)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (v15 == 0 || *(v15) == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (v15 == 0 || *(v15) == 0 || v11 != 0 && v15[v11 + -1] != 47)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_4137e7;\n        }\n        if (v17 != 0 && (v15 == 0 || *(v15) == 0 || v11 != 0) && (v15 == 0 || *(v15) == 0 || v15[v11 + -1] != 47))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (v15 == 0 && v17 != 0 || *(v15) == 0 && v17 != 0 || v11 != 0 && v15[v11 + -1] != 47 && v17 != 0 || v11 == 0 && v15 != 0 && v17 != 0 && *(v15) != 0 || v15[v11 + -1] == 47 && v15 != 0 && v17 != 0 && *(v15) != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v60 != 32 && (unsigned int)v60 != 35)\n                        {\n                            ungetc(v60, v10);\n                            v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v28 > 1)\n                            {\n                                v29 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v29 = &v4;\n                                    v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v32 = &v5;\n                                v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v32 = &v6;\n                                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v33;\n                                tmp_56 = (unsigned int)v34 % 0x10000;\n                                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v36 + 2;\n                                    v37 = malloc(v36 + 3);\n                                    v39 = v1;\n                                    v40 = v2;\n                                }\n                                else\n                                {\n                                    v38 = v36 + v0 + 3;\n                                    v0 = v36 + v0 + 2;\n                                    v37 = realloc(NULL, v38);\n                                    v40 = v2;\n                                    v39 = v1;\n                                }\n                                if (v37 != 0)\n                                {\n                                    tmp_1 = -2 - v39;\n                                    v41 = v39 + 1;\n                                    v42 = v0 - v40;\n                                    v43 = tmp_1 + v0 - v40 + v37;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v43) = *((long long *)&v3);\n                                        *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                        v44 = v43 + 8 & -8;\n                                        v43 -= v43 + 8 & -8;\n                                        v45 = &(&v3)[-1 * v43];\n                                        v46 = (unsigned int)(v41 + v43) & -8;\n                                        if (v46 >= 8)\n                                        {\n                                            v43 = 0;\n                                            do\n                                            {\n                                                v48 = v43;\n                                                v43 = (unsigned int)v43 + 8;\n                                                *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                            }\n                                            while ((unsigned int)v43 < (v46 & -8));\n                                        }\n                                    }\n                                    else if ((v41 & 4) != 0)\n                                    {\n                                        *((int *)v43) = *((int *)&v3);\n                                        *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v43) = v3;\n                                        if ((v41 & 2) != 0)\n                                        {\n                                            *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                        }\n                                    }\n                                    v62 = v40 + 1;\n                                    v49 = v37 + v42 - 1;\n                                    if ((unsigned int)v43 >= 8)\n                                    {\n                                        *((long long *)v49) = *((long long *)&v5);\n                                        v43 = v62;\n                                        *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                        v52 = v49 - (v49 + 8 & -8);\n                                        v54 = (unsigned int)(v43 + v52) & -8;\n                                        if (v54 >= 8)\n                                        {\n                                            v57 = 0;\n                                            do\n                                            {\n                                                v58 = v57;\n                                                v57 = (unsigned int)v57 + 8;\n                                                *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                            }\n                                            while ((unsigned int)v57 < (v54 & -8));\n                                        }\n                                    }\n                                    else if (((char)v43 & 4) != 0)\n                                    {\n                                        *((int *)v49) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v43 != 0)\n                                    {\n                                        *((char *)v49) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v37;\n                                    v59 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_4137e7;\n                                    v10 = (tmp_10 == 0? &g_4137e7 : tmp_10);\n                                    free(NULL);\n                                    sub_40ced0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 > 1 && v37 != 0)\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v60 = *(v59);\n                        }\n                        if ((unsigned int)v60 == 35)\n                        {\n                            do\n                            {\n                                v61 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v61[1];\n                                    v61 = (unsigned int)*(v61);\n                                    v62 = 1;\n                                }\n                                else\n                                {\n                                    v61 = __uflow(v10);\n                                    v62 = (char)((unsigned int)v61 != -1);\n                                }\n                            }\n                            while (v62 != 0 && v61 != 10);\n                        }\n                        if ((unsigned int)v60 == 35 && v61 == -1 || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v28 <= 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35)\n                        {\n                            v10 = (tmp_10 == 0? &g_4137e7 : tmp_10);\n                            sub_40ced0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v60 == 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && v61 == -1 || (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1)\n                    {\n                        v9 = &g_4137e7;\n                    }\n                    else if (((unsigned int)v60 == 35 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && v61 == -1 || (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1) && v0 != 0 || v37 == 0 && (unsigned int)(v60 - 9) > 1 && (unsigned int)v60 != 32 && (unsigned int)v60 != 35 && v28 > 1)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_4137e7;\n            free(v17);\n        }\n        *((char *[2])&g_617620[0]) = v9;\n    }\n    v66 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v67 = strcmp((tmp_10 == 0? &g_4137e7 : tmp_10), v9);\n            if (v67 != 0 && (v9[1] != 0 || v66 != 42))\n            {\n                v68 = strlen(v9);\n                v69 = &((char [2])&v9[v68])[1];\n                v70 = strlen(&((char [2])&v9[v68])[1]);\n                v9 = v69 + v70 + 1;\n                v66 = (char)*((char *)(v69 + v70 + 1));\n                if (v66 == 0)\n                {\n                    break;\n                }\n            }\n            if (v67 == 0 || v9[1] == 0 && v66 == 42)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_40cff0",
            "funcStartAddr": "0x40cff0",
            "funcEndAddr": "0x40d107",
            "decompiledFuncCode": "int sub_40cff0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409760",
            "funcStartAddr": "0x409760",
            "funcEndAddr": "0x409788",
            "decompiledFuncCode": "int sub_409760()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409560();\n}\n"
        },
        {
            "funcName": "sub_409790",
            "funcStartAddr": "0x409790",
            "funcEndAddr": "0x4097a3",
            "decompiledFuncCode": "int sub_409790()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_409560",
            "funcStartAddr": "0x409560",
            "funcEndAddr": "0x40957a",
            "decompiledFuncCode": "int sub_409560()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_4097b0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_4072f0",
            "funcStartAddr": "0x4072f0",
            "funcEndAddr": "0x407389",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_617498;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_4072f0()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_617498 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_40b9b0",
            "funcStartAddr": "0x40b9b0",
            "funcEndAddr": "0x40bcd3",
            "decompiledFuncCode": "int sub_40b9b0()\n{\n    unsigned long long v0;  // [bp-0x880]\n    unsigned long long v1;  // [bp-0x878]\n    unsigned long|unsigned long long v2;  // [bp-0x870]\n    unsigned long|unsigned long long v3;  // [bp-0x868]\n    unsigned long long v4;  // [bp-0x860]\n    unsigned long v5;  // [bp-0x858]\n    unsigned long long v6;  // [bp-0x850]\n    unsigned long|unsigned long long v7;  // [bp-0x840]\n    unsigned long|char v8;  // [bp-0x838]\n    char v9;  // [bp-0x830]\n    unsigned long long v11;  // rdi\n    unsigned long long v12;  // r15\n    unsigned long long v13;  // rsi\n    unsigned long long v14;  // rcx\n    unsigned long long v15;  // rbx\n    char *v16;  // r13\n    unsigned long long *v17;  // rax\n    void *v18;  // rdx\n    void *v19;  // rsi\n    unsigned long long v20;  // rax\n    unsigned long long v22;  // r9\n    char *v23;  // rax\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // rcx\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // r14\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // r9\n    char *|unsigned long long v32;  // rax\n    unsigned long long v33;  // rdx\n    char *v34;  // rax\n    unsigned long long v36;  // r11\n    unsigned long long v37;  // rax\n    char *v38;  // rax\n    char *v39;  // rdx\n    char *v40;  // rdi\n    char *v41;  // rax\n    unsigned long long v42;  // rdx\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r11\n    unsigned long long v45;  // r14\n    unsigned long long v46;  // rbp\n    unsigned long long v47;  // r10\n    unsigned long long v48;  // rax\n\n    v12 = v11;\n    v46 = v13;\n    v15 = v14;\n    if (v14 > 2)\n    {\n        v16 = (unsigned long long)(unsigned int)sub_40b880();\n        v3 = v7;\n    }\n    else\n    {\n        v7 = 1;\n        v16 = v14 - 1;\n        v3 = 1;\n    }\n    v17 = &v8;\n    do\n    {\n        v8 = v14;\n        v17 = &v9;\n    }\n    while (stack_base + -56 != v17);\n    v19 = v18 + v3;\n    if (v14 != 0)\n    {\n        v22 = v15 + (char *)v17;\n        v17 = v18;\n        do\n        {\n            v25 = *(v23);\n            v26 = v18 + v15 - 1 - v23;\n            v23 = &v23[1];\n            *((unsigned long long *)&((char *)stack_base)[8 * v25 + -2104]) = v26;\n        }\n        while (v22 != v23);\n        v0 = v15 - 1;\n        v27 = memcmp(v17, v19, v16);\n        if (v27 == 0)\n        {\n            v47 = v0;\n            v44 = 0;\n            v45 = 0;\n            v6 = &v16[-1];\n            v4 = v15 - v3;\n            v5 = 1 + -0x1 * v16;\n            while (true)\n            {\n                v2 = v47;\n                v1 = v44;\n                v0 = v45 + v15;\n                if (sub_40aed0() != 0)\n                {\n                    break;\n                }\n                v36 = v1;\n                v47 = v2;\n                if (v0 == 0)\n                {\n                    break;\n                }\n                v37 = *((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]);\n                if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) != 0)\n                {\n                    if (v37 < v3)\n                    {\n                        v37 = (v1 != 0? v4 : rax<8>);\n                    }\n                    v45 = 0 + v37;\n                    v44 = 0;\n                }\n                else\n                {\n                    v38 = (v16 <= v36? v36 : v16);\n                    if ((v16 <= v36? v36 : v16) < v2)\n                    {\n                        v39 = v12 + v45;\n                        while (true)\n                        {\n                            if (*((char *)(v17 + v38)) == *((char *)(v39 + v38)))\n                            {\n                                v38 = &v38[1];\n                                if (v38 == v2)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v44 = 0;\n                                v45 = &v38[v5];\n                            }\n                        }\n                        if (*((char *)(v17 + v38)) == *((char *)(v39 + v38)))\n                        {\n                            v40 = v6;\n                            v41 = v6;\n                        }\n                        else if (*((char *)(v17 + v38)) != *((char *)(v39 + v38)))\n                        {\n                            v46 = v0;\n                        }\n                    }\n                    if ((v16 <= v36? v36 : v16) >= v2 || v36 >= v16)\n                    {\n                        v40 = v6;\n                        v41 = v6;\n                        if (v36 < v16)\n                        {\n                            v42 = v12 + v45;\n                            if (v40[v45 + v12] == *((char *)(v17 + v40)))\n                            {\n                                while (true)\n                                {\n                                    v43 = &v41[-1];\n                                    if (v36 == v41 || *((char *)(v17 + v41 - 1)) != v41[v42 + -1])\n                                    {\n                                        break;\n                                    }\n                                    v41 = v43;\n                                }\n                            }\n                        }\n                        if (v40[v45 + v12] != *((char *)(v17 + v40)) || v36 >= v16)\n                        {\n                            v41 = v16;\n                        }\n                        if (1 <= v41)\n                        {\n                            v45 = 0 + v3;\n                            v44 = v4;\n                        }\n                        else\n                        {\n                            v48 = v12 + v45;\n                        }\n                    }\n                }\n                if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) != 0 || (v16 <= v36? v36 : v16) < v2 && v36 >= v16 || 1 <= v41 && (v16 <= v36? v36 : v16) >= v2)\n                {\n                    v46 = v0;\n                }\n            }\n            if (true)\n            {\n                v48 = 0;\n            }\n            else if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) == 0 && 1 > v41 && ((v16 <= v36? v36 : v16) >= v2 || v36 >= v16))\n            {\n                return v48;\n            }\n        }\n    }\n    else\n    {\n        v20 = memcmp(v17, v19, v16);\n    }\n    if (v14 == 0 && v20 != 0 || v27 != 0 && v14 != 0)\n    {\n        v28 = v15 - 1;\n        v29 = 0;\n        v3 = (v15 + -0x1 * v16 < v16? v16 : (char *)(v15 + -0x1 * v16)) + 1;\n        v7 = (v15 + -0x1 * v16 < v16? v16 : (char *)(v15 + -0x1 * v16)) + 1;\n        v2 = 1 + -0x1 * v16;\n        while (true)\n        {\n            v1 = v29;\n            v0 = v29 + v15;\n            v30 = sub_40aed0();\n            if (v0 == 0)\n            {\n                break;\n            }\n            v31 = v1;\n            if (v30 != 0)\n            {\n                break;\n            }\n            v32 = *((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]);\n            if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) == 0)\n            {\n                v33 = v12 + v31;\n                if (v16 < v28)\n                {\n                    v32 = v16;\n                    if (*((char *)(v16 + v16)) == *((char *)(v16 + v16)))\n                    {\n                        do\n                        {\n                            v32 = &v32[1];\n                        }\n                        while (*((char *)(v17 + v32)) == *((char *)(v32 + v32)) && v32 < v28);\n                        if (true)\n                        {\n                            v34 = &v16[-1];\n                        }\n                        else if (v32 < v28)\n                        {\n                            v31 = 0 + v2;\n                        }\n                    }\n                    if (*((char *)(v16 + v16)) != *((char *)(v16 + v16)) || &v16[-1] != -1)\n                    {\n                        v31 = 0 + v2;\n                    }\n                }\n                if (*((char *)(v16 + v16)) == *((char *)(v16 + v16)) || v16 >= v28)\n                {\n                    if (&v16[-1] != -1 || v16 >= v28)\n                    {\n                        v34 = &v16[-1];\n                        if (*((char *)(v32 + v34)) == *((char *)(v17 + v16 - 1)) || &v16[-1] == -1)\n                        {\n                            v32 = v33;\n                        }\n                    }\n                    if (&v16[-1] != -1)\n                    {\n                        if (*((char *)(v32 + v34)) == *((char *)(v17 + v16 - 1)))\n                        {\n                            do\n                            {\n                                v34 = &v34[-1];\n                            }\n                            while (*((char *)(v17 + v34)) == *((char *)(v32 + v34)) && v34 != -1);\n                            if (v34 != -1)\n                            {\n                                v29 = 0 + v3;\n                            }\n                            else\n                            {\n                                v32 = v33;\n                            }\n                        }\n                        v29 = 0 + v3;\n                    }\n                }\n            }\n            if (v16 < v28 || &v16[-1] == -1)\n            {\n                v29 = v31 + v32;\n            }\n            if (&v16[-1] != -1)\n            {\n                v46 = v0;\n            }\n        }\n        if (true)\n        {\n            v48 = 0;\n        }\n        else if (*((long long *)&((char *)stack_base)[8 * (unsigned long long)(char)*((char *)(v12 + v46 - 1)) + -2104]) == 0 && v30 == 0 && (*((char *)(v32 + v34)) == *((char *)(v17 + v16 - 1)) || &v16[-1] == -1) && (*((char *)(v16 + v16)) == *((char *)(v16 + v16)) || v16 >= v28) && (&v16[-1] != -1 || v16 >= v28))\n        {\n            return v48;\n        }\n    }\n    v48 = 0;\n    return v48;\n}\n"
        },
        {
            "funcName": "sub_408d80",
            "funcStartAddr": "0x408d80",
            "funcEndAddr": "0x408d8a",
            "decompiledFuncCode": "int sub_408d80()\n{\n}\n"
        },
        {
            "funcName": "sub_40d1b0",
            "funcStartAddr": "0x40d1b0",
            "funcEndAddr": "0x40d262",
            "decompiledFuncCode": "int sub_40d1b0()\n{\n    unsigned long|unsigned long long|char v0;  // [bp-0x30]\n    unsigned long long *v2;  // rdx\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rsi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rsi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // rbp\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n    unsigned long long *v13;  // rsi\n    unsigned long long v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rdi\n\n    v5 = v4;\n    v7 = v6;\n    v8 = v2;\n    v9 = &v0;\n    v0 = *(v2);\n    v15 = v5();\n    if (v15 == 0)\n    {\n        v16 = *(v7);\n        v10 = 0;\n        if (*(v7) != 0)\n        {\n            while (true)\n            {\n                v11 = (v16 >> 1) + (v10 >> 1);\n                v12 = ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1);\n                if (v16 != v12 && v10 != ((unsigned int)(v10 | v16) & 1) + (v16 >> 1) + (v10 >> 1))\n                {\n                    break;\n                }\n                v0 = v12;\n                v13 = v2;\n                v14 = &v0;\n                v15 = r12<8>();\n                if (v15 == 0)\n                {\n                    v16 = v12;\n                    v12 = v10;\n                }\n                v10 = v12;\n            }\n            if (v15 == 0 && v10 != 0)\n            {\n                v0 = v10;\n                v17 = &v0;\n                return (long long)(stack_base)[-24]();\n            }\n        }\n    }\n    if (*(v7) == 0 || v10 == 0 || v15 != 0 || v15 != 0)\n    {\n        return v15;\n    }\n}\n"
        },
        {
            "funcName": "sub_40cf90",
            "funcStartAddr": "0x40cf90",
            "funcEndAddr": "0x40cfe6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_40cf90()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c6f0",
            "funcStartAddr": "0x40c6f0",
            "funcEndAddr": "0x40c746",
            "decompiledFuncCode": "int sub_40c6f0()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x402390",
            "funcEndAddr": "0x40287e",
            "decompiledFuncCode": "extern unsigned int g_4107c7;\nextern unsigned int g_4107ea;\nextern unsigned int g_41080b;\nextern unsigned int g_411e70;\nextern unsigned int g_411ee0;\nextern unsigned int g_411f28;\nextern char g_4137e7;\nextern unsigned long long g_617310;\nextern unsigned int g_61739c;\nextern unsigned long long g_617470;\nextern int512_t g_617478;\nextern char g_617480;\nextern char g_617481;\nextern unsigned long long g_617638;\n\nint main()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xe0]\n    unsigned long|unsigned long long v1;  // [bp-0xd8]\n    unsigned long v2;  // [bp-0xd0]\n    char v3;  // [bp-0xc8]\n    unsigned long v5;  // rdi\n    unsigned int v6;  // r14d\n    unsigned long v7;  // rsi\n    char **v9;  // rax\n    char *v10;  // rdi\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rbp\n    unsigned long long v24;  // rbx\n    unsigned long|unsigned int v25;  // r13\n    unsigned long long v26;  // rdx\n    unsigned long long *v27;  // rbx\n    unsigned long long v28;  // r15\n    unsigned long v29;  // r14\n    unsigned long long v30;  // rcx\n    char *v31;  // rdi\n    char *v32;  // rsi\n    unsigned long long v33;  // cc_dep1\n    unsigned long long v34;  // cc_dep2\n    unsigned long v35;  // d\n    unsigned int v36;  // eax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rsi\n    unsigned long long v39;  // r14\n    char v40;  // al\n    unsigned long|unsigned int v41;  // rax\n    unsigned long long v42;  // r13\n\n    v6 = v5;\n    v25 = v7;\n    sub_4072f0();\n    setlocale(0x6, 0x4137e7);\n    bindtextdomain(0x4107c7, 0x411e70);\n    textdomain(0x4107c7);\n    v9 = localeconv();\n    v10 = (*(*(v9)) == 0? \".\" : *(v9));\n    v13 = 0;\n    *((int *)&g_617478) = (*(*(v9)) == 0? \".\" : *(v9));\n    g_617470 = strlen(v10);\n    sub_410340();\n    v0 = 0;\n    while (true)\n    {\n        v12 = (unsigned int)sub_40add0();\n        if ((unsigned int)v12 != -1)\n        {\n            if ((unsigned int)v7 == 99)\n            {\n                g_617480 = 0;\n                g_617310 = \"\\n\";\n                v0 = g_617638;\n            }\n            else if (v12 > 99)\n            {\n                if ((unsigned int)v7 == 128)\n                {\n                    g_617480 = 1;\n                    g_617310 = &g_4137e7;\n                    v0 = g_617638;\n                }\n                if ((unsigned int)v7 == 102)\n                {\n                    v13 = 1;\n                }\n            }\n            else\n            {\n                if ((unsigned int)v7 == -130)\n                {\n                    sub_404870(); /* do not return */\n                }\n                if ((unsigned int)v7 == 76)\n                {\n                    g_617481 = 1;\n                }\n                if ((unsigned int)v7 == -131)\n                {\n                    sub_409420();\n                    exit(0x0); /* do not return */\n                }\n            }\n        }\n        else\n        {\n            if (!(g_61739c != v6))\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4107ea, 0x5));\n            }\n            else if (v0 != 0)\n            {\n                v1 = v0;\n                if (sub_40bd00() == 0)\n                {\n                    break;\n                }\n                if (!(getenv(\"QUOTING_STYLE\") != 0))\n                {\n                    sub_4088b0();\n                    v1 = v0;\n                }\n                else if (sub_405190() >= 0)\n                {\n                    sub_4088b0();\n                    v1 = v1;\n                }\n                else\n                {\n                    sub_4088b0();\n                    v24 = (unsigned int)sub_408f10();\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x411ee0, 0x5));\n                    v1 = v0;\n                }\n            }\n            else\n            {\n                v0 = (unsigned int)sub_403e80();\n                v1 = (unsigned int)sub_403e80();\n            }\n        }\n        if (g_61739c == v6 && (unsigned int)v12 == -1 || v12 <= 99 && (unsigned int)v7 != -131 && (unsigned int)v7 != -130 && (unsigned int)v7 != 99 && (unsigned int)v7 != 76 && (unsigned int)v12 != -1 || (unsigned int)v7 != 99 && (unsigned int)v7 != 102 && v12 > 99 && (unsigned int)v12 != -1 && (unsigned int)v7 != 128 && (unsigned int)v7 != 116)\n        {\n            sub_404870(); /* do not return */\n        }\n    }\n    if (v6 > g_61739c)\n    {\n        v26 = g_61739c;\n        v27 = v25 + v26 * 8;\n        v28 = v25 + (!((unsigned int)v26) + v6 + v26) * 8 + 8;\n        do\n        {\n            v29 = *(v27);\n            v30 = 2;\n            v31 = \"-\";\n            v32 = *(v27);\n            while (v30 != 0)\n            {\n                v30 -= 1;\n                v33 = *(v32);\n                v34 = *(v31);\n                v31 = &v31[v35];\n                v32 = &v32[v35];\n                break;\n            }\n            v36 = (v33 > v34) - 0 - (v33 < v34);\n            if (v13 == 0)\n            {\n                if (v36 != 0)\n                {\n                    if (g_617481 != 0)\n                    {\n                        v40 = __xstat(0x1, v29, (unsigned int)&v3) != 0;\n                    }\n                    else\n                    {\n                        v40 = __lxstat(0x1, v29, (unsigned int)&v3) != 0;\n                    }\n                    if (v40 != 0)\n                    {\n                        v2 = (unsigned int)sub_408cc0();\n                    }\n                }\n                else\n                {\n                    v38 = __fxstat(0x1, 0x0, (unsigned int)&v3);\n                    if ((unsigned int)v38 != 0)\n                    {\n                        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41080b, 0x5));\n                        v41 = 0;\n                    }\n                }\n                if ((v36 == 0 || v40 == 0) && ((unsigned int)v38 == 0 || v36 != 0))\n                {\n                    v41 = (unsigned int)(sub_4037b0() ^ 1);\n                }\n            }\n            else if (v36 != 0)\n            {\n                v37 = statfs(v29, (unsigned int)&v3);\n                if (v37 == 0)\n                {\n                    v41 = (unsigned int)(sub_4037b0() ^ 1);\n                }\n                else\n                {\n                    v2 = (unsigned int)sub_408cc0();\n                }\n            }\n            else\n            {\n                v39 = (unsigned int)sub_408cc0();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x411f28, 0x5));\n                v41 = 0;\n            }\n            if (v36 != 0 && (v13 == 0 || v37 != 0) && (v13 != 0 || v40 != 0))\n            {\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, v32, 0x5));\n                v41 = 0;\n            }\n            v27 = &v27[1];\n            v25 = 1 & v41;\n        }\n        while (v28 != v27);\n    }\n    else\n    {\n        v25 = 1;\n    }\n    v42 = v25 ^ 1;\n    return v42;\n}\n"
        },
        {
            "funcName": "sub_408ac0",
            "funcStartAddr": "0x408ac0",
            "funcEndAddr": "0x408aca",
            "decompiledFuncCode": "int sub_408ac0()\n{\n}\n"
        },
        {
            "funcName": "sub_407390",
            "funcStartAddr": "0x407390",
            "funcEndAddr": "0x40746f",
            "decompiledFuncCode": "extern int512_t g_41255e;\nextern int512_t g_412562;\n\nint sub_407390()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_40c750();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41255e : 4269417);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_412562 : 4269413);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && v3[4] == 56 && (v3[1] & 223) == 84 && v1 == v2 && (v3[2] & 223) == 70 || (v3[1] & 223) == 66 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && v1 == v2 && v3[4] == 48 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_408900",
            "funcStartAddr": "0x408900",
            "funcEndAddr": "0x408913",
            "decompiledFuncCode": "extern int512_t g_6175a0;\n\nint sub_408900()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6175a0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6175a0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4093a0",
            "funcStartAddr": "0x4093a0",
            "funcEndAddr": "0x4093c0",
            "decompiledFuncCode": "int sub_4093a0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_4094e0",
            "funcStartAddr": "0x4094e0",
            "funcEndAddr": "0x409554",
            "decompiledFuncCode": "extern unsigned int g_4132f2;\nextern unsigned int g_41331d;\nextern unsigned int g_413550;\n\nint sub_4094e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4132f2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41331d, 0x5));\n    dcgettext(0x0, 0x413550, 0x5);\n}\n"
        },
        {
            "funcName": "sub_403bbd",
            "funcStartAddr": "0x403bbd",
            "funcEndAddr": "0x403bcd",
            "decompiledFuncCode": "int sub_403bbd()\n{\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x4055ce",
            "decompiledFuncCode": "extern unsigned int g_41209d;\nextern unsigned int g_617328;\nextern char g_617488;\nextern unsigned long long g_617490;\n\nint sub_405530()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_40c640();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_617488 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x41209d, 0x5);\n            if (g_617490 != 0)\n            {\n                sub_408d60();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_617488 != 0)\n    {\n        v3 = sub_40c640();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_617488 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_617328);\n        error(0x0, *(v2), \"%\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40aed0",
            "funcStartAddr": "0x40aed0",
            "funcEndAddr": "0x40afb3",
            "decompiledFuncCode": "int sub_40aed0()\n{\n    unsigned long long v1;  // rdx\n    void *|char v2;  // dil\n    unsigned long|char v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    void *v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while ((v2 & 7) != 0 && v1 != 1 && *((char *)v2) != (char)v3);\n            if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if (true)\n            {\n                return 0;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            if ((v2 & 7) == 0 || v1 > 7)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && ((v2 & 7) == 0 || v1 > 7) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if ((char)v6[-1] == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && ((v2 & 7) == 0 || v1 > 7) && v1 <= 7) && v3 == *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 && v1 > 7 || v3 == *((char *)v2) && v1 != 0 && (v2 & 7) != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && ((v2 & 7) == 0 || v1 > 7) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 != 0 && v1 > 7 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 != 0 && v3 != *((char *)v2) && (v2 & 7) != 0 && v1 > 7 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v1 <= 7 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c0f0",
            "funcStartAddr": "0x40c0f0",
            "funcEndAddr": "0x40c113",
            "decompiledFuncCode": "int sub_40c0f0()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned long long *v2;  // rdi\n    unsigned long v3;  // rax\n    unsigned long long v4;  // rbx\n    void *v5;  // rbx\n    unsigned long long v7;  // rbx\n\n    if (v2 != 0)\n    {\n        v0 = v4;\n        while (true)\n        {\n            v5 = *(v2);\n            v2 = v5;\n            if (v5 == 0)\n            {\n                break;\n            }\n        }\n        v7 = v0;\n        return (unsigned long long)free(v2);\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_4056b0",
            "funcStartAddr": "0x4056b0",
            "funcEndAddr": "0x405702",
            "decompiledFuncCode": "int sub_4056b0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rsi\n    char *v4;  // rcx\n    char *v5;  // rax\n\n    v2 = *(v1);\n    v5 = v1;\n    if (*(v1) == 47)\n    {\n        do\n        {\n            v5 = &v5[1];\n            v2 = *(v5);\n        }\n        while (*(v5) == 47);\n    }\n    if (v2 != 0)\n    {\n        v4 = v5;\n        v3 = 0;\n        while (true)\n        {\n            if (v2 != 47)\n            {\n                if (v3 != 0)\n                {\n                    v5 = v4;\n                    v3 = 0;\n                }\n                v4 = &v4[1];\n                v2 = *(v4);\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v4 = &v4[1];\n                v2 = *(v4);\n                v3 = 1;\n                if ((char)v2 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_405a60",
            "funcStartAddr": "0x405a60",
            "funcEndAddr": "0x405aa1",
            "decompiledFuncCode": "int sub_405a60()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_tolower_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_40ae10",
            "funcStartAddr": "0x40ae10",
            "funcEndAddr": "0x40ae26",
            "decompiledFuncCode": "int sub_40ae10()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40ad50();\n}\n"
        },
        {
            "funcName": "sub_4088c0",
            "funcStartAddr": "0x4088c0",
            "funcEndAddr": "0x4088f3",
            "decompiledFuncCode": "extern int512_t g_6175a0;\n\nint sub_4088c0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6175a0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6175a0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_40c500",
            "funcStartAddr": "0x40c500",
            "funcEndAddr": "0x40c605",
            "decompiledFuncCode": "int sub_40c500()\n{\n    unsigned long long v0;  // [bp-0x60]\n    char v1;  // [bp-0x58]\n    unsigned int v2;  // [bp-0x54]\n    unsigned int v3;  // [bp-0x50]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned int v5;  // [bp-0x48]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x38]\n    unsigned int v9[9];  // rsi\n    unsigned long v11;  // rdi\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n\n    if (v11 != 0)\n    {\n        v12 = (unsigned int)sub_40c380();\n        if (v12 != 0)\n        {\n            v0 = (unsigned int)sub_40d6b0();\n            if (v0 == -1)\n            {\n                v13 = localtime_r((unsigned int)&v0, (unsigned int)&v1);\n            }\n            if ((v0 == -1 && v13 != 0 && (v9[4] < 0 || v9[4] == 0 == v7 == 0 || v7 < 0) && (v9[2] ^ v5) == 0 && (v9[2 + 1] ^ v6) == 0 && (v9[1 + 1] ^ v4) == 0 && (v9[1] ^ v3) == 0 && (v9[1] ^ v2) == 0 && (v9[0] ^ *((int *)&v1)) == 0 || v0 != -1) && sub_40c200() == 0)\n            {\n                v0 = -1;\n            }\n            if (v12 != 1)\n            {\n                v15 = sub_40c120();\n            }\n        }\n        if (v12 == 0 || v15 == 0 && v12 != 1)\n        {\n            v16 = -1;\n        }\n        if (v12 == 1 || v12 != 0 && v15 != 0)\n        {\n            v16 = v0;\n        }\n        return v16;\n    }\n    return sub_40c620();\n}\n"
        },
        {
            "funcName": "sub_40d6d0",
            "funcStartAddr": "0x40d6d0",
            "funcEndAddr": "0x40d729",
            "decompiledFuncCode": "int sub_40d6d0()\n{\n    unsigned long long v0;  // [bp-0x10]\n    void *v2;  // rax\n    unsigned long long v3;  // rax\n    unsigned long long *v4;  // rdi\n\n    v2 = sub_40d880();\n    if (!(v2 != 0))\n    {\n        v3 = -18446744069414584321;\n    }\n    else if (v0 <= 2147483647)\n    {\n        *(v4) = v2;\n        v3 = v0;\n    }\n    else\n    {\n        free(v2);\n        *(__errno_location()) = 75;\n        v3 = -18446744069414584321;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_40b070",
            "funcStartAddr": "0x40b070",
            "funcEndAddr": "0x40b0af",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    char field_28;\n} struct_0;\n\nint sub_40b070()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n\n    v0 = v2;\n    v4 = v3;\n    free(v3->field_0);\n    free(v4->field_8);\n    free(v4->field_10);\n    if ((v4->field_28 & 4) != 0)\n    {\n        free(v4->field_18);\n    }\n}\n"
        },
        {
            "funcName": "sub_403b8d",
            "funcStartAddr": "0x403b8d",
            "funcEndAddr": "0x403b9d",
            "decompiledFuncCode": "int sub_403b8d()\n{\n}\n"
        },
        {
            "funcName": "sub_40adf0",
            "funcStartAddr": "0x40adf0",
            "funcEndAddr": "0x40ae05",
            "decompiledFuncCode": "int sub_40adf0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40a780();\n}\n"
        },
        {
            "funcName": "sub_408c50",
            "funcStartAddr": "0x408c50",
            "funcEndAddr": "0x408cb9",
            "decompiledFuncCode": "int sub_408c50()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4086c0();\n}\n"
        },
        {
            "funcName": "sub_40c0a0",
            "funcStartAddr": "0x40c0a0",
            "funcEndAddr": "0x40c0e0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nextern unsigned int g_4106c6;\n\nint sub_40c0a0()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    if (v1->field_8 == 0)\n    {\n        v2 = unsetenv(0x4106c6);\n    }\n    else\n    {\n        v2 = setenv(0x4106c6, (unsigned int)v1 + 9, 0x1);\n    }\n    v3 = 0;\n    if (v2 == 0)\n    {\n        tzset();\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405450",
            "funcStartAddr": "0x405450",
            "funcEndAddr": "0x4054bd",
            "decompiledFuncCode": "int sub_405450()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_405190();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_4052b0();\n        sub_405330();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4059b0",
            "funcStartAddr": "0x4059b0",
            "funcEndAddr": "0x4059b8",
            "decompiledFuncCode": "int sub_4059b0()\n{\n}\n"
        },
        {
            "funcName": "sub_405330",
            "funcStartAddr": "0x405330",
            "funcEndAddr": "0x40543f",
            "decompiledFuncCode": "extern unsigned int g_41207b;\nextern unsigned long long stderr[7];\n\nint sub_405330()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x41207b, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_408f10();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_408f10();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_4037b0",
            "funcStartAddr": "0x4037b0",
            "funcEndAddr": "0x403be3",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char field_0;\n    char field_1;\n    char field_2;\n    char field_3;\n    char padding_4[36];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_1;\n\nextern unsigned int g_4106b0;\nextern unsigned int g_410f88;\nextern unsigned int g_410f90;\nextern unsigned int g_410fa0;\nextern unsigned int g_410fc8;\nextern unsigned long long g_617310;\nextern char g_617480;\nextern struct_1 *stdout;\n\nint sub_4037b0()\n{\n    char v0;  // [bp-0x55]\n    unsigned long long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned long long v3;  // [bp-0x40]\n    struct_1 *v5;  // rdi\n    unsigned long long|struct_1 * v6;  // r14\n    unsigned long long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned long long v9;  // r8\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rax\n    char *v14;  // rax\n    unsigned long long v15;  // rbp\n    struct_1 *v16;  // rbp\n    unsigned long long v17;  // rbp\n    unsigned long long v18;  // r15\n    unsigned long long *v19;  // rax\n    unsigned long long v20;  // r10\n    unsigned long long v21;  // rax\n    unsigned long long v24;  // r13\n    unsigned long long v25;  // r12\n    char *v27;  // rax\n    char *v28;  // rax\n    unsigned long long v29;  // rax\n    struct_1 *v30;  // rbp\n    unsigned long long v31;  // rdx\n    unsigned long long v32;  // r9\n    unsigned long long v33;  // rcx\n    unsigned long long v35;  // r8\n    unsigned long long v36;  // rdx\n    unsigned long long v37;  // rax\n    char *v38;  // rax\n    char *v39;  // rax\n    unsigned long long v40;  // rdx\n    char *v41;  // rdx\n    struct_1 *v42;  // rsi\n    unsigned long long v43;  // rax\n    unsigned long long v45;  // rbx\n\n    v6 = v5;\n    v1 = v7;\n    v2 = v8;\n    v3 = v9;\n    strlen(v5);\n    v0 = 0;\n    if (v5->field_0 != 0)\n    {\n        while (true)\n        {\n            v12 = &v6->field_1;\n            if (v42 == 37)\n            {\n                v13 = strspn((unsigned int)v6, 0x410f88);\n                v15 = &(struct struct_1 *)&(&v6->field_0)[v13]->field_1;\n                v16 = v15 + strspn((unsigned int)(struct struct_1 *)&(struct struct_1 *)&(&v6->field_0)[v13]->field_1, 0x410f90);\n                v18 = v16->field_0;\n                if (v16->field_0 == 46)\n                {\n                    v16 = &(struct struct_1 *)&(&v16->field_0)[(unsigned long long)strspn((unsigned int)v16 + 1, 0x410f90)]->field_1;\n                    v18 = v16->field_0;\n                }\n                v24 = v16 - v6 + 1;\n                v25 = v16 - v6;\n                memcpy(v5, v6, v42);\n                if (v18 == 0)\n                {\n                    v16 = (char *)&v16[-1].field_30 + 7;\n                }\n                else if (v18 != 37)\n                {\n                    v31 = v18;\n                    v32 = v3;\n                    v33 = v42;\n                    v42 = v24;\n                    v35 = v1;\n                    v5 = (unsigned long long)(unsigned int)sub_409560();\n                    v6 = &v16->field_1;\n                    v0 |= (char)(long long)(stack_base)[-72]();\n                }\n                if (v18 == 37 || v18 == 0)\n                {\n                    if (v25 == 0)\n                    {\n                        v5 = stdout;\n                        v6 = &v16->field_1;\n                        v38 = stdout->field_28;\n                        if (stdout->field_28 < stdout->field_30)\n                        {\n                            stdout->field_28 = stdout->field_28 + 1;\n                            *(v38) = 37;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                    }\n                    else\n                    {\n                        *((unsigned long long *)(v5 + v42)) = v18;\n                        (&v5->field_2)[v25] = 0;\n                        v45 = (unsigned int)sub_408f10();\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4106b0, 0x5));\n                    }\n                }\n            }\n            else if (v42 != 92)\n            {\n                v5 = stdout;\n                v14 = stdout->field_28;\n                if (stdout->field_28 < stdout->field_30)\n                {\n                    v16 = v6;\n                    v6 = v12;\n                    stdout->field_28 = stdout->field_28 + 1;\n                    *((struct_1 **)&v14) = v42;\n                }\n                else\n                {\n                    __overflow();\n                    v16 = v6;\n                }\n            }\n            if (v42 == 92)\n            {\n                if (g_617480 != 0)\n                {\n                    v17 = v6->field_1;\n                    if (((unsigned long long)v6->field_1 - 48 & 255) > 7)\n                    {\n                        if (v17 == 120)\n                        {\n                            if ((*((char *)(*((long long *)(unsigned long long)v6->field_2) + ((unsigned long long)v6->field_2 << 1) + 1)) & 16) != 0)\n                            {\n                                if (((unsigned long long)v5->field_2 - 97 & 255) > 5)\n                                {\n                                    v29 = (unsigned int)((char)((unsigned int)v5->field_2 - 65) > 5? (unsigned int)v5->field_2 : (unsigned int)v5->field_0);\n                                }\n                                else\n                                {\n                                    v29 = (unsigned long long)v5->field_2 - 87;\n                                }\n                                v16 = &v6->field_2;\n                                if ((*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + ((unsigned long long)v6->field_3 << 1) + 1)) & 16) != 0)\n                                {\n                                    v36 = v5->field_3;\n                                    v16 = &v6->field_3;\n                                    v37 = v29 * 16;\n                                    if ((char)((unsigned long long)v5->field_3 - 97) <= 5)\n                                    {\n                                        v40 = (unsigned int)v5->field_3 - 87;\n                                    }\n                                    else\n                                    {\n                                        v40 = (unsigned int)((char)((unsigned int)v5->field_3 - 65) <= 5? (unsigned int)(v36 - 55) : (unsigned int)v36 - 48);\n                                    }\n                                    v29 = v37 + v40;\n                                }\n                                v5 = stdout;\n                                v6 = &v16->field_1;\n                                v41 = stdout->field_28;\n                                if (stdout->field_28 < stdout->field_30)\n                                {\n                                    stdout->field_28 = stdout->field_28 + 1;\n                                    *((unsigned long long *)&v41) = v29;\n                                }\n                                else\n                                {\n                                    __overflow();\n                                }\n                            }\n                        }\n                        else if (v17 != 0)\n                        {\n                            if ((v17 - 34 & 255) <= 84)\n                            {\n                                v43 = v17 - 34;\n                                /* goto *((long long *)(v43 * 8 + 4262288)); */\n                            }\n                        }\n                        if (v17 == 0)\n                        {\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x410fa0, 0x5));\n                        }\n                        if ((v17 == 120 || v17 != 0) && (v17 == 120 || (v17 - 34 & 255) > 84) && ((*((char *)(*((long long *)(unsigned long long)v6->field_2) + ((unsigned long long)v6->field_2 << 1) + 1)) & 16) == 0 || v17 != 120))\n                        {\n                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x410fc8, 0x5));\n                            v5 = stdout;\n                            v6 = &v6->field_2;\n                            v39 = stdout->field_28;\n                            if (stdout->field_28 < stdout->field_30)\n                            {\n                                stdout->field_28 = stdout->field_28 + 1;\n                                *((unsigned long long *)&v39) = v17;\n                                v16 = v6;\n                            }\n                            else\n                            {\n                                v16 = v6;\n                                __overflow();\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v19 = (unsigned long long)v6->field_2;\n                        v20 = (unsigned int)v17 - 48;\n                        if (((unsigned long long)v6->field_2 - 48 & 255) <= 7)\n                        {\n                            v20 = &v19[v20 + -6];\n                            v21 = v6->field_3;\n                            if (((unsigned long long)v6->field_3 - 48 & 255) <= 7)\n                            {\n                                v20 = v21 + v20 * 8 - 48;\n                                v6 = &v6->padding_4;\n                            }\n                            else\n                            {\n                                v6 = &v6->field_3;\n                            }\n                        }\n                        else\n                        {\n                            v6 = &v6->field_2;\n                        }\n                        v5 = stdout;\n                        v27 = stdout->field_28;\n                        if (stdout->field_28 < stdout->field_30)\n                        {\n                            stdout->field_28 = stdout->field_28 + 1;\n                            *((unsigned long long *)&v27) = v20;\n                        }\n                        else\n                        {\n                            __overflow();\n                        }\n                        v16 = v6 - 1;\n                    }\n                }\n                if (g_617480 == 0 || v17 == 0 && ((unsigned long long)v6->field_1 - 48 & 255) > 7)\n                {\n                    v5 = stdout;\n                    v28 = stdout->field_28;\n                    if (stdout->field_28 < stdout->field_30)\n                    {\n                        v30 = v6;\n                        stdout->field_28 = stdout->field_28 + 1;\n                        *(v28) = 92;\n                        v42 = (unsigned long long)v30->field_1;\n                        if (v30->field_1 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        v16 = v6;\n                        __overflow();\n                    }\n                }\n            }\n            if (...)\n            {\n                v42 = (unsigned long long)v16->field_1;\n                if (v16->field_1 == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    free(v5);\n    fputs_unlocked(g_617310, stdout);\n    return (unsigned long long)v0;\n}\n"
        },
        {
            "funcName": "sub_405b00",
            "funcStartAddr": "0x405b00",
            "funcEndAddr": "0x407286",
            "decompiledFuncCode": "int sub_405b00() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409bb0",
            "funcStartAddr": "0x409bb0",
            "funcEndAddr": "0x40a055",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[11];\n    char field_13;\n    char field_14;\n} struct_0;\n\nextern unsigned int g_411fe4;\nextern unsigned int g_412556;\n\nint sub_409bb0()\n{\n    unsigned long long|unsigned int v0;  // [bp-0x120]\n    unsigned long long v1;  // [bp-0x118]\n    unsigned long long|void * v2;  // [bp-0x110]\n    void *v3;  // [bp-0x108]\n    unsigned long long v4;  // [bp-0x100]\n    char v5;  // [bp-0xe9]\n    unsigned long|char * v6;  // [bp-0xe8]\n    unsigned long long v7;  // [bp-0xe0]\n    unsigned long v8;  // [bp-0xd8]\n    unsigned long v9;  // [bp-0xd0]\n    char v10;  // [bp-0xc8]\n    unsigned long long v11;  // [bp-0xc0]\n    unsigned int v12;  // [bp-0xb0]\n    void *v14;  // rdi\n    unsigned int v15;  // rsi\n    unsigned long long v16;  // rbx\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rbp\n    unsigned long long v25;  // r13\n    struct_0 *v26;  // rax\n    unsigned long long v27;  // rdx\n    void *v28;  // rbx\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // r13\n    unsigned long v31;  // r14\n    unsigned int v32;  // rax\n    unsigned long long v34;  // r8\n    unsigned long v39;  // rbx\n    unsigned long v40;  // rdx\n    unsigned long long|unsigned int v42;  // rbx\n    unsigned int *v43;  // r12\n\n    v3 = v14;\n    if (v15 == 0)\n    {\n        v4 = 0x1000;\n        if (v14 != 0)\n        {\n            v2 = 0;\n            *(__errno_location()) = 22;\n        }\n    }\n    else\n    {\n        *((unsigned int *)&v4) = v15;\n        if (v3 != 0)\n        {\n            v2 = v3;\n        }\n    }\n    if (v14 == 0 && v15 == 0 || v3 == 0 && v15 != 0)\n    {\n        v2 = malloc(v4);\n    }\n    if (v14 == 0 && v2 != 0 || v3 != 0 && v15 != 0 || v2 != 0 && v15 != 0)\n    {\n        v16 = v2 + v4;\n        *((char *)(v2 + v4 - 1)) = 0;\n        v17 = __lxstat(0x1, 0x411fe4, (unsigned int)&v10);\n        if (v17 >= 0)\n        {\n            v18 = *((long long *)&v10);\n            v19 = v11;\n            v0 = *((long long *)&v10);\n            v20 = __lxstat(0x1, 0x412556, (unsigned int)&v10);\n            if (v20 >= 0)\n            {\n                v6 = v16 - 1;\n                v8 = v11;\n                v7 = *((long long *)&v10);\n                v5 = *((long long *)&v10) != *((long long *)&v10) | v11 != v11;\n                if (v18 != *((long long *)&v10) || v19 != v11)\n                {\n                    v24 = 0;\n                    v21 = -18446744069414584420;\n                    v43 = __errno_location();\n                    while (true)\n                    {\n                        v21 = openat(v21);\n                        if (v21 >= 0)\n                        {\n                            v22 = __fxstat(0x1, v21, (unsigned int)&v10);\n                            if (v22 == 0)\n                            {\n                                if (v24 != 0)\n                                {\n                                    v23 = closedir();\n                                }\n                                if (v24 == 0 || v23 == 0)\n                                {\n                                    v1 = *((long long *)&v10);\n                                    v9 = v11;\n                                    v24 = fdopendir(v21);\n                                    if (v24 != 0)\n                                    {\n                                        v25 = v5;\n                                        while (true)\n                                        {\n                                            *(v43) = 0;\n                                            v26 = readdir();\n                                            if (v26 == 0)\n                                            {\n                                                v42 = *(v43);\n                                                if (*(v43) == 0 && v25 != 0)\n                                                {\n                                                    rewinddir(v24);\n                                                    v26 = readdir();\n                                                    if (v26 != 0)\n                                                    {\n                                                        v25 = 0;\n                                                    }\n                                                    else\n                                                    {\n                                                        v42 = *(v43);\n                                                    }\n                                                }\n                                                if (v26 == 0 || v25 == 0 || *(v43) != 0)\n                                                {\n                                                    if ((unsigned int)v42 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    *(v43) = 2;\n                                                    v42 = 2;\n                                                }\n                                            }\n                                            if (v26 != 0 || *(v43) == 0 && v26 != 0 && v25 != 0)\n                                            {\n                                                if (v25 != 0 && (v26->field_13 == 46 || v26 != 0) && (v26 != 0 || v26->field_14 != 0) && (v26 != 0 || *((short *)&v26->field_14) != 46) && (v26->field_14 != 0 || v26->field_13 != 46) && (*((short *)&v26->field_14) != 46 || v26->field_13 != 46))\n                                                {\n                                                    v25 = v27;\n                                                }\n                                                if ((v26 == 0 || v26->field_14 != 0 || v26->field_13 != 46) && (v26 == 0 || *((short *)&v26->field_14) != 46 || v26->field_13 != 46) && (v26 != 0 || v26->field_14 != 0 || v26->field_13 != 46) && (v26 != 0 || *((short *)&v26->field_14) != 46 || v26->field_13 != 46))\n                                                {\n                                                    v28 = &v26->field_13;\n                                                    v29 = __fxstatat(0x1, v21, (unsigned int)v26 + 19, (unsigned int)&v10, 0x100);\n                                                    v30 = &v6[-1 * v2];\n                                                    v31 = strlen(v28);\n                                                    if (v30 <= v31)\n                                                    {\n                                                        if (v15 == 0)\n                                                        {\n                                                            v32 = v4 + (v4 <= v31? v31 : v4);\n                                                            *((int *)&v6) = (v4 <= v31? v31 : v4);\n                                                            *((unsigned long long *)&v0) = v4 + (v4 <= v31? v31 : v4);\n                                                            if (!((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                            {\n                                                                v2 = realloc(v2, v32);\n                                                                v6 = memcpy(v2 + v6 + v30, v2 + v30, v4 - v30);\n                                                                v4 = *((long long *)&v0);\n                                                            }\n                                                            if ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>) || v2 == 0)\n                                                            {\n                                                                *(v43) = 12;\n                                                                v42 = 12;\n                                                            }\n                                                        }\n                                                        else\n                                                        {\n                                                            *(v43) = 34;\n                                                            v42 = 34;\n                                                        }\n                                                    }\n                                                    if (v30 > v31 || v15 == 0 && !((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, Load(addr=stack_base-256, size=8, endness=Iend_LE), (((Load(addr=stack_base-256, size=8, endness=Iend_LE) <= r14<8>)) ? (r14<8>) : (Load(addr=stack_base-256, size=8, endness=Iend_LE))), cc_ndep<8>)) && v2 != 0)\n                                                    {\n                                                        v34 = memcpy(&v6[-1 * v31], v28, v31);\n                                                        v6 = v34 - 1;\n                                                        *((char *)(v34 - 1)) = 47;\n                                                        v0 = v1;\n                                                        if (v8 != v9 || v7 != v1)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (closedir() != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        v16 = v2 + v4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (...)\n                                        {\n                                            v42 = *(v43);\n                                        }\n                                        else if (...)\n                                        {\n                                            v21 = openat(v21);\n                                        }\n                                        else if (...)\n                                        {\n                                            closedir();\n                                        }\n                                    }\n                                }\n                                if ((v24 == 0 || v24 != 0) && (v24 == 0 || v23 != 0))\n                                {\n                                    v42 = *(v43);\n                                }\n                            }\n                            else\n                            {\n                                v42 = *(v43);\n                                if (v24 != 0)\n                                {\n                                    closedir();\n                                }\n                            }\n                            if ((v24 == 0 || v24 != 0 || v22 != 0) && (v24 == 0 || v23 != 0 || v22 != 0))\n                            {\n                                close(v21);\n                            }\n                        }\n                        else\n                        {\n                            v42 = *(v43);\n                        }\n                        if ((v21 < 0 || v22 == 0) && (v21 < 0 || v24 != 0) && (v24 == 0 || v23 == 0 || v21 < 0) && (v24 != 0 || v21 >= 0))\n                        {\n                            closedir();\n                        }\n                        break;\n                    }\n                    if (v24 != 0)\n                    {\n                        v42 = *(v43);\n                    }\n                    else if (v21 < 0 || v24 == 0 || v3 != 0 || v22 != 0 || v24 != 0 && v23 != 0)\n                    {\n                        free(v2);\n                    }\n                    else if (v24 == 0)\n                    {\n                        if (v21 < 0 || v24 == 0 || v3 != 0 || v22 != 0 || v24 != 0 && v23 != 0)\n                        {\n                            *((unsigned long long *)&v43) = v42;\n                            v2 = 0;\n                        }\n                    }\n                }\n                v6[-1] = 47;\n                v6 = &v6[-1];\n                v39 = v16 + -0x1 * v6;\n                v40 = v39;\n                memmove(v2, v6, v40);\n                if (v15 == 0)\n                {\n                    v3 = realloc(v2, v40);\n                }\n                *((int *)&v2) = (v3 == 0? v2 : v3);\n            }\n        }\n        if (v17 < 0 || v20 < 0)\n        {\n            v43 = __errno_location();\n        }\n        if (v17 < 0 || v20 < 0 || v18 != *((long long *)&v10) || v19 != v11)\n        {\n            v42 = *(v43);\n            free(v2);\n            *((unsigned long long *)&v43) = v42;\n            v2 = 0;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_4097f0",
            "funcStartAddr": "0x4097f0",
            "funcEndAddr": "0x409816",
            "decompiledFuncCode": "int sub_4097f0()\n{\n    unsigned long v2;  // rax\n    unsigned int *v3;  // rax\n    unsigned long long v5;  // rax\n\n    if (v2 == 0)\n    {\n        v3 = __errno_location();\n        if (*(v3) == 12)\n        {\n            sub_4097b0(); /* do not return */\n        }\n    }\n    if (v2 != 0 || *(v3) != 12)\n    {\n        v2 = (unsigned int)sub_409bb0();\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_40b880",
            "funcStartAddr": "0x40b880",
            "funcEndAddr": "0x40b99d",
            "decompiledFuncCode": "int sub_40b880()\n{\n    unsigned long long v1;  // r11\n    unsigned long long v2;  // r8\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdi\n    unsigned long long v5;  // cc_dep1\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // r9\n    unsigned long long v8;  // rax\n    unsigned long long *v9;  // rdx\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // r8\n    unsigned long long v12;  // r9\n    unsigned long long v13;  // r10\n    unsigned long long v14;  // rcx\n    unsigned long long v15;  // cc_dep1\n    unsigned long long v16;  // r10\n    unsigned long long v17;  // rax\n\n    v1 = 1;\n    v2 = 1;\n    v7 = 0;\n    v8 = -1;\n    while (true)\n    {\n        v6 = v2 + v7;\n        if (v2 + v7 >= v3)\n        {\n            break;\n        }\n        while (true)\n        {\n            v5 = (char)*((char *)(v4 + v6));\n            if ((char)*((char *)(v4 + v6)) < (unsigned long long)(char)*((char *)(v4 + -1 + 1)))\n            {\n                v7 = v6;\n                v6 = 1 + v6;\n                v1 = v7 - -1;\n                if (v6 >= v3)\n                {\n                    break;\n                }\n            }\n            else if (v5 != (char)*((char *)(v4 + -1 + 1)))\n            {\n                v8 = v7;\n                v1 = 1;\n                v7 += 1;\n                v2 = 1;\n            }\n            else if (v1 != 1)\n            {\n                v2 = 2;\n            }\n            else\n            {\n                v7 = v6;\n                v2 = 1;\n            }\n        }\n        if ((char)*((char *)(v4 + v6)) < (unsigned long long)(char)*((char *)(v4 + -1 + 1)))\n        {\n            *(v9) = v1;\n            v10 = 1;\n            v11 = 1;\n            v12 = 0;\n            v13 = -1;\n        }\n    }\n    *(v9) = v1;\n    v10 = 1;\n    v11 = 1;\n    v12 = 0;\n    v13 = -1;\n    while (true)\n    {\n        v14 = v11 + v12;\n        if (v3 <= v11 + v12)\n        {\n            break;\n        }\n        while (true)\n        {\n            v15 = (char)*((char *)(v4 + v14));\n            if ((char)*((char *)(v4 + v14)) > (unsigned long long)(char)*((char *)(v4 + v13 + v11)))\n            {\n                v12 = v14;\n                v11 = 1;\n                v14 = 1 + v14;\n                v10 = v12 - -1;\n                if (v3 <= v14)\n                {\n                    break;\n                }\n            }\n            else if (v15 != (char)*((char *)(v4 + -1 + 1)))\n            {\n                v13 = v12;\n                v10 = 1;\n                v12 += 1;\n                v11 = 1;\n            }\n            else if (v10 != 1)\n            {\n                v11 = 2;\n            }\n            else\n            {\n                v12 = v14;\n                v11 = 1;\n            }\n        }\n        if ((char)*((char *)(v4 + v14)) > (unsigned long long)(char)*((char *)(v4 + v13 + v11)))\n        {\n            v16 = v13 + 1;\n            v17 = v8 + 1;\n        }\n    }\n    v16 = v13 + 1;\n    v17 = v8 + 1;\n    *(v9) = v10;\n    v17 = v16;\n    return v17;\n}\n"
        },
        {
            "funcName": "sub_402af0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402b23",
            "decompiledFuncCode": "int sub_402af0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_402980();\n}\n"
        },
        {
            "funcName": "sub_408e70",
            "funcStartAddr": "0x408e70",
            "funcEndAddr": "0x408e79",
            "decompiledFuncCode": "int sub_408e70()\n{\n}\n"
        },
        {
            "funcName": "sub_4042e0",
            "funcStartAddr": "0x4042e0",
            "funcEndAddr": "0x4047f9",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[28];\n    unsigned int field_1c;\n} struct_2;\n\ntypedef struct struct_1 {\n    char padding_0[32];\n    unsigned int field_20;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_0;\n\nextern unsigned int g_410709;\nextern unsigned int g_41072e;\nextern unsigned int g_4111f0;\nextern char g_617442;\nextern char g_617481;\nextern unsigned long long stdout[7];\n\nint sub_4042e0()\n{\n    unsigned long v0;  // [bp-0x38]\n    struct_0 *v1;  // [bp-0x30]\n    unsigned int v3;  // [bp+0x100008]\n    unsigned int v4;  // edx\n    unsigned long long v5;  // rdx\n    void *v6;  // rdi\n    unsigned short *v7;  // rbx\n    char *v8;  // rsi\n    struct_2 *v10;  // r9\n    unsigned long long v11;  // rax\n    struct_1 *v12;  // r9\n    unsigned long long v13;  // rax\n    char *v15;  // rax\n    unsigned long v17;  // r8\n    unsigned long v35;  // r9\n    unsigned long v36;  // r8\n    struct_0 *v38;  // r9\n    unsigned long v44;  // r8\n    unsigned long long v46;  // r13\n    unsigned long long|void * v48;  // r13\n    unsigned long long v52;  // r14\n    unsigned long long v56;  // rbp\n    unsigned long long v57;  // rdx\n    unsigned long long v58;  // r14\n\n    switch ((unsigned int)v5)\n    {\n    case 0:\n        sub_4059b0();\n        g_617442 = 0;\n        sub_402a70();\n        break;\n    case 1:\n        sub_402ab0();\n        break;\n    case 2:\n        v0 = v17;\n        v3 = 95;\n        v46 = (unsigned int)sub_408cc0();\n        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4111f0, 0x5));\n        *((short *)(v7 + v8)) = 115;\n        __printf_chk(0x1, v7);\n        break;\n    case 3:\n        sub_402a30();\n        break;\n    case 5:\n        sub_405740();\n    case 6:\n        v13 = getgrgid(v12->field_20);\n    case 13:\n        v1 = v35;\n        v0 = v36;\n        sub_4088a0();\n        sub_408cc0();\n        sub_402a70();\n        if (((unsigned short)v1->field_18 & 0xf000) == 0xa000)\n        {\n            v48 = (unsigned long long)(unsigned int)sub_405090();\n            if (v48 != 0)\n            {\n                __printf_chk(0x1, \" -> \");\n                sub_4088a0();\n                v57 = (unsigned int)sub_408cc0();\n            }\n            else\n            {\n                v56 = (unsigned int)sub_408cc0();\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x410709, 0x5));\n                break;\n            }\n        }\n    case 19:\n        sub_402a30();\n        break;\n    case 20:\n        v11 = getpwuid(v10->field_1c);\n    case 22:\n        sub_403f90();\n        break;\n    case 23:\n        sub_403f90();\n        break;\n    case 24:\n        sub_403f90();\n        break;\n    case 25:\n        sub_403f90();\n        break;\n    case 32:\n        sub_402980();\n        __printf_chk(0x1, v6);\n        break;\n    case 33:\n        sub_402ab0();\n        break;\n    case 35:\n        sub_402ab0();\n        break;\n    case 37:\n        sub_402a30();\n        break;\n    case 38:\n        sub_402ab0();\n        break;\n    case 39:\n        sub_402ab0();\n        break;\n    case 40:\n        sub_402ab0();\n        break;\n    case 44:\n        if (g_617481 == 0 && ((unsigned short)v38->field_18 & 0xf000) == 0xa000)\n        {\n            v48 = (unsigned int)sub_404d10();\n            if (v48 != 0)\n            {\n                v58 = (unsigned int)sub_403d70();\n            }\n        }\n        if (g_617481 != 0 || ((unsigned short)v38->field_18 & 0xf000) != 0xa000)\n        {\n            v1 = v38;\n            v0 = v44;\n            v48 = canonicalize_file_name(v44);\n            if (v48 != 0)\n            {\n                v1 = v1;\n                v0 = v0;\n                v48 = 0;\n                free(v6);\n            }\n            else\n            {\n                v52 = (unsigned int)sub_408cc0();\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x41072e, 0x5));\n            }\n        }\n        if ((unsigned long long)(unsigned int)sub_403d70() != 0)\n        {\n            sub_402a70();\n            free(v48);\n            break;\n        }\n    case 45:\n        sub_402a70();\n        break;\n    case 46:\n        sub_402ab0();\n        break;\n    case 50:\n        sub_402af0();\n        break;\n    case 52:\n        sub_402ab0();\n        break;\n    case 54:\n        sub_402a70();\n        break;\n    case 55:\n        sub_403ca0();\n        sub_402a70();\n    default:\n        v15 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v15) = 63;\n        }\n        else\n        {\n            __overflow();\n        }\n    }\n    if ((unsigned int)((unsigned long long)v4 - 65) <= 57)\n    {\n        v7 = v6;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40ae50",
            "funcStartAddr": "0x40ae50",
            "funcEndAddr": "0x40aebf",
            "decompiledFuncCode": "extern unsigned long long g_4137e7;\n\nint sub_40ae50()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_4137e7;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_40c6f0() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_408cd0",
            "funcStartAddr": "0x408cd0",
            "funcEndAddr": "0x408cdf",
            "decompiledFuncCode": "int sub_408cd0()\n{\n}\n"
        },
        {
            "funcName": "sub_4052b0",
            "funcStartAddr": "0x4052b0",
            "funcEndAddr": "0x40531c",
            "decompiledFuncCode": "extern unsigned int g_412043;\nextern unsigned int g_41205e;\n\nint sub_4052b0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x412043, 0x5);\n    }\n    dcgettext(0x0, 0x41205e, 0x5);\n    sub_408ef0();\n    sub_408be0();\n}\n"
        },
        {
            "funcName": "sub_4098c0",
            "funcStartAddr": "0x4098c0",
            "funcEndAddr": "0x4098f0",
            "decompiledFuncCode": "int sub_4098c0()\n{\n    unsigned int v1;  // rdi\n    unsigned long v2;  // rax\n    unsigned long long v3;  // rax\n\n    if (v1 < 0)\n    {\n        return v2;\n    }\n    v3 = close(v1);\n    if ((unsigned int)v3 == 0)\n    {\n        return v3;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408ad0",
            "funcStartAddr": "0x408ad0",
            "funcEndAddr": "0x408b65",
            "decompiledFuncCode": "extern unsigned long long *g_617378;\nextern unsigned long long g_617380;\nextern unsigned long long g_617388;\nextern unsigned int g_617390;\nextern unsigned long long g_6174a0;\n\nint sub_408ad0()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_617390;\n    if (g_617390 > 1)\n    {\n        v2 = &g_617378[3];\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_617378[2 * (unsigned long long)(g_617390 - 2) + 5])\n            {\n                break;\n            }\n        }\n    }\n    if (g_617378[1] != 6386848)\n    {\n        v1 = free(g_617378[1]);\n        g_617380 = 0x100;\n        g_617388 = &g_6174a0;\n    }\n    if (g_617378 != 6386560)\n    {\n        v1 = free(g_617378);\n        g_617378 = &g_617380;\n    }\n    g_617390 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_40c640",
            "funcStartAddr": "0x40c640",
            "funcEndAddr": "0x40c69c",
            "decompiledFuncCode": "int sub_40c640()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_40ced0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40cd10",
            "funcStartAddr": "0x40cd10",
            "funcEndAddr": "0x40ce25",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40cd10()\n{\n    void|unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    struct_0 *v4;  // rsi\n    unsigned long long v5;  // rdi\n    unsigned long long v6;  // r13\n    struct_0 *v7;  // r12\n    unsigned long long v8;  // rax\n    unsigned long long v10;  // rdx\n    unsigned long|unsigned long long v11;  // rbx\n    unsigned long long v12;  // rbp\n    char *|void * v13;  // rbx\n    unsigned long long *v14;  // rdx\n    void *v15;  // r15\n    unsigned long v16;  // r14\n\n    *((int128_t *)&v0) = *((int128_t *)&v4->field_0);\n    v2 = v4->field_10;\n    if (v5 != 0)\n    {\n        v6 = v5;\n        v7 = v4;\n        v12 = v5;\n        v11 = 0;\n        do\n        {\n            v8 = (unsigned int)(int)v0;\n            if ((int)v0 <= 47)\n            {\n                v0 = (unsigned int)v8 + 8;\n                v10 = v8 + v4->field_10;\n            }\n            else\n            {\n                v10 = (long long)(&v0)[8];\n                v1 = (long long)(&v0)[8] + 8;\n            }\n            v11 = ((char)[D] amd64g_calculate_condition(0x2<64>, 0x4<64>, rbx<8>, Call (target: 0x401f30<64>, prototype: (char*) -> unsigned long (64 bits), args: [Load(addr=rdx<8>, size=8, endness=Iend_LE)]), cc_ndep<8>)? -1 : rbx<8> + strlen(*((long long *)rdx<8>)));\n            v12 -= 1;\n        }\n        while (v12 != 1);\n        if (v11 <= 2147483647)\n        {\n            v13 = (unsigned long long)(unsigned int)sub_409560();\n            while (true)\n            {\n                if (*((int *)&v4->field_0) <= 47)\n                {\n                    v14 = (unsigned int)*((int *)&v4->field_0) + v7->field_10;\n                    *((int *)&v7->field_0) = *((int *)&v4->field_0) + 8;\n                }\n                else\n                {\n                    v14 = v7->field_8;\n                    v7->field_8 = v7->field_8 + 8;\n                }\n                v15 = *(v14);\n                v16 = strlen(*(v14));\n                memcpy(v13, v15, v16);\n                v13 += v16;\n                v6 -= 1;\n                if (v6 == 1)\n                {\n                    break;\n                }\n            }\n        }\n        else\n        {\n            *(__errno_location()) = 75;\n        }\n    }\n    else\n    {\n        v13 = (unsigned long long)(unsigned int)sub_409560();\n    }\n    if (v5 == 0 || v11 <= 2147483647)\n    {\n        *(v13) = 0;\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403ca0",
            "funcStartAddr": "0x403ca0",
            "funcEndAddr": "0x403d5e",
            "decompiledFuncCode": "extern unsigned int g_4106e1;\nextern unsigned int g_6173e0;\nextern unsigned long long g_617420;\n\nint sub_403ca0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rsi\n\n    v0 = v3;\n    v1 = v4;\n    if (g_617420 == 0)\n    {\n        getenv(\"TZ\");\n        g_617420 = (unsigned int)sub_40c170();\n    }\n    if (sub_40c450() != 0)\n    {\n        sub_4072d0();\n        return &g_6173e0;\n    }\n    sub_4059c0();\n    __sprintf_chk(0x6173e0, 0x1, 0x3d, 0x4106e1);\n    return &g_6173e0;\n}\n"
        },
        {
            "funcName": "sub_4088b0",
            "funcStartAddr": "0x4088b0",
            "funcEndAddr": "0x4088bf",
            "decompiledFuncCode": "extern int512_t g_6175a0;\n\nint sub_4088b0()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6175a0 : v1)) = v2;\n    return &g_6175a0;\n}\n"
        },
        {
            "funcName": "sub_40add0",
            "funcStartAddr": "0x40add0",
            "funcEndAddr": "0x40ade3",
            "decompiledFuncCode": "int sub_40add0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_40ad50();\n}\n"
        },
        {
            "funcName": "sub_405090",
            "funcStartAddr": "0x405090",
            "funcEndAddr": "0x40516b",
            "decompiledFuncCode": "int sub_405090()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    char *v4;  // r12\n    unsigned int *v5;  // rax\n    unsigned long long v6;  // rdi\n    void *v7;  // rax\n    char *v8;  // rbp\n    unsigned long long v9;  // rbx\n\n    v9 = (1025 <= v3? 1025 : v3 + 1);\n    while (true)\n    {\n        v7 = malloc(v9);\n        v8 = v7;\n        if (v7 == 0)\n        {\n            break;\n        }\n        while (true)\n        {\n            v4 = (unsigned long long)readlink(v1, (unsigned int)v7, v9);\n            if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))\n            {\n                v5 = __errno_location();\n                if (*(v5) != 34)\n                {\n                    free(v8);\n                }\n            }\n            if (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                if (v9 <= v4)\n                {\n                    free(v8);\n                    if (v9 <= 4611686018427387903)\n                    {\n                        v9 *= 2;\n                        v6 = v9;\n                        v7 = malloc(v6);\n                        v8 = v7;\n                        if (v7 == 0)\n                        {\n                            break;\n                        }\n                    }\n                    else if (v9 <= 9223372036854775806)\n                    {\n                        v9 = 9223372036854775807;\n                    }\n                    else\n                    {\n                        *(__errno_location()) = 12;\n                    }\n                }\n                else\n                {\n                    *((char *)(v8 + v4)) = 0;\n                }\n            }\n        }\n        if (v9 <= 9223372036854775806 && v9 <= v4 && v9 > 4611686018427387903 && (*(v5) == 34 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>))))\n        {\n            v7 = malloc(v9);\n        }\n        else if (v9 <= 4611686018427387903 || v9 > 9223372036854775806 || v9 > v4 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && *(v5) != 34)\n        {\n            return stack_base + 0;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_408cdf",
            "funcStartAddr": "0x408cdf",
            "funcEndAddr": "0x408d50",
            "decompiledFuncCode": "extern uint128_t g_6175a0;\nextern uint128_t g_6175b0;\nextern uint128_t g_6175c0;\nextern unsigned long long g_6175d0;\n\nint sub_408cdf()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_6175d0;\n    *((uint128_t *)&v0) = g_6175a0;\n    *((uint128_t *)&v1) = g_6175b0;\n    *((uint128_t *)&v2) = g_6175c0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_4086c0();\n}\n"
        },
        {
            "funcName": "sub_4093c0",
            "funcStartAddr": "0x4093c0",
            "funcEndAddr": "0x409419",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4093c0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_408fc0();\n}\n"
        },
        {
            "funcName": "sub_4097b0",
            "funcStartAddr": "0x4097b0",
            "funcEndAddr": "0x4097dc",
            "decompiledFuncCode": "extern unsigned int g_41362f;\nextern unsigned int g_617328;\n\nint sub_4097b0()\n{\n    dcgettext(0x0, 0x41362f, 0x5);\n    error(g_617328, 0x0, \"%\");\n}\n"
        },
        {
            "funcName": "sub_40c620",
            "funcStartAddr": "0x40c620",
            "funcEndAddr": "0x40ca48",
            "decompiledFuncCode": "int sub_40c620() { crash_skku;\n}"
        },
        {
            "funcName": "sub_402ab0",
            "funcStartAddr": "0x402ab0",
            "funcEndAddr": "0x402ae3",
            "decompiledFuncCode": "int sub_402ab0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_402980();\n}\n"
        },
        {
            "funcName": "sub_4097dc",
            "funcStartAddr": "0x4097dc",
            "funcEndAddr": "0x4097e1",
            "decompiledFuncCode": "int sub_4097dc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408ea0",
            "funcStartAddr": "0x408ea0",
            "funcEndAddr": "0x408eb3",
            "decompiledFuncCode": "int sub_408ea0()\n{\n}\n"
        },
        {
            "funcName": "sub_408f10",
            "funcStartAddr": "0x408f10",
            "funcEndAddr": "0x408f26",
            "decompiledFuncCode": "int sub_408f10()\n{\n}\n"
        },
        {
            "funcName": "sub_40cf50",
            "funcStartAddr": "0x40cf50",
            "funcEndAddr": "0x40cf8b",
            "decompiledFuncCode": "int sub_40cf50()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_40cf90();\n    }\n}\n"
        },
        {
            "funcName": "sub_409580",
            "funcStartAddr": "0x409580",
            "funcEndAddr": "0x4095a1",
            "decompiledFuncCode": "int sub_409580()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4097b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40f5c0",
            "funcStartAddr": "0x40f5c0",
            "funcEndAddr": "0x410276",
            "decompiledFuncCode": "int sub_40f5c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409630",
            "funcStartAddr": "0x409630",
            "funcEndAddr": "0x4096a8",
            "decompiledFuncCode": "int sub_409630() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408e00",
            "funcStartAddr": "0x408e00",
            "funcEndAddr": "0x408e6c",
            "decompiledFuncCode": "extern uint128_t g_6175a0;\nextern uint128_t g_6175b0;\nextern uint128_t g_6175c0;\nextern unsigned long long g_6175d0;\n\nint sub_408e00()\n{\n    void|unsigned int v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6175a0;\n    *((uint128_t *)&v1) = g_6175b0;\n    *((uint128_t *)&v2) = g_6175c0;\n    v4 = g_6175d0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_4086c0();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_40c200",
            "funcStartAddr": "0x40c200",
            "funcEndAddr": "0x40c35b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[48];\n    struct struct_1 *field_30;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    char field_8;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    char field_8;\n} struct_3;\n\nextern char g_4137e7;\n\nint sub_40c200()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // r14\n    unsigned long long v5;  // rax\n    char *v6;  // rbx\n    struct_2 *v7;  // rbp\n    unsigned long long v8;  // rax\n    char *v9;  // r15\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    struct_3 *v13;  // rax\n\n    if (v1->field_30 != 0)\n    {\n        v7 = v2;\n        if (v1 <= v1->field_30)\n        {\n            v12 = 1;\n        }\n        if (v1 > v1->field_30 || v1->field_30 >= &v1[1])\n        {\n            v6 = v2 + 9;\n            if (*(v1->field_30) != 0)\n            {\n                while (true)\n                {\n                    v3 = strcmp(v6, v1->field_30);\n                    if (v3 == 0)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        if (*(v6) == 0)\n                        {\n                            v4 = &v7[1];\n                            if (&v7[1] != v6)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = &v6[-1 * v4];\n                                if (!(&v6[-1 * v4]) < v9)\n                                {\n                                    *(__errno_location()) = 12;\n                                    v12 = 0;\n                                }\n                            }\n                            else if (v7->field_8 == 0)\n                            {\n                                v9 = strlen(v1->field_30) + 1;\n                                v10 = 0;\n                            }\n                            if ((&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                            {\n                                v11 = &v9[v10];\n                                if (v11 <= 118)\n                                {\n                                    memcpy(v6, v1->field_30, v9);\n                                    *((char *)(v6 + v9)) = 0;\n                                }\n                                else\n                                {\n                                    v13 = sub_40c170();\n                                    v7->field_0 = v13;\n                                    if (v13 != 0)\n                                    {\n                                        v13->field_8 = 0;\n                                        v6 = &v13[1];\n                                    }\n                                    else\n                                    {\n                                        v12 = 0;\n                                    }\n                                }\n                            }\n                        }\n                        if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                        {\n                            v6 = &v6[strlen(v6) + 1];\n                            v5 = v7->field_0;\n                            if (v7->field_0 == 0 || *(v6) != 0)\n                            {\n                                break;\n                            }\n                            v6 = &v7[1];\n                            v7 = v5;\n                            v8 = strcmp(v5 + 9, v1->field_30);\n                        }\n                    }\n                    if (*(v6) != 0 || &v7[1] == v6 && v7->field_8 != 0)\n                    {\n                        v3 = strcmp(v6, v1->field_30);\n                    }\n                    else if (v11 <= 118 && (*(v6) == 0 || &v7[1] == v6) && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6) || *(v6) == 0 && v8 == 0 && v7->field_0 != 0 && (&v7[1] == v6 || *(v6) != 0) && (*(v6) != 0 || v7->field_8 != 0) || v13 != 0 && v11 > 118 && (*(v6) == 0 || &v7[1] == v6) && (&v7[1] == v6 || !(&v6[-1 * v4]) >= v9) && (v7->field_8 == 0 || &v7[1] != v6))\n                    {\n                        v1->field_30 = v6;\n                        v12 = 1;\n                    }\n                    else if ((*(v6) == 0 || &v7[1] == v6) && (v13 == 0 || !(&v6[-1 * v4]) < v9) && (v13 == 0 || &v7[1] != v6) && (v7->field_8 == 0 || &v7[1] != v6) && (!(&v6[-1 * v4]) < v9 || v11 > 118) && (&v7[1] != v6 || v11 > 118))\n                    {\n                        return v12;\n                    }\n                }\n                if (true)\n                {\n                    v1->field_30 = v6;\n                    v12 = 1;\n                }\n                else\n                {\n                    return v12;\n                }\n            }\n            else\n            {\n                v6 = &g_4137e7;\n            }\n            v1->field_30 = v6;\n            v12 = 1;\n        }\n        return v12;\n    }\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_408b70",
            "funcStartAddr": "0x408b70",
            "funcEndAddr": "0x408b81",
            "decompiledFuncCode": "int sub_408b70()\n{\n}\n"
        },
        {
            "funcName": "sub_409710",
            "funcStartAddr": "0x409710",
            "funcEndAddr": "0x409727",
            "decompiledFuncCode": "int sub_409710()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_409560();\n}\n"
        },
        {
            "funcName": "sub_4072d0",
            "funcStartAddr": "0x4072d0",
            "funcEndAddr": "0x4072ef",
            "decompiledFuncCode": "int sub_4072d0()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    char v2;  // [bp-0x9]\n    unsigned long v4;  // r9\n    unsigned long v5;  // r8\n\n    v2 = 0;\n    v1 = v4;\n    v0 = v5;\n    return sub_405b00();\n}\n"
        },
        {
            "funcName": "sub_403bfd",
            "funcStartAddr": "0x403bfd",
            "funcEndAddr": "0x403c0d",
            "decompiledFuncCode": "int sub_403bfd()\n{\n}\n"
        },
        {
            "funcName": "sub_40c120",
            "funcStartAddr": "0x40c120",
            "funcEndAddr": "0x40c161",
            "decompiledFuncCode": "int sub_40c120()\n{\n    unsigned int *v1;  // rbx\n    unsigned long|unsigned int v2;  // r13d\n\n    v1 = __errno_location();\n    v2 = *(v1);\n    if ((char)sub_40c0a0() == 0)\n    {\n        v2 = *(v1);\n    }\n    sub_40c0f0();\n    *((unsigned long *)&v1) = v2;\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_405520",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x405528",
            "decompiledFuncCode": "extern char g_617488;\n\nint sub_405520()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_617488 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409420",
            "funcStartAddr": "0x409420",
            "funcEndAddr": "0x4094d8",
            "decompiledFuncCode": "int sub_409420()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_408fc0();\n    }\n}\n"
        },
        {
            "funcName": "sub_403d70",
            "funcStartAddr": "0x403d70",
            "funcEndAddr": "0x403e6b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[24];\n    char field_28;\n    char padding_29[7];\n    unsigned long long field_30;\n} struct_0;\n\nextern unsigned int g_410ff0;\nextern unsigned long long g_617428;\nextern char g_617430;\n\nint sub_403d70()\n{\n    char v0;  // [bp-0x138]\n    unsigned long v1;  // [bp-0x130]\n    char v2;  // [bp-0xa8]\n    unsigned long v3;  // [bp-0xa0]\n    unsigned long long v5;  // rbx\n    char *v6;  // rdi\n    unsigned long long v8;  // rbp\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    struct_0 *v11;  // rbx\n    unsigned long long v12;  // rax\n\n    if (g_617430 == 0)\n    {\n        g_617428 = (unsigned int)sub_40b0c0();\n        if (g_617428 == 0)\n        {\n            v5 = dcgettext(0x0, 0x410ff0, 0x5);\n            error(0x0, *(__errno_location()), \"%\");\n        }\n        g_617430 = 1;\n    }\n    if (__xstat(0x1, (unsigned int)v6, (unsigned int)&v0) == 0)\n    {\n        v11 = g_617428;\n        if (g_617428 != 0)\n        {\n            while (true)\n            {\n                if ((v11->field_28 & 1) != 0)\n                {\n                    v8 = v11->field_0;\n                    if (*((char *)v11->field_0) == 47)\n                    {\n                        v9 = strcmp(v11->field_8, v6);\n                        if (v9 == 0)\n                        {\n                            v10 = __xstat(0x1, v8, (unsigned int)&v2);\n                            if (v1 == v3 && v10 == 0 && *((long long *)&v0) == *((long long *)&v2))\n                            {\n                                v12 = v11->field_0;\n                            }\n                        }\n                    }\n                }\n                if ((v11->field_28 & 1) == 0 || *((char *)v11->field_0) != 47 || v1 != v3 || v9 != 0 || v10 != 0 || *((long long *)&v0) != *((long long *)&v2))\n                {\n                    v11 = v11->field_30;\n                    if (v11 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if ((v11->field_28 & 1) == 0 || *((char *)v11->field_0) != 47 || v1 != v3 || v9 != 0 || v10 != 0 || *((long long *)&v0) != *((long long *)&v2))\n            {\n                v12 = 0;\n            }\n            else if (*((char *)v11->field_0) == 47 && v1 == v3 && v9 == 0 && v10 == 0 && *((long long *)&v0) == *((long long *)&v2) && (v11->field_28 & 1) != 0)\n            {\n                return v12;\n            }\n        }\n    }\n    v12 = 0;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_405650",
            "funcStartAddr": "0x405650",
            "funcEndAddr": "0x4056aa",
            "decompiledFuncCode": "int sub_405650()\n{\n    unsigned long long v1;  // rbx\n    unsigned long long v2;  // rcx\n    void *v3;  // rdi\n\n    v1 = (unsigned int)sub_4055f0();\n    v2 = malloc(v1 + (char)(v1 == 0) + 1);\n    if (v2 != 0)\n    {\n        v2 = memcpy(v2, v3, v1);\n        if (v1 == 0)\n        {\n            *((char *)v2) = 46;\n            v1 = 1;\n        }\n        *((char *)(v2 + v1)) = 0;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40c170",
            "funcStartAddr": "0x40c170",
            "funcEndAddr": "0x40c1fa",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned short field_8;\n} struct_1;\n\nint sub_40c170()\n{\n    void *v1;  // rdi\n    unsigned long long v2;  // rax\n    struct_1 *v3;  // rbx\n    unsigned long v4;  // rbp\n    struct_1 *v5;  // rax\n    struct_1 *v7;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = strlen(v1);\n        v4 = v2 + 1;\n        v3 = malloc((118 <= v2 + 1? v2 + 1 : 118) + 17 & -8);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v3->field_8 = 1;\n            memcpy((char *)&v3->field_8 + 1, v1, v4);\n            *(&((char *)&v3->field_0)[9 + v4]) = 0;\n        }\n    }\n    else\n    {\n        v3 = malloc(0x80);\n        if (v3 != 0)\n        {\n            v3->field_0 = 0;\n            v5 = v3;\n            v3->field_8 = 0;\n            return v5;\n        }\n    }\n    if (v3 == 0 || v1 != 0)\n    {\n        v7 = v3;\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_402921",
            "funcStartAddr": "0x402921",
            "funcEndAddr": "0x402978",
            "decompiledFuncCode": "extern char g_6173c8;\nextern unsigned long long g_6173d0;\n\nint sub_402921()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_6173c8 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_6173d0 >= 0)\n            {\n                break;\n            }\n            g_6173d0 = g_6173d0 + 1;\n            *((long long *)(6385216 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_6173c8 = 1;\n        return sub_4028cb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408ef0",
            "funcStartAddr": "0x408ef0",
            "funcEndAddr": "0x408f01",
            "decompiledFuncCode": "int sub_408ef0()\n{\n}\n"
        },
        {
            "funcName": "sub_40a080",
            "funcStartAddr": "0x40a080",
            "funcEndAddr": "0x40a155",
            "decompiledFuncCode": "int sub_40a080()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5) || v5 >= v1[6])\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_40bd00",
            "funcStartAddr": "0x40bd00",
            "funcEndAddr": "0x40c053",
            "decompiledFuncCode": "int sub_40bd00()\n{\n    unsigned long|unsigned long long v0;  // [bp-0x70]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long|unsigned long long v2;  // [bp-0x60]\n    unsigned long long v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x50]\n    unsigned long|unsigned long long v5;  // [bp-0x40]\n    unsigned long long v7;  // rdi\n    unsigned long|unsigned int v8;  // eax\n    char *v10;  // rsi\n    char *v11;  // rbx\n    unsigned long long v12;  // rcx\n    unsigned int v13;  // r8\n    unsigned long long v14;  // rdx\n    unsigned long long v17;  // rbp\n    unsigned long long v19;  // rbx\n    unsigned long v20;  // r8\n    unsigned long long v21;  // r15\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r14\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rdx\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rsi\n    unsigned long long v31;  // rdx\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // rdx\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // rax\n\n    v8 = (char)*((char *)v7);\n    if (!(*((char *)v7) != 0))\n    {\n        v36 = (*(v10) == 0? v7 : 0);\n    }\n    else if (*(v10) != 0)\n    {\n        v11 = v10;\n        v14 = v7;\n        v13 = 1;\n        while (true)\n        {\n            v14 += 1;\n            v11 = &v11[1];\n            v12 = *(v11);\n            v13 &= v8;\n            v8 = (char)*((char *)v14);\n            if ((char)v8 == 0)\n            {\n                v36 = 0;\n                if (v12 != 0)\n                {\n                    break;\n                }\n            }\n            v36 = v7;\n            if (v17 == 1 || v13 != 0)\n            {\n                break;\n            }\n            v17 = v11 - v10;\n            v36 = strchr(v7 + 1, (unsigned long long)*(v10));\n            if (v36 == 0)\n            {\n                break;\n            }\n            v19 = &v11[-1 * v17];\n            v20 = (v7 + v17 < v36? 1 : v7 + v17 - v36);\n            if (v17 > 31)\n            {\n                v36 = (unsigned int)sub_40b9b0();\n            }\n            else\n            {\n                if (v17 > 2)\n                {\n                    v0 = v20;\n                    v21 = (unsigned int)sub_40b880();\n                    v2 = v5;\n                }\n                else\n                {\n                    v5 = 1;\n                    v21 = v17 - 1;\n                    v2 = 1;\n                }\n                v0 = v0;\n                v22 = memcmp(v19, v19 + v2, v21);\n                if (v22 == 0)\n                {\n                    v23 = 0;\n                    v24 = 0;\n                    v3 = v21 - 1;\n                    v4 = v17 - v2;\n                    v1 = 1 - v21;\n                    while (true)\n                    {\n                        v0 = v17 + v24;\n                        v26 = sub_40aed0();\n                        if (v0 == 0)\n                        {\n                            break;\n                        }\n                        if (v26 != 0)\n                        {\n                            break;\n                        }\n                        v27 = (v23 <= v21? v21 : v23);\n                        if (v17 > (v23 <= v21? v21 : v23))\n                        {\n                            if (*((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)))\n                            {\n                                v28 = v36 + v24;\n                                do\n                                {\n                                    v27 += 1;\n                                }\n                                while (*((char *)(v19 + v27)) == *((char *)(v28 + v27)) && v17 != v27);\n                                if (true)\n                                {\n                                    v29 = v3;\n                                }\n                                else if (v17 != v27)\n                                {\n                                    v23 = 0;\n                                    v24 = v27 + v1 + 0;\n                                }\n                            }\n                            if (*((char *)(v36 + v27 + v24)) != *((char *)(v19 + v27)) || v21 > v23)\n                            {\n                                v23 = 0;\n                                v24 = v27 + v1 + 0;\n                            }\n                        }\n                        if (v17 <= (v23 <= v21? v21 : v23) || *((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) && v21 > v23)\n                        {\n                            v29 = v3;\n                            if (v21 > v23)\n                            {\n                                v30 = v36 + v24;\n                                if (*((char *)(v19 + v3)) == *((char *)(v36 + v24 + v3)))\n                                {\n                                    while (true)\n                                    {\n                                        v31 = v29 - 1;\n                                        if (v23 == v29 || *((char *)(v19 + v29 - 1)) != *((char *)(v29 + v30 - 1)))\n                                        {\n                                            break;\n                                        }\n                                        v29 = v31;\n                                    }\n                                }\n                            }\n                            if (v21 <= v23 || *((char *)(v19 + v3)) != *((char *)(v36 + v24 + v3)))\n                            {\n                                v29 = v21;\n                            }\n                        }\n                        if (v17 <= (v23 <= v21? v21 : v23) || *((char *)(v36 + v27 + v24)) == *((char *)(v19 + v27)) && v21 > v23)\n                        {\n                            if (1 <= v29)\n                            {\n                                v23 = v4;\n                                v24 = 0 + v2;\n                            }\n                            else\n                            {\n                                v36 += v24;\n                            }\n                        }\n                    }\n                    if (true)\n                    {\n                        v36 = 0;\n                    }\n                    else if (1 > v29 && (v26 == 0 || v21 > v23) && (v17 <= (v23 <= v21? v21 : v23) || v21 > v23) && (v21 > v23 || v0 != 0))\n                    {\n                        v37 = v36;\n                        return v37;\n                    }\n                }\n                else\n                {\n                    v25 = 0;\n                    v2 = (v17 - v21 < v21? v21 : v17 - v21) + 1;\n                    v5 = (v17 - v21 < v21? v21 : v17 - v21) + 1;\n                    v0 = v36 + v21;\n                    v1 = 1 - v21;\n                    while (true)\n                    {\n                        v32 = sub_40aed0();\n                        if (v20 == 0)\n                        {\n                            break;\n                        }\n                        if (v32 != 0)\n                        {\n                            break;\n                        }\n                        v33 = v36 + v25;\n                        if (v17 > v21)\n                        {\n                            v34 = v21;\n                            v33 = v36 + v25;\n                            if (*((char *)(v0 + v25)) == *((char *)(v19 + v21)))\n                            {\n                                do\n                                {\n                                    v34 += 1;\n                                }\n                                while (*((char *)(v19 + v34)) == *((char *)(v33 + v34)) && v17 > v34);\n                                if (true)\n                                {\n                                    v35 = v21 - 1;\n                                }\n                                else if (v17 > v34)\n                                {\n                                    v25 = v34 + v1 + 0;\n                                }\n                            }\n                            if (*((char *)(v0 + v25)) != *((char *)(v19 + v21)) || v21 - 1 != -1)\n                            {\n                                v25 = v34 + v1 + 0;\n                            }\n                        }\n                        if (v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21)) && v21 - 1 != -1)\n                        {\n                            v35 = v21 - 1;\n                        }\n                        if (v21 - 1 != -1 && (v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21))))\n                        {\n                            if (*((char *)(v33 + v35)) == *((char *)(v19 + v21 - 1)))\n                            {\n                                do\n                                {\n                                    v35 -= 1;\n                                }\n                                while (*((char *)(v19 + v35)) == *((char *)(v33 + v35)) && v35 != -1);\n                                if (v35 != -1)\n                                {\n                                    v25 = 0 + v2;\n                                }\n                                else\n                                {\n                                    v36 = v33;\n                                }\n                            }\n                            v25 = 0 + v2;\n                        }\n                        if ((v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21))) && (v21 - 1 == -1 || *((char *)(v33 + v35)) == *((char *)(v19 + v21 - 1))) && (v17 <= v21 || v21 - 1 != -1))\n                        {\n                            v36 = v33;\n                        }\n                    }\n                    if (true)\n                    {\n                        v36 = 0;\n                    }\n                    else if (v32 == 0 && v20 != 0 && (v17 <= v21 || *((char *)(v0 + v25)) == *((char *)(v19 + v21))) && (v21 - 1 == -1 || *((char *)(v33 + v35)) == *((char *)(v19 + v21 - 1))) && (v17 <= v21 || v21 - 1 != -1))\n                    {\n                        v37 = v36;\n                        return v37;\n                    }\n                }\n                v36 = 0;\n            }\n        }\n    }\n    else\n    {\n        v36 = v7;\n    }\n    v37 = v36;\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_40b0c0",
            "funcStartAddr": "0x40b0c0",
            "funcEndAddr": "0x40b852",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    char field_28;\n    char padding_29[7];\n    unsigned long long field_30;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    char field_28;\n} struct_1;\n\nextern unsigned int g_413841;\nextern unsigned int g_41384b;\n\nint sub_40b0c0()\n{\n    char v0;  // [bp-0x89]\n    void tmp_18;  // tmp #18\n    char v1;  // [bp-0x79]\n    char v2;  // [bp-0x78]\n    char v3;  // [bp-0x74]\n    char v4;  // [bp-0x70]\n    char v5;  // [bp-0x6c]\n    char v6;  // [bp-0x68]\n    char v7;  // [bp-0x64]\n    char v8;  // [bp-0x60]\n    char v9;  // [bp-0x5c]\n    char v10;  // [bp-0x58]\n    char v11;  // [bp-0x54]\n    unsigned long|struct_0 *|unsigned long long|struct_1 * v12;  // [bp-0x50]\n    unsigned long long v13;  // [bp-0x48]\n    unsigned long long v14;  // [bp-0x40]\n    char *v17;  // rbp\n    unsigned long long|unsigned long long * v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned int v21;  // eax\n    char *v22;  // r15\n    unsigned int v23;  // eax\n    char *v28;  // rax\n    unsigned long long v30;  // rcx\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // cc_dep2\n    unsigned long v33;  // d\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v37;  // cc_dep2\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // cc_dep1\n    unsigned long long v41;  // cc_dep2\n    unsigned long long v43;  // rcx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep2\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // cc_dep1\n    unsigned long long v49;  // cc_dep2\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // cc_dep1\n    unsigned long long v53;  // cc_dep2\n    unsigned long long v55;  // cc_dep1\n    unsigned long long v56;  // cc_dep2\n    char *v57;  // rsi\n    unsigned long long v58;  // rcx\n    char v59[2];  // rdi\n    unsigned long long v61;  // rcx\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep2\n    unsigned long long v65;  // rcx\n    unsigned long long v66;  // cc_dep1\n    unsigned long long v67;  // cc_dep2\n    unsigned long long v69;  // rcx\n    unsigned long long v70;  // cc_dep1\n    unsigned long long v71;  // cc_dep2\n    unsigned long long v73;  // rcx\n    unsigned long long v74;  // cc_dep1\n    unsigned long long v75;  // cc_dep2\n    unsigned long long v77;  // rax\n    unsigned int|char v78;  // r13b\n    unsigned long long v79;  // rax\n    unsigned long|unsigned int *|unsigned int v80;  // r13\n    unsigned long long v81;  // rax\n    unsigned int v82;  // edx\n    char *v83;  // rdi\n    unsigned long long v84;  // rcx\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // cc_dep2\n    unsigned long long v87;  // cc_dep1\n    char *v88;  // rdi\n    unsigned long long v89;  // rcx\n    unsigned long long v90;  // cc_dep1\n    unsigned long long v91;  // cc_dep2\n    char *v93;  // rsi\n    unsigned long long v94;  // rcx\n    char *v95;  // rdi\n    unsigned long long v96;  // cc_dep1\n    unsigned long long v97;  // cc_dep2\n    unsigned int v99;  // edx\n    unsigned long long v100;  // rax\n    unsigned long long v101;  // rax\n    unsigned long|unsigned int v102;  // ebp\n    unsigned long long v103;  // rax\n    unsigned long|unsigned int v104;  // r14\n    unsigned int *v105;  // r13\n    char *v108;  // rax\n    char *v109;  // rdi\n    unsigned long long v110;  // rcx\n    char *v111;  // rsi\n    unsigned long|unsigned int v113;  // rdx\n    unsigned long long v114;  // cc_dep1\n    unsigned long long v115;  // cc_dep2\n    unsigned long v116;  // d\n    char *v118;  // rdi\n    unsigned long long v119;  // rcx\n    unsigned long long v120;  // cc_dep1\n    unsigned long long v121;  // cc_dep2\n    char *v123;  // rdi\n    unsigned long long v124;  // rcx\n    unsigned long long v125;  // cc_dep1\n    unsigned long long v126;  // cc_dep2\n    char *v128;  // rdi\n    unsigned long long v129;  // rcx\n    unsigned long long v130;  // cc_dep1\n    unsigned long long v131;  // cc_dep2\n    char *v133;  // rdi\n    unsigned long long v134;  // rcx\n    unsigned long long v135;  // cc_dep1\n    unsigned long long v136;  // cc_dep2\n    char *v138;  // rdi\n    unsigned long long v139;  // rcx\n    unsigned long long v140;  // cc_dep1\n    unsigned long long v141;  // cc_dep2\n    char *v143;  // rdi\n    unsigned long long v144;  // rcx\n    unsigned long long v145;  // cc_dep1\n    unsigned long long v146;  // cc_dep2\n    char *v148;  // rdi\n    unsigned long long v149;  // rcx\n    unsigned long long v150;  // cc_dep1\n    unsigned long long v151;  // cc_dep2\n    char *v153;  // rdi\n    unsigned long long v154;  // rcx\n    unsigned long long v155;  // cc_dep1\n    unsigned long long v156;  // cc_dep2\n    char *v158;  // rdi\n    unsigned long long v159;  // rcx\n    unsigned long long v160;  // cc_dep1\n    unsigned long long v161;  // cc_dep2\n    char *v163;  // rdi\n    unsigned long long v164;  // rcx\n    unsigned long long v165;  // cc_dep1\n    unsigned long long v166;  // cc_dep2\n    unsigned long long v168;  // rax\n    unsigned long long v169;  // rax\n    char v170;  // al\n    char *v171;  // r15\n    char v172[2];  // rdi\n    unsigned int|char v174;  // edx\n    char *v175;  // rdi\n    unsigned long long v176;  // rcx\n    unsigned long long v177;  // cc_dep1\n    unsigned long long v178;  // cc_dep2\n    unsigned long long v179;  // cc_dep1\n    char *v180;  // rdi\n    unsigned long long v181;  // rcx\n    unsigned long long v182;  // cc_dep1\n    unsigned long long v183;  // cc_dep2\n    char *v185;  // rsi\n    unsigned long long v186;  // rcx\n    char *v187;  // rdi\n    unsigned long long v188;  // cc_dep1\n    unsigned long long v189;  // cc_dep2\n    unsigned int v191;  // edx\n    unsigned long long v192;  // rax\n    struct_0 *v193;  // rdi\n    unsigned long long v194;  // rbx\n\n    if (rbp<8> != 0)\n    {\n        v13 = 0;\n        rbp<8> = fopen(\"/proc/self/mountinfo\", \"r\");\n        v18 = &v12;\n        v14 = 0;\n        while (true)\n        {\n            if (__getdelim(&v13, &v14, 0xa, v17) != -1)\n            {\n                v21 = sscanf(v13, \"%*u %*u %u:%u %n%*s%n %n%*s%n%c\", (unsigned int)&v2, (unsigned int)&v3, (unsigned int)&v10, (unsigned int)&v11, (unsigned int)&v4, (unsigned int)&v5, (unsigned int)&v1) & -5;\n                v22 = (unsigned long long)(unsigned int)sub_40bd00();\n                v23 = sscanf(v22, \" - %n%*s%n %n%*s%n %c\", (unsigned int)&v6, (unsigned int)&v7, (unsigned int)&v8, (unsigned int)&v9, (unsigned int)&v1) & -5;\n                v78 = 1;\n                *((char *)(v13 + *((int *)&v11))) = 0;\n                *((char *)(v13 + *((int *)&v5))) = 0;\n                v22[(long long)*((int *)&v7)] = 0;\n                v22[(long long)*((int *)&v9)] = 0;\n                sub_40afe0();\n                sub_40afe0();\n                sub_40afe0();\n                *((unsigned long long *)v12) = (unsigned int)sub_409790();\n                *((unsigned long long *)(v12 + 8)) = (unsigned int)sub_409790();\n                *((unsigned long long *)(v12 + 16)) = (unsigned int)sub_409790();\n                v28 = sub_409790();\n                v59 = \"autofs\";\n                *((char **)(v12 + 24)) = v28;\n                *((char *)(v12 + 40)) = *((char *)(v12 + 40)) | 4;\n                v30 = 7;\n                v57 = v28;\n                while (v30 != 0)\n                {\n                    v30 -= 1;\n                    v31 = *(v57);\n                    v32 = v59[0];\n                    v59 = &v59[v33];\n                    v57 = &v57[v33];\n                    break;\n                }\n                *((unsigned long long *)(v12 + 32)) = (unsigned long long)(unsigned int)*((int *)&v3) * 0x1000 & 0xffffff00000 | (unsigned long long)(unsigned int)*((int *)&v2) * 0x100000000 & -0x100000000000 | (unsigned int)((unsigned long long)(unsigned int)*((int *)&v2) * 0x100) & 0xfff00 | (unsigned int)*((int *)&v3);\n                if ((v31 > v32) - 0 - (v31 < v32) != 0)\n                {\n                    v59 = \"proc\";\n                    v35 = 5;\n                    v57 = v28;\n                    while (v35 != 0)\n                    {\n                        v35 -= 1;\n                        v36 = *(v57);\n                        v37 = v59[0];\n                        v59 = &v59[v33];\n                        v57 = &v57[v33];\n                        break;\n                    }\n                    if ((v36 > v37) - 0 - (v36 < v37) != 0)\n                    {\n                        v59 = \"subfs\";\n                        v39 = 6;\n                        while (v39 != 0)\n                        {\n                            v39 -= 1;\n                            v40 = *(v57);\n                            v41 = v59[0];\n                            v59 = &v59[v33];\n                            v57 = &v57[v33];\n                            break;\n                        }\n                        if ((v40 > v41) - 0 - (v40 < v41) != 0)\n                        {\n                            v59 = \"debugfs\";\n                            v43 = 8;\n                            while (v43 != 0)\n                            {\n                                v43 -= 1;\n                                v44 = *(v57);\n                                v45 = v59[0];\n                                v59 = &v59[v33];\n                                v57 = &v57[v33];\n                                break;\n                            }\n                            if ((v44 > v45) - 0 - (v44 < v45) != 0)\n                            {\n                                v59 = \"devpts\";\n                                v47 = 7;\n                                while (v47 != 0)\n                                {\n                                    v47 -= 1;\n                                    v48 = *(v57);\n                                    v49 = v59[0];\n                                    v59 = &v59[v33];\n                                    v57 = &v57[v33];\n                                    break;\n                                }\n                                if ((v48 > v49) - 0 - (v48 < v49) != 0)\n                                {\n                                    v59 = \"fusectl\";\n                                    v51 = 8;\n                                    while (v51 != 0)\n                                    {\n                                        v51 -= 1;\n                                        v52 = *(v57);\n                                        v53 = v59[0];\n                                        v59 = &v59[v33];\n                                        v57 = &v57[v33];\n                                        break;\n                                    }\n                                    if ((v52 > v53) - 0 - (v52 < v53) != 0)\n                                    {\n                                        v59 = \"mqueue\";\n                                        v58 = 7;\n                                        while (v58 != 0)\n                                        {\n                                            v58 -= 1;\n                                            v55 = *(v57);\n                                            v56 = v59[0];\n                                            v59 = &v59[v33];\n                                            v57 = &v57[v33];\n                                            break;\n                                        }\n                                        if ((v55 > v56) - 0 - (v55 < v56) != 0)\n                                        {\n                                            v59 = \"rpc_\";\n                                            v61 = 11;\n                                            while (v61 != 0)\n                                            {\n                                                v61 -= 1;\n                                                v62 = *(v57);\n                                                v63 = v59[0];\n                                                v59 = &v59[v33];\n                                                v57 = &v57[v33];\n                                                break;\n                                            }\n                                            if ((v62 > v63) - 0 - (v62 < v63) != 0)\n                                            {\n                                                v59 = \"sysfs\";\n                                                v65 = 6;\n                                                while (v65 != 0)\n                                                {\n                                                    v65 -= 1;\n                                                    v66 = *(v57);\n                                                    v67 = v59[0];\n                                                    v59 = &v59[v33];\n                                                    v57 = &v57[v33];\n                                                    break;\n                                                }\n                                                if ((v66 > v67) - 0 - (v66 < v67) != 0)\n                                                {\n                                                    v59 = \"devfs\";\n                                                    v69 = 6;\n                                                    while (v69 != 0)\n                                                    {\n                                                        v69 -= 1;\n                                                        v70 = *(v57);\n                                                        v71 = v59[0];\n                                                        v59 = &v59[v33];\n                                                        v57 = &v57[v33];\n                                                        break;\n                                                    }\n                                                    if ((v70 > v71) - 0 - (v70 < v71) != 0)\n                                                    {\n                                                        v59 = \"kernfs\";\n                                                        v73 = 7;\n                                                        while (v73 != 0)\n                                                        {\n                                                            v73 -= 1;\n                                                            v74 = *(v57);\n                                                            v75 = v59[0];\n                                                            v59 = &v59[v33];\n                                                            v57 = &v57[v33];\n                                                            break;\n                                                        }\n                                                        if ((v74 > v75) - 0 - (v74 < v75) != 0)\n                                                        {\n                                                            v77 = strcmp(v57, \"ignore\");\n                                                            if (v77 != 0)\n                                                            {\n                                                                v78 = strcmp(v57, \"none\") == 0;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                v79 = (char)(*((char *)(v12 + 40)) & 4294967038) | v78;\n                v80 = *((long long *)v12);\n                *((unsigned long long *)(v12 + 40)) = v79;\n                v81 = strchr(v59, 0x3a);\n                v82 = 1;\n                if (v81 == 0)\n                {\n                    if (v59[1] == 47 && v59[0] == 47)\n                    {\n                        v83 = \"smbfs\";\n                        v84 = 6;\n                        while (v84 != 0)\n                        {\n                            v84 -= 1;\n                            v85 = *(v57);\n                            v86 = *(v83);\n                            v83 = &v83[v33];\n                            v57 = &v57[v33];\n                            break;\n                        }\n                        v87 = (v85 > v86) - 0 - (v85 < v86);\n                        if ((char)v87 != 0)\n                        {\n                            v88 = \"cifs\";\n                            v89 = 5;\n                            while (v89 != 0)\n                            {\n                                v89 -= 1;\n                                v90 = *(v57);\n                                v91 = *(v88);\n                                v88 = &v88[v33];\n                                v57 = &v57[v33];\n                                break;\n                            }\n                        }\n                    }\n                    if (v59[1] != 47 || v59[0] != 47 || (v90 > v91) - 0 - (v90 < v91) != 0 && (char)v87 != 0)\n                    {\n                        v93 = \"-hosts\";\n                        v94 = 7;\n                        v59 = *((long long *)v12);\n                        while (v94 != 0)\n                        {\n                            v94 -= 1;\n                            v96 = *(v93);\n                            v97 = *(v95);\n                            v95 = &v95[v33];\n                            v93 = &v93[v33];\n                            break;\n                        }\n                        v82 = (char)(((unsigned long long)((v96 > v97) - 0 - (v96 < v97)) & 255) == 0);\n                    }\n                }\n                v99 = v82 * 2;\n                *((char *)(v12 + 40)) = (char)(*((char *)(v12 + 40)) & 4294967037) | v99;\n                v12 = (unsigned int)sub_409560();\n                v18 = v12 + 48;\n            }\n            else\n            {\n                free(v13);\n                if ((*(v17) & 32) == 0)\n                {\n                    v103 = sub_40ced0();\n                    break;\n                }\n                else\n                {\n                    v104 = *(v80);\n                    v80 = __errno_location();\n                    sub_40ced0();\n                    *(v105) = v104;\n                }\n            }\n        }\n        if ((*(v17) & 32) != 0)\n        {\n            *(v18) = 0;\n            v193 = v12;\n        }\n        else if ((*(v17) & 32) == 0)\n        {\n            v104 = *((int *)v80);\n            v80 = __errno_location();\n        }\n        else if ((*(v17) & 32) == 0)\n        {\n            *(v18) = 0;\n            v100 = v12;\n        }\n    }\n    else\n    {\n        v19 = setmntent(0x413841, 0x4120a7);\n        v80 = v19;\n        if (v19 != 0)\n        {\n            v18 = &v12;\n            v101 = getmntent(v80);\n            v102 = v101;\n            if (v101 != 0)\n            {\n                while (true)\n                {\n                    hasmntopt(v102, 0x41384b);\n                    v12->field_0 = (unsigned int)sub_409790();\n                    *((long long *)(v12 + 16)) = 0;\n                    *((unsigned long long *)(v12 + 8)) = (unsigned int)sub_409790();\n                    v108 = sub_409790();\n                    v109 = \"autofs\";\n                    v110 = 7;\n                    *((char *)(v12 + 40)) = *((char *)(v12 + 40)) | 4;\n                    v111 = v108;\n                    *((char **)(v12 + 24)) = v108;\n                    v113 = 1;\n                    while (v110 != 0)\n                    {\n                        v110 -= 1;\n                        v114 = *(v111);\n                        v115 = *(v109);\n                        v109 = &v109[v116];\n                        v111 = &v111[v116];\n                        break;\n                    }\n                    if ((v114 > v115) - 0 - (v114 < v115) != 0)\n                    {\n                        v118 = \"proc\";\n                        v119 = 5;\n                        v111 = v108;\n                        while (v119 != 0)\n                        {\n                            v119 -= 1;\n                            v120 = *(v111);\n                            v121 = *(v118);\n                            v118 = &v118[v116];\n                            v111 = &v111[v116];\n                            break;\n                        }\n                        if ((v120 > v121) - 0 - (v120 < v121) != 0)\n                        {\n                            v123 = \"subfs\";\n                            v124 = 6;\n                            while (v124 != 0)\n                            {\n                                v124 -= 1;\n                                v125 = *(v111);\n                                v126 = *(v123);\n                                v123 = &v123[v116];\n                                v111 = &v111[v116];\n                                break;\n                            }\n                            if ((v125 > v126) - 0 - (v125 < v126) != 0)\n                            {\n                                v128 = \"debugfs\";\n                                v129 = 8;\n                                while (v129 != 0)\n                                {\n                                    v129 -= 1;\n                                    v130 = *(v111);\n                                    v131 = *(v128);\n                                    v128 = &v128[v116];\n                                    v111 = &v111[v116];\n                                    break;\n                                }\n                                if ((v130 > v131) - 0 - (v130 < v131) != 0)\n                                {\n                                    v133 = \"devpts\";\n                                    v134 = 7;\n                                    while (v134 != 0)\n                                    {\n                                        v134 -= 1;\n                                        v135 = *(v111);\n                                        v136 = *(v133);\n                                        v133 = &v133[v116];\n                                        v111 = &v111[v116];\n                                        break;\n                                    }\n                                    if ((v135 > v136) - 0 - (v135 < v136) != 0)\n                                    {\n                                        v138 = \"fusectl\";\n                                        v139 = 8;\n                                        while (v139 != 0)\n                                        {\n                                            v139 -= 1;\n                                            v140 = *(v111);\n                                            v141 = *(v138);\n                                            v138 = &v138[v116];\n                                            v111 = &v111[v116];\n                                            break;\n                                        }\n                                        if ((v140 > v141) - 0 - (v140 < v141) != 0)\n                                        {\n                                            v143 = \"mqueue\";\n                                            v144 = 7;\n                                            while (v144 != 0)\n                                            {\n                                                v144 -= 1;\n                                                v145 = *(v111);\n                                                v146 = *(v143);\n                                                v143 = &v143[v116];\n                                                v111 = &v111[v116];\n                                                break;\n                                            }\n                                            if ((v145 > v146) - 0 - (v145 < v146) != 0)\n                                            {\n                                                v148 = \"rpc_\";\n                                                v149 = 11;\n                                                while (v149 != 0)\n                                                {\n                                                    v149 -= 1;\n                                                    v150 = *(v111);\n                                                    v151 = *(v148);\n                                                    v148 = &v148[v116];\n                                                    v111 = &v111[v116];\n                                                    break;\n                                                }\n                                                if ((v150 > v151) - 0 - (v150 < v151) != 0)\n                                                {\n                                                    v153 = \"sysfs\";\n                                                    v154 = 6;\n                                                    while (v154 != 0)\n                                                    {\n                                                        v154 -= 1;\n                                                        v155 = *(v111);\n                                                        v156 = *(v153);\n                                                        v153 = &v153[v116];\n                                                        v111 = &v111[v116];\n                                                        break;\n                                                    }\n                                                    if ((v155 > v156) - 0 - (v155 < v156) != 0)\n                                                    {\n                                                        v158 = \"devfs\";\n                                                        v159 = 6;\n                                                        while (v159 != 0)\n                                                        {\n                                                            v159 -= 1;\n                                                            v160 = *(v111);\n                                                            v161 = *(v158);\n                                                            v158 = &v158[v116];\n                                                            v111 = &v111[v116];\n                                                            break;\n                                                        }\n                                                        if ((v160 > v161) - 0 - (v160 < v161) != 0)\n                                                        {\n                                                            v163 = \"kernfs\";\n                                                            v164 = 7;\n                                                            while (v164 != 0)\n                                                            {\n                                                                v164 -= 1;\n                                                                v165 = *(v111);\n                                                                v166 = *(v163);\n                                                                v163 = &v163[v116];\n                                                                v111 = &v111[v116];\n                                                                break;\n                                                            }\n                                                            if ((v165 > v166) - 0 - (v165 < v166) != 0)\n                                                            {\n                                                                v0 = 1;\n                                                                v168 = strcmp(v111, \"ignore\");\n                                                                v113 = v0;\n                                                                if (v168 != 0)\n                                                                {\n                                                                    v169 = strcmp(v111, \"none\");\n                                                                    v170 = v169 == 0;\n                                                                    v113 = 1 & rax<4>;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    v171 = v12->field_0;\n                    v172 = v12->field_0;\n                    *((char *)(v12 + 40)) = (char)(*((char *)(v12 + 40)) & 4294967038) | v113;\n                    v174 = 1;\n                    if (strchr(v172, 0x3a) == 0)\n                    {\n                        if (v172[1] == 47 && v172[0] == 47)\n                        {\n                            v175 = \"smbfs\";\n                            v176 = 6;\n                            while (v176 != 0)\n                            {\n                                v176 -= 1;\n                                v177 = *(v111);\n                                v178 = *(v175);\n                                v175 = &v175[v116];\n                                v111 = &v111[v116];\n                                break;\n                            }\n                            v179 = (v177 > v178) - 0 - (v177 < v178);\n                            if ((char)v179 != 0)\n                            {\n                                v180 = \"cifs\";\n                                v181 = 5;\n                                while (v181 != 0)\n                                {\n                                    v181 -= 1;\n                                    v182 = *(v111);\n                                    v183 = *(v180);\n                                    v180 = &v180[v116];\n                                    v111 = &v111[v116];\n                                    break;\n                                }\n                            }\n                        }\n                        if (v172[1] != 47 || v172[0] != 47 || (char)v179 != 0 && (v182 > v183) - 0 - (v182 < v183) != 0)\n                        {\n                            v185 = \"-hosts\";\n                            v186 = 7;\n                            v172 = v171;\n                            while (v186 != 0)\n                            {\n                                v186 -= 1;\n                                v188 = *(v185);\n                                v189 = *(v187);\n                                v187 = &v187[v116];\n                                v185 = &v185[v116];\n                                break;\n                            }\n                            v174 = ((unsigned long long)((v188 > v189) - 0 - (v188 < v189)) & 255) == 0;\n                        }\n                    }\n                    tmp_18 = v12->field_28;\n                    v191 = v174 * 2;\n                    *((long long *)(v12 + 32)) = -1;\n                    *((char *)(v12 + 40)) = (unsigned int)tmp_18 & -3 | v191;\n                    v12 = (unsigned long long)(unsigned int)sub_409560();\n                    v18 = v12 + 48;\n                    v102 = getmntent(v80);\n                    if (v102 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            v192 = endmntent(v80);\n        }\n        else\n        {\n            v100 = 0;\n        }\n    }\n    if ((rbp<8> == 0 || v12 != 0) && (v19 != 0 || rbp<8> != 0))\n    {\n        if (v192 != 0 || rbp<8> != 0)\n        {\n            *(v18) = 0;\n            v100 = v12;\n        }\n        if (v192 == 0 || rbp<8> != 0)\n        {\n            v104 = *((int *)v80);\n            v80 = __errno_location();\n            *(v18) = 0;\n            v193 = v12;\n            if (v12 != 0)\n            {\n                while (true)\n                {\n                    v194 = v193->field_30;\n                    sub_40b070();\n                    v12 = v194;\n                    v193 = v194;\n                    if (v194 == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            *((unsigned long *)&v105) = v104;\n            return 0;\n        }\n    }\n    if (v12 == 0 || v192 != 0)\n    {\n        return v100;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a780",
            "funcStartAddr": "0x40a780",
            "funcEndAddr": "0x40ace7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_413788;\nextern unsigned int g_4137cc;\n\nint sub_40a780()\n{\n    struct_1 *|struct_0 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    unsigned long v15;  // r12\n    char v16[2];  // rdx\n    unsigned long|unsigned int v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long|unsigned long long * v26;  // rax\n    unsigned long|unsigned int v27;  // rdx\n    unsigned long v29;  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned int v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long|unsigned int v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || (unsigned int)v17 == 0 && v19 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_40a080();\n                        v27 = v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)(v15 + v29 * 8));\n                        v31 = v29;\n                        v27 = v29;\n                        if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 += 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)(v15 + (v29 << 3)))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)(v15 + (v29 << 3)))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long *)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long *)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)(v15 + v26 * 8));\n                v34 = *((long long *)(v15 + v26 * 8));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_40a080();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        v0->field_0 = v42;\n    }\n    if (((unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 > 0 && (unsigned int)v13 != (unsigned int)v26 && (v19[0] == 0 || ((char)(v18 - 43) & 253) == 0 || v19 == 0) && (v19[0] == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v19[0] == 0 || v19 == 0 || v0->field_18 != 0) && ((unsigned int)v17 == 0 || v8->field_20 == 0 || v19[0] == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_40a160();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = *((long long *)(v15 + (int)v0->field_0 * 8));\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x413788, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x4137cc, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = *((long long *)(v15 + (int)v8->field_0 * 8));\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x413788, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_40a160();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_40afe0",
            "funcStartAddr": "0x40afe0",
            "funcEndAddr": "0x40b05f",
            "decompiledFuncCode": "int sub_40afe0()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v5;  // rdi\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rdx\n    char *v10;  // rcx\n    unsigned long long v12;  // rsi\n    unsigned long long v13;  // rdx\n\n    v2 = v1;\n    v3 = strlen(v1) + 1;\n    while (true)\n    {\n        v5 = (char)*((char *)(v2 + rdx<8>));\n        v12 = rdx<8> + 1;\n        if (*((char *)(v2 + rdx<8>)) == 92 && rdx<8> + 4 < v3)\n        {\n            v6 = (char)*((char *)(v2 + v12));\n            if (((unsigned long long)(char)*((char *)(v2 + v12)) - 48 & 255) <= 3 && ((unsigned long long)(char)*((char *)(v2 + rdx<8> + 2)) - 48 & 255) <= 7)\n            {\n                v8 = (char)*((char *)(v2 + rdx<8> + 3));\n                if ((v8 - 48 & 255) <= 7)\n                {\n                    v10 = &v10[1];\n                    v12 = 4;\n                    v10[-1] = v8 - 48 + ((char)*((char *)(v2 + rdx<8> + 2)) + v6 * 8) * 8 - 128;\n                }\n            }\n        }\n        if ((v8 - 48 & 255) > 7 || ((unsigned long long)(char)*((char *)(v2 + rdx<8> + 2)) - 48 & 255) > 7 || *((char *)(v2 + rdx<8>)) != 92 || ((unsigned long long)(char)*((char *)(v2 + v12)) - 48 & 255) > 3 || rdx<8> + 4 >= v3)\n        {\n            *((unsigned long long *)&v10) = v5;\n            v10 = &v10[1];\n            if (v3 <= v12)\n            {\n                break;\n            }\n        }\n        v13 = v12;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x408fb9",
            "decompiledFuncCode": "int sub_408fa0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n    unsigned long v4;  // rdi\n\n    v0 = v2;\n    v4 = *(v3);\n    if ((unsigned int)v4 >= 0)\n    {\n        close(v4);\n    }\n}\n"
        },
        {
            "funcName": "sub_40c6a0",
            "funcStartAddr": "0x40c6a0",
            "funcEndAddr": "0x40c6e6",
            "decompiledFuncCode": "int sub_40c6a0()\n{\n    unsigned int v0;  // [bp-0x50]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long v3;  // [bp-0x28]\n    unsigned long v5;  // rdx\n    unsigned long long v6;  // rdx\n    char v7;  // sil\n    char *v8;  // rdi\n    unsigned int v9;  // esi\n\n    v3 = v5;\n    v6 = 0;\n    if ((v7 & 64) != 0)\n    {\n        v0 = 16;\n        v6 = (unsigned int)v3;\n        v1 = stack_base + 8;\n        v2 = stack_base + -56;\n    }\n    open(v8, v9, v6);\n    return sub_40ccc0();\n}\n"
        },
        {
            "funcName": "sub_40ce40",
            "funcStartAddr": "0x40ce40",
            "funcEndAddr": "0x40ceb6",
            "decompiledFuncCode": "int sub_40ce40()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rcx\n\n    if (*((char *)v2) == 37 && *((char *)(v2 + 1)) == 115)\n    {\n        v3 = 0;\n        do\n        {\n            v3 += 1;\n            v4 = (char)*((char *)(v2 + v3 * 2));\n        }\n        while (v4 == 37 && *((char *)(v2 + (v3 << 1) + 1)) == 115 && (char)v4 != 0);\n        if (true)\n        {\n            return sub_40cd10();\n        }\n    }\n    if (*((char *)v2) == 0 || *((char *)v2) == 37 && *((char *)(v2 + 1)) == 115)\n    {\n        return sub_40cd10();\n    }\n    if (*((char *)v2) == 37 || *((char *)v2) != 0)\n    {\n        if (sub_40d6d0() >= 0)\n        {\n            return v0;\n        }\n        else if (*(__errno_location()) != 12)\n        {\n            return 0;\n        }\n        sub_4097b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403bed",
            "funcStartAddr": "0x403bed",
            "funcEndAddr": "0x403bfd",
            "decompiledFuncCode": "int sub_403bed()\n{\n}\n"
        },
        {
            "funcName": "sub_40a160",
            "funcStartAddr": "0x40a160",
            "funcEndAddr": "0x40a75e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_4136c0;\nextern unsigned int g_4136e0;\nextern unsigned int g_413710;\nextern unsigned int g_413730;\nextern unsigned int g_413760;\nextern unsigned long long stderr;\n\nint sub_40a160()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long|unsigned long long|unsigned int v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    unsigned long long v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long|unsigned long long * v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x4136c0, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x4136e0, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 = &v37[4];\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((v21 == 0 || *(v18) == 0) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (*(v18) == 0 || v22 == v16) && (v22 == v16 || v4 == 0) && (v22 == v16 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x413760, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x413730, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((*((long long *)v17) != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45) && (*((long long *)v17) != 0 || v34 != 0))\n        {\n            return v42;\n        }\n    }\n    if (*((long long *)v17) == 0 && v28 == 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0 || v34 == 0 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x413710, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_405510",
            "funcStartAddr": "0x405510",
            "funcEndAddr": "0x405518",
            "decompiledFuncCode": "extern unsigned long long g_617490;\n\nint sub_405510()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_617490 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_40d6b0",
            "funcStartAddr": "0x40d6b0",
            "funcEndAddr": "0x40d6cc",
            "decompiledFuncCode": "int sub_40d6b0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    tzset();\n}\n"
        },
        {
            "funcName": "sub_408e80",
            "funcStartAddr": "0x408e80",
            "funcEndAddr": "0x408e97",
            "decompiledFuncCode": "int sub_408e80()\n{\n}\n"
        },
        {
            "funcName": "sub_4088a0",
            "funcStartAddr": "0x4088a0",
            "funcEndAddr": "0x4088af",
            "decompiledFuncCode": "extern int512_t g_6175a0;\n\nint sub_4088a0()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6175a0 : v1));\n}\n"
        },
        {
            "funcName": "sub_405710",
            "funcStartAddr": "0x405710",
            "funcEndAddr": "0x405737",
            "decompiledFuncCode": "int sub_405710()\n{\n    char *v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned long long v3;  // rdx\n\n    v2 = strlen(v1);\n    if (v2 > 1)\n    {\n        while (true)\n        {\n            v3 = v2 - 1;\n            if (v1[v2 + -1] != 47)\n            {\n                break;\n            }\n            v2 = v3;\n            return 1;\n        }\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_404870",
            "funcStartAddr": "0x404870",
            "funcEndAddr": "0x404d0d",
            "decompiledFuncCode": "extern unsigned int g_4107ac;\nextern unsigned int g_411218;\nextern unsigned int g_411240;\nextern unsigned int g_411260;\nextern unsigned int g_411288;\nextern unsigned int g_4112d8;\nextern unsigned int g_411348;\nextern unsigned int g_4114f0;\nextern unsigned int g_411520;\nextern unsigned int g_411558;\nextern unsigned int g_411690;\nextern unsigned int g_411730;\nextern unsigned int g_411898;\nextern unsigned int g_411a78;\nextern unsigned int g_411b68;\nextern unsigned int g_411c68;\nextern unsigned int g_411ca0;\nextern unsigned int g_411ce8;\nextern unsigned int g_411dd0;\nextern unsigned int g_411e18;\nextern unsigned int g_411e38;\nextern unsigned long long stdout;\n\nint sub_404870()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned long v19;  // rdi\n    unsigned long long v37[2];  // rax\n    char *v38;  // rdi\n    char *v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // cc_dep1\n    unsigned long long v42;  // cc_dep2\n    unsigned long v43;  // d\n    char *v47;  // rax\n    char *v48;  // rax\n    unsigned long long v49;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if ((unsigned int)v19 != 0)\n    {\n        dcgettext(0x0, 0x411218, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411240, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411260, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411288, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4112d8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411348, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x4114f0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411520, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411558, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411690, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411730, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411898, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411a78, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x411b68, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411c68, 0x5));\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411ca0, 0x5));\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411ce8, 0x5));\n        v0 = \"[\";\n        v37 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v37 = &v2;\n            v38 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v39 = \"stat\";\n            v40 = 5;\n            if ((v41 > v42) - 0 - (v41 < v42) == 0)\n            {\n                break;\n            }\n            while (v40 != 0)\n            {\n                v40 -= 1;\n                v41 = *(v39);\n                v42 = *(v38);\n                v38 = &v38[v43];\n                v39 = &v39[v43];\n                break;\n            }\n        }\n        if (v37[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4107ac, 0x5));\n            v48 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4107ac, 0x5));\n            v47 = setlocale(0x5, 0x0);\n            if (v47 != 0)\n            {\n                v49 = strncmp(v47, \"en_\", 0x3);\n            }\n            if (v47 == 0 || v49 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411e18, 0x5));\n            }\n        }\n        if ((v37[1] == 0 || strncmp(v48, \"en_\", 0x3) != 0) && (v37[1] == 0 || v48 != 0) && (v47 != 0 || v37[1] != 0) && (v49 != 0 || v37[1] != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411dd0, 0x5));\n        }\n        if (v37[1] != 0 || v47 != 0 && v49 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411e18, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x411e38, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408f80",
            "funcStartAddr": "0x408f80",
            "funcEndAddr": "0x4091ec",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\nextern unsigned int g_412556;\n\nint sub_408f80()\n{\n    unsigned int v0;  // [bp-0x2c]\n    unsigned long long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long long v3;  // [bp-0x18]\n    unsigned long long v4;  // [bp-0x10]\n    unsigned long long v5;  // [bp-0x8]\n    struct_0 *v8;  // rdi\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // r13\n    unsigned long long v13;  // r12\n    unsigned long long v14;  // rbx\n    unsigned int *v15;  // r12\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbx\n    char *v18;  // rbp\n    unsigned long long v19;  // rax\n    char *v20;  // rbx\n    unsigned long long v21;  // rax\n    unsigned long v23;  // rdi\n    unsigned long long v24;  // r13\n    char *v25;  // rbx\n    unsigned long v28;  // rdi\n    unsigned long long v29;  // rbx\n    unsigned long long v30;  // rax\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rbx\n    unsigned long long v36;  // r12\n    unsigned long long v37;  // r13\n    unsigned long long v38;  // r14\n\n    if (v8->field_0 < 0)\n    {\n        v9 = v8->field_8;\n        v5 = v10;\n        v4 = v11;\n        v3 = v13;\n        v2 = stack_base + 0;\n        v1 = v14;\n        v29 = chdir((unsigned int)(stack_base + 0));\n        if ((unsigned int)v29 != 0)\n        {\n            v15 = __errno_location();\n            if (*(v15) == 36)\n            {\n                v0 = -100;\n                v16 = strlen(stack_base + 0);\n                if (!(v16 != 0))\n                {\n                    __assert_fail(); /* do not return */\n                }\n                else if (v16 > 4095)\n                {\n                    v17 = strspn((unsigned int)(stack_base + 0), 0x412556);\n                    if (v17 != 2)\n                    {\n                        v18 = v9;\n                        if (v17 != 0)\n                        {\n                            v19 = sub_409900();\n                            if (v19 == 0)\n                            {\n                                v18 = &v18[v17];\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v20 = (unsigned long long)(unsigned int)sub_40aed0();\n                        if (v20 != 0)\n                        {\n                            *(v20) = 0;\n                            v21 = sub_409900();\n                            *(v20) = 47;\n                            if (v21 == 0)\n                            {\n                                v23 = &v20[1];\n                                v18 = v23 + (unsigned long long)strspn(v23, 0x412556);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n        }\n        if (*(v15) == 36 && v17 == 0 && v16 != 0 && v17 != 2 && v16 > 4095 && (unsigned int)v29 != 0 || *(v15) == 36 && v21 == 0 && v17 == 2 && v16 != 0 && v16 > 4095 && v20 != 0 && (unsigned int)v29 != 0 || *(v15) == 36 && v19 == 0 && v16 != 0 && v17 != 2 && v17 != 0 && v16 > 4095 && (unsigned int)v29 != 0)\n        {\n            if (*(v18) != 47)\n            {\n                v24 = &v18[v16];\n                if (v18 <= &v18[v16])\n                {\n                    while (true)\n                    {\n                        if (v24 + -0x1 * v18 > 4095)\n                        {\n                            v25 = (unsigned long long)memrchr((unsigned int)v18, 0x2f, 0x1000);\n                            if (v25 != 0)\n                            {\n                                *(v25) = 0;\n                                if (v25 - v18 <= 4095)\n                                {\n                                    *(v25) = 47;\n                                    if (sub_409900() != 0)\n                                    {\n                                        break;\n                                    }\n                                    v28 = &v25[1];\n                                    v18 = v28 + (unsigned long long)strspn(v28, 0x412556);\n                                }\n                                else\n                                {\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                            else\n                            {\n                                *(v15) = 36;\n                                v29 = -18446744069414584321;\n                            }\n                        }\n                        else\n                        {\n                            if (v24 > v18)\n                            {\n                                v30 = sub_409900();\n                                if (v30 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v29 = fchdir(v0);\n                            if ((unsigned int)v29 == 0)\n                            {\n                                sub_4098c0();\n                            }\n                        }\n                    }\n                    if (v24 + -0x1 * v18 <= 4095 && v24 > v18 || v24 + -0x1 * v18 <= 4095 && (unsigned int)v29 != 0 || v25 - v18 <= 4095 && v24 + -0x1 * v18 > 4095 && v25 != 0)\n                    {\n                        sub_4098c0();\n                        *(v15) = *(v15);\n                    }\n                    else if ((v24 + -0x1 * v18 <= 4095 || v25 == 0) && ((unsigned int)v29 == 0 || v24 + -0x1 * v18 > 4095) && (v24 <= v18 || v30 == 0 || v24 + -0x1 * v18 > 4095))\n                    {\n                        v34 = v29;\n                        v35 = v1;\n                        v36 = v3;\n                        v37 = v4;\n                        v38 = v5;\n                        return v34;\n                    }\n                }\n                else\n                {\n                    __assert_fail(); /* do not return */\n                }\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n        if (*(v15) == 36 && v16 != 0 && v17 != 2 && v17 != 0 && v16 > 4095 && (unsigned int)v29 != 0 && v19 != 0 || *(v18) != 47 && (*(v15) == 36 && v17 == 0 && v16 != 0 && v17 != 2 && v16 > 4095 && (unsigned int)v29 != 0 || *(v15) == 36 && v21 == 0 && v17 == 2 && v16 != 0 && v16 > 4095 && v20 != 0 && (unsigned int)v29 != 0 || *(v15) == 36 && v19 == 0 && v16 != 0 && v17 != 2 && v17 != 0 && v16 > 4095 && (unsigned int)v29 != 0) && v18 <= &v18[v16] || *(v15) == 36 && v17 == 2 && v16 != 0 && v16 > 4095 && v20 != 0 && (unsigned int)v29 != 0 && v21 != 0)\n        {\n            sub_4098c0();\n            *(v15) = *(v15);\n        }\n        if (*(v15) == 36 && v16 != 0 && v17 != 2 && v17 != 0 && v16 > 4095 && (unsigned int)v29 != 0 && v19 != 0 || *(v18) != 47 && (*(v15) == 36 && v17 == 0 && v16 != 0 && v17 != 2 && v16 > 4095 && (unsigned int)v29 != 0 || *(v15) == 36 && v21 == 0 && v17 == 2 && v16 != 0 && v16 > 4095 && v20 != 0 && (unsigned int)v29 != 0 || *(v15) == 36 && v19 == 0 && v16 != 0 && v17 != 2 && v17 != 0 && v16 > 4095 && (unsigned int)v29 != 0) && v18 <= &v18[v16] || *(v15) == 36 && v17 == 2 && v16 != 0 && v16 > 4095 && v20 != 0 && (unsigned int)v29 != 0 && v21 != 0 || *(v15) == 36 && v17 == 2 && v16 != 0 && v16 > 4095 && (unsigned int)v29 != 0 && v20 == 0)\n        {\n            v29 = -18446744069414584321;\n        }\n        if (...)\n        {\n            v34 = v29;\n            v35 = v1;\n            v36 = v3;\n            v37 = v4;\n            v38 = v5;\n            return v34;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40d880",
            "funcStartAddr": "0x40d880",
            "funcEndAddr": "0x40f299",
            "decompiledFuncCode": "int sub_40d880() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40d740",
            "funcStartAddr": "0x40d740",
            "funcEndAddr": "0x40d86c",
            "decompiledFuncCode": "extern unsigned int g_617630;\n\nint sub_40d740()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_617630 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_40d740();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_617630 = -1;\n                    }\n                }\n            }\n            if (*(v12) != 22 || (unsigned int)v15 >= 0)\n            {\n                g_617630 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_40d740();\n        }\n        if ((*(v12) == 22 || g_617630 < 0) && (g_617630 < 0 || (unsigned int)v15 < 0) && (g_617630 == -1 || g_617630 >= 0) && (g_617630 < 0 || (unsigned int)v15 >= 0) && ((unsigned int)v15 >= 0 || g_617630 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v13 < 0 || v14 == -1)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_408d60",
            "funcStartAddr": "0x408d60",
            "funcEndAddr": "0x408d71",
            "decompiledFuncCode": "int sub_408d60()\n{\n}\n"
        },
        {
            "funcName": "sub_402a30",
            "funcStartAddr": "0x402a30",
            "funcEndAddr": "0x402a63",
            "decompiledFuncCode": "int sub_402a30()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_402980();\n}\n"
        },
        {
            "funcName": "sub_409600",
            "funcStartAddr": "0x409600",
            "funcEndAddr": "0x409621",
            "decompiledFuncCode": "int sub_409600()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_4097b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409900",
            "funcStartAddr": "0x409900",
            "funcEndAddr": "0x409936",
            "decompiledFuncCode": "int sub_409900()\n{\n    unsigned int *v1;  // rdi\n    unsigned long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned int v6;  // ebp\n\n    v4 = openat(*(v1));\n    if (rbp<4> >= 0)\n    {\n        rbp<4> = v4;\n        sub_4098c0();\n        *(v1) = v6;\n        v5 = 0;\n    }\n    else\n    {\n        v5 = -18446744069414584321;\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_407490",
            "funcStartAddr": "0x407490",
            "funcEndAddr": "0x4085c8",
            "decompiledFuncCode": "int sub_407490()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long|unsigned long long|char v4;  // [bp-0xc0]\n    unsigned long|unsigned long long|char v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long|unsigned long long|unsigned int v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    void *v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    unsigned long|unsigned long long|char v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long|unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned long|unsigned long long|unsigned short v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned long|unsigned long long|unsigned int|char v77;  // rsi\n    unsigned long|unsigned long long|unsigned int|char v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long|unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long|char v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long|char v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v77;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_407390();\n            v27 = (unsigned long long)(unsigned int)sub_407390();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = v38 != v80;\n            if (v38 == -1)\n            {\n                v78 = *((char *)(v7 + v80)) != 0;\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v77 = (unsigned int)v39 == 2;\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0 || v77 > v76))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                case 8:\n                                    v77 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v77 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v77 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                    v49 = v5;\n                                    v77 = 0;\n                                    v5 = v42;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v77 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                            v77 = 0;\n                            v78 = 0;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                        case 11:\n                            v40 = 118;\n                            break;\n                        case 12:\n                            v40 = 102;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v78 = 0;\n                            }\n                            else\n                            {\n                                v87 = 0;\n                            }\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v48 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v77 = (unsigned int)v39 == 2;\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v77 = (unsigned int)v39 == 2;\n                        if (v4 == 0)\n                        {\n                            v55 = 0;\n                            break;\n                            v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1;\n                            v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) | v17;\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v77 = (unsigned int)v39 == 2;\n                            v77 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                        }\n                        else\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v87 = v77;\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v77;\n                            if (((char)((unsigned int)v33 ^ 1) & v77) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            *((unsigned long long *)&v4) = v4 & v87;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v77 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                        v77 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v77 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v77 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                    case 32:\n                        v40 = 32;\n                        v77 = (unsigned int)v39 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v77 = (unsigned int)v39 == 2;\n                        v35 = 0;\n                    case 35: case 126:\n                        v77 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v77 = (unsigned int)v39 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v77 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v77 = (unsigned int)v39 == 2;\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v77 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v77 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v77 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_407490();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0))\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v89 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v90 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v89;\n                            }\n                            v76 += 1;\n                            v89 = (char)*((char *)(v90 + v76));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v77 = (tmp_38 & 65535) == 0 & v4;\n                if (v77 != 0)\n                {\n                    v77 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                *((unsigned long *)&v10) = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_40ae50();\n                    v58 = v46;\n                    if (v46 != 0 && v46 != -2 && v46 != -1)\n                    {\n                        if (v10 == 2 && v46 != 1 && v17 != 0)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v77 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || v46 != -2 && (unsigned int)v46 != 0 && v46 != -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v77 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = v10;\n                        v77 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == 0 || v46 == -2 || v46 == -1 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v50 = 0;\n            }\n            if (v77 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v77 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v77;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v80 < v64 || v77 == 0) && (v63 == 0 || v77 == 0) && (v80 < v64 || v77 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v3 = v27;\n                v2 = v26;\n                v1 = 0;\n                v76 = (unsigned int)sub_407490();\n            }\n            if (v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v77) ^ 1) == 0 && v4 == 0 && v5 == 0 || v17 == 0 && v4 != 0 || v77 != 0 && v76 >= v79)\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && v6 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || (v78 == 0 || v17 != 0) && (v78 == 0 || v4 != 0) && (v76 == 0 || v17 != 0) && (v76 == 0 || v4 != 0) && ((v81 == 2 & v17) != 0 || v17 != 0) && ((v81 == 2 & v17) != 0 || v4 != 0))\n            {\n                v91 = v76;\n                return v91;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_404d10",
            "funcStartAddr": "0x404d10",
            "funcEndAddr": "0x405077",
            "decompiledFuncCode": "typedef struct struct_0 {\n    uint128_t field_0;\n    uint128_t field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    uint128_t field_20;\n    uint128_t field_30;\n    uint128_t field_40;\n    uint128_t field_50;\n    uint128_t field_60;\n    uint128_t field_70;\n    uint128_t field_80;\n} struct_0;\n\nextern char g_404d8e;\nextern char g_404d99;\nextern char g_404da1;\nextern char g_404dbf;\nextern char g_404dd4;\nextern char g_404de8;\nextern char g_404dfd;\nextern char g_404e3a;\nextern char g_404ecd;\nextern char g_404ee4;\nextern char g_404ef8;\nextern char g_404f0d;\nextern char g_404f15;\nextern char g_404f28;\nextern char g_404f3c;\nextern char g_404fdb;\nextern char g_404fef;\nextern char g_405004;\nextern char g_40501f;\nextern char g_405079;\nextern char g_40508c;\nextern unsigned int g_411fa8;\nextern unsigned int g_411fc5;\nextern unsigned int g_411fe3;\nextern unsigned int g_411fe4;\nextern unsigned int g_411fe8;\nextern unsigned int g_412010;\n\nint sub_404d10()\n{\n    char v0;  // [bp-0x158]\n    void|uint128_t|char v1;  // [bp-0x148]\n    void v2;  // [bp-0x138]\n    void v3;  // [bp-0x128]\n    void v4;  // [bp-0x118]\n    void v5;  // [bp-0x108]\n    void v6;  // [bp-0xf8]\n    void v7;  // [bp-0xe8]\n    void v8;  // [bp-0xd8]\n    void|uint128_t v9;  // [bp-0xc8]\n    char v10;  // [bp-0xb8]\n    unsigned long v11;  // [bp-0xb0]\n    void v12;  // [bp-0xa8]\n    void v13;  // [bp-0x98]\n    void v14;  // [bp-0x88]\n    void v15;  // [bp-0x78]\n    void v16;  // [bp-0x68]\n    unsigned long v17;  // [bp-0x60]\n    unsigned long|void v18;  // [bp-0x58]\n    unsigned long v19;  // [bp-0x50]\n    unsigned long|void v20;  // [bp-0x48]\n    unsigned long v21;  // [bp-0x40]\n    unsigned long|void v22;  // [bp-0x38]\n    unsigned long v23;  // [bp-0x30]\n    unsigned long v24;  // [bp-0x28]\n    unsigned long v25;  // [bp-0x20]\n    unsigned long v26;  // [bp-0x18]\n    unsigned long v27;  // [bp-0x10]\n    unsigned long v28;  // [bp-0x8]\n    struct_0 *v30;  // rsi\n    struct_0 *v31;  // rbx\n    unsigned int v32;  // r13d\n    unsigned int *v33;  // r12\n    unsigned long v34;  // rdi\n    unsigned long long v35;  // rax\n    void *v36;  // rbx\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // r13\n    unsigned long long v39;  // rax\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rbx\n    unsigned long long v44;  // rbx\n    unsigned long v45;  // rsi\n    unsigned long long v46;  // rbx\n    unsigned long long v47;  // rbx\n    unsigned long long v48;  // rbx\n    unsigned long v49;  // rsi\n    unsigned long v50;  // rsi\n    unsigned int v51;  // r13d\n    unsigned long long v52;  // rax\n    unsigned long v54;  // rsi\n    unsigned long long v55;  // rax\n\n    v31 = v30;\n    v32 = sub_408f30();\n    v33 = __errno_location();\n    if (v32 == 0)\n    {\n        if (((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000)\n        {\n            v36 = (unsigned long long)(unsigned int)sub_4055d0();\n            v37 = strlen(v36);\n            rsp<8> = &(&v0)[-1 * (v37 + 24 & -0x10) + -8];\n            v28 = &g_404d8e;\n            v38 = memcpy(&(&v0)[-1 * (v37 + 24 & -0x10) + 15] & -0x10, v36, v37 + 1);\n            rsp<8> = rsp<8> - 8;\n            v27 = &g_404d99;\n            free(v36);\n            rsp<8> = rsp<8> - 8;\n            v26 = &g_404da1;\n            v39 = chdir((unsigned int)v30);\n            if (v39 >= 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v25 = &g_404dbf;\n                v40 = __xstat(0x1, 0x411fe4, (unsigned int)&v1);\n                if (v40 < 0)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v24 = &g_404dd4;\n                    v44 = (unsigned int)sub_408cc0();\n                    rsp<8> = rsp<8> - 8;\n                    v23 = &g_404de8;\n                    v49 = *(v33);\n                    v46 = 0;\n                    rsp<8> = rsp<8> - 8;\n                    v22 = &g_404dfd;\n                    error(0x0, v49, (unsigned long long)dcgettext(0x0, 0x411fe8, 0x5));\n                }\n            }\n        }\n        else\n        {\n            *((uint128_t *)&v1) = v31->field_0;\n            *((uint128_t *)&v2) = v31->field_10;\n            *((int128_t *)&v3) = *((int128_t *)&v31->field_18);\n            *((uint128_t *)&v4) = v31->field_20;\n            *((uint128_t *)&v5) = v31->field_30;\n            *((uint128_t *)&v6) = v31->field_40;\n            *((uint128_t *)&v7) = v31->field_50;\n            *((uint128_t *)&v8) = v31->field_60;\n            *((uint128_t *)&v9) = v31->field_70;\n            rsp<8> = stack_base + -352;\n            v35 = chdir(v34);\n        }\n        if ((((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v39 < 0) && (v35 < 0 || ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000))\n        {\n            rsp<8> = rsp<8> - 8;\n            v25 = &g_404fdb;\n            v43 = (unsigned int)sub_408cc0();\n            rsp<8> = rsp<8> - 8;\n            v24 = &g_404fef;\n            v45 = *(v33);\n            v46 = 0;\n            rsp<8> = rsp<8> - 8;\n            v23 = &g_405004;\n            error(0x0, v45, (unsigned long long)dcgettext(0x0, 0x411fc5, 0x5));\n        }\n        if ((((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v39 >= 0) && (v35 >= 0 || ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000))\n        {\n            if (((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v40 >= 0)\n            {\n                while (true)\n                {\n                    rsp<8> = rsp<8> - 8;\n                    v24 = &g_404ecd;\n                    v41 = __xstat(0x1, 0x411fe3, (unsigned int)&v10);\n                    if (v41 >= 0)\n                    {\n                        if (*((long long *)&v10) == (long long)v1 && v11 != (long long)(&v1)[8])\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v23 = &g_404e3a;\n                            v42 = chdir(0x411fe3);\n                            if (v42 >= 0)\n                            {\n                                v1 = *((int128_t *)&(&v11)[-1]);\n                                *((int128_t *)&v2) = (int128_t)v12;\n                                *((int128_t *)&v3) = (int128_t)v13;\n                                *((int128_t *)&v4) = (int128_t)v14;\n                                *((int128_t *)&v5) = (int128_t)v15;\n                                *((int128_t *)&v6) = (int128_t)v16;\n                                *((int128_t *)&v7) = (int128_t)v18;\n                                *((int128_t *)&v8) = (int128_t)v20;\n                                v9 = (int128_t)v22;\n                            }\n                            else\n                            {\n                                rsp<8> = rsp<8> - 8;\n                                v22 = &g_40501f;\n                                v48 = (unsigned int)sub_408cc0();\n                            }\n                        }\n                        if (v11 == (long long)(&v1)[8] || *((long long *)&v10) != (long long)v1)\n                        {\n                            rsp<8> = rsp<8> - 8;\n                            v23 = &g_404f15;\n                            v46 = (unsigned int)sub_4097f0();\n                        }\n                    }\n                    else\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v23 = &g_404ee4;\n                        v47 = (unsigned int)sub_408cc0();\n                    }\n                    if (v41 < 0 || v42 < 0 && *((long long *)&v10) == (long long)v1 && v11 != (long long)(&v1)[8])\n                    {\n                        rsp<8> = rsp<8> - 8;\n                        v21 = &g_404ef8;\n                        v50 = *(v33);\n                        v46 = 0;\n                        rsp<8> = rsp<8> - 8;\n                        v20 = &g_404f0d;\n                        error(0x0, v50, (unsigned long long)dcgettext(0x0, v50, 0x5));\n                    }\n                }\n            }\n            v51 = *(v33);\n            rsp<8> = rsp<8> - 8;\n            v19 = &g_404f28;\n            v52 = sub_408f80();\n            if (v52 == 0)\n            {\n                rsp<8> = rsp<8> - 8;\n                v18 = &g_404f3c;\n                sub_408fa0();\n                *(v33) = v51;\n            }\n            else\n            {\n                rsp<8> = rsp<8> - 8;\n                v18 = &g_405079;\n                v54 = *(v33);\n                rsp<8> = rsp<8> - 8;\n                v17 = &g_40508c;\n                error(0x1, v54, (unsigned long long)dcgettext(0x0, 0x412010, 0x5));\n            }\n        }\n    }\n    else\n    {\n        v46 = 0;\n        error(0x0, *(v33), (unsigned long long)dcgettext(0x0, 0x411fa8, 0x5));\n    }\n    if (v52 == 0 || v32 != 0 || v35 < 0 && ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) == 0x4000 || v39 < 0 && ((unsigned short)*((int *)&((char *)&v30->field_10)[8]) & 0xf000) != 0x4000)\n    {\n        v55 = v46;\n        return v55;\n    }\n}\n"
        },
        {
            "funcName": "sub_4095c0",
            "funcStartAddr": "0x4095c0",
            "funcEndAddr": "0x4095f0",
            "decompiledFuncCode": "int sub_4095c0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_4097b0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_408fc0",
            "funcStartAddr": "0x408fc0",
            "funcEndAddr": "0x409369",
            "decompiledFuncCode": "extern unsigned int g_4132ab;\nextern unsigned int g_4132af;\nextern unsigned int g_4132bf;\nextern unsigned int g_4132d6;\nextern unsigned int g_413338;\nextern unsigned int g_413408;\nextern unsigned int g_413428;\nextern unsigned int g_413450;\nextern unsigned int g_413478;\nextern unsigned int g_4134a8;\n\nint sub_408fc0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x4132ab, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x413338, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4132af, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4132bf, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x4132d6, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x413408, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x413428, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x413450, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x413478, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x4134a8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_40adb0",
            "funcStartAddr": "0x40adb0",
            "funcEndAddr": "0x40adc8",
            "decompiledFuncCode": "int sub_40adb0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_40ad50();\n}\n"
        },
        {
            "funcName": "sub_403b9d",
            "funcStartAddr": "0x403b9d",
            "funcEndAddr": "0x403bad",
            "decompiledFuncCode": "int sub_403b9d()\n{\n}\n"
        },
        {
            "funcName": "sub_409730",
            "funcStartAddr": "0x409730",
            "funcEndAddr": "0x40975e",
            "decompiledFuncCode": "int sub_409730()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_4097b0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405180",
            "funcStartAddr": "0x405180",
            "funcEndAddr": "0x40518a",
            "decompiledFuncCode": "int sub_405180()\n{\n}\n"
        },
        {
            "funcName": "sub_4095b0",
            "funcStartAddr": "0x4095b0",
            "funcEndAddr": "0x4095b2",
            "decompiledFuncCode": "int sub_4095b0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ae30",
            "funcStartAddr": "0x40ae30",
            "funcEndAddr": "0x40ae48",
            "decompiledFuncCode": "int sub_40ae30()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_40a780();\n}\n"
        },
        {
            "funcName": "sub_408be0",
            "funcStartAddr": "0x408be0",
            "funcEndAddr": "0x408c4d",
            "decompiledFuncCode": "int sub_408be0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4086c0();\n}\n"
        },
        {
            "funcName": "sub_4055f0",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x405648",
            "decompiledFuncCode": "int sub_4055f0()\n{\n    unsigned long long v1;  // rbp\n    char *v2;  // rdi\n    char *v3;  // rbx\n    char v4;  // bpl\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rdx\n\n    v1 = 0;\n    v3 = v2;\n    v4 = *(v2) == 47;\n    v5 = sub_4056b0();\n    v6 = v5 + -0x1 * v3;\n    if (v5 + -0x1 * v3 > rbp<8>)\n    {\n        if (*((char *)(v5 - 1)) == 47)\n        {\n            for (v8 = v6 - 1; rbp<8> != v8; v8 = v7)\n            {\n                v7 = v8 - 1;\n                if (v3[v8 + -1] != 47)\n                {\n                    break;\n                }\n            }\n            return v8;\n        }\n    }\n    if (v5 + -0x1 * v3 <= rbp<8> || *((char *)(v5 - 1)) != 47)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c380",
            "funcStartAddr": "0x40c380",
            "funcEndAddr": "0x40c41f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_40c380()\n{\n    char *v1;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    v1 = getenv(\"TZ\");\n    if (v1 != 0)\n    {\n        if (v3->field_8 != 0)\n        {\n            v4 = strcmp(&v3[1], v1);\n            if (v4 == 0)\n            {\n                return 1;\n            }\n        }\n    }\n    else\n    {\n        if (v3->field_8 == 0)\n        {\n            return 1;\n        }\n    }\n    if (v1 == 0 && v3->field_8 != 0 || v3->field_8 == 0 && v1 != 0 || v1 != 0 && v4 != 0)\n    {\n        if (v4 != 0)\n        {\n            v6 = sub_40c0a0();\n            if (v6 == 0)\n            {\n                v8 = __errno_location();\n                if (v8 != 1)\n                {\n                    sub_40c0f0();\n                }\n                *(v8) = *(v8);\n                return 0;\n            }\n        }\n        if (v4 == 0 || v6 != 0)\n        {\n            v4 = (unsigned int)sub_40c170();\n            return v7;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40d110",
            "funcStartAddr": "0x40d110",
            "funcEndAddr": "0x40d190",
            "decompiledFuncCode": "int sub_40d110()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long long v4;  // [bp+0x8]\n    unsigned int v5[8];  // rax\n    unsigned long long v6;  // r9\n    unsigned long long v8;  // rax\n\n    v5 = v4;\n    if (v4 != 0)\n    {\n        v3 = v5[0];\n        v2 = v5[1];\n        v1 = v5[1];\n        v0 = v5[3 + 1];\n        v8 = (unsigned int)sub_40cff0() + v6;\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return v8;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>) || v4 == 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rax<8>, rbx<8>, cc_ndep<8>)))\n        {\n            return (9223372036854775805 < v6? v6 - 1 : 9223372036854775807);\n        }\n        else if (v6 < 9223372036854775810)\n        {\n            return v6 + 1;\n        }\n        return 0x8000000000000000;\n    }\n}\n"
        },
        {
            "funcName": "sub_4089c2",
            "funcStartAddr": "0x4089c2",
            "funcEndAddr": "0x4089eb",
            "decompiledFuncCode": "int sub_4089c2()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_403f90",
            "funcStartAddr": "0x403f90",
            "funcEndAddr": "0x4042bc",
            "decompiledFuncCode": "extern unsigned int g_41213d;\nextern unsigned long long g_617470;\nextern unsigned long long g_617478;\n\nint sub_403f90()\n{\n    void tmp_1;  // tmp #1\n    void tmp_15;  // tmp #15\n    unsigned long long v0;  // [bp-0x68]\n    unsigned long long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long long|unsigned int v3;  // [bp-0x48]\n    unsigned long v4;  // [bp-0x40]\n    unsigned long long v6;  // rdx\n    char *v8;  // rcx\n    char *v11;  // rsi\n    unsigned long long v12;  // rcx\n    unsigned long|unsigned int v13;  // rbx\n    unsigned long long v14;  // rax\n    unsigned long long|char [2] v15;  // r15\n    unsigned long long v16;  // rsi\n    unsigned long long v17;  // rcx\n    unsigned long long v18;  // rax\n    unsigned long v19;  // rax\n    unsigned long long v20;  // rdx\n    char v21;  // dl\n    unsigned long long v22;  // rax\n    unsigned int v23;  // eax\n    unsigned long long v24;  // r13\n    char *v25;  // rdx\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // rcx\n    char *v28;  // rdi\n    unsigned long long v29;  // r13\n    unsigned long|unsigned int v30;  // esi\n    unsigned long long v31;  // rax\n    char v32;  // al\n    unsigned long v33;  // rax\n    unsigned long long v34;  // r12\n    unsigned long long v35;  // rax\n    unsigned long v37;  // rcx\n    unsigned long long v38;  // rbx\n\n    v2 = v6;\n    if (v15 != 0)\n    {\n        v15 = sub_40aed0();\n        *((char *)(v28 + v11)) = 0;\n        v12 = v15 - v28;\n        if ((unsigned int)v15[1] - 48 > 9)\n        {\n            v13 = 9;\n            if ((unsigned int)v15[-1 + 7] - 48 > 9)\n            {\n                v15 = v8;\n                v16 = 1;\n                v3 = 0;\n                v17 = 1;\n            }\n        }\n        else\n        {\n            v3 = v15 - v28;\n            v14 = strtol(&v15[1], NULL, 0xa);\n            v12 = v3;\n            v13 = (2147483647 < v14? 2147483647 : v14);\n            if (!((unsigned int)(2147483647 < v14? 2147483647 : v14) != 0))\n            {\n                v3 = 0;\n            }\n            else if ((unsigned int)v15[-1 + 7] - 48 > 9)\n            {\n                v3 = 0;\n            }\n        }\n        if ((unsigned int)v15[1] - 48 <= 9 && (unsigned int)(2147483647 < v14? 2147483647 : v14) != 0 || (unsigned int)v15[-1 + 7] - 48 <= 9 && (unsigned int)v15[1] - 48 > 9)\n        {\n            if ((unsigned int)v15[-1 + 7] - 48 <= 9 || (unsigned int)v15[1] - 48 > 9)\n            {\n                v15[0] = 0;\n                do\n                {\n                    v15 = &v15[-1 + 7];\n                }\n                while ((unsigned int)v15[-1 + 7] - 48 <= 9);\n                v4 = v12;\n                v18 = strtol(v15, NULL, 0xa);\n                tmp_1 = v18;\n                tmp_15 = 2147483647 < v18;\n                v19 = (2147483647 < v18? 2147483647 : v18);\n                v3 = (tmp_15? 2147483647 : tmp_1);\n                if ((unsigned int)(tmp_15? 2147483647 : tmp_1) > 1)\n                {\n                    v20 = 0;\n                    v21 = v15[0] == 48;\n                    v15 = &v15[rdx<8>];\n                    if (v19 > g_617470)\n                    {\n                        v22 = v19 - g_617470;\n                        if ((unsigned int)v22 > 1)\n                        {\n                            v23 = v22 - v13;\n                            if (v23 > 1)\n                            {\n                                if (v28 < v15)\n                                {\n                                    v25 = v28;\n                                    v26 = 0;\n                                    do\n                                    {\n                                        v27 = *(v25);\n                                        if (*(v25) != 45)\n                                        {\n                                            *((unsigned long long *)&v28) = v27;\n                                            v28 = &v28[1];\n                                        }\n                                        else\n                                        {\n                                            v26 = 1;\n                                        }\n                                        v25 = &v25[1];\n                                    }\n                                    while (v15 != v25);\n                                    v24 = v28 - v28;\n                                }\n                                else\n                                {\n                                    v24 = 0;\n                                }\n                                if (v26 == 0 || v28 >= v15)\n                                {\n                                    v29 = v24 + __sprintf_chk(v28, 0x1, 0xffffffff, 0x41213d);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if ((unsigned int)v13 > 8)\n            {\n                v16 = 1;\n                v17 = 1;\n            }\n        }\n    }\n    else\n    {\n        v3 = 0;\n        v13 = 0;\n    }\n    if (v15 == 0 || (unsigned int)v15[1] - 48 <= 9 && (unsigned int)(2147483647 < v14? 2147483647 : v14) == 0 || (unsigned int)v15[1] - 48 <= 9 && (unsigned int)v13 <= 8 || (unsigned int)v13 <= 8 && (unsigned int)v15[-1 + 7] - 48 <= 9)\n    {\n        v30 = v13;\n        v17 = 1;\n        do\n        {\n            v30 = (unsigned long long)v30 + 1;\n            v17 = (unsigned int)v17 * 10;\n        }\n        while ((unsigned int)v30 != 9);\n        v16 = v17;\n        v15 = (v15 >> 63 CONCAT v15) % v17;\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>) && v15 != 0)\n    {\n        v31 = 0;\n        v32 = (v15 >> 63 CONCAT v15) % v16 >> 64 != 0;\n        v33 = (char)((unsigned int)(char [2])(0x3b9aca00 % (unsigned int)v17 + -0x1 * v15) != rax<8>);\n        v34 = v6 + v33;\n        v2 = v34;\n        if (v2 + v33 == 0)\n        {\n            sub_402980();\n            v35 = __printf_chk(0x1, v28);\n        }\n    }\n    if (v15 == 0 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)) || v2 + v33 != 0)\n    {\n        v35 = sub_402af0();\n    }\n    if (v13 != 0)\n    {\n        v37 = (unsigned int)(v13 <= 9? (unsigned int)v13 : 9);\n        v38 = v13 - ((unsigned int)v13 <= 9? (unsigned int)v13 : 9);\n        v1 = 0;\n        v0 = v38;\n        __printf_chk(0x1, \"%s%.*d%-*.*d\", (unsigned int)g_617478, v37);\n        v35 = v0;\n    }\n    return v35;\n}\n"
        },
        {
            "funcName": "sub_40f3a0",
            "funcStartAddr": "0x40f3a0",
            "funcEndAddr": "0x40f55c",
            "decompiledFuncCode": "int sub_40f3a0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408920",
            "funcStartAddr": "0x408920",
            "funcEndAddr": "0x40894b",
            "decompiledFuncCode": "extern char g_6175a0;\n\nint sub_408920()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6175a0 : v2);\n    *((int *)(tmp_11? &g_6175a0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6175a0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_6175a0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408cc0",
            "funcStartAddr": "0x408cc0",
            "funcEndAddr": "0x408ccc",
            "decompiledFuncCode": "int sub_408cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_40d730",
            "funcStartAddr": "0x40d730",
            "funcEndAddr": "0x40d73e",
            "decompiledFuncCode": "int sub_40d730()\n{\n}\n"
        },
        {
            "funcName": "sub_408f30",
            "funcStartAddr": "0x408f30",
            "funcEndAddr": "0x408f73",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n} struct_0;\n\nint sub_408f30()\n{\n    struct_0 *v1;  // rdi\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rax\n\n    v1->field_8 = 0;\n    v2 = (unsigned int)sub_40c6a0();\n    v1->field_0 = v2;\n    if ((unsigned int)v2 >= 0)\n    {\n        return 0;\n    }\n    v3 = sub_409bb0();\n    v1->field_8 = v3;\n    return 0 - (unsigned int)(char)(v3 == 0);\n}\n"
        },
        {
            "funcName": "sub_402980",
            "funcStartAddr": "0x402980",
            "funcEndAddr": "0x402a1b",
            "decompiledFuncCode": "int sub_402980()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp-0x30]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rdi\n    unsigned long v12;  // rbx\n    unsigned long v13;  // rcx\n    unsigned long v14;  // rsi\n    unsigned int v15;  // r14d\n    unsigned long long v16;  // rbp\n    char *v17;  // rax\n    char *v18;  // rdx\n    char *|unsigned long long v20;  // r12\n    char *v21;  // rbx\n    unsigned long long v22;  // r13\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v20 = v11 + 1;\n    v1 = v12;\n    v21 = v11 + 1;\n    v0 = v13;\n    if (v11 + 1 < v11 + v14)\n    {\n        while (true)\n        {\n            v15 = *(v21);\n            v16 = *(v21);\n            v17 = strchr(\"'-+ #0I\", *(v21));\n            if (v17 != 0)\n            {\n                if (strchr(v18, v15) != 0)\n                {\n                    *((unsigned long long *)&v20) = v16;\n                    v20 = &v20[1];\n                }\n                v21 = &v21[1];\n                if (v11 + v14 <= v21)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                if (v21 >= v11 + v14)\n                {\n                    break;\n                }\n                v22 = v11 + v14 + -0x1 * v21;\n                while (true)\n                {\n                    *((unsigned long long *)(v20 + v17)) = v16;\n                    v17 = &v17[1];\n                    if (v22 == v17)\n                    {\n                        break;\n                    }\n                    v16 = (char)*((char *)(v21 + v17));\n                }\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4055d0",
            "funcStartAddr": "0x4055d0",
            "funcEndAddr": "0x4055e8",
            "decompiledFuncCode": "int sub_4055d0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_405650();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_4097b0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408d90",
            "funcStartAddr": "0x408d90",
            "funcEndAddr": "0x408e03",
            "decompiledFuncCode": "int sub_408d90()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_4086c0();\n}\n"
        },
        {
            "funcName": "sub_40c430",
            "funcStartAddr": "0x40c430",
            "funcEndAddr": "0x40c43c",
            "decompiledFuncCode": "int sub_40c430()\n{\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rax\n\n    if (v1 == 1)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405ab0",
            "funcStartAddr": "0x405ab0",
            "funcEndAddr": "0x405af1",
            "decompiledFuncCode": "int sub_405ab0()\n{\n    unsigned long v1;  // rdx\n    char *v2;  // rbx\n    char *v4;  // rdi\n    char *v5;  // rsi\n\n    if (v1 != 0)\n    {\n        v2 = v1 - 1;\n        do\n        {\n            *((char *)(v4 + v2)) = *((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + (unsigned long long)(char)*((char *)(v5 + v2)) * 4));\n            v2 = &v2[-1];\n        }\n        while (v2 != -1);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4089eb",
            "funcStartAddr": "0x4089eb",
            "funcEndAddr": "0x408ab1",
            "decompiledFuncCode": "int sub_4089eb()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_407490();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_409560();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_407490();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4054c0",
            "funcStartAddr": "0x4054c0",
            "funcEndAddr": "0x40550c",
            "decompiledFuncCode": "int sub_4054c0()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_405740",
            "funcStartAddr": "0x405740",
            "funcEndAddr": "0x4057fd",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned int field_18;\n    char padding_1c[20];\n    unsigned long long field_30;\n} struct_0;\n\nint sub_405740()\n{\n}\n"
        },
        {
            "funcName": "sub_408ec0",
            "funcStartAddr": "0x408ec0",
            "funcEndAddr": "0x408eca",
            "decompiledFuncCode": "int sub_408ec0()\n{\n}\n"
        },
        {
            "funcName": "sub_40ccc0",
            "funcStartAddr": "0x40ccc0",
            "funcEndAddr": "0x40cd0c",
            "decompiledFuncCode": "int sub_40ccc0()\n{\n    unsigned int v1;  // [bp+0x100008]\n    unsigned int v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v2 > 2)\n    {\n        return v2;\n    }\n    close(v2);\n    *(__errno_location()) = v1;\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_403bdd",
            "funcStartAddr": "0x403bdd",
            "funcEndAddr": "0x403bed",
            "decompiledFuncCode": "int sub_403bdd()\n{\n}\n"
        },
        {
            "funcName": "sub_409820",
            "funcStartAddr": "0x409820",
            "funcEndAddr": "0x4098b4",
            "decompiledFuncCode": "int sub_409820()\n{\n    unsigned int v0;  // [bp-0xd0]\n    unsigned int v1;  // [bp-0xcc]\n    unsigned long v2;  // [bp-0xc8]\n    unsigned long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb0]\n    unsigned long v5;  // [bp-0xa8]\n    unsigned long v6;  // [bp-0xa0]\n    unsigned long v7;  // [bp-0x98]\n    unsigned long v8;  // [bp-0x90]\n    void v9;  // [bp-0x88]\n    void v10;  // [bp-0x78]\n    void v11;  // [bp-0x68]\n    void v12;  // [bp-0x58]\n    void v13;  // [bp-0x48]\n    void v14;  // [bp-0x38]\n    void v15;  // [bp-0x28]\n    void v16;  // [bp-0x18]\n    unsigned long v18;  // rsi\n    unsigned long v19;  // rdx\n    unsigned long v20;  // rcx\n    unsigned long v21;  // r8\n    unsigned long v22;  // r9\n    char v23;  // al\n    void v24;  // xmm0\n    void v25;  // xmm1\n    void v26;  // xmm2\n    void v27;  // xmm3\n    void v28;  // xmm4\n    void v29;  // xmm5\n    void v30;  // xmm6\n    void v31;  // xmm7\n\n    v4 = v18;\n    v5 = v19;\n    v6 = v20;\n    v7 = v21;\n    v8 = v22;\n    if (v23 != 0)\n    {\n        v9 = v24;\n        v10 = v25;\n        v11 = v26;\n        v12 = v27;\n        v13 = v28;\n        v14 = v29;\n        v15 = v30;\n        v16 = v31;\n    }\n    v0 = 8;\n    v2 = stack_base + 8;\n    v1 = 48;\n    v3 = stack_base + -184;\n    return sub_40ce40();\n}\n"
        },
        {
            "funcName": "sub_408b90",
            "funcStartAddr": "0x408b90",
            "funcEndAddr": "0x408b9a",
            "decompiledFuncCode": "int sub_408b90()\n{\n}\n"
        },
        {
            "funcName": "sub_402a70",
            "funcStartAddr": "0x402a70",
            "funcEndAddr": "0x402aa3",
            "decompiledFuncCode": "int sub_402a70()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_402980();\n}\n"
        },
        {
            "funcName": "sub_4086c0",
            "funcStartAddr": "0x4086c0",
            "funcEndAddr": "0x408860",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_617378;\nextern uint128_t g_617380;\nextern unsigned int g_617390;\nextern int512_t g_6174a0;\n\nint sub_4086c0()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_617378;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_617390 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_617378 != 6386560)\n            {\n                v16 = sub_4095c0();\n                g_617378 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_4095c0();\n                v17 = v15;\n                g_617378 = v15;\n                *(v15) = g_617380;\n            }\n            memset(&v17[(long long)(int)g_617390], 0x0, (int)((unsigned int)v13 + 1 - g_617390) * 16);\n            g_617390 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_4097b0(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_617390 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_407490();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6386848)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_409560();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_407490();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_408950",
            "funcStartAddr": "0x408950",
            "funcEndAddr": "0x4089c2",
            "decompiledFuncCode": "extern int512_t g_6175a0;\n\nint sub_408950()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6175a0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_407490();\n}\n"
        },
        {
            "funcName": "sub_402b30",
            "funcStartAddr": "0x402b30",
            "funcEndAddr": "0x4036a1",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nextern unsigned int g_4106a0;\nextern int512_t g_414a53;\nextern unsigned int g_617450;\nextern unsigned long long stdout[7];\n\nint sub_402b30()\n{\n    unsigned long v1;  // rdx\n    char *v10;  // rax\n    unsigned long long *v11;  // r9\n\n    switch ((unsigned int)(v1 - 83))\n    {\n    case 1:\n        if (...)\n        {\n            __sprintf_chk(0x617450, 0x1, 0x1d, 0x4106a0);\n        }\n        sub_402a70();\n    case 14:\n        sub_402af0();\n        break;\n    case 15:\n        sub_402af0();\n        break;\n    case 17:\n        sub_402af0();\n        break;\n    case 19:\n        sub_402af0();\n        break;\n    case 22:\n        sub_402a30();\n        break;\n    case 25:\n        sub_402ab0();\n        break;\n    case 27:\n        sub_402a70();\n        break;\n    case 32:\n        sub_402ab0();\n    case 33:\n        sub_402a30();\n        break;\n    default:\n        v10 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v10) = 63;\n        }\n        else\n        {\n            __overflow();\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408d50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x408d5d",
            "decompiledFuncCode": "int sub_408d50()\n{\n}\n"
        },
        {
            "funcName": "sub_403bad",
            "funcStartAddr": "0x403bad",
            "funcEndAddr": "0x403bbd",
            "decompiledFuncCode": "int sub_403bad()\n{\n}\n"
        },
        {
            "funcName": "sub_408ed0",
            "funcStartAddr": "0x408ed0",
            "funcEndAddr": "0x408ee2",
            "decompiledFuncCode": "int sub_408ed0()\n{\n}\n"
        },
        {
            "funcName": "sub_408bc0",
            "funcStartAddr": "0x408bc0",
            "funcEndAddr": "0x408bd2",
            "decompiledFuncCode": "int sub_408bc0()\n{\n}\n"
        },
        {
            "funcName": "sub_4096c0",
            "funcStartAddr": "0x4096c0",
            "funcEndAddr": "0x40970a",
            "decompiledFuncCode": "int sub_4096c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403e80",
            "funcStartAddr": "0x403e80",
            "funcEndAddr": "0x403f85",
            "decompiledFuncCode": "extern unsigned int g_411020;\nextern unsigned int g_4110d0;\nextern unsigned int g_411150;\nextern unsigned int g_411180;\nextern unsigned int g_4111c0;\n\nint sub_403e80()\n{\n    char v1;  // dil\n    char v2;  // sil\n    char v3;  // sil\n    unsigned long long v6;  // rbp\n\n    if (v1 != 0)\n    {\n        if (v3 == 0)\n        {\n            dcgettext(0x0, 0x411020, 0x5);\n        }\n    }\n    else\n    {\n        if (v2 == 0)\n        {\n            dcgettext(0x0, 0x4110d0, 0x5);\n            dcgettext(0x0, 0x411150, 0x5);\n            free((unsigned long long)(unsigned int)sub_409790());\n            dcgettext(0x0, 0x411180, 0x5);\n            free((unsigned long long)(unsigned int)sub_409820());\n            dcgettext(0x0, 0x4111c0, 0x5);\n            v6 = (unsigned int)sub_409820();\n            free((unsigned long long)(unsigned int)sub_409820());\n            return stack_base + 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40ad50",
            "funcStartAddr": "0x40ad50",
            "funcEndAddr": "0x40ada6",
            "decompiledFuncCode": "extern unsigned int g_617394;\nextern unsigned int g_617398;\nextern unsigned int g_61739c;\nextern unsigned int g_6175e0;\nextern unsigned int g_6175e4;\nextern unsigned int g_6175e8;\nextern unsigned long long g_6175f0;\nextern unsigned long long g_617638;\n\nint sub_40ad50()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_6175e0 = g_61739c;\n    g_6175e4 = g_617398;\n    v1 = (unsigned int)v2;\n    v0 = &g_6175e0;\n    g_61739c = g_6175e0;\n    g_617638 = g_6175f0;\n    g_617394 = g_6175e8;\n    return sub_40a780();\n}\n"
        },
        {
            "funcName": "sub_40c450",
            "funcStartAddr": "0x40c450",
            "funcEndAddr": "0x40c4e6",
            "decompiledFuncCode": "int sub_40c450()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // r13\n    unsigned long v3;  // rsi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    unsigned long long v8;  // rax\n\n    if (v1 != 0)\n    {\n        v2 = (unsigned int)sub_40c380();\n        if (v2 != 0)\n        {\n            v5 = localtime_r(v3, v4);\n            if (v5 != 0)\n            {\n                v6 = sub_40c200();\n                if (v6 != 0)\n                {\n                    if (v2 != 1)\n                    {\n                        v8 = sub_40c120();\n                    }\n                    if (v2 == 1 || v8 != 0)\n                    {\n                        return v4;\n                    }\n                }\n            }\n            if ((v5 == 0 || v6 == 0) && v2 != 1)\n            {\n                sub_40c120();\n            }\n        }\n        if (v5 == 0 || v2 == 0 || v6 == 0 || v8 == 0 && v2 != 1)\n        {\n            return 0;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405190",
            "funcStartAddr": "0x405190",
            "funcEndAddr": "0x405293",
            "decompiledFuncCode": "int sub_405190()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (v0 == -1 || *((long long *)(v5 + (v12 << 3))) == 0) && (v13 != 0 || v14 != v11) && (*((long long *)(v5 + (v12 << 3))) != 0 || v13 != 0 || v0 != -1))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_408ba0",
            "funcStartAddr": "0x408ba0",
            "funcEndAddr": "0x408bb6",
            "decompiledFuncCode": "int sub_408ba0()\n{\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_stat.elf"
}