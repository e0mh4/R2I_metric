{
    "funcInfo": [
        {
            "funcName": "sub_406430",
            "funcStartAddr": "0x406430",
            "funcEndAddr": "0x4064a4",
            "decompiledFuncCode": "extern unsigned int g_4184f2;\nextern unsigned int g_41851d;\nextern unsigned int g_418750;\n\nint sub_406430()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4184f2, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x41851d, 0x5));\n    dcgettext(0x0, 0x418750, 0x5);\n}\n"
        },
        {
            "funcName": "sub_402d9b",
            "funcStartAddr": "0x402d9b",
            "funcEndAddr": "0x402dba",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_402d9b()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_412e70",
            "funcStartAddr": "0x412e70",
            "funcEndAddr": "0x412e82",
            "decompiledFuncCode": "int sub_412e70()\n{\n}\n"
        },
        {
            "funcName": "sub_415f70",
            "funcStartAddr": "0x415f70",
            "funcEndAddr": "0x416074",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[8];\n    char field_38;\n} struct_0;\n\nint sub_415f70()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbp\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rdx\n    char *v6;  // rsi\n    unsigned long long v8;  // rbx\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v1->field_0 = 0;\n    v1->field_8 = 0;\n    v1->field_10 = 0;\n    v3 = malloc(0x100);\n    v1->field_20 = v3;\n    if (v3 != 0)\n    {\n        v4 = 0;\n        if (((char)v5 & 4) != 0)\n        {\n            v4 = 1;\n        }\n        v2->field_28 = 0;\n        v2->field_38 = (unsigned int)((unsigned long long)((unsigned int)v5 % 8 & 1) * 16) | v2->field_38 & 111 | (unsigned int)v4 * 128;\n        strlen(v6);\n        v8 = (unsigned int)sub_414ae0();\n        if ((unsigned int)v8 != 16)\n        {\n        }\n        else\n        {\n            v8 = 8;\n        }\n        if ((unsigned int)v8 == 0)\n        {\n            sub_415910();\n        }\n        if ((unsigned int)v8 == 16 || (unsigned int)v8 != 0)\n        {\n            free(v2->field_20);\n            v2->field_20 = 0;\n        }\n        v10 = v8;\n        return v10;\n    }\n    return 12;\n}\n"
        },
        {
            "funcName": "sub_40678b",
            "funcStartAddr": "0x40678b",
            "funcEndAddr": "0x406790",
            "decompiledFuncCode": "int sub_40678b()\n{\n}\n"
        },
        {
            "funcName": "sub_4096f0",
            "funcStartAddr": "0x4096f0",
            "funcEndAddr": "0x409771",
            "decompiledFuncCode": "int sub_4096f0()\n{\n    unsigned long long v1[25];  // rdi\n    unsigned long long v2;  // r12\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n\n    v2 = v1[24];\n    if (v1[8] <= v3 && v1[8] < v1[11])\n    {\n        v4 = sub_4095a0();\n    }\n    if ((v1[8] > v3 || v1[8] >= v1[11]) && v1[6] <= v3 && v1[6] < v1[11])\n    {\n        v4 = sub_4095a0();\n    }\n    if ((unsigned int)v4 == 0 && v1[8] > v3 || (unsigned int)v4 == 0 && v1[8] >= v1[11] || v1[8] <= v3 && (unsigned int)v4 == 0 && v1[8] < v1[11] || v1[6] > v3 && v1[8] > v3 || v1[6] > v3 && v1[8] >= v1[11] || v1[6] >= v1[11] && v1[8] > v3 || v1[6] >= v1[11] && v1[8] >= v1[11])\n    {\n        if (v1[24] < v3)\n        {\n            memset(v1[23] + v2 * 8 + 8, 0x0, (v3 - v2) * 8);\n            v1[24] = v3;\n        }\n        v4 = 0;\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_408460",
            "funcStartAddr": "0x408460",
            "funcEndAddr": "0x408543",
            "decompiledFuncCode": "int sub_408460()\n{\n    unsigned long long v1;  // rdx\n    void *v2;  // dil\n    char|unsigned long v3;  // rsi\n    unsigned long long v4;  // r9\n    void *v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rdi\n\n    if (v1 != 0)\n    {\n        if ((v2 & 7) != 0 && v3 != *((char *)v2))\n        {\n            do\n            {\n                v2 += 1;\n                v1 -= 1;\n            }\n            while (*((char *)v2) != (char)v3 && (v2 & 7) != 0 && v1 != 1);\n            if (true)\n            {\n                return 0;\n            }\n            else if (v1 != 1)\n            {\n                v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            }\n            else if ((v2 & 7) != 0 && v1 != 1)\n            {\n                v5 = v2;\n            }\n        }\n        if ((v2 & 7) == 0 || v3 != *((char *)v2))\n        {\n            v4 = (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000 | ((int)((unsigned int)v3 * 0x100 | (unsigned int)v3) | (int)((unsigned int)v3 * 0x100 | (unsigned int)v3) * 0x10000) * 0x100000000;\n            if (v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0)\n            {\n                while (true)\n                {\n                    v1 -= 8;\n                    v2 += 8;\n                    if (v1 > 7)\n                    {\n                        if ((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) + -72340172838076673) != 0)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        break;\n                    }\n                }\n                if (v1 <= 7)\n                {\n                    return 0;\n                }\n            }\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2))\n    {\n        v6 = v2 + 1;\n        v7 = v2 + v1;\n        while (true)\n        {\n            v5 = v6;\n            if (v6 != v7)\n            {\n                v6 += 1;\n                if (*((char *)(v6 - 1)) == (char)v3)\n                {\n                    break;\n                }\n            }\n        }\n        if (v6 != v7)\n        {\n            return v5;\n        }\n        else if (v6 == v7)\n        {\n            return 0;\n        }\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 == *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v3 == *((char *)v2) && (v2 & 7) != 0 && v1 != 0)\n    {\n        v5 = v2;\n    }\n    if (((9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v1 > 7 && (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) != 0 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) || v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v1 <= 7) && v3 != *((char *)v2) || (9259542123273814144 & !(*((long long *)v2) ^ v4) & (*((long long *)v2) ^ v4) - 72340172838076673) == 0 && v1 > 7 && v1 != 0 && ((v2 & 7) == 0 || v3 != *((char *)v2)) && v3 != *((char *)v2) || v3 != *((char *)v2) && (v2 & 7) != 0 && v1 != 0 || v1 == 0)\n    {\n        return 0;\n    }\n    if (v1 != 0 || v3 == *((char *)v2))\n    {\n        return v5;\n    }\n}\n"
        },
        {
            "funcName": "sub_406610",
            "funcStartAddr": "0x406610",
            "funcEndAddr": "0x40665a",
            "decompiledFuncCode": "int sub_406610() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4095a0",
            "funcStartAddr": "0x4095a0",
            "funcEndAddr": "0x4096cc",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    char padding_10[24];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[16];\n    unsigned long long field_58;\n    char padding_60[24];\n    unsigned long long field_78;\n    char padding_80[8];\n    char field_88;\n    char padding_89[7];\n    unsigned int field_90;\n    char padding_94[36];\n    unsigned long long field_b8;\n} struct_0;\n\nint sub_4095a0()\n{\n    unsigned long long v1[24];  // rdi\n    unsigned long long v2;  // rbp\n    struct_0 *v3;  // rdi\n    unsigned long long v4;  // rax\n    unsigned int v5;  // eax\n    unsigned long v8;  // rsi\n    unsigned long long v9;  // rcx\n    char *v10;  // rax\n    char *v11;  // rcx\n\n    if (v1[8] <= 1152921504606846974)\n    {\n        v2 = (unsigned int)sub_408a00();\n        if ((unsigned int)v2 == 0)\n        {\n            v3 = v1[23];\n            if (v3->field_b8 != 0)\n            {\n                v4 = realloc(v3, v3->field_40 * 8 + 8);\n                if (v4 != 0)\n                {\n                    v3->field_b8 = v4;\n                }\n            }\n            if (v3->field_b8 == 0 || v4 != 0)\n            {\n                v5 = v3->field_90;\n                if (v3->field_88 != 0)\n                {\n                    if (v5 <= 1)\n                    {\n                        sub_408d70();\n                        return stack_base + 0;\n                    }\n                }\n                else\n                {\n                    if (v5 <= 1)\n                    {\n                        v11 = v3->field_78;\n                        if (v3->field_78 != 0)\n                        {\n                            v10 = v3->field_30;\n                            v8 = (v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58);\n                            if ((v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58) <= v3->field_30)\n                            {\n                                v3->field_30 = v10;\n                                v3->field_38 = v10;\n                            }\n                            else\n                            {\n                                while (true)\n                                {\n                                    v9 = v11[(unsigned long long)v10[v3->field_28 + v3->field_0]];\n                                    *((unsigned long long *)&v10[v3->field_8]) = v9;\n                                    v10 = &v10[1];\n                                    if (v8 == v10)\n                                    {\n                                        break;\n                                    }\n                                    v11 = v3->field_78;\n                                }\n                                v3->field_30 = v8;\n                                v3->field_38 = v8;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        sub_408df0();\n                        return stack_base + 0;\n                    }\n                }\n            }\n        }\n        if ((v5 <= 1 || (unsigned int)v2 != 0) && (v3->field_88 == 0 || (unsigned int)v2 != 0) && (v3->field_b8 == 0 || (unsigned int)v2 != 0 || v4 != 0))\n        {\n            return stack_base + 0;\n        }\n    }\n    if (v1[8] > 1152921504606846974 || (unsigned int)v2 == 0 && v4 == 0 && v3->field_b8 != 0)\n    {\n        return 12;\n    }\n}\n"
        },
        {
            "funcName": "sub_405e10",
            "funcStartAddr": "0x405e10",
            "funcEndAddr": "0x405e23",
            "decompiledFuncCode": "int sub_405e10()\n{\n}\n"
        },
        {
            "funcName": "sub_405b10",
            "funcStartAddr": "0x405b10",
            "funcEndAddr": "0x405b26",
            "decompiledFuncCode": "int sub_405b10()\n{\n}\n"
        },
        {
            "funcName": "sub_404100",
            "funcStartAddr": "0x404100",
            "funcEndAddr": "0x404163",
            "decompiledFuncCode": "int sub_404100()\n{\n    char *v1;  // rsi\n    unsigned int v2;  // edx\n    unsigned short v3;  // cx\n    unsigned long v5;  // rdi\n    unsigned long v6;  // rax\n    unsigned long long v7;  // rax\n    unsigned int *v8;  // rbp\n\n    if ((unsigned int)v5 != (unsigned int)v6 && (unsigned int)v6 >= 0)\n    {\n        v8 = __errno_location();\n        close((unsigned int)v8);\n        *(v8) = *(v8);\n        return dup2(v6, v5);\n    }\n    if ((unsigned int)v5 == (unsigned int)v6 || (unsigned int)v6 < 0)\n    {\n        v6 = (unsigned int)open(v1, v2, v3);\n        return v7;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a290",
            "funcStartAddr": "0x40a290",
            "funcEndAddr": "0x40a2b3",
            "decompiledFuncCode": "int sub_40a290()\n{\n    unsigned long long *v1;  // rdx\n    unsigned long long *v2;  // rdi\n    unsigned long long *v3;  // rsi\n\n    if (v1 < *(v2))\n    {\n        do\n        {\n            *((long long *)(*(v3) + v1 * 8)) = *((long long *)(*(v3) + v1 * 8 + 8));\n            v1 = (char *)v1 + 1;\n        }\n        while (v1 < *(v2));\n    }\n    return *(v3);\n}\n"
        },
        {
            "funcName": "sub_4082e0",
            "funcStartAddr": "0x4082e0",
            "funcEndAddr": "0x408336",
            "decompiledFuncCode": "extern unsigned int g_61d334;\nextern unsigned int g_61d338;\nextern unsigned int g_61d33c;\nextern unsigned int g_61d600;\nextern unsigned int g_61d604;\nextern unsigned int g_61d608;\nextern unsigned long long g_61d610;\nextern unsigned long long g_61d640;\n\nint sub_4082e0()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_61d600 = g_61d33c;\n    g_61d604 = g_61d338;\n    v1 = (unsigned int)v2;\n    v0 = &g_61d600;\n    g_61d33c = g_61d600;\n    g_61d640 = g_61d610;\n    g_61d334 = g_61d608;\n    return sub_407d10();\n}\n"
        },
        {
            "funcName": "sub_4066e0",
            "funcStartAddr": "0x4066e0",
            "funcEndAddr": "0x4066f3",
            "decompiledFuncCode": "int sub_4066e0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_405c30",
            "funcStartAddr": "0x405c30",
            "funcEndAddr": "0x405c3c",
            "decompiledFuncCode": "int sub_405c30()\n{\n}\n"
        },
        {
            "funcName": "sub_414980",
            "funcStartAddr": "0x414980",
            "funcEndAddr": "0x414ac9",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[168];\n    unsigned long long field_a8;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    char field_8;\n} struct_1;\n\nint sub_414980()\n{\n    unsigned long v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long long *v2;  // [bp-0x50]\n    char v3;  // [bp-0x40]\n    unsigned long long v5;  // rdi\n    struct struct_0 **v7;  // rsi\n    struct_0 *v8;  // rbx\n    unsigned int *v9;  // r9\n    struct_1 *v10;  // rdx\n    unsigned long v11;  // r8\n    unsigned long long v12;  // rcx\n    unsigned long long v13;  // r15\n    unsigned long long v15;  // rax\n\n    v8 = *(v7);\n    v2 = v7;\n    v1 = *(v7)->field_a8;\n    if (*(v9) == 0 || v13 != 0)\n    {\n        for (v13 = (unsigned int)sub_414840(); v10->field_8 == 10; *(v9) = 12)\n        {\n            *((unsigned long long *)(v5 + 72)) = *((long long *)(v5 + 72)) + (unsigned long long)(unsigned int)sub_412be0();\n            if ((v10->field_8 & 247) != 2 && (v11 == 0 || v10->field_8 != 9))\n            {\n                v0 = v8->field_a8;\n                v8->field_a8 = v1;\n                v12 = (unsigned int)sub_414840();\n                if (v12 == 0 && *(v9) != 0)\n                {\n                    if (v13 == 0)\n                    {\n                        break;\n                    }\n                    sub_4085c0();\n                }\n                if (*(v9) == 0 || v12 != 0)\n                {\n                    v8->field_a8 = v8->field_a8 | v0;\n                }\n            }\n            if ((v10->field_8 & 247) == 2 || *(v9) == 0 || v12 != 0 || v10->field_8 == 9 && v11 != 0)\n            {\n                v3 = 10;\n                v13 = (unsigned int)sub_40ad90();\n            }\n        }\n        if (v12 == 0 && v10->field_8 == 10 && (v10->field_8 & 247) != 2 && *(v9) != 0 && (v11 == 0 || v10->field_8 != 9))\n        {\n            v13 = 0;\n        }\n        else\n        {\n            v15 = v13;\n            return v15;\n        }\n    }\n    v13 = 0;\n    v15 = v13;\n    return v15;\n}\n"
        },
        {
            "funcName": "sub_408380",
            "funcStartAddr": "0x408380",
            "funcEndAddr": "0x408395",
            "decompiledFuncCode": "int sub_408380()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_407d10();\n}\n"
        },
        {
            "funcName": "sub_40c930",
            "funcStartAddr": "0x40c930",
            "funcEndAddr": "0x40cb44",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_3 *field_10;\n} struct_5;\n\nint sub_40c930()\n{\n    unsigned int|unsigned long v0;  // [bp-0x70]\n    struct_0 *v1;  // [bp-0x68]\n    unsigned long v2;  // [bp-0x60]\n    uint128_t v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x48]\n    unsigned long long v6;  // rdx\n    unsigned long long v8[8];  // rdi\n    unsigned long v9;  // rsi\n    struct_5 *v10;  // rbp\n    unsigned long v11;  // rcx\n    unsigned long long v12[8];  // r12\n    unsigned long long v13;  // rax\n    struct_0 *v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v22;  // r10\n    unsigned long long v23;  // rbx\n    unsigned long long v26;  // rdx\n    unsigned long v27;  // r11\n\n    v3 = 0;\n    v10 = v8[7] + v9 * 24;\n    v2 = v11;\n    v4 = 0;\n    v22 = *((long long *)(v8[7] + v9 * 24 + 8));\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n    {\n        v12 = v8;\n        v23 = 0;\n        while (true)\n        {\n            v13 = v10->field_10[v23];\n            if ((*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && v9 != v10->field_10[v23])\n            {\n                v14 = *((long long *)(v12[5] + v13 * 24 + 16));\n                *((unsigned long long [8])&v1) = v12[5] + v13 * 24;\n                v0 = *((long long *)*((long long *)(v12[5] + v13 * 24 + 16)));\n                v15 = sub_40a120();\n                if (v1->field_8 > 1)\n                {\n                    if (v15 == 0)\n                    {\n                        v17 = sub_40a120();\n                    }\n                    if (v17 == 0 || v15 != 0)\n                    {\n                        v18 = v14->field_8;\n                        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                        {\n                            v19 = sub_40a120();\n                            if (v19 == 0)\n                            {\n                                v20 = sub_40a120();\n                            }\n                        }\n                    }\n                }\n                else if (v15 == 0)\n                {\n                    v16 = sub_40a120();\n                }\n            }\n            if (v19 == 0 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) && v1->field_8 > 1 && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && v9 != v10->field_10[v23] && (v17 == 0 || v15 != 0) && v20 != 0 || v15 == 0 && v1->field_8 > 1 && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && v9 != v10->field_10[v23] && v17 != 0 || v1->field_8 <= 1 && v15 == 0 && (*((char *)((v13 << 4) + *(v8) + 8)) & 8) != 0 && v9 != v10->field_10[v23] && v16 != 0)\n            {\n                if ((int)v0 == 0)\n                {\n                    v22 = v10->field_8;\n                }\n                else\n                {\n                    v0 = sub_40abd0();\n                    free(v4);\n                    return v0;\n                }\n            }\n            if (...)\n            {\n                v23 += 1;\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=((Load(addr=(rdi<8> + 0x38<64>), size=8, endness=Iend_LE) + ((rsi<8> + (rsi<8> << 0x1<8>)) << 0x3<8>)) + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    do\n                    {\n                        if (sub_40a120() == 0)\n                        {\n                            v26 = (unsigned long long)(unsigned int)sub_40a120() - 1;\n                            if (v26 < v27 && !((char)(v26 - 1 >> 63)))\n                            {\n                                *((unsigned long *)(v6 + 8)) = v27 - 1;\n                                sub_40a290();\n                            }\n                        }\n                    }\n                    while (v10->field_8 > r9<8> + 1);\n                }\n            }\n        }\n    }\n    free(NULL);\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_407430",
            "funcStartAddr": "0x407430",
            "funcEndAddr": "0x40755c",
            "decompiledFuncCode": "extern unsigned int g_61d5f8;\n\nint sub_407430()\n{\n    unsigned int v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    unsigned long v3;  // [bp-0x38]\n    unsigned long v4;  // [bp-0x30]\n    unsigned int v6;  // [bp+0x100008]\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rcx\n    unsigned int v9;  // rsi\n    unsigned int v10;  // edi\n    unsigned int v11;  // edi\n    unsigned int *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v17;  // rax\n\n    v3 = v7;\n    v1 = stack_base + 8;\n    v4 = v8;\n    v0 = 16;\n    v2 = stack_base + -72;\n    if (v9 == 1030)\n    {\n        v0 = 24;\n        if (g_61d5f8 >= 0)\n        {\n            v15 = (unsigned int)fcntl(v11, v9);\n            if ((unsigned int)v15 < 0)\n            {\n                v12 = __errno_location();\n                if (*(v12) == 22)\n                {\n                    v15 = (unsigned int)sub_407430();\n                    if ((unsigned int)v15 >= 0)\n                    {\n                        g_61d5f8 = -1;\n                    }\n                }\n            }\n            if ((unsigned int)v15 >= 0 || *(v12) != 22)\n            {\n                g_61d5f8 = 1;\n            }\n        }\n        else\n        {\n            v15 = (unsigned int)sub_407430();\n        }\n        if ((g_61d5f8 < 0 || (unsigned int)v15 < 0) && (g_61d5f8 < 0 || *(v12) == 22) && (g_61d5f8 < 0 || (unsigned int)v15 >= 0) && (g_61d5f8 == -1 || g_61d5f8 >= 0) && (g_61d5f8 >= 0 || (unsigned int)v15 >= 0))\n        {\n            v13 = fcntl(v15, 0x1);\n            if (v13 >= 0)\n            {\n                v14 = fcntl(v15, 0x2);\n            }\n            if (v14 == -1 || v13 < 0)\n            {\n                v15 = -18446744069414584321;\n                close(v11);\n                *(__errno_location()) = v6;\n            }\n        }\n        v17 = v15;\n        return v17;\n    }\n    return fcntl(v10, v9);\n}\n"
        },
        {
            "funcName": "sub_40af20",
            "funcStartAddr": "0x40af20",
            "funcEndAddr": "0x40b12c",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[24];\n    unsigned long long field_28;\n    char padding_30[2];\n    char field_32;\n} struct_0;\n\ntypedef struct struct_1 {\n    struct struct_2 *field_0;\n    char padding_8[48];\n    char field_38;\n} struct_1;\n\ntypedef struct struct_3 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char padding_30[2];\n    char field_32;\n} struct_3;\n\nint sub_40af20()\n{\n    unsigned long v0;  // [bp-0x188]\n    void tmp_25;  // tmp #25\n    void tmp_42;  // tmp #42\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    char v3;  // [bp-0x40]\n    struct_0 *v5;  // rdx\n    struct_0 *v6;  // r12\n    struct_1 *v7;  // rsi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // r11\n    unsigned long long|struct_3 * v12;  // r15\n    struct_3 *|unsigned long long v13;  // rbx\n    unsigned long long v14;  // rbp\n    unsigned int *v15;  // rdi\n\n    v6 = v5;\n    if (!((v7->field_38 & 16) != 0))\n    {\n        v3 = 8;\n        v1 = &v7->field_0->padding_0[128];\n        v13 = (unsigned long long)(unsigned int)sub_40ad90();\n        v3 = 9;\n        v9 = sub_40ad90();\n        v12 = v9;\n        v11 = v9;\n    }\n    else if (v5->field_8 != 0)\n    {\n        v8 = v5->field_28;\n        if (v5->field_28 <= 63)\n        {\n            v0 = v7->field_0->field_a0;\n            if (((char)((char)*(&((char *)stack_base)[((v8 & 63) >> 3) + -392]) >> (unsigned long long)(char)(v8 & 63 & 7)) & 1) != 0)\n            {\n                v3 = 8;\n                v1 = &v7->field_0->padding_0[128];\n                v13 = (unsigned int)sub_40ad90();\n                v3 = 9;\n                v12 = (unsigned int)sub_40ad90();\n            }\n        }\n    }\n    else\n    {\n        v3 = 8;\n        v1 = &v7->field_0->padding_0[128];\n        v13 = (unsigned long long)(unsigned int)sub_40ad90();\n        v3 = 9;\n        v10 = sub_40ad90();\n        v11 = v10;\n        v12 = v10;\n    }\n    if (v5->field_8 != 0 && ((v7->field_38 & 16) == 0 || v5->field_28 <= 63) && ((v7->field_38 & 16) == 0 || ((char)((char)*(&((char *)stack_base)[((v8 & 63) >> 3) + -392]) >> (unsigned long long)(char)(v8 & 63 & 7)) & 1) != 0))\n    {\n        v3 = 16;\n        v11 = (unsigned int)sub_40ad90();\n    }\n    if ((v7->field_38 & 16) == 0 || v5->field_8 == 0 || v5->field_28 <= 63 && ((char)((char)*(&((char *)stack_base)[((v8 & 63) >> 3) + -392]) >> (unsigned long long)(char)(v8 & 63 & 7)) & 1) != 0)\n    {\n        v3 = 16;\n        v2 = v11;\n        v14 = (unsigned int)sub_40ad90();\n        if (v14 != 0 && v2 != 0 && v13 != 0 && v12 != 0)\n        {\n            tmp_25 = v6->field_28;\n            v12->field_28 = v6->field_28;\n            v13->field_28 = tmp_25;\n            tmp_42 = v6->field_32;\n            v12->field_32 = v12->field_32 & 4294967031 | (unsigned int)(v6->field_32 & 8);\n            v13->field_32 = (unsigned int)(v13->field_32 & 4294967031) | tmp_42 & 8;\n        }\n        if (v12 == 0 || v14 == 0 || v2 == 0 || v13 == 0)\n        {\n            *(v15) = 12;\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40e180",
            "funcStartAddr": "0x40e180",
            "funcEndAddr": "0x40e3a2",
            "decompiledFuncCode": "int sub_40e180() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_412ed0",
            "funcStartAddr": "0x412ed0",
            "funcEndAddr": "0x412ee9",
            "decompiledFuncCode": "int sub_412ed0()\n{\n    unsigned int v1;  // r15d\n    unsigned long long v2;  // r15\n\n    v2 = v1 & 0x1200;\n}\n"
        },
        {
            "funcName": "sub_416968",
            "funcStartAddr": "0x416968",
            "funcEndAddr": "0x416988",
            "decompiledFuncCode": "extern unsigned long long g_61ce30;\n\nint sub_416968()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_61ce30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_416310",
            "funcStartAddr": "0x416310",
            "funcEndAddr": "0x416366",
            "decompiledFuncCode": "int sub_416310()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if ((char)v11 == 0 || v3 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4058c0",
            "funcStartAddr": "0x4058c0",
            "funcEndAddr": "0x405932",
            "decompiledFuncCode": "extern int512_t g_61d5c0;\n\nint sub_4058c0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_61d5c0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_404400();\n}\n"
        },
        {
            "funcName": "sub_40a830",
            "funcStartAddr": "0x40a830",
            "funcEndAddr": "0x40aa6b",
            "decompiledFuncCode": "typedef struct struct_8 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_6 *field_10;\n} struct_8;\n\ntypedef struct struct_9 {\n    char padding_0[8];\n    char field_8;\n} struct_9;\n\ntypedef struct struct_5 {\n    char padding_0[16];\n    struct struct_6 *field_10;\n} struct_5;\n\ntypedef struct struct_7 {\n    uint128_t field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_7;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\ntypedef struct struct_1 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_1;\n\nint sub_40a830()\n{\n    unsigned int v0;  // [bp-0x7c]\n    unsigned long v1;  // [bp-0x78]\n    unsigned long long v2;  // [bp-0x70]\n    unsigned long v3;  // [bp-0x68]\n    void v4;  // [bp-0x58]\n    void *v5;  // [bp-0x48]\n    unsigned long long v7[7];  // rsi\n    unsigned long long v8[7];  // r15\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // r12\n    uint128_t *v11;  // rbp\n    struct_8 *v12;  // rbx\n    unsigned long v13;  // rcx\n    unsigned long long v14;  // rdx\n    unsigned long long v16;  // rax\n    struct_9 *v17;  // rax\n    unsigned long long v18;  // rsi\n    struct_5 *v19;  // rax\n    unsigned long long v20;  // r13\n    unsigned long long v21;  // r14\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rbx\n    struct_7 *v24;  // rax\n    unsigned long long v27;  // rax\n    uint128_t *v28;  // rax\n    struct_1 *v30;  // rdi\n\n    v8 = v7;\n    v10 = v9;\n    v11 = v9 * 24;\n    v12 = v7[5] + v9 * 24;\n    v0 = v13;\n    v2 = 0;\n    v1 = *((long long *)(v7[5] + v9 * 24 + 8)) + 1;\n    v3 = malloc((*((long long *)(v7[5] + v9 * 24 + 8)) + 1) * 8);\n    if (v3 != 0)\n    {\n        v14 = *(v8);\n        *((long long *)&((char *)v11)[8 + v8[6]]) = -1;\n        v17 = v14 + v10 * 16;\n        if (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0 && v12->field_8 != 0 && (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) == 0)\n        {\n            v16 = sub_409a60();\n            if ((unsigned int)v16 == 0)\n            {\n                v17 = *(v8) + v10 * 16;\n            }\n        }\n        if (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 != 0)\n        {\n            if (((unsigned int)v16 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0) && (v17->field_8 & 8) != 0)\n            {\n                v18 = v8[5];\n                v19 = v8[5] + (char *)v11;\n                if (*((long long *)&((char *)v11)[8 + v8[5]]) > 0)\n                {\n                    v20 = 0;\n                    v21 = 0;\n                    while (true)\n                    {\n                        v23 = v19->field_10[v21] * 24;\n                        v24 = v8[6] + v19->field_10[v21] * 24;\n                        if (*((long long *)&((char *)&v24->field_0)[8]) != -1)\n                        {\n                            if (*((long long *)&((char *)&v24->field_0)[8]) != 0)\n                            {\n                                *((uint128_t *)&v4) = v24->field_0;\n                                v5 = v24->field_8;\n                            }\n                            else\n                            {\n                                v16 = sub_40a830();\n                                if ((unsigned int)v16 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            v16 = sub_40a660();\n                            if ((unsigned int)v16 != 0)\n                            {\n                                break;\n                            }\n                            if (*((long long *)(v8[6] + v23 + 8)) == 0)\n                            {\n                                v20 = 1;\n                                free(v5);\n                            }\n                            v18 = v8[5];\n                            v21 += 1;\n                            v19 = v8[5] + (char *)v11;\n                        }\n                        else\n                        {\n                            v19 = v18 + (char *)v11;\n                            v20 = 1;\n                            v21 += 1;\n                        }\n                        v27 = sub_408b10();\n                        if (v27 == 0)\n                        {\n                            break;\n                        }\n                        v28 = v8[6];\n                        if (v20 == 0 || (char)v0 == 1)\n                        {\n                            break;\n                        }\n                        *((long long *)&((char *)v11)[8 + v8[6]]) = 0;\n                    }\n                    if (true)\n                    {\n                        return v16;\n                    }\n                    else if (v27 != 0 && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || *((long long *)&((char *)v11)[8 + v8[5]]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)v11)[8 + v18]) <= v21 || *((long long *)&((char *)v11)[8 + v8[5]]) <= v21))\n                    {\n                        *((int128_t *)(v28 + v11)) = *((int128_t *)&(&v2)[-1]);\n                        *((unsigned long *)(v28 + v11 + 16)) = v3;\n                    }\n                    else if ((*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || *((long long *)&((char *)v11)[8 + v8[5]]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)v11)[8 + v18]) <= v21 || *((long long *)&((char *)v11)[8 + v8[5]]) <= v21))\n                    {\n                        return 12;\n                    }\n                    else if (v27 != 0 && (char)v0 != 1 && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || (unsigned int)v16 == 0) && (*((long long *)&((char *)&v24->field_0)[8]) == -1 || *((long long *)&((char *)v11)[8 + v8[5]]) <= v21) && ((unsigned int)v16 == 0 || *((long long *)&((char *)v11)[8 + v18]) <= v21) && (*((long long *)&((char *)v11)[8 + v18]) <= v21 || *((long long *)&((char *)v11)[8 + v8[5]]) <= v21) && v20 != 0)\n                    {\n                        v30->field_10 = v3;\n                        v30->field_0 = *((int128_t *)&(&v2)[-1]);\n                        return 0;\n                    }\n                }\n            }\n            if (((*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) == 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0) && ((*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) == 0 || (v17->field_8 & 8) != 0) && ((unsigned int)v16 != 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0) && ((unsigned int)v16 != 0 || (v17->field_8 & 8) != 0) && (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0 || *((long long *)&((char *)v11)[8 + v8[5]]) > 0) && (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0 || (v17->field_8 & 8) != 0))\n            {\n                return v16;\n            }\n        }\n        if ((*((long long *)&((char *)v11)[8 + v8[5]]) <= 0 || v12->field_8 == 0 || (v17->field_8 & 8) == 0) && (*((long long *)&((char *)v11)[8 + v8[5]]) <= 0 || (v17->field_8 & 8) == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) != 0) && ((unsigned int)v16 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 == 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0))\n        {\n            v22 = sub_408b10();\n            if (v22 != 0)\n            {\n                v28 = v8[6];\n            }\n        }\n        if ((*((long long *)&((char *)v11)[8 + v8[5]]) > 0 || v22 != 0) && (v22 != 0 || (v17->field_8 & 8) != 0) && (((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 != 0 || v22 != 0) && ((unsigned int)v16 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 || v12->field_8 == 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0))\n        {\n            *((int128_t *)(v28 + v11)) = *((int128_t *)&(&v2)[-1]);\n            *((unsigned long *)(v28 + v11 + 16)) = v3;\n            v30->field_10 = v3;\n            v30->field_0 = *((int128_t *)&(&v2)[-1]);\n            return 0;\n        }\n    }\n    if (v3 == 0 || (unsigned int)v16 == 0 && v22 == 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 && v22 == 0 || v12->field_8 == 0 && v22 == 0 || v22 == 0 && (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0 || ((unsigned int)*((int *)(v14 + (v10 << 4) + 8)) & 0x3ff00) == 0 && *((long long *)&((char *)v11)[8 + v8[5]]) > 0 && (v17->field_8 & 8) != 0 || (unsigned int)v16 == 0 && *((long long *)&((char *)v11)[8 + v8[5]]) > 0 && v12->field_8 != 0 && (v17->field_8 & 8) != 0 || (*((char *)(*(v7) + (*(v12->field_10) << 4) + 10)) & 4) != 0 && *((long long *)&((char *)v11)[8 + v8[5]]) > 0 && v12->field_8 != 0 && (v17->field_8 & 8) != 0)\n    {\n        return 12;\n    }\n}\n"
        },
        {
            "funcName": "sub_4161cd",
            "funcStartAddr": "0x4161cd",
            "funcEndAddr": "0x4161fe",
            "decompiledFuncCode": "int sub_4161cd()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp+0x0]\n    unsigned long long v5;  // [bp+0x10]\n    unsigned long long v6;  // [bp+0x18]\n    unsigned long long v7;  // [bp+0x20]\n    unsigned long v8;  // rbx\n    unsigned long v9;  // r13\n    unsigned long v10;  // r14\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // r13\n    unsigned long long v15;  // r14\n\n    v2 = v8;\n    v1 = v9;\n    v0 = v10;\n    v11 = v3;\n    v12 = v5;\n    v13 = v6;\n    v15 = v7;\n    return (unsigned long long)(char)(sub_410a30() != 0);\n}\n"
        },
        {
            "funcName": "sub_410540",
            "funcStartAddr": "0x410540",
            "funcEndAddr": "0x4106e0",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[72];\n    struct struct_2 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    unsigned long long field_c0;\n} struct_1;\n\ntypedef struct struct_4 {\n    char padding_0[104];\n    char field_68;\n} struct_4;\n\ntypedef struct struct_3 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_3;\n\ntypedef struct struct_0 {\n    char padding_0[80];\n    unsigned long long field_50;\n} struct_0;\n\nint sub_410540()\n{\n    unsigned long long *v0;  // [bp-0x60]\n    void v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x48]\n    struct_1 *v4;  // rsi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rdx\n    struct_3 *v7;  // rax\n    struct_0 *v8;  // rdx\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // rax\n    unsigned int *v13;  // rdi\n    struct_4 *v15;  // rbp\n    unsigned long long v16;  // rax\n\n    v5 = v4->field_48;\n    if (v4->field_c0 < v4->field_48)\n    {\n        *((unsigned long long *)(v4->field_b8 + v4->field_48 * 8)) = v6;\n        v15 = v6;\n        v4->field_c0 = v5;\n    }\n    else if (*((long long *)(v4->field_b8 + (v4->field_48 << 3))) != 0)\n    {\n        v7 = *((long long *)(*((long long *)(v4->field_b8 + v4->field_48 * 8)) + 80));\n        if (v8 != 0)\n        {\n            v10 = v8->field_50;\n            v11 = sub_40b240();\n            *((unsigned long long *)&v13) = v11;\n            if (v11 == 0)\n            {\n                sub_40be50();\n                v0 = v4->field_b8 + v4->field_48 * 8;\n                v15 = (unsigned long long)(unsigned int)sub_40b3d0();\n                *(v0) = v15;\n                if (v10 != 0)\n                {\n                    free(v2);\n                }\n            }\n        }\n        else\n        {\n            *((uint128_t *)&v1) = v7->field_0;\n            v2 = v7->field_10;\n            sub_40be50();\n            v15 = (unsigned long long)(unsigned int)sub_40b3d0();\n            *((struct_4 **)(v4->field_b8 + v4->field_48 * 8)) = v15;\n        }\n    }\n    else\n    {\n        *((unsigned long long *)(v4->field_b8 + v4->field_48 * 8)) = v9;\n        v15 = v9;\n    }\n    if ((*((long long *)(v4->field_b8 + (v4->field_48 << 3))) == 0 || v4->field_c0 < v4->field_48 || v8 == 0 || v11 == 0) && v4->field_98->field_98 != 0 && v15 != 0)\n    {\n        v16 = sub_40bd00();\n        *((unsigned long long *)&v13) = v16;\n        if (v16 == 0 && (v15->field_68 & 64) != 0)\n        {\n            *(v13) = sub_40fcc0();\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_403260",
            "funcStartAddr": "0x403260",
            "funcEndAddr": "0x403289",
            "decompiledFuncCode": "extern char g_61d432;\n\nint sub_403260()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long v4;  // rdi\n\n    v0 = v2;\n    if (g_61d432 != 0)\n    {\n        sub_402f10();\n    }\n    signal(v4, 0x0);\n}\n"
        },
        {
            "funcName": "sub_404050",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x404058",
            "decompiledFuncCode": "extern char g_61d4a8;\n\nint sub_404050()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_61d4a8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403c80",
            "funcStartAddr": "0x403c80",
            "funcEndAddr": "0x40403d",
            "decompiledFuncCode": "extern unsigned int g_416a8c;\nextern unsigned int g_416bf0;\nextern unsigned int g_416c18;\nextern unsigned int g_416c40;\nextern unsigned int g_416cc8;\nextern unsigned int g_416cf0;\nextern unsigned int g_416d40;\nextern unsigned int g_416e00;\nextern unsigned int g_416e48;\nextern unsigned int g_416f10;\nextern unsigned int g_416f40;\nextern unsigned int g_416f78;\nextern unsigned int g_417160;\nextern unsigned int g_4171a8;\nextern unsigned int g_4171c8;\nextern unsigned long long stdout;\n\nint sub_403c80()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long v10;  // [bp-0x38]\n    unsigned long v11;  // [bp-0x30]\n    unsigned long long v12;  // [bp-0x28]\n    unsigned long long v13;  // [bp-0x20]\n    unsigned long v14;  // [bp-0x18]\n    unsigned long v15;  // [bp-0x8]\n    unsigned long v17;  // r12\n    unsigned long v18;  // rbx\n    unsigned int v19;  // edi\n    unsigned long long v31[2];  // rax\n    char *v32;  // rdi\n    char *v33;  // rsi\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    char *v41;  // rax\n    char *v42;  // rax\n    unsigned long long v43;  // rax\n\n    v15 = v17;\n    v14 = v18;\n    if (v19 != 0)\n    {\n        dcgettext(0x0, 0x416bf0, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416c18, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416c40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416cc8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416cf0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416d40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416e00, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416e48, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416f10, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416f40, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x416f78, 0x5), stdout);\n        v0 = \"[\";\n        v31 = &v0;\n        v1 = \"test invocation\";\n        v2 = \"coreutils\";\n        v3 = \"Multi-call\";\n        v4 = \"sha224sum\";\n        v5 = \"sha2 utilities\";\n        v6 = \"sha256sum\";\n        v7 = \"sha2 utilities\";\n        v8 = \"sha384sum\";\n        v9 = \"sha2 utilities\";\n        v10 = \"sha512sum\";\n        v11 = \"sha2 utilities\";\n        v12 = 0;\n        v13 = 0;\n        while (true)\n        {\n            v31 = &v2;\n            v32 = v2;\n            if (v2 == 0)\n            {\n                break;\n            }\n            v33 = \"csplit\";\n            v34 = 7;\n            if ((v35 > v36) - 0 - (v35 < v36) == 0)\n            {\n                break;\n            }\n            while (v34 != 0)\n            {\n                v34 -= 1;\n                v35 = *(v33);\n                v36 = *(v32);\n                v32 = &v32[v37];\n                v33 = &v33[v37];\n                break;\n            }\n        }\n        if (v31[1] != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416a8c, 0x5));\n            v42 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x416a8c, 0x5));\n            v41 = setlocale(0x5, 0x0);\n            if (v41 != 0)\n            {\n                v43 = strncmp(v41, \"en\", 0x3);\n            }\n            if (v41 == 0 || v43 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4171a8, 0x5));\n            }\n        }\n        if ((v31[1] == 0 || strncmp(v42, \"en\", 0x3) != 0) && (v31[1] == 0 || v42 != 0) && (v41 != 0 || v31[1] != 0) && (v31[1] != 0 || v43 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x417160, 0x5));\n        }\n        if (v31[1] != 0 || v41 != 0 && v43 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4171a8, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x4171c8, 0x5));\n    }\n    exit(v19); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_408780",
            "funcStartAddr": "0x408780",
            "funcEndAddr": "0x40897a",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[152];\n    struct struct_5 *field_98;\n    char padding_a0[56];\n    unsigned long long field_d8;\n} struct_4;\n\ntypedef struct struct_8 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_1 *field_10;\n} struct_8;\n\ntypedef struct struct_7 {\n    char padding_0[40];\n    unsigned long long field_28;\n} struct_7;\n\ntypedef struct struct_6 {\n    unsigned long long field_0;\n    char padding_8[26];\n    unsigned short field_22;\n} struct_6;\n\nint sub_408780()\n{\n    unsigned int v0;  // [bp-0x74]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long long v2;  // [bp-0x60]\n    unsigned int v3;  // [bp-0x58]\n    unsigned short v4;  // [bp-0x52]\n    unsigned long v5;  // [bp-0x50]\n    unsigned long long v6[3];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // r15\n    unsigned long v11;  // rcx\n    struct_4 *v12;  // rdi\n    unsigned long long v13;  // rcx\n    unsigned long v14;  // r8\n    unsigned long long v15;  // esi\n    unsigned long long v16;  // rbp\n    unsigned long long *v17;  // rax\n    unsigned long long v18;  // rdx\n    unsigned long long v19;  // rbx\n    unsigned long long v20[7];  // r14\n    struct_7 *v21;  // r15\n    struct_6 *v22;  // r12\n    unsigned long long v23;  // rax\n    struct_8 *v24;  // r13\n    unsigned long long v25[7];  // r15\n    unsigned long long v26;  // r14\n\n    v10 = v9;\n    v1 = v11;\n    v24 = v12->field_98->field_30 + v11 * 24;\n    if (*((long long *)(v12->field_98->field_30 + (v11 + (v11 << 1) << 3) + 8)) > 0)\n    {\n        v13 = v10;\n        v26 = v10;\n        v19 = 0;\n        v25 = v12->field_98;\n        v5 = v14 * 40;\n        v2 = 1 << (v13 & 63);\n        v4 = !((unsigned int)(1 << (v13 & 63)));\n        *((unsigned long long *)&v0) = v15 & 2;\n        *((unsigned long long *)&v3) = v15 & 1;\n        while (true)\n        {\n            v16 = v24->field_10[v19];\n            v17 = v24->field_10[v19] * 16 + *(v25);\n            v18 = (char)*((char *)(v24->field_10[v19] * 16 + *(v25) + 8));\n            if (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8)\n            {\n                if (v18 == 4 && v14 != -1 && v18 != 9)\n                {\n                    v15 = v26;\n                    v6[0] = v24;\n                    v7 = v19;\n                    v20 = v25;\n                    v21 = v16;\n                    v22 = v5 + v12->field_d8;\n                    while (true)\n                    {\n                        if (v22->field_0 == v21 && (v15 > 63 || (v22->field_22 & v2) != 0))\n                        {\n                            if (v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))))\n                            {\n                                v23 = sub_408780();\n                                if (v23 == -1)\n                                {\n                                    break;\n                                }\n                                if (v23 == 0 && v0 != 0)\n                                {\n                                    break;\n                                }\n                                if (v15 <= 63)\n                                {\n                                    v22->field_22 = v22->field_22 & v4;\n                                }\n                            }\n                            else\n                            {\n                                return 0 - (v15 & 1);\n                            }\n                        }\n                        if (v22->field_0 != v21 || v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))) || v15 <= 63 && (v22->field_22 & v2) == 0)\n                        {\n                            v22 = (char *)&v22[1].field_0 + 4;\n                            v24 = v6;\n                            v21 = v20;\n                            v26 = v15;\n                            v19 = v7 + 1;\n                            break;\n                        }\n                    }\n                    if (v22[-1].padding_8[20] == 0 && (v0 == 0 || (v22->field_22 & v2) == 0 || v22->field_0 != v21 || v23 != 0))\n                    {\n                        v16 = v24->field_10[v19];\n                        v17 = v24->field_10[v19] * 16 + *(v25);\n                        v18 = (char)*((char *)(v24->field_10[v19] * 16 + *(v25) + 8));\n                    }\n                    else if (v22->field_0 == v21 && v23 == 0 && v23 != -1 && v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))) && (v15 > 63 || (v22->field_22 & v2) != 0))\n                    {\n                        return 0;\n                    }\n                    else if (v22->field_0 == v21 && v1 != *((long long *)*((long long *)(v21->field_28 + ((char *)v21 + 0x2 * v21 << 3) + 16))) && (v15 > 63 || (v22->field_22 & v2) != 0))\n                    {\n                        return -18446744069414584321;\n                    }\n                    else if (v22[-1].padding_8[20] == 0 && (v0 == 0 || (v22->field_22 & v2) == 0 || v22->field_0 != v21 || v23 != 0))\n                    {\n                        return (long long)v15 >> 1;\n                    }\n                }\n                if ((v18 == 4 || v18 == 9) && (*(v17) == v26 || v18 != 9) && (v18 == 9 || v14 != -1) && (v0 != 0 || v18 != 9))\n                {\n                    return 0;\n                }\n            }\n            if (v3 == 0 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 && *(v17) != v26 || v0 == 0 && v18 == 9 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 || v14 == -1 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 && v18 != 9 || v18 == 9 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 && *(v17) != v26 || v18 != 4 && *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8 && v18 != 9)\n            {\n                v19 += 1;\n                if (v24->field_8 <= v19)\n                {\n                    break;\n                }\n            }\n            if ((v18 == 4 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8) && (*(v17) == v26 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8) && (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 || v14 != -1) && (*((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) == 8 || v18 != 9) && (v3 != 0 || *((char *)((v24->field_10[v19] << 4) + *(v25) + 8)) != 8))\n            {\n                return -18446744069414584321;\n            }\n        }\n    }\n    return (long long)v15 >> 1;\n}\n"
        },
        {
            "funcName": "sub_40bf40",
            "funcStartAddr": "0x40bf40",
            "funcEndAddr": "0x40c04a",
            "decompiledFuncCode": "int sub_40bf40()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rdx\n    unsigned long v4;  // rcx\n    unsigned long v5;  // rsi\n    unsigned long v6;  // rbx\n    unsigned long v7;  // rdx\n    unsigned long v8;  // rbx\n    unsigned long v9;  // rbx\n    unsigned long v10;  // rax\n    unsigned int v11;  // edx\n    unsigned long v12;  // rbx\n\n    v4 = (char)*((char *)(*((long long *)(v2 + 8)) + v3));\n    if (*((char *)(v5 + 8)) != 3)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)))\n        {\n            if (*((char *)(v5 + 8)) != 5 && *((char *)(v5 + 8)) != 7)\n            {\n                return 0;\n            }\n            if ((*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0))\n            {\n                if (*((char *)(*((long long *)(v2 + 8)) + v3)) != 10)\n                {\n                }\n                else\n                {\n                    if ((*((char *)(*((long long *)(v2 + 152)) + 216)) & 64) == 0)\n                    {\n                        return 0;\n                    }\n                }\n            }\n        }\n        else if (!(*((char *)(v5 + 8)) == 1))\n        {\n            return 0;\n        }\n    }\n    else\n    {\n        if (((char)(*((long long *)(*((long long *)v5) + ((unsigned long long)v4 >> 6 << 3))) >> (v4 & 63)) & 1) == 0)\n        {\n            return 0;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>) && *((char *)(v5 + 8)) == 1 && *((char *)(v5 + 8)) != 3 && *((char *)v5) != *((char *)(*((long long *)(v2 + 8)) + v3)) || *((char *)(v5 + 8)) == 7 && *((char *)(*((long long *)(v2 + 8)) + v3)) < 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && *((char *)(v5 + 8)) != 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) == 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && (*((char *)(*((long long *)(v2 + 152)) + 216)) & 128) != 0 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 10 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0))\n    {\n        return 0;\n    }\n    if (*((char *)(v5 + 8)) == 3 && ((char)(*((long long *)(*((long long *)v5) + ((unsigned long long)v4 >> 6 << 3))) >> (v4 & 63)) & 1) != 0 || (char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>) && *((char *)(v5 + 8)) == 1 && *((char *)v5) == *((char *)(*((long long *)(v2 + 8)) + v3)) && *((char *)(v5 + 8)) != 3 || *((char *)(*((long long *)(v2 + 8)) + v3)) == 10 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && (*((char *)(*((long long *)(v2 + 152)) + 216)) & 64) != 0 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0) || !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 10 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 0 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0) || (*((char *)(*((long long *)(v2 + 152)) + 216)) & 128) == 0 && *((char *)(*((long long *)(v2 + 8)) + v3)) == 0 && !((char)[D] amd64g_calculate_condition(0x6<64>, 0x5<64>, Conv(8->64, Load(addr=(rsi<8> + 0x8<64>), size=1, endness=Iend_LE)), 0x3<64>, cc_ndep<8>)) && *((char *)(v5 + 8)) != 3 && *((char *)(*((long long *)(v2 + 8)) + v3)) != 10 && (*((char *)(v5 + 8)) == 7 || *((char *)(v5 + 8)) == 5) && (*((char *)(v5 + 8)) == 5 || *((char *)(*((long long *)(v2 + 8)) + v3)) >= 0))\n    {\n        v0 = v6;\n        v10 = 1;\n        if (((unsigned int)*((int *)(v5 + 8)) & 0x3ff00) != 0)\n        {\n            v7 = (unsigned int)sub_40be50();\n            if (!(((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0))\n            {\n                v10 = 0;\n                if ((v7 & 1) != 0 && ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) != 0)\n                {\n                    v8 = v0;\n                    return 0;\n                }\n            }\n            else if (((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) != 0)\n            {\n                if (((char)v7 & 1) != 0)\n                {\n                    v9 = v0;\n                    return 0;\n                }\n            }\n            if ((((char)v7 & 1) == 0 || ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) == 0) && (((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0 || ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) == 0) && (((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0 || (v7 & 1) != 0))\n            {\n                if (((char)((unsigned short)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 1023) & 32) != 0)\n                {\n                    v10 = 0;\n                }\n                if (((char)((unsigned short)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 1023) & 32) == 0 || (v7 & 2) != 0)\n                {\n                    v11 = (unsigned int)v7 % 8 & 1;\n                    v10 = (unsigned int)((v4 & 128) != 0? (unsigned int)rdx<8> : 1);\n                }\n            }\n        }\n        if (((unsigned int)*((int *)(v5 + 8)) & 0x3ff00) == 0 || ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 8) == 0 || ((char)v7 & 1) == 0 && ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) == 0 || (v7 & 1) == 0 && ((char)((unsigned long long)(unsigned int)*((int *)(v5 + 8)) >> 8) & 4) != 0)\n        {\n            v12 = v0;\n            return v10;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40e8a0",
            "funcStartAddr": "0x40e8a0",
            "funcEndAddr": "0x40eb01",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[120];\n    unsigned int field_90;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n    char padding_21[7];\n    unsigned long long field_28;\n    char padding_30[16];\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_0;\n\nint sub_40e8a0()\n{\n    unsigned long long v1;  // rdx\n    unsigned long long v2;  // rdx\n    unsigned long v3;  // rdi\n    unsigned long long v4[12];  // rcx\n    unsigned long long v5;  // rax\n    char *v6;  // r8\n    unsigned long long v7;  // rdx\n    struct_1 *v8;  // rcx\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rdi\n    unsigned long long v11;  // rbp\n    char v12;  // r11b\n    unsigned long long v13;  // rdi\n    struct struct_0 **v15;  // r10\n    struct_0 *v16;  // r13\n    unsigned long long v17;  // rsi\n    unsigned long long v18;  // rdx\n    unsigned long long v20;  // rdi\n    unsigned int *v21;  // r8\n    unsigned long long v22;  // rax\n    char *v23;  // rdx\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rbx\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // rax\n\n    v2 = v1 * 16;\n    if (!(*((char *)(v3 + v2 + 8)) != 7))\n    {\n        v5 = v4[1];\n        v7 = v6[v4[1]];\n        if (v6[v4[1]] > 193)\n        {\n            v9 = v4[11];\n            if (&v6[1] < v9)\n            {\n                v10 = v6[1 + v5];\n                if (v7 > 223)\n                {\n                    if (v7 <= 239)\n                    {\n                        if (v10 > 159 || v7 != 224)\n                        {\n                            v20 = 3;\n                        }\n                    }\n                    else\n                    {\n                        if (v7 <= 247 && (v7 != 240 || v10 > 143))\n                        {\n                            v20 = 4;\n                        }\n                    }\n                }\n                else\n                {\n                    v13 = (unsigned int)v10 - 128;\n                }\n            }\n        }\n    }\n    else if (v8->field_90 != 1)\n    {\n        v11 = (unsigned int)sub_40a0d0();\n        if (v12 != 5 && v12 == 6 && (unsigned int)v11 > 1)\n        {\n            v16 = *(v15);\n            v17 = *(v15)->field_40;\n            v18 = *(v15)->field_28;\n            if ((*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0))\n            {\n                v22 = 0;\n                do\n                {\n                    v22 += 1;\n                }\n                while (*(v15)->field_28 != v22 && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)(*(v15)->field_0 + (v22 << 2))));\n            }\n        }\n    }\n    if (v7 <= 251 && &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 239 && v7 != 248 && v7 > 223 && v7 > 247 || v7 <= 251 && &v6[1] < v9 && v7 == 248 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 239 && v7 > 223 && v10 > 135 && v7 > 247)\n    {\n        v20 = 5;\n    }\n    if (v7 <= 253 && &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 251 && v7 != 252 && v7 > 239 && v7 > 223 && v7 > 247 || v7 <= 253 && v7 == 252 && &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 251 && v7 > 239 && v10 > 131 && v7 > 223 && v7 > 247)\n    {\n        v20 = 6;\n    }\n    if (&v6[1] < v9 && v7 <= 239 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 223 && (v10 > 159 || v7 != 224) || v7 <= 251 && &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 239 && v7 != 248 && v7 > 223 && v7 > 247 || &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v7 <= 247 && v6[v4[1]] > 193 && v7 > 239 && v7 > 223 && (v7 != 240 || v10 > 143) || v7 <= 251 && &v6[1] < v9 && v7 == 248 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 239 && v7 > 223 && v10 > 135 && v7 > 247 || v7 <= 253 && &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 251 && v7 != 252 && v7 > 239 && v7 > 223 && v7 > 247 || v7 <= 253 && v7 == 252 && &v6[1] < v9 && *((char *)(v3 + v2 + 8)) == 7 && v6[v4[1]] > 193 && v7 > 251 && v7 > 239 && v10 > 131 && v7 > 223 && v7 > 247)\n    {\n        if (v9 >= &v6[v20])\n        {\n            v23 = &v6[1 + v5];\n            v24 = &v6[v5 + v20];\n            while (true)\n            {\n                if (((unsigned long long)*(v23) - 128 & 255) <= 63)\n                {\n                    v23 = &v23[1];\n                    if (v24 == v23)\n                    {\n                        break;\n                    }\n                }\n            }\n        }\n        if (((unsigned long long)*(v23) - 128 & 255) <= 63)\n        {\n            return stack_base + 0;\n        }\n    }\n    if ((v12 == 6 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && v8->field_90 != 1 && (unsigned int)v11 > 1 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0) || v12 == 6 && v8->field_90 != 1 && (unsigned int)v11 > 1 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v25 = 0;\n        while (true)\n        {\n            v26 = iswctype(*((int *)(v8->field_10 + v21 * 4)), *((long long *)(*(v15)->field_18 + v25 * 8)));\n            if (v26 != 0)\n            {\n                break;\n            }\n            v25 += 1;\n            v17 = *(v15)->field_40;\n        }\n    }\n    if (((v12 == 6 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && v8->field_90 != 1 && (unsigned int)v11 > 1 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0) || v12 == 6 && v8->field_90 != 1 && (unsigned int)v11 > 1 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) || (v12 == 6 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && v8->field_90 != 1 && (unsigned int)v11 > 1 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && *((int *)(v8->field_10 + (v21 << 2))) != *((int *)*(v15)->field_0) || v12 == 6 && v8->field_90 != 1 && (unsigned int)v11 > 1 && *((char *)(v3 + v2 + 8)) != 7 && v12 != 5 && (*(v15)->field_40 != 0 || v16->field_48 != 0 || v18 != 0) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v27 = 0;\n        while (*((int *)(v8->field_10 + (v21 << 2))) < *((int *)(*(v15)->field_8 + (v27 << 2))) || *((int *)(v8->field_10 + (v21 << 2))) > *((int *)(*(v15)->field_10 + (v27 << 2))))\n        {\n            v27 += 1;\n            if (v27 == v17)\n            {\n                break;\n            }\n        }\n    }\n    return stack_base + 0;\n}\n"
        },
        {
            "funcName": "sub_40a600",
            "funcStartAddr": "0x40a600",
            "funcEndAddr": "0x40a64d",
            "decompiledFuncCode": "int sub_40a600()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rdx\n    unsigned long long v5;  // rdi\n    unsigned long long v6[3];  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // rdx\n    unsigned long long v12;  // rbx\n\n    v2 = v1;\n    v12 = v5;\n    while (true)\n    {\n        v6 = v12;\n        v7 = v3;\n        v8 = r12<8>();\n        if ((unsigned int)v8 != 0)\n        {\n            break;\n        }\n        v10 = *((long long *)(v12 + 8));\n        v9 = 0;\n        if (*((long long *)(v12 + 8)) == 0)\n        {\n            while (true)\n            {\n                v10 = *((long long *)(v12 + 16));\n                if (*((long long *)(v12 + 16)) != v9 && v10 != 0)\n                {\n                    break;\n                }\n                v11 = *((long long *)v12);\n                v9 = v12;\n                if (*((long long *)v12) == 0)\n                {\n                    break;\n                }\n                v12 = v11;\n            }\n            if (*((long long *)(v12 + 16)) != v9)\n            {\n                v12 = v10;\n            }\n            else if (*((long long *)(v12 + 16)) == v9 || v10 == 0)\n            {\n                return v8;\n            }\n        }\n        v12 = v10;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_4129c0",
            "funcStartAddr": "0x4129c0",
            "funcEndAddr": "0x412bc9",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[24];\n    unsigned long long field_68;\n    char padding_70[27];\n    char field_8b;\n    char field_8c;\n    char padding_8d[3];\n    unsigned int field_90;\n} struct_0;\n\ntypedef struct struct_1 {\n    unsigned int field_0;\n    char padding_4[4];\n    struct struct_2 *field_8;\n} struct_1;\n\ntypedef struct struct_3 {\n    unsigned int field_0;\n    char padding_4[4];\n    char field_8;\n} struct_3;\n\nint sub_4129c0()\n{\n    void tmp_27;  // tmp #27\n    char v0;  // [bp-0x30]\n    struct_0 *v2;  // rsi\n    struct_0 *v3;  // r10\n    char v4[9];  // rdx\n    char v5[9];  // rbp\n    struct_1 *v6;  // rdi\n    struct_3 *v7;  // rbx\n    unsigned int *v8;  // r12\n    unsigned long long v9;  // rax\n    unsigned long v10;  // rcx\n    void *v11;  // r11\n    unsigned long long v12;  // r9\n    unsigned long long v13;  // r8\n    char v14;  // r9b\n    unsigned long long v15;  // r12\n    char *v16;  // rax\n    char *v17;  // r11\n    unsigned long long v18;  // r13\n    void *v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v23;  // rdx\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // rax\n\n    v3 = v2;\n    v5 = v4;\n    v7 = v6;\n    v8 = v2->field_48;\n    if (v2->field_90 != 1)\n    {\n        v9 = sub_40a0d0();\n        if ((unsigned int)v9 > 1)\n        {\n            tmp_27 = v3->field_10;\n            v7->field_0 = 1;\n            *((int *)&v7->field_8) = *((int *)(tmp_27 + v8 * 4));\n            v3->field_48 = v9 + (char *)v8;\n            return 0;\n        }\n    }\n    if (v2->field_90 == 1 || (unsigned int)v9 <= 1)\n    {\n        v21 = v4[1];\n        v11 = v10 + (char *)v8;\n        v2->field_48 = v10 + (char *)v8;\n        if ((char)((unsigned int)v21 & -5) != 26 && v4[1] != 28)\n        {\n            if (v4[1] == 22 && v14 == 0)\n            {\n                sub_408630();\n                v24 = 11;\n            }\n            if (v0 == 21 || v4[1] != 22 || v14 != 0)\n            {\n                v25 = v4[0];\n                v7->field_0 = 0;\n                *((unsigned long long *)&v7->field_8) = v25;\n                v24 = 0;\n            }\n        }\n        if (v4[1] == 28 || (char)((unsigned int)v21 & -5) == 26)\n        {\n            if (v10 + v2->field_48 < v2->field_68)\n            {\n                v12 = v4[0];\n                v13 = 0;\n                while (true)\n                {\n                    v15 = v13;\n                    if (v21 == 30 && v2->field_8b != 0)\n                    {\n                        if (v2->field_8c == 0)\n                        {\n                            v16 = v11 + 1;\n                            v17 = v11 + v3->field_0 + v3->field_28;\n                            v3->field_48 = v16;\n                            v18 = *(v17);\n                        }\n                        else if (v11 == v2->field_30 || *((int *)(v2->field_10 + (v11 << 2))) != -1)\n                        {\n                            v18 = (char)*((char *)(*((long long *)(v3->field_18 + v11 * 8)) + v3->field_0 + v3->field_28));\n                            if ((*((char *)(*((long long *)(v3->field_18 + (v11 << 3))) + v3->field_0 + v3->field_28)) & 128) == 0)\n                            {\n                                v20 = 1;\n                                if (v3->field_90 != 1)\n                                {\n                                    v20 = sub_40a0d0();\n                                }\n                                v16 = v20 + v11;\n                                v3->field_48 = v16;\n                            }\n                        }\n                    }\n                    if (v2->field_8b == 0 || v21 != 30 || (*((char *)(*((long long *)(v3->field_18 + (v11 << 3))) + v3->field_0 + v3->field_28)) & 128) != 0 && v2->field_8c != 0 || *((int *)(v2->field_10 + (v11 << 2))) == -1 && v11 != v2->field_30 && v2->field_8c != 0)\n                    {\n                        v19 = v3->field_8;\n                        v16 = v11 + 1;\n                        v3->field_48 = v11 + 1;\n                        v18 = (char)*((char *)(v19 + v11));\n                    }\n                    if (v3->field_68 <= v16)\n                    {\n                        break;\n                    }\n                    if (v16[v3->field_8] == 93 && v12 == v18)\n                    {\n                        v3->field_48 = &v16[1];\n                        v6->field_8[v15].field_0 = 0;\n                        v23 = v5[1];\n                        if (v5[1] == 28)\n                        {\n                            v6->field_0 = 2;\n                            v24 = 0;\n                        }\n                        else if (v23 != 30)\n                        {\n                            v24 = 0;\n                            if (v23 != 26)\n                            {\n                                break;\n                            }\n                            v6->field_0 = 3;\n                        }\n                        else\n                        {\n                            v6->field_0 = 4;\n                            v24 = 0;\n                        }\n                    }\n                    if (v16[v3->field_8] != 93 || v12 != v18)\n                    {\n                        *((unsigned long long *)&v6->field_8) = v18;\n                        v13 = 1;\n                        if (false)\n                        {\n                            break;\n                        }\n                        v21 = v5[1];\n                        v11 = v3->field_48;\n                    }\n                }\n                if (v16[v3->field_8] == 93 && v12 == v18 && v3->field_68 > v16)\n                {\n                    return v24;\n                }\n                return 7;\n            }\n            return 7;\n        }\n        if (v10 + v2->field_48 < v2->field_68 || v4[1] != 28 && (char)((unsigned int)v21 & -5) != 26)\n        {\n            return v24;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_403340",
            "funcStartAddr": "0x403340",
            "funcEndAddr": "0x40341c",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_1;\n\nint sub_403340()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v2[164];  // rbp\n    unsigned long long *v3;  // rdi\n    unsigned long long v4[164];  // rax\n    unsigned long long v5;  // rax\n    unsigned long long v6[164];  // rax\n    unsigned long long v7[164];  // rbx\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rsi\n    struct_1 *v10;  // rdi\n    unsigned long v11;  // rdx\n    unsigned long v12;  // rcx\n\n    v2 = v1;\n    if (*(v3) == 0)\n    {\n        v4 = sub_4064b0();\n        *(v1) = v4;\n        v4[163] = 0;\n        v4[0] = 0;\n        v4[1] = 0;\n        v4[2] = 0;\n        *(v3) = v4;\n    }\n    v7 = *(v2);\n    v5 = *(*(v2));\n    if (*(*(v2)) == 80)\n    {\n        v6 = sub_4064b0();\n        v6[163] = 0;\n        v6[0] = 0;\n        v6[1] = 0;\n        v6[2] = 0;\n        v7[163] = v6;\n        v7 = (*(v2))[163];\n        *((unsigned long long [164])v2) = (*(v2))[163];\n        v5 = *(v7);\n    }\n    v8 = v5 + 1;\n    v9 = v7[1] + 1;\n    v10 = &v7[2 * v7[1]];\n    v7[4 + 2 * v7[1]] = v11;\n    v10->field_18 = v12;\n    v7[0] = v8;\n    v7[1] = v9;\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_408fa0",
            "funcStartAddr": "0x408fa0",
            "funcEndAddr": "0x409574",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[16];\n    unsigned long long field_58;\n    unsigned long long field_60;\n    unsigned long long field_68;\n    char padding_70[8];\n    unsigned long long field_78;\n    char padding_80[10];\n    char field_8a;\n    char padding_8b[1];\n    char field_8c;\n    char padding_8d[3];\n    unsigned int field_90;\n} struct_0;\n\nint sub_408fa0()\n{\n    unsigned int|unsigned long|void *|unsigned long long v0;  // [bp-0xa8]\n    void tmp_24;  // tmp #24\n    void tmp_25;  // tmp #25\n    unsigned int|unsigned long|unsigned long long v1;  // [bp-0xa0]\n    unsigned long|void *|unsigned long long v2;  // [bp-0x98]\n    unsigned long v3;  // [bp-0x90]\n    unsigned int v4;  // [bp-0x84]\n    unsigned long v5;  // [bp-0x80]\n    char v6;  // [bp-0x78]\n    struct_0 *v8;  // rdi\n    struct_0 *v9;  // r14\n    void *v10;  // rbp\n    unsigned int *v11;  // r13\n    unsigned long long v12;  // rax\n    unsigned long v14;  // r12\n    unsigned int v15;  // r13d\n    unsigned int v16;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long v20;  // rax\n    unsigned int *v23;  // rcx\n    unsigned long long v24;  // rax\n    char *v25;  // rdx\n    unsigned long long v27;  // r10\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rdi\n    unsigned long v30;  // rbp\n    unsigned int v31;  // r13d\n    char *v33;  // rax\n    unsigned long v34;  // r10\n    void *v35;  // rcx\n    void *v37;  // r8\n    unsigned long v40;  // rax\n    unsigned long long v41;  // rax\n    void *v42;  // rax\n    void *v43;  // rdx\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rax\n    void *v47;  // rsi\n    void *v48;  // rdx\n    unsigned long long v49;  // rcx\n    unsigned int *v50;  // rdx\n    void *v52;  // r15\n    unsigned long long v54;  // rsi\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rax\n    unsigned long long v57;  // r10\n    unsigned long long v58;  // rbx\n    unsigned long v59;  // rbx\n    void *|unsigned long long v60;  // r12\n    unsigned long long v61;  // rax\n\n    v9 = v8;\n    v59 = (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58);\n    v52 = v8->field_30;\n    if (v8->field_8a == 0 && v8->field_78 == 0 && v8->field_8c == 0)\n    {\n        if (v8->field_30 < (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58))\n        {\n            v0 = &v8->field_20;\n            do\n            {\n                v10 = v52;\n                v11 = (unsigned long long)(char)*(&((char *)v52)[v9->field_0 + v9->field_28]);\n                if ((*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) == 0)\n                {\n                    v12 = mbsinit(v0);\n                    if (v12 != 0)\n                    {\n                        *((unsigned long long *)&((char *)v52)[v9->field_8]) = (unsigned int)*((int *)(*((long long *)(unsigned long long)__ctype_toupper_loc()) + v11 * 4));\n                        *((unsigned int *)(v9->field_10 + v52 * 4)) = (char)*(&((char *)v52)[v9->field_8]);\n                        v52 += 1;\n                    }\n                }\n                if (v12 == 0 || (*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) != 0)\n                {\n                    v5 = v9->field_20;\n                    v2 = (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58) - v52;\n                    v3 = stack_base + -132;\n                    v14 = (unsigned int)sub_4083e0();\n                    if (v14 <= -3)\n                    {\n                        v1 = v4;\n                        v15 = towupper(v4);\n                        if (v1 != v15)\n                        {\n                            v18 = wcrtomb((unsigned int)&v6, v15, (unsigned int)&v5);\n                            if (v14 == v18)\n                            {\n                                memcpy(v9->field_8 + v52, &v6, v14);\n                            }\n                            else\n                            {\n                                v60 = v52;\n                            }\n                        }\n                        else\n                        {\n                            memcpy(v9->field_8 + v52, v9->field_28 + v52 + v9->field_0, v14);\n                        }\n                        if (v1 == v15 || v14 == v18)\n                        {\n                            v20 = v9->field_10;\n                            v52 += 1;\n                            *((unsigned int *)(v9->field_10 + v10 * 4)) = v15;\n                            if (v52 < v52)\n                            {\n                                v23 = v20 + v10 * 4 + 4;\n                                v24 = v20 + v52 * 4;\n                                do\n                                {\n                                    *(v23) = -1;\n                                    v23 = &v23[1];\n                                }\n                                while (v24 != v23);\n                                v52 = v10 + v14;\n                            }\n                        }\n                    }\n                    else if (v14 != -2)\n                    {\n                        tmp_24 = (char)*(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        *(&((char *)v52)[v9->field_8]) = *(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        v52 += 1;\n                        *((unsigned int *)(v9->field_10 + v10 * 4)) = tmp_24;\n                        v9->field_20 = v5;\n                    }\n                    else if (v9->field_40 >= v9->field_58)\n                    {\n                        v16 = (char)*(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        *(&((char *)v52)[v9->field_8]) = *(&((char *)v52)[v9->field_28 + v9->field_0]);\n                        v52 += 1;\n                        *((unsigned int *)(v9->field_10 + v10 * 4)) = v16;\n                    }\n                    else\n                    {\n                        v9->field_20 = v5;\n                    }\n                }\n            }\n            while (!((v1 == v15 && v14 <= -3 || v14 == v18 && v14 <= -3 || (*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) == 0 && v12 != 0 || v9->field_40 >= v9->field_58 && v14 > -3 || v14 > -3 && v14 != -2) && (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58) <= v52));\n            if (v14 <= -3 && v1 != v15 && v14 != v18 && (v12 == 0 || (*(&((char *)v52)[v9->field_0 + v9->field_28]) & 128) != 0))\n            {\n                v25 = v9->field_78;\n                v5 = v9->field_20;\n            }\n            else\n            {\n                v9->field_30 = v52;\n                v61 = 0;\n                v9->field_38 = v52;\n            }\n        }\n        if (v8->field_30 >= (v8->field_40 <= v8->field_58? v8->field_40 : v8->field_58) || v9->field_78 != 0)\n        {\n            v9->field_30 = v52;\n            v61 = 0;\n            v9->field_38 = v52;\n        }\n    }\n    if (v8->field_8c != 0 || v8->field_78 != 0 || v8->field_8a != 0)\n    {\n        v60 = v8->field_38;\n    }\n    v25 = v9->field_78;\n    v5 = v9->field_20;\n    if (v9->field_78 == 0)\n    {\n        v1 = v9->field_28 + v60 + v9->field_0;\n    }\n    else\n    {\n        if (v9->field_90 > 0 && v2 > 0)\n        {\n            v27 = (unsigned long long)v9->field_90 - 1;\n            v28 = 0;\n            v29 = v9->field_28 + v60 + v9->field_0;\n            do\n            {\n                v6 = v25[(unsigned long long)(char)*((char *)(v29 + v28))];\n                v28 += 1;\n            }\n            while (v2 != v28 && v27 != v28);\n        }\n        v1 = &v6;\n    }\n    v30 = (unsigned int)sub_4083e0();\n    if (v30 <= -3)\n    {\n        v0 = v4;\n        v31 = towupper(v4);\n        if (v0 != v31)\n        {\n            v2 = v52;\n            v0 = &v6;\n            v34 = wcrtomb((unsigned int)&v6, v31, (unsigned int)&v5);\n            if (v30 == v34)\n            {\n                v0 = v2;\n                memcpy(v9->field_8 + v52, &v6, v30);\n                v37 = v0;\n            }\n            else\n            {\n                if (v34 != -1)\n                {\n                    v0 = v52 + v34;\n                    v40 = v9->field_40;\n                    if (v52 + v34 <= v9->field_40)\n                    {\n                        if (v9->field_18 == 0)\n                        {\n                            v2 = &v6;\n                            v1 = v34;\n                            v41 = malloc(v40 * 8);\n                            v34 = v1;\n                            v9->field_18 = v41;\n                            if (v41 == 0)\n                            {\n                                v61 = 12;\n                            }\n                        }\n                        if (v41 != 0 || v9->field_18 != 0)\n                        {\n                            if (v9->field_8c == 0)\n                            {\n                                if (v52 != 0)\n                                {\n                                    v45 = 0;\n                                    do\n                                    {\n                                        *((unsigned long long *)(v9->field_18 + v45 * 8)) = v45;\n                                        v45 += 1;\n                                    }\n                                    while (v52 != v45);\n                                }\n                                v9->field_8c = 1;\n                            }\n                            v1 = v34;\n                            memcpy(v9->field_8 + v52, &v6, v34);\n                            v54 = v9->field_10 + v52 * 4;\n                            tmp_25 = v9->field_18;\n                            *((unsigned int *)(v9->field_10 + v52 * 4)) = v31;\n                            v55 = tmp_25 + v52 * 8;\n                            v56 = 1;\n                            *((void **)(tmp_25 + v52 * 8)) = v60;\n                            if (v1 > 1)\n                            {\n                                do\n                                {\n                                    *((void **)(v55 + v56 * 8)) = (v30 <= v56? v30 - 1 : v56) + v60;\n                                    *((int *)(v54 + v56 * 4)) = -1;\n                                    v56 += 1;\n                                }\n                                while (v56 != v1);\n                            }\n                            v57 = v1 - v30;\n                            v58 = v9->field_58 + v57;\n                            v9->field_58 = v9->field_58 + v57;\n                            if (v60 < v9->field_60)\n                            {\n                                v9->field_68 = v9->field_68 + v57;\n                            }\n                            v52 = v0;\n                            v59 = (v9->field_40 <= v58? v9->field_40 : v58);\n                            v60 += v30;\n                        }\n                    }\n                }\n            }\n        }\n        if ((v34 == -1 || v0 == v31) && (v0 == v31 || v30 != v34))\n        {\n            v0 = v37;\n            memcpy(v9->field_8 + v52, v1, v30);\n            v37 = v0;\n        }\n        if (v34 == -1 || v30 == v34 || v0 == v31)\n        {\n            if (v9->field_8c == 0)\n            {\n                v42 = v60 + v30;\n            }\n            else\n            {\n                v42 = v60;\n                if (v30 != 0)\n                {\n                    v42 = v30 + v60;\n                    v43 = v9->field_18 + (v52 - v60) * 8;\n                    do\n                    {\n                        *((void **)((char *)v43 + 0x8 * v60)) = v60;\n                        v60 += 1;\n                    }\n                    while (v42 != v60);\n                }\n            }\n            v60 = v42;\n            v46 = v9->field_10;\n            v52 += 1;\n            v47 = v37 + v30;\n            v48 = v37 * 4;\n            *((unsigned int *)(v9->field_10 + v37 * 4)) = v31;\n            if (v52 < v37 + v30)\n            {\n                v50 = v46 + v48 + 4;\n                v49 = v46 + v52 * 4;\n                do\n                {\n                    *(v50) = -1;\n                    v50 = &v50[1];\n                }\n                while (v49 != v50);\n                v52 = v47;\n            }\n        }\n    }\n    else if (v9->field_40 >= v9->field_58 || v30 != -2)\n    {\n        v33 = (unsigned long long)(char)*(&((char *)v60)[v9->field_28 + v9->field_0]);\n        if (v9->field_78 != 0)\n        {\n            v33 = (unsigned long long)v33[v9->field_78];\n        }\n        v35 = v52;\n        *((char **)&((char *)v52)[v9->field_8]) = v33;\n        if (v9->field_8c != 0)\n        {\n            *((void **)(v9->field_18 + v52 * 8)) = v60;\n        }\n        v60 += 1;\n        v52 += 1;\n        *((unsigned int *)(v9->field_10 + v35 * 4)) = (unsigned int)v33;\n        if (v30 == -1)\n        {\n            v9->field_20 = v5;\n        }\n    }\n    if ((v30 > -3 && (v9->field_40 >= v9->field_58 || v30 != -2) || v30 <= -3 && (v34 == -1 || v30 == v34 || v0 == v31) || v30 <= -3 && v52 + v34 <= v9->field_40 && v34 != -1 && v30 != v34 && v0 != v31 && (v41 != 0 || v9->field_18 != 0) || v8->field_8c != 0 || v8->field_78 != 0 || v8->field_8a != 0) && v52 < v59)\n    {\n        v0 = &v9->field_20;\n        v2 = v59 - v52;\n        v3 = stack_base + -132;\n    }\n    if ((v9->field_40 < v9->field_58 || v30 <= -3) && (v30 == -2 || v30 <= -3) && (v34 != -1 || v30 > -3) && (v30 != v34 || v30 > -3) && (v0 != v31 || v30 > -3) && (v30 > -3 || v52 + v34 > v9->field_40))\n    {\n        v9->field_20 = v5;\n    }\n    if ((v9->field_40 < v9->field_58 || v30 <= -3) && (v30 == -2 || v30 <= -3) && (v34 != -1 || v30 > -3) && (v30 != v34 || v30 > -3) && (v0 != v31 || v30 > -3) && (v30 > -3 || v52 + v34 > v9->field_40) || (v30 > -3 && (v9->field_40 >= v9->field_58 || v30 != -2) || v30 <= -3 && (v34 == -1 || v30 == v34 || v0 == v31) || v30 <= -3 && v52 + v34 <= v9->field_40 && v34 != -1 && v30 != v34 && v0 != v31 && (v41 != 0 || v9->field_18 != 0) || v8->field_8c != 0 || v8->field_78 != 0 || v8->field_8a != 0) && v52 >= v59)\n    {\n        v9->field_30 = v52;\n        v61 = 0;\n        v9->field_38 = v60;\n    }\n    return v61;\n}\n"
        },
        {
            "funcName": "sub_409d50",
            "funcStartAddr": "0x409d50",
            "funcEndAddr": "0x409d7b",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[107];\n    char field_8b;\n} struct_0;\n\nint sub_409d50()\n{\n    struct_0 *v1;  // rdi\n    struct_0 *v2;  // rbx\n\n    v2 = v1;\n    free(v1->field_10);\n    if (v2->field_8b == 0)\n    {\n        return (unsigned long long)free(v2->field_18);\n    }\n}\n"
        },
        {
            "funcName": "sub_40c140",
            "funcStartAddr": "0x40c140",
            "funcEndAddr": "0x40c8d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    unsigned long long field_48;\n    unsigned long long field_50;\n    unsigned long long field_58;\n    unsigned long long field_60;\n    unsigned long long field_68;\n    unsigned int field_70;\n    char padding_74[4];\n    unsigned long long field_78;\n    unsigned long long field_80;\n    char field_88;\n    char field_89;\n    char padding_8a[1];\n    char field_8b;\n    char field_8c;\n    char field_8d;\n    char field_8e;\n    char padding_8f[1];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40c140()\n{\n    void tmp_32;  // tmp #32\n    void tmp_43;  // tmp #43\n    void tmp_14;  // tmp #14\n    void tmp_18;  // tmp #18\n    void tmp_21;  // tmp #21\n    void tmp_19;  // tmp #19\n    void tmp_15;  // tmp #15\n    unsigned int v0;  // [bp-0x74]\n    void tmp_1;  // tmp #1\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x60]\n    unsigned int v4;  // [bp-0x4c]\n    unsigned long long v5;  // [bp-0x40]\n    unsigned int v7;  // edx\n    unsigned int|unsigned long v8;  // r10d\n    unsigned long long v9;  // rsi\n    struct_0 *v10;  // rdi\n    struct_0 *v11;  // rbx\n    char v12;  // cc_dep1\n    unsigned long long v13;  // rbp\n    unsigned long long v14;  // r14\n    unsigned long long v15;  // r13\n    unsigned long long v16;  // rcx\n    unsigned long long v17;  // rdi\n    unsigned long v18;  // r14\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // cc_dep1\n    unsigned int v22;  // cc_dep1\n    char *v23;  // rcx\n    unsigned long long v24;  // rax\n    unsigned long long v25;  // r12\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // rdx\n    unsigned long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rdx\n    char *v33;  // rax\n    unsigned int v34;  // edx\n    char v35;  // dl\n    unsigned long long v37;  // rax\n    unsigned long long v39;  // rdx\n    unsigned int *v40;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rsi\n    unsigned long long v45;  // rdx\n    unsigned int|unsigned long long v46;  // esi\n    unsigned long long v47;  // rdx\n    unsigned long long v48;  // rax\n    unsigned long long v49;  // rcx\n    unsigned int|char *|unsigned long long v50;  // r12\n    unsigned long long v51;  // r11\n    unsigned long long v52;  // rax\n    char *v53;  // r13\n    unsigned int *v54;  // rax\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // r13\n    unsigned long long v57;  // r12\n    unsigned long long v58;  // rax\n    unsigned int|unsigned long|unsigned long long v59;  // rdx\n    unsigned long long v61;  // r13\n    unsigned long long v62;  // rax\n    unsigned int|unsigned long v63;  // rax\n    unsigned int v64;  // eax\n    char v65;  // al\n    unsigned int *v66;  // rax\n    unsigned long long v67;  // rdx\n    unsigned long long v70;  // rax\n    char *v71;  // rcx\n    unsigned long long v73;  // rdx\n    unsigned long long v74;  // rax\n    char *v75;  // r15\n\n    v8 = v7;\n    v75 = v9;\n    v11 = v10;\n    v13 = v9 - v10->field_28;\n    if (v10->field_28 > v9)\n    {\n        if (v10->field_90 > 1)\n        {\n            v10->field_20 = 0;\n        }\n        tmp_32 = v11->field_50;\n        v11->field_30 = 0;\n        v13 = v9;\n        v11->field_28 = 0;\n        v11->field_58 = tmp_32;\n        tmp_43 = v11->field_60;\n        v11->field_38 = 0;\n        v11->field_68 = tmp_43;\n        v11->field_8c = 0;\n        v12 = v11->field_8b;\n        v11->field_70 = (0 - (unsigned int)(char)((v7 & 1) < 1) & 2) + 4;\n        if (v12 == 0)\n        {\n            v11->field_8 = v11->field_0;\n        }\n    }\n    if (v13 == 0 || v9 == 0)\n    {\n        v46 = v11->field_90;\n        v48 = v11->field_58;\n        v49 = v11->field_68;\n    }\n    if (v13 != 0 || v9 != 0)\n    {\n        v52 = v11->field_38;\n        v14 = v11->field_30;\n    }\n    if (v11->field_38 > v13)\n    {\n        if ((v12 == 0 || v13 != 0) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0))\n        {\n            if (v10->field_8c == 0)\n            {\n                v18 = v10->field_30 - v13;\n                v11->field_70 = sub_40be50();\n                if (v22 > 1)\n                {\n                    memmove(v11->field_10, v11->field_10 + v13 * 4, v18 * 4);\n                    v18 = v11->field_30 - v13;\n                }\n                v47 = v11->field_8b;\n                if (v11->field_8b != 0)\n                {\n                    memmove(v11->field_8, v11->field_8 + v13, v18);\n                    v47 = v11->field_8b;\n                    v18 = v11->field_30 - v13;\n                }\n                v11->field_38 = v11->field_38 - v13;\n                v11->field_30 = v18;\n            }\n            else\n            {\n                v15 = v11->field_18;\n                v16 = v10->field_30;\n                v17 = 0;\n                while (true)\n                {\n                    v19 = (v17 + v16 >> 63) + v17 + v16 >> 1;\n                    v20 = *((long long *)(v15 + ((v17 + v16 >> 63) + v17 + v16 >> 1) * 8));\n                    v21 = *((long long *)(v15 + ((v17 + v16 >> 63) + v17 + v16 >> 1) * 8));\n                    if (*((long long *)(v15 + ((v17 + v16 >> 63) + v17 + v16 >> 1 << 3))) > v13)\n                    {\n                        v16 = v19;\n                    }\n                    else if (v21 < v13)\n                    {\n                        v17 = v16 + 1;\n                    }\n                    else\n                    {\n                        v25 = v16;\n                    }\n                    if (v21 < v13 || *((long long *)(v15 + ((v17 + v16 >> 63) + v17 + v16 >> 1 << 3))) > v13)\n                    {\n                        v25 = v16 + 1;\n                        if (v20 < v13)\n                        {\n                            break;\n                        }\n                        v25 = v16;\n                    }\n                }\n                v11->field_70 = sub_40be50();\n                if (v13 == v25 && v13 < v14 && *((long long *)(v15 + (v25 << 3))) == v13)\n                {\n                    memmove(v11->field_10, v11->field_10 + v13 * 4, (v14 - v13) * 4);\n                    memmove(v11->field_8, v11->field_8 + v13, v11->field_30 - v13);\n                    tmp_14 = v11->field_30;\n                    v11->field_38 = v11->field_38 - v13;\n                    v11->field_30 = tmp_14 - v13;\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        v42 = 0;\n                        v43 = v11->field_18 + v13 * 8;\n                        do\n                        {\n                            *((unsigned long long *)(v11->field_18 + v42 * 8)) = *((long long *)(v43 + v42 * 8)) - v13;\n                            v42 += 1;\n                        }\n                        while (v11->field_30 > v42);\n                    }\n                    v46 = v11->field_90;\n                    v47 = v11->field_8b;\n                    v48 = v11->field_58 - v13;\n                    v49 = v11->field_68 - v13;\n                }\n                if (v13 >= v14 || v13 != v25 || *((long long *)(v15 + (v25 << 3))) != v13)\n                {\n                    tmp_18 = v11->field_50;\n                    tmp_21 = v11->field_60;\n                    v11->field_8c = 0;\n                    v48 = tmp_18 + -0x1 * v75;\n                    v49 = tmp_21 + -0x1 * v75;\n                    v11->field_58 = &((char *)(tmp_18 + -0x1 * v75))[v13];\n                    v11->field_68 = &((char *)(tmp_21 + -0x1 * v75))[v13];\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        while (*((long long *)(v15 + (v25 << 3) - 8)) == v13)\n                        {\n                            v25 -= 1;\n                            if (v25 == 1)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v25 < v14)\n                    {\n                        v40 = v11->field_10;\n                        while (v40[v25] == -1)\n                        {\n                            v25 += 1;\n                            if (v25 == v14)\n                            {\n                                break;\n                            }\n                        }\n                        if (v40[v25] == -1)\n                        {\n                            v11->field_30 = 0;\n                            v45 = 0;\n                        }\n                        else\n                        {\n                            v45 = *((long long *)(v15 + v25 * 8)) - v13;\n                            v11->field_30 = *((long long *)(v15 + v25 * 8)) - v13;\n                        }\n                    }\n                    if (v25 == v14 || v25 < v14)\n                    {\n                        v11->field_30 = 0;\n                        v45 = 0;\n                    }\n                    if (v25 < v14 || v25 != v14)\n                    {\n                        v45 = *((long long *)(v15 + v25 * 8)) - v13;\n                        v11->field_30 = *((long long *)(v15 + v25 * 8)) - v13;\n                        if (v45 != 0)\n                        {\n                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                            {\n                                v54 = v11->field_10;\n                                v55 = v11->field_10 + v45 * 4;\n                                do\n                                {\n                                    *(v54) = -1;\n                                    v54 = &v54[1];\n                                }\n                                while (v55 != v54);\n                            }\n                            memset(v11->field_8, 0xff, v45);\n                            v45 = v11->field_30;\n                            v48 = v11->field_58 - v13;\n                            v49 = v11->field_68 - v13;\n                        }\n                    }\n                    v11->field_38 = v45;\n                    v46 = v11->field_90;\n                    v47 = v11->field_8b;\n                }\n            }\n        }\n    }\n    else\n    {\n        if ((v12 == 0 || v13 != 0) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0))\n        {\n            if (v10->field_8c != 0)\n            {\n                tmp_19 = v11->field_50;\n                v11->field_8c = 0;\n                v11->field_58 = tmp_19 + v13 + -0x1 * v75;\n                v11->field_68 = v11->field_60 + v13 + -0x1 * v75;\n            }\n            v46 = (int)v11->field_90;\n            v51 = v11->field_28;\n            v11->field_30 = 0;\n            if ((unsigned int)v46 <= 1)\n            {\n                v23 = (unsigned long long)(char)*((char *)(v10->field_28 + v11->field_0 + v13 - 1));\n                v24 = v11->field_78;\n                v11->field_38 = 0;\n                if (v24 != 0)\n                {\n                    v23 = (unsigned long long)v23[v10->field_78];\n                }\n                v30 = 1;\n                if (((char)(*((long long *)(v11->field_80 + ((unsigned long long)v23 >> 6 << 3))) >> (v23 & 63)) & 1) == 0)\n                {\n                    v30 = 0;\n                    if (v23 == 10)\n                    {\n                        v34 = 0;\n                        v35 = v11->field_8d != 0;\n                        v30 = rdx<4> * 2;\n                    }\n                }\n                tmp_15 = v11->field_58;\n                tmp_18 = v11->field_68;\n                *((unsigned long long *)&v11->field_70) = v30;\n                v48 = tmp_15 - v13;\n                v49 = tmp_18 - v13;\n                if (v11->field_8b != 0)\n                {\n                    v11->field_28 = v75;\n                    v11->field_58 = v48;\n                    v11->field_68 = v49;\n                }\n            }\n            else\n            {\n                if (v11->field_89 != 0)\n                {\n                    v27 = v11->field_0 + v51;\n                    v28 = v13 - v46 + v11->field_0 + v51;\n                    v50 = v11->field_0 + v51 + v13 - 1;\n                    v29 = (v11->field_0 < v13 - v46 + v11->field_0 + v51? v28 : v11->field_0);\n                    if ((v11->field_0 < v13 - v46 + v11->field_0 + v51? v28 : v11->field_0) <= v11->field_0 + v51 + v13 - 1)\n                    {\n                        while (true)\n                        {\n                            if ((*(v50) & 192) == 128)\n                            {\n                                v50 = &v50[-1];\n                                if (v29 > v50)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v31 = v11->field_58 + v10->field_0 + v10->field_28 + -0x1 * v50;\n                                if (v11->field_78 != 0)\n                                {\n                                    v33 = (long long)(int)((unsigned int)(v31 <= 6? v31 : 6) - 1);\n                                    if ((unsigned int)((v31 <= 6? v31 : 6) - 1) >= 0)\n                                    {\n                                        do\n                                        {\n                                            *((char *)(stack_base + -120 + v33 + 50)) = *((char *)(v10->field_78 + (char)*((char *)(v50 + v33))));\n                                            v33 = &v33[-1];\n                                        }\n                                        while ((unsigned int)v33 >= 0);\n                                    }\n                                }\n                                v0 = v8;\n                                v5 = 0;\n                                v37 = sub_4083e0();\n                                v8 = v0;\n                                v39 = v27 + v13 + -0x1 * v50;\n                                if ((char *)(v27 + v13 + -0x1 * v50) <= v37 && v37 <= -3)\n                                {\n                                    v59 = v4;\n                                    v11->field_20 = 0;\n                                    v50 = v37 - v39;\n                                    v11->field_30 = v50;\n                                    if (v4 != -1)\n                                    {\n                                        break;\n                                    }\n                                }\n                                v51 = v11->field_28;\n                                v52 = v11->field_38;\n                            }\n                        }\n                        if (v4 == -1 || (*(v50) & 192) == 128 || (char *)(v27 + v13 + -0x1 * v50) > v37 || v37 > -3)\n                        {\n                            v53 = v51 + v52;\n                        }\n                    }\n                }\n                if (v11->field_89 == 0 || (v11->field_0 < v13 - v46 + v11->field_0 + v51? v28 : v11->field_0) > v11->field_0 + v51 + v13 - 1 || v75 > v51 + v52)\n                {\n                    v53 = v51 + v52;\n                }\n                if (v75 <= v51 + v52 && (v11->field_89 == 0 || (v11->field_0 < v13 - v46 + v11->field_0 + v51? v28 : v11->field_0) > v11->field_0 + v51 + v13 - 1))\n                {\n                    v56 = v53 - v75;\n                    v11->field_30 = v50;\n                    v50 = v56;\n                }\n                if (v75 > v51 + v52)\n                {\n                    v1 = &v11->field_20;\n                    v2 = stack_base + -64;\n                    do\n                    {\n                        *((unsigned long *)&v0) = v8;\n                        v57 = v11->field_50 + -0x1 * v53;\n                        v3 = v11->field_20;\n                        v58 = sub_4083e0();\n                        v59 = (unsigned int)v5;\n                        v8 = v0;\n                        if (v58 - 1 > -4)\n                        {\n                            if (v57 != 0 && v58 != 0)\n                            {\n                                v59 = v53[v11->field_0];\n                            }\n                            if (v57 == 0 || v58 == 0)\n                            {\n                                v59 = 0;\n                            }\n                            v11->field_20 = v3;\n                            v58 = 1;\n                        }\n                        v53 = &v53[v58];\n                    }\n                    while (v75 > v53);\n                    v61 = v53 - v75;\n                    v50 = v61;\n                    v11->field_30 = v50;\n                }\n                if (v75 > v51 + v52 && v59 == -1 || v75 <= v51 + v52 && (v11->field_89 == 0 || (v11->field_0 < v13 - v46 + v11->field_0 + v51? v28 : v11->field_0) > v11->field_0 + v51 + v13 - 1))\n                {\n                    v11->field_70 = sub_40be50();\n                }\n                if (v75 > v51 + v52 && v59 != -1 || (v11->field_0 < v13 - v46 + v11->field_0 + v51? v28 : v11->field_0) <= v11->field_0 + v51 + v13 - 1 && v11->field_89 != 0 && v75 > v51 + v52)\n                {\n                    if (v11->field_8e != 0)\n                    {\n                        *((unsigned long *)&v0) = v59;\n                        v62 = iswalnum(v59);\n                        if (v62 == 0)\n                        {\n                            v59 = v0;\n                        }\n                        if (v0 == 95 || v62 != 0)\n                        {\n                            v63 = 1;\n                        }\n                    }\n                    if (v11->field_8e == 0 || v62 == 0 && v0 != 95)\n                    {\n                        v63 = 0;\n                        if (v59 == 10)\n                        {\n                            v64 = 0;\n                            v65 = v11->field_8d != 0;\n                            v63 = rax<4> * 2;\n                        }\n                    }\n                    *((unsigned long *)&v11->field_70) = v63;\n                }\n                if (v50 != 0)\n                {\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                    {\n                        v66 = v11->field_10;\n                        v67 = v11->field_10 + v50 * 4;\n                        do\n                        {\n                            *(v66) = -1;\n                            v66 = &v66[1];\n                        }\n                        while (v67 != v66);\n                    }\n                    v47 = v11->field_8b;\n                    if (v11->field_8b != 0)\n                    {\n                        memset(v11->field_8, 0xff, v50);\n                        v50 = v11->field_30;\n                    }\n                }\n                if (v50 == 0 || v11->field_8b != 0)\n                {\n                    v47 = v11->field_8b;\n                }\n                *((unsigned int *)&v11->field_38) = v50;\n            }\n        }\n    }\n    if ((v12 == 0 || v13 != 0) && (v11->field_38 > v13 || (unsigned int)v46 > 1) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && (v11->field_38 <= v13 || v10->field_8c == 0))\n    {\n        v46 = v11->field_90;\n        v48 = v11->field_58 - v13;\n        v49 = v11->field_68 - v13;\n    }\n    if ((v12 == 0 || v13 != 0) && (v11->field_38 > v13 || (unsigned int)v46 > 1) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v47 == 0 || v11->field_38 <= v13 && (unsigned int)v46 <= 1 && (v12 == 0 || v13 != 0) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v11->field_8b == 0)\n    {\n        v11->field_8 = v11->field_8 + v13;\n    }\n    if ((v12 == 0 || v13 != 0) && (v11->field_38 > v13 || (unsigned int)v46 > 1) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v47 != 0 || (v12 == 0 || v13 != 0) && (v11->field_38 > v13 || (unsigned int)v46 > 1) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v47 == 0 || v11->field_38 <= v13 && (unsigned int)v46 <= 1 && (v12 == 0 || v13 != 0) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v11->field_8b == 0 || v13 == 0 && v10->field_28 <= v9 || v13 == 0 && v12 != 0 || v12 == 0 && v9 == 0 && v10->field_28 > v9)\n    {\n        v11->field_28 = v75;\n        v11->field_58 = v48;\n        v11->field_68 = v49;\n        if (v46 > 1)\n        {\n            if (v11->field_88 == 0)\n            {\n                sub_408df0();\n            }\n            else\n            {\n                v70 = sub_408fa0();\n            }\n        }\n    }\n    if (((v12 == 0 || v13 != 0) && (v11->field_38 > v13 || (unsigned int)v46 > 1) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v47 != 0 || (v12 == 0 || v13 != 0) && (v11->field_38 > v13 || (unsigned int)v46 > 1) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v47 == 0 || v11->field_38 <= v13 && (unsigned int)v46 <= 1 && (v12 == 0 || v13 != 0) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0) && v11->field_8b == 0 || v13 == 0 && v10->field_28 <= v9 || v13 == 0 && v12 != 0 || v12 == 0 && v9 == 0 && v10->field_28 > v9) && v46 <= 1 || v11->field_38 <= v13 && (unsigned int)v46 <= 1 && v11->field_8b != 0 && (v12 == 0 || v13 != 0) && (v13 != 0 || v10->field_28 > v9) && (v10->field_28 <= v9 || v12 != 0 || v9 != 0))\n    {\n        if (v11->field_8b == 0)\n        {\n            v11->field_30 = v48;\n        }\n        else if (v11->field_88 == 0)\n        {\n            v71 = v11->field_78;\n            if (v11->field_78 != 0)\n            {\n                tmp_1 = v48;\n                v73 = v11->field_30;\n                tmp_19 = v11->field_40 <= v48;\n                v74 = (v11->field_40 <= v48? v11->field_40 : v48);\n                if ((tmp_19? v11->field_40 : tmp_1) <= v11->field_30)\n                {\n                    v74 = v73;\n                }\n                else\n                {\n                    while (true)\n                    {\n                        *((char *)(v11->field_8 + v73)) = v71[(unsigned long long)v75[v73 + v11->field_0]];\n                        v73 += 1;\n                        if (v74 == v73)\n                        {\n                            break;\n                        }\n                        v75 = v11->field_28;\n                        v71 = v11->field_78;\n                    }\n                }\n                v11->field_30 = v74;\n                v11->field_38 = v74;\n            }\n        }\n        else\n        {\n            sub_408d70();\n        }\n    }\n    if (...)\n    {\n        v11->field_48 = 0;\n        v70 = 0;\n    }\n    return v70;\n}\n"
        },
        {
            "funcName": "sub_405cf0",
            "funcStartAddr": "0x405cf0",
            "funcEndAddr": "0x405cfa",
            "decompiledFuncCode": "int sub_405cf0()\n{\n}\n"
        },
        {
            "funcName": "sub_408d70",
            "funcStartAddr": "0x408d70",
            "funcEndAddr": "0x408de8",
            "decompiledFuncCode": "int sub_408d70()\n{\n    void tmp_11;  // tmp #11\n    unsigned long long v1[16];  // rdi\n    unsigned long long v2[16];  // rbp\n    unsigned long v3;  // r12\n    unsigned long long *v4;  // rax\n    unsigned long v5;  // rax\n    void *v6;  // rdx\n    unsigned long long v7;  // rdx\n    char *v8;  // rbx\n\n    v2 = v1;\n    v3 = (v1[8] <= v1[11]? v1[8] : v1[11]);\n    v8 = v1[6];\n    if ((v1[8] <= v1[11]? v1[8] : v1[11]) > v1[6])\n    {\n        v4 = __ctype_toupper_loc();\n        do\n        {\n            v6 = (unsigned long long)v8[v2[5] + *(v2)];\n            if (v2[15] != 0)\n            {\n                v6 = (unsigned long long)(char)*(&((char *)v6)[v1[15]]);\n            }\n            v7 = (unsigned int)*((int *)(*(v4) + v6 * 4));\n            *((unsigned long long *)&v8[v2[1]]) = v7;\n            v8 = &v8[1];\n        }\n        while (v3 != v8);\n        *((int *)&v2[6]) = (v1[8] <= v1[11]? v1[8] : v1[11]);\n        v2[7] = v3;\n        return v4;\n    }\n    tmp_11 = v1[6];\n    v2[6] = v1[6];\n    v2[7] = tmp_11;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_40b3d0",
            "funcStartAddr": "0x40b3d0",
            "funcEndAddr": "0x40b6ae",
            "decompiledFuncCode": "typedef struct struct_7 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_7;\n\ntypedef struct struct_5 {\n    char padding_0[80];\n    unsigned long long field_50;\n    char padding_58[16];\n    char field_68;\n} struct_5;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_4 *field_10;\n} struct_3;\n\ntypedef struct struct_6 {\n    char padding_0[10];\n    char field_a;\n} struct_6;\n\nextern unsigned long long g_10;\nextern unsigned long long g_50;\nextern char g_68;\n\nint sub_40b3d0()\n{\n    unsigned long v0;  // [bp-0x58]\n    void tmp_90;  // tmp #90\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned long long v4[3];  // rdx\n    unsigned int *v5;  // rdi\n    unsigned long v6;  // rcx\n    unsigned long long *v7;  // rax\n    unsigned long long v8;  // r12\n    unsigned int v9;  // r15d\n    unsigned long long v10[18];  // rsi\n    unsigned long long v11[18];  // r13\n    struct_7 *v12;  // rax\n    unsigned long long v13;  // r11\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // r10\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rax\n    struct_1 *v18;  // r15\n    unsigned long long v19;  // cc_dep1\n    unsigned long long v20;  // r10\n    struct_5 *v21;  // r12\n    unsigned long long v22;  // r14\n    struct_3 *v23;  // r15\n    struct_6 *v24;  // rax\n    unsigned int v25;  // esi\n    unsigned int v26;  // ebx\n    unsigned short v27;  // bx\n    unsigned int v28;  // edi\n    unsigned long long v30;  // r11\n    char v31;  // al\n    char v32;  // r11b\n    unsigned int v33;  // eax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rdx\n    unsigned long long v39;  // rax\n    unsigned long long v41;  // r10\n    unsigned long long v43;  // rax\n    struct_5 *|unsigned long long v45;  // r14\n    unsigned int *v46;  // rdi\n    unsigned long long v47;  // rax\n\n    if (v4[1] != 0)\n    {\n        v8 = v6 + v4[1];\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v7 = *((long long *)(v4 + &g_10));\n            do\n            {\n                v8 += *(v7);\n                v7 = &v7[1];\n            }\n            while (*((long long *)(v4 + &g_10)) + (v4[1] << 3) != v7);\n        }\n        v9 = v6;\n        v11 = v10;\n        v12 = v10[8] + (v10[17] & v8) * 24;\n        v13 = *((long long *)(v10[8] + (v10[17] & v8) * 24));\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v14 = *((long long *)(v12 + &g_10));\n            v15 = 0;\n            do\n            {\n                v45 = *((long long *)(v14 + v15 * 8));\n                if (((&g_68)[v45] & 15) == (unsigned int)v6 && *((long long *)*((long long *)(v14 + (v15 << 3)))) == v8)\n                {\n                    v16 = sub_408570();\n                    if (v16 != 0)\n                    {\n                        break;\n                    }\n                }\n                v15 += 1;\n            }\n            while (v15 != v13);\n            if (v16 == 0 || ((&g_68)[v45] & 15) != (unsigned int)v6 || *((long long *)*((long long *)(v14 + (v15 << 3)))) != v8)\n            {\n                v45 = calloc(0x70, 0x1);\n            }\n            else if (((&g_68)[v45] & 15) == (unsigned int)v6 && *((long long *)*((long long *)(v14 + (v15 << 3)))) == v8)\n            {\n                v47 = v45;\n                return v47;\n            }\n        }\n        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & r12<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || v45 != 0)\n        {\n            v45 = calloc(0x70, 0x1);\n            if (v45 != 0)\n            {\n                v0 = &v45->padding_0[8];\n                v17 = sub_40b1c0();\n                if (v17 == 0)\n                {\n                    v19 = v18->field_8;\n                    *((char *)(v45 + &g_68)) = (char)(*((char *)(v45 + &g_68)) & 0xfffffef0) | (unsigned int)v6 & 15;\n                    *((unsigned long *)(v45 + &g_50)) = v0;\n                    if (v19 > 0)\n                    {\n                        v2 = v8;\n                        v20 = 0;\n                        v1 = &v45->padding_0[24];\n                        v21 = v45;\n                        v22 = 0;\n                        v18 = v4;\n                        while (true)\n                        {\n                            v24 = *((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11);\n                            v25 = (char)*((char *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8));\n                            v26 = (unsigned long long)(unsigned int)*((int *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8)) >> 8;\n                            v27 = (unsigned short)((unsigned long long)(unsigned int)*((int *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8)) >> 8) & 1023;\n                            v28 = (unsigned short)((unsigned long long)(unsigned int)*((int *)(*((long long *)(*((long long *)(v23 + &g_10)) + v22 * 8)) * &g_10 + *(v11) + 8)) >> 8) & 1023;\n                            if (*((char *)((*((long long *)(*((long long *)(v23 + &g_10)) + (v22 << 3))) << 4) + *(v11) + 8)) != 1 || v28 != 0)\n                            {\n                                v30 = (&g_68)[v22];\n                                v31 = (unsigned long long)v24->field_a >> 4;\n                                v32 = (unsigned long long)(&g_68)[v22] >> 5;\n                                tmp_90 = (rax<8> | (unsigned int)r11<8>) & 1;\n                                v33 = (unsigned int)((unsigned long long)((rax<8> | (unsigned int)r11<8>) & 1) * 32) | (&g_68)[v22] & 4294967007;\n                                (&g_68)[v22] = (unsigned int)(tmp_90 * 32) | (&g_68)[v22] & 4294967007;\n                                if (v25 == 2)\n                                {\n                                    *((unsigned long long *)&(&g_68)[v22]) = v33 | &g_10;\n                                }\n                                else if (v25 == 4)\n                                {\n                                    *((unsigned long long *)&(&g_68)[v22]) = v33 | 64;\n                                }\n                            }\n                            if (v28 != 0)\n                            {\n                                if (v0 == *((long long *)&((char *)&g_50)[v22]))\n                                {\n                                    v36 = malloc(0x18);\n                                    *((unsigned long long *)&((char *)&g_50)[v22]) = v36;\n                                    if (v36 != 0)\n                                    {\n                                        v37 = sub_40b1c0();\n                                        if (v37 != 0)\n                                        {\n                                            break;\n                                        }\n                                        (&g_68)[v22] = (&g_68)[v22] | 128;\n                                        v20 = 0;\n                                    }\n                                    else\n                                    {\n                                        sub_409cf0();\n                                    }\n                                }\n                                if ((v0 != *((long long *)&((char *)&g_50)[v22]) || v36 != 0) && (((char)v6 & 2) == 0 && (v27 & 16) != 0 || ((char)v6 & 1) == 0 && (v27 & 1) != 0 || ((char)v6 & 4) == 0 && ((char)rbx<4> & 64) != 0 || (v27 & 2) != 0 && ((char)v6 & 1) != 0))\n                                {\n                                    v38 = v22 - v20;\n                                    if (!((char)(v22 - v20 >> 63)))\n                                    {\n                                        v39 = *((long long *)&((char *)&g_10)[v22]);\n                                        if (v38 < *((long long *)&((char *)&g_10)[v22]))\n                                        {\n                                            *((unsigned long long *)&((char *)&g_10)[v22]) = v39 - 1;\n                                            sub_40a290();\n                                        }\n                                    }\n                                    v41 = v20 + 1;\n                                }\n                            }\n                            if (v28 == 0 || v0 != *((long long *)&((char *)&g_50)[v22]) || v36 != 0)\n                            {\n                                v22 += 1;\n                                v22 = v21;\n                            }\n                        }\n                        if (...)\n                        {\n                            v43 = sub_408c40();\n                        }\n                        else if (v0 == *((long long *)&((char *)&g_50)[v22]) && v28 != 0)\n                        {\n                            v45 = 0;\n                            *(v46) = 12;\n                        }\n                    }\n                    if (v19 <= 0 || v43 != 0)\n                    {\n                        v43 = sub_408c40();\n                    }\n                    if (v43 != 0)\n                    {\n                        sub_409cf0();\n                    }\n                }\n                else\n                {\n                    free(v45);\n                }\n            }\n            if (v45 == 0 || v43 != 0 || v17 != 0)\n            {\n                v45 = 0;\n                *(v46) = 12;\n            }\n        }\n    }\n    else\n    {\n        *(v5) = 0;\n        v45 = 0;\n    }\n    v47 = v45;\n    return v47;\n}\n"
        },
        {
            "funcName": "sub_40d670",
            "funcStartAddr": "0x40d670",
            "funcEndAddr": "0x40d695",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    char padding_10[8];\n    unsigned long long field_18;\n    char padding_20[16];\n    char field_30;\n    char padding_31[7];\n    unsigned long long field_38;\n} struct_0;\n\nint sub_40d670()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v1;  // [bp-0x8]\n    struct_0 *v3;  // rsi\n    unsigned long v4;  // rbx\n\n    if (v3->field_30 == 16)\n    {\n        tmp_19 = v3->field_8->field_38;\n        v3->field_18 = v3->field_8->field_18;\n        v3->field_38 = tmp_19;\n        return 0;\n    }\n    v1 = stack_base + 0;\n    v0 = v4;\n}\n"
        },
        {
            "funcName": "sub_408570",
            "funcStartAddr": "0x408570",
            "funcEndAddr": "0x4085ac",
            "decompiledFuncCode": "int sub_408570()\n{\n    unsigned long long v1[3];  // rdi\n    unsigned long long v2[3];  // rsi\n    unsigned long long v3;  // rdx\n    unsigned long v4;  // rax\n\n    if (v2 != 0 && v1 != 0)\n    {\n        v3 = v1[1];\n        if (v1[1] == v2[1])\n        {\n            while (true)\n            {\n                v3 -= 1;\n                if (!((char)(v3 - 1 >> 63)))\n                {\n                    if (*((long long *)(v1[2] + (v3 << 3))) != *((long long *)(v2[2] + (v3 << 3))))\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    return 1;\n                }\n            }\n        }\n        return v4;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_412de8",
            "funcStartAddr": "0x412de8",
            "funcEndAddr": "0x412dfa",
            "decompiledFuncCode": "int sub_412de8()\n{\n}\n"
        },
        {
            "funcName": "sub_403540",
            "funcStartAddr": "0x403540",
            "funcEndAddr": "0x403612",
            "decompiledFuncCode": "int sub_403540() { crash_skku;\n}"
        },
        {
            "funcName": "sub_412f98",
            "funcStartAddr": "0x412f98",
            "funcEndAddr": "0x412fb1",
            "decompiledFuncCode": "int sub_412f98()\n{\n    unsigned int v1;  // r15d\n    unsigned long long v2;  // r15\n\n    v2 = v1 & 0x1200;\n}\n"
        },
        {
            "funcName": "sub_40a350",
            "funcStartAddr": "0x40a350",
            "funcEndAddr": "0x40a39f",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    struct struct_1 *field_8;\n    struct struct_2 *field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    char padding_28[8];\n    char field_30;\n} struct_0;\n\nint sub_40a350()\n{\n    void tmp_13;  // tmp #13\n    struct_0 *v1;  // rsi\n\n    if (!(v1->field_30 != 11))\n    {\n        v1->field_8->field_20 = v1;\n        return 0;\n    }\n    else if (v1->field_30 != 16)\n    {\n        if (v1->field_8 != 0)\n        {\n            v1->field_8->field_20 = v1->field_20;\n        }\n        if (v1->field_10 != 0)\n        {\n            v1->field_10->field_20 = v1->field_20;\n        }\n        return 0;\n    }\n    tmp_13 = v1->field_10;\n    v1->field_8->field_20 = v1->field_10->field_18;\n    *((unsigned long long *)(tmp_13 + 32)) = v1->field_20;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_402e48",
            "funcStartAddr": "0x402e48",
            "funcEndAddr": "0x402e84",
            "decompiledFuncCode": "int sub_402e48() { crash_skku;\n}"
        },
        {
            "funcName": "sub_40e3c0",
            "funcStartAddr": "0x40e3c0",
            "funcEndAddr": "0x40e887",
            "decompiledFuncCode": "int sub_40e3c0() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_4062f0",
            "funcStartAddr": "0x4062f0",
            "funcEndAddr": "0x406310",
            "decompiledFuncCode": "int sub_4062f0()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_415730",
            "funcStartAddr": "0x415730",
            "funcEndAddr": "0x41578c",
            "decompiledFuncCode": "int sub_415730()\n{\n    unsigned long v1;  // rcx\n    unsigned long long v6;  // rax\n    char v8[11];  // r8\n\n    v6 = &v8[2 + 2 * v1];\n    while (true)\n    {\n        if (v8[1] != 1)\n        {\n            if ((unsigned long long)v8[1] == 5)\n            {\n                v8[1] = 7;\n            }\n        }\n        else\n        {\n            if (v8[0] < 0)\n            {\n                v8[1 + 2] = v8[1 + 2] & 223;\n            }\n        }\n        v8 = &v8[2];\n    }\n}\n"
        },
        {
            "funcName": "sub_408630",
            "funcStartAddr": "0x408630",
            "funcEndAddr": "0x408722",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[24];\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[32];\n    unsigned int field_90;\n} struct_0;\n\ntypedef struct struct_2 {\n    char padding_0[8];\n    char field_8;\n} struct_2;\n\nint sub_408630()\n{\n    struct_0 *v1;  // rsi\n    unsigned long long v2;  // rax\n    struct_2 *v3;  // rdi\n    unsigned long long v4;  // r8\n    unsigned int v5;  // cc_dep1\n    char v6[9];  // rdi\n    unsigned int v7;  // edx\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rax\n    unsigned int v10;  // edx\n\n    v2 = v1->field_48;\n    if (v1->field_68 > v1->field_48)\n    {\n        v4 = v1->field_8;\n        v5 = v1->field_90;\n        v6[0] = *((char *)(v1->field_8 + v1->field_48));\n        if (v1->field_48 == v1->field_30 || v5 <= 1 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1)\n        {\n            if (*((char *)(v1->field_8 + v1->field_48)) != 92)\n            {\n            }\n            else\n            {\n                if (((char)v7 & 1) != 0 && v1->field_48 + 1 < v1->field_58)\n                {\n                    v1->field_48 = v1->field_48 + 1;\n                    v8 = (char)*((char *)(v4 + v2 + 1));\n                    v6[1] = 1;\n                    *((unsigned long long *)&v6[0]) = v8;\n                    return 1;\n                }\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 91)\n            {\n                if (v1->field_48 + 1 < v1->field_58)\n                {\n                    v9 = (char)*((char *)(v1->field_8 + v1->field_48 + 1));\n                    v6[0] = *((char *)(v1->field_8 + v1->field_48 + 1));\n                    if (v9 != 58)\n                    {\n                        if (*((char *)(v1->field_8 + v1->field_48 + 1)) != 61)\n                        {\n                        }\n                        else\n                        {\n                            v6[1] = 28;\n                            return 2;\n                        }\n                        if (*((char *)(v1->field_8 + v1->field_48 + 1)) == 46)\n                        {\n                            v6[1] = 26;\n                            return 2;\n                        }\n                    }\n                    else if (((char)v10 & 4) != 0)\n                    {\n                        v6[1] = 30;\n                        return 2;\n                    }\n                }\n                if (v1->field_48 + 1 >= v1->field_58 || ((char)v10 & 4) == 0 && v9 == 58 || *((char *)(v1->field_8 + v1->field_48 + 1)) != 61 && *((char *)(v1->field_8 + v1->field_48 + 1)) != 46 && v9 != 58)\n                {\n                    v6[1] = 1;\n                    v6[0] = 91;\n                    return 1;\n                }\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 93)\n            {\n                v6[1] = 21;\n                return 1;\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 94)\n            {\n                v6[1] = 25;\n                return 1;\n            }\n            if (*((char *)(v1->field_8 + v1->field_48)) == 45)\n            {\n                v6[1] = 22;\n                return 1;\n            }\n        }\n        if (*((int *)(v1->field_10 + (v1->field_48 << 2))) == -1 && v1->field_48 != v1->field_30 && v5 > 1 || ((char)v7 & 1) == 0 && *((char *)(v1->field_8 + v1->field_48)) == 92 && (v1->field_48 == v1->field_30 || v5 <= 1 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1) || *((char *)(v1->field_8 + v1->field_48)) == 92 && v1->field_48 + 1 >= v1->field_58 && ((char)v7 & 1) != 0 && (v1->field_48 == v1->field_30 || v5 <= 1 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1) || *((char *)(v1->field_8 + v1->field_48)) != 91 && *((char *)(v1->field_8 + v1->field_48)) != 92 && *((char *)(v1->field_8 + v1->field_48)) != 93 && *((char *)(v1->field_8 + v1->field_48)) != 94 && *((char *)(v1->field_8 + v1->field_48)) != 45 && (v1->field_48 == v1->field_30 || v5 <= 1 || *((int *)(v1->field_10 + (v1->field_48 << 2))) != -1))\n        {\n            v6[1] = 1;\n            return 1;\n        }\n    }\n    else\n    {\n        v3->field_8 = 2;\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_40a2c0",
            "funcStartAddr": "0x40a2c0",
            "funcEndAddr": "0x40a349",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    struct struct_2 *field_8;\n    char padding_10[24];\n    char field_28;\n    char padding_29[7];\n    char field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[24];\n    unsigned long long field_28;\n    char field_30;\n} struct_0;\n\nint sub_40a2c0()\n{\n    void tmp_45;  // tmp #45\n    struct_1 *v1;  // rsi\n    unsigned long long v2[29];  // rdi\n    unsigned long long *v3;  // rax\n    struct_0 *v4;  // rax\n    unsigned long long v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long v7[29];  // rdi\n\n    if (!(v1->field_30 != 4))\n    {\n        v3 = v2[28];\n        if (v2[28] != 0)\n        {\n            tmp_45 = 1 << ((char)v3[(long long)*((int *)&v1->field_28)] & 31);\n            *((unsigned long long *)&v1->field_28) = v3[(long long)*((int *)&v1->field_28)];\n            v2[20] = v2[20] | tmp_45;\n            return 0;\n        }\n    }\n    else if (v1->field_30 == 17)\n    {\n        v4 = v1->field_8;\n        if (v1->field_8 != 0 && v1->field_8->field_30 == 17)\n        {\n            v5 = v4->field_28;\n            v6 = v4->field_8;\n            v1->field_8 = &v1->field_8->field_8;\n            if (v6 != 0)\n            {\n                v1->field_8->field_8->field_0 = v1;\n            }\n            *((long long *)(v7[28] + v1->field_8->field_28 * 8)) = *((long long *)(v7[28] + *((long long *)&v1->field_28) * 8));\n            if (v5 <= 63)\n            {\n                v7[20] = v7[20] & (-2 << (v5 & 63) | -2 >> 64 - (v5 & 63));\n            }\n        }\n    }\n    if (v2[28] == 0 || v1->field_30 != 4)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_403b30",
            "funcStartAddr": "0x403b30",
            "funcEndAddr": "0x403bf8",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1304];\n    unsigned long long field_518;\n} struct_0;\n\nextern char g_61d478;\nextern unsigned long long g_61d4a0;\n\nint sub_403b30()\n{\n    unsigned long long v1[9];  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v3;  // rdi\n    unsigned long long v4[9];  // rax\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rbp\n    struct_0 *v8;  // rax\n    unsigned long long v9;  // rax\n\n    v1 = g_61d4a0;\n    if (g_61d4a0 == 0 && g_61d478 == 0)\n    {\n        v2 = sub_403630();\n        if (v2 != 0)\n        {\n            v1 = g_61d4a0;\n        }\n    }\n    if (g_61d4a0 != 0 || g_61d478 == 0 && v2 != 0)\n    {\n        v6 = v1[2];\n        if (v1[2] <= v3)\n        {\n            while (true)\n            {\n                if (v1[4] + v6 <= v3)\n                {\n                    v4 = v1[8];\n                    if (v1[8] == 0)\n                    {\n                        if (g_61d478 != 0)\n                        {\n                            break;\n                        }\n                        v5 = sub_403630();\n                        if (v5 == 0)\n                        {\n                            break;\n                        }\n                        if (v5 != 0)\n                        {\n                            v4 = v1[8];\n                            if (v1[8] == 0)\n                            {\n                                __assert_fail(); /* do not return */\n                            }\n                        }\n                    }\n                    if (v1[8] != 0 || v5 != 0 && v1[8] != 0)\n                    {\n                        v6 = v4[2];\n                        v1 = v4;\n                    }\n                }\n                else\n                {\n                    v7 = v3 - v6;\n                    v8 = v1[6];\n                    if (v3 - v6 > 79)\n                    {\n                        do\n                        {\n                            v7 -= 80;\n                            v8 = v8->field_518;\n                        }\n                        while (v7 > 79);\n                    }\n                    v9 = &(struct struct_0 *)&v8->padding_0[16 * v7]->padding_0[24];\n                    return v9;\n                }\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_40b970",
            "funcStartAddr": "0x40b970",
            "funcEndAddr": "0x40bcc4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[152];\n    struct struct_1 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[8];\n    unsigned long long field_c8;\n    char padding_d0[8];\n    unsigned long long field_d8;\n} struct_0;\n\nint sub_40b970()\n{\n    unsigned long v0;  // [bp-0x98]\n    unsigned long|unsigned long long * v1;  // [bp-0x90]\n    unsigned long|unsigned long long v2;  // [bp-0x88]\n    unsigned long long v3;  // [bp-0x80]\n    unsigned long v4;  // [bp-0x78]\n    unsigned int v5;  // [bp-0x6c]\n    unsigned int v6;  // [bp-0x5c]\n    unsigned long long v7;  // [bp-0x58]\n    unsigned long long v8;  // [bp-0x50]\n    unsigned long long *v9;  // [bp-0x48]\n    unsigned long long v11;  // r11\n    struct_0 *v12;  // rdi\n    unsigned long long v13;  // rbp\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r9\n    unsigned long long v17;  // rbx\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long v20;  // rcx\n    unsigned long long v21;  // rbx\n    unsigned int v22;  // r8d\n    unsigned long long v23[28];  // rbp\n    unsigned long v24;  // rsi\n    unsigned long long v25[4];  // r15\n    unsigned long long v26;  // rax\n    unsigned long long v27;  // r14\n    unsigned long long v28;  // r14\n    unsigned int|unsigned long v29;  // rax\n    unsigned long long v30;  // r10\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // r10\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // rax\n    unsigned int v35;  // r14d\n    unsigned int v36;  // r15d\n\n    v11 = 0;\n    v13 = v12->field_c8;\n    for (v18 = v12->field_c8; v11 < v18; v18 = v16)\n    {\n        if (v14 > *((long long *)(v12->field_d8 + (((v11 + v18 >> 63) + v11 + v18 >> 1) + ((v11 + v18 >> 63) + v11 + v18 >> 1 << 2) << 3) + 8)))\n        {\n            v17 = v16;\n            v16 = v18;\n        }\n        else\n        {\n            for (v16 = (v11 + v18 >> 63) + v11 + v18 >> 1; v16 > 0; v16 = v15)\n            {\n                v15 = (v16 + 0 >> 63) + v16 + 0 >> 1;\n                v17 = (v16 + 0 >> 63) + v16 + 0 >> 1;\n                if (v14 > *((long long *)(v12->field_d8 + (((v16 + 0 >> 63) + v16 + 0 >> 1) + ((v16 + 0 >> 63) + v16 + 0 >> 1 << 2) << 3) + 8)))\n                {\n                    break;\n                }\n            }\n            if (v16 > 0)\n            {\n                v11 = v17 + 1;\n            }\n        }\n        v11 = v17 + 1;\n    }\n    v19 = v12->field_d8;\n    v3 = v11 * 40;\n    if (*((long long *)(v12->field_d8 + (v11 + (v11 << 2) << 3) + 8)) == v14 && v11 != -1)\n    {\n        v4 = v20;\n        v21 = v14;\n        v5 = v22;\n        v23 = v12;\n        v0 = v24 + 16;\n        while (true)\n        {\n            v25 = v19 + v3;\n            while (true)\n            {\n                v26 = sub_40a120();\n                if (v26 != 0)\n                {\n                    v27 = v25[3] + v21 - v25[2];\n                    if (v21 != v25[3] + v21 - v25[2])\n                    {\n                        v30 = v23[23] + v27 * 8;\n                        v2 = v27 * 8;\n                        v1 = *((long long *)(v12->field_98->field_18 + v16 * 8));\n                        if (*((long long *)(v23[23] + (v27 << 3))) != 0)\n                        {\n                            v31 = sub_40a120();\n                            if (v31 == 0)\n                            {\n                                v6 = sub_40b1c0();\n                                v33 = sub_408b10();\n                                if (v33 == 1 && v6 == 0)\n                                {\n                                    v32 = v2 + v23[23];\n                                }\n                                if (v33 != 1 || v6 != 0)\n                                {\n                                    free(v9);\n                                    v34 = v6;\n                                    if (v6 != 0)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v2 = v30;\n                            v7 = 1;\n                            v8 = 1;\n                            v9 = malloc(0x8);\n                            if (v9 != 0)\n                            {\n                                v6 = 0;\n                                v32 = v2;\n                                *(v9) = v1;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v28 = *((long long *)*((long long *)(v12->field_98->field_28 + v16 * 24 + 16)));\n                        v29 = sub_40a120();\n                        if (v29 == 0)\n                        {\n                            v7 = 1;\n                            v8 = 1;\n                            v9 = malloc(0x8);\n                            if (v9 != 0)\n                            {\n                                *(v9) = v28;\n                                v29 = 0;\n                            }\n                            else\n                            {\n                                v8 = 0;\n                                v29 = 12;\n                                v7 = 0;\n                            }\n                            *((unsigned long *)&v6) = v29;\n                            v35 = (int)sub_40aa90();\n                            v36 = sub_40a660();\n                            free(v9);\n                            v34 = v6;\n                            if (v36 == 0 && v35 == 0 && v6 == 0)\n                            {\n                                v19 = v12->field_d8;\n                            }\n                            else\n                            {\n                                if ((unsigned int)v34 != 0)\n                                {\n                                    break;\n                                }\n                                v34 = (unsigned int)(v35 != 0? (unsigned int)r14<8> : (unsigned int)r15<8>);\n                            }\n                        }\n                    }\n                }\n                if (v33 == 1 && v31 == 0 && v6 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] || *((long long *)(v23[23] + (v27 << 3))) == 0 && v9 != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2])\n                {\n                    v1 = v32;\n                    *(v1) = (unsigned int)sub_40b6d0();\n                    free(v9);\n                    if (*((long long *)(v23[23] + (v27 << 3))) == 0)\n                    {\n                        v34 = v6;\n                    }\n                }\n                if (v31 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] && (v33 != 1 || v6 != 0) && v6 == 0 || *((long long *)(v23[23] + (v27 << 3))) == 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] && v9 == 0)\n                {\n                    return 12;\n                }\n                if ((v33 == 1 && v31 == 0 && v6 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] || *((long long *)(v23[23] + (v27 << 3))) == 0 && v9 != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2]) && *((long long *)(v23[23] + (v27 << 3))) == 0 && v6 == 0 || (v33 == 1 && v31 == 0 && v6 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] || *((long long *)(v23[23] + (v27 << 3))) == 0 && v9 != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2]) && *((long long *)(v23[23] + (v27 << 3))) != 0 || *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] && v31 != 0 || v21 == v25[3] + v21 - v25[2] && v26 != 0 && v29 != 0 || v26 == 0)\n                {\n                    v25 = &v25[5];\n                    if ((char)v25[-1] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if ((v33 == 1 && v31 == 0 && v6 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] || *((long long *)(v23[23] + (v27 << 3))) == 0 && v9 != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2]) && *((long long *)(v23[23] + (v27 << 3))) != 0 || v21 == v25[3] + v21 - v25[2] && v26 != 0 && v29 != 0 || *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] && v31 != 0 || (v33 == 1 && v31 == 0 && v6 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] || *((long long *)(v23[23] + (v27 << 3))) == 0 && v9 != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2]) && *((long long *)(v23[23] + (v27 << 3))) == 0 && v6 == 0 || v26 == 0)\n            {\n                v34 = 0;\n            }\n            else if (v29 == 0 && v36 == 0 && v35 == 0 && v6 == 0 && v21 == v25[3] + v21 - v25[2] && v26 != 0)\n            {\n                v25 = v19 + v3;\n            }\n            else if ((v33 == 1 && v31 == 0 && v6 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] || *((long long *)(v23[23] + (v27 << 3))) == 0 && v9 != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2]) && *((long long *)(v23[23] + (v27 << 3))) == 0 && v6 != 0 || v29 == 0 && v21 == v25[3] + v21 - v25[2] && v26 != 0 && (v36 != 0 || v35 != 0 || v6 != 0) && (unsigned int)v34 == 0 || v29 == 0 && v21 == v25[3] + v21 - v25[2] && v26 != 0 && (v36 != 0 || v35 != 0 || v6 != 0) || v31 == 0 && *((long long *)(v23[23] + (v27 << 3))) != 0 && v26 != 0 && v21 != v25[3] + v21 - v25[2] && (v33 != 1 || v6 != 0))\n            {\n                return v34;\n            }\n        }\n        if (true)\n        {\n            v34 = 0;\n        }\n        else\n        {\n            return v34;\n        }\n    }\n    v34 = 0;\n    return v34;\n}\n"
        },
        {
            "funcName": "sub_403190",
            "funcStartAddr": "0x403190",
            "funcEndAddr": "0x40325d",
            "decompiledFuncCode": "extern unsigned int g_61d3a0;\nextern unsigned long long g_61d440;\nextern unsigned long long g_61d448;\nextern unsigned long long g_61d450;\nextern unsigned int g_61d458;\n\nint sub_403190()\n{\n    char v0;  // [bp-0x98]\n    unsigned long long v2;  // rbp\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbx\n    unsigned int v5;  // eax\n    char v6;  // al\n\n    v2 = 75;\n    g_61d440 = (unsigned int)sub_402e50();\n    if (g_61d458 != -1)\n    {\n        sigprocmask(0x0, 0x61d3a0, (unsigned int)&v0);\n        v3 = sub_404170();\n        v4 = v3;\n        g_61d448 = v3;\n        v2 = *(__errno_location());\n        v5 = 0;\n        v6 = v4 != 0;\n        g_61d458 = rax<4> + g_61d458;\n        if (v4 != 0)\n        {\n            g_61d450 = 0;\n            return sigprocmask(0x2, (unsigned int)&v0, 0x0);\n        }\n    }\n    if (g_61d458 == -1 || v4 == 0)\n    {\n        sub_405d00();\n        error(0x0, v2, \"%s\");\n        sub_402fb0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_416370",
            "funcStartAddr": "0x416370",
            "funcEndAddr": "0x4168c4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_41900f;\nextern char g_61d638[2];\n\nint sub_416370()\n{\n    unsigned long|unsigned long long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    char [2]|unsigned long long v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned int v22;  // r12d\n    unsigned long v26;  // rdi\n    unsigned long long v28;  // rax\n    unsigned int *v29;  // rcx\n    unsigned int v30;  // eax\n    unsigned long v31;  // rax\n    unsigned int *v32;  // rdx\n    unsigned long long v33;  // rcx\n    unsigned long long v34;  // rax\n    unsigned long v35;  // rax\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // rdx\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // rdi\n    unsigned long long v43;  // rsi\n    unsigned long long v44;  // r9\n    unsigned long long v45;  // r10\n    unsigned int v46;  // ecx\n    unsigned long long v48;  // r8\n    void *v49;  // rcx\n    unsigned long long v52;  // rcx\n    unsigned int v54;  // edx\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rsi\n    char *v59;  // rax\n    unsigned long long v60;  // rdi\n    char *v61;  // rax\n    unsigned long long v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_61d638;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_41900f : (unsigned long long)nl_langinfo(0xe));\n    if (g_61d638 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_41900f;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v15[v11 + -1] != 47 && v17 != 0 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v17 != 0 && v15 != 0 || v11 == 0 && *(v15) != 0 && v17 != 0 && v15 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if (v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v59 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)))\n                        {\n                            v60 = __uflow(v10);\n                        }\n                        if ((unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            ungetc(v26, v10);\n                            v28 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                            if (v28 > 1)\n                            {\n                                v29 = &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v3);\n                                    v29 = &v4;\n                                    v30 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v31 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                v32 = &v5;\n                                v33 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v29 + 2) : v29) + -1 * ((v31 + v31 <= v31? 1 : 0) & 1) + -0x1 * &v3;\n                                do\n                                {\n                                    tmp_12 = (unsigned int)*((int *)&v5);\n                                    v32 = &v6;\n                                    v34 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                }\n                                while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                v1 = v33;\n                                tmp_56 = (unsigned int)v34 % 0x10000;\n                                v35 = (unsigned int)(((unsigned int)v34 & 32896) == 0? (unsigned int)(v34 >> 16) : (unsigned int)v34);\n                                v36 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * ((v35 + v35 <= v35? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v32)[2] : v32) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                if (v0 == 0)\n                                {\n                                    v0 = v36 + 2;\n                                    v37 = malloc(v36 + 3);\n                                    v39 = v1;\n                                    v40 = v2;\n                                }\n                                else\n                                {\n                                    v38 = v36 + v0 + 3;\n                                    v0 = v36 + v0 + 2;\n                                    v37 = realloc(NULL, v38);\n                                    v40 = v2;\n                                    v39 = v1;\n                                }\n                                if (v37 != 0)\n                                {\n                                    tmp_1 = -2 - v39;\n                                    v41 = v39 + 1;\n                                    v42 = v0 - v40;\n                                    v43 = tmp_1 + v0 - v40 + v37;\n                                    if ((unsigned int)v41 >= 8)\n                                    {\n                                        *((long long *)v43) = *((long long *)&v3);\n                                        *((long long *)(v43 + v41 - 8)) = *((long long *)&(&v3)[v41 + -8]);\n                                        v44 = v43 + 8 & -8;\n                                        v43 -= v43 + 8 & -8;\n                                        v45 = &(&v3)[-1 * v43];\n                                        v46 = (unsigned int)(v41 + v43) & -8;\n                                        if (v46 >= 8)\n                                        {\n                                            v43 = 0;\n                                            do\n                                            {\n                                                v48 = v43;\n                                                v43 = (unsigned int)v43 + 8;\n                                                *((long long *)(v44 + v48)) = *((long long *)(v45 + v48));\n                                            }\n                                            while ((unsigned int)v43 < (v46 & -8));\n                                        }\n                                    }\n                                    else if ((v41 & 4) != 0)\n                                    {\n                                        *((int *)v43) = *((int *)&v3);\n                                        *((int *)(v43 + v41 - 4)) = *((int *)&(&v3)[v41 + -4]);\n                                    }\n                                    else if ((unsigned int)v41 != 0)\n                                    {\n                                        *((char *)v43) = v3;\n                                        if ((v41 & 2) != 0)\n                                        {\n                                            *((short *)(v43 + v41 - 2)) = *((short *)&(&v3)[v41 + -2]);\n                                        }\n                                    }\n                                    v63 = v40 + 1;\n                                    v49 = v37 + v42 - 1;\n                                    if ((unsigned int)v43 >= 8)\n                                    {\n                                        *((long long *)v49) = *((long long *)&v5);\n                                        v43 = v63;\n                                        *((long long *)&((char *)v49)[v43 + -8]) = *((long long *)&(&v5)[v43 + -8]);\n                                        v52 = v49 - (v49 + 8 & -8);\n                                        v54 = (unsigned int)(v43 + v52) & -8;\n                                        if (v54 >= 8)\n                                        {\n                                            v57 = 0;\n                                            do\n                                            {\n                                                v58 = v57;\n                                                v57 = (unsigned int)v57 + 8;\n                                                *((long long *)((v49 + 8 & -8) + v58)) = *((long long *)&(&v5)[v58 + -1 * v52]);\n                                            }\n                                            while ((unsigned int)v57 < (v54 & -8));\n                                        }\n                                    }\n                                    else if (((char)v43 & 4) != 0)\n                                    {\n                                        *((int *)v49) = *((int *)&v5);\n                                        *((unsigned int *)&((char *)v49)[(unsigned long long)v7 + -4]) = v7;\n                                    }\n                                    else if ((unsigned int)v43 != 0)\n                                    {\n                                        *((char *)v49) = v5;\n                                        if ((v5 & 2) != 0)\n                                        {\n                                            *((short *)&((char *)v49)[(unsigned long long)v5 + -2]) = v7;\n                                        }\n                                    }\n                                    v9 = v37;\n                                    v59 = *((long long *)(v10 + 8));\n                                }\n                                else\n                                {\n                                    v9 = &g_41900f;\n                                    v10 = (tmp_10 == 0? &g_41900f : tmp_10);\n                                    free(NULL);\n                                    sub_4073b0();\n                                }\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) && v37 != 0 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35 && v28 > 1)\n                        {\n                            *((char **)(v10 + 8)) = &v59[1];\n                            v26 = *(v59);\n                        }\n                        if ((unsigned int)v26 == 35)\n                        {\n                            do\n                            {\n                                v61 = *((long long *)(v10 + 8));\n                                if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                {\n                                    *((char **)(v10 + 8)) = &v61[1];\n                                    v62 = *(v61);\n                                    v63 = 1;\n                                }\n                                else\n                                {\n                                    v62 = __uflow(v10);\n                                    v63 = (char)(v62 != -1);\n                                }\n                            }\n                            while (v62 != 10 && v63 != 0);\n                        }\n                        if ((unsigned int)v26 == 35 && v62 == -1 || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || (unsigned int)v60 == -1 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v28 <= 1 && (unsigned int)v26 != 32 && (unsigned int)v26 != 35)\n                        {\n                            v10 = (tmp_10 == 0? &g_41900f : tmp_10);\n                            sub_4073b0();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1)\n                    {\n                        v9 = &g_41900f;\n                    }\n                    else if (((unsigned int)v26 == 35 && (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v62 == -1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v60 == -1 || (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v28 <= 1) && v0 != 0 || ((unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 != 0 || (unsigned int)v26 != 32 && (unsigned int)(v26 - 9) > 1 && (unsigned int)v26 != 35 && v28 > 1 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v60 != -1) && v0 == 0) && v37 == 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_41900f;\n            free(v17);\n        }\n        *((char *[2])&g_61d638[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_41900f : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_404040",
            "funcStartAddr": "0x404040",
            "funcEndAddr": "0x404048",
            "decompiledFuncCode": "extern unsigned long long g_61d4b0;\n\nint sub_404040()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_61d4b0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_412e08",
            "funcStartAddr": "0x412e08",
            "funcEndAddr": "0x412e1a",
            "decompiledFuncCode": "int sub_412e08()\n{\n}\n"
        },
        {
            "funcName": "sub_4067f0",
            "funcStartAddr": "0x4067f0",
            "funcEndAddr": "0x406811",
            "decompiledFuncCode": "int sub_4067f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v2;  // r9\n\n    v0 = v2;\n    return sub_406700();\n}\n"
        },
        {
            "funcName": "sub_414ae0",
            "funcStartAddr": "0x414ae0",
            "funcEndAddr": "0x415738",
            "decompiledFuncCode": "int sub_414ae0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409780",
            "funcStartAddr": "0x409780",
            "funcEndAddr": "0x40979e",
            "decompiledFuncCode": "int sub_409780()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long v3[4];  // rdi\n\n    v0 = v2;\n    free(*(v3));\n    free(v3[3]);\n}\n"
        },
        {
            "funcName": "sub_4073b0",
            "funcStartAddr": "0x4073b0",
            "funcEndAddr": "0x407428",
            "decompiledFuncCode": "int sub_4073b0()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_407570() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40d8d0",
            "funcStartAddr": "0x40d8d0",
            "funcEndAddr": "0x40d95b",
            "decompiledFuncCode": "typedef struct struct_3 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_3;\n\ndouble sub_40d8d0()\n{\n    void tmp_16;  // tmp #16\n    void tmp_0;  // tmp #0\n    unsigned long long *v1;  // rdi\n    unsigned long long v2;  // cc_dep1\n    unsigned long long *v3;  // rax\n    unsigned long long *v4;  // rsi\n    unsigned long long *v5;  // r12\n    unsigned long v6;  // rcx\n    unsigned long long *v8;  // rbx\n    struct_3 *v9;  // r9\n    struct_3 *v10;  // rbp\n    unsigned long long *v11;  // rdx\n    unsigned long v12;  // rdx\n    void *v13;  // r8\n    uint128_t v15;  // xmm0\n\n    v2 = *(v1);\n    v3 = *(v1) - 1;\n    *(v1) = *(v1) - 1;\n    if (!((char)(v2 - 1 >> 63)))\n    {\n        v5 = v4;\n        v8 = v3 * 48;\n        v10 = v9;\n        tmp_16 = *(v4) + v3 * 48;\n        *(v11) = *((long long *)(*(v4) + v3 * 48));\n        v12 = v6 * 16;\n        memcpy(v13, *((long long *)(tmp_16 + 16)), v12);\n        free(v9->field_10);\n        free(*((long long *)(*(v4) + (*(v1) - 1) * 48 + 16)));\n        tmp_0 = (char *)v8 + *(v5);\n        v15 = *((int128_t *)&((char *)v8)[24 + *(v5)]);\n        v10->field_0 = *((int128_t *)&((char *)v8)[24 + *(v5)]);\n        v10->field_10 = *((long long *)(tmp_0 + 40));\n        return v15;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_416210",
            "funcStartAddr": "0x416210",
            "funcEndAddr": "0x416225",
            "decompiledFuncCode": "int sub_416210()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_4159e0();\n}\n"
        },
        {
            "funcName": "sub_405d00",
            "funcStartAddr": "0x405d00",
            "funcEndAddr": "0x405d73",
            "decompiledFuncCode": "int sub_405d00()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405630();\n}\n"
        },
        {
            "funcName": "sub_40a660",
            "funcStartAddr": "0x40a660",
            "funcEndAddr": "0x40a808",
            "decompiledFuncCode": "int sub_40a660()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4[3];  // rsi\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v7[3];  // r12\n    unsigned long long v8;  // rbx\n    unsigned long long v9[3];  // rdi\n    unsigned long long v10[3];  // rbx\n    unsigned long long v11;  // rsi\n    unsigned long long v13;  // rbp\n    unsigned long v14;  // rsi\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long v17;  // rdx\n    unsigned long long *v18;  // rbp\n    unsigned long long *v19;  // rax\n    unsigned long long *v20;  // rdx\n    unsigned long long *v21;  // rdi\n    void *v22;  // rdi\n    void *v23;  // rsi\n    unsigned long long v26;  // rsi\n    unsigned long long v27;  // cc_dep1\n    unsigned long long v28;  // cc_dep2\n    unsigned long long *v29;  // rdi\n    unsigned long long v30;  // rdx\n    unsigned long long *v31;  // rdi\n    unsigned long long v32;  // rdx\n    void *v33;  // rdi\n    unsigned long long v35;  // rcx\n    unsigned long long *v36;  // r8\n    unsigned long v37;  // rdx\n    unsigned long long *v38;  // rax\n    unsigned long long v39;  // rcx\n    unsigned long long *v40;  // rdi\n    unsigned long long v41;  // rsi\n    unsigned long long v42;  // rcx\n    unsigned long long *v43;  // r9\n    unsigned long v44;  // rdx\n    unsigned long long v46;  // rbx\n    unsigned long long v47;  // r12\n    unsigned long long v48;  // rbx\n    unsigned long long v49;  // r12\n\n    if (v4 != 0)\n    {\n        v5 = v4[1];\n        if (v4[1] != 0)\n        {\n            v2 = v6;\n            v7 = v4;\n            v1 = stack_base + 0;\n            v0 = v8;\n            v17 = v9[1];\n            v10 = v9;\n            v11 = *(v9);\n            if (*(v9) >= v9[1] + (v5 << 1))\n            {\n            }\n            else\n            {\n                v13 = (v5 + v11) * 2;\n                v14 = (v5 + v11) * 16;\n                v15 = realloc(v9[2], v14);\n                if (v15 != 0)\n                {\n                    v17 = v10[1];\n                    v10[2] = v15;\n                    v10[0] = v13;\n                    v5 = v7[1];\n                }\n                else\n                {\n                    v16 = 12;\n                }\n            }\n            if (v15 != 0 || *(v9) >= v9[1] + (v5 << 1))\n            {\n                if ((v9[1] == 0 || *(v9) < v9[1] + (v5 << 1)) && (v17 == 0 || *(v9) >= v9[1] + (v5 << 1)))\n                {\n                    v22 = v10[2];\n                    v23 = v7[2];\n                    v10[1] = v5;\n                    memcpy(v22, v23, v7[1] * 8);\n                }\n                if ((*(v9) < v9[1] + (v5 << 1) || v9[1] != 0) && (v17 != 0 || *(v9) >= v9[1] + (v5 << 1)))\n                {\n                    v18 = v17 + v5 * 2;\n                    v19 = v5 - 1;\n                    v20 = v17 - 1;\n                    v21 = !(v19);\n                    while ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>))\n                    {\n                        while (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n                        {\n                            v26 = *((long long *)(v7[2] + v19 * 8));\n                            v27 = *((long long *)(v10[2] + v20 * 8));\n                            v28 = *((long long *)(v7[2] + v19 * 8));\n                            if (*((long long *)(v10[2] + (v20 << 3))) == *((long long *)(v7[2] + (v19 << 3))))\n                            {\n                                v19 = (char *)&v19[-1] + 7;\n                                v30 = (char *)&v20[-1] + 7;\n                                v31 = !(v19);\n                            }\n                            else if (v27 < v28)\n                            {\n                                v19 = (char *)&v19[-1] + 7;\n                                v18 = (char *)&v18[-1] + 7;\n                                *((unsigned long long *)(v10[2] + v18 * 8)) = v26;\n                                v29 = !(v19);\n                            }\n                            else\n                            {\n                                v32 = (char *)&v20[-1] + 7;\n                            }\n                        }\n                    }\n                    v18 -= (char *)v19 + 1;\n                    v33 = v10[2] + v18 * 8;\n                    memcpy(v33, v7[2], ((char *)v19 + 1) * 8);\n                    v35 = v10[1];\n                    v36 = v10[1] + v7[1] * 2 - 1;\n                    v37 = (char *)(unsigned long long *)(-1 + v10[1] + 2 * v7[1] + -0x1 * v18) + 1;\n                    if ((char *)(unsigned long long *)(-1 + v10[1] + 2 * v7[1] + -0x1 * v18) + 1 != 0)\n                    {\n                        v38 = v35 - 1;\n                        v39 = v35 + v37;\n                        v40 = v10[2];\n                        v10[1] = v39;\n                        while (true)\n                        {\n                            v41 = *((long long *)((char *)v40 + 0x8 * v36));\n                            v42 = *((long long *)((char *)v40 + 0x8 * v38));\n                            v43 = (char *)v40 + 0x8 * ((char *)v38 + v37);\n                            if (*((long long *)((char *)v40 + 0x8 * v36)) > *((long long *)((char *)v40 + 0x8 * v38)))\n                            {\n                                v36 = (char *)&v36[-1] + 7;\n                                *(v43) = v41;\n                                v37 -= 1;\n                                if (v37 == 1)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                *(v43) = v42;\n                                v38 = (char *)&v38[-1] + 7;\n                                v44 = v37 * 8;\n                                memcpy(v40, (char *)v40 + 0x8 * v18, v44);\n                                v46 = v0;\n                                v47 = v2;\n                                return 0;\n                            }\n                        }\n                    }\n                }\n                v16 = 0;\n            }\n            v48 = v0;\n            v49 = v2;\n            return v16;\n        }\n    }\n    if (v4[1] == 0 || v4 == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405cc0",
            "funcStartAddr": "0x405cc0",
            "funcEndAddr": "0x405ccd",
            "decompiledFuncCode": "int sub_405cc0()\n{\n}\n"
        },
        {
            "funcName": "sub_40d960",
            "funcStartAddr": "0x40d960",
            "funcEndAddr": "0x40d9a4",
            "decompiledFuncCode": "int sub_40d960()\n{\n    unsigned long long v1;  // rdi\n    char *v3;  // rsi\n    char *v4;  // rbx\n    unsigned long long v5;  // rax\n\n    v4 = v3;\n    v5 = strlen(v3);\n    if (v5 == 1)\n    {\n        *((unsigned long long *)(v1 + ((unsigned int)((unsigned long long)*(v4) >> 3) & 24))) = *((long long *)(v1 + ((unsigned int)((unsigned long long)*(v4) >> 3) & 24))) | v5 << (*(v4) & 63);\n        return 0;\n    }\n    return 3;\n}\n"
        },
        {
            "funcName": "sub_40a190",
            "funcStartAddr": "0x40a190",
            "funcEndAddr": "0x40a27b",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_2;\n\nint sub_40a190()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v2[6];  // r12\n    unsigned long long v3;  // rdx\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // rax\n    unsigned long v6;  // r8\n    unsigned long v7;  // rcx\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v11;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n\n    v2 = v1;\n    v14 = v3;\n    while (true)\n    {\n        v4 = sub_40a120();\n        if (v4 == 0)\n        {\n            v5 = v14 * 16 + *(v2);\n            if (*(v5) == v7 && (unsigned int)v6 == 9 && (char)*((char *)((v14 << 4) + *(v2) + 8)) == (unsigned int)v6)\n            {\n                v15 = sub_408b10();\n            }\n            if (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6)\n            {\n                v8 = sub_408b10();\n                if (v8 != 0)\n                {\n                    v9 = v14 * 24;\n                    v11 = *((long long *)(v2[5] + v9 + 8));\n                    if (*((long long *)(v2[5] + v9 + 8)) != 0)\n                    {\n                        v12 = *((long long *)(v2[5] + v9 + 16));\n                        if (v11 == 2)\n                        {\n                            v13 = sub_40a190();\n                            if ((unsigned int)v13 == 0)\n                            {\n                                v12 = *((long long *)(v2[5] + v9 + 16));\n                            }\n                        }\n                    }\n                }\n            }\n            if ((v8 == 0 || *(v5) == v7) && (v8 == 0 || (char)*((char *)((v14 << 4) + *(v2) + 8)) == (unsigned int)v6) && ((unsigned int)v6 == 9 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6) && (v15 == 0 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6))\n            {\n                v13 = 12;\n            }\n        }\n        if (v4 != 0 || *(v5) == v7 && (char)*((char *)((v14 << 4) + *(v2) + 8)) == (unsigned int)v6 && (unsigned int)v6 != 9 || *(v5) == v7 && (char)*((char *)((v14 << 4) + *(v2) + 8)) == (unsigned int)v6 && v15 != 0 || *((long long *)(v2[5] + v9 + 8)) == 0 && v8 != 0 && *(v5) != v7 || *((long long *)(v2[5] + v9 + 8)) == 0 && v8 != 0 && (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6)\n        {\n            return 0;\n        }\n        if (v4 == 0 && v11 == 2 && *((long long *)(v2[5] + v9 + 8)) != 0 && v8 != 0 && (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6) && (unsigned int)v13 != 0 || v4 == 0 && (v8 == 0 || *(v5) == v7) && (v8 == 0 || (char)*((char *)((v14 << 4) + *(v2) + 8)) == (unsigned int)v6) && ((unsigned int)v6 == 9 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6) && (v15 == 0 || *(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6))\n        {\n            return v13;\n        }\n        if (v4 == 0 && v11 == 2 && *((long long *)(v2[5] + v9 + 8)) != 0 && v8 != 0 && (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6) && (unsigned int)v13 == 0 || v4 == 0 && *((long long *)(v2[5] + v9 + 8)) != 0 && v8 != 0 && (*(v5) != v7 || (char)*((char *)((v14 << 4) + *(v2) + 8)) != (unsigned int)v6) && v11 != 2)\n        {\n            v14 = *(v12);\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_405d70",
            "funcStartAddr": "0x405d70",
            "funcEndAddr": "0x405ddc",
            "decompiledFuncCode": "extern uint128_t g_61d5c0;\nextern uint128_t g_61d5d0;\nextern uint128_t g_61d5e0;\nextern unsigned long long g_61d5f0;\n\nint sub_405d70()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_61d5c0;\n    *((uint128_t *)&v1) = g_61d5d0;\n    *((uint128_t *)&v2) = g_61d5e0;\n    v4 = g_61d5f0;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_405630();\n    }\n    if (v6 == 0 || v7 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_405e30",
            "funcStartAddr": "0x405e30",
            "funcEndAddr": "0x405e3a",
            "decompiledFuncCode": "int sub_405e30()\n{\n}\n"
        },
        {
            "funcName": "sub_405820",
            "funcStartAddr": "0x405820",
            "funcEndAddr": "0x40582f",
            "decompiledFuncCode": "extern int512_t g_61d5c0;\n\nint sub_405820()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_61d5c0 : v1)) = v2;\n    return &g_61d5c0;\n}\n"
        },
        {
            "funcName": "sub_416250",
            "funcStartAddr": "0x416250",
            "funcEndAddr": "0x41626c",
            "decompiledFuncCode": "int sub_416250()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp+0x8]\n    unsigned long v5;  // [bp+0x10]\n    unsigned long v6;  // [bp+0x18]\n\n    v3 = 0;\n    v2 = v6;\n    v1 = v5;\n    v0 = v4;\n    return sub_415e40();\n}\n"
        },
        {
            "funcName": "sub_404400",
            "funcStartAddr": "0x404400",
            "funcEndAddr": "0x405538",
            "decompiledFuncCode": "int sub_404400()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned int *|unsigned long long v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    char|unsigned long|unsigned long long v4;  // [bp-0xc0]\n    char|unsigned long|unsigned long long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    char|unsigned long long v9;  // [bp-0x98]\n    unsigned long|unsigned long long v10;  // [bp-0x90]\n    unsigned int|unsigned long long v11;  // [bp-0x88]\n    unsigned int|unsigned long long v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char|unsigned long long v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    char v23;  // [bp-0x44]\n    unsigned long long v24;  // [bp-0x40]\n    unsigned int *v25;  // [bp+0x8]\n    unsigned long long v26;  // [bp+0x10]\n    unsigned long long v27;  // [bp+0x18]\n    unsigned long long v28;  // rdi\n    unsigned long long v29;  // r15\n    unsigned long v30;  // r8\n    unsigned long long v31;  // rcx\n    unsigned long v32;  // r9\n    char|unsigned long|unsigned long long v33;  // r10\n    unsigned long long v34;  // rbp\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r13\n    unsigned long long v37;  // r8\n    unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long|unsigned long long v40;  // rbp\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rax\n    char v43;  // al\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // rcx\n    unsigned short|unsigned long|unsigned long long v46;  // rax\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    unsigned long long v50;  // r13\n    char v51;  // r13b\n    unsigned long long v52;  // r13\n    unsigned long long v53;  // rdx\n    unsigned long long v54;  // rbx\n    unsigned long long v55;  // r13\n    unsigned long long v56;  // r15\n    unsigned long long v57;  // rbp\n    unsigned long long v58;  // r14\n    char *v59;  // rax\n    unsigned long long v60;  // rcx\n    unsigned long long v62;  // r13\n    unsigned long long v63;  // r13\n    unsigned long long v64;  // rcx\n    char v65;  // al\n    char v66;  // al\n    unsigned int v67;  // eax\n    char v68;  // al\n    unsigned int v70;  // eax\n    char v71;  // al\n    unsigned long v72;  // rdx\n    unsigned long long v73;  // rax\n    char v74;  // al\n    unsigned long long v75;  // rdx\n    unsigned long long v76;  // rbx\n    unsigned int|unsigned long long v77;  // rsi\n    unsigned int|unsigned long long v78;  // r13\n    unsigned long long v79;  // r14\n    unsigned long long v80;  // r12\n    unsigned int v81;  // r13d\n    unsigned long long v82;  // r11\n    char v83;  // dl\n    unsigned long long v84;  // rax\n    unsigned long long v85;  // cc_dep1\n    unsigned long long v86;  // dl\n    unsigned long long v87;  // rax\n    unsigned long long v88;  // rax\n    char|unsigned long long v89;  // rdx\n    unsigned long long v90;  // rdx\n    unsigned long long v91;  // rax\n    unsigned long long v92;  // rax\n\n    v29 = v28;\n    v79 = v77;\n    v78 = v30;\n    v7 = v89;\n    v4 = v31;\n    v16 = v32;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v32 & 2) != 0;\n    switch ((unsigned int)v30)\n    {\n    case 0:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 0;\n            if (v77 == 0)\n            {\n                v6 = 1;\n                v33 = 0;\n                v76 = 1;\n                v78 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v84 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v32 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v32 & 2) == 0)\n        {\n            if (v77 != 0)\n            {\n                *((char *)v28) = 34;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v33 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v76 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v33 = 0;\n            v76 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v78 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v33 = 0;\n        v76 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v30 != 10)\n        {\n            v4 = v4;\n            v26 = (unsigned int)sub_404300();\n            v27 = (unsigned int)sub_404300();\n        }\n        v76 = 0;\n        if (((char)v32 & 2) == 0)\n        {\n            v78 = (char)*((char *)v26);\n            if (*((char *)v26) != 0)\n            {\n                do\n                {\n                    if (v77 > v76)\n                    {\n                        *((unsigned long long *)(v28 + v76)) = v78;\n                    }\n                    v76 += 1;\n                    v78 = (char)*((char *)(v26 + v76));\n                }\n                while ((char)v78 != 0);\n            }\n        }\n        v5 = v82;\n        v6 = 1;\n        v8 = strlen(v27);\n        v18 = 0;\n        v13 = v27;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v82 = v4;\n    while (true)\n    {\n        v38 = v82;\n        v80 = 0;\n        v39 = v78;\n        while (true)\n        {\n            v78 = (char)(v38 != v80);\n            if (v38 == -1)\n            {\n                v78 = (char)(*((char *)(v7 + v80)) != 0);\n            }\n            if (v78 != 0)\n            {\n                v37 = v7 + v80;\n                v5 = (unsigned int)v39 != 2 & v4;\n                if (((unsigned int)v39 != 2 & v4) != 0)\n                {\n                    v78 = v8;\n                    if (v8 != 0)\n                    {\n                        v34 = v80 + v78;\n                        if (v38 == -1 && v78 > 1)\n                        {\n                            v11 = v39;\n                            v10 = v33;\n                            v9 = v37;\n                            v38 = strlen(v7);\n                        }\n                        if (v34 <= v38)\n                        {\n                            v12 = v39;\n                            v11 = v38;\n                            v10 = v33;\n                            v9 = v37;\n                            v78 = memcmp(v37, v13, v8);\n                            v37 = v9;\n                            v33 = (char)v10;\n                            v38 = v11;\n                            v39 = v12;\n                            if (v17 == 0 && v78 == 0)\n                            {\n                                v40 = (char)*((char *)v37);\n                                switch (*((char *)v37))\n                                {\n                                case 0:\n                                    v89 = (char)((unsigned int)v39 == 2);\n                                    v78 = (unsigned int)(0 ^ 1);\n                                    v78 = (char)(0 ^ 1) & (unsigned int)v39 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0)\n                                    {\n                                        if (v77 > v76)\n                                        {\n                                            *((char *)(v28 + v76)) = 39;\n                                        }\n                                        if (v77 > v76 + 1)\n                                        {\n                                            *((char *)(v28 + v76 + 1)) = 36;\n                                        }\n                                        if (v77 > v76 + 2)\n                                        {\n                                            *((char *)(v28 + v76 + 2)) = 39;\n                                        }\n                                        v47 = v76 + 3;\n                                        v76 += 4;\n                                        v33 = rax<8>;\n                                        v78 = 0;\n                                        v40 = 48;\n                                    }\n                                    else\n                                    {\n                                        v47 = v76;\n                                        v78 = 0;\n                                        v76 = v47 + 1;\n                                        v78 = v78;\n                                        v40 = 48;\n                                        v78 = 0;\n                                        v40 = 48;\n                                        if (1 < v38)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v77 > v76)\n                                                {\n                                                    *((char *)(v28 + v76)) = 48;\n                                                }\n                                                if (v77 > v47 + 2)\n                                                {\n                                                    *((char *)(v28 + v47 + 2)) = 48;\n                                                }\n                                                v76 = v47 + 3;\n                                                v40 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v77 > v76 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v39 == 2) == 0 || v77 > v76 + 3))\n                                    {\n                                        *((char *)(v28 + v47)) = 92;\n                                        v33 = v78;\n                                    }\n                                case 7:\n                                    v40 = 97;\n                                    v78 = 0;\n                                case 8:\n                                    v89 = 0;\n                                    v78 = 0;\n                                    v40 = 98;\n                                case 13:\n                                    v40 = 13;\n                                    v45 = 114;\n                                    v89 = (unsigned int)v39 == 2;\n                                case 32:\n                                    v41 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v89 = 0;\n                                case 35: case 126:\n                                    v42 = v5;\n                                    v48 = v5;\n                                    v89 = 0;\n                                    v5 = v42;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v41 = v5;\n                                case 92:\n                                    v44 = v4;\n                                    v40 = 92;\n                                    v45 = 92;\n                                    v89 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v80 = 1;\n                                        v46 = 0;\n                                        v78 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v78 != 0 || v34 > v38)\n                    {\n                        v40 = (char)*((char *)v37);\n                        switch (*((char *)v37))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v39 == 2;\n                            }\n                        case 7:\n                            v40 = 97;\n                            break;\n                        case 8:\n                            v40 = 98;\n                        case 9:\n                            v40 = 116;\n                        case 10:\n                            v40 = 110;\n                            v89 = 0;\n                            v78 = 0;\n                        case 11:\n                            v40 = 118;\n                            break;\n                            if (v17 != 0)\n                            {\n                                v87 = 0;\n                            }\n                        case 12:\n                            v40 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v41 = 0;\n                            v40 = 32;\n                            v50 = v5;\n                            v5 = v41;\n                            v78 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v42 = 0;\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v41 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v40 = (char)*((char *)v37);\n                    switch (*((char *)v37))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v80 += 1;\n                            v5 = 0;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v36 = 0;\n                            v40 = 0;\n                            break;\n                        }\n                    case 7:\n                        v40 = 7;\n                        v45 = 97;\n                        v89 = (unsigned int)v39 == 2;\n                    case 8:\n                        v40 = 8;\n                        v45 = 98;\n                        v89 = (unsigned int)v39 == 2;\n                    case 9:\n                        v40 = 9;\n                        v45 = 116;\n                    case 10:\n                        v40 = 10;\n                        v45 = 110;\n                    case 11:\n                        v40 = 11;\n                        v45 = 118;\n                        v89 = (unsigned int)v39 == 2;\n                    case 12:\n                        v40 = 12;\n                        v45 = 102;\n                        v89 = (unsigned int)v39 == 2;\n                    case 13:\n                        v40 = 13;\n                        v45 = 114;\n                        v89 = (unsigned int)v39 == 2;\n                        v5 = v17 & (unsigned int)v39 == 2;\n                        if ((v17 & (unsigned int)v39 == 2) == 0)\n                        {\n                            v40 = v45;\n                            v78 = 0;\n                            v55 = 0;\n                            break;\n                        }\n                    case 32:\n                        v40 = 32;\n                        v89 = (char)((unsigned int)v39 == 2);\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        v35 = 0;\n                    case 35: case 126:\n                        v89 = (unsigned int)v39 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v89 = (char)((unsigned int)v39 == 2);\n                        break;\n                        v78 = ((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1;\n                        v78 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) | v17;\n                        if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) != 0)\n                        {\n                            v78 = 0;\n                            v72 = (unsigned int)((unsigned long long)v25[v40 % 32] >> ((char)v40 & 31)) & 1;\n                            v89 = (unsigned int)v39 == 2;\n                        }\n                        if (v17 == 0)\n                        {\n                            v89 = (unsigned int)v39 == 2;\n                            v80 += 1;\n                            v46 = (v78 ^ 1) & (unsigned int)v33;\n                            if (v46 != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 39;\n                                }\n                                v76 += 2;\n                                v33 = 0;\n                            }\n                            v73 = (unsigned int)v33 ^ 1;\n                            v74 = (char)((unsigned int)v33 ^ 1) & v89;\n                            if (((char)((unsigned int)v33 ^ 1) & v89) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v76 + 1 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v75 = v76 + 2;\n                                if (v76 + 2 < v79)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = rax<8>;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                            v80 += 1;\n                        }\n                    case 39:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            if (v77 != 0)\n                            {\n                                v53 = 0;\n                            }\n                            if (v77 == 0 || v14 != 0)\n                            {\n                                if (v77 > v76)\n                                {\n                                    *((char *)(v28 + v76)) = 39;\n                                }\n                                if (v77 > v76 + 1)\n                                {\n                                    *((char *)(v28 + v76 + 1)) = 92;\n                                }\n                                if (v77 > v76 + 2)\n                                {\n                                    v53 = v77;\n                                    *((char *)(v28 + v76 + 2)) = 39;\n                                    v79 = v14;\n                                }\n                                else\n                                {\n                                    v53 = v77;\n                                    v79 = v14;\n                                }\n                            }\n                            v18 = v78;\n                            v76 += 3;\n                            v78 = 0;\n                            v33 = 0;\n                            v14 = v79;\n                            v40 = 39;\n                            v79 = v53;\n                        }\n                        else\n                        {\n                            v18 = v78;\n                            v89 = 0;\n                            v40 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v39 != 2)\n                        {\n                            v40 = 63;\n                            v89 = (char)((unsigned int)v39 == 2);\n                            v52 = 0;\n                            break;\n                            v77 = v7;\n                            v40 = (char)*((char *)(v77 + 2));\n                            v77 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v89 = 0;\n                            v62 = 0;\n                            v40 = 63;\n                            break;\n                            if (v79 > v76)\n                            {\n                                *((char *)(v28 + v76)) = 63;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v28 + v76 + 1)) = 34;\n                            }\n                            if (v79 > v76 + 2)\n                            {\n                                *((char *)(v28 + v76 + 2)) = 34;\n                            }\n                            if (v79 > v76 + 3)\n                            {\n                                *((char *)(v28 + v76 + 3)) = 63;\n                            }\n                            v76 += 4;\n                            v89 = 0;\n                            v78 = 0;\n                            v80 = 2;\n                            v78 = v78;\n                            v78 = 0;\n                        }\n                        else\n                        {\n                            v78 = 0;\n                            v78 = 0;\n                            v40 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v39 == 2)\n                        {\n                            v80 += 1;\n                            v46 = v33;\n                            v78 = 0;\n                            v40 = 92;\n                        }\n                    case 123: case 125:\n                        v43 = v38 != 1;\n                        if (v38 == -1)\n                        {\n                            v43 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v89 = (unsigned int)v39 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v81 = v39;\n                v82 = v38;\n                v83 = v81 == 2;\n                if (v76 == 0 && (v81 == 2 & v17) != 0)\n                {\n                    v3 = v27;\n                    v2 = v26;\n                    v1 = 0;\n                    v76 = (unsigned int)sub_404400();\n                }\n                if ((v81 == 2 & v17) == 0 || v76 != 0)\n                {\n                    v84 = (unsigned int)v17 ^ 1;\n                    v85 = v83 & (char)((unsigned int)v17 ^ 1);\n                    v86 = v83 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v85 == 0)\n                    {\n                        v86 = v84;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v84 = v79 == 0 & v14 != 0;\n                            if ((v79 == 0 & v14 != 0) == 0)\n                            {\n                                v86 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v27;\n                            v2 = v26;\n                            v1 = v25;\n                            v76 = (unsigned int)sub_404400();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0)\n            {\n                v88 = v13;\n                if (v13 != 0 && v86 != 0)\n                {\n                    v90 = (char)*((char *)v88);\n                    if (*((char *)v88) != 0)\n                    {\n                        v91 = v88 - v76;\n                        do\n                        {\n                            if (v79 > v76)\n                            {\n                                *((unsigned long long *)(v29 + v76)) = v90;\n                            }\n                            v76 += 1;\n                            v90 = (char)*((char *)(v91 + v76));\n                        }\n                        while ((char)v90 != 0);\n                    }\n                }\n                if (v79 > v76)\n                {\n                    *((char *)(v29 + v76)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v39;\n                v10 = v38;\n                v9 = v33;\n                v46 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v40 * 2));\n                tmp_38 = v46 & 0x4000;\n                v46 &= 0x4000;\n                v51 = (tmp_38 & 65535) != 0;\n                v89 = (tmp_38 & 65535) == 0 & v4;\n                if (v89 != 0)\n                {\n                    v89 = v4;\n                    v78 = 0;\n                }\n            }\n            else\n            {\n                v24 = 0;\n                if (v38 == -1)\n                {\n                    v11 = v39;\n                    v10 = v33;\n                    v9 = v37;\n                    v38 = strlen(v7);\n                }\n                v21 = v76;\n                v22 = v37;\n                v54 = 0;\n                v19 = v33;\n                *((unsigned long long *)&v20) = v40;\n                v11 = v29;\n                v12 = v79;\n                v9 = v38;\n                v10 = v39;\n                do\n                {\n                    v56 = v80 + v54;\n                    v57 = v7 + v80 + v54;\n                    v46 = sub_4083e0();\n                    v58 = v46;\n                    if (v46 != -1 && v46 != -2 && v46 != 0)\n                    {\n                        if ((int)v10 == 2 && v17 != 0 && v46 != 1)\n                        {\n                            v59 = v7 + v77 + 1;\n                            v77 = v7 + v58 + v77;\n                            while (true)\n                            {\n                                v60 = (unsigned int)*(v59) - 91;\n                                if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                                {\n                                    v59 = &v59[1];\n                                    if (v77 == v59)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v60 & 63)) == 0 || ((unsigned int)*(v59) - 91 & 255) > 33)\n                            {\n                                v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                                v54 += v58;\n                                v46 = mbsinit((unsigned int)&v24);\n                            }\n                        }\n                        v78 = (unsigned int)(iswprint(*((int *)&v23)) == 0? 0 : (unsigned int)r13<8>);\n                        v54 += v58;\n                        v46 = mbsinit((unsigned int)&v24);\n                    }\n                    if (v46 == -1)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v78 = 0;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = v4;\n                    }\n                    if (v46 == -2)\n                    {\n                        v38 = v9;\n                        v77 = v56;\n                        v46 = v54;\n                        v28 = v54;\n                        v33 = (char)v19;\n                        v40 = v20;\n                        v76 = v21;\n                        v29 = v11;\n                        v79 = v12;\n                        v39 = (unsigned int)v10;\n                        if (v77 < v9 && *((char *)v57) != 0)\n                        {\n                            do\n                            {\n                                v46 += 1;\n                            }\n                            while (v46 < v9 && *((char *)(v22 + v46)) != 0);\n                            v28 = v46;\n                        }\n                        v89 = v4;\n                        v78 = 0;\n                    }\n                    if (v46 == 0 || (unsigned int)v46 != 0 && v46 != -1 && v46 != -2)\n                    {\n                        v28 = v54;\n                        v40 = v20;\n                        v76 = v21;\n                        v33 = (char)v19;\n                        v29 = v11;\n                        v89 = (unsigned int)v78 ^ 1;\n                        v79 = v12;\n                        v38 = v9;\n                        v39 = (unsigned int)v10;\n                        v89 = (char)((unsigned int)v78 ^ 1) & v4;\n                    }\n                }\n                while (v28 <= 1);\n                if (v46 == -1 || v46 == -2 || v46 == 0 || (unsigned int)v46 != 0)\n                {\n                    v9 = v78;\n                    v77 = 0;\n                    v63 = v17;\n                    v64 = v28 + v80;\n                    v28 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v42;\n                v49 = 0;\n                v87 = v89;\n                *((unsigned long long *)&v4) = v4 & v87;\n            }\n            if (v89 != 0)\n            {\n                v9 = v78;\n                v77 = 0;\n                v63 = v17;\n                v64 = v28 + v80;\n                v28 = v5;\n                while (true)\n                {\n                    if (v89 != 0)\n                    {\n                        v65 = (unsigned int)v39 == 2;\n                        if (v63 == 0)\n                        {\n                            v77 = (unsigned int)v33 ^ 1;\n                            v66 = v4 & (char)((unsigned int)v33 ^ 1);\n                            if ((v4 & (char)((unsigned int)v33 ^ 1)) != 0)\n                            {\n                                if (v79 > v76)\n                                {\n                                    *((char *)(v29 + v76)) = 39;\n                                }\n                                if (v79 > v76 + 1)\n                                {\n                                    *((char *)(v29 + v76 + 1)) = 36;\n                                }\n                                v77 = v76 + 2;\n                                if (v79 > v76 + 2)\n                                {\n                                    *((char *)(v29 + v76 + 2)) = 39;\n                                }\n                                v76 += 3;\n                                v33 = v46;\n                            }\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            if (v79 > v76 + 1)\n                            {\n                                v67 = v40;\n                                v68 = (char)v40 % 64;\n                                *((unsigned long long *)(v29 + v76 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v46 = v76 + 2;\n                            if (v79 > v76 + 2)\n                            {\n                                v70 = v40;\n                                v71 = (char)v40 % 8;\n                                v46 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v29 + v76 + 2)) = v46;\n                            }\n                            v80 += 1;\n                            v76 += 3;\n                            v40 = ((unsigned int)v40 & 7) + 48;\n                            if (v80 < v64)\n                            {\n                                v77 = v89;\n                            }\n                            else\n                            {\n                                v78 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v65;\n                        }\n                    }\n                    else\n                    {\n                        v46 = (v77 ^ 1) & (unsigned int)v33;\n                        if (v28 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 92;\n                            }\n                            v76 += 1;\n                        }\n                        v80 += 1;\n                        if (v80 >= v64)\n                        {\n                            v78 = (char)v9;\n                        }\n                        else if (v46 != 0)\n                        {\n                            if (v79 > v76)\n                            {\n                                *((char *)(v29 + v76)) = 39;\n                            }\n                            v46 = v76 + 1;\n                            if (v79 > v76 + 1)\n                            {\n                                *((char *)(v29 + v76 + 1)) = 39;\n                            }\n                            v76 += 2;\n                            v28 = 0;\n                            v33 = 0;\n                        }\n                        else\n                        {\n                            v28 = 0;\n                        }\n                    }\n                    if ((v89 == 0 || v80 < v64) && (v89 == 0 || v63 == 0) && (v80 < v64 || v89 != 0))\n                    {\n                        if (v79 > v76)\n                        {\n                            *((unsigned long long *)(v29 + v76)) = v40;\n                        }\n                        v40 = (char)*((char *)(v7 + v80));\n                        v76 += 1;\n                    }\n                }\n            }\n            if ((v46 == 0 || v17 == 0) && (v46 == 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0) && (v17 == 0 || v89 != 0) && ((char)(((unsigned int)v4 ^ 1 | (unsigned int)v89) ^ 1) == 0 || v89 != 0))\n            {\n                if (v76 < v79)\n                {\n                    *((unsigned long long *)(v29 + v76)) = v40;\n                }\n                v76 += 1;\n                v6 = (v78 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v78 == 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && (v79 == 0 & v14 != 0) == 0 || (char)v85 == 0 && v78 == 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v78 == 0 && (char)v85 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) && v18 == 0 || v78 == 0 && v6 != 0 && (char)v85 != 0 && v18 != 0 && ((v81 == 2 & v17) == 0 || v76 != 0) || v76 == 0 && v78 == 0 && (v81 == 2 & v17) != 0)\n            {\n                v92 = v76;\n                return v92;\n            }\n        }\n        *((char *)v29) = 39;\n        v78 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        v18 = v84;\n    }\n}\n"
        },
        {
            "funcName": "sub_40be50",
            "funcStartAddr": "0x40be50",
            "funcEndAddr": "0x40bf26",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[64];\n    unsigned long long field_58;\n    char padding_60[16];\n    unsigned int field_70;\n    char padding_74[12];\n    unsigned long long field_80;\n    char padding_88[5];\n    char field_8d;\n    char field_8e;\n    char padding_8f[1];\n    unsigned int field_90;\n} struct_0;\n\nint sub_40be50()\n{\n    struct_0 *v1;  // rdi\n    void *v2;  // rsi\n    unsigned int v3;  // edx\n    void *v5;  // rax\n    unsigned int v6;  // ebx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned int v9;  // eax\n    char v10;  // al\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        if (v1->field_58 != v2)\n        {\n            if (v1->field_90 > 1)\n            {\n                v5 = v1->field_10;\n                while (true)\n                {\n                    v6 = *((int *)((char *)v5 + 0x4 * v2));\n                    if (*((int *)((char *)v5 + 0x4 * v2)) == -1)\n                    {\n                        v2 -= 1;\n                        if (v2 == -1)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        if (v1->field_8e != 0)\n                        {\n                            v8 = iswalnum(v6);\n                            if (v6 == 95 || v8 != 0)\n                            {\n                                v7 = 1;\n                            }\n                        }\n                        if (v1->field_8e == 0 || v8 == 0 && v6 != 95)\n                        {\n                            v7 = 0;\n                            break;\n                        }\n                    }\n                }\n                if (*((int *)((char *)v5 + 0x4 * v2)) != -1)\n                {\n                    return v7;\n                }\n                else if (*((int *)((char *)v5 + 0x4 * v2)) != -1 && (v1->field_8e == 0 || v8 == 0) && (v1->field_8e == 0 || v6 != 95))\n                {\n                    v9 = 0;\n                    v10 = v1->field_8d != 0;\n                    return (unsigned long long)(unsigned int)rax<4> * 2;\n                }\n                else if (*((int *)((char *)v5 + 0x4 * v2)) == -1)\n                {\n                    return v1->field_70;\n                }\n            }\n            else\n            {\n                v7 = 1;\n                if (((char)(*((long long *)(v1->field_80 + ((unsigned long long)(char)*(&((char *)v2)[v1->field_8]) >> 6 << 3))) >> (*(&((char *)v2)[v1->field_8]) & 63)) & 1) == 0)\n                {\n                    v7 = 0;\n                }\n            }\n            if ((((char)(*((long long *)(v1->field_80 + ((unsigned long long)(char)*(&((char *)v2)[v1->field_8]) >> 6 << 3))) >> (*(&((char *)v2)[v1->field_8]) & 63)) & 1) == 0 || v1->field_90 > 1) && (*(&((char *)v2)[v1->field_8]) == 10 || v1->field_90 > 1))\n            {\n                v9 = 0;\n                v10 = v1->field_8d != 0;\n                return (unsigned long long)(unsigned int)rax<4> * 2;\n            }\n        }\n        else\n        {\n            v7 = (0 - (unsigned int)(char)((v3 & 2) < 1) & 2) + 8;\n        }\n        if (v1->field_58 == v2 || v1->field_90 > 1 || ((char)(*((long long *)(v1->field_80 + ((unsigned long long)(char)*(&((char *)v2)[v1->field_8]) >> 6 << 3))) >> (*(&((char *)v2)[v1->field_8]) & 63)) & 1) != 0 || *(&((char *)v2)[v1->field_8]) != 10)\n        {\n            return v7;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || v1->field_90 > 1 && v1->field_58 != v2)\n    {\n        return v1->field_70;\n    }\n}\n"
        },
        {
            "funcName": "sub_406820",
            "funcStartAddr": "0x406820",
            "funcEndAddr": "0x406ee6",
            "decompiledFuncCode": "int sub_406820()\n{\n    unsigned long long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x58]\n    char v2;  // [bp-0x49]\n    char v3;  // [bp-0x40]\n    unsigned long v5;  // rcx\n    unsigned int v6;  // edx\n    unsigned int v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned int *v9;  // r13\n    unsigned int *v10;  // r13\n    char v11[3];  // r15\n    unsigned int v12;  // edi\n    char *v13;  // r8\n    unsigned int v14;  // eax\n    unsigned long long v15;  // r13\n    unsigned long|unsigned long long v16;  // r12\n    unsigned long long v17;  // rbp\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rdx\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rsi\n    char v24;  // sil\n    unsigned long long v25;  // rdx\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // r13\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // r9\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r9\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // rsi\n    unsigned long long v41;  // rcx\n    unsigned long long v42;  // r9\n    unsigned int|unsigned long long v43;  // edi\n    unsigned int|unsigned long|unsigned long long v44;  // r10\n    unsigned long long v45;  // rcx\n    unsigned long long v46;  // r9\n    unsigned long long v47;  // rcx\n    unsigned long long v48;  // r9\n    unsigned int|unsigned long long v49;  // rdi\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // rcx\n    unsigned long long v52;  // rdi\n    unsigned long long v53;  // rcx\n    unsigned int v54;  // cc_dep1\n    unsigned int v55;  // cc_dep1\n    unsigned long long v56;  // cc_dep1\n    unsigned long v57;  // rax\n    unsigned int v58;  // cc_dep1\n    unsigned int v59;  // cc_dep1\n    unsigned int v60;  // cc_dep1\n    char *v61;  // rsi\n    unsigned long long v62;  // rax\n\n    v1 = v5;\n    if (v6 <= 36)\n    {\n        v8 = (v7 == 0? &v3 : v7);\n        *(v9) = 0;\n        v9 = __errno_location();\n        v11 = *(v8);\n        v17 = __strtol_internal(v12, v7, v6, 0x0);\n        if (*(v8) != v43)\n        {\n            v14 = *(v10);\n            if (*(v10) == 0)\n            {\n                v16 = 0;\n            }\n            else\n            {\n                v16 = 4;\n                if (v14 == 34)\n                {\n                    v16 = 1;\n                }\n            }\n            if ((*(v10) == 0 || v14 == 34) && v13 != 0)\n            {\n                v15 = v11[0];\n                if (v11[0] != 0)\n                {\n                    v19 = strchr(v13, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n        }\n        else\n        {\n            if (v13 != 0)\n            {\n                v15 = v11[0];\n                v16 = 4;\n                if (v11[0] != 0)\n                {\n                    v17 = 1;\n                    v16 = 0;\n                    v18 = strchr(v13, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n            if ((v18 == 0 || v13 == 0) && (v13 == 0 || v11[0] != 0))\n            {\n                v16 = 4;\n            }\n        }\n        if (*(v8) == v43 && v11[0] != 0 && v13 != 0 && v18 != 0 || *(v8) != v43 && v11[0] != 0 && v13 != 0 && (*(v10) == 0 || v14 == 34) && v19 != 0)\n        {\n            v20 = v15 - 69;\n            if ((v15 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v2) = v20;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0)\n                {\n                    v21 = strchr(v13, 0x30);\n                    if (v21 != 0 && v11[1] != 68)\n                    {\n                        if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 105)\n                        {\n                            v25 = v2;\n                            if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 66)\n                            {\n                                /* goto *((long long *)(rdx<8> * 8 + 4295192)); */\n                            }\n                        }\n                        else\n                        {\n                            v23 = 0;\n                            v22 = 0x400;\n                            v24 = v11[2] == 66;\n                            v40 = rsi<8> * 2 + 1;\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v8) == v43 && v11[0] != 0 && v13 != 0 && v18 != 0 || *(v8) != v43 && v11[0] != 0 && v13 != 0 && (*(v10) == 0 || v14 == 34) && v19 != 0) && (v15 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0 && v21 == 0 || (*(v8) == v43 && v11[0] != 0 && v13 != 0 && v18 != 0 || *(v8) != v43 && v11[0] != 0 && v13 != 0 && (*(v10) == 0 || v14 == 34) && v19 != 0) && (v15 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) == 0 || (*(v8) == v43 && v11[0] != 0 && v13 != 0 && v18 != 0 || *(v8) != v43 && v11[0] != 0 && v13 != 0 && (*(v10) == 0 || v14 == 34) && v19 != 0) && (v15 - 69 & 255) > 47)\n        {\n            v40 = 1;\n            v22 = 0x400;\n        }\n        if (...)\n        {\n            v40 = 2;\n            v22 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v15 - 66;\n            switch (v26)\n            {\n            case 0:\n                if (v17 >= -0x20000000000000 && v17 <= 9007199254740991)\n                {\n                    v17 *= 0x400;\n                    break;\n                }\n            case 3:\n                v41 = v22;\n                v28 = (-1 CONCAT 0x8000000000000000) % v22;\n                v42 = v28;\n            case 5: case 37:\n                v47 = v22;\n                v30 = (-1 CONCAT 0x8000000000000000) % v22;\n                v48 = v30;\n                v49 = 3;\n                v44 = 0;\n                do\n                {\n                    if (v17 < v48)\n                    {\n                        v17 = 0x8000000000000000;\n                        v44 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v41 >= v17)\n                    {\n                        v17 = v47 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v44 = 1;\n                    }\n                    v56 = v49;\n                    v49 -= 1;\n                }\n                while (v56 != 1);\n            case 9: case 41:\n                v51 = v22;\n                v50 = (-1 CONCAT 0x8000000000000000) % v22;\n                if (v17 >= v50)\n                {\n                    v57 = (0 CONCAT 9223372036854775807) % v51;\n                }\n            case 11: case 43:\n                v51 = v22;\n                v31 = (-1 CONCAT 0x8000000000000000) % v22;\n                v52 = v31;\n                if (v17 >= v52)\n                {\n                    v57 = (0 CONCAT 9223372036854775807) % v51;\n                    if (v17 <= (0 CONCAT 9223372036854775807) % v51)\n                    {\n                        v17 = v51 * v17;\n                        if (v17 >= v52 && v57 >= v17)\n                        {\n                            v17 = v51 * v17;\n                            break;\n                        }\n                    }\n                }\n            case 14:\n                v53 = v22;\n                v32 = (-1 CONCAT 0x8000000000000000) % v22;\n                v33 = v32;\n                v43 = 5;\n                v44 = 0;\n                do\n                {\n                    if (v33 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v44 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v41 >= v17)\n                    {\n                        v17 = v53 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v44 = 1;\n                    }\n                    v58 = v43;\n                    v43 = (unsigned long long)v43 - 1;\n                }\n                while (v58 != 1);\n            case 18: case 50:\n                v37 = v22;\n                v38 = (-1 CONCAT 0x8000000000000000) % v22;\n                v39 = v38;\n                v43 = 4;\n                v44 = 0;\n                do\n                {\n                    if (v39 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v44 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v41 >= v17)\n                    {\n                        v17 = v37 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v44 = 1;\n                    }\n                    v60 = v43;\n                    v43 = (unsigned long long)v43 - 1;\n                }\n                while (v60 != 1);\n            case 23:\n                v34 = v22;\n                v35 = (-1 CONCAT 0x8000000000000000) % v22;\n                v36 = v35;\n                v43 = 8;\n                v44 = 0;\n                do\n                {\n                    if (v36 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v44 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v41 >= v17)\n                    {\n                        v17 = v34 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v44 = 1;\n                    }\n                    v59 = v43;\n                    v43 = (unsigned long long)v43 - 1;\n                }\n                while (v59 != 1);\n            case 24:\n                v45 = v22;\n                v29 = (-1 CONCAT 0x8000000000000000) % v22;\n                v46 = v29;\n                v43 = 7;\n                v44 = 0;\n                do\n                {\n                    if (v46 > v17)\n                    {\n                        v17 = 0x8000000000000000;\n                        v44 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v41 >= v17)\n                    {\n                        v17 = v45 * v17;\n                    }\n                    else\n                    {\n                        v17 = 9223372036854775807;\n                        v44 = 1;\n                    }\n                    v55 = v43;\n                    v43 = (unsigned long long)v43 - 1;\n                }\n                while (v55 != 1);\n                v16 = (unsigned int)v16 | v44;\n                break;\n            case 33:\n                break;\n            case 53:\n                if (!(v17 >= 0xc000000000000000))\n                {\n                    v17 = 0x8000000000000000;\n                    v16 = 1;\n                    break;\n                    v61 = &v11[v40];\n                    *(v8) = v61;\n                    v16 = (unsigned int)(*(v61) != 0? v16 | 2 : (unsigned int)r12<8>);\n                }\n                else if (v17 <= 4611686018427387903)\n                {\n                    v17 *= 2;\n                    break;\n                }\n                else\n                {\n                    v17 = 9223372036854775807;\n                    v16 = 1;\n                    break;\n                }\n            default:\n                v16 = (unsigned int)v16 | 2;\n                *(v1) = v17;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v40 = 1;\n        v51 = 0x400;\n        v50 = -0x20000000000000;\n        v40 = 1;\n        v45 = 0x400;\n        v46 = -0x20000000000000;\n        v40 = 1;\n        v51 = 0x400;\n        v52 = -0x20000000000000;\n        v40 = 1;\n        v40 = 1;\n        if (v17 >= -0x40000000000000 && v17 <= 18014398509481983)\n        {\n            v17 *= 0x200;\n        }\n        v40 = 1;\n        v53 = 0x400;\n        v33 = -0x20000000000000;\n        v40 = 1;\n        v41 = 0x400;\n        v42 = -0x20000000000000;\n        v43 = 6;\n        v44 = 0;\n        do\n        {\n            if (v17 < v42)\n            {\n                v17 = 0x8000000000000000;\n                v44 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v41 >= v17)\n            {\n                v17 = v41 * v17;\n            }\n            else\n            {\n                v17 = 9223372036854775807;\n                v44 = 1;\n            }\n            v54 = v43;\n            v43 = (unsigned long long)v43 - 1;\n        }\n        while (v54 != 1);\n        v40 = 1;\n        v37 = 0x400;\n        v39 = -0x20000000000000;\n        v40 = 1;\n        v47 = 0x400;\n        v48 = -0x20000000000000;\n        v40 = 1;\n        v34 = 0x400;\n        v36 = -0x20000000000000;\n        if ((v17 < 0xc000000000000000 || *(v8) != v43) && (v17 < 0xc000000000000000 || v11[0] == 0 || v13 == 0) && (v17 < 0xc000000000000000 || *(v10) == 0 || v14 == 34))\n        {\n            *(v1) = v17;\n        }\n        v62 = v16;\n        return v62;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4162b0",
            "funcStartAddr": "0x4162b0",
            "funcEndAddr": "0x41630c",
            "decompiledFuncCode": "int sub_4162b0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_4073b0();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (v1 != 0 || ((char)*(v3) & 32) != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_408df0",
            "funcStartAddr": "0x408df0",
            "funcEndAddr": "0x408f83",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    unsigned long long field_38;\n    unsigned long long field_40;\n    char padding_48[16];\n    unsigned long long field_58;\n    char padding_60[24];\n    unsigned long long field_78;\n    char padding_80[16];\n    unsigned int field_90;\n} struct_0;\n\nint sub_408df0()\n{\n    unsigned int v0;  // [bp-0x6c]\n    char v1;  // [bp-0x68]\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned int *v5;  // rbp\n    unsigned long v6;  // r12\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long long v9;  // rcx\n    char *v10;  // rdi\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned int|char * v13;  // rdx\n    char *v14;  // rcx\n    unsigned long long v15;  // rcx\n    unsigned int *v16;  // rsi\n    unsigned int *v17;  // rdi\n    unsigned int *v18;  // rdx\n    unsigned long long v19;  // rcx\n\n    v4 = v3;\n    v5 = v3->field_30;\n    v6 = (v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58);\n    if ((v3->field_40 <= v3->field_58? v3->field_40 : v3->field_58) > v3->field_30)\n    {\n        while (true)\n        {\n            v10 = v4->field_78;\n            v7 = v4->field_20;\n            v8 = v6 + -0x1 * v5;\n            if (v4->field_90 > 0 && v4->field_78 != 0)\n            {\n                v11 = 0;\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    while (true)\n                    {\n                        v9 = v10[(unsigned long long)(char)*(&((char *)v5)[v4->field_28 + v11 + v4->field_0])];\n                        *(&((char *)v5)[v11 + v4->field_8]) = v10[(unsigned long long)(char)*(&((char *)v5)[v4->field_28 + v11 + v4->field_0])];\n                        *((unsigned long long *)&v1) = v9;\n                        if (v4->field_90 > (unsigned int)(v11 + 1))\n                        {\n                            v11 += 1;\n                            if (v8 == v11)\n                            {\n                                break;\n                            }\n                            v10 = v4->field_78;\n                        }\n                    }\n                }\n            }\n            v12 = sub_4083e0();\n            if (v12 - 1 <= -3)\n            {\n                v13 = (unsigned long long)v0;\n                if (v12 == -2)\n                {\n                    v12 = v4->field_58;\n                    if (v4->field_40 < v4->field_58)\n                    {\n                        v4->field_20 = v7;\n                    }\n                }\n            }\n            if (v12 - 1 > -3 || v12 == -2 && v4->field_40 >= v4->field_58)\n            {\n                v14 = v4->field_78;\n                v13 = (unsigned long long)(char)*(&((char *)v5)[v4->field_28 + v4->field_0]);\n                v0 = (char)*(&((char *)v5)[v4->field_28 + v4->field_0]);\n                if (v4->field_78 != 0)\n                {\n                    v13 = (char)*((char *)(v14 + v13));\n                    v0 = v13;\n                }\n                v4->field_20 = v7;\n                v12 = 1;\n            }\n            if (v4->field_40 >= v4->field_58 || v12 != -2 || v12 - 1 > -3)\n            {\n                v15 = v4->field_10;\n                v16 = (char *)v5 + 1;\n                v17 = v5 * 4;\n                *((char **)(v4->field_10 + v5 * 4)) = v13;\n                v5 = (char *)v5 + v12;\n                if (v5 < v5)\n                {\n                    v18 = &((unsigned int *)(v15 + (char *)v17))[1];\n                    v19 = v15 + v5 * 4;\n                    do\n                    {\n                        *(v18) = -1;\n                        v18 = &v18[1];\n                    }\n                    while (v19 != v18);\n                    if (v5 >= v6)\n                    {\n                        break;\n                    }\n                }\n                else\n                {\n                    v5 = v16;\n                }\n            }\n        }\n    }\n    v4->field_30 = v5;\n    v4->field_38 = v5;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_4076f0",
            "funcStartAddr": "0x4076f0",
            "funcEndAddr": "0x407cee",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_418ee8;\nextern unsigned int g_418f08;\nextern unsigned int g_418f38;\nextern unsigned int g_418f58;\nextern unsigned int g_418f88;\nextern unsigned long long stderr;\n\nint sub_4076f0()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long *|unsigned long long v18;  // rbx\n    unsigned int|unsigned long|unsigned long long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while ((char)v15 != 0 && v15 != 61);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 0 || *(v9->field_20) == 61)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v21 != 0 || v22 != v16)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0 || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)))\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x418ee8, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x418f08, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 += 32;\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v21 == 0) && (*(v18) == 0 || v22 == v16) && (v21 == 0 || v4 == 0) && (v21 == 0 || v1 == 0) && (v4 == 0 || v22 == v16) && (v1 == 0 || v22 == v16))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x418f88, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x418f58, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if (*(v14) == 0 && (unsigned int)((unsigned long long)v9->field_0 + 1) < v24 || *(v14) == 0 && v31 != 1 || *(v14) != 0 && v31 != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x418f38, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_4066b0",
            "funcStartAddr": "0x4066b0",
            "funcEndAddr": "0x4066d8",
            "decompiledFuncCode": "int sub_4066b0()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4064b0();\n}\n"
        },
        {
            "funcName": "sub_410700",
            "funcStartAddr": "0x410700",
            "funcEndAddr": "0x4109ff",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[152];\n    struct struct_2 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_1;\n\ntypedef struct struct_3 {\n    char padding_0[152];\n    unsigned long long field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_3;\n\nint sub_410700()\n{\n    unsigned long v0;  // [bp-0xa8]\n    unsigned int|unsigned long long v1;  // [bp-0x90]\n    unsigned long long *v2;  // [bp-0x88]\n    unsigned int v3;  // [bp-0x7c]\n    unsigned long v4;  // [bp-0x78]\n    unsigned long long v5;  // [bp-0x70]\n    unsigned long v6;  // [bp-0x68]\n    unsigned long v7;  // [bp-0x60]\n    unsigned long long v8;  // [bp-0x58]\n    unsigned long long v9;  // [bp-0x50]\n    unsigned long long *v10;  // [bp-0x48]\n    struct_1 *v12;  // rdi\n    struct_3 *v13;  // r13\n    unsigned long long v14[6];  // rsi\n    unsigned long long v15[7];  // r14\n    unsigned long long v17;  // rax\n    unsigned long long *v18;  // rax\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rax\n    unsigned int|unsigned long v25;  // rax\n    unsigned long v26;  // rbx\n\n    v13 = v12;\n    v26 = v14[3];\n    v8 = 1;\n    v9 = 1;\n    v10 = malloc(0x8);\n    if (v10 != 0)\n    {\n        *((unsigned long long [6])v10) = v14[2];\n        v25 = sub_412190();\n        if ((unsigned int)v25 == 0)\n        {\n            v3 = 0;\n            v7 = &v14[6];\n            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n            {\n                while (true)\n                {\n                    v2 = v26 * 8;\n                    if (*((long long *)(*(v14) + (v26 << 3))) != 0)\n                    {\n                        v3 = 0;\n                    }\n                    else\n                    {\n                        v3 += 1;\n                    }\n                    if (*((long long *)(*(v14) + (v26 << 3))) == 0 && v12->field_e0 < v3 || v12->field_e0 < 0 && *((long long *)(*(v14) + (v26 << 3))) != 0)\n                    {\n                        memset(*(v14), 0x0, v2);\n                        free(v10);\n                        return 0;\n                    }\n                    if (*((long long *)(*(v14) + (v26 << 3))) == 0 && v12->field_e0 >= v3 || v12->field_e0 >= 0 && *((long long *)(*(v14) + (v26 << 3))) != 0)\n                    {\n                        v26 -= 1;\n                        v9 = 0;\n                        v15 = *((long long *)&((char *)v2)[v13->field_b8 + -8]);\n                        if (v15[5] > 0 && *((long long *)&((char *)v2)[v13->field_b8 + -8]) != 0)\n                        {\n                            v1 = 0;\n                            while (true)\n                            {\n                                if ((*((char *)(*(v12->field_98) + (*((long long *)(v15[6] + (v1 << 3))) << 4) + 10)) & 16) != 0)\n                                {\n                                    v5 = *((long long *)(v15[6] + v1 * 8)) * 16;\n                                    v6 = v13->field_98;\n                                    *((unsigned long long [6])&v4) = v14[3];\n                                    v17 = sub_40e8a0();\n                                    if ((unsigned int)v17 > 0)\n                                    {\n                                        v18 = v17 + v14[3] - 1;\n                                        if (v4 >= v18)\n                                        {\n                                            v19 = *((long long *)(*(v14) + v18 * 8));\n                                            if (v19 != 0)\n                                            {\n                                                v4 = v5;\n                                                v20 = sub_40a120();\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((*((char *)(*(v12->field_98) + (*((long long *)(v15[6] + (v1 << 3))) << 4) + 10)) & 16) == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x18<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) && (unsigned int)v17 <= 0 || v19 == 0 && v4 >= v18 && (unsigned int)v17 > 0 || v20 == 0 && v4 >= v18 && (unsigned int)v17 > 0)\n                                {\n                                    v21 = sub_40bf40();\n                                }\n                                if (...)\n                                {\n                                    v22 = sub_40a120();\n                                }\n                                if (...)\n                                {\n                                    *((unsigned long long [6])&v0) = v14[3] - 1;\n                                    v23 = sub_40a3b0();\n                                }\n                                if (...)\n                                {\n                                    v24 = sub_408b10();\n                                    if (v24 == 0)\n                                    {\n                                        v25 = 12;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    v1 += 1;\n                                    if (v1 >= v15[5])\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if (v21 == 0 || *((long long *)&((char *)v2)[*(v14)]) == 0 || v22 == 0 || v24 != 0 || v23 != 0 && v14[5] != 0)\n                            {\n                                v25 = sub_412190();\n                                if ((unsigned int)v25 != 0)\n                                {\n                                    break;\n                                }\n                            }\n                            else if (v24 == 0 && (v23 == 0 || v14[5] == 0))\n                            {\n                                *((unsigned long *)&v1) = v25;\n                                free(v10);\n                                return v1;\n                            }\n                        }\n                        v25 = sub_412190();\n                        if (v14[3] - 1 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if ((unsigned int)v25 == 0 && (v15[5] <= 0 || *((long long *)&((char *)v2)[v13->field_b8 + -8]) == 0))\n                {\n                    v25 = 0;\n                }\n                else\n                {\n                    *((unsigned long *)&v1) = v25;\n                    free(v10);\n                    return v1;\n                }\n            }\n            v25 = 0;\n        }\n        *((unsigned long *)&v1) = v25;\n        free(v10);\n        return v1;\n    }\n    return 12;\n}\n"
        },
        {
            "funcName": "sub_412e90",
            "funcStartAddr": "0x412e90",
            "funcEndAddr": "0x412e9e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_412e90()\n{\n    struct_0 *v1;  // rbx\n\n    v1->field_8 = 20;\n}\n"
        },
        {
            "funcName": "sub_412190",
            "funcStartAddr": "0x412190",
            "funcEndAddr": "0x41294c",
            "decompiledFuncCode": "typedef struct struct_5 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_6 *field_10;\n} struct_5;\n\ntypedef struct struct_7 {\n    char padding_0[16];\n    unsigned long long field_10;\n    struct struct_6 *field_18;\n} struct_7;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    char field_8;\n} struct_3;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n} struct_4;\n\ntypedef struct struct_8 {\n    char padding_0[104];\n    char field_68;\n} struct_8;\n\nint sub_412190()\n{\n    void tmp_43;  // tmp #43\n    void tmp_14;  // tmp #14\n    unsigned long v0;  // [bp-0xe8]\n    unsigned int|unsigned long long [28] v1;  // [bp-0xd0]\n    struct_7 *v2;  // [bp-0xc8]\n    unsigned long long v3;  // [bp-0xc0]\n    unsigned long v4;  // [bp-0xb8]\n    unsigned long v5;  // [bp-0xb0]\n    unsigned long long v6;  // [bp-0xa8]\n    unsigned long long v7;  // [bp-0xa0]\n    unsigned long long v8;  // [bp-0x98]\n    unsigned long long v9;  // [bp-0x90]\n    unsigned int v10;  // [bp-0x7c]\n    unsigned int|void|unsigned long long v11;  // [bp-0x78]\n    void|unsigned long long v12;  // [bp-0x68]\n    unsigned long long *v13;  // [bp-0x60]\n    void v14;  // [bp-0x58]\n    unsigned long v15;  // [bp-0x50]\n    void *v16;  // [bp-0x48]\n    unsigned long long v18;  // rdx\n    unsigned long long v20[3];  // rcx\n    struct_5 *v21;  // rbp\n    unsigned long long v22;  // rsi\n    unsigned long long v23[28];  // rdi\n    unsigned long long *v24;  // r12\n    unsigned long long v25;  // rdx\n    struct struct_8 **v26;  // rcx\n    unsigned long long v27;  // rdi\n    unsigned long long *v29;  // rbx\n    unsigned long long v30[10];  // r15\n    unsigned long long v31;  // r13\n    unsigned long long v32;  // rax\n    unsigned long long v33[4];  // rdx\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rsi\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // r13\n    unsigned long|unsigned long long v38;  // r9\n    unsigned long long v39;  // r11\n    unsigned long long *v40;  // rcx\n    unsigned long long v41;  // rsi\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rdi\n    unsigned long long *v44;  // rdx\n    unsigned int v45;  // r13d\n    struct_3 *v46;  // rax\n    unsigned long long v47;  // r13\n    unsigned long long v48;  // rbx\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rax\n    unsigned long long v51;  // r15\n    unsigned long long v52;  // rbx\n    unsigned long long *v53;  // r13\n    unsigned int|unsigned long|unsigned long long v54;  // rax\n    unsigned long long v55;  // r12\n    unsigned long long v56;  // rsi\n    unsigned long long v57;  // rax\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // r8\n    unsigned long long *v62;  // r13\n    unsigned long long v63;  // r15\n    unsigned long long v64;  // r14\n    unsigned long long v65;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // r12\n    struct_4 *v68;  // rbx\n    unsigned long long v69;  // r10\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    unsigned long long v72;  // rax\n    unsigned long long v74;  // rdx\n    unsigned long long v76;  // rdx\n    unsigned long long v78;  // rax\n\n    v21 = v20;\n    tmp_43 = v18 * 8;\n    v52 = v22;\n    v24 = v23[19];\n    v25 = v20[1];\n    v3 = tmp_43;\n    v26 = tmp_43 + v23[23];\n    v1[0] = v23;\n    v27 = *((long long *)(tmp_43 + v23[23]));\n    v10 = 0;\n    v2 = v27;\n    if (v2 != 0)\n    {\n        if (v25 == 0)\n        {\n            *((long long *)(*((long long *)v22) + v6 * 8)) = 0;\n            v54 = 0;\n        }\n        else\n        {\n            v11 = 0;\n            v30 = (unsigned long long)(unsigned int)sub_40b6d0();\n            v54 = v11;\n            if (v11 == 0)\n            {\n                v31 = v30[7];\n                v4 = &v30[7];\n                if (v30[7] == 0)\n                {\n                    tmp_14 = v21->field_8;\n                    v30[8] = 0;\n                    v30[7] = tmp_14;\n                    v32 = malloc(tmp_14 * 8);\n                    v30[9] = v32;\n                    if (v32 != 0)\n                    {\n                        v11 = 0;\n                        if (v21->field_8 > 0)\n                        {\n                            do\n                            {\n                                v11 = sub_40a660();\n                                v31 += 1;\n                            }\n                            while (v31 < v21->field_8 && v11 == 0);\n                            if (v11 == 0)\n                            {\n                                v5 = &v2->padding_0[8];\n                                v54 = sub_40abd0();\n                                v10 = v54;\n                            }\n                            else\n                            {\n                                v54 = 12;\n                            }\n                        }\n                    }\n                    if ((v32 == 0 || v21->field_8 > 0) && (v32 == 0 || (unsigned int)v54 != 0))\n                    {\n                        v54 = 12;\n                    }\n                }\n                if (v30[7] != 0 || v32 != 0)\n                {\n                    if (v21->field_8 <= 0 || v30[7] != 0 || (unsigned int)v54 != 0)\n                    {\n                        v5 = &v2->padding_0[8];\n                        v54 = sub_40abd0();\n                        v10 = v54;\n                    }\n                    if ((unsigned int)v54 == 0 && (v21->field_8 <= 0 || v30[7] != 0))\n                    {\n                        if (*((long long *)(v22 + 40)) != 0)\n                        {\n                            *((unsigned long long [28])&v4) = v1[27];\n                            if (*((long long *)(v22 + 40)) > 0)\n                            {\n                                v51 = 0;\n                                while (true)\n                                {\n                                    v33 = v4 + *((long long *)(*((long long *)(v52 + 48)) + v51 * 8)) * 40;\n                                    if (v6 <= v33[1] && v6 > *((long long *)(v4 + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) << 2) << 3) + 16)))\n                                    {\n                                        v34 = *(v24);\n                                        v35 = v21->field_8;\n                                        v36 = *((long long *)(*(v24) + *(v33) * 16));\n                                        if (v6 != v33[3])\n                                        {\n                                            v37 = 0;\n                                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v6 = v52;\n                                                v42 = v36;\n                                                while (true)\n                                                {\n                                                    v46 = v34 + v21->field_10[v37] * 16;\n                                                    if (v42 == v46->field_0 && (unsigned int)v46->field_8 - 8 <= 1)\n                                                    {\n                                                        v54 = sub_40c930();\n                                                        if ((unsigned int)v54 != 0)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if ((unsigned int)v54 == 0)\n                                                        {\n                                                            v37 += 1;\n                                                        }\n                                                    }\n                                                    if (v42 != v46->field_0 || (unsigned int)v46->field_8 - 8 > 1)\n                                                    {\n                                                        v37 += 1;\n                                                    }\n                                                    if ((unsigned int)v54 == 0 || v42 != v46->field_0 || (unsigned int)v46->field_8 - 8 > 1)\n                                                    {\n                                                        if ((v42 == v46->field_0 || v37 < v21->field_8) && ((unsigned int)v46->field_8 - 8 <= 1 || v37 < v21->field_8) && (v37 < v21->field_8 || v42 != v46->field_0 || (unsigned int)v46->field_8 - 8 > 1))\n                                                        {\n                                                            v34 = *(v24);\n                                                        }\n                                                        if ((v42 == v46->field_0 || v37 >= v21->field_8) && ((unsigned int)v46->field_8 - 8 <= 1 || v37 >= v21->field_8) && (v42 != v46->field_0 || (unsigned int)v46->field_8 - 8 > 1 || v37 >= v21->field_8))\n                                                        {\n                                                            v52 = v6;\n                                                        }\n                                                    }\n                                                }\n                                                if ((v42 == v46->field_0 || v37 >= v21->field_8) && ((unsigned int)v46->field_8 - 8 <= 1 || v37 >= v21->field_8) && ((unsigned int)v54 == 0 || v42 != v46->field_0 || (unsigned int)v46->field_8 - 8 > 1) && (v42 != v46->field_0 || (unsigned int)v46->field_8 - 8 > 1 || v37 >= v21->field_8))\n                                                {\n                                                    v51 += 1;\n                                                    if (v51 >= *((long long *)(v52 + 40)))\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                else if (v42 == v46->field_0 && (unsigned int)v46->field_8 - 8 <= 1)\n                                                {\n                                                    return v54;\n                                                }\n                                            }\n                                        }\n                                        else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                        {\n                                            v38 = -1;\n                                            v39 = &v21->field_10[v35];\n                                            v40 = v21->field_10;\n                                            v41 = -1;\n                                            while (true)\n                                            {\n                                                v43 = *(v40);\n                                                v44 = *(v40) * 16 + v34;\n                                                v45 = (char)*((char *)(*(v40) * 16 + v34 + 8));\n                                                if (*((char *)((*(v40) << 4) + v34 + 8)) != 8)\n                                                {\n                                                    if (v45 == 9)\n                                                    {\n                                                        v38 = (v42 == *(v44)? v43 : r9<8>);\n                                                    }\n                                                    v40 = &v40[1];\n                                                    if (v39 == v40)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v41 = (v42 == *(v44)? v43 : rsi<8>);\n                                                    v40 = &v40[1];\n                                                    if (v39 == v40)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            v47 = v38;\n                                            v6 = v38;\n                                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v54 = sub_40c930();\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            if (((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (unsigned int)v54 == 0) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || v21->field_8 > 0) && (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) || !((char)(v6 - 0 >> 63))))\n                                            {\n                                                v7 = v52;\n                                                v48 = 0;\n                                                while (true)\n                                                {\n                                                    v49 = sub_40a120();\n                                                    if (v49 == 0)\n                                                    {\n                                                        v50 = sub_40a120();\n                                                        if (v50 == 0)\n                                                        {\n                                                            v54 = sub_40c930();\n                                                        }\n                                                    }\n                                                    if (v50 != 0 || v49 != 0)\n                                                    {\n                                                        v48 += 1;\n                                                    }\n                                                    if (v21->field_8 <= v48 && ((unsigned int)v54 == 0 || v50 != 0 || v49 != 0))\n                                                    {\n                                                        v52 = v7;\n                                                    }\n                                                }\n                                                if (v50 == 0 && v49 == 0 && (unsigned int)v54 != 0)\n                                                {\n                                                    return v54;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (char)(v6 - 0 >> 63) || v6 <= *((long long *)(v4 + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) + (*((long long *)(*((long long *)(v52 + 48)) + (v51 << 3))) << 2) << 3) + 16)) || v21->field_8 <= 0 || v51 >= *((long long *)(v52 + 40)) || v6 > v33[1])\n                                {\n                                    v10 = 0;\n                                }\n                                else\n                                {\n                                    return v54;\n                                }\n                            }\n                            v10 = 0;\n                        }\n                        v53 = v3 + *((long long *)v52);\n                        *(v53) = (unsigned int)sub_40b6d0();\n                        v54 = v10;\n                        if (v10 == 0)\n                        {\n                            v54 = 0;\n                        }\n                    }\n                }\n            }\n        }\n        if (v10 == 0 && v11 == 0 && (unsigned int)v54 == 0 && v25 != 0 && (v21->field_8 <= 0 || v30[7] != 0) && (v30[7] != 0 || v32 != 0) && (*((char *)(*((long long *)(v3 + v1[23])) + 104)) & 64) != 0 || v25 == 0 && (*(v26)->field_68 & 64) != 0)\n        {\n            v55 = 0;\n            v56 = v1[25];\n            for (v57 = v1[25]; v55 < v57; v57 = v59)\n            {\n                if (v6 > *((long long *)(v1[27] + (((v55 + v57 >> 63) + v55 + v57 >> 1) + ((v55 + v57 >> 63) + v55 + v57 >> 1 << 2) << 3) + 8)))\n                {\n                    v61 = v59;\n                    v59 = v57;\n                }\n                else\n                {\n                    for (v59 = (v55 + v57 >> 63) + v55 + v57 >> 1; 0 < v59; v59 = v60)\n                    {\n                        v60 = (0 + v59 >> 63) + 0 + v59 >> 1;\n                        v61 = (0 + v59 >> 63) + 0 + v59 >> 1;\n                        if (v6 > *((long long *)(v1[27] + (((0 + v59 >> 63) + 0 + v59 >> 1) + ((0 + v59 >> 63) + 0 + v59 >> 1 << 2) << 3) + 8)))\n                        {\n                            break;\n                        }\n                    }\n                    if (0 < v59)\n                    {\n                        v55 = v61 + 1;\n                    }\n                }\n                v55 = v61 + 1;\n            }\n            v7 = v55 * 40;\n            if (v6 == *((long long *)(v1[27] + (v55 + (v55 << 2) << 3) + 8)) && v55 != -1)\n            {\n                v62 = v1[19];\n                v11 = 0;\n                if (v2->field_10 > 0)\n                {\n                    v6 = v18;\n                    v63 = 0;\n                    v64 = v52;\n                    v8 = v55;\n                    while (true)\n                    {\n                        v65 = v2->field_18[v63];\n                        v66 = (char)*((char *)(v2->field_18[v63] * 16 + *(v62) + 8));\n                        if (v66 == 4 && (v2->field_18[v63] != *((long long *)(v64 + 16)) || v6 != *((long long *)(v64 + 24))))\n                        {\n                            v9 = v63;\n                            v67 = v8;\n                            v68 = v7 + v1[27];\n                            v5 = v12 * 24;\n                            v4 = v12 * 8;\n                            while (true)\n                            {\n                                if (v12 == v68->field_0)\n                                {\n                                    v69 = v6 + v68->field_18 - v68->field_10;\n                                    if (v69 <= *((long long *)(v64 + 24)) && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10)\n                                    {\n                                        v70 = sub_40a120();\n                                        if (v70 != 0)\n                                        {\n                                            v0 = v69;\n                                            v71 = sub_40a3b0();\n                                            if ((long long)v11 == 0 && v71 == 0)\n                                            {\n                                                *((int128_t *)&v11) = *((int128_t *)v64);\n                                                *((int128_t *)&v12) = *((int128_t *)(v64 + 16));\n                                                *((int128_t *)&v14) = *((int128_t *)(v64 + 32));\n                                                v16 = *((long long *)(v64 + 48));\n                                                v54 = sub_40b1c0();\n                                            }\n                                        }\n                                    }\n                                }\n                                if (v69 <= *((long long *)(v64 + 24)) && v12 == v68->field_0 && v70 != 0 && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 == 0 && (unsigned int)v54 == 0 || v69 <= *((long long *)(v64 + 24)) && v12 == v68->field_0 && v70 != 0 && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 != 0)\n                                {\n                                    v12 = v65;\n                                    v13 = v6;\n                                    v72 = sub_408b10();\n                                    if (v72 != 0)\n                                    {\n                                        v54 = sub_410700();\n                                        if ((unsigned int)v54 == 0)\n                                        {\n                                            v74 = (long long)v11;\n                                            if (*((long long *)(v64 + 8)) != 0)\n                                            {\n                                                v54 = sub_40b8c0();\n                                                if ((unsigned int)v54 == 0)\n                                                {\n                                                    v74 = (long long)v11;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v54 = 12;\n                                    }\n                                }\n                                if (...)\n                                {\n                                    break;\n                                }\n                                if ((v69 <= *((long long *)(v64 + 24)) && v12 == v68->field_0 && v70 != 0 && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 == 0 && (unsigned int)v54 == 0 || v69 <= *((long long *)(v64 + 24)) && v12 == v68->field_0 && v70 != 0 && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 != 0) && v72 != 0 && (unsigned int)v54 == 0 && *((long long *)(v64 + 8)) != 0 && (unsigned int)v54 == 0 || (v69 <= *((long long *)(v64 + 24)) && v12 == v68->field_0 && v70 != 0 && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 == 0 && (unsigned int)v54 == 0 || v69 <= *((long long *)(v64 + 24)) && v12 == v68->field_0 && v70 != 0 && *((long long *)(*((long long *)v64) + (v69 << 3))) != 0 && v68->field_18 != v68->field_10 && v71 == 0 && (long long)v11 != 0) && v72 != 0 && (unsigned int)v54 == 0 && *((long long *)(v64 + 8)) == 0)\n                                {\n                                    *((long long *)(v74 + v3)) = *((long long *)((long long)v11 + v3));\n                                    v76 = (unsigned long long)(unsigned int)sub_40a120() - 1;\n                                    if (!((char)(v76 - 1 >> 63)) && (long long)(&v14)[8] > v76)\n                                    {\n                                        v15 = (long long)(&v14)[8] - 1;\n                                        sub_40a290();\n                                    }\n                                    v68 = v1[27] + v67 * 40;\n                                }\n                                if (...)\n                                {\n                                    v67 += 1;\n                                    v78 = (char *)&v68[1].field_0 + 7;\n                                    if (v68->field_20 != 0)\n                                    {\n                                        v68 = v78;\n                                    }\n                                }\n                            }\n                            if (...)\n                            {\n                                v63 = 1;\n                            }\n                            else if (v71 == 0 && ((long long)v11 == 0 || v72 == 0 || (unsigned int)v54 != 0 || (unsigned int)v54 != 0) && ((long long)v11 == 0 || v72 == 0 || *((long long *)(v64 + 8)) != 0 || (unsigned int)v54 != 0) && (v72 == 0 || (unsigned int)v54 != 0 || (unsigned int)v54 != 0 || (unsigned int)v54 != 0) && (v72 == 0 || (unsigned int)v54 != 0 || *((long long *)(v64 + 8)) != 0 || (unsigned int)v54 != 0))\n                            {\n                                *((unsigned long *)&v1) = v54;\n                                free(v16);\n                                v54 = v1;\n                            }\n                            else if (v71 == 0 && ((long long)v11 == 0 || v72 == 0 || (unsigned int)v54 != 0 || (unsigned int)v54 != 0) && ((long long)v11 == 0 || v72 == 0 || *((long long *)(v64 + 8)) != 0 || (unsigned int)v54 != 0) && (v72 == 0 || (unsigned int)v54 != 0 || (unsigned int)v54 != 0 || (unsigned int)v54 != 0) && (v72 == 0 || (unsigned int)v54 != 0 || *((long long *)(v64 + 8)) != 0 || (unsigned int)v54 != 0))\n                            {\n                                return v54;\n                            }\n                        }\n                        if (1 >= v2->field_10 || v66 != 4 || v2->field_18[v63] == *((long long *)(v64 + 16)) && v6 == *((long long *)(v64 + 24)))\n                        {\n                            v63 = 1;\n                            if ((long long)v11 == 0)\n                            {\n                                break;\n                            }\n                            v54 = 0;\n                        }\n                        *((unsigned long *)&v1) = v54;\n                        free(v16);\n                        v54 = v1;\n                    }\n                    if (1 >= v2->field_10)\n                    {\n                        v54 = 0;\n                    }\n                    else if (v66 == 4 && v2->field_18[v63] != *((long long *)(v64 + 16)) || v66 == 4 && v6 != *((long long *)(v64 + 24)) || (long long)v11 != 0 && 1 >= v2->field_10)\n                    {\n                        return v54;\n                    }\n                }\n            }\n            v54 = 0;\n        }\n    }\n    else\n    {\n        v29 = v3 + *((long long *)v22);\n        if (v25 == 0)\n        {\n            *((long long *)(v3 + *((long long *)v22))) = 0;\n            v54 = 0;\n        }\n        else\n        {\n            *(v29) = (unsigned int)sub_40b6d0();\n            v54 = v10;\n        }\n    }\n    return v54;\n}\n"
        },
        {
            "funcName": "sub_408340",
            "funcStartAddr": "0x408340",
            "funcEndAddr": "0x408358",
            "decompiledFuncCode": "int sub_408340()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_4082e0();\n}\n"
        },
        {
            "funcName": "sub_403480",
            "funcStartAddr": "0x403480",
            "funcEndAddr": "0x403504",
            "decompiledFuncCode": "extern unsigned int g_4169a9;\nextern unsigned long long g_61d448;\nextern unsigned long long g_61d450;\n\nint sub_403480()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v2;  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v3 = fwrite_unlocked(*(v1), 0x1, *(v2), g_61d448);\n    if (v3 == *(v2))\n    {\n        g_61d450 = g_61d450 + v3;\n        return v3;\n    }\n    v4 = (unsigned int)sub_405c30();\n    error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4169a9, 0x5));\n    g_61d448 = 0;\n    sub_402fb0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405ae0",
            "funcStartAddr": "0x405ae0",
            "funcEndAddr": "0x405af1",
            "decompiledFuncCode": "int sub_405ae0()\n{\n}\n"
        },
        {
            "funcName": "sub_402fb0",
            "funcStartAddr": "0x402fb0",
            "funcEndAddr": "0x402ff6",
            "decompiledFuncCode": "extern unsigned int g_61d3a0;\nextern char g_61d432;\n\nint sub_402fb0()\n{\n    char v0;  // [bp-0x88]\n\n    sub_403000();\n    sigprocmask(0x0, 0x61d3a0, (unsigned int)&v0);\n    if (g_61d432 != 0)\n    {\n        sub_402f10();\n    }\n    sigprocmask(0x2, (unsigned int)&v0, 0x0);\n    exit(0x1); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405810",
            "funcStartAddr": "0x405810",
            "funcEndAddr": "0x40581f",
            "decompiledFuncCode": "extern int512_t g_61d5c0;\n\nint sub_405810()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_61d5c0 : v1));\n}\n"
        },
        {
            "funcName": "sub_405a40",
            "funcStartAddr": "0x405a40",
            "funcEndAddr": "0x405ad5",
            "decompiledFuncCode": "extern struct_0 *g_61d318;\nextern unsigned long long g_61d320;\nextern unsigned long long g_61d328;\nextern unsigned int g_61d330;\nextern unsigned long long g_61d4c0;\n\nint sub_405a40()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_61d330;\n    if (g_61d330 > 1)\n    {\n        v2 = &g_61d318[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_61d318[(unsigned long long)(g_61d330 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_61d318->field_8 != 6411456)\n    {\n        v1 = free(g_61d318->field_8);\n        g_61d320 = 0x100;\n        g_61d328 = &g_61d4c0;\n    }\n    if (g_61d318 != 6411040)\n    {\n        v1 = free(g_61d318);\n        g_61d318 = &g_61d320;\n    }\n    g_61d330 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_406580",
            "funcStartAddr": "0x406580",
            "funcEndAddr": "0x4065f8",
            "decompiledFuncCode": "int sub_406580() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4064d0",
            "funcStartAddr": "0x4064d0",
            "funcEndAddr": "0x4064f1",
            "decompiledFuncCode": "int sub_4064d0()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_403510(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_404210",
            "funcStartAddr": "0x404210",
            "funcEndAddr": "0x404254",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[20];\n    char field_14;\n} struct_0;\n\nint sub_404210()\n{\n    struct_0 *v1;  // rsi\n    char *v2;  // rcx\n    unsigned long long v5;  // rdi\n\n    v2 = &v1->field_14;\n    v1->field_14 = 0;\n    while (true)\n    {\n        v2 = &v2[-1];\n        *(v2) = (unsigned int)(rdi<8> - ((unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3) * 10) + 48;\n        if (rdi<8> <= 9)\n        {\n            break;\n        }\n        v5 = (unsigned long long)(rdi<8> * 14757395258967641293 >> 64) >> 3;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_412ef8",
            "funcStartAddr": "0x412ef8",
            "funcEndAddr": "0x412f16",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_412ef8()\n{\n    unsigned int v1;  // r15d\n    unsigned long long v2;  // r15\n    struct_0 *v3;  // rbx\n\n    v2 = v1 & 0x8400;\n    v3->field_8 = 10;\n}\n"
        },
        {
            "funcName": "sub_40f250",
            "funcStartAddr": "0x40f250",
            "funcEndAddr": "0x40fabc",
            "decompiledFuncCode": "int sub_40f250() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_408d40",
            "funcStartAddr": "0x408d40",
            "funcEndAddr": "0x408d66",
            "decompiledFuncCode": "int sub_408d40()\n{\n    char v1;  // dil\n    unsigned int v2;  // ebx\n    unsigned long long v4;  // rax\n    unsigned long v5;  // rsi\n    unsigned long v6;  // rbx\n\n    v2 = v1;\n    v4 = btowc((unsigned long long)v1);\n    if ((unsigned int)v4 == -1)\n    {\n        v4 = (unsigned int)(v5 == 0? (unsigned int)v6 : (unsigned int)rax<8>);\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_406500",
            "funcStartAddr": "0x406500",
            "funcEndAddr": "0x406502",
            "decompiledFuncCode": "int sub_406500()\n{\n}\n"
        },
        {
            "funcName": "sub_405df0",
            "funcStartAddr": "0x405df0",
            "funcEndAddr": "0x405e07",
            "decompiledFuncCode": "int sub_405df0()\n{\n}\n"
        },
        {
            "funcName": "sub_4083e0",
            "funcStartAddr": "0x4083e0",
            "funcEndAddr": "0x40844f",
            "decompiledFuncCode": "extern unsigned long long g_41900f;\n\nint sub_4083e0()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    char *|unsigned long long v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_41900f;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_416310() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_40cb60",
            "funcStartAddr": "0x40cb60",
            "funcEndAddr": "0x40d625",
            "decompiledFuncCode": "int sub_40cb60() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_4083c0",
            "funcStartAddr": "0x4083c0",
            "funcEndAddr": "0x4083d8",
            "decompiledFuncCode": "int sub_4083c0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_407d10();\n}\n"
        },
        {
            "funcName": "sub_405a30",
            "funcStartAddr": "0x405a30",
            "funcEndAddr": "0x405a3a",
            "decompiledFuncCode": "int sub_405a30()\n{\n}\n"
        },
        {
            "funcName": "sub_40b240",
            "funcStartAddr": "0x40b240",
            "funcEndAddr": "0x40b3a2",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    struct struct_1 *field_10;\n} struct_0;\n\ntypedef struct struct_2 {\n    uint128_t field_0;\n    unsigned long long field_10;\n} struct_2;\n\nint sub_40b240()\n{\n    unsigned long long v1[3];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3[3];  // rdx\n    unsigned long long v4;  // r15\n    unsigned long long v5[3];  // rdi\n    struct_0 *v7;  // rbp\n    void *v9;  // rax\n    unsigned long long *v10;  // rdi\n    unsigned long long v12;  // r14\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // rdx\n    struct_2 *v15;  // rdi\n    unsigned long long v16;  // rax\n    unsigned long long *v17;  // rsi\n    unsigned long long *v18;  // r9\n    unsigned long long v19;  // rsi\n    unsigned long long v20;  // r8\n    unsigned long long v21;  // cc_dep2\n    unsigned long v22;  // r12\n    unsigned long long v25;  // rdx\n    void *v26;  // rdi\n    unsigned long long v27;  // rbx\n    unsigned long v28;  // rdx\n\n    if (v1 != 0)\n    {\n        v2 = v1[1];\n        if (v3 != 0 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v4 = v3[1];\n            v7 = v3;\n            *(v5) = v1[1] + v3[1];\n            v9 = malloc((v2 + v4) * 8);\n            v5[2] = v5;\n            if (v5 != 0)\n            {\n                v5 = v9;\n                v12 = 0;\n                v13 = 0;\n                v14 = 0;\n                while (true)\n                {\n                    v17 = v1[2] + v14 * 8;\n                    if (v4 > v13)\n                    {\n                        v18 = v7->field_10;\n                        v19 = *(v17);\n                        v12 += 1;\n                        v20 = v7->field_10[v13];\n                        v21 = v7->field_10[v13];\n                        if (v19 <= v7->field_10[v13])\n                        {\n                            *(v10) = v19;\n                            v14 += 1;\n                            v13 += (char)(v19 == v21);\n                        }\n                        else\n                        {\n                            v13 += 1;\n                            *(v10) = v20;\n                        }\n                        v2 = v1[1];\n                        v10 = &v10[1];\n                        v25 = v7->field_8;\n                        if (v13 >= v7->field_8)\n                        {\n                            break;\n                        }\n                        v26 = &v5[v12];\n                        v27 = v25 - v13;\n                        v28 = (v25 - v13) * 8;\n                        v12 += v27;\n                        memcpy(v26, &v18[v13], v28);\n                    }\n                    else\n                    {\n                        v22 = v2 - v14;\n                        v12 += v22;\n                        memcpy(v10, v17, v22 * 8);\n                    }\n                }\n                v5[1] = v12;\n                return 0;\n            }\n            v16 = 12;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || v3[1] <= 0)\n    {\n        v15->field_10 = 0;\n        v16 = 0;\n        v15->field_0 = 0;\n    }\n    if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rdx<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) || v5 == 0 || v3[1] <= 0)\n    {\n        return v16;\n    }\n}\n"
        },
        {
            "funcName": "sub_403510",
            "funcStartAddr": "0x403510",
            "funcEndAddr": "0x40353d",
            "decompiledFuncCode": "extern unsigned int g_4169d1;\n\nint sub_403510()\n{\n    dcgettext(0x0, 0x4169d1, 0x5);\n    error(0x0, 0x0, \"%s\");\n    sub_402fb0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406680",
            "funcStartAddr": "0x406680",
            "funcEndAddr": "0x4066ae",
            "decompiledFuncCode": "int sub_406680()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_403510(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403a40",
            "funcStartAddr": "0x403a40",
            "funcEndAddr": "0x403a61",
            "decompiledFuncCode": "int sub_403a40()\n{\n    unsigned long long v1;  // rax\n\n    while (true)\n    {\n        v1 = sub_403960();\n        if (v1 == 0)\n        {\n            break;\n        }\n        sub_403480();\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4085c0",
            "funcStartAddr": "0x4085c0",
            "funcEndAddr": "0x40862a",
            "decompiledFuncCode": "int sub_4085c0()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rdx\n    unsigned long long v5;  // rdi\n    unsigned long long v6[3];  // rsi\n    unsigned long long v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned long long v9[3];  // rdx\n    unsigned long long v10;  // rax\n    unsigned long long v11[3];  // rbx\n    unsigned long long v12[3];  // rsi\n\n    v2 = v1;\n    v11 = v5;\n    while (true)\n    {\n        v10 = v11[1];\n        if (v11[1] == 0)\n        {\n            v10 = v11[2];\n            if (v11[2] == 0)\n            {\n                v6 = v11;\n                v7 = v3;\n                v8 = r12<8>();\n                if ((unsigned int)v8 != 0)\n                {\n                    break;\n                }\n                while (true)\n                {\n                    v9 = *(v11);\n                    v10 = v9[2];\n                    v11 = v9;\n                    if (*(v11) == 0 || v9[2] != v9 && v9[2] != 0)\n                    {\n                        break;\n                    }\n                    v12 = v11;\n                    v8 = r12<8>();\n                    if ((unsigned int)v8 != 0)\n                    {\n                        break;\n                    }\n                }\n                if (*(v11) != 0)\n                {\n                    v11 = v10;\n                }\n                else\n                {\n                    return v8;\n                }\n            }\n        }\n        v11 = v10;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_412ea0",
            "funcStartAddr": "0x412ea0",
            "funcEndAddr": "0x412ee4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    char field_8;\n} struct_0;\n\nextern int512_t g_800008;\n\nint sub_412ea0()\n{\n    struct_0 *v4;  // rbx\n\n    v4->field_8 = 12;\n    v4->field_0 = 16;\n}\n"
        },
        {
            "funcName": "sub_40b6d0",
            "funcStartAddr": "0x40b6d0",
            "funcEndAddr": "0x40b8a7",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_2;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_a;\n} struct_1;\n\nint sub_40b6d0()\n{\n    void tmp_90;  // tmp #90\n    unsigned long long v1[3];  // rdx\n    unsigned long long v2;  // rbp\n    unsigned int *v3;  // rdi\n    unsigned long long *v4;  // rax\n    unsigned long long v5[3];  // r14\n    unsigned long long v6[18];  // rsi\n    struct_2 *v8;  // rax\n    unsigned long long v9;  // r10\n    unsigned long long v10;  // r11\n    unsigned long long v11;  // r9\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // r15\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rax\n    unsigned long long *v17;  // rsi\n    unsigned long long v18;  // r8\n    unsigned long long v19;  // r9\n    struct_1 *v20;  // rax\n    unsigned int v21;  // edi\n    unsigned long long v22;  // rdx\n    unsigned long long v23;  // r10\n    char v24;  // dl\n    char v25;  // r10b\n    unsigned int v26;  // edx\n    unsigned int v28;  // ecx\n    char v29;  // al\n    char v30;  // cl\n    unsigned long long v33;  // rax\n    unsigned int *v35;  // rdi\n    unsigned long long v36;  // rax\n\n    v2 = v1[1];\n    if (v1[1] != 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v4 = v1[2];\n            do\n            {\n                v2 += *(v4);\n                v4 = &v4[1];\n            }\n            while (v1[2] + (v1[1] << 3) != v4);\n        }\n        v5 = v1;\n        v8 = v6[8] + (v6[17] & v2) * 24;\n        v9 = *((long long *)(v6[8] + (v6[17] & v2) * 24));\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v10 = v8->field_10;\n            v11 = 0;\n            do\n            {\n                v12 = *((long long *)(v10 + v11 * 8));\n                if (*((long long *)*((long long *)(v10 + (v11 << 3)))) == v2)\n                {\n                    v13 = sub_408570();\n                    if (v13 != 0)\n                    {\n                        break;\n                    }\n                }\n                v11 += 1;\n            }\n            while (v9 != v11);\n            if (v13 == 0 || *((long long *)*((long long *)(v10 + (v11 << 3)))) != v2)\n            {\n                v12 = calloc(0x70, 0x1);\n            }\n            else if (*((long long *)*((long long *)(v10 + (v11 << 3)))) == v2)\n            {\n                v36 = v12;\n                return v36;\n            }\n        }\n        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || v12 != 0)\n        {\n            v12 = calloc(0x70, 0x1);\n            if (v12 != 0)\n            {\n                v14 = v12 + 8;\n                v15 = sub_40b1c0();\n                if (v15 == 0)\n                {\n                    v16 = v1[1];\n                    *((unsigned long long *)(v12 + 80)) = v14;\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(Load(addr=(rsi<8> + 0x40<64>), size=8, endness=Iend_LE) + (((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) + ((Load(addr=(rsi<8> + 0x88<64>), size=8, endness=Iend_LE) & rbp<8>) << 0x1<8>)) << 0x3<8>)), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                    {\n                        v17 = v5[2];\n                        v18 = *(v6);\n                        v19 = v5[2] + v1[1] * 8;\n                        while (true)\n                        {\n                            v20 = *(v17) * 16 + v18;\n                            v21 = (char)*((char *)(*(v17) * 16 + v18 + 8));\n                            if (*((char *)((*(v17) << 4) + v18 + 8)) != 1)\n                            {\n                                v22 = (char)*(&((char *)&v20->field_8)[2]);\n                                v23 = (char)*((char *)(v12 + 104));\n                                v24 = (unsigned long long)(char)*(&((char *)&v20->field_8)[2]) >> 4;\n                                v25 = (unsigned long long)(char)*((char *)(v12 + 104)) >> 5;\n                                tmp_90 = (rdx<8> | (unsigned int)r10<8>) & 1;\n                                v26 = (unsigned int)((unsigned long long)((rdx<8> | (unsigned int)r10<8>) & 1) * 32) | (char)(*((char *)(v12 + 104)) & 4294967007);\n                                *((char *)(v12 + 104)) = (unsigned int)(tmp_90 * 32) | (char)(*((char *)(v12 + 104)) & 4294967007);\n                                if (v21 == 2)\n                                {\n                                    *((unsigned long long *)(v12 + 104)) = v26 | 16;\n                                }\n                                if (v21 == 4)\n                                {\n                                    *((unsigned long long *)(v12 + 104)) = v26 | 64;\n                                }\n                            }\n                            else if ((v20->field_8 & 0x3ff00) != 0)\n                            {\n                                v28 = (char)*((char *)(v12 + 104));\n                                v29 = (unsigned long long)(char)*(&((char *)&v20->field_8)[2]) >> 4;\n                                v30 = (unsigned long long)(char)*((char *)(v12 + 104)) >> 5;\n                                *((char *)(v12 + 104)) = (unsigned int)((unsigned long long)(((unsigned int)rax<8> | rcx<4>) & 1) * 32) | (char)(*((char *)(v12 + 104)) & 4294967007);\n                            }\n                            if ((v20->field_8 & 0x3ff00) == 0 && *((char *)((*(v17) << 4) + v18 + 8)) == 1 || v21 == 4 && *((char *)((*(v17) << 4) + v18 + 8)) != 1 || v21 == 2 && *((char *)((*(v17) << 4) + v18 + 8)) != 1 || (v20->field_8 & 0x3ff00) == 0 && v21 != 12 && *((char *)((*(v17) << 4) + v18 + 8)) != 1)\n                            {\n                                v17 = &v17[1];\n                                if (v19 == v17)\n                                {\n                                    break;\n                                }\n                            }\n                            else\n                            {\n                                v17 = &v17[1];\n                                *((char *)(v12 + 104)) = *((char *)(v12 + 104)) | 128;\n                                if (v19 == v17)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    v33 = sub_408c40();\n                    if (v33 != 0)\n                    {\n                        sub_409cf0();\n                    }\n                }\n                else\n                {\n                    free(v12);\n                }\n            }\n            if (v12 == 0 || v15 != 0 || v33 != 0)\n            {\n                *(v35) = 12;\n                v12 = 0;\n            }\n        }\n    }\n    else\n    {\n        *(v3) = 0;\n        v12 = 0;\n    }\n    v36 = v12;\n    return v36;\n}\n"
        },
        {
            "funcName": "sub_4159e0",
            "funcStartAddr": "0x4159e0",
            "funcEndAddr": "0x415e03",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[32];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned long long field_30;\n    char field_38;\n} struct_1;\n\nint sub_4159e0()\n{\n    unsigned long long v0;  // [bp-0x88]\n    void tmp_23;  // tmp #23\n    unsigned long|unsigned long long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned int|unsigned long v3;  // [bp-0x60]\n    unsigned long|void *|unsigned long long v4;  // [bp-0x58]\n    char|unsigned long long v5;  // [bp-0x50]\n    unsigned long v6;  // [bp-0x48]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    unsigned long long v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    unsigned long long v11;  // r8\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r12\n    unsigned long long v15;  // rdx\n    unsigned long long v16;  // rbx\n    unsigned long v17;  // rsi\n    struct_1 *v18;  // rdi\n    struct_1 *v19;  // r15\n    unsigned long long v20;  // r8\n    unsigned long long v21;  // rax\n    unsigned int v22;  // ecx\n    char v23;  // cl\n    unsigned int v24;  // ecx\n    char v25;  // cl\n    unsigned long v26;  // r9\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // r14\n    unsigned long long v31;  // r13\n    unsigned long long v32;  // rdi\n    void *v33;  // rbp\n    unsigned long long v34;  // rax\n    unsigned int v35;  // eax\n    unsigned long v36;  // rdx\n    unsigned int v37;  // al\n    unsigned int v38;  // eax\n    unsigned long v39;  // r14\n    void *v40;  // rax\n    unsigned long long v41;  // rax\n    void *v42;  // r14\n    unsigned long long v43;  // rax\n    unsigned long long v44;  // rdx\n    unsigned long long v45;  // r8\n    unsigned long long v46;  // rdi\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rsi\n    unsigned long long v49;  // rsi\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // r9\n    unsigned long long v52;  // r12\n    unsigned long long v53;  // rax\n\n    v12 = v11;\n    v20 = v11 + v13;\n    v14 = v9;\n    v7 = v10;\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v13 <= v15)\n    {\n        v16 = v13;\n        v3 = v17;\n        v19 = v18;\n        if (v20 <= v15)\n        {\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n            {\n            }\n            else\n            {\n                v21 = v19->field_38;\n                v20 = 0;\n                v22 = v19->field_38;\n                v23 = (unsigned long long)v19->field_38 >> 5;\n                v8 = rcx<4> & 3;\n            }\n        }\n        if (v20 > v15 || !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v13 > v20)\n        {\n            v20 = v15;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) || v20 > v15)\n        {\n            v21 = v19->field_38;\n            v24 = v19->field_38;\n            v25 = (unsigned long long)v19->field_38 >> 5;\n            v8 = rcx<4> & 3;\n            if (v20 > v13 && v19->field_20 != 0 && (v18->field_38 & 8) == 0)\n            {\n                v6 = v26;\n                v5 = v15;\n                v4 = v20;\n                sub_415910();\n                v21 = v19->field_38;\n                v20 = v4;\n            }\n        }\n        if ((v21 & 16) == 0 && v9 != 0)\n        {\n            v28 = (unsigned int)v21 & 6;\n            v29 = v19->field_30;\n            if (v28 == 4)\n            {\n                v30 = *((long long *)v14);\n                if (*((long long *)v14) <= v18->field_30)\n                {\n                    v31 = v30;\n                }\n            }\n            if (v28 != 4 || *((long long *)v14) > v18->field_30)\n            {\n                v30 = v29 + 1;\n                v31 = v29 + 1;\n            }\n            if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) || v28 != 4 || *((long long *)v14) > v18->field_30)\n            {\n                v32 = v30 * 16;\n            }\n        }\n        if (v9 == 0 || (v21 & 16) != 0 || (char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>) && v28 == 4 && *((long long *)v14) <= v18->field_30)\n        {\n            v32 = 16;\n            v30 = 1;\n            v31 = 1;\n            v14 = 0;\n        }\n        v6 = v6;\n        v5 = v5;\n        v4 = v20;\n        v33 = malloc(v32);\n        if (v1 != 0)\n        {\n            v2 = v8;\n            v1 = v33;\n            v0 = v30;\n            v34 = sub_410a30();\n            if (v34 != 0)\n            {\n                v52 = -1;\n            }\n            else if (v14 != 0)\n            {\n                v35 = v19->field_38;\n                v36 = v31 + 1;\n                v37 = (char)((unsigned long long)v19->field_38 >> 1);\n                v38 = rax<4> & 3;\n                if (!(v38 != 0))\n                {\n                    v39 = v3 * 8;\n                    *((unsigned long *)&v3) = v36;\n                    v40 = malloc(v3 * 8);\n                    *((unsigned long long *)(v14 + 8)) = v4;\n                    if (v4 != 0)\n                    {\n                        v3 = *((long long *)&v3);\n                        v4 = v40;\n                        v41 = malloc(v39);\n                        *((unsigned long long *)(v14 + 16)) = v41;\n                        if (v41 != 0)\n                        {\n                            *((unsigned long *)v14) = v3;\n                            v51 = 1;\n                        }\n                        else\n                        {\n                            free(v4);\n                        }\n                    }\n                }\n                else if (v38 != 1)\n                {\n                    if (!(v38 == 2))\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                    else if (v30 <= *((long long *)v14))\n                    {\n                        v51 = 2;\n                    }\n                    else\n                    {\n                        __assert_fail(); /* do not return */\n                    }\n                }\n                else\n                {\n                    if (*((long long *)v14) < v3)\n                    {\n                        v5 = 1;\n                        v4 = v3;\n                        *((unsigned long *)&v3) = v3 * 8;\n                        v42 = realloc(*((long long *)(v14 + 8)), v3 * 8);\n                        if (v42 != 0)\n                        {\n                            v43 = realloc(*((long long *)(v14 + 16)), *((long long *)&v3));\n                            v51 = v5;\n                            if (v43 != 0)\n                            {\n                                *((void **)(v14 + 8)) = v42;\n                                *((unsigned long long *)(v14 + 16)) = v43;\n                                *((unsigned long *)v14) = v4;\n                            }\n                            else\n                            {\n                                free(v42);\n                                v51 = 0;\n                            }\n                        }\n                    }\n                }\n                if (v38 == 1)\n                {\n                    v51 = 1;\n                }\n            }\n        }\n        else\n        {\n            v52 = -2;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>) || v13 > v15)\n    {\n        v52 = -1;\n    }\n    if (v34 == 0 && v38 == 1 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && v38 != 0 && *((long long *)v14) < v3 && v42 == 0 || v34 == 0 && v13 <= v15 && v38 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v4 != 0 && v1 != 0 && v41 == 0 || v34 == 0 && v13 <= v15 && v38 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && v4 == 0)\n    {\n        v51 = 0;\n    }\n    if (v34 == 0 && v38 == 2 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v38 != 1 && v1 != 0 && v38 != 0 && v30 <= *((long long *)v14) || v34 == 0 && v38 == 1 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && v38 != 0 && *((long long *)v14) < v3 && v42 != 0 && v43 != 0 || v34 == 0 && v38 == 1 && v13 <= v15 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v1 != 0 && v38 != 0 && *((long long *)v14) >= v3 || v34 == 0 && v13 <= v15 && v38 == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)) && v14 != 0 && v4 != 0 && v1 != 0 && v41 != 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            v45 = *((long long *)(v14 + 8));\n            v46 = *((long long *)(v14 + 16));\n            v44 = v31;\n            v47 = 0;\n            v48 = v31 * 8;\n            do\n            {\n                *((long long *)(v45 + v47)) = *((long long *)(v1 + v47 * 2));\n                *((long long *)(v46 + v47)) = *((long long *)(v1 + v47 * 2 + 8));\n                v47 += 8;\n            }\n            while (v47 != v48);\n        }\n        else\n        {\n            v44 = 0;\n            v31 = 0;\n        }\n        if (*((long long *)v14) > v44)\n        {\n            v49 = *((long long *)(v14 + 16));\n            v50 = *((long long *)(v14 + 8));\n            do\n            {\n                v31 += 1;\n                *((long long *)(v49 + v44 * 8)) = -1;\n                *((long long *)(v50 + v44 * 8)) = -1;\n                v44 = v31;\n            }\n            while (*((long long *)v14) > v31);\n        }\n    }\n    if (...)\n    {\n        tmp_23 = v19->field_38;\n        v19->field_38 = v19->field_38 & 4294967033 | (unsigned int)v51 * 2;\n    }\n    if (...)\n    {\n        v52 = -2;\n    }\n    if (...)\n    {\n        v52 = *((long long *)v1);\n        if ((char)v7 != 0)\n        {\n            if (v16 == v52)\n            {\n                v52 = *((long long *)(v1 + 8)) - v52;\n            }\n            else\n            {\n                __assert_fail(); /* do not return */\n            }\n        }\n    }\n    if (...)\n    {\n        free(v1);\n    }\n    if (...)\n    {\n        v53 = v52;\n        return v53;\n    }\n}\n"
        },
        {
            "funcName": "sub_41618d",
            "funcStartAddr": "0x41618d",
            "funcEndAddr": "0x416196",
            "decompiledFuncCode": "int sub_41618d()\n{\n    unsigned long long v0;  // [bp-0x20]\n    unsigned long long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long v4;  // rbx\n\n    v2 = v4;\n    v1 = 0;\n    v0 = 0;\n}\n"
        },
        {
            "funcName": "sub_40ae70",
            "funcStartAddr": "0x40ae70",
            "funcEndAddr": "0x40af08",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[42];\n    char field_32;\n} struct_0;\n\nint sub_40ae70()\n{\n    char|struct_0 * v0;  // [bp-0x30]\n    unsigned long long v2;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rax\n    struct_0 *v7;  // rbp\n    unsigned long long v8;  // rdx\n    struct struct_0 **v9;  // r14\n    struct_0 *v10;  // rax\n\n    v3 = v2;\n    v7 = *((long long *)v2);\n    v9 = &v0;\n    while (true)\n    {\n        v10 = sub_40ad90();\n        v0 = v10;\n        if (v10 == 0)\n        {\n            break;\n        }\n        v10->field_0 = v7;\n        v7 = v0;\n        v0->field_32 = v0->field_32 | 4;\n        v4 = *((long long *)(v3 + 8));\n        if (*((long long *)(v3 + 8)) != 0)\n        {\n            v9 = &v7->padding_8;\n            v3 = v4;\n        }\n        else\n        {\n            v8 = 0;\n            while (true)\n            {\n                v5 = *((long long *)(v3 + 16));\n                if (*((long long *)(v3 + 16)) != 0 && v3 != v8)\n                {\n                    v9 = &v7->padding_8[8];\n                    v3 = v5;\n                }\n                if (*((long long *)(v3 + 16)) == 0 || v3 == v8)\n                {\n                    v6 = *((long long *)v3);\n                    v7 = v7->field_0;\n                    v8 = v3;\n                    if (*((long long *)v3) != 0)\n                    {\n                        v3 = v6;\n                    }\n                    else\n                    {\n                        v10 = v0;\n                    }\n                }\n            }\n            if (*((long long *)(v3 + 16)) != 0 && v3 != v8)\n            {\n                v10 = sub_40ad90();\n            }\n            else if (*((long long *)v3) == 0 && (*((long long *)(v3 + 16)) == 0 || v3 == v8))\n            {\n                return v10;\n            }\n        }\n    }\n    return v10;\n}\n"
        },
        {
            "funcName": "sub_405f10",
            "funcStartAddr": "0x405f10",
            "funcEndAddr": "0x4062b9",
            "decompiledFuncCode": "extern unsigned int g_4184ab;\nextern unsigned int g_4184af;\nextern unsigned int g_4184bf;\nextern unsigned int g_4184d6;\nextern unsigned int g_418538;\nextern unsigned int g_418608;\nextern unsigned int g_418628;\nextern unsigned int g_418650;\nextern unsigned int g_418678;\nextern unsigned int g_4186a8;\n\nint sub_405f10()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x4184ab, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x418538, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x4184af, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x4184bf, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x4184d6, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x418608, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x418628, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x418650, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x418678, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x4186a8, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_406510",
            "funcStartAddr": "0x406510",
            "funcEndAddr": "0x406540",
            "decompiledFuncCode": "int sub_406510()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_403510(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_415910",
            "funcStartAddr": "0x415910",
            "funcEndAddr": "0x4159d3",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned long long field_0;\n    char padding_8[24];\n    struct struct_1 *field_20;\n    char padding_28[16];\n    char field_38;\n} struct_0;\n\ntypedef struct struct_2 {\n    unsigned long long field_0;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[16];\n    char field_38;\n} struct_2;\n\nint sub_415910()\n{\n    void tmp_48;  // tmp #48\n    struct_0 *v1;  // rdi\n    unsigned long long v2[32];  // rbp\n    unsigned long long v4[13];  // r12\n    unsigned long long v5;  // rcx\n    unsigned long v6;  // d\n    unsigned long long *v7;  // rdi\n    unsigned long long v9;  // rax\n\n    v2 = v1->field_20;\n    v4 = v1->field_0;\n    tmp_48 = &v1->field_20->padding_8;\n    v1->field_20->field_0 = 0;\n    v2[31] = 0;\n    v7 = tmp_48 & -8;\n    for (v5 = (unsigned long long)((unsigned int)(unsigned long long [32])((char *)v2 + -1 * (tmp_48 & -8)) + 0x100) >> 3; v5 != 0; v7 = &v7[v6])\n    {\n        v5 -= 1;\n        *(v7) = 0;\n    }\n    sub_40e3c0();\n    v9 = v4[10];\n    if (v4[9] != v4[10])\n    {\n        sub_40e3c0();\n        v9 = v4[9];\n    }\n    if (v4[11] != v9)\n    {\n        sub_40e3c0();\n        v9 = v4[9];\n    }\n    if (v4[12] != v9)\n    {\n        sub_40e3c0();\n    }\n    v1->field_38 = v1->field_38 | 8;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_408360",
            "funcStartAddr": "0x408360",
            "funcEndAddr": "0x408373",
            "decompiledFuncCode": "int sub_408360()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4082e0();\n}\n"
        },
        {
            "funcName": "sub_4157a0",
            "funcStartAddr": "0x4157a0",
            "funcEndAddr": "0x4157c9",
            "decompiledFuncCode": "int sub_4157a0()\n{\n}\n"
        },
        {
            "funcName": "sub_40b140",
            "funcStartAddr": "0x40b140",
            "funcEndAddr": "0x40b1b3",
            "decompiledFuncCode": "int sub_40b140()\n{\n    unsigned int v0;  // [bp-0x1c]\n    struct struct_0 *v2[3];  // rsi\n    unsigned long long *v3;  // rax\n    unsigned long long *v4;  // rax\n\n    v0 = 0;\n    if (v2[1] != 0 && *((char *)(v2[1] + 48)) == 17)\n    {\n        v3 = sub_40af20();\n        v2[1] = &v3;\n        if (v3 != 0)\n        {\n            *(v3) = v2;\n        }\n    }\n    if (v2[2] != 0 && *((char *)(v2[2] + 48)) == 17)\n    {\n        v4 = sub_40af20();\n        v2[2] = &v4;\n        if (v4 != 0)\n        {\n            *(v4) = v2;\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_405932",
            "funcStartAddr": "0x405932",
            "funcEndAddr": "0x40595b",
            "decompiledFuncCode": "int sub_405932()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_414840",
            "funcStartAddr": "0x414840",
            "funcEndAddr": "0x414975",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_414840()\n{\n    unsigned long v0;  // [bp-0x60]\n    unsigned long v1;  // [bp-0x58]\n    unsigned long v2;  // [bp-0x50]\n    char v3;  // [bp-0x40]\n    unsigned long long v5;  // rdx\n    struct_0 *v6;  // rbp\n    unsigned int *v7;  // r9\n    unsigned int *v8;  // rbx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rsi\n    unsigned long v11;  // r8\n    unsigned long|unsigned long long v14;  // r14\n    unsigned long long v15;  // rax\n    unsigned long long v19;  // rax\n\n    v6 = v5;\n    v8 = v7;\n    v0 = v9;\n    v2 = *(v10);\n    v14 = (unsigned int)sub_413350();\n    if (*(v7) == 0 || v14 != 0)\n    {\n        while (true)\n        {\n            v15 = v6->field_8;\n            if ((v6->field_8 & 247) == 2)\n            {\n                break;\n            }\n            for (; v11 == 0 || v15 != 9; v14 = (v14 == 0? v1 : v14))\n            {\n                if (v1 == 0 && *(v8) != 0)\n                {\n                    if (v14 == 0)\n                    {\n                        break;\n                    }\n                    sub_4085c0();\n                }\n                if (*(v8) == 0 || v1 != 0)\n                {\n                    if (v14 != 0 && v1 != 0)\n                    {\n                        v1 = (unsigned int)sub_413350();\n                        v3 = 16;\n                        if (v14 != 0)\n                        {\n                            v14 = sub_40ad90();\n                            v15 = v6->field_8;\n                            if ((v6->field_8 & 247) == 2)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            sub_4085c0();\n                            sub_4085c0();\n                            v14 = 0;\n                            *(v8) = 12;\n                        }\n                    }\n                }\n            }\n            if (v1 == 0 && *(v8) != 0 && (v11 == 0 || v15 != 9))\n            {\n                v14 = 0;\n            }\n            else if (v15 == 9 || v14 != 0 && v1 != 0)\n            {\n                v19 = v14;\n                return v19;\n            }\n        }\n        if (true)\n        {\n            v14 = 0;\n        }\n        else\n        {\n            v19 = v14;\n            return v19;\n        }\n    }\n    v14 = 0;\n    v19 = v14;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_412f18",
            "funcStartAddr": "0x412f18",
            "funcEndAddr": "0x412f2a",
            "decompiledFuncCode": "int sub_412f18()\n{\n}\n"
        },
        {
            "funcName": "sub_413350",
            "funcStartAddr": "0x413350",
            "funcEndAddr": "0x4147f0",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[120];\n    unsigned long long field_78;\n    char padding_80[32];\n    unsigned long long field_a0;\n    unsigned long long field_a8;\n    char field_b0;\n    char padding_b1[3];\n    unsigned int field_b4;\n} struct_1;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    char field_8;\n} struct_0;\n\ntypedef struct struct_4 {\n    char padding_0[120];\n    unsigned long long field_78;\n    char padding_80[24];\n    unsigned long long field_98;\n    unsigned long long field_a0;\n    unsigned long long field_a8;\n    char field_b0;\n    char padding_b1[3];\n    unsigned int field_b4;\n} struct_4;\n\ntypedef struct struct_2 {\n    char padding_0[120];\n    unsigned long long field_78;\n    char padding_80[32];\n    unsigned long long field_a0;\n    unsigned long long field_a8;\n    char field_b0;\n    char padding_b1[3];\n    unsigned int field_b4;\n    unsigned long long field_b8;\n    unsigned long long field_c0;\n    uint128_t field_c8;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[184];\n    unsigned long long field_b8;\n} struct_3;\n\nint sub_413350()\n{\n    unsigned long long v0;  // [bp-0x238]\n    void tmp_18;  // tmp #18\n    void tmp_31;  // tmp #31\n    unsigned long v1;  // [bp-0x128]\n    unsigned long|unsigned long long *|unsigned long long v2;  // [bp-0x118]\n    unsigned long v3;  // [bp-0x110]\n    struct_1 *v4;  // [bp-0x108]\n    unsigned long|void *|unsigned long long v5;  // [bp-0x100]\n    unsigned long long [14]|unsigned long|uint128_t|unsigned long long v6;  // [bp-0xf8]\n    unsigned long v7;  // [bp-0xe8]\n    char|struct_0 * v8;  // [bp-0xe0]\n    char|unsigned long long [9] v9;  // [bp-0xd8]\n    unsigned int|void * v10;  // [bp-0xd0]\n    unsigned int v11;  // [bp-0xc8]\n    unsigned int v12;  // [bp-0xc0]\n    unsigned int v13;  // [bp-0xbc]\n    unsigned long long v14;  // [bp-0xb0]\n    unsigned int v15;  // [bp-0xa8]\n    unsigned long long v16;  // [bp-0xa0]\n    unsigned int v17;  // [bp-0x98]\n    unsigned long long v18;  // [bp-0x90]\n    char v19;  // [bp-0x80]\n    unsigned long|unsigned long long|unsigned long long * v20;  // [bp-0x78]\n    char v21;  // [bp-0x70]\n    char v22;  // [bp-0x58]\n    char|unsigned long long v23;  // [bp-0x50]\n    unsigned long long v25[7];  // rsi\n    struct_0 *v26;  // rdx\n    struct_0 *v27;  // r12\n    unsigned long long v28[14];  // rdi\n    unsigned long long *v29;  // rax\n    unsigned long v30;  // rbx\n    struct_1 *v31;  // rbx\n    unsigned long v32;  // r8\n    unsigned long long *v34;  // rbx\n    unsigned long long v35;  // rax\n    struct_4 *v36;  // rbx\n    struct_2 *v37;  // rcx\n    unsigned long long v38;  // rax\n    char v40;  // al\n    unsigned long long v41;  // r14\n    unsigned long long v43;  // rbx\n    unsigned long long v44;  // rbp\n    unsigned long v45;  // r8\n    unsigned long long v46;  // r14\n    unsigned long long v48;  // rax\n    unsigned long long v50;  // rax\n    char v51;  // al\n    unsigned long long v53;  // rbp\n    unsigned int v55;  // r9d\n    char *v56;  // rdi\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rcx\n    unsigned int v60;  // ebx\n    unsigned long long v61;  // rdi\n    unsigned long long v62;  // rbx\n    unsigned long long v63;  // rbx\n    unsigned long long *v64;  // rbp\n    unsigned long long v66;  // rax\n    unsigned long long v67;  // rdx\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rax\n    unsigned long long v71;  // rax\n    unsigned int *v72;  // rdx\n    unsigned int *v73;  // rax\n    unsigned long v75;  // rsi\n    unsigned long long v76;  // rcx\n    char v77;  // cc_dep2\n    unsigned long v78;  // d\n    char *v79;  // rdi\n    unsigned long long v80;  // rcx\n    char *v81;  // rdi\n    unsigned long long v82;  // rcx\n    unsigned int|unsigned long v83;  // ecx\n    char v84;  // cc_dep2\n    unsigned long v85;  // d\n    unsigned long long v86;  // rcx\n    char *v87;  // rdi\n    char v88;  // cc_dep2\n    unsigned long long v89;  // r8\n    unsigned long long v90[9];  // rdx\n    unsigned int|unsigned long v91;  // r9d\n    unsigned int *v92;  // rax\n    unsigned int *v93;  // rcx\n    void *v94;  // rax\n    void *v95;  // rax\n    unsigned int *v96;  // rcx\n    unsigned long long v97;  // rax\n    unsigned long long v98;  // rcx\n    unsigned long long v99;  // rbx\n    unsigned long long v100;  // rax\n    unsigned long long v101;  // rcx\n    unsigned long long v102;  // rax\n    unsigned long long *v103;  // rax\n    unsigned long long v104;  // rdx\n    unsigned int v105;  // edx\n    unsigned long long v108;  // rax\n    unsigned int v109;  // cc_dep1\n    unsigned long long v111;  // rdx\n    unsigned long long *v112;  // rax\n    unsigned long long v113;  // rax\n    unsigned long long v115;  // rbp\n    char v116;  // bl\n    unsigned long long v117;  // r13\n    uint128_t v118;  // xmm0\n    unsigned long long v119;  // rbx\n    uint128_t v120;  // xmm0\n    unsigned long long v121;  // rax\n    unsigned long long v122;  // rax\n    unsigned long long v123;  // rdx\n    unsigned long long v124;  // rax\n    unsigned long long v125;  // rax\n    char v126;  // al\n    unsigned long long v127;  // rax\n    char v128;  // al\n    unsigned long long v130;  // rbp\n    unsigned long long v131;  // rbp\n    unsigned long long v132;  // r12\n    unsigned long long v133;  // rbx\n    unsigned long long v135;  // r14\n    unsigned long long v136;  // r14\n    unsigned long long v137[14];  // r15\n    unsigned long long v139;  // rbx\n    unsigned long long v141;  // rax\n\n    *((unsigned long long [7])&v4) = *(v25);\n    switch (v26->field_8)\n    {\n    case 1:\n        v5 = (unsigned int)sub_40ad90();\n        if (v5 != 0)\n        {\n            v41 = v5;\n            if (v4->field_b4 <= 1)\n            {\n                v115 = v27->field_8;\n                for (v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0(); v115 <= 23; v5 = 0)\n                {\n                    v116 = v115 == 18;\n                    v0 = 0x8c0800;\n                    if (((char)((char)*(&((char *)stack_base)[((v115 & 63) >> 3) + -568]) >> (unsigned long long)(char)(v115 & 63 & 7)) & 1) == 0)\n                    {\n                        break;\n                    }\n                    v117 = v137[9];\n                    v118 = *((int128_t *)&v27);\n                    if (v115 != 23)\n                    {\n                        v119 = v116;\n                        if (v115 != 19)\n                        {\n                            v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n                            if (v5 != 0)\n                            {\n                                if (v115 == 18)\n                                {\n                                    v2 = -1;\n                                    v119 = 1;\n                                    v123 = v5;\n                                }\n                                else if (*((char *)(v5 + 48)) != 17)\n                                {\n                                    v2 = -1;\n                                    v119 = 0;\n                                    v6 = 0;\n                                }\n                                else\n                                {\n                                    v2 = -1;\n                                    v119 = 0;\n                                    v6 = 0;\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        v6 = v118;\n                        v120 = v6;\n                        v2 = (unsigned int)sub_413290();\n                        if (v2 != -1)\n                        {\n                            if (v2 != -2)\n                            {\n                                v121 = v27->field_8;\n                                if (v27->field_8 == 24)\n                                {\n                                    v119 = v2;\n                                }\n                                else if (v121 == 1)\n                                {\n                                    if (v27->field_0 == 44)\n                                    {\n                                        v119 = v2;\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            if (v27->field_8 == 1 && v27->field_0 == 44)\n                            {\n                                v119 = 0;\n                            }\n                        }\n                        if ((v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v2 != -2) && (v2 == -1 || v27->field_8 != 24))\n                        {\n                            v6 = v6;\n                            v120 = v6;\n                            v2 = (unsigned int)sub_413290();\n                        }\n                        if (((unsigned int)v3 & 0x200000) == 0 && v27->field_8 == 2 && (v2 == -2 || v121 != 1) && (v2 == -2 || v27->field_8 != 24) && (v2 == -2 || v2 != -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1))\n                        {\n                            *((int *)v7) = 9;\n                        }\n                    }\n                    if (v115 == 19)\n                    {\n                        v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n                        if (v5 != 0)\n                        {\n                            if (*((char *)(v5 + 48)) != 17)\n                            {\n                                v2 = 1;\n                                v122 = 10;\n                                v6 = 0;\n                            }\n                            else\n                            {\n                                v2 = 1;\n                                v6 = 0;\n                            }\n                        }\n                    }\n                    if (v121 == 1 && v115 == 23 && v2 != -2 && ((unsigned int)v3 & 0x200000) != 0 && v27->field_8 != 24 && v27->field_0 != 44 && v2 != -1 || v115 == 23 && ((unsigned int)v3 & 0x200000) != 0 && (v2 == -2 || v121 != 1) && (v2 == -2 || v27->field_8 != 24) && (v2 == -2 || v2 != -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1))\n                    {\n                        v137[9] = v117;\n                        v124 = v5;\n                        *((uint128_t *)&v27) = v120;\n                        v27->field_8 = 1;\n                    }\n                    if ((v121 == 1 && v115 == 23 && v27->field_0 == 44 && v2 != -2 && v27->field_8 != 24 && v2 >= v119 && v2 != -1 || v115 == 23 && v2 == -1 && v2 != -2 && (v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v27->field_8 != 24)) && v27->field_8 == 24 && v2 == -1)\n                    {\n                        v127 = 0;\n                        v128 = 32767 < v119;\n                    }\n                    if (...)\n                    {\n                        *((int *)v7) = 10;\n                    }\n                    if (v115 == 23 && v27->field_8 == 24 && v2 != -2 && v2 != -1 || (v121 == 1 && v115 == 23 && v27->field_0 == 44 && v2 != -2 && v27->field_8 != 24 && v2 >= v119 && v2 != -1 || v115 == 23 && v2 == -1 && v2 != -2 && (v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v27->field_8 != 24)) && v27->field_8 == 24 && v2 != -1)\n                    {\n                        v125 = 0;\n                        v126 = 32767 < v2;\n                    }\n                    if ((v121 == 1 && v115 == 23 && v27->field_0 == 44 && v2 != -2 && v27->field_8 != 24 && v2 >= v119 && v2 != -1 || v115 == 23 && v2 == -1 && v2 != -2 && (v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v27->field_8 != 24)) && v27->field_8 == 24 && v2 == -1 && rax<8> == 0 || (v115 == 23 && v27->field_8 == 24 && v2 != -2 && v2 != -1 || (v121 == 1 && v115 == 23 && v27->field_0 == 44 && v2 != -2 && v27->field_8 != 24 && v2 >= v119 && v2 != -1 || v115 == 23 && v2 == -1 && v2 != -2 && (v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v27->field_8 != 24)) && v27->field_8 == 24 && v2 != -1) && rax<8> == 0)\n                    {\n                        v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n                        if (v5 != 0)\n                        {\n                            if (v2 == 0 && v119 == 0)\n                            {\n                                sub_4085c0();\n                            }\n                            else if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rbx<8>, 0x0<64>, 0x0<64>))\n                            {\n                                v130 = v5;\n                                v123 = 0;\n                            }\n                            else if (v119 != 1)\n                            {\n                                v6[0] = v137;\n                                v131 = 2;\n                                v8 = v27;\n                                v132 = v119;\n                                v133 = &v4[-100254043878856259].field_a8;\n                                while (true)\n                                {\n                                    v23 = 16;\n                                    v135 = (unsigned int)sub_40ad90();\n                                    if (v135 != 0)\n                                    {\n                                        if (v135 == 0)\n                                        {\n                                            break;\n                                        }\n                                        v131 += 1;\n                                        v119 = v132;\n                                        v136 = (unsigned int)sub_40ae70();\n                                        v27 = v8;\n                                        v137 = v6;\n                                        v123 = v135;\n                                    }\n                                }\n                                if (v135 == 0 || v119 >= v131)\n                                {\n                                    *((int *)v7) = 12;\n                                }\n                            }\n                            else\n                            {\n                                v123 = v5;\n                            }\n                        }\n                    }\n                    if ((v121 == 1 && v115 == 23 && v27->field_0 == 44 && v2 != -2 && v27->field_8 != 24 && v2 >= v119 && v2 != -1 || v115 == 23 && v2 == -1 && v2 != -2 && (v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v27->field_8 != 24)) && v27->field_8 == 24 && v2 == -1 && rax<8> != 0 || (v115 == 23 && v27->field_8 == 24 && v2 != -2 && v2 != -1 || (v121 == 1 && v115 == 23 && v27->field_0 == 44 && v2 != -2 && v27->field_8 != 24 && v2 >= v119 && v2 != -1 || v115 == 23 && v2 == -1 && v2 != -2 && (v121 == 1 || v2 == -1) && (v27->field_0 == 44 || v2 == -1) && (v27->field_0 == 44 || v2 != -1) && (v27->field_8 == 1 || v2 != -1) && (v2 == -1 || v27->field_8 != 24)) && v27->field_8 == 24 && v2 != -1) && rax<8> != 0)\n                    {\n                        *((int *)v7) = 15;\n                    }\n                    if (...)\n                    {\n                        break;\n                    }\n                    if (...)\n                    {\n                        v5 = 0;\n                    }\n                    if (...)\n                    {\n                        v6 = v123;\n                        v130 = (unsigned int)sub_40ae70();\n                    }\n                    if (...)\n                    {\n                        v6 = v123;\n                    }\n                    if (...)\n                    {\n                        sub_4085c0();\n                    }\n                    if (...)\n                    {\n                        v122 = 10;\n                    }\n                    if (...)\n                    {\n                        v122 = 11;\n                    }\n                    if (...)\n                    {\n                        v23 = v122;\n                        v123 = (unsigned int)sub_40ad90();\n                        if (v123 != 0)\n                        {\n                            v139 = v119 + 2;\n                            if (v139 <= v2)\n                            {\n                                v8 = v27;\n                                while (true)\n                                {\n                                    v23 = 16;\n                                    v141 = sub_40ad90();\n                                    if ((unsigned long long)(unsigned int)sub_40ae70() == 0)\n                                    {\n                                        break;\n                                    }\n                                    if (v141 == 0)\n                                    {\n                                        break;\n                                    }\n                                    v23 = 10;\n                                    if (v123 == 0)\n                                    {\n                                        break;\n                                    }\n                                    v139 += 1;\n                                    v27 = v8;\n                                    v123 = (unsigned int)sub_40ad90();\n                                }\n                                if (v139 <= v2 || v123 == 0 || v141 == 0)\n                                {\n                                    *((int *)v7) = 12;\n                                }\n                            }\n                        }\n                    }\n                    if (...)\n                    {\n                        v23 = 16;\n                        v124 = sub_40ad90();\n                    }\n                    if (...)\n                    {\n                        *((int *)v7) = 12;\n                    }\n                    if (...)\n                    {\n                        v5 = v123;\n                    }\n                    if (...)\n                    {\n                        v5 = v124;\n                    }\n                    if (...)\n                    {\n                        break;\n                    }\n                    if (...)\n                    {\n                        v115 = v27->field_8;\n                        if (v5 == 0)\n                        {\n                            break;\n                        }\n                        sub_4085c0();\n                    }\n                    if (...)\n                    {\n                        sub_4085c0();\n                    }\n                }\n                if (((unsigned int)v3 & 0x1000000) != 0 && (v115 == 23 || v115 == 11))\n                {\n                    v5 = 0;\n                    *((int *)v7) = 13;\n                }\n                else if (...)\n                {\n                    v5 = 0;\n                }\n                else\n                {\n                    return v5;\n                }\n                v5 = 0;\n                *((int *)v7) = 13;\n            }\n            else\n            {\n                while (true)\n                {\n                    if (*((int *)(v137[2] + (v28[9] << 2))) == -1 && v137[13] > v137[9] && v28[9] != v137[6])\n                    {\n                        v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n                        v23 = 16;\n                        v50 = sub_40ad90();\n                        v41 = v50;\n                        v51 = v50 == 0;\n                        if (!((unsigned long long)(unsigned int)sub_40ad90() != 0 && v50 != 0))\n                        {\n                            break;\n                        }\n                    }\n                    if (v137[13] <= v137[9] || v28[9] == v137[6] || *((int *)(v137[2] + (v28[9] << 2))) != -1)\n                    {\n                        v5 = v41;\n                    }\n                }\n                if (*((int *)(v137[2] + (v28[9] << 2))) == -1)\n                {\n                    *((int *)v7) = 12;\n                    break;\n                }\n                else if (v137[13] <= v137[9] || v28[9] == v137[6] || *((int *)(v137[2] + (v28[9] << 2))) != -1)\n                {\n                    v115 = v27->field_8;\n                }\n            }\n        }\n        else\n        {\n            *((int *)v7) = 12;\n        }\n    case 4:\n        if ((1 << (unsigned long long)((char)*((long long *)&v26->field_0) & 31) & v4->field_a8) != 0)\n        {\n            v36 = v4;\n            v4->field_a0 = v4->field_a0 | 1 << ((char)*((long long *)&v26->field_0) & 31);\n            v5 = (unsigned int)sub_40ad90();\n            if (v5 != 0)\n            {\n                v36->field_98 = v36->field_98 + 1;\n                v36->field_b0 = v36->field_b0 | 2;\n            }\n        }\n        else\n        {\n            v5 = 0;\n            *((int *)v7) = 6;\n        }\n    case 5:\n        v31 = v4;\n        v5 = (unsigned int)sub_40ad90();\n        if (v5 != 0 && v4->field_b4 > 1)\n        {\n            v31->field_b0 = v31->field_b0 | 2;\n        }\n    case 8:\n        v2 = v32;\n        v25[6] = v25[6] + 1;\n        v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n        if (!(v26->field_8 != 9))\n        {\n            if (v25[6] <= 8)\n            {\n                v4->field_a8 = v4->field_a8 | 1 << ((char)v25[6] & 31);\n            }\n            v23 = 17;\n            v5 = (unsigned int)sub_40ad90();\n            if (v5 != 0)\n            {\n                *((unsigned long long [7])(v5 + 40)) = v25[6];\n            }\n        }\n        else if (*((int *)v7) == 0)\n        {\n            if (v26->field_8 != 9)\n            {\n                if (sub_414980() != 0)\n                {\n                    sub_4085c0();\n                }\n                *((int *)v7) = 8;\n            }\n        }\n    case 9:\n        if (((unsigned int)v3 & 0x20000) == 0)\n        {\n            v5 = 0;\n            *((int *)v7) = 16;\n        }\n    case 11: case 18: case 19:\n        if (((char)v3 & 32) == 0)\n        {\n            if (((char)v3 & 16) == 0)\n            {\n            }\n            else\n            {\n                v2 = v45;\n                v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n                v5 = (unsigned int)sub_413350();\n            }\n        }\n    case 12:\n        v46 = (unsigned int)*((int *)&v27->field_0);\n        if (((unsigned short)*((int *)&v27->field_0) & 783) != 0 && (v4->field_b0 & 16) == 0)\n        {\n            v37 = v4;\n            v38 = (unsigned int)v4->field_b0 | 16;\n            *((unsigned long long *)&v4->field_b0) = v38;\n            if ((v38 & 8) == 0)\n            {\n                v37->field_b8 = 0x3ff000000000000;\n                v37->field_c0 = 576460745995190270;\n                if ((v38 & 4) != 0)\n                {\n                    *((int128_t *)&(&v37->field_c0)[1]) = 0;\n                    v46 = (unsigned int)*((int *)&v27->field_0);\n                }\n                else\n                {\n                    v43 = 128;\n                    v44 = 2;\n                }\n            }\n            else\n            {\n                v43 = 0;\n                v44 = 0;\n            }\n            if ((v38 & 4) == 0 || (v38 & 8) != 0)\n            {\n                tmp_18 = v44;\n                v53 = v44 * 64;\n                v55 = v43 + 0x100 - v53;\n                v56 = *((long long *)(unsigned long long)__ctype_b_loc()) + v43 * 2;\n                do\n                {\n                    v58 = 0;\n                    do\n                    {\n                        v59 = v58;\n                        if ((unsigned int)(v43 + v58) == 95 || (v56[2 * v58] & 8) != 0)\n                        {\n                            *((unsigned long long *)&v4[1].padding_0[8 * tmp_18]) = *((long long *)&v4[1].padding_0[8 * tmp_18]) | 1 << (v59 & 63);\n                        }\n                        v58 += 1;\n                    }\n                    while (v58 != 64);\n                    v60 = (unsigned int)v43 + 64;\n                    v61 = &v56[-18446744073709551488];\n                }\n                while (v55 != v60);\n            }\n        }\n        if (((unsigned int)(v46 - 0x100) & -257) == 0)\n        {\n            if ((unsigned int)v46 != 0x100)\n            {\n                *((int *)&v27->field_0) = 5;\n                *((int *)&v27->field_0) = 10;\n                v63 = (unsigned int)sub_40ad90();\n            }\n            else\n            {\n                *((int *)&v27->field_0) = 6;\n                *((int *)&v27->field_0) = 9;\n                v63 = (unsigned int)sub_40ad90();\n            }\n            v23 = 10;\n            v66 = sub_40ad90();\n            v101 = v66;\n            v5 = v66;\n        }\n        else\n        {\n            v5 = (unsigned int)sub_40ad90();\n            if (v5 != 0)\n            {\n                v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_412be0();\n            }\n        }\n    case 20:\n        v14 = 0;\n        v29 = calloc(0x20, 0x1);\n        v34 = v29;\n        v2 = v29;\n        v35 = calloc(0x50, 0x1);\n        v40 = v35 == 0;\n        if (v35 != 0 && v34 != 0)\n        {\n            v48 = v27->field_8;\n            if (v27->field_8 != 2)\n            {\n                v8 = 0;\n                if (v26->field_8 != 25)\n                {\n                    if (v48 == 21)\n                    {\n                        v27->field_8 = 1;\n                    }\n                    v6 = 0;\n                    v64 = v2;\n                    v5 = 0;\n                    while (true)\n                    {\n                        v16 = stack_base + -120;\n                        v15 = 3;\n                        v102 = sub_4129c0();\n                        if (v102 == 0)\n                        {\n                            v99 = (unsigned int)sub_408630();\n                            if (((unsigned int)1 & -3) != 0)\n                            {\n                                v67 = v27->field_8;\n                                if (v67 == 22 && v27->field_8 != 2)\n                                {\n                                    v137[9] = v137[9] + v99;\n                                    sub_408630();\n                                    if (v19 != 2 && v19 != 21)\n                                    {\n                                        v17 = 3;\n                                        v18 = stack_base + -88;\n                                        v102 = sub_4129c0();\n                                        if ((unsigned int)v102 == 0)\n                                        {\n                                            v99 = (unsigned int)sub_408630();\n                                            v90 = (2 <= v4->field_b4? v20 : 0);\n                                            v9 = (unsigned int)3 == 3;\n                                            if ((unsigned int)3 == 3)\n                                            {\n                                                v76 = -1;\n                                                v79 = v16;\n                                                while (v76 != 0)\n                                                {\n                                                    v76 -= 1;\n                                                    v77 = *(v79);\n                                                    v79 = &v79[v78];\n                                                    break;\n                                                }\n                                                v82 = !(rcx<8>) + -1;\n                                                if (v82 <= 1)\n                                                {\n                                                    v86 = -1;\n                                                    v87 = v18;\n                                                    while (v86 != 0)\n                                                    {\n                                                        v86 -= 1;\n                                                        v88 = *(v87);\n                                                        v87 = &v87[v78];\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            else if ((unsigned int)3 != 0)\n                                            {\n                                                v83 = 0;\n                                            }\n                                        }\n                                    }\n                                    if (v19 == 21)\n                                    {\n                                        v137[9] = v137[9] + (long long)(int)(0 - (unsigned int)v99);\n                                        v27->field_8 = 1;\n                                    }\n                                }\n                            }\n                            if ((((unsigned int)1 & -3) == 0 || v27->field_8 != 2) && (((unsigned int)1 & -3) == 0 || v19 == 21 || v67 != 22) && (((unsigned int)1 & -3) == 0 || v67 != 22 || v19 != 2))\n                            {\n                                switch ((unsigned int)3)\n                                {\n                                case 0:\n                                    *((long long *)&((char *)v64)[(unsigned long long)((unsigned int)((unsigned long long)(char)v16 >> 3) & 24)]) = *((long long *)&((char *)v64)[(unsigned long long)((unsigned int)((unsigned long long)(char)v16 >> 3) & 24)]) | 1 << ((char)v16 & 63);\n                                    break;\n                                case 1:\n                                    v72 = *((long long *)(v20 + 40));\n                                    v73 = *((long long *)v20);\n                                    if (*((long long *)(v20 + 40)) == v5)\n                                    {\n                                        v75 = (v5 * 2 + 1) * 4;\n                                        v5 = v5 * 2 + 1;\n                                        v73 = realloc(*((long long *)v20), v75);\n                                        if (v73 != 0)\n                                        {\n                                            *((unsigned int **)v20) = v73;\n                                            v72 = *((long long *)(v20 + 40));\n                                        }\n                                    }\n                                case 2:\n                                    v70 = sub_40d960();\n                                    *((unsigned long long *)v7) = v70;\n                                    if (v70 != 0)\n                                    {\n                                        break;\n                                    }\n                                case 3:\n                                    v71 = sub_40d960();\n                                    *((unsigned long long *)v7) = v71;\n                                case 4:\n                                    v1 = v3;\n                                    v69 = sub_40d9b0();\n                                    *((unsigned long long *)v7) = v69;\n                                    if (v69 != 0)\n                                    {\n                                        break;\n                                    }\n                                default:\n                                    __assert_fail(); /* do not return */\n                                }\n                            }\n                        }\n                        if (v102 != 0 || v67 == 22 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && (unsigned int)v102 != 0 && v27->field_8 != 2)\n                        {\n                            *((unsigned long long *)v7) = v102;\n                        }\n                        if (false)\n                        {\n                            v80 = -1;\n                            v81 = v18;\n                            while (v80 != 0)\n                            {\n                                v80 -= 1;\n                                v84 = *(v81);\n                                v81 = &v81[v85];\n                                break;\n                            }\n                        }\n                        if (v102 == 0 && (unsigned int)3 <= 4 && *((long long *)(3 * 8 + 4299120)) == 4276109 && (((unsigned int)1 & -3) == 0 || v27->field_8 != 2) && (((unsigned int)1 & -3) == 0 || v19 == 21 || v67 != 22) && (((unsigned int)1 & -3) == 0 || v67 != 22 || v19 != 2) && *((long long *)(v20 + 40)) == v5 && v73 != 0 || v102 == 0 && (unsigned int)3 <= 4 && *((long long *)(3 * 8 + 4299120)) == 4276109 && (((unsigned int)1 & -3) == 0 || v27->field_8 != 2) && (((unsigned int)1 & -3) == 0 || v19 == 21 || v67 != 22) && (((unsigned int)1 & -3) == 0 || v67 != 22 || v19 != 2) && *((long long *)(v20 + 40)) != v5)\n                        {\n                            *((unsigned int **)(v20 + 40)) = (char *)v72 + 1;\n                            *((int *)((char *)v73 + 0x4 * v72)) = v16;\n                        }\n                        if ((unsigned int)3 == 3 && v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && v82 <= 1 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && v27->field_8 != 2 && !(rcx<8>) - 1 <= 1 || (unsigned int)3 == 3 && v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && v82 <= 1 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && v27->field_8 != 2 && (unsigned int)3 != 3 || v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && (unsigned int)3 == 0 && (unsigned int)3 != 3 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && v27->field_8 != 2)\n                        {\n                            if ((unsigned int)3 != 0)\n                            {\n                                v83 = 0;\n                            }\n                            if ((unsigned int)3 == 3)\n                            {\n                                v83 = v22;\n                            }\n                        }\n                        if (((unsigned int)3 == 3 && v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && v82 <= 1 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && v27->field_8 != 2 && !(rcx<8>) - 1 <= 1 || (unsigned int)3 == 3 && v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && v82 <= 1 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && v27->field_8 != 2 && (unsigned int)3 != 3 || v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && (unsigned int)3 == 0 && (unsigned int)3 != 3 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && v27->field_8 != 2) && (unsigned int)3 == 0 || v67 == 22 && v102 == 0 && (unsigned int)v102 == 0 && (unsigned int)3 != 3 && v19 != 2 && ((unsigned int)1 & -3) != 0 && v19 != 21 && (unsigned int)3 != 0 && v27->field_8 != 2 && (unsigned int)3 == 0)\n                        {\n                            v83 = (char)v18;\n                        }\n                        if (...)\n                        {\n                            if ((unsigned int)3 != 0)\n                            {\n                                v89 = (unsigned int)v16;\n                            }\n                            if ((unsigned int)3 == 0 || v9 != 0)\n                            {\n                                *((unsigned long *)&v10) = v83;\n                                v9[0] = v90;\n                                v89 = (unsigned int)sub_408d40();\n                                v90 = v9;\n                            }\n                            if ((unsigned int)3 != 0)\n                            {\n                                v91 = v18;\n                            }\n                            if ((unsigned int)3 == 3 || (unsigned int)3 == 0)\n                            {\n                                v10 = v89;\n                                v9[0] = v90;\n                                v91 = (unsigned int)sub_408d40();\n                            }\n                        }\n                        if (...)\n                        {\n                            *((int *)v7) = 3;\n                        }\n                        if (...)\n                        {\n                            v92 = v90[8];\n                            v93 = v90[1];\n                            if (v90[8] == v6)\n                            {\n                                *((unsigned long *)&v13) = v91;\n                                *((unsigned long long *)&v12) = v89;\n                                v9[0] = v90;\n                                tmp_31 = (v6 * 2 + 1) * 4;\n                                v6 = v6 * 2 + 1;\n                                *((long long *)&v11) = tmp_31;\n                                v94 = realloc(v93, tmp_31);\n                                v10 = v94;\n                                v95 = realloc(v9[2], *((long long *)&v11));\n                                v93 = v10;\n                                if (v10 != 0)\n                                {\n                                    v90 = v9;\n                                    v89 = v12;\n                                    v91 = v13;\n                                    if (v5 != 0)\n                                    {\n                                        v90[2] = v5;\n                                        v92 = v90[8];\n                                        v90[1] = v10;\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            *((int *)v7) = 11;\n                        }\n                        if (...)\n                        {\n                            v5 = v95;\n                            free(v10);\n                            free(v5);\n                            *((int *)v7) = 12;\n                        }\n                        if (...)\n                        {\n                            *((unsigned long long *)((char *)v93 + 0x4 * v92)) = v89;\n                            v96 = v90[2];\n                            v90[8] = (char *)v92 + 1;\n                            *((unsigned long *)((char *)v96 + 0x4 * v92)) = v91;\n                        }\n                        if (...)\n                        {\n                            v97 = 0;\n                            do\n                            {\n                                v98 = v97;\n                                if (v89 <= (unsigned int)v97 && v91 >= (unsigned int)v97)\n                                {\n                                    v64[v97 >> 6] = v64[v97 >> 6] | 1 << (v98 & 63);\n                                }\n                                v97 += 1;\n                            }\n                            while (v97 != 0x100);\n                            *((int *)v7) = 0;\n                        }\n                        if (...)\n                        {\n                            v100 = v27->field_8;\n                            if (v100 == 21 && v27->field_8 != 2)\n                            {\n                                v137[9] = v137[9] + v99;\n                                if (v8 != 0)\n                                {\n                                    v103 = v2;\n                                    v104 = &v2[4];\n                                    do\n                                    {\n                                        *(v103) = !(*(v103));\n                                        v103 = &v103[1];\n                                    }\n                                    while (v104 != v103);\n                                }\n                                v105 = v4->field_b4;\n                                if (v4->field_b4 > 1)\n                                {\n                                    v108 = 0;\n                                    do\n                                    {\n                                        *((long long *)&((char *)v2)[v108]) = *((long long *)&((char *)v2)[v108]) & *((long long *)(v4->field_78 + v108));\n                                        v108 += 8;\n                                    }\n                                    while (v108 != 32);\n                                }\n                                if (*((long long *)(v20 + 64)) == 0 && *((long long *)(v20 + 40)) == 0 && *((long long *)(v20 + 56)) == 0 && *((long long *)(v20 + 48)) == 0)\n                                {\n                                    v109 = v105;\n                                    if ((*((long long *)(v20 + 72)) == 0 || v105 <= 1) && ((*((char *)(v20 + 32)) & 1) == 0 || v105 <= 1))\n                                    {\n                                        sub_409780();\n                                        v21 = 3;\n                                        v20 = v2;\n                                        v5 = (unsigned int)sub_40ad90();\n                                        if (v5 != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                                if (*((long long *)(v20 + 64)) != 0 || *((long long *)(v20 + 40)) != 0 || *((long long *)(v20 + 56)) != 0 || *((long long *)(v20 + 48)) != 0 || *((long long *)(v20 + 72)) != 0 && v105 > 1 || (*((char *)(v20 + 32)) & 1) != 0 && v105 > 1)\n                                {\n                                    v4->field_b0 = v4->field_b0 | 2;\n                                    v21 = 6;\n                                    v20 = v35;\n                                    v5 = (unsigned int)sub_40ad90();\n                                    v111 = &v2[4];\n                                    v112 = v2;\n                                    if (v2 != 0)\n                                    {\n                                        while (true)\n                                        {\n                                            if (*(v112) == 0)\n                                            {\n                                                v112 = &v112[1];\n                                                free(v2);\n                                            }\n                                            else\n                                            {\n                                                v21 = 3;\n                                                v20 = v2;\n                                                v113 = sub_40ad90();\n                                                if (v113 == 0)\n                                                {\n                                                    break;\n                                                }\n                                                v23 = 10;\n                                                v5 = (unsigned int)sub_40ad90();\n                                                if (v5 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        if (*(v112) != 0)\n                                        {\n                                            *((int *)v7) = 12;\n                                        }\n                                        else if (*(v112) == 0 && v111 == v112 || *(v112) != 0 && v113 != 0)\n                                        {\n                                            v115 = v27->field_8;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        if (...)\n                        {\n                            *((int *)v7) = 7;\n                        }\n                        if (...)\n                        {\n                            *((int *)v7) = 12;\n                        }\n                    }\n                    if (...)\n                    {\n                        free(v2);\n                        sub_409780();\n                    }\n                    else if (...)\n                    {\n                        v115 = v27->field_8;\n                    }\n                }\n                else\n                {\n                    *((char *)(v20 + 32)) = *((char *)(v20 + 32)) | 1;\n                    if (((unsigned short)v3 & 0x100) != 0)\n                    {\n                        *(v2) = *(v2) | 0x400;\n                    }\n                    v137[9] = v137[9] + (unsigned long long)(unsigned int)sub_408630();\n                    v62 = (unsigned int)sub_408630();\n                    v48 = v27->field_8;\n                    if (v27->field_8 != 2)\n                    {\n                        v8 = 1;\n                    }\n                }\n            }\n            else\n            {\n                *((int *)v7) = 2;\n                free(v2);\n                sub_409780();\n                if (*((int *)v7) == 0)\n                {\n                    v5 = 0;\n                }\n            }\n        }\n        if (v35 == 0 || v34 == 0)\n        {\n            free(v2);\n            free(v20);\n        }\n    case 24:\n        v26->field_8 = 1;\n        v5 = (unsigned int)sub_40ad90();\n    case 32: case 33:\n        v30 = v7;\n    case 34: case 35:\n        v30 = v7;\n        v5 = (unsigned int)sub_40e180();\n        if (*((int *)v30) != 0 && v5 == 0)\n        {\n            break;\n        }\n    case 36:\n        v5 = 0;\n        *((int *)v7) = 5;\n    }\n    if (v26->field_8 <= 36)\n    {\n        v27 = v26;\n        v7 = v91;\n        v3 = v83;\n        v137 = v28;\n    }\n    v5 = 0;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_402f10",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x402fa2",
            "decompiledFuncCode": "extern unsigned int g_61d458;\n\nint sub_402f10()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4;  // r12\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rax\n    unsigned long v7;  // rdi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // rbx\n    unsigned long long v11;  // r12\n\n    if (g_61d458 != 0)\n    {\n        v2 = v4;\n        v1 = stack_base + 0;\n        v0 = v5;\n        while (true)\n        {\n            v6 = unlink((unsigned long long)(unsigned int)sub_402e50());\n            if ((char)v7 == 0 && v6 != 0)\n            {\n                v9 = (unsigned int)sub_405d00();\n                error(0x0, *(__errno_location()), \"%s\");\n                v8 = g_61d458;\n                if (1 >= g_61d458)\n                {\n                    break;\n                }\n            }\n            if (v6 == 0 || (char)v7 != 0)\n            {\n                v8 = g_61d458;\n                if (1 >= g_61d458)\n                {\n                    break;\n                }\n            }\n        }\n        g_61d458 = 0;\n        v10 = v0;\n        v11 = v2;\n        return v8;\n    }\n    g_61d458 = 0;\n    return g_61d458;\n}\n"
        },
        {
            "funcName": "sub_409d90",
            "funcStartAddr": "0x409d90",
            "funcEndAddr": "0x409e48",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[200];\n    unsigned long long field_c8;\n    char padding_d0[24];\n    unsigned long long field_e8;\n    char padding_f0[8];\n    struct struct_5 **field_f8;\n} struct_4;\n\ntypedef struct struct_2 {\n    char padding_0[16];\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    struct struct_3 *field_28;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[32];\n    unsigned long long field_20;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_1;\n\nint sub_409d90()\n{\n    unsigned long long v1[32];  // rdi\n    struct_4 *v2;  // r14\n    struct_2 *v3;  // r12\n    unsigned long long v4;  // rbx\n    struct_0 *v5;  // rbp\n    unsigned long long v8;  // r13\n\n    v2 = v1;\n    if (v1[29] > 0)\n    {\n        v8 = 0;\n        while (true)\n        {\n            v3 = v2->field_f8[v8];\n            if (v2->field_f8[v8]->field_20 > 0)\n            {\n                v4 = 0;\n                while (true)\n                {\n                    v5 = v3->field_28[v4];\n                    v4 += 1;\n                    free(v5->field_20);\n                    free(v5);\n                    if (v3->field_20 <= v4)\n                    {\n                        break;\n                    }\n                }\n            }\n            free(v3->field_28);\n            if (v3->field_10 != 0)\n            {\n                free(*((long long *)(v3->field_10 + 16)));\n                free(v3->field_10);\n            }\n            v8 += 1;\n            if (v2->field_e8 <= v8)\n            {\n                break;\n            }\n        }\n    }\n    v2->field_e8 = 0;\n    v2->field_c8 = 0;\n    return (unsigned long long)free(v3);\n}\n"
        },
        {
            "funcName": "sub_40b1c0",
            "funcStartAddr": "0x40b1c0",
            "funcEndAddr": "0x40b233",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_40b1c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    unsigned long long v4[3];  // rsi\n    unsigned long v5;  // rdx\n    struct_0 *v6;  // rdi\n    unsigned long long v7;  // r12\n    struct_0 *v8;  // rbp\n    unsigned long long v9;  // rbx\n    void *v11;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rbx\n    unsigned long long v16;  // r12\n\n    v5 = v4[1];\n    *((unsigned long long [3])&v6->field_8) = v4[1];\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdx<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v2 = v7;\n        v1 = stack_base + 0;\n        v8 = v6;\n        v0 = v9;\n        *((unsigned long *)&v6->field_0) = v5;\n        v11 = malloc(v5 * 8);\n        v6->field_10 = v11;\n        if (v11 != 0)\n        {\n            memcpy(v11, v4[2], v5 * 8);\n            v14 = 0;\n        }\n        else\n        {\n            v8->field_8 = 0;\n            v14 = 12;\n            *((long long *)&v8->field_0) = 0;\n        }\n        v15 = v0;\n        v16 = v2;\n        return v14;\n    }\n    v6->field_10 = 0;\n    *((int128_t *)&v6->field_0) = 0;\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_403630",
            "funcStartAddr": "0x403630",
            "funcEndAddr": "0x403934",
            "decompiledFuncCode": "extern unsigned int g_4169e2;\nextern char g_61d478;\nextern unsigned long long g_61d488;\nextern unsigned long long g_61d490;\nextern unsigned long long g_61d498;\nextern unsigned long long g_61d4a0[9];\n\nint sub_403630()\n{\n    unsigned long v0;  // [bp-0x40]\n    void tmp_2;  // tmp #2\n    unsigned long long v2;  // rbp\n    unsigned long long v3;  // r13\n    unsigned long long v6;  // r13\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // cc_dep2\n    unsigned long v10;  // rbp\n    void *v11;  // r12\n    unsigned long long v12;  // r14\n    unsigned long long v13;  // rax\n    unsigned long long v17;  // rdx\n    char v18;  // dl\n    unsigned long long v22;  // rax\n    unsigned long long v23[9];  // rdx\n    unsigned long long v24;  // rax\n\n    v2 = (8191 <= g_61d490? g_61d490 : 8191);\n    while (true)\n    {\n        if (v2 > 8191)\n        {\n            v3 = (v2 - 0x1800 & -0x800) + 8191;\n        }\n        else\n        {\n            v3 = 8191;\n        }\n        v10 = g_61d490;\n        g_61d4a0[0] = v3;\n        v11 = (unsigned long long)(unsigned int)sub_4064b0();\n        g_61d4a0[5] = v11;\n        g_61d4a0[7] = 0;\n        g_61d4a0[6] = 0;\n        g_61d4a0[4] = 0;\n        g_61d4a0[1] = 0;\n        g_61d4a0[3] = g_61d488 + 1;\n        g_61d4a0[2] = g_61d488 + 1;\n        g_61d4a0[8] = 0;\n        if (g_61d490 != 0)\n        {\n            memcpy(v11, g_61d498, g_61d490);\n            g_61d4a0[1] = v10;\n            g_61d490 = 0;\n            v6 = v3 - v10;\n        }\n        if (g_61d490 == 0 || v3 != v10)\n        {\n            v7 = sub_405ea0();\n            if (v7 == 0)\n            {\n                g_61d478 = 1;\n            }\n            if (v7 == -1)\n            {\n                error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4169e2, 0x5));\n                sub_402fb0(); /* do not return */\n            }\n            if (v10 + v8 != 0 && (v7 == 0 || v7 != -1))\n            {\n                v11 = g_61d4a0[5];\n            }\n        }\n        if (v3 != v10 || v7 != -1)\n        {\n            v8 = g_61d4a0[1];\n            v10 = v7 + g_61d4a0[1];\n            g_61d4a0[1] = v10;\n        }\n        if (v3 == v10 && g_61d490 != 0 || v7 == 0 && v10 + v8 != 0 || v7 != -1 && v10 + v8 != 0)\n        {\n            v12 = 0;\n            v0 = &g_61d4a0[7];\n            while (true)\n            {\n                v13 = sub_408460();\n                if (v13 == 0)\n                {\n                    break;\n                }\n                tmp_2 = v13 - v11;\n                v12 += 1;\n                v11 = v13 + 1;\n                v10 -= tmp_2 + 1;\n                sub_403340();\n            }\n            if (v10 != 0)\n            {\n                if (g_61d478 != 0)\n                {\n                    sub_403340();\n                    v12 += 1;\n                }\n                else\n                {\n                    free(g_61d498);\n                    g_61d498 = (unsigned int)sub_4066b0();\n                    g_61d490 = v10;\n                }\n            }\n            g_61d4a0[4] = v12;\n            g_61d4a0[2] = g_61d488 + 1;\n            g_61d4a0[3] = g_61d488 + 1;\n            g_61d488 = g_61d488 + v12;\n        }\n        if (v12 != 0 && (v3 == v10 || v10 + v8 != 0) && (v10 + v8 != 0 || g_61d490 != 0) && (v3 == v10 || v7 == 0 || v7 != -1) && (v7 == 0 || v7 != -1 || g_61d490 != 0))\n        {\n            v22 = g_61d4a0[6];\n            v23 = g_61d4a0;\n            g_61d4a0[8] = 0;\n            g_61d4a0[7] = v22;\n            if (g_61d4a0 == 0)\n            {\n                g_61d4a0[0] = (unsigned int)sub_4064b0();\n                return 1;\n            }\n            while (true)\n            {\n                v24 = v23[8];\n                if (v23[8] == 0)\n                {\n                    break;\n                }\n                v23 = v24;\n            }\n        }\n        if (v12 == 0 && v7 == 0 || v12 == 0 && v7 != -1 || v10 + v8 == 0 && g_61d490 == 0 && v7 == 0 || v12 == 0 && v3 == v10 && g_61d490 != 0 || v10 + v8 == 0 && g_61d490 == 0 && v7 != -1 || v10 + v8 == 0 && v7 == 0 && v3 != v10 || v10 + v8 == 0 && v7 != -1 && v3 != v10)\n        {\n            if (g_61d478 == 0)\n            {\n                v17 = 0;\n                v18 = [D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Load(addr=Load(addr=0x61d4a0<64>, size=8, endness=Iend_LE), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>);\n                if (rdx<8> == 0 && !((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=Load(addr=0x61d4a0<64>, size=8, endness=Iend_LE), size=8, endness=Iend_LE), Load(addr=Load(addr=0x61d4a0<64>, size=8, endness=Iend_LE), size=8, endness=Iend_LE), cc_ndep<8>)))\n                {\n                    v2 = *(g_61d4a0) * 2;\n                    sub_403430();\n                    free(g_61d4a0);\n                }\n                if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x4<64>, Load(addr=Load(addr=0x61d4a0<64>, size=8, endness=Iend_LE), size=8, endness=Iend_LE), Load(addr=Load(addr=0x61d4a0<64>, size=8, endness=Iend_LE), size=8, endness=Iend_LE), cc_ndep<8>) || rdx<8> != 0)\n                {\n                    sub_403510(); /* do not return */\n                }\n            }\n            else\n            {\n                sub_403430();\n                free(g_61d4a0);\n                return 0;\n            }\n        }\n    }\n    v23[8] = g_61d4a0;\n    return 1;\n}\n"
        },
        {
            "funcName": "sub_416080",
            "funcStartAddr": "0x416080",
            "funcEndAddr": "0x4160fe",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4299424];\n    unsigned long long field_419aa0;\n} struct_0;\n\nextern int512_t g_419aa0;\n\nint sub_416080()\n{\n    struct_0 *v1;  // rdi\n    unsigned long v2;  // rdx\n    void *v3;  // rbp\n    unsigned long long v4;  // rcx\n    unsigned long long v5;  // r12\n    void *v6;  // r13\n    unsigned long v7;  // rbx\n\n    if ((unsigned int)v1 > 16)\n    {\n        abort(); /* do not return */\n    }\n    v3 = v2;\n    v5 = v4;\n    v6 = (unsigned long long)dcgettext(0x0, (unsigned int)(char *)(4299584 + *((long long *)(0x8 * v1 + (char *)&g_419aa0))), 0x5);\n    v7 = strlen(v6) + 1;\n    if (v4 != 0)\n    {\n        v2 = v7;\n        if (v7 > v4)\n        {\n            v2 = v5 - 1;\n            *(&((char *)v3)[v5 + -1]) = 0;\n        }\n        memcpy(v3, v6, v2);\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_412e60",
            "funcStartAddr": "0x412e60",
            "funcEndAddr": "0x412e6e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_412e60()\n{\n    struct_0 *v1;  // rbx\n\n    v1->field_8 = 5;\n}\n"
        },
        {
            "funcName": "sub_415790",
            "funcStartAddr": "0x415790",
            "funcEndAddr": "0x415799",
            "decompiledFuncCode": "int sub_415790()\n{\n}\n"
        },
        {
            "funcName": "sub_4099c0",
            "funcStartAddr": "0x4099c0",
            "funcEndAddr": "0x409a5f",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_a;\n} struct_1;\n\nint sub_4099c0()\n{\n    void tmp_125;  // tmp #125\n    void tmp_167;  // tmp #167\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // r13\n    unsigned long long v4;  // rdi\n    unsigned long long v5[5];  // rbx\n    unsigned long long *v6;  // rax\n    unsigned long long *v7;  // rdx\n    unsigned long long *v8;  // rdi\n    unsigned long long v9;  // r8\n    unsigned short v10;  // di\n    struct_1 *v11;  // rsi\n\n    v2 = v1 * 16;\n    v5 = v4;\n    v6 = sub_4097f0();\n    if (v6 != -1)\n    {\n        v8 = v7;\n        v9 = *(v7);\n        v10 = (unsigned short)v7 & 1023;\n        v11 = v6 * 16 + *(v5);\n        tmp_125 = *((int *)(v6 * 16 + *(v5) + 8)) & -261889 | (unsigned int)((unsigned long long)((unsigned int)rdi<8> & 1023) * 0x100);\n        *((unsigned int *)(v6 * 16 + *(v5) + 8)) = *((int *)(v6 * 16 + *(v5) + 8)) & -261889 | (unsigned int)((unsigned long long)((unsigned int)rdi<8> & 1023) * 0x100);\n        tmp_167 = ((unsigned int)((unsigned long long)(unsigned int)*((int *)(v9 + v2 + 8)) >> 8) | rdi<8>) & 1023;\n        v11->field_8 = (unsigned int)((unsigned long long)(((unsigned int)((unsigned long long)(unsigned int)*((int *)(v9 + v2 + 8)) >> 8) | rdi<8>) & 1023) * 0x100) | (unsigned int)tmp_125 & -261889;\n        *(&((char *)&v11->field_8)[2]) = (unsigned int)((unsigned long long)((unsigned int)(tmp_167 * 0x100) | (unsigned int)tmp_125 & -261889) >> 16) | 4;\n        *((unsigned long long *)(v5[4] + v6 * 8)) = v1;\n    }\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_408990",
            "funcStartAddr": "0x408990",
            "funcEndAddr": "0x4089de",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[216];\n    unsigned long long field_d8;\n} struct_1;\n\ntypedef struct struct_2 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_2;\n\nint sub_408990()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rsi\n    struct_1 *v3;  // rdi\n    unsigned long v6;  // r8\n    unsigned long long v7;  // rax\n\n    v2 = v1 * 5;\n    if (*((long long *)(v3->field_d8 + (v2 << 3) + 16)) <= v6)\n    {\n        v7 = *((long long *)(v3->field_d8 + v2 * 8 + 24));\n        if (!(v7 >= v6))\n        {\n            return 1;\n        }\n        else if (v7 != v6)\n        {\n            if (*((long long *)(v3->field_d8 + v2 * 8 + 16)) != v6)\n            {\n                return 0;\n            }\n        }\n    }\n    else\n    {\n        return -18446744069414584321;\n    }\n}\n"
        },
        {
            "funcName": "sub_405c4f",
            "funcStartAddr": "0x405c4f",
            "funcEndAddr": "0x405cc0",
            "decompiledFuncCode": "extern uint128_t g_61d5c0;\nextern uint128_t g_61d5d0;\nextern uint128_t g_61d5e0;\nextern unsigned long long g_61d5f0;\n\nint sub_405c4f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_61d5f0;\n    *((uint128_t *)&v0) = g_61d5c0;\n    *((uint128_t *)&v1) = g_61d5d0;\n    *((uint128_t *)&v2) = g_61d5e0;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_405630();\n}\n"
        },
        {
            "funcName": "sub_40fcc0",
            "funcStartAddr": "0x40fcc0",
            "funcEndAddr": "0x4104eb",
            "decompiledFuncCode": "typedef struct struct_4 {\n    char padding_0[8];\n    unsigned long long field_8;\n    char padding_10[32];\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    char padding_60[56];\n    struct struct_2 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[8];\n    unsigned long long field_c8;\n    char padding_d0[8];\n    unsigned long long field_d8;\n    char padding_e0[8];\n    unsigned long long field_e8;\n    char padding_f0[8];\n    unsigned long long field_f8;\n} struct_4;\n\ntypedef struct struct_7 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_7;\n\ntypedef struct struct_6 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    struct struct_2 *field_28;\n} struct_6;\n\ntypedef struct struct_3 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_3;\n\ntypedef struct struct_5 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_5;\n\nint sub_40fcc0()\n{\n    unsigned long long v0;  // [bp-0xf8]\n    void tmp_15;  // tmp #15\n    unsigned long long v1;  // [bp-0xe0]\n    unsigned long|unsigned long long v2;  // [bp-0xd8]\n    unsigned long|unsigned long long v3;  // [bp-0xd0]\n    char *|struct_3 *|unsigned long|unsigned long long v4;  // [bp-0xc8]\n    unsigned int|unsigned long|unsigned long long * v5;  // [bp-0xc0]\n    struct_3 *|unsigned long|unsigned long long * v6;  // [bp-0xb8]\n    unsigned long long v7[7];  // [bp-0xb0]\n    unsigned long|unsigned long long|unsigned long long * v8;  // [bp-0xa8]\n    unsigned long long *v9;  // [bp-0xa0]\n    unsigned long long *v10;  // [bp-0x98]\n    struct struct_5 **v11;  // [bp-0x90]\n    unsigned long v12;  // [bp-0x88]\n    unsigned long long *v13;  // [bp-0x80]\n    unsigned long long v14;  // [bp-0x78]\n    unsigned long long v15;  // [bp-0x70]\n    unsigned int v16;  // [bp-0x5c]\n    char v17;  // [bp-0x48]\n    unsigned long long v19[32];  // rdi\n    struct_4 *v20;  // r14\n    unsigned long long v21;  // r15\n    unsigned long long *v22;  // rsi\n    unsigned long v23;  // rdx\n    unsigned long long v24;  // r13\n    unsigned long long *v25;  // rbp\n    struct_7 *v26;  // rax\n    unsigned long v28;  // rbx\n    unsigned long long v29;  // rax\n    unsigned int v30;  // ecx\n    unsigned short v32;  // cx\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // rdx\n    unsigned long long v38;  // rax\n    unsigned long long v39;  // rdi\n    unsigned long long *v40;  // rax\n    struct_6 *v41;  // rbx\n    unsigned long long *v42;  // rcx\n    struct_3 *v43;  // r9\n    unsigned long v44;  // rdx\n    unsigned long long v45;  // rax\n    unsigned long long v46;  // rbp\n    unsigned long long v47;  // r8\n    unsigned long long v48;  // r12\n    unsigned long long v49;  // r10\n    unsigned long long|unsigned long long * v50;  // r12\n    unsigned long long *v51;  // r13\n    unsigned long long v52;  // r15\n    char *|unsigned long long v53;  // r15\n    unsigned long long v54;  // rax\n    unsigned long long v55;  // rax\n    unsigned long long v56[4];  // rax\n    unsigned long long v57;  // rcx\n    unsigned long long v58;  // rdi\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // rsi\n    unsigned long long v61;  // rbp\n    unsigned long long *v62;  // rax\n    unsigned long long v64;  // rsi\n    unsigned long long v65;  // rax\n    unsigned long long v66;  // rax\n    unsigned long long v67[2];  // rax\n    unsigned long long *v69;  // rdx\n    unsigned long long v70;  // r15\n    unsigned long long v71;  // r13\n    unsigned long long v72[7];  // r12\n    unsigned long long v73[32];  // rax\n    unsigned long long v74;  // r14\n    unsigned long long v76[4];  // rax\n    unsigned long long v77;  // rbp\n    unsigned long long v78;  // rax\n    unsigned long long v79;  // rdx\n    unsigned long long *v80;  // rbp\n    unsigned long long v82;  // r11\n    struct_5 *v83;  // rax\n    struct struct_5 **v84;  // rdx\n\n    v20 = v19;\n    v21 = v19[9];\n    v10 = v22;\n    v9 = v23;\n    *((unsigned long long [32])&v7[0]) = v19[19];\n    *((unsigned long long [32])&v11) = v19[9] * 8;\n    v1 = 0;\n    if (*(v22) > 0)\n    {\n        while (true)\n        {\n            v24 = *((long long *)(*(v9) + v1 * 8));\n            v25 = *((long long *)(*(v9) + v1 * 8)) * 16;\n            v26 = *(v7) + *((long long *)(*(v9) + v1 * 8)) * 16;\n            if (*((char *)(*(v7) + (*((long long *)(*(v9) + (v1 << 3))) << 4) + 8)) == 4)\n            {\n                if ((v26->field_8 & 0x3ff00) != 0)\n                {\n                    v28 = (unsigned long long)v26->field_8 % 0x100;\n                    v29 = sub_40be50();\n                    v30 = rbx<8>;\n                    v32 = (unsigned short)rbx<8> & 1023;\n                }\n                if ((v26->field_8 & 0x3ff00) == 0 || (bl<1> & 4) == 0 && ((char)rcx<4> & 128) == 0 && (v32 & 32) == 0 && (v29 & 1) == 0 || (bl<1> & 4) == 0 && ((char)rcx<4> & 128) == 0 && (v29 & 1) == 0 && (v29 & 2) != 0 || (bl<1> & 4) == 0 && (v32 & 32) == 0 && (v29 & 1) == 0 && (v29 & 8) != 0 || ((char)rbx<8> & 8) == 0 && ((char)rcx<4> & 128) == 0 && (v32 & 32) == 0 && (v29 & 1) != 0 || (bl<1> & 4) == 0 && (v29 & 1) == 0 && (v29 & 2) != 0 && (v29 & 8) != 0 || ((char)rbx<8> & 8) == 0 && ((char)rcx<4> & 128) == 0 && (v29 & 2) != 0 && (v29 & 1) != 0 || ((char)rbx<8> & 8) == 0 && (v32 & 32) == 0 && (v29 & 8) != 0 && (v29 & 1) != 0 || ((char)rbx<8> & 8) == 0 && (v29 & 2) != 0 && (v29 & 8) != 0 && (v29 & 1) != 0)\n                {\n                    v33 = v20->field_c8;\n                    v34 = 0;\n                    for (v35 = v20->field_c8; v34 < v35; v35 = v37)\n                    {\n                        v36 = v20->field_d8;\n                        if (v3 > *((long long *)(v20->field_d8 + (((v34 + v35 >> 63) + v34 + v35 >> 1) + ((v34 + v35 >> 63) + v34 + v35 >> 1 << 2) << 3) + 8)))\n                        {\n                            v39 = v37;\n                            v37 = v35;\n                        }\n                        else\n                        {\n                            for (v37 = (v34 + v35 >> 63) + v34 + v35 >> 1; v37 > 0; v37 = v38)\n                            {\n                                v38 = (v37 + 0 >> 63) + v37 + 0 >> 1;\n                                v39 = (v37 + 0 >> 63) + v37 + 0 >> 1;\n                                if (v3 > *((long long *)(v36 + (((v37 + 0 >> 63) + v37 + 0 >> 1) + ((v37 + 0 >> 63) + v37 + 0 >> 1 << 2) << 3) + 8)))\n                                {\n                                    break;\n                                }\n                            }\n                            if (v37 > 0)\n                            {\n                                v34 = v39 + 1;\n                            }\n                        }\n                        v34 = v39 + 1;\n                    }\n                    v40 = v20->field_d8 + v34 * 40;\n                    if (*((long long *)(v20->field_d8 + (v34 + (v34 << 2) << 3) + 8)) == v3 && v34 != -1)\n                    {\n                        while (v8 != *(v40))\n                        {\n                            v40 = &v40[5];\n                            if ((char)v40[-1] == 0)\n                            {\n                                break;\n                            }\n                        }\n                        if (true)\n                        {\n                            v16 = 0;\n                        }\n                        else if (v8 != *(v40))\n                        {\n                            v69 = *(v20->field_98);\n                            v13 = &v20->field_98->field_0;\n                            v12 = *((long long *)&((char *)v25)[*(v20->field_98)]);\n                        }\n                    }\n                    v69 = *(v20->field_98);\n                    v13 = &v20->field_98->field_0;\n                    v12 = *((long long *)&((char *)v25)[*(v20->field_98)]);\n                    if (v20->field_e8 <= 0 || *((long long *)(v20->field_d8 + (v34 + (v34 << 2) << 3) + 8)) == v3 && v34 != -1)\n                    {\n                        v16 = 0;\n                    }\n                    if (v20->field_e8 > 0)\n                    {\n                        v3 = v21;\n                        v2 = 0;\n                        v4 = v20->field_8;\n                        v8 = v24;\n                        v14 = v33;\n                        while (true)\n                        {\n                            v41 = *((long long *)(v20->field_f8 + v2 * 8));\n                            if (v12 == v69[2 * *((long long *)(*((long long *)(v20->field_f8 + (v2 << 3))) + 8))])\n                            {\n                                v50 = v41->field_0;\n                                v49 = v3;\n                                if (v41->field_20 > 0)\n                                {\n                                    v42 = v50;\n                                    v46 = 0;\n                                    v48 = v4;\n                                    v47 = v3;\n                                    while (true)\n                                    {\n                                        v43 = v41->field_28[v46];\n                                        v51 = *((long long *)(v41->field_28[v46] + 8));\n                                        v44 = *((long long *)(v41->field_28[v46] + 8)) + -0x1 * v42;\n                                        v52 = (char *)(*((long long *)(v41->field_28[v46] + 8)) + -0x1 * v42) + v47;\n                                        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                        {\n                                            if (v20->field_30 < v52)\n                                            {\n                                                v5 = v44;\n                                                v4 = v43;\n                                                if (v20->field_58 >= v52)\n                                                {\n                                                    v15 = v47;\n                                                    v6 = v42;\n                                                    v54 = sub_4096f0();\n                                                    if ((unsigned int)v54 != 0)\n                                                    {\n                                                        break;\n                                                    }\n                                                    v48 = v20->field_8;\n                                                    v44 = v5;\n                                                    v43 = v4;\n                                                    v47 = v15;\n                                                    v42 = v6;\n                                                }\n                                            }\n                                            if (v20->field_58 >= v52 || v20->field_30 >= v52)\n                                            {\n                                                v6 = v43;\n                                                v5 = v42;\n                                                v4 = v47;\n                                                v45 = memcmp(v48 + v47, v48 + (char *)v42, v44);\n                                                v47 = v4;\n                                                v42 = v5;\n                                            }\n                                            if ((v20->field_58 < v52 || v45 != 0) && (v20->field_30 < v52 || v45 != 0))\n                                            {\n                                                v4 = v48;\n                                                v49 = v47;\n                                                v50 = v42;\n                                                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v41->field_20 > v46)\n                                                {\n                                                    break;\n                                                }\n                                                v51 = v42;\n                                                v52 = v47;\n                                            }\n                                        }\n                                        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v45 == 0 && v20->field_58 >= v52 || v45 == 0 && v20->field_30 >= v52)\n                                        {\n                                            v54 = sub_40fb20();\n                                            v48 = v20->field_8;\n                                        }\n                                        if (((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v45 == 0) && (unsigned int)v54 <= 1 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v20->field_58 >= v52 || v20->field_30 >= v52))\n                                        {\n                                            v46 += 1;\n                                            v42 = v51;\n                                            v47 = v52;\n                                            v4 = v48;\n                                        }\n                                        if ((unsigned int)v54 <= 1)\n                                        {\n                                            v50 = (char *)v51 + 1;\n                                            v49 = v52;\n                                        }\n                                    }\n                                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) && (v20->field_58 < v52 || v45 != 0) && (v20->field_30 < v52 || v45 != 0) && (v20->field_58 < v52 || (unsigned int)v54 == 0 || v20->field_30 >= v52))\n                                    {\n                                        v2 += 1;\n                                    }\n                                    else if ((v20->field_30 < v52 || (unsigned int)v54 > 1) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v20->field_30 < v52 || v45 == 0) && (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) || (unsigned int)v54 > 1) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || v20->field_58 >= v52 || v20->field_30 >= v52))\n                                    {\n                                        return v54;\n                                    }\n                                }\n                                if (v3 >= v50 && (v41->field_20 <= 0 || v2 >= v20->field_e8))\n                                {\n                                    v53 = v49;\n                                    while (true)\n                                    {\n                                        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                        {\n                                            if (v20->field_30 <= v53)\n                                            {\n                                                if (v20->field_58 <= v53)\n                                                {\n                                                    break;\n                                                }\n                                                v54 = sub_4095a0();\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                v4 = v20->field_8;\n                                            }\n                                            v55 = &v53[1];\n                                            if (*((char *)(v4 + v53)) != *((char *)(v4 + v50 - 1)))\n                                            {\n                                                break;\n                                            }\n                                            v53 = v55;\n                                        }\n                                        v56 = *((long long *)(v20->field_b8 + v50 * 8));\n                                        if (*((long long *)(v20->field_b8 + (v50 << 3))) != 0)\n                                        {\n                                            v57 = v56[2];\n                                            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                            {\n                                                v58 = v56[3];\n                                                v59 = 0;\n                                                v60 = *(v13);\n                                                while (true)\n                                                {\n                                                    v61 = *((long long *)(v58 + v59 * 8));\n                                                    v62 = *((long long *)(v58 + v59 * 8)) * 16 + v60;\n                                                    if (*((char *)((*((long long *)(v58 + (v59 << 3))) << 4) + v60 + 8)) == 9 && v12 == *(v62))\n                                                    {\n                                                        if (v61 == -1)\n                                                        {\n                                                            break;\n                                                        }\n                                                        if (v41->field_10 == 0)\n                                                        {\n                                                            v5 = v41->field_0;\n                                                            v64 = calloc(0x18, v50 - v5 + 1);\n                                                            v41->field_10 = v64;\n                                                        }\n                                                        if (v41->field_10 != 0 || v64 != 0)\n                                                        {\n                                                            v0 = 9;\n                                                            v54 = sub_40eb30();\n                                                            if ((unsigned int)v54 == 1)\n                                                            {\n                                                                break;\n                                                            }\n                                                            if ((unsigned int)v54 != 0)\n                                                            {\n                                                                break;\n                                                            }\n                                                            if ((unsigned int)v54 == 0)\n                                                            {\n                                                                v65 = v41->field_18;\n                                                                if (v41->field_20 == v41->field_18)\n                                                                {\n                                                                    v5 = v65 * 2 + 1;\n                                                                    v66 = realloc(v41->field_28, (v65 * 2 + 1) * 8);\n                                                                    if (v66 != 0)\n                                                                    {\n                                                                        v41->field_28 = v66;\n                                                                        v41->field_18 = v5;\n                                                                    }\n                                                                }\n                                                                if (v66 != 0 || v41->field_20 != v41->field_18)\n                                                                {\n                                                                    v67 = calloc(0x1, 0x28);\n                                                                    if (v67 != 0)\n                                                                    {\n                                                                        tmp_15 = v41->field_20;\n                                                                        v41->field_28[v41->field_20].field_0 = v67;\n                                                                        v67[0] = v61;\n                                                                        v67[1] = v50;\n                                                                        v41->field_20 = tmp_15 + 1;\n                                                                        sub_40fb20();\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                        if ((v41->field_10 == 0 || (unsigned int)v54 == 0) && (v64 == 0 || (unsigned int)v54 == 0) && (v41->field_10 == 0 || v67 == 0 || v66 == 0) && (v41->field_10 == 0 || v67 == 0 || v41->field_20 == v41->field_18) && (v67 == 0 || v66 == 0 || v64 == 0) && (v67 == 0 || v64 == 0 || v41->field_20 == v41->field_18))\n                                                        {\n                                                            v54 = 12;\n                                                        }\n                                                    }\n                                                    if (*((char *)((*((long long *)(v58 + (v59 << 3))) << 4) + v60 + 8)) != 9 || v12 != *(v62))\n                                                    {\n                                                        v59 += 1;\n                                                        if (v57 == v59)\n                                                        {\n                                                            break;\n                                                        }\n                                                    }\n                                                }\n                                                if (...)\n                                                {\n                                                    v50 = &((char *)v50)[1];\n                                                }\n                                                else if (...)\n                                                {\n                                                    return v54;\n                                                }\n                                            }\n                                        }\n                                        v50 = &((char *)v50)[1];\n                                    }\n                                    if ((unsigned int)v54 == 0 || v20->field_30 > v53 || (*((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1)) && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) && *((long long *)(v20->field_b8 + (v50 << 3))) != 0 && ((unsigned int)v54 == 0 || v20->field_30 > v53) && v3 >= v50 || *((long long *)(v20->field_b8 + (v50 << 3))) != 0 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || *((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1))) && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || (unsigned int)v54 == 0 || v20->field_30 > v53) && (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>) || *((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1)) && (unsigned int)v54 == 0 || *((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1)) && v20->field_30 > v53) && *((long long *)(v20->field_b8 + (v50 << 3))) == 0) && v3 < v50 || v20->field_30 <= v53 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)))\n                                    {\n                                        v2 += 1;\n                                    }\n                                    else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Sub(r12<8>, Load(addr=rbx<8>, size=8, endness=Iend_LE)), 0x0<64>, cc_ndep<8>)) && (*((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1)) || v20->field_30 <= v53) && (*((char *)(v4 + v53)) == *((char *)(v4 + v50 - 1)) || v20->field_58 > v53) && (v20->field_30 <= v53 || *((long long *)(v20->field_b8 + (v50 << 3))) != 0) && (v20->field_58 > v53 || *((long long *)(v20->field_b8 + (v50 << 3))) != 0) && ((unsigned int)v54 == 0 || v20->field_58 > v53 || v20->field_30 > v53))\n                                    {\n                                        return v54;\n                                    }\n                                }\n                            }\n                            v2 += 1;\n                            if (v2 < v20->field_e8)\n                            {\n                                v69 = *(v13);\n                            }\n                            else\n                            {\n                                v70 = v3;\n                                v71 = v8;\n                                v16 = 0;\n                                if (v14 >= v20->field_c8)\n                                {\n                                    break;\n                                }\n                                v72 = v7;\n                                v8 *= 8;\n                                v12 = v71 * 24;\n                                v73 = v20;\n                                v74 = v14;\n                                while (true)\n                                {\n                                    v76 = *((long long *)(v74 + 216)) + v74 * 40;\n                                    if (v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1])\n                                    {\n                                        v77 = v76[3];\n                                        v78 = v76[2];\n                                        v79 = v7[6];\n                                        v4 = v77 - v78;\n                                        if (v77 == v78)\n                                        {\n                                            v3 = v79 + *((long long *)*((long long *)(v72[5] + v12 + 16))) * 24;\n                                        }\n                                        else\n                                        {\n                                            v3 = v79 + *((long long *)&((char *)v8)[v72[3]]) * 24;\n                                        }\n                                        v80 = v77 + v70 - v78;\n                                        v2 = 0;\n                                        v82 = *((long long *)(v74 + 184)) + v80 * 8;\n                                        v83 = *((long long *)&((char *)v11)[*((long long *)(v74 + 184))]);\n                                        v84 = *((long long *)(*((long long *)(v74 + 184)) + v80 * 8));\n                                        if (*((long long *)&((char *)v11)[*((long long *)(v74 + 184))]) != 0)\n                                        {\n                                            v2 = v83->field_10;\n                                        }\n                                        if (v84 != 0)\n                                        {\n                                            v5 = sub_40be50();\n                                            v6 = v49;\n                                            v16 = sub_40b240();\n                                            if (v16 == 0)\n                                            {\n                                                v5 = v6 + *((long long *)(v74 + 184));\n                                                *(v5) = (unsigned int)sub_40b3d0();\n                                                free(*((long long *)&v17));\n                                                v84 = *((long long *)(v74 + 184));\n                                            }\n                                            else\n                                            {\n                                                free(*((long long *)&v17));\n                                                v54 = v16;\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v5 = v82;\n                                            *(v5) = (unsigned int)sub_40b3d0();\n                                        }\n                                        if (v84 == 0 || v16 == 0)\n                                        {\n                                            if ((v84 == 0 || *((long long *)(*((long long *)(v74 + 184)) + (v80 << 3))) == 0) && (*((long long *)((char *)v84 + 0x8 * v80)) == 0 || v84 != 0))\n                                            {\n                                                v54 = v16;\n                                                if (v16 != 0)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                            if (v4 == 0 && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0))\n                                            {\n                                                v2 = v3 + 16;\n                                                v54 = sub_40bd00();\n                                                v16 = v54;\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                v54 = sub_40fcc0();\n                                                v16 = v54;\n                                                if ((unsigned int)v54 != 0)\n                                                {\n                                                    break;\n                                                }\n                                                v74 += 1;\n                                            }\n                                        }\n                                    }\n                                    if (v4 == 0 && v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1] && (v84 == 0 || v16 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && *((long long *)(*((long long *)(v84 + v11)) + 16)) <= v2 || v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1] && (v84 == 0 || v16 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v4 != 0 || v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 != v76[1] || v71 != *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))))\n                                    {\n                                        v74 += 1;\n                                    }\n                                    if (v4 == 0 && v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1] && (v84 == 0 || v16 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && v74 >= *((long long *)(v74 + 200)) || (v4 == 0 && v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1] && (v84 == 0 || v16 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && *((long long *)(*((long long *)(v84 + v11)) + 16)) <= v2 || v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1] && (v84 == 0 || v16 == 0) && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v4 != 0 || v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 != v76[1] || v71 != *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3)))) && v74 >= *((long long *)(v74 + 200)))\n                                    {\n                                        v74 = v73;\n                                    }\n                                }\n                                if (v4 == 0 && (unsigned int)v54 == 0 && (unsigned int)v54 == 0 && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v74 >= *((long long *)(v74 + 200)) || (v71 != *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) || v4 == 0 && *((long long *)(*((long long *)(v84 + v11)) + 16)) <= v2 && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) || v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 != v76[1] || (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) && v4 != 0) && v74 >= *((long long *)(v74 + 200)))\n                                {\n                                    v1 += 1;\n                                }\n                                else if (v4 == 0 && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0) || v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) && v70 == v76[1] && v84 != 0 && v16 != 0 || (v84 == 0 || *((long long *)(*((long long *)(v74 + 184)) + (v80 << 3))) == 0) && (v84 == 0 || v16 == 0) && (v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) || *((long long *)(*((long long *)(v74 + 184)) + (v80 << 3))) == 0) && (v71 == *((long long *)(*((long long *)(v74 + 216)) + (v74 + (v74 << 2) << 3))) || v16 == 0) && (*((long long *)((char *)v84 + 0x8 * v80)) == 0 || *((long long *)(*((long long *)(v74 + 184)) + (v80 << 3))) == 0) && (*((long long *)((char *)v84 + 0x8 * v80)) == 0 || v16 == 0) && (*((long long *)(*((long long *)(v74 + 184)) + (v80 << 3))) == 0 || v70 == v76[1]) && (v70 == v76[1] || v16 == 0) || v4 == 0 && (unsigned int)v54 == 0 && *((long long *)(*((long long *)(v84 + v11)) + 16)) > v2 && (v16 == 0 || *((long long *)((char *)v84 + 0x8 * v80)) != 0))\n                                {\n                                    return v54;\n                                }\n                            }\n                        }\n                        if (v2 >= v20->field_e8)\n                        {\n                            v1 += 1;\n                        }\n                        else if (v41->field_20 > 0 || v3 >= v50 && (v12 == v69[2 * *((long long *)(*((long long *)(v20->field_f8 + (v2 << 3))) + 8))] || v41->field_20 > 0) && (v41->field_20 <= 0 || v2 >= v20->field_e8) || v14 < v20->field_c8 && v2 >= v20->field_e8)\n                        {\n                            return v54;\n                        }\n                    }\n                }\n            }\n            v1 += 1;\n        }\n        if (true)\n        {\n            v54 = 0;\n        }\n        else if (...)\n        {\n            return v54;\n        }\n    }\n    v54 = 0;\n    return v54;\n}\n"
        },
        {
            "funcName": "sub_416230",
            "funcStartAddr": "0x416230",
            "funcEndAddr": "0x41624a",
            "decompiledFuncCode": "int sub_416230()\n{\n    unsigned long long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp+0x8]\n    unsigned long v5;  // [bp+0x10]\n\n    v3 = 1;\n    v2 = v5;\n    v1 = v4;\n    v0 = 0;\n    return sub_415e40();\n}\n"
        },
        {
            "funcName": "sub_405b42",
            "funcStartAddr": "0x405b42",
            "funcEndAddr": "0x405bbd",
            "decompiledFuncCode": "int sub_405b42()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405630();\n}\n"
        },
        {
            "funcName": "sub_4075b0",
            "funcStartAddr": "0x4075b0",
            "funcEndAddr": "0x407606",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_4075b0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_412e40",
            "funcStartAddr": "0x412e40",
            "funcEndAddr": "0x412e52",
            "decompiledFuncCode": "int sub_412e40()\n{\n}\n"
        },
        {
            "funcName": "sub_405e60",
            "funcStartAddr": "0x405e60",
            "funcEndAddr": "0x405e71",
            "decompiledFuncCode": "int sub_405e60()\n{\n}\n"
        },
        {
            "funcName": "sub_408a00",
            "funcStartAddr": "0x408a00",
            "funcEndAddr": "0x408a96",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[32];\n    unsigned long long field_40;\n    char padding_48[67];\n    char field_8b;\n    char padding_8c[4];\n    unsigned int field_90;\n} struct_0;\n\nint sub_408a00()\n{\n    unsigned long v1;  // rsi\n    unsigned long v2;  // rbp\n    struct_0 *v3;  // rdi\n    struct_0 *v4;  // rbx\n    unsigned long long v7;  // rax\n    void *v8;  // rdi\n    unsigned long long v9;  // rax\n    unsigned long long v10;  // rax\n\n    v2 = v1;\n    v4 = v3;\n    if (v3->field_90 > 1 && v1 <= 2305843009213693951)\n    {\n        v7 = realloc(v3->field_10, v1 * 4);\n        if (v7 != 0)\n        {\n            v8 = v4->field_18;\n            v4->field_10 = v7;\n            if (v8 != 0)\n            {\n                v9 = realloc(v8, v2 * 8);\n                if (v9 != 0)\n                {\n                    v4->field_18 = v9;\n                }\n            }\n        }\n    }\n    if (v4->field_8b != 0 && (v1 <= 2305843009213693951 || v3->field_90 <= 1) && (v3->field_90 <= 1 || v7 != 0) && (v8 == 0 || v3->field_90 <= 1 || v9 != 0))\n    {\n        v10 = realloc(v4->field_8, v2);\n        if (v10 != 0)\n        {\n            v4->field_8 = v10;\n        }\n    }\n    if ((v1 <= 2305843009213693951 || v3->field_90 <= 1) && (v4->field_8b == 0 || v10 != 0) && (v3->field_90 <= 1 || v7 != 0) && (v8 == 0 || v3->field_90 <= 1 || v9 != 0))\n    {\n        v4->field_40 = v2;\n        return 0;\n    }\n    return 12;\n}\n"
        },
        {
            "funcName": "sub_40b8c0",
            "funcStartAddr": "0x40b8c0",
            "funcEndAddr": "0x40b965",
            "decompiledFuncCode": "int sub_40b8c0()\n{\n    unsigned int v0;  // [bp-0x4c]\n    char v1;  // [bp-0x38]\n    unsigned long long v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp-0x8]\n    unsigned long long v8;  // r14\n    unsigned long long v9;  // r13\n    unsigned long long v10;  // rdx\n    unsigned long long v12;  // r12\n    unsigned long long v13;  // rbx\n    unsigned long long v14;  // rdx\n    unsigned long long v15;  // rsi\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // rbx\n    unsigned long long v20;  // r12\n    unsigned long long v21;  // r13\n    unsigned long long v22;  // r14\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rcx<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v6 = v8;\n        v5 = v9;\n        v4 = v12;\n        v3 = stack_base + 0;\n        v2 = v13;\n        v18 = 0;\n        while (true)\n        {\n            v14 = *((long long *)(v10 + v18 * 8));\n            if (*((long long *)(v15 + (v18 << 3))) != 0)\n            {\n                if (v14 != 0)\n                {\n                    v17 = sub_40b240();\n                    v0 = v17;\n                    if ((unsigned int)v17 != 0)\n                    {\n                        break;\n                    }\n                    *((unsigned long long *)(v15 + v18 * 8)) = (unsigned int)sub_40b6d0();\n                    free(*((long long *)&v1));\n                    v17 = v0;\n                    if (v0 != 0)\n                    {\n                        break;\n                    }\n                }\n                v18 += 1;\n            }\n            else\n            {\n                *((unsigned long long *)(v15 + v18 * 8)) = v14;\n                v18 += 1;\n            }\n            v17 = 0;\n        }\n        v19 = v2;\n        v20 = v4;\n        v21 = v5;\n        v22 = v6;\n        return v17;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4083a0",
            "funcStartAddr": "0x4083a0",
            "funcEndAddr": "0x4083b6",
            "decompiledFuncCode": "int sub_4083a0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_4082e0();\n}\n"
        },
        {
            "funcName": "sub_40d9b0",
            "funcStartAddr": "0x40d9b0",
            "funcEndAddr": "0x40e171",
            "decompiledFuncCode": "extern int512_t g_400000;\n\nint sub_40d9b0()\n{\n    unsigned long long *v0;  // [bp-0x38]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long long v2;  // rcx\n    unsigned long long *v3;  // r13\n    unsigned long long v4;  // r9\n    unsigned long long v5;  // rbp\n    unsigned long long *v6;  // rbx\n    char *|unsigned long long v7;  // rsi\n    unsigned long long v8;  // rcx\n    unsigned long long v9;  // cc_dep1\n    unsigned long long v10;  // cc_dep2\n    unsigned long v11;  // d\n    char *|unsigned long long v12;  // rdi\n    unsigned long long v13;  // cc_dep1\n    char *|unsigned long long v14;  // r12\n    unsigned long long v15;  // rcx\n    unsigned long long *v16;  // rdx\n    void *v17;  // rax\n    unsigned long long *v18;  // r8\n    unsigned long long v19;  // cc_dep1\n    unsigned long long v20;  // cc_dep2\n    unsigned long long v21;  // r14\n    unsigned long long *v22;  // r13\n    unsigned long long v23;  // cc_dep1\n    unsigned long long v24;  // cc_dep2\n    unsigned long long v25;  // cc_dep1\n    char *v26;  // rdi\n    char *v27;  // rsi\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep2\n    char *v30;  // rdx\n    unsigned long long v31;  // cc_dep1\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    unsigned long long v34;  // rcx\n    char *v35;  // rsi\n    unsigned long long *v36;  // rsi\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // cc_dep1\n    unsigned long long v39;  // cc_dep2\n    char *v40;  // rdx\n    unsigned long long v41;  // cc_dep1\n    unsigned long long v42;  // rax\n    char *v43;  // rdi\n    unsigned long long v44;  // rcx\n    char *v45;  // rsi\n    unsigned long long v46;  // rcx\n    unsigned long long *v47;  // rsi\n    unsigned long long v48;  // cc_dep1\n    unsigned long long v49;  // cc_dep2\n    unsigned long long v50;  // rdx\n    unsigned long long v51;  // cc_dep1\n    unsigned long long v52;  // rax\n    char *v53;  // rdi\n    unsigned long long v54;  // rcx\n    char *v55;  // rsi\n    unsigned long long *v56;  // rsi\n    unsigned long long v57;  // cc_dep1\n    unsigned long long v58;  // cc_dep2\n    unsigned long long v59;  // rdx\n    unsigned long long v60;  // cc_dep1\n    unsigned long long v61;  // rax\n    char *v62;  // rdi\n    unsigned long long v63;  // rcx\n    char *v64;  // rsi\n    unsigned long long *v65;  // rsi\n    unsigned long long v66;  // cc_dep1\n    unsigned long long v67;  // cc_dep2\n    unsigned long long v68;  // rdx\n    unsigned long long v69;  // cc_dep1\n    unsigned long long v70;  // rax\n    char *v71;  // rdi\n    unsigned long long v72;  // rcx\n    char *v73;  // rsi\n    unsigned long long *v74;  // rsi\n    unsigned long long v75;  // cc_dep1\n    unsigned long long v76;  // cc_dep2\n    unsigned long long v77;  // rdx\n    unsigned long long v78;  // cc_dep1\n    unsigned long long v79;  // rax\n    char *v80;  // rdi\n    unsigned long long v81;  // rcx\n    char *v82;  // rsi\n    unsigned long long *v83;  // rsi\n    unsigned long long v84;  // cc_dep1\n    unsigned long long v85;  // cc_dep2\n    unsigned long long v86;  // rdx\n    unsigned long long v87;  // cc_dep1\n    unsigned long long v88;  // rax\n    char *v89;  // rdi\n    unsigned long long v90;  // rcx\n    char *v91;  // rsi\n    unsigned long long *v92;  // rsi\n    unsigned long long v93;  // cc_dep1\n    unsigned long long v94;  // cc_dep2\n    unsigned long long v95;  // rax\n    unsigned long long v96;  // cc_dep1\n    unsigned long long v97;  // rdx\n    char *v98;  // rdi\n    unsigned long long v99;  // rcx\n    char *v100;  // rsi\n    unsigned long long *v101;  // rsi\n    unsigned long long v102;  // cc_dep1\n    unsigned long long v103;  // cc_dep2\n    char *v104;  // rdx\n    unsigned long long v105;  // cc_dep1\n    unsigned long long v106;  // rax\n    unsigned long long v107;  // rax\n    unsigned long long *v108;  // rsi\n    unsigned long long v109;  // rsi\n    unsigned long long v110;  // rax\n    unsigned long long v111;  // rax\n    char *v112;  // rsi\n    unsigned long long *v113;  // rdx\n    unsigned long long v114;  // rax\n    unsigned long long v115;  // rax\n    unsigned long long v116;  // rsi\n    unsigned long long *v117;  // rdx\n    unsigned long long v118;  // rax\n    unsigned long long *v119;  // rdx\n\n    v3 = v2;\n    v14 = v4;\n    v5 = v12;\n    v6 = v7;\n    if (((unsigned int)v1 & 0x400000) != 0)\n    {\n        v12 = \"upper\";\n        v8 = 6;\n        v7 = v4;\n        while (v8 != 0)\n        {\n            v8 -= 1;\n            v9 = *(v7);\n            v10 = *(v12);\n            v12 = &v12[v11];\n            v7 = &v7[v11];\n            break;\n        }\n        v13 = (v9 > v10) - 0 - (v9 < v10);\n        if ((char)v13 == 0)\n        {\n            v14 = \"alpha\";\n        }\n        else\n        {\n            v15 = 6;\n            v12 = \"lower\";\n            v7 = v4;\n            while (v15 != 0)\n            {\n                v15 -= 1;\n                v19 = *(v7);\n                v20 = *(v12);\n                v12 = &v12[v11];\n                v7 = &v7[v11];\n                break;\n            }\n            v32 = *(v3);\n            v14 = ((v19 > v20) - 0 - (v19 < v20) == 0? \"alpha\" : v4);\n            v17 = *(v16);\n        }\n    }\n    if (((unsigned int)v1 & 0x400000) == 0 || (char)v13 == 0)\n    {\n        v32 = *(v3);\n        v17 = *(v16);\n    }\n    if (((unsigned int)v1 & 0x400000) == 0 && *(v18) == *(v3) || (char)v13 == 0 && *(v18) == *(v3) || *(v18) == *(v3) && ((unsigned int)v1 & 0x400000) != 0 && (char)v13 != 0)\n    {\n        v21 = v32 * 2 + 1;\n        v0 = v16;\n        v17 = realloc(v17, (v32 * 2 + 1) * 8);\n    }\n    if (((unsigned int)v1 & 0x400000) == 0 && *(v18) == *(v3) || (char)v13 == 0 && *(v18) == *(v3) || *(v18) == *(v3) && ((unsigned int)v1 & 0x400000) != 0 && (char)v13 != 0)\n    {\n        if (v17 != 0)\n        {\n            *(v0) = v17;\n            *(v18) = v21;\n            v32 = *(v3);\n        }\n        else\n        {\n            v114 = 12;\n        }\n    }\n    if (v17 != 0 || ((unsigned int)v1 & 0x400000) == 0 && *(v18) != *(v3) || (char)v13 == 0 && *(v18) != *(v3) || ((unsigned int)v1 & 0x400000) != 0 && *(v18) != *(v3) && (char)v13 != 0)\n    {\n        *(v3) = v32 + 1;\n        v22 = v17 + v32 * 8;\n        *(v22) = wctype((unsigned int)v14);\n        while (v32 != 0)\n        {\n            v32 -= 1;\n            v23 = *(v7);\n            v24 = *(v12);\n            v12 = &v12[v11];\n            v7 = &v7[v11];\n            break;\n        }\n        v25 = (v23 > v24) - 0 - (v23 < v24);\n        if ((char)v25 != 0)\n        {\n            v26 = \"cntrl\";\n            v46 = 6;\n            v27 = v14;\n            while (v46 != 0)\n            {\n                v46 -= 1;\n                v28 = *(v27);\n                v29 = *(v26);\n                v26 = &v26[v11];\n                v27 = &v27[v11];\n                break;\n            }\n            v31 = (v28 > v29) - 0 - (v28 < v29);\n            if ((char)v31 == 0)\n            {\n                v40 = *((long long *)(unsigned long long)__ctype_b_loc());\n                if (v5 == 0)\n                {\n                    do\n                    {\n                        if ((v40[2 * v46] & 2) != 0)\n                        {\n                            v6[v46 >> 6] = v6[v46 >> 6] | 1 << (v46 & 63);\n                        }\n                        v46 += 1;\n                    }\n                    while (v46 != 0x100);\n                }\n                else\n                {\n                    v42 = 0;\n                    do\n                    {\n                        if ((v40[2 * v42] & 2) != 0)\n                        {\n                            v47 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v42)) >> 3) & 24);\n                            *((long long *)(v6 + v47)) = *((long long *)(v6 + v47)) | 1 << (*((char *)(v5 + v42)) & 63);\n                        }\n                        v42 += 1;\n                    }\n                    while (v42 != 0x100);\n                }\n            }\n            else\n            {\n                v33 = \"lower\";\n                v34 = 6;\n                v35 = v14;\n                while (v34 != 0)\n                {\n                    v34 -= 1;\n                    v38 = *(v35);\n                    v39 = *(v33);\n                    v33 = &v33[v11];\n                    v35 = &v35[v11];\n                    break;\n                }\n                v41 = (v38 > v39) - 0 - (v38 < v39);\n                if ((char)v41 != 0)\n                {\n                    v43 = \"space\";\n                    v44 = 6;\n                    v45 = v14;\n                    while (v44 != 0)\n                    {\n                        v44 -= 1;\n                        v48 = *(v45);\n                        v49 = *(v43);\n                        v43 = &v43[v11];\n                        v45 = &v45[v11];\n                        break;\n                    }\n                    v51 = (v48 > v49) - 0 - (v48 < v49);\n                    if ((char)v51 == 0)\n                    {\n                        v59 = *((long long *)(unsigned long long)__ctype_b_loc());\n                        if (v5 == 0)\n                        {\n                            do\n                            {\n                                if ((*((char *)(v59 + (v44 << 1) + 1)) & 32) != 0)\n                                {\n                                    v6[v44 >> 6] = v6[v44 >> 6] | 1 << (v44 & 63);\n                                }\n                                v44 += 1;\n                            }\n                            while (v44 != 0x100);\n                        }\n                        else\n                        {\n                            v61 = 0;\n                            do\n                            {\n                                if ((*((char *)(v59 + (v61 << 1) + 1)) & 32) != 0)\n                                {\n                                    v65 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v61)) >> 3) & 24);\n                                    *((long long *)(v6 + v65)) = *((long long *)(v6 + v65)) | 1 << (*((char *)(v5 + v61)) & 63);\n                                }\n                                v61 += 1;\n                            }\n                            while (v61 != 0x100);\n                        }\n                    }\n                    else\n                    {\n                        v53 = \"alpha\";\n                        v54 = 6;\n                        v55 = v14;\n                        while (v54 != 0)\n                        {\n                            v54 -= 1;\n                            v57 = *(v55);\n                            v58 = *(v53);\n                            v53 = &v53[v11];\n                            v55 = &v55[v11];\n                            break;\n                        }\n                        v60 = (v57 > v58) - 0 - (v57 < v58);\n                        if ((char)v60 != 0)\n                        {\n                            v62 = \"digit\";\n                            v63 = 6;\n                            v64 = v14;\n                            while (v63 != 0)\n                            {\n                                v63 -= 1;\n                                v66 = *(v64);\n                                v67 = *(v62);\n                                v62 = &v62[v11];\n                                v64 = &v64[v11];\n                                break;\n                            }\n                            v69 = (v66 > v67) - 0 - (v66 < v67);\n                            if ((char)v69 == 0)\n                            {\n                                v77 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                if (v5 == 0)\n                                {\n                                    do\n                                    {\n                                        if ((*((char *)(v77 + (v63 << 1) + 1)) & 8) != 0)\n                                        {\n                                            v6[v63 >> 6] = v6[v63 >> 6] | 1 << (v63 & 63);\n                                        }\n                                        v63 += 1;\n                                    }\n                                    while (v63 != 0x100);\n                                }\n                                else\n                                {\n                                    v79 = 0;\n                                    do\n                                    {\n                                        if ((*((char *)(v77 + (v79 << 1) + 1)) & 8) != 0)\n                                        {\n                                            v83 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v79)) >> 3) & 24);\n                                            *((long long *)(v6 + v83)) = *((long long *)(v6 + v83)) | 1 << (*((char *)(v5 + v79)) & 63);\n                                        }\n                                        v79 += 1;\n                                    }\n                                    while (v79 != 0x100);\n                                }\n                            }\n                            else\n                            {\n                                v71 = \"print\";\n                                v72 = 6;\n                                v73 = v14;\n                                while (v72 != 0)\n                                {\n                                    v72 -= 1;\n                                    v75 = *(v73);\n                                    v76 = *(v71);\n                                    v71 = &v71[v11];\n                                    v73 = &v73[v11];\n                                    break;\n                                }\n                                v78 = (v75 > v76) - 0 - (v75 < v76);\n                                if ((char)v78 == 0)\n                                {\n                                    v86 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                    if (v5 == 0)\n                                    {\n                                        do\n                                        {\n                                            if ((*((char *)(v86 + (v72 << 1) + 1)) & 64) != 0)\n                                            {\n                                                v6[v72 >> 6] = v6[v72 >> 6] | 1 << (v72 & 63);\n                                            }\n                                            v72 += 1;\n                                        }\n                                        while (v72 != 0x100);\n                                    }\n                                    else\n                                    {\n                                        v88 = 0;\n                                        do\n                                        {\n                                            if ((*((char *)(v86 + (v88 << 1) + 1)) & 64) != 0)\n                                            {\n                                                v92 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v88)) >> 3) & 24);\n                                                *((long long *)(v6 + v92)) = *((long long *)(v6 + v92)) | 1 << (*((char *)(v5 + v88)) & 63);\n                                            }\n                                            v88 += 1;\n                                        }\n                                        while (v88 != 0x100);\n                                    }\n                                }\n                                else\n                                {\n                                    v80 = \"upper\";\n                                    v81 = 6;\n                                    v82 = v14;\n                                    while (v81 != 0)\n                                    {\n                                        v81 -= 1;\n                                        v84 = *(v82);\n                                        v85 = *(v80);\n                                        v80 = &v80[v11];\n                                        v82 = &v82[v11];\n                                        break;\n                                    }\n                                    v87 = (v84 > v85) - 0 - (v84 < v85);\n                                    if ((char)v87 == 0)\n                                    {\n                                        v95 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                        if (v5 == 0)\n                                        {\n                                            do\n                                            {\n                                                if ((*((char *)(v95 + (v81 << 1) + 1)) & 1) != 0)\n                                                {\n                                                    v6[v81 >> 6] = v6[v81 >> 6] | 1 << (v81 & 63);\n                                                }\n                                                v81 += 1;\n                                            }\n                                            while (v81 != 0x100);\n                                        }\n                                        else\n                                        {\n                                            v97 = 0;\n                                            do\n                                            {\n                                                if ((*((char *)(v95 + (v97 << 1) + 1)) & 1) != 0)\n                                                {\n                                                    v101 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v97)) >> 3) & 24);\n                                                    *((long long *)(v6 + v101)) = *((long long *)(v6 + v101)) | 1 << (*((char *)(v5 + v97)) & 63);\n                                                }\n                                                v97 += 1;\n                                            }\n                                            while (v97 != 0x100);\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v89 = \"blank\";\n                                        v90 = 6;\n                                        v91 = v14;\n                                        while (v90 != 0)\n                                        {\n                                            v90 -= 1;\n                                            v93 = *(v91);\n                                            v94 = *(v89);\n                                            v89 = &v89[v11];\n                                            v91 = &v91[v11];\n                                            break;\n                                        }\n                                        v96 = (v93 > v94) - 0 - (v93 < v94);\n                                        if ((char)v96 == 0)\n                                        {\n                                            v104 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                            if (v5 == 0)\n                                            {\n                                                do\n                                                {\n                                                    if ((v104[2 * v90] & 1) != 0)\n                                                    {\n                                                        v6[v90 >> 6] = v6[v90 >> 6] | 1 << (v90 & 63);\n                                                    }\n                                                    v90 += 1;\n                                                }\n                                                while (v90 != 0x100);\n                                            }\n                                            else\n                                            {\n                                                v106 = 0;\n                                                do\n                                                {\n                                                    if ((v104[2 * v106] & 1) != 0)\n                                                    {\n                                                        v108 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v106)) >> 3) & 24);\n                                                        *((long long *)(v6 + v108)) = *((long long *)(v6 + v108)) | 1 << (*((char *)(v5 + v106)) & 63);\n                                                    }\n                                                    v106 += 1;\n                                                }\n                                                while (v106 != 0x100);\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v98 = \"graph\";\n                                            v99 = 6;\n                                            v100 = v14;\n                                            while (v99 != 0)\n                                            {\n                                                v99 -= 1;\n                                                v102 = *(v100);\n                                                v103 = *(v98);\n                                                v98 = &v98[v11];\n                                                v100 = &v100[v11];\n                                                break;\n                                            }\n                                            v105 = (v102 > v103) - 0 - (v102 < v103);\n                                            if ((char)v105 == 0)\n                                            {\n                                                v109 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                                if (v5 == 0)\n                                                {\n                                                    do\n                                                    {\n                                                        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x6<64>, Conv(16->64, Load(addr=(rsi<8> + (rax<8> << 0x1<8>)), size=2, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))\n                                                        {\n                                                            v6[v99 >> 6] = v6[v99 >> 6] | 1 << (v99 & 63);\n                                                        }\n                                                        v99 += 1;\n                                                    }\n                                                    while (v99 != 0x100);\n                                                }\n                                                else\n                                                {\n                                                    v111 = 0;\n                                                    do\n                                                    {\n                                                        if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x6<64>, Conv(16->64, Load(addr=(rsi<8> + (rax<8> << 0x1<8>)), size=2, endness=Iend_LE)), 0x0<64>, cc_ndep<8>))\n                                                        {\n                                                            v113 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v111)) >> 3) & 24);\n                                                            *((long long *)(v6 + v113)) = *((long long *)(v6 + v113)) | 1 << (*((char *)(v5 + v111)) & 63);\n                                                        }\n                                                        v111 += 1;\n                                                    }\n                                                    while (v111 != 0x100);\n                                                }\n                                            }\n                                            else\n                                            {\n                                                v107 = strcmp(v14, \"punct\");\n                                                if (v107 == 0)\n                                                {\n                                                    v112 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                                    if (v5 == 0)\n                                                    {\n                                                        do\n                                                        {\n                                                            if ((v112[2 * v99] & 4) != 0)\n                                                            {\n                                                                v6[v99 >> 6] = v6[v99 >> 6] | 1 << (v99 & 63);\n                                                            }\n                                                            v99 += 1;\n                                                        }\n                                                        while (v99 != 0x100);\n                                                    }\n                                                    else\n                                                    {\n                                                        v115 = 0;\n                                                        do\n                                                        {\n                                                            if ((v112[2 * v115] & 4) != 0)\n                                                            {\n                                                                v117 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v115)) >> 3) & 24);\n                                                                *((long long *)(v6 + v117)) = *((long long *)(v6 + v117)) | 1 << (*((char *)(v5 + v115)) & 63);\n                                                            }\n                                                            v115 += 1;\n                                                        }\n                                                        while (v115 != 0x100);\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    v110 = strcmp(v14, \"x\");\n                                                    if (v110 == 0)\n                                                    {\n                                                        v116 = *((long long *)(unsigned long long)__ctype_b_loc());\n                                                        if (v5 == 0)\n                                                        {\n                                                            do\n                                                            {\n                                                                if ((*((char *)(v116 + (v99 << 1) + 1)) & 16) != 0)\n                                                                {\n                                                                    v6[v99 >> 6] = v6[v99 >> 6] | 1 << (v99 & 63);\n                                                                }\n                                                                v99 += 1;\n                                                            }\n                                                            while (v99 != 0x100);\n                                                        }\n                                                        else\n                                                        {\n                                                            v118 = 0;\n                                                            do\n                                                            {\n                                                                if ((*((char *)(v116 + (v118 << 1) + 1)) & 16) != 0)\n                                                                {\n                                                                    v119 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v118)) >> 3) & 24);\n                                                                    *((long long *)(v6 + v119)) = *((long long *)(v6 + v119)) | 1 << (*((char *)(v5 + v118)) & 63);\n                                                                }\n                                                                v118 += 1;\n                                                            }\n                                                            while (v118 != 0x100);\n                                                        }\n                                                    }\n                                                    else\n                                                    {\n                                                        v114 = 4;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v68 = *((long long *)(unsigned long long)__ctype_b_loc());\n                            if (v5 == 0)\n                            {\n                                do\n                                {\n                                    if ((*((char *)(v68 + (v54 << 1) + 1)) & 4) != 0)\n                                    {\n                                        v6[v54 >> 6] = v6[v54 >> 6] | 1 << (v54 & 63);\n                                    }\n                                    v54 += 1;\n                                }\n                                while (v54 != 0x100);\n                            }\n                            else\n                            {\n                                v70 = 0;\n                                do\n                                {\n                                    if ((*((char *)(v68 + (v70 << 1) + 1)) & 4) != 0)\n                                    {\n                                        v74 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v70)) >> 3) & 24);\n                                        *((long long *)(v6 + v74)) = *((long long *)(v6 + v74)) | 1 << (*((char *)(v5 + v70)) & 63);\n                                    }\n                                    v70 += 1;\n                                }\n                                while (v70 != 0x100);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    v50 = *((long long *)(unsigned long long)__ctype_b_loc());\n                    if (v5 == 0)\n                    {\n                        do\n                        {\n                            if ((*((char *)(v50 + (v34 << 1) + 1)) & 2) != 0)\n                            {\n                                v6[v34 >> 6] = v6[v34 >> 6] | 1 << (v34 & 63);\n                            }\n                            v34 += 1;\n                        }\n                        while (v34 != 0x100);\n                    }\n                    else\n                    {\n                        v52 = 0;\n                        do\n                        {\n                            if ((*((char *)(v50 + (v52 << 1) + 1)) & 2) != 0)\n                            {\n                                v56 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v52)) >> 3) & 24);\n                                *((long long *)(v6 + v56)) = *((long long *)(v6 + v56)) | 1 << (*((char *)(v5 + v52)) & 63);\n                            }\n                            v52 += 1;\n                        }\n                        while (v52 != 0x100);\n                    }\n                }\n            }\n        }\n        else\n        {\n            v30 = *((long long *)(unsigned long long)__ctype_b_loc());\n            if (v5 == 0)\n            {\n                do\n                {\n                    if ((v30[2 * v32] & 8) != 0)\n                    {\n                        v6[v32 >> 6] = v6[v32 >> 6] | 1 << (v32 & 63);\n                    }\n                    v32 += 1;\n                }\n                while (v32 != 0x100);\n            }\n            else\n            {\n                v37 = 0;\n                do\n                {\n                    if ((v30[2 * v37] & 8) != 0)\n                    {\n                        v36 = (unsigned long long)((unsigned int)((unsigned long long)(char)*((char *)(v5 + v37)) >> 3) & 24);\n                        *((long long *)(v6 + v36)) = *((long long *)(v6 + v36)) | 1 << (*((char *)(v5 + v37)) & 63);\n                    }\n                    v37 += 1;\n                }\n                while (v37 != 0x100);\n            }\n        }\n        if (...)\n        {\n            v114 = 0;\n        }\n    }\n    return v114;\n}\n"
        },
        {
            "funcName": "sub_4157c0",
            "funcStartAddr": "0x4157c0",
            "funcEndAddr": "0x4157de",
            "decompiledFuncCode": "int sub_4157c0()\n{\n}\n"
        },
        {
            "funcName": "sub_405630",
            "funcStartAddr": "0x405630",
            "funcEndAddr": "0x4057d0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_61d318;\nextern uint128_t g_61d320;\nextern unsigned int g_61d330;\nextern int512_t g_61d4c0;\n\nint sub_405630()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long|unsigned long long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_61d318;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_61d330 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_61d318 != 6411040)\n            {\n                v16 = sub_406510();\n                g_61d318 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_406510();\n                v17 = v15;\n                g_61d318 = v15;\n                *(v15) = g_61d320;\n            }\n            memset(&v17[(long long)(int)g_61d330], 0x0, (int)((unsigned int)v13 + 1 - g_61d330) * 16);\n            g_61d330 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_403510(); /* do not return */\n        }\n    }\n    if ((unsigned int)v13 != 2147483647 || g_61d330 > (unsigned int)v13)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_404400();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6411456)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_4064b0();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_404400();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_40c070",
            "funcStartAddr": "0x40c070",
            "funcEndAddr": "0x40c131",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[152];\n    struct struct_3 *field_98;\n} struct_2;\n\nint sub_40c070()\n{\n    void tmp_19;  // tmp #19\n    void tmp_22;  // tmp #22\n    unsigned long long v1;  // rsi\n    unsigned long long *v4;  // rdx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // rax\n    struct_2 *v7;  // rdi\n    unsigned long long v8;  // r8\n    unsigned int v9;  // r10d\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rcx\n    unsigned int v12;  // edi\n    unsigned short v13;  // di\n    unsigned long long v14;  // rsi\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v5 = *(v4);\n        v6 = (unsigned int)(sub_40be50() & 1);\n        v14 = 0;\n        v8 = *(v7->field_98);\n        v9 = v6;\n        while (true)\n        {\n            v10 = *((long long *)(v5 + v14 * 8));\n            v11 = (unsigned long long)(unsigned int)*((int *)(*((long long *)(v5 + v14 * 8)) * 16 + v8 + 8)) >> 8;\n            v12 = (unsigned long long)(unsigned int)*((int *)(*((long long *)(v5 + v14 * 8)) * 16 + v8 + 8)) >> 8;\n            v13 = (unsigned short)((unsigned long long)(unsigned int)*((int *)(*((long long *)(v5 + v14 * 8)) * 16 + v8 + 8)) >> 8) & 1023;\n            if (...)\n            {\n                v14 += 1;\n                if (v14 == v1)\n                {\n                    break;\n                }\n            }\n            if (*((char *)((*((long long *)(v5 + (v14 << 3))) << 4) + v8 + 8)) == 2 && ((char)rdi<4> & 128) != 0 && v13 != 0 && (v9 == 0 || ((char)v11 & 8) == 0) && ((v13 & 32) == 0 || ((char)tmp_19 & 2) != 0) && ((v11 & 4) == 0 || v9 != 0) && ((char)tmp_22 & 8) != 0 || *((char *)((*((long long *)(v5 + (v14 << 3))) << 4) + v8 + 8)) == 2 && v13 != 0 && (v9 == 0 || ((char)v11 & 8) == 0) && ((v13 & 32) == 0 || ((char)tmp_19 & 2) != 0) && ((v11 & 4) == 0 || v9 != 0) && ((char)rdi<4> & 128) == 0 || *((char *)((*((long long *)(v5 + (v14 << 3))) << 4) + v8 + 8)) == 2 && v13 == 0)\n            {\n                return v10;\n            }\n        }\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405ea0",
            "funcStartAddr": "0x405ea0",
            "funcEndAddr": "0x405efd",
            "decompiledFuncCode": "int sub_405ea0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_404300",
            "funcStartAddr": "0x404300",
            "funcEndAddr": "0x4043df",
            "decompiledFuncCode": "extern int512_t g_41775e;\nextern int512_t g_417762;\n\nint sub_404300()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_416370();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_41775e : 4290409);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_417762 : 4290405);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if (v3[3] == 45 && v3[5] == 0 && v1 == v2 && (v3[1] & 223) == 84 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 && v3[4] == 56 || v4 == 71 && v3[3] == 56 && (v3[1] & 223) == 66 && v1 == v2 && v3[4] == 48 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_40d700",
            "funcStartAddr": "0x40d700",
            "funcEndAddr": "0x40d872",
            "decompiledFuncCode": "extern int512_t g_419a80;\n\nint sub_40d700()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long long v6[29];  // rdi\n    unsigned long long v7[29];  // r12\n    unsigned long v8;  // rbx\n    unsigned long long v10;  // rbx\n    unsigned long long v12;  // rbx\n    unsigned long long v16;  // r13\n    unsigned long long *v17;  // rdi\n    unsigned long long v18;  // rbx\n    unsigned long long v19[3];  // rbp\n\n    v2 = v4;\n    v1 = v5;\n    v7 = v6;\n    v0 = v8;\n    if (*(v6) != 0 && v7[2] != 0)\n    {\n        v10 = 0;\n        while (true)\n        {\n            v10 += 1;\n            sub_4097a0();\n            if (v7[2] <= v10)\n            {\n                break;\n            }\n        }\n    }\n    v12 = 0;\n    free(v7[3]);\n    if (v7[2] != 0)\n    {\n        do\n        {\n            if (v7[6] != 0)\n            {\n                free(*((long long *)(v7[6] + v12 * 24 + 16)));\n            }\n            if (v7[7] != 0)\n            {\n                free(*((long long *)(v7[7] + v12 * 24 + 16)));\n            }\n            if (v7[5] != 0)\n            {\n                free(*((long long *)(v7[5] + v12 * 24 + 16)));\n            }\n            v12 += 1;\n        }\n        while (v7[2] > v12);\n    }\n    v16 = 0;\n    free(v7[5]);\n    free(v7[6]);\n    free(v7[7]);\n    free(*(v7));\n    v17 = v7[8];\n    if (v7[8] != 0)\n    {\n        while (true)\n        {\n            v18 = 0;\n            v19 = &v17[3 * v16];\n            if (v17[2 * v16 + v16] > 0)\n            {\n                while (true)\n                {\n                    v18 += 1;\n                    sub_409cf0();\n                    if (v18 >= *(v19))\n                    {\n                        break;\n                    }\n                }\n            }\n            v16 += 1;\n            free(v19[2]);\n            if (v7[17] < v16)\n            {\n                break;\n            }\n            v17 = v7[8];\n        }\n        v17 = v7[8];\n    }\n    free(v17);\n    if (v7[15] != 4299392)\n    {\n        free(v7[15]);\n    }\n    free(v7[28]);\n}\n"
        },
        {
            "funcName": "sub_404260",
            "funcStartAddr": "0x404260",
            "funcEndAddr": "0x4042f9",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_61d4b8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_404260()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_61d4b8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405de0",
            "funcStartAddr": "0x405de0",
            "funcEndAddr": "0x405de9",
            "decompiledFuncCode": "int sub_405de0()\n{\n}\n"
        },
        {
            "funcName": "sub_416150",
            "funcStartAddr": "0x416150",
            "funcEndAddr": "0x4161a0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n} struct_0;\n\nint sub_416150()\n{\n    unsigned long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    unsigned long v2;  // [bp-0x18]\n    unsigned long v3;  // [bp-0x10]\n    unsigned long v4;  // [bp-0x8]\n    unsigned long v6;  // r8\n    unsigned long v7;  // r14\n    unsigned long v8;  // r13\n    unsigned long v9;  // r12\n    unsigned long v10;  // rbx\n    char *v12;  // rsi\n\n    if (((unsigned int)v6 & -8) == 0)\n    {\n        v4 = v7;\n        v3 = v8;\n        v2 = v9;\n        v1 = stack_base + 0;\n        v0 = v10;\n        if ((v6 & 4) == 0)\n        {\n            strlen(v12);\n        }\n    }\n    else\n    {\n        return 2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405e40",
            "funcStartAddr": "0x405e40",
            "funcEndAddr": "0x405e52",
            "decompiledFuncCode": "int sub_405e40()\n{\n}\n"
        },
        {
            "funcName": "sub_404060",
            "funcStartAddr": "0x404060",
            "funcEndAddr": "0x4040fe",
            "decompiledFuncCode": "extern unsigned int g_417705;\nextern unsigned int g_61d2c0;\nextern char g_61d4a8;\nextern unsigned long long g_61d4b0;\n\nint sub_404060()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4162b0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_61d4a8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x417705, 0x5);\n            if (g_61d4b0 != 0)\n            {\n                sub_405cd0();\n                error(0x0, *(v2), \"%s: \");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_61d4a8 != 0)\n    {\n        v3 = sub_4162b0();\n    }\n    if ((unsigned int)v3 == 0 && (*(v2) == 32 || v1 == 0) && (v1 == 0 || g_61d4a8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_61d2c0);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        },
        {
            "funcName": "sub_40a120",
            "funcStartAddr": "0x40a120",
            "funcEndAddr": "0x40a17a",
            "decompiledFuncCode": "int sub_40a120()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long *v2;  // r8\n    unsigned long v3;  // rdi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rsi\n    unsigned long long v8;  // rdi\n\n    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v2 = *(v1);\n        v8 = v3 - 1;\n        for (v7 = 0; v7 < v8; v8 = v6)\n        {\n            if (v4 > v2[v7 + v8 >> 1])\n            {\n                v5 = v6;\n                v6 = v8;\n            }\n            else\n            {\n                for (v6 = v7 + v8 >> 1; v7 < v6; v6 = v5)\n                {\n                    v5 = 0 + v6 >> 1;\n                    if (v2[0 + v6 >> 1] < v4)\n                    {\n                        break;\n                    }\n                }\n                if (v7 < v6)\n                {\n                    v7 = v5 + 1;\n                }\n            }\n            v7 = v5 + 1;\n        }\n        return v7 + 1;\n    }\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_4057d0",
            "funcStartAddr": "0x4057d0",
            "funcEndAddr": "0x405804",
            "decompiledFuncCode": "int sub_4057d0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_4066b0();\n}\n"
        },
        {
            "funcName": "sub_415e40",
            "funcStartAddr": "0x415e40",
            "funcEndAddr": "0x415f54",
            "decompiledFuncCode": "int sub_415e40()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x3c]\n    unsigned long v5;  // [bp+0x10]\n    unsigned long v6;  // [bp+0x18]\n    unsigned int v7;  // [bp+0x20]\n    unsigned long v8;  // r8\n    unsigned long v9;  // rbp\n    unsigned long v10;  // rdx\n    unsigned long v11;  // rbx\n    unsigned long v12;  // rdi\n    unsigned long v14;  // r9\n    unsigned long long v15;  // r13\n    unsigned long long v16;  // rbx\n    void *v17;  // rsi\n    void *v19;  // rcx\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // rax\n\n    v9 = v8;\n    v11 = v10;\n    v12 = v8 % 0x8000000000000000;\n    v21 = v7;\n    if ((char)(v6 >> 63) == 0 && dil<1> == 0 && !((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rbx<8>, rbp<8>, cc_ndep<8>)))\n    {\n        if (v9 != 0)\n        {\n            v15 = 0;\n            if (v11 != 0)\n            {\n                v3 = v7;\n                v6 = v6;\n                v2 = v14;\n                v15 = malloc(v11 + v9);\n                if (v15 != 0)\n                {\n                    memcpy(v15, v17, v11);\n                    memcpy(v15 + v11, v19, v9);\n                    v21 = v3;\n                }\n            }\n        }\n        else\n        {\n            v15 = 0;\n        }\n        if (v11 == 0 || v9 == 0 || v15 != 0)\n        {\n            v1 = v21;\n            v0 = v5;\n            v16 = (unsigned int)sub_4159e0();\n            free(v15);\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x4<64>, rbx<8>, rbp<8>, cc_ndep<8>) || (char)(v6 >> 63) != 0 || dil<1> != 0 || v15 == 0 && v11 != 0 && v9 != 0)\n    {\n        v16 = -2;\n    }\n    v22 = v16;\n    return v22;\n}\n"
        },
        {
            "funcName": "sub_403290",
            "funcStartAddr": "0x403290",
            "funcEndAddr": "0x403337",
            "decompiledFuncCode": "extern unsigned int g_4169be;\nextern unsigned int g_416bc8;\nextern unsigned long long stderr;\n\nint sub_403290()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v6;  // r12\n    unsigned long v7;  // rsi\n    unsigned long long v9;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    sub_404210();\n    v6 = (unsigned int)sub_405e80();\n    dcgettext(0x0, 0x416bc8, 0x5);\n    __fprintf_chk();\n    if (v7 != 0)\n    {\n        v9 = (unsigned int)sub_404210();\n        dcgettext(0x0, 0x4169be, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        fputc(0xa, stderr);\n    }\n    sub_402fb0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_405b30",
            "funcStartAddr": "0x405b30",
            "funcEndAddr": "0x405b42",
            "decompiledFuncCode": "int sub_405b30()\n{\n}\n"
        },
        {
            "funcName": "sub_40abd0",
            "funcStartAddr": "0x40abd0",
            "funcEndAddr": "0x40ad61",
            "decompiledFuncCode": "int sub_40abd0()\n{\n    unsigned long long v0;  // [bp-0x20]\n    void tmp_21;  // tmp #21\n    unsigned long v1;  // [bp-0x18]\n    unsigned long long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long long v5[3];  // rsi\n    unsigned long long v6;  // r10\n    unsigned long long v7[3];  // rdx\n    unsigned long long v8;  // r13\n    unsigned long long v9;  // r12\n    unsigned long long v10[3];  // r12\n    unsigned long long v11[3];  // rbp\n    unsigned long long v12;  // rbx\n    unsigned long long v13[3];  // rdi\n    unsigned long long v14[3];  // rbx\n    unsigned long long v15;  // rcx\n    unsigned long long v16;  // r13\n    unsigned long v17;  // r13\n    unsigned long long v19;  // r8\n    unsigned long long *v20;  // r13\n    unsigned long long *v21;  // r11\n    unsigned long long *v22;  // rax\n    unsigned long long *v23;  // r10\n    unsigned long long *|unsigned long long v24;  // rsi\n    unsigned long long *v25;  // rcx\n    unsigned long long v26;  // r8\n    unsigned long long v27;  // rdx\n    unsigned long long v28;  // cc_dep1\n    unsigned long long v29;  // cc_dep2\n    unsigned long long v30;  // r9\n    unsigned long long *v31;  // r10\n    unsigned long long v32;  // r8\n    unsigned long long v33;  // rcx\n    unsigned long long *v34;  // r10\n    unsigned long long *v35;  // rax\n    unsigned long long *v36;  // r9\n    unsigned long v37;  // rdx\n    unsigned long long v38;  // rdx\n    unsigned long long *v39;  // rdi\n    void *v40;  // rsi\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // rbx\n    unsigned long long v44;  // r12\n    unsigned long long v45;  // r13\n\n    v6 = v5[1];\n    if (v5[1] != 0)\n    {\n        v19 = v7[1];\n        if (v7[1] != 0)\n        {\n            v3 = v8;\n            v2 = v9;\n            v10 = v7;\n            v1 = stack_base + 0;\n            v11 = v5;\n            v0 = v12;\n            v14 = v13;\n            v15 = v13[1];\n            v16 = *(v13);\n            v39 = v13[2];\n            if (v5[1] + v7[1] + v15 > v16)\n            {\n                v17 = v16 + v5[1] + v7[1];\n                v39 = realloc(v39, v17 * 8);\n                if (v39 != 0)\n                {\n                    v15 = v14[1];\n                    v6 = v11[1];\n                    v14[2] = v39;\n                    v14[0] = v17;\n                    v19 = v7[1];\n                }\n                else\n                {\n                    v42 = 12;\n                }\n            }\n            if (v5[1] + v7[1] + v15 <= v16 || v39 != 0)\n            {\n                v20 = v11[2];\n                v21 = v10[2];\n                tmp_21 = v15 + v6;\n                v22 = v19 - 1;\n                v23 = v6 - 1;\n                v24 = tmp_21 + v19;\n                v25 = v15 - 1;\n                v26 = *((long long *)(v11[2] + v23 * 8));\n                v27 = *((long long *)(v10[2] + v22 * 8));\n                while (true)\n                {\n                    v28 = v26;\n                    v29 = v27;\n                    if (v28 < v29)\n                    {\n                        v22 = (char *)&v22[-1] + 7;\n                        if ((char)((char *)&v22[-1] + 7 >> 63))\n                        {\n                            break;\n                        }\n                    }\n                    v27 = *((long long *)((char *)v21 + 0x8 * v22));\n                    v28 = v26;\n                    v29 = *((long long *)((char *)v21 + 0x8 * v22));\n                    if (v26 == *((long long *)((char *)v21 + 0x8 * v22)) || v26 == v27)\n                    {\n                        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                        {\n                            while (true)\n                            {\n                                v30 = *((long long *)((char *)v39 + 0x8 * v25));\n                                if (*((long long *)((char *)v39 + 0x8 * v25)) > v26)\n                                {\n                                    v25 = (char *)&v25[-1] + 7;\n                                    if (v25 == -1)\n                                    {\n                                        break;\n                                    }\n                                }\n                                else\n                                {\n                                    break;\n                                }\n                            }\n                            if (true)\n                            {\n                                v24 -= 1;\n                                *((unsigned long long *)((char *)v39 + 0x8 * v24)) = v26;\n                            }\n                            else if (*((long long *)((char *)v39 + 0x8 * v25)) <= v26)\n                            {\n                                v23 = (char *)&v23[-1] + 7;\n                                if ((char)((char *)&v23[-1] + 7 >> 63))\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        v24 -= 1;\n                        *((unsigned long long *)((char *)v39 + 0x8 * v24)) = v26;\n                        v22 = (char *)&v22[-1] + 7;\n                        if ((char)((char *)&v22[-1] + 7 >> 63))\n                        {\n                            break;\n                        }\n                        v26 = *((long long *)((char *)v20 + 0x8 * v23));\n                    }\n                    v31 = (char *)&v23[-1] + 7;\n                    if ((char)((char *)&v23[-1] + 7 >> 63))\n                    {\n                        break;\n                    }\n                    v26 = *((long long *)((char *)v20 + 0x8 * v31));\n                }\n                v35 = v14[1] - 1;\n                v36 = v11[1] + v14[1] + v10[1] - 1;\n                v37 = v11[1] + v14[1] + v10[1] - v24;\n                v14[1] = v14[1] + v11[1] + v14[1] + v10[1] - v24;\n                if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    while (true)\n                    {\n                        v32 = *((long long *)((char *)v39 + 0x8 * v36));\n                        v33 = *((long long *)((char *)v39 + 0x8 * v35));\n                        v34 = (char *)v39 + 0x8 * ((char *)v35 + v37);\n                        if (*((long long *)((char *)v39 + 0x8 * v36)) > *((long long *)((char *)v39 + 0x8 * v35)))\n                        {\n                            v36 = (char *)&v36[-1] + 7;\n                            *(v34) = v32;\n                            v37 -= 1;\n                            v39 = v14[2];\n                            v38 = 0;\n                        }\n                        else\n                        {\n                            v35 = (char *)&v35[-1] + 7;\n                            *(v34) = v33;\n                            v38 = v37 * 8;\n                            v39 = v14[2];\n                        }\n                    }\n                }\n                else\n                {\n                    v38 = v37 * 8;\n                }\n                v40 = &v39[v24];\n                memcpy(v39, v40, v38);\n                v42 = 0;\n            }\n            v43 = v0;\n            v44 = v2;\n            v45 = v3;\n            return v42;\n        }\n    }\n    if (v5[1] == 0 || v7[1] == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405b00",
            "funcStartAddr": "0x405b00",
            "funcEndAddr": "0x405b0a",
            "decompiledFuncCode": "int sub_405b00()\n{\n}\n"
        },
        {
            "funcName": "sub_404170",
            "funcStartAddr": "0x404170",
            "funcEndAddr": "0x4041f9",
            "decompiledFuncCode": "int sub_404170()\n{\n    unsigned int v1;  // [bp+0x100008]\n    char *v2;  // rdi\n    char *v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rax\n    unsigned int v6;  // r12d\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned int v10;  // ebp\n    unsigned long long v12;  // rax\n\n    v9 = fopen(v2, v3);\n    if (v9 != 0)\n    {\n        v4 = fileno(v9);\n        if (v4 <= 2)\n        {\n            v5 = sub_405f00();\n            v6 = v5;\n            if ((unsigned int)v5 >= 0)\n            {\n                v7 = sub_4073b0();\n                if (v7 == 0)\n                {\n                    v9 = fdopen(v6, v3);\n                }\n                if (v9 == 0 || v7 != 0)\n                {\n                    v10 = *((int *)v9);\n                    close(v6);\n                    *(__errno_location()) = v10;\n                    v9 = 0;\n                }\n            }\n            else\n            {\n                v9 = 0;\n                sub_4073b0();\n                *(__errno_location()) = v1;\n            }\n        }\n    }\n    v12 = v9;\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_40eb30",
            "funcStartAddr": "0x40eb30",
            "funcEndAddr": "0x40f207",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[72];\n    struct struct_1 *field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[72];\n    unsigned long long field_48;\n    char padding_50[72];\n    unsigned long long field_98;\n    char padding_a0[24];\n    unsigned long long field_b8;\n    char padding_c0[32];\n    unsigned int field_e0;\n} struct_3;\n\ntypedef struct struct_4 {\n    char padding_0[40];\n    unsigned long long field_28;\n    struct struct_5 *field_30;\n    char padding_38[48];\n    char field_68;\n} struct_4;\n\nint sub_40eb30()\n{\n    unsigned int|unsigned long v0;  // [bp-0xf8]\n    unsigned long long *v1;  // [bp-0xf0]\n    unsigned long long v2;  // [bp-0xe8]\n    unsigned long long *v3;  // [bp-0xe0]\n    unsigned long long v4[4];  // [bp-0xd8]\n    unsigned long v5;  // [bp-0xd0]\n    unsigned long v6;  // [bp-0xc0]\n    unsigned long v7;  // [bp-0xb8]\n    unsigned long long v8;  // [bp-0xb0]\n    unsigned long long v9[3];  // [bp-0xa8]\n    unsigned long v10;  // [bp-0xa0]\n    unsigned long v11;  // [bp-0x98]\n    unsigned long v12;  // [bp-0x90]\n    unsigned int v13;  // [bp-0x80]\n    unsigned int v14;  // [bp-0x7c]\n    uint128_t|unsigned long long v15;  // [bp-0x78]\n    unsigned long long v16;  // [bp-0x70]\n    unsigned long long v17;  // [bp-0x68]\n    uint128_t v18;  // [bp-0x58]\n    unsigned long long v19;  // [bp-0x50]\n    unsigned long long v20;  // [bp-0x48]\n    struct_0 *v22;  // rdi\n    struct_3 *v23;  // r12\n    unsigned long long v24;  // rcx\n    unsigned long long v26[3];  // rsi\n    unsigned long long v27;  // r15\n    unsigned long v28;  // r8\n    unsigned long long *v29;  // rdx\n    unsigned long v30;  // r9\n    unsigned long v31;  // rbx\n    unsigned long long v34;  // rax\n    unsigned long long *v36;  // r14\n    unsigned long long v37;  // rcx\n    unsigned long long *|unsigned long long v38;  // rax\n    unsigned long long v39;  // r14\n    unsigned long long *v40;  // r13\n    unsigned long long v41;  // rax\n    unsigned long long v42;  // rbx\n    unsigned long long v43;  // rdx\n    unsigned long long v44;  // rax\n    unsigned long long v45;  // rax\n    unsigned long long v47;  // rax\n    unsigned long long v49;  // r14\n    struct_4 *v50;  // r15\n    unsigned long long|unsigned long long * v51;  // rbx\n    unsigned long long v52;  // rax\n\n    v23 = v22;\n    v27 = v26[1];\n    v9[0] = v26;\n    v12 = v28;\n    v4[0] = v22->field_98;\n    v6 = *((long long *)(v29 * 16 + v22->field_98->field_0));\n    v13 = 0;\n    if ((int)v22->field_e0 + v30 >= v26[1])\n    {\n        v31 = (int)v22->field_e0 + v30 + 1;\n        if (9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1 && v27 + v31 <= 2305843009213693951)\n        {\n            v34 = realloc(v9[2], (v26[1] + (int)v22->field_e0 + v30 + 1) * 8);\n            if (v34 != 0)\n            {\n                v9[2] = v34;\n                v9[1] = v27 + v31;\n                memset(v34 + v27 * 8, 0x0, v31 * 8);\n            }\n        }\n    }\n    if ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951 && v34 != 0 && 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1)\n    {\n        v51 = *(v9);\n        v36 = v9[2];\n        v10 = v23->field_b8;\n        v37 = v23->field_48;\n        *((unsigned long long [3])&v23->field_b8) = v9[2];\n        v11 = v37;\n        v15 = 1;\n        v16 = 1;\n        v17 = malloc(0x8);\n    }\n    if ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951 && v34 != 0 && 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1)\n    {\n        if (v51 != 0)\n        {\n            v23->field_48 = v51;\n            v0 = sub_40be50();\n        }\n        else\n        {\n            v23->field_48 = v51;\n            v0 = sub_40be50();\n        }\n        if (v17 != 0)\n        {\n            *((unsigned long long **)v17) = v29;\n            v51 = v24;\n            v13 = 0;\n            v13 = (int)sub_40aa90();\n            if (v13 == 0 && v16 != 0)\n            {\n                v13 = sub_40b970();\n            }\n        }\n    }\n    if (false)\n    {\n        v50 = *((long long *)((char *)v36 + 0x8 * v51));\n        v17 = 0;\n        v15 = 0;\n        v52 = sub_40b1c0();\n        v13 = v52;\n    }\n    if (v17 == 0 || v34 == 0 && (int)v22->field_e0 + v30 >= v26[1] || 9223372036854775807 - v26[1] < (int)v22->field_e0 + v30 + 1 && (int)v22->field_e0 + v30 >= v26[1] || (int)v22->field_e0 + v30 >= v26[1] && v27 + v31 > 2305843009213693951)\n    {\n        v52 = 12;\n    }\n    if (v13 == 0 && v17 != 0 && ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 != 0 || v13 == 0 && v17 != 0 && ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 == 0)\n    {\n        v50 = (unsigned long long)(unsigned int)sub_40b3d0();\n    }\n    if ((v13 == 0 && v17 != 0 && ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 != 0 || v13 == 0 && v17 != 0 && ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 == 0) && v50 == 0 && v13 == 0 || (v13 == 0 && v17 != 0 && ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 != 0 || v13 == 0 && v17 != 0 && ((int)v22->field_e0 + v30 < v26[1] || v27 + v31 <= 2305843009213693951) && ((int)v22->field_e0 + v30 < v26[1] || v34 != 0) && ((int)v22->field_e0 + v30 < v26[1] || 9223372036854775807 - v26[1] >= (int)v22->field_e0 + v30 + 1) && v16 == 0) && v50 != 0)\n    {\n        *((struct_4 **)(v23->field_b8 + v51 * 8)) = v50;\n        if (v51 < v30 && v23->field_e0 >= 0)\n        {\n            v2 = 0;\n            v38 = v23->field_b8;\n            v49 = (char *)v51 + 1;\n            do\n            {\n                v16 = 0;\n                v0 = v49 - 1;\n                v3 = v49 * 8;\n                if (v38[v49] != 0)\n                {\n                    v13 = sub_40a660();\n                    if (v13 != 0)\n                    {\n                        break;\n                    }\n                }\n                else if (v50 == 0)\n                {\n                    v51 = v49;\n                }\n                if (v50 != 0 && (v13 == 0 || v38[v49] == 0))\n                {\n                    v14 = 0;\n                    v18 = 0;\n                    v20 = 0;\n                    if (v50->field_28 > 0)\n                    {\n                        v8 = v49;\n                        v5 = &v22->field_98[6].field_18;\n                        v39 = 0;\n                        while (true)\n                        {\n                            v40 = v50->field_30[v39];\n                            if ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0)\n                            {\n                                v41 = sub_40e8a0();\n                                if ((unsigned int)v41 > 1)\n                                {\n                                    v1 = v40 * 8;\n                                    v42 = v41 + v0;\n                                    v43 = *((long long *)(v22->field_98->field_18 + v40 * 8));\n                                    v19 = 0;\n                                    if (*((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0)\n                                    {\n                                        v7 = v43;\n                                        v14 = sub_40a660();\n                                    }\n                                    if (v14 == 0 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) == 0)\n                                    {\n                                        v45 = sub_408b10();\n                                        if (v45 != 0)\n                                        {\n                                            *((unsigned long long *)(v42 * 8 + v23->field_b8)) = (unsigned int)sub_40b6d0();\n                                        }\n                                    }\n                                    if (v14 != 0 && (*((long long *)(v23->field_b8 + (v42 << 3))) == 0 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0) && (v45 != 0 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) != 0))\n                                    {\n                                        v49 = v8;\n                                        free(v20);\n                                        v13 = v14;\n                                        if (v14 != 0)\n                                        {\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0 || (unsigned int)v41 <= 1 && (unsigned int)v41 == 0)\n                            {\n                                v44 = sub_40bf40();\n                            }\n                            if (((unsigned int)v41 <= 1 || (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0) && ((unsigned int)v41 != 0 || v44 != 0) && ((*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 || v44 != 0))\n                            {\n                                v1 = v40 * 8;\n                            }\n                            if ((unsigned int)v41 <= 1 && v44 != 0 || (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0 && v44 != 0 || (unsigned int)v41 <= 1 && (unsigned int)v41 != 0 && (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 || v14 == 0 && v45 != 0 && (unsigned int)v41 > 1 && (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 || *((long long *)(v23->field_b8 + (v41 + v0 << 3))) == 0 && v45 != 0 && (unsigned int)v41 > 1 && (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) != 0 && *((long long *)(v23->field_b8 + (v42 << 3))) != 0)\n                            {\n                                v47 = sub_408b10();\n                            }\n                            if (...)\n                            {\n                                free(v20);\n                                v13 = 12;\n                            }\n                            if (...)\n                            {\n                                v39 += 1;\n                                v49 = v8;\n                            }\n                        }\n                        if (v39 >= v50->field_28 && (v44 == 0 || v47 != 0) && ((unsigned int)v41 == 0 || (*((char *)(v22->field_98->field_0 + (v50->field_30[v39] << 4) + 10)) & 16) == 0 || v47 != 0))\n                        {\n                            free(NULL);\n                            v13 = 0;\n                        }\n                        else if (false)\n                        {\n                            v51 = v49;\n                        }\n                        else if (...)\n                        {\n                            free(v17);\n                            v52 = v13;\n                        }\n                    }\n                    free(NULL);\n                    v13 = 0;\n                }\n                if (v13 == 0 && v38[v49] != 0 || v38[v49] == 0 && v50 != 0)\n                {\n                    v51 = v49;\n                    if (v16 != 0)\n                    {\n                        v13 = (int)sub_40aa90();\n                        v13 = sub_40b970();\n                        if (v13 != 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                sub_40be50();\n                v50 = (unsigned long long)(unsigned int)sub_40b3d0();\n                if (v50 != 0)\n                {\n                    v38 = v23->field_b8;\n                    v2 = 0;\n                    *((struct_4 **)&((char *)v3)[v23->field_b8]) = v50;\n                }\n                else\n                {\n                    if (v13 != 0)\n                    {\n                        break;\n                    }\n                    v38 = v23->field_b8;\n                    v2 += 1;\n                    *((long long *)&((char *)v3)[v23->field_b8]) = 0;\n                }\n                if (v30 <= v49)\n                {\n                    break;\n                }\n                v49 += 1;\n            }\n            while ((int)v23->field_e0 >= v2);\n            if (v50 == 0 || v38[v49] != 0 || v50 != 0 && v50->field_28 > 0 || v50 != 0 && v16 != 0)\n            {\n                free(v17);\n                v52 = v13;\n            }\n            else\n            {\n                free(v17);\n            }\n        }\n    }\n    if (...)\n    {\n        free(v17);\n        v52 = v13;\n    }\n    if (...)\n    {\n        free(v17);\n        if (*((long long *)(v23->field_b8 + (v30 << 3))) != 0)\n        {\n            v9[0] = v51;\n            v23->field_b8 = v10;\n            v23->field_48 = v11;\n            v52 = (char)(sub_40a120() == 0);\n        }\n        else\n        {\n            v9[0] = v51;\n            v23->field_b8 = v10;\n            v23->field_48 = v11;\n            v52 = 1;\n        }\n    }\n    return v52;\n}\n"
        },
        {
            "funcName": "sub_40a3b0",
            "funcStartAddr": "0x40a3b0",
            "funcEndAddr": "0x40a5f2",
            "decompiledFuncCode": "int sub_40a3b0()\n{\n    unsigned long v0;  // [bp-0x70]\n    unsigned long v1;  // [bp-0x68]\n    unsigned long v2;  // [bp-0x60]\n    unsigned long v3;  // [bp-0x58]\n    unsigned long long v4;  // [bp-0x50]\n    unsigned long long v5;  // [bp-0x48]\n    unsigned long v6;  // [bp+0x8]\n    unsigned long long v7;  // rbx\n    unsigned long long v8[28];  // rdi\n    unsigned long long v9;  // r15\n    unsigned long v10;  // r8\n    unsigned long long v11;  // r10\n    unsigned long long v12;  // r13\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rbx\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // rbp\n    unsigned long long v17;  // r10\n    unsigned long long v18;  // r14\n    unsigned long long v19;  // rbp\n    unsigned long long *v20;  // rsi\n    unsigned long v21;  // r9\n    unsigned long long v22;  // r14\n    unsigned long v23;  // rcx\n    unsigned int v24;  // ebx\n    unsigned long long v25;  // rax\n    unsigned long long v26;  // rax\n\n    v7 = 0;\n    v9 = v8[25];\n    *((unsigned long long [28])&v0) = v8[19];\n    for (v13 = v8[25]; v7 < v13; v13 = v11)\n    {\n        if (v10 > *((long long *)(v8[27] + (((v7 + v13 >> 63) + v7 + v13 >> 1) + ((v7 + v13 >> 63) + v7 + v13 >> 1 << 2) << 3) + 8)))\n        {\n            v12 = v11;\n            v11 = v13;\n        }\n        else\n        {\n            for (v11 = (v7 + v13 >> 63) + v7 + v13 >> 1; 0 < v11; v11 = v13)\n            {\n                v13 = (0 + v11 >> 63) + 0 + v11 >> 1;\n                v12 = (0 + v11 >> 63) + 0 + v11 >> 1;\n                if (*((long long *)(v8[27] + (((0 + v11 >> 63) + 0 + v11 >> 1) + ((0 + v11 >> 63) + 0 + v11 >> 1 << 2) << 3) + 8)) < v10)\n                {\n                    break;\n                }\n            }\n            if (0 < v11)\n            {\n                v7 = v12 + 1;\n            }\n        }\n        v7 = v12 + 1;\n    }\n    v14 = -1;\n    v14 = (v10 != *((long long *)(v8[27] + (v7 + (v7 << 2) << 3) + 8))? -1 : v7);\n    v15 = v9;\n    for (v16 = 0; v16 < v15; v15 = v17)\n    {\n        if (v6 > *((long long *)(v8[27] + (((v16 + v15 >> 63) + v16 + v15 >> 1) + ((v16 + v15 >> 63) + v16 + v15 >> 1 << 2) << 3) + 8)))\n        {\n            v18 = v17;\n            v17 = v15;\n        }\n        else\n        {\n            for (v17 = (v16 + v15 >> 63) + v16 + v15 >> 1; v16 < v17; v17 = v15)\n            {\n                v15 = (0 + v17 >> 63) + 0 + v17 >> 1;\n                v18 = (0 + v17 >> 63) + 0 + v17 >> 1;\n                if (*((long long *)(v8[27] + (((0 + v17 >> 63) + 0 + v17 >> 1) + ((0 + v17 >> 63) + 0 + v17 >> 1 << 2) << 3) + 8)) < v6)\n                {\n                    break;\n                }\n            }\n            if (v16 < v17)\n            {\n                v16 = v18 + 1;\n            }\n        }\n        v16 = v18 + 1;\n    }\n    v19 = -1;\n    v19 = (v6 != *((long long *)(v8[27] + (v16 + (v16 << 2) << 3) + 8))? -1 : v16);\n    if (*(v20) > 0)\n    {\n        v3 = v21;\n        v22 = 0;\n        v2 = v10;\n        v1 = v23;\n        v4 = v14;\n        v5 = v19;\n        while (true)\n        {\n            v24 = sub_408990();\n            v25 = sub_408990();\n            if (v24 != v25)\n            {\n                v26 = 1;\n            }\n            else\n            {\n                v22 += 1;\n                if (v22 >= *(v20))\n                {\n                    break;\n                }\n            }\n        }\n        if (v24 == v25)\n        {\n            v26 = 0;\n        }\n        else if (v24 != v25)\n        {\n            return v26;\n        }\n    }\n    v26 = 0;\n    return v26;\n}\n"
        },
        {
            "funcName": "sub_40d698",
            "funcStartAddr": "0x40d698",
            "funcEndAddr": "0x40d6f4",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[24];\n    unsigned long long field_18;\n    char padding_20[8];\n    unsigned int field_28;\n    char padding_2c[4];\n    char field_30;\n    char padding_31[7];\n    unsigned long long field_38;\n} struct_0;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_1;\n\nint sub_40d698()\n{\n    unsigned long long v0;  // [bp+0x0]\n    struct_0 *v2;  // rbx\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rdx\n    unsigned long long v5;  // rax\n    unsigned long long v7;  // rbx\n\n    v2->field_18 = v3;\n    v4 = (unsigned int)sub_4097f0();\n    v2->field_38 = v4;\n    if (v4 != -1)\n    {\n        v5 = 0;\n        if (v2->field_30 == 12)\n        {\n            *((unsigned int *)(v4 * 16 + v0 + 8)) = *((int *)(v4 * 16 + v0 + 8)) & -261889 | (unsigned int)((unsigned long long)(v2->field_28 & 1023) * 0x100);\n        }\n    }\n    else\n    {\n        v5 = 12;\n    }\n    v7 = v0;\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_405870",
            "funcStartAddr": "0x405870",
            "funcEndAddr": "0x405883",
            "decompiledFuncCode": "extern int512_t g_61d5c0;\n\nint sub_405870()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_61d5c0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_61d5c0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403c10",
            "funcStartAddr": "0x403c10",
            "funcEndAddr": "0x403c6b",
            "decompiledFuncCode": "extern unsigned int g_416a14;\nextern char g_61d478;\nextern struct_0 *g_61d4a0;\n\nint sub_403c10()\n{\n    unsigned long long v0;  // [bp-0x8]\n    unsigned long long v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbx\n\n    if (g_61d4a0 != 0)\n    {\n        return g_61d4a0->field_18;\n    }\n    v0 = v2;\n    if (g_61d478 == 0)\n    {\n        v3 = sub_403630();\n        if (v3 != 0)\n        {\n            v4 = v0;\n            return g_61d4a0->field_18;\n        }\n    }\n    if (v3 == 0 || g_61d478 != 0)\n    {\n        error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x416a14, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_408c40",
            "funcStartAddr": "0x408c40",
            "funcEndAddr": "0x408d32",
            "decompiledFuncCode": "typedef struct struct_3 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    struct struct_4 *field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_3;\n\nint sub_408c40()\n{\n    unsigned long long v1[18];  // rdi\n    unsigned long long v2[18];  // r14\n    struct_3 *v3;  // rsi\n    unsigned long v5;  // r15\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long *v10;  // r13\n    unsigned long long v11[3];  // rbx\n    unsigned long long *v12;  // rdx\n    unsigned long long *v13;  // rax\n    unsigned long v14;  // rsi\n    unsigned long long v15;  // r12\n    unsigned long v16;  // rsi\n\n    v2 = v1;\n    v5 = v3->field_10;\n    v3->field_0 = v6;\n    v3->field_28 = 0;\n    v3->field_20 = v5;\n    v7 = malloc(v5 * 8);\n    v3->field_30 = v7;\n    if (v7 != 0)\n    {\n        v9 = 0;\n        if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) > *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))))\n        {\n            v10 = v6 & v2[17];\n            v11 = v2[8] + v10 * 24;\n            v12 = *((long long *)(v2[8] + v10 * 24));\n            v13 = *((long long *)(v2[8] + v10 * 24 + 16));\n            v14 = *((long long *)(v2[8] + v10 * 24)) + 1;\n            if (*((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) > *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))) || v13 != 0)\n            {\n                v11[0] = v14;\n                *((struct_3 **)((char *)v13 + 0x8 * v12)) = v3;\n                return 0;\n            }\n        }\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            do\n            {\n                if ((*((char *)((v3->field_18[v9] << 4) + *(v1) + 8)) & 8) == 0)\n                {\n                    v8 = sub_408aa0();\n                    if (v8 == 0)\n                    {\n                        break;\n                    }\n                }\n                v9 += 1;\n            }\n            while (v3->field_10 > v9);\n            if (v8 != 0 || (*((char *)((v3->field_18[v9] << 4) + *(v1) + 8)) & 8) != 0)\n            {\n                v10 = v6 & v2[17];\n                v11 = v2[8] + v10 * 24;\n                v12 = *((long long *)(v2[8] + v10 * 24));\n                v13 = *((long long *)(v2[8] + v10 * 24 + 16));\n                v14 = *((long long *)(v2[8] + v10 * 24)) + 1;\n            }\n            else if ((*((char *)((v3->field_18[v9] << 4) + *(v1) + 8)) & 8) == 0)\n            {\n                return 12;\n            }\n        }\n        else if (*((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) <= *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))))\n        {\n            v15 = v14 * 2;\n            v16 = v14 * 16;\n            v13 = realloc(*((long long *)(v1[8] + v10 * 24 + 16)), v16);\n            if (v13 != 0)\n            {\n                v12 = *(v11);\n                v11[2] = v13;\n                v11[1] = v15;\n                v14 = (char *)v12 + 1;\n            }\n        }\n    }\n    if (v7 == 0 || (char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) && *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) <= *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))) && v13 == 0 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x10<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)) && *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3) + 8)) > *((long long *)(v2[8] + ((char *)v10 + 0x2 * v10 << 3))))\n    {\n        return 12;\n    }\n}\n"
        },
        {
            "funcName": "sub_408b10",
            "funcStartAddr": "0x408b10",
            "funcEndAddr": "0x408c24",
            "decompiledFuncCode": "int sub_408b10()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v2;  // rbp\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // rbx\n    unsigned long v5;  // rsi\n    unsigned long long v6;  // rax\n    unsigned long v7;  // rsi\n    unsigned long long v8;  // rax\n    unsigned long long v9;  // rdx\n    unsigned long long v10;  // rcx\n    unsigned long long v11[2];  // rdx\n    unsigned long long v12;  // rcx\n\n    v2 = v1;\n    v4 = v3;\n    if (*(v3) != 0)\n    {\n        v7 = v3[1];\n        v8 = v3[2];\n        if (v3[1] == 0)\n        {\n            *((unsigned long long *)v3[2]) = v2;\n            v6 = 1;\n            v3[1] = v3[1] + 1;\n        }\n        else\n        {\n            if (*(v3) == v3[1])\n            {\n                v5 = v3[1] * 16;\n                *(v3) = v3[1] * 2;\n                v8 = realloc(v8, v5);\n                if (v8 != 0)\n                {\n                    v4[2] = v8;\n                    v7 = v4[1];\n                }\n                else\n                {\n                    v6 = 0;\n                }\n            }\n            if (*(v3) != v3[1] || v8 != 0)\n            {\n                v9 = v7 * 8;\n                if (!(*((long long *)v8) > v2))\n                {\n                    v10 = *((long long *)(v8 + v9 - 8));\n                    if (v2 < *((long long *)(v8 + v9 - 8)))\n                    {\n                        do\n                        {\n                            *((unsigned long long *)(v8 + v9)) = v10;\n                            v9 -= 8;\n                            v10 = *((long long *)(v8 + v9 - 8));\n                        }\n                        while (*((long long *)(v8 + v9 - 8)) > v2);\n                    }\n                }\n                else if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)))\n                {\n                    v11 = v9 + v8;\n                    do\n                    {\n                        v12 = v11[-1];\n                        v11 = &v11[-1];\n                        v11[1] = v12;\n                    }\n                    while (v11 != v8);\n                    v9 = 0;\n                }\n                *((unsigned long long *)(v8 + v9)) = v2;\n                v6 = 1;\n                v4[1] = v4[1] + 1;\n            }\n        }\n    }\n    else\n    {\n        v3[0] = 1;\n        v3[1] = 1;\n        v6 = malloc(0x8);\n        v3[2] = v6;\n        if (v6 != 0)\n        {\n            *((unsigned long long *)v6) = v1;\n            return 1;\n        }\n        v4[1] = 0;\n        v4[0] = 0;\n    }\n    if (v6 == 0 || *(v3) != 0)\n    {\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_405cd0",
            "funcStartAddr": "0x405cd0",
            "funcEndAddr": "0x405ce1",
            "decompiledFuncCode": "int sub_405cd0()\n{\n}\n"
        },
        {
            "funcName": "sub_409cf0",
            "funcStartAddr": "0x409cf0",
            "funcEndAddr": "0x409d49",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_0;\n\nint sub_409cf0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned long long v3[13];  // rdi\n    unsigned long long v4[13];  // rbx\n\n    v0 = v2;\n    v4 = v3;\n    free(v3[6]);\n    free(v4[9]);\n    if (v4[10] != &v4[1])\n    {\n        free(*((long long *)(v4[10] + 16)));\n        free(v4[10]);\n    }\n    free(v4[3]);\n    free(v4[12]);\n    free(v4[11]);\n}\n"
        },
        {
            "funcName": "sub_406660",
            "funcStartAddr": "0x406660",
            "funcEndAddr": "0x406677",
            "decompiledFuncCode": "int sub_406660()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_4064b0();\n}\n"
        },
        {
            "funcName": "sub_403430",
            "funcStartAddr": "0x403430",
            "funcEndAddr": "0x40347a",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[1304];\n    unsigned long long field_518;\n} struct_0;\n\nint sub_403430()\n{\n    char v0;  // [bp+0x0]\n    unsigned long long v2;  // rdi\n    unsigned long long *v4;  // rsi\n    struct_0 *v5;  // rdi\n    void *v6;  // rbx\n\n    v5 = *(v4);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            v6 = v5->field_518;\n            free(v5);\n            v5 = v6;\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n    }\n    *(v4) = 0;\n    *((long long *)v2) = 0;\n    return (unsigned long long)free(*((long long *)&v0));\n}\n"
        },
        {
            "funcName": "sub_40ad90",
            "funcStartAddr": "0x40ad90",
            "funcEndAddr": "0x40ae66",
            "decompiledFuncCode": "typedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    uint128_t field_30;\n    unsigned long long field_40;\n} struct_1;\n\nint sub_40ad90()\n{\n    unsigned int *v0;  // [bp-0x28]\n    void tmp_10;  // tmp #10\n    unsigned long long v1;  // [bp-0x20]\n    unsigned long long v3;  // rdi\n    unsigned long long *v4;  // rbx\n    unsigned int *v5;  // rsi\n    unsigned long long v6;  // rdx\n    unsigned long long v7;  // r9\n    unsigned long long v8;  // rdi\n    unsigned long long *v9;  // rdx\n    unsigned int v10;  // eax\n    unsigned long long *v11;  // r10\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // rsi\n    struct_1 *v14;  // rdi\n    unsigned long long *v15;  // rcx\n    uint128_t *v16;  // r8\n\n    v4 = v3;\n    v8 = (int)*(v5);\n    if (*(v5) != 15)\n    {\n        v11 = *(v4);\n        v10 = v8 + 1;\n        v7 = v8 * 64 + 8;\n    }\n    else\n    {\n        v1 = v6;\n        v0 = v5;\n        v11 = malloc(0x3c8);\n        if (v11 != 0)\n        {\n            tmp_10 = *(v4);\n            v7 = 8;\n            *(v4) = v11;\n            v8 = 0;\n            v9 = v1;\n            *(v11) = tmp_10;\n            v10 = 1;\n        }\n        else\n        {\n            v12 = 0;\n        }\n    }\n    if (*(v5) != 15 || v11 != 0)\n    {\n        *(v0) = v10;\n        v12 = (char *)v11 + v7;\n        v13 = v8 * 64;\n        v14 = &v11[8 * v8];\n        v14->field_8 = 0;\n        v14->field_10 = v9;\n        v14->field_18 = v15;\n        v14->field_30 = *(v16);\n        *(&((char *)v11)[58 + v13]) = *(&((char *)v11)[58 + v13]) & 243;\n        v14->field_20 = 0;\n        v14->field_28 = 0;\n        v14->field_40 = -1;\n        if (v9 != 0)\n        {\n            *(v9) = v12;\n        }\n        if (v15 != 0)\n        {\n            *(v15) = v12;\n        }\n    }\n    return v12;\n}\n"
        },
        {
            "funcName": "sub_406700",
            "funcStartAddr": "0x406700",
            "funcEndAddr": "0x4067d5",
            "decompiledFuncCode": "int sub_406700()\n{\n    unsigned long v0;  // [bp-0x40]\n    unsigned long v1;  // [bp+0x8]\n    unsigned long v3;  // rdx\n    unsigned int v4;  // ebp\n    unsigned long v5;  // rcx\n    unsigned int *v6;  // r14\n\n    if (rbp<4> == 0)\n    {\n        if (v0 >= v3 && v0 <= v5)\n        {\n            return v0;\n        }\n        if (v0 < v3 || v0 > v5)\n        {\n            v6 = __errno_location();\n            if (v0 <= 1073741823)\n            {\n                *(v6) = (v0 <= -1073741825? 75 : 34);\n            }\n        }\n    }\n    else\n    {\n        rbp<4> = sub_406820();\n        v6 = __errno_location();\n        if (v4 != 1 && v4 == 3)\n        {\n            *(v6) = 0;\n        }\n    }\n    if (v0 < v3 || rbp<4> != 0 || v0 > v5)\n    {\n        if ((rbp<4> == 0 || v4 == 1) && (rbp<4> != 0 || v0 > 1073741823))\n        {\n            *(v6) = 75;\n        }\n        sub_405e80();\n        error(((int)v1 == 0? 1 : (int)v1), (*(v6) == 22? 0 : *(v6)), \"%s: \");\n    }\n}\n"
        },
        {
            "funcName": "sub_4097a0",
            "funcStartAddr": "0x4097a0",
            "funcEndAddr": "0x4097c0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_0;\n\nint sub_4097a0()\n{\n    struct_0 *v1;  // rdi\n\n    if ((v1->field_8 & 262399) != 6 && (v1->field_8 & 262399) != 3)\n    {\n        return v1->field_8 & 262399;\n    }\n}\n"
        },
        {
            "funcName": "sub_407d10",
            "funcStartAddr": "0x407d10",
            "funcEndAddr": "0x408277",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_418fb0;\nextern unsigned int g_418ff4;\n\nint sub_407d10()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned int v13;  // edi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    char *|unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned int|unsigned long long v24;  // r9\n    char *[3]|unsigned long long * v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned int v40;  // eax\n    unsigned long long v41;  // rcx\n    unsigned int|unsigned long long v42;  // edx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned long long *v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char [2]|char * v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if (v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v23 != 0 || v9 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if (v0->field_18 == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (*(v19) == 0 || v0->field_18 == 0 && v19 == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || v8->field_20 == 0 && ((char)(v18 - 43) & 253) == 0 && v0->field_18 != 0 && (unsigned int)v17 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v24;\n                        sub_407610();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if (v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if (v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if (v13 != (unsigned int)v26)\n            {\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v42 = v0->field_2c;\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = v0->field_2c;\n                    if ((unsigned int)v42 != v39)\n                    {\n                        if (v0->field_2c != v8->field_30)\n                        {\n                            sub_407610();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = v0->field_2c;\n                        v42 = v40;\n                    }\n                    *((unsigned long long **)&v0->field_30) = v46;\n                    *((unsigned long long **)&v0->field_0) = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                *((unsigned long long *)&v5) = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = (unsigned long long)v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || v13 == (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if ((v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || v13 != (unsigned int)v26 && v13 > 0 && (*(v19) == 0 || v19 == 0 || ((char)(v18 - 43) & 253) == 0) && (*(v19) == 0 || v19 == 0 || v0->field_18 != 0) && (*(v19) == 0 || v19 == 0 || (unsigned int)v17 != 0) && (v0->field_18 == 0 || v8->field_20 == 0 || *(v19) == 0 || (unsigned int)v17 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_4076f0();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char **)&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = *(v19);\n        v7 = &v19[1];\n        v5 = *(v19);\n        v51 = strchr(v50, *(v19));\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x418fb0, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x418ff4, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if (v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x418fb0, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W \";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_4076f0();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_416100",
            "funcStartAddr": "0x416100",
            "funcEndAddr": "0x416144",
            "decompiledFuncCode": "int sub_416100()\n{\n    char v0;  // [bp-0x8]\n    unsigned long long v2[6];  // rdi\n    unsigned long long v3[6];  // rbx\n    void *v6;  // rdi\n\n    v3 = v2;\n    if (*(v2) != 0)\n    {\n        sub_40d700();\n    }\n    v3[0] = 0;\n    v6 = v3[4];\n    v3[1] = 0;\n    free(v6);\n    v3[4] = 0;\n    v3[5] = 0;\n    return (unsigned long long)free(*((long long *)(*((long long *)&v0) + 40)));\n}\n"
        },
        {
            "funcName": "sub_412be0",
            "funcStartAddr": "0x412be0",
            "funcEndAddr": "0x4130c0",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char padding_20[8];\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[16];\n    unsigned long long field_48;\n    char padding_50[8];\n    unsigned long long field_58;\n    char padding_60[8];\n    unsigned long long field_68;\n    char padding_70[27];\n    char field_8b;\n    char field_8c;\n    char padding_8d[3];\n    unsigned int field_90;\n} struct_1;\n\ntypedef struct struct_4 {\n    char padding_0[8];\n    char field_8;\n} struct_4;\n\ntypedef struct struct_0 {\n    char field_0;\n    char padding_1[7];\n    char field_8;\n    char padding_9[1];\n    char field_a;\n} struct_0;\n\nint sub_412be0()\n{\n    void tmp_8;  // tmp #8\n    unsigned int|unsigned long v0;  // [bp-0x50]\n    struct_1 *v2;  // rsi\n    unsigned int *v3;  // r12\n    struct_4 *v4;  // rdi\n    unsigned int v5;  // edx\n    unsigned int v6;  // r15d\n    unsigned long long v7;  // rdx\n    struct_1 *v8;  // r13\n    unsigned int v9;  // eax\n    struct_0 *v10;  // rdi\n    struct_0 *v11;  // rbx\n    unsigned int|unsigned long v12;  // rbp\n    unsigned long long v13;  // rax\n    unsigned short v15;  // ax\n    unsigned int v16;  // ecx\n    void *v17;  // rcx\n    char v19;  // al\n    unsigned long long v20;  // rsi\n    char *v21;  // rdi\n    unsigned long long v22;  // rax\n    unsigned int|unsigned long long v23;  // r14d\n    unsigned long long v25;  // rdi\n    char *v26;  // rsi\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned short v29;  // ax\n    char v30;  // al\n    unsigned long long v31;  // r14\n    unsigned long long v32;  // r14\n\n    v3 = v2->field_48;\n    if (v2->field_68 > v2->field_48)\n    {\n        v6 = v5;\n        v7 = v2->field_8;\n        v8 = v2;\n        v9 = v2->field_90;\n        v11 = v10;\n        v12 = (char)*((char *)(v2->field_8 + v2->field_48));\n        v10->field_a = v10->field_a & 4294966943;\n        *((unsigned long *)&v10->field_0) = v12;\n        if (v9 > 1)\n        {\n            if (v2->field_48 != v2->field_30 && *((int *)(v2->field_10 + (v2->field_48 << 2))) == -1)\n            {\n                *((int *)&v10->field_8) = *((int *)&v10->field_8) & -0x200100 | 2097153;\n                v13 = 1;\n            }\n            if ((v2->field_48 == v2->field_30 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1) && *((char *)(v2->field_8 + v2->field_48)) != 92)\n            {\n                tmp_8 = v2->field_10;\n                v10->field_8 = 1;\n                v0 = v7;\n                v19 = iswalnum(*((int *)(tmp_8 + v3 * 4))) != 0;\n                v11->field_a = v11->field_a & 4294966975 | (unsigned int)((unsigned long long)(rax<4> | (unsigned int)v2->field_10) * 64);\n            }\n        }\n        else if (*((char *)(v2->field_8 + v2->field_48)) != 92)\n        {\n            v10->field_8 = 1;\n            v0 = v0;\n            v15 = (unsigned long long)(unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (unsigned long long)(char)*((char *)(v2->field_8 + v2->field_48)) * 2)) >> 3;\n            v10->field_a = v10->field_a & 4294966943 | (unsigned int)((unsigned long long)((unsigned int)rax<8> & 1 | v16) * 64);\n        }\n        if (*((char *)(v2->field_8 + v2->field_48)) != 92)\n        {\n            if (v2->field_48 == v2->field_30 || v9 <= 1 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1)\n            {\n                if ((char)((unsigned int)(char)*((char *)(v2->field_8 + v2->field_48)) - 10) <= 115)\n                {\n                    /* goto *((long long *)((unsigned long long)((unsigned int)(char)*((char *)(v2->field_8 + v2->field_48)) - 10) * 8 + 4297200)); */\n                }\n                else\n                {\n                    v13 = 1;\n                }\n            }\n        }\n        else\n        {\n            if (v2->field_48 == v2->field_30 || v9 <= 1 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1)\n            {\n                v17 = (char *)v3 + 1;\n                if ((char *)v3 + 1 >= v2->field_58)\n                {\n                    v10->field_8 = 36;\n                    return 1;\n                }\n                if (v2->field_8b != 0)\n                {\n                    if (v2->field_90 > 1)\n                    {\n                        v12 = *((int *)(v8->field_10 + v17 * 4));\n                        if ((*((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) == -1 || *((int *)(v8->field_10 + (v17 << 2))) == -1) && (*((int *)(v8->field_10 + (v17 << 2))) == -1 || v8->field_30 != &((char *)v3)[2]))\n                        {\n                            v22 = (char)*(&((char *)v3)[1 + v2->field_8]);\n                            v11->field_8 = 1;\n                            v23 = v0;\n                            v11->field_0 = v0;\n                            v0 = v22;\n                        }\n                    }\n                    if (v2->field_90 <= 1 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                    {\n                        v20 = v2->field_0;\n                        v21 = v8->field_28;\n                        if (v8->field_8c != 0)\n                        {\n                            v26 = &v21[v20 + *((long long *)(v8->field_18 + v17 * 8))];\n                            v23 = *(v26);\n                            v0 = *(v26);\n                        }\n                        else\n                        {\n                            v25 = (char)*((char *)(v20 + v17 + v21));\n                            v23 = v25;\n                            v0 = v23;\n                        }\n                    }\n                }\n                if (v2->field_8b == 0 || v2->field_90 <= 1 && (*(v26) & 128) != 0 && v8->field_8c != 0 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 && (*(v26) & 128) != 0 && v8->field_8c != 0 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1 && (*(v26) & 128) != 0 && v8->field_8c != 0)\n                {\n                    v0 = (char)*(&((char *)v3)[1 + v0]);\n                    v23 = (char)*(&((char *)v3)[1 + v0]);\n                }\n                if (v2->field_90 <= 1 || v2->field_8b == 0 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                {\n                    *((unsigned long long *)&v11->field_0) = v23;\n                    v11->field_8 = 1;\n                }\n                if (v2->field_90 <= 1 || v2->field_8b == 0 || v8->field_30 == &((char *)v3)[2] && *((int *)(v8->field_10 + (v17 << 2))) != -1 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) != -1 && *((int *)(v8->field_10 + (v17 << 2))) != -1)\n                {\n                    if (v9 > 1)\n                    {\n                        v12 = (unsigned int)*((int *)(v8->field_10 + v17 * 4));\n                    }\n                    else\n                    {\n                        v28 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v23 * 2));\n                        v29 = v28 >> 3;\n                        v11->field_a = (unsigned int)(((unsigned int)rax<8> & 1 | v7) * 64) | v11->field_a & 4294966975;\n                    }\n                }\n                if (v9 > 1 || *((int *)(v8->field_10 + (v17 << 2))) == -1 && v2->field_90 > 1 && v2->field_8b != 0 || *((int *)(v2->field_10 + (v2->field_48 + 1 << 2) + 4)) == -1 && v2->field_90 > 1 && v8->field_30 != &((char *)v3)[2] && v2->field_8b != 0)\n                {\n                    v27 = iswalnum(v12);\n                    v30 = v27 != 0;\n                    v11->field_a = v11->field_a & 4294966975 | (unsigned int)((rax<4> | v7) * 64);\n                }\n                v31 = v23 - 39;\n                switch (v31)\n                {\n                case 0:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 128;\n                    }\n                case 1:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x2000) == 0)\n                    {\n                        v11->field_8 = 8;\n                    }\n                case 2:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x2000) == 0)\n                    {\n                        v11->field_8 = 9;\n                    }\n                case 4:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 1026) == 2)\n                    {\n                        v11->field_8 = 18;\n                    }\n                case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x4000) == 0)\n                    {\n                        v11->field_8 = 4;\n                        *((long long *)&v11->field_0) = (int)(v0 - 49);\n                    }\n                case 21:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 6;\n                    }\n                case 23:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 9;\n                    }\n                case 24:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 1026) == 2)\n                    {\n                        v11->field_8 = 19;\n                    }\n                case 27:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 0x200;\n                    }\n                case 44:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 35;\n                    }\n                case 48:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 33;\n                    }\n                case 57:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 64;\n                    }\n                case 59:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 12;\n                        *((int *)&v11->field_0) = 0x100;\n                    }\n                case 76:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 34;\n                    }\n                case 80:\n                    v13 = 2;\n                    if ((v6 & 0x80000) == 0)\n                    {\n                        v11->field_8 = 32;\n                    }\n                case 84:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 0x1200) == 0x200)\n                    {\n                        v11->field_8 = 23;\n                    }\n                case 85:\n                    v13 = 2;\n                    if (((unsigned short)v6 & 0x8400) == 0)\n                    {\n                        v11->field_8 = 10;\n                    }\n                case 86:\n                    v13 = 2;\n                    if ((unsigned long long)(v6 & 0x1200) == 0x200)\n                    {\n                        v11->field_8 = 24;\n                    }\n                default:\n                    v13 = 2;\n                }\n                if (v31 <= 86)\n                {\n                    v32 = v31;\n                }\n            }\n        }\n    }\n    else\n    {\n        v4->field_8 = 2;\n        v13 = 0;\n    }\n    if ((char *)v3 + 1 < v2->field_58 && *((char *)(v2->field_8 + v2->field_48)) == 92 && v2->field_68 > v2->field_48 && (v2->field_48 == v2->field_30 || v9 <= 1 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1) || *((int *)(v2->field_10 + (v2->field_48 << 2))) == -1 && v2->field_48 != v2->field_30 && v9 > 1 && v2->field_68 > v2->field_48 || (char)((unsigned int)(char)*((char *)(v2->field_8 + v2->field_48)) - 10) > 115 && v2->field_68 > v2->field_48 && *((char *)(v2->field_8 + v2->field_48)) != 92 && (v2->field_48 == v2->field_30 || v9 <= 1 || *((int *)(v2->field_10 + (v2->field_48 << 2))) != -1) || v2->field_68 <= v2->field_48)\n    {\n        return v13;\n    }\n}\n"
        },
        {
            "funcName": "sub_410a30",
            "funcStartAddr": "0x410a30",
            "funcEndAddr": "0x4120bd",
            "decompiledFuncCode": "int sub_410a30() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409e50",
            "funcStartAddr": "0x409e50",
            "funcEndAddr": "0x40a098",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[8];\n    struct struct_3 *field_8;\n    struct struct_4 *field_10;\n    char padding_18[8];\n    struct struct_5 *field_20;\n    char padding_28[8];\n    char field_30;\n    char padding_31[7];\n    unsigned long long field_38;\n} struct_2;\n\ntypedef struct struct_6 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char padding_30[128];\n    char field_b0;\n} struct_6;\n\ntypedef struct struct_7 {\n    char padding_0[40];\n    unsigned long long field_28;\n} struct_7;\n\ntypedef struct struct_3 {\n    char padding_0[24];\n    unsigned long long field_18;\n} struct_3;\n\nint sub_409e50()\n{\n    void tmp_9;  // tmp #9\n    void tmp_21;  // tmp #21\n    void tmp_8;  // tmp #8\n    struct_2 *v1;  // rsi\n    unsigned long long v2;  // rdx\n    struct_6 *v3;  // rdi\n    unsigned long long v4[6];  // rdi\n    unsigned long long *v5;  // rdx\n    struct_7 *v6;  // rdi\n    unsigned long long *v7;  // rbx\n    unsigned long long *v8;  // rax\n    unsigned long long *v9;  // rdx\n    unsigned long long *v10;  // rbp\n    unsigned long long *v11;  // rax\n    struct_3 *v12;  // rdi\n    unsigned long long v13;  // rbp\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // r12\n    unsigned long long v16[2];  // rax\n\n    v2 = v1->field_38;\n    switch (v1->field_30)\n    {\n    case 2:\n        if (v1->field_20 != 0)\n        {\n            __assert_fail(); /* do not return */\n        }\n    case 4:\n        *((unsigned long long *)(v4[3] + v1->field_38 * 8)) = v1->field_20->field_38;\n        if (v1->field_30 == 4)\n        {\n            tmp_9 = v4[5];\n            v9 = v2 * 3;\n            v10 = v4[5] + v9 * 8;\n            *((long long *)(v4[5] + v9 * 8)) = 1;\n            *((long long *)(tmp_9 + v9 * 8 + 8)) = 1;\n            v11 = malloc(0x8);\n            *((unsigned long long **)(tmp_9 + v1->field_38 * 24 + 16)) = v11;\n            if (v11 != 0)\n            {\n                *(v11) = v1->field_20->field_38;\n                v14 = 0;\n            }\n            else\n            {\n                *((long long *)(tmp_9 + v1->field_38 * 24 + 8)) = 0;\n                v14 = 12;\n                *(v10) = 0;\n            }\n        }\n    case 8: case 9: case 12:\n        v5 = v2 * 3;\n        tmp_21 = v6->field_28;\n        v7 = v6->field_28 + v5 * 8;\n        *((long long *)(v6->field_28 + v5 * 8)) = 1;\n        *((long long *)(tmp_21 + v5 * 8 + 8)) = 1;\n        v8 = malloc(0x8);\n        *((unsigned long long **)(tmp_21 + v1->field_38 * 24 + 16)) = v8;\n        if (v8 != 0)\n        {\n            *(v8) = v1->field_20->field_38;\n            return 0;\n        }\n        *((long long *)(tmp_21 + v1->field_38 * 24 + 8)) = 0;\n        v14 = 12;\n        *(v7) = 0;\n        break;\n    case 10: case 11:\n        v3->field_b0 = v3->field_b0 | 1;\n        if (v1->field_8 != 0)\n        {\n            v13 = *((long long *)(v1->field_8->field_18 + 56));\n        }\n        else\n        {\n            v13 = v1->field_20->field_38;\n        }\n        if (v1->field_10 != 0)\n        {\n            v15 = v1->field_10->field_18->field_38;\n        }\n        else\n        {\n            v15 = v1->field_20->field_38;\n        }\n        if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, r12<8>, 0x0<64>, cc_ndep<8>)))\n        {\n            *((long long *)(v3->field_28 + v1->field_38 * 24)) = 2;\n            v16 = malloc(0x10);\n            *((unsigned long long *[2])(tmp_8 + v1->field_38 * 24 + 16)) = v16;\n            if (!(v16 != 0))\n            {\n                v14 = 12;\n            }\n            else if (v13 != v15)\n            {\n                *((long long *)(tmp_8 + v1->field_38 * 24 + 8)) = 2;\n                if (v13 < v15)\n                {\n                    v16[0] = v13;\n                    v16[1] = v15;\n                    v14 = 0;\n                }\n                else\n                {\n                    v16[0] = v15;\n                    v16[1] = v13;\n                    v14 = 0;\n                }\n            }\n            else\n            {\n                *((long long *)(tmp_8 + v1->field_38 * 24 + 8)) = 1;\n                v16[0] = v13;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            __assert_fail(); /* do not return */\n        }\n    case 16:\n        v14 = 0;\n        break;\n    }\n    if ((v1->field_30 & 8) == 0)\n    {\n        *((unsigned long long *)(v12->field_18 + v1->field_38 * 8)) = v1->field_20->field_38;\n    }\n    else\n    {\n        __assert_fail(); /* do not return */\n    }\n    if (false)\n    {\n        __assert_fail(); /* do not return */\n    }\n    return v14;\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401f00",
            "funcEndAddr": "0x402d14",
            "decompiledFuncCode": "typedef struct struct_7 {\n    char padding_0[29];\n    char field_1d;\n} struct_7;\n\ntypedef struct struct_2 {\n    char padding_0[1];\n    char field_1;\n} struct_2;\n\ntypedef struct struct_3 {\n    char padding_0[24];\n    unsigned int field_18;\n} struct_3;\n\ntypedef struct struct_6 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned int field_18;\n    char field_1c;\n    char padding_1d[1];\n    char field_1e;\n    char padding_1f[1];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[16];\n    unsigned long long field_40;\n    unsigned long long field_48;\n} struct_6;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[4];\n    char field_1c;\n} struct_5;\n\ntypedef struct struct_4 {\n    unsigned long long field_0;\n    char padding_8[8];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char field_1c;\n    char field_1d;\n} struct_4;\n\nextern char g_403260;\nextern unsigned int g_4169e2;\nextern unsigned int g_416aa7;\nextern unsigned int g_416ab8;\nextern unsigned int g_416aee;\nextern unsigned int g_416afe;\nextern unsigned int g_416b17;\nextern unsigned int g_416b32;\nextern unsigned int g_416b46;\nextern unsigned int g_417200;\nextern unsigned int g_417270;\nextern unsigned int g_4172a0;\nextern unsigned int g_4172d0;\nextern unsigned int g_4172f8;\nextern unsigned int g_417328;\nextern unsigned int g_417358;\nextern unsigned int g_417390;\nextern unsigned int g_4173b8;\nextern unsigned int g_4173e0;\nextern unsigned int g_417408;\nextern unsigned int g_417438;\nextern unsigned int g_417478;\nextern unsigned int g_4174b8;\nextern unsigned int g_4174e0;\nextern unsigned int g_417510;\nextern unsigned long long g_417560;\nextern int512_t g_41758c;\nextern unsigned int g_41900f;\nextern unsigned int g_61d2b0;\nextern unsigned int g_61d33c;\nextern unsigned long long g_61d390;\nextern char g_61d3a0;\nextern unsigned long long g_61d420;\nextern unsigned long long g_61d428;\nextern char g_61d430;\nextern char g_61d431;\nextern char g_61d432;\nextern char g_61d433;\nextern unsigned long long *g_61d438;\nextern char g_61d460[3];\nextern unsigned long long g_61d468;\nextern unsigned long long g_61d470;\nextern unsigned long long g_61d480;\nextern unsigned long long g_61d640;\nextern unsigned long long g_61d648;\n\nint main()\n{\n    unsigned long long v0;  // [bp-0x118]\n    unsigned int|unsigned long long v1;  // [bp-0x100]\n    unsigned long long *|unsigned long long v2;  // [bp-0xf8]\n    unsigned int|unsigned long v3;  // [bp-0xf0]\n    unsigned long long v4;  // [bp-0xe0]\n    unsigned long v5;  // [bp-0xd8]\n    unsigned int|char v6;  // [bp-0xd0]\n    unsigned int v7;  // [bp-0x50]\n    unsigned long long v9;  // rsi\n    char *v10[2];  // r12\n    unsigned int v11;  // edi\n    unsigned long long v14;  // rax\n    unsigned long long v17;  // rcx\n    char v18;  // cc_dep2\n    unsigned long v19;  // d\n    char *v20;  // rdi\n    unsigned long long v22;  // rbx\n    unsigned long long v23;  // rbx\n    unsigned long long v24;  // rdi\n    unsigned long long v25;  // rcx\n    char v26[3];  // rdx\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rsi\n    char v29[3];  // rdx\n    unsigned int|unsigned long long v30;  // rdi\n    unsigned long long v31;  // rax\n    char v32[2];  // rsi\n    unsigned long long v33;  // cc_dep1\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // rbp\n    unsigned long long v36;  // cc_dep1\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // eax\n    unsigned int v40;  // eax\n    unsigned int v41;  // edi\n    unsigned long long v43;  // rdx\n    char v45[2];  // rbp\n    char *v46[2];  // rbx\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // rax\n    char [2]|unsigned long long v49;  // r15\n    unsigned long long v50;  // rbp\n    unsigned long long v51;  // rbp\n    char v52;  // r13b\n    struct_2 *v54;  // rbp\n    struct_6 *v56;  // r14\n    unsigned long long v57;  // rax\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // r13\n    unsigned long long v60;  // rax\n    unsigned long long v61;  // rbp\n    unsigned long long *v62;  // rax\n    unsigned long long v63;  // rbp\n    unsigned long long v64;  // rcx\n    char v65[2];  // rdi\n    char v66;  // cc_dep2\n    char *v67;  // r13\n    unsigned long long v68;  // rax\n    unsigned int *v69;  // rbx\n    unsigned int *v70;  // rbp\n    unsigned long long v71;  // rbx\n    unsigned long long v72;  // rbx\n    unsigned long long v73;  // rbx\n    unsigned long long v74;  // rbx\n    unsigned long long v75;  // rbx\n    unsigned long long v76;  // r12\n    unsigned int v77;  // r13d\n    unsigned long long v79;  // rbx\n    unsigned int *v80;  // rdi\n    unsigned int *v81;  // rsi\n    unsigned long long v82;  // rcx\n    unsigned long long v84;  // rax\n    unsigned long long *v86;  // rbp\n    unsigned long long v87;  // r14\n    struct_5 *v88;  // rbp\n    unsigned long long v90;  // r13\n    unsigned long long v92;  // r12\n    unsigned long long v93;  // rax\n    unsigned long long v94;  // rax\n    unsigned long long v95;  // rbx\n    unsigned long long v96;  // rax\n    unsigned long long v98;  // rax\n    unsigned long long v102;  // rax\n    struct_4 *v103;  // rbp\n    unsigned long long v106;  // rax\n    unsigned long long v107;  // rax\n    unsigned long long v110;  // rax\n    unsigned long long v111;  // rax\n    unsigned long long v112;  // rax\n    unsigned long long v113;  // rbx\n    unsigned long long v115;  // rax\n    unsigned long long v124;  // rbx\n\n    v10 = v9;\n    v1 = v11;\n    sub_404260();\n    setlocale(0x6, 0x41900f);\n    bindtextdomain(0x416aa7, 0x417200);\n    textdomain(0x416aa7);\n    sub_416950();\n    g_61d432 = 1;\n    g_61d438 = v9;\n    g_61d428 = 0;\n    g_61d420 = 0;\n    g_61d433 = 0;\n    g_61d430 = 0;\n    g_61d468 = \"xx\";\n    while (true)\n    {\n        v14 = sub_408360();\n        if ((unsigned int)v14 != -1)\n        {\n            if ((unsigned int)v14 != 107)\n            {\n                if (v14 > 107)\n                {\n                    if ((unsigned int)v14 != 115)\n                    {\n                        if (v14 > 115)\n                        {\n                            if ((unsigned int)v14 == 122)\n                            {\n                                g_61d431 = 1;\n                            }\n                            if ((unsigned int)v14 == 128)\n                            {\n                                g_61d430 = 1;\n                            }\n                        }\n                        else if ((unsigned int)v14 == 110)\n                        {\n                            dcgettext(0x0, 0x416ab8, 0x5);\n                            g_61d2b0 = sub_4067f0();\n                        }\n                    }\n                    if ((v14 <= 115 || (unsigned int)v14 == 115) && ((unsigned int)v14 == 113 || (unsigned int)v14 == 115) && ((unsigned int)v14 == 115 || (unsigned int)v14 != 110))\n                    {\n                        g_61d433 = 1;\n                    }\n                }\n                else if ((unsigned int)v14 == -130)\n                {\n                    sub_403c80(); /* do not return */\n                }\n                else if (v14 > -18446744069414584450)\n                {\n                    if ((unsigned int)v14 == 98)\n                    {\n                        *((unsigned long long *)&g_61d460[0]) = g_61d640;\n                    }\n                    if ((unsigned int)v14 == 102)\n                    {\n                        g_61d468 = g_61d640;\n                    }\n                }\n                else if ((unsigned int)v14 == -131)\n                {\n                    v0 = 0;\n                    sub_406370();\n                    exit(0x0); /* do not return */\n                }\n            }\n        }\n        else\n        {\n            if (v1 - g_61d33c > 1)\n            {\n                v20 = g_61d468;\n                v17 = -1;\n                while (v17 != 0)\n                {\n                    v17 -= 1;\n                    v18 = *(v20);\n                    v20 = &v20[v19];\n                    break;\n                }\n                v22 = !(rcx<8>) - 1;\n                if (g_61d460 != 0)\n                {\n                    v24 = 0;\n                    v25 = g_61d460[0];\n                    v26 = g_61d460;\n                    if (g_61d460[0] != 0)\n                    {\n                        while (true)\n                        {\n                            v27 = &v26[1];\n                            v28 = v26[1];\n                            if (v25 != 37)\n                            {\n                                v25 = v28;\n                            }\n                            else if ((char)v25 == 37)\n                            {\n                                v25 = v26[2];\n                                v27 = &v26[2];\n                            }\n                            else if (v24 == 0)\n                            {\n                                v29 = v27;\n                                v30 = 0;\n                                while (true)\n                                {\n                                    v31 = v29[0];\n                                    v32 = v29;\n                                    v33 = v29[0];\n                                    if (v29[0] != 39)\n                                    {\n                                        if (v33 <= 39 && v31 == 35)\n                                        {\n                                            v30 |= 2;\n                                        }\n                                        if ((v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35))\n                                        {\n                                            if ((unsigned int)v31 - 48 <= 9)\n                                            {\n                                                do\n                                                {\n                                                    v32 = &v32[1];\n                                                    v31 = v32[0];\n                                                }\n                                                while ((unsigned int)v32[0] - 48 <= 9);\n                                            }\n                                            if (v31 == 46)\n                                            {\n                                                do\n                                                {\n                                                    v32 = &v32[1];\n                                                }\n                                                while ((unsigned int)v32[0] - 48 <= 9);\n                                            }\n                                            v34 = v32[0];\n                                            v35 = v32[0];\n                                            v36 = v32[0];\n                                            if (v32[0] != 105)\n                                            {\n                                                if (v36 > 105)\n                                                {\n                                                    if (v34 == 117)\n                                                    {\n                                                        v39 = 1;\n                                                    }\n                                                }\n                                                else\n                                                {\n                                                    if (v34 == 0)\n                                                    {\n                                                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4172d0, 0x5));\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    if (v32[0] == 105 && v29[0] != 39 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35) || v34 == 100 && v36 <= 105 && v34 != 88 && v29[0] != 39 && v32[0] != 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35))\n                                    {\n                                        v32[0] = 117;\n                                        v39 = 1;\n                                    }\n                                    if (v34 == 88 && v36 <= 105 && v29[0] != 39 && v32[0] != 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35) || v34 == 120 && v29[0] != 39 && v32[0] != 105 && v34 != 117 && v36 > 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35) || v34 == 111 && v29[0] != 39 && v32[0] != 105 && v34 != 117 && v34 != 120 && v36 > 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35))\n                                    {\n                                        v39 = 2;\n                                    }\n                                    if (v36 <= 105 && v34 != 88 && v29[0] != 39 && v34 != 0 && v34 != 100 && v32[0] != 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35) || v29[0] != 39 && v32[0] != 105 && v34 != 111 && v34 != 117 && v34 != 120 && v36 > 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35))\n                                    {\n                                        v38 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v35 * 2 + 1)) & 64);\n                                        if ((char)v38 != 0)\n                                        {\n                                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4172f8, 0x5));\n                                        }\n                                        else\n                                        {\n                                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417328, 0x5));\n                                        }\n                                    }\n                                    if (v29[0] == 39 || (char)v38 != 0 && (v36 <= 105 && v34 != 88 && v29[0] != 39 && v34 != 0 && v34 != 100 && v32[0] != 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35) || v29[0] != 39 && v32[0] != 105 && v34 != 111 && v34 != 117 && v34 != 120 && v36 > 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35)))\n                                    {\n                                        v30 = 0 | 1;\n                                    }\n                                    if (v29[0] == 39 || v33 <= 39 && v31 == 35 && v29[0] != 39 || v31 == 45 && v33 > 39 && v29[0] != 39 || v31 == 48 && v33 > 39 && v29[0] != 39 && v31 != 45 || (char)v38 != 0 && (v36 <= 105 && v34 != 88 && v29[0] != 39 && v34 != 0 && v34 != 100 && v32[0] != 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35) || v29[0] != 39 && v32[0] != 105 && v34 != 111 && v34 != 117 && v34 != 120 && v36 > 105 && (v33 <= 39 || v31 != 48) && (v33 <= 39 || v31 != 45) && (v33 > 39 || v31 != 35)))\n                                    {\n                                        v29 = &v29[1];\n                                    }\n                                }\n                                v40 = !((unsigned int)rax<8>);\n                                v41 = v30 & v40;\n                                if ((v30 & v40) == 0)\n                                {\n                                    v25 = v32[1];\n                                    v27 = &v32[1];\n                                    v24 = 1;\n                                }\n                                else\n                                {\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417358, 0x5));\n                                }\n                            }\n                            else\n                            {\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4172a0, 0x5));\n                            }\n                            if ((char)v25 == 37 || v25 != 37 || v24 == 0 && (v30 & v40) == 0)\n                            {\n                                v26 = v27;\n                                if (v24 == 0)\n                                {\n                                    break;\n                                }\n                                v43 = __snprintf_chk();\n                                break;\n                            }\n                        }\n                        if (v25 == 0 && v24 != 0)\n                        {\n                            g_61d470 = (unsigned int)sub_4064b0();\n                            v45 = v10[(long long)(int)g_61d33c];\n                            v46 = (int)g_61d33c + 1;\n                            g_61d33c = (int)g_61d33c + 1;\n                            v47 = strcmp(v45, \"-\");\n                        }\n                        else if (v25 == 0 && v24 != 0)\n                        {\n                            sub_403510(); /* do not return */\n                        }\n                        else if (v25 == 0)\n                        {\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417270, 0x5));\n                        }\n                    }\n                    if (g_61d460[0] == 0 || v47 != 0)\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417270, 0x5));\n                    }\n                }\n                if ((-2 - v22 < (int)g_61d2b0 || g_61d460 != 0) && (g_61d460 == 0 || v47 != 0) && (g_61d460 == 0 || g_61d460[0] != 0) && (g_61d460 != 0 || g_61d2b0 > 9))\n                {\n                    sub_403510(); /* do not return */\n                }\n                if (g_61d460 == 0 && g_61d2b0 <= 9 || g_61d460 == 0 && -2 - v22 >= (int)g_61d2b0 || v47 != 0 && g_61d460[0] != 0 && g_61d460 != 0)\n                {\n                    g_61d470 = (unsigned int)sub_4064b0();\n                    v45 = v10[(long long)(int)g_61d33c];\n                    v46 = (int)g_61d33c + 1;\n                    g_61d33c = (int)g_61d33c + 1;\n                    v47 = strcmp(v45, \"-\");\n                    if (v47 != 0)\n                    {\n                        v48 = sub_404100();\n                        v46 = (unsigned long long)g_61d33c;\n                        if (v48 < 0)\n                        {\n                            v50 = (unsigned int)sub_405c30();\n                            error(0x1, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x416b17, 0x5));\n                        }\n                    }\n                    if (v47 == 0 || v48 >= 0)\n                    {\n                        if ((unsigned int)v46 < v1)\n                        {\n                            v2 = v46;\n                            v49 = *((long long *)((char *)v10 + 0x8 * v46));\n                            while (true)\n                            {\n                                v51 = v49[0];\n                                v52 = v49[0] == 37;\n                                if (v52 == 0 && v49[0] != 47)\n                                {\n                                    v56->field_18 = (unsigned int)v46;\n                                    v56 = (unsigned long long)(unsigned int)sub_403540();\n                                    v57 = sub_406f70();\n                                    if (v57 == 0)\n                                    {\n                                        v58 = v4;\n                                        if (v4 == 0)\n                                        {\n                                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417408, 0x5));\n                                        }\n                                        else if (v4 >= g_61d390)\n                                        {\n                                            if (v4 == g_61d390)\n                                            {\n                                                v61 = (unsigned int)sub_405e80();\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x417478, 0x5));\n                                                v58 = v4;\n                                            }\n                                            g_61d390 = v58;\n                                            v56->field_8 = v58;\n                                        }\n                                        else\n                                        {\n                                            v76 = (unsigned int)sub_404210();\n                                            v79 = (unsigned int)sub_405e80();\n                                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417438, 0x5));\n                                        }\n                                    }\n                                    else\n                                    {\n                                        v72 = (unsigned int)sub_405e80();\n                                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x416b32, 0x5));\n                                    }\n                                }\n                                if (v49[0] == 47 || v52 != 0)\n                                {\n                                    v3 = &v49[1];\n                                    v54 = (unsigned long long)strrchr();\n                                    if (v54 != 0)\n                                    {\n                                        *((char *)(v51 + 29)) = v52;\n                                        v56 = (unsigned long long)(unsigned int)sub_403540();\n                                        v56->field_18 = (unsigned int)v46;\n                                        v56->field_1e = 1;\n                                        v56->field_20 = 0;\n                                        v56->field_28 = 0;\n                                        v56->field_48 = 0;\n                                        v56->field_40 = (unsigned int)sub_4064b0();\n                                        g_61d648 = 710;\n                                        v59 = (unsigned int)sub_415890();\n                                        if (v59 != 0)\n                                        {\n                                            v75 = (unsigned int)sub_405e80();\n                                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4173b8, 0x5));\n                                            sub_402fb0(); /* do not return */\n                                        }\n                                        else if (v54->field_1 != 0)\n                                        {\n                                            v60 = sub_406820();\n                                            if (v60 != 0)\n                                            {\n                                                v73 = (unsigned int)sub_405e80();\n                                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4173e0, 0x5));\n                                            }\n                                        }\n                                    }\n                                    else\n                                    {\n                                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x417390, 0x5));\n                                    }\n                                }\n                                if (v57 == 0 && v52 == 0 && v4 >= g_61d390 && v4 != 0 && v49[0] != 47 || v59 == 0 && v54->field_1 != 0 && v54 != 0 && (v49[0] == 47 || v52 != 0) && v60 == 0 || v59 == 0 && v54 != 0 && (v49[0] == 47 || v52 != 0) && v54->field_1 == 0)\n                                {\n                                    v62 = (char *)v46 + 1;\n                                    if (v1 <= (unsigned int)(char *[2])((char *)v46 + 1))\n                                    {\n                                        break;\n                                    }\n                                    v49 = *((long long *)&((char *)((char *)v10 + 0x8 * v2))[8]);\n                                    v63 = ((char *)v2 + 1) * 8;\n                                    if (*((char *)*((long long *)&((char *)((char *)v10 + 0x8 * v2))[8])) != 123)\n                                    {\n                                        v46 = v62;\n                                    }\n                                    else\n                                    {\n                                        v64 = -1;\n                                        v65 = v49;\n                                        while (v64 != 0)\n                                        {\n                                            v64 -= 1;\n                                            v66 = v65[0];\n                                            v65 = &v65[v19];\n                                            break;\n                                        }\n                                        v67 = &((char [2])&v49[!(rcx<8>)])[-1 + 6];\n                                        if (v49[!(rcx<8>) + -2] == 125)\n                                        {\n                                            *(v67) = 0;\n                                            if (&v49[1] == &v67[-1] && v49[1] == 42)\n                                            {\n                                                v56->field_1c = 1;\n                                            }\n                                            if (&v49[1] != &v67[-1] || v49[1] != 42)\n                                            {\n                                                v68 = sub_406f70();\n                                                if (v68 == 0)\n                                                {\n                                                    v56->field_10 = v5;\n                                                }\n                                                else\n                                                {\n                                                    v74 = (unsigned int)sub_405e80();\n                                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4174e0, 0x5));\n                                                }\n                                            }\n                                            if ((&v49[1] == &v67[-1] || v68 == 0) && (v68 == 0 || v49[1] == 42))\n                                            {\n                                                *(v67) = 125;\n                                                v46 = (unsigned long long)((unsigned int)v46 + 2);\n                                                if (v1 <= (unsigned int)v46)\n                                                {\n                                                    break;\n                                                }\n                                                v49 = v10[1 + v63];\n                                            }\n                                        }\n                                        else\n                                        {\n                                            v71 = (unsigned int)sub_405e80();\n                                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x4174b8, 0x5));\n                                        }\n                                    }\n                                    if (v68 == 0 || v49[!(rcx<8>) + -2] == 125)\n                                    {\n                                        v2 = v46;\n                                    }\n                                }\n                            }\n                        }\n                        v69 = &g_417560;\n                        sigemptyset(0x61d3a0);\n                        v70 = &g_417560;\n                        do\n                        {\n                            v77 = *(v70);\n                            sigaction();\n                            if (v5 != 1)\n                            {\n                                sigaddset(0x61d3a0, v77);\n                            }\n                            v70 = &v70[1];\n                        }\n                        while (v70 != 4289932);\n                        v80 = &v6;\n                        v81 = &g_61d3a0;\n                        v82 = 32;\n                        for (v5 = &g_403260; v82 != 0; v81 = &v81[v19])\n                        {\n                            v82 -= 1;\n                            v6 = *(v81);\n                            v80 = &v80[v19];\n                        }\n                        v7 = 0;\n                        do\n                        {\n                            v84 = sigismember(0x61d3a0, *(v69));\n                            if (v84 != 0)\n                            {\n                                sigaction();\n                            }\n                            v69 = &v69[1];\n                        }\n                        while (v69 != 4289932);\n                        for (v1 = 0; v1 < g_61d420; v1 += 1)\n                        {\n                            v86 = g_61d428;\n                            v87 = 0;\n                            if (*((char *)(g_61d428 + v1 * 96 + 30)) != 0)\n                            {\n                                while (true)\n                                {\n                                    v103 = v86;\n                                    if (v103->field_1c == 0 && v87 > v103->field_10)\n                                    {\n                                        break;\n                                    }\n                                    if (v103->field_1d == 0)\n                                    {\n                                        sub_403190();\n                                    }\n                                    if (g_61d480 != 0 && g_61d430 != 0)\n                                    {\n                                        sub_403960();\n                                    }\n                                    if ((char)(v103->field_0 - 0 >> 63))\n                                    {\n                                        while (true)\n                                        {\n                                            g_61d480 = g_61d480 + 1;\n                                            v110 = sub_403b30();\n                                            if (v110 != 0)\n                                            {\n                                                v111 = sub_416210();\n                                                if (v111 == -2)\n                                                {\n                                                    break;\n                                                }\n                                                if (v111 != -1)\n                                                {\n                                                    break;\n                                                }\n                                            }\n                                        }\n                                        if (v110 != 0)\n                                        {\n                                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x417510, 0x5));\n                                            sub_402fb0(); /* do not return */\n                                        }\n                                        else if (v111 != -2)\n                                        {\n                                            v2 = g_61d480 + v103->field_0;\n                                            v3 = v103->field_18;\n                                            v112 = sub_403c10();\n                                        }\n                                    }\n                                    else\n                                    {\n                                        while (true)\n                                        {\n                                            g_61d480 = g_61d480 + 1;\n                                            v106 = sub_403b30();\n                                            if (v106 == 0)\n                                            {\n                                                break;\n                                            }\n                                            v107 = sub_416210();\n                                            if (v107 == -2)\n                                            {\n                                                break;\n                                            }\n                                            if (v107 != -1)\n                                            {\n                                                break;\n                                            }\n                                            sub_403960();\n                                            sub_403480();\n                                        }\n                                        if (v106 != 0)\n                                        {\n                                            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x417510, 0x5));\n                                            sub_402fb0(); /* do not return */\n                                        }\n                                        else if (v107 != -2 && v106 != 0)\n                                        {\n                                            v2 = g_61d480 + v103->field_0;\n                                            v3 = v103->field_18;\n                                            v112 = sub_403c10();\n                                        }\n                                    }\n                                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x417510, 0x5));\n                                    sub_402fb0(); /* do not return */\n                                    v2 = g_61d480 + v103->field_0;\n                                    v3 = v103->field_18;\n                                    v112 = sub_403c10();\n                                    if (g_61d480 + *((long long *)(g_61d428 + 0 * 96)) >= v112)\n                                    {\n                                        v113 = 0;\n                                        if (v2 != v112)\n                                        {\n                                            while (true)\n                                            {\n                                                v115 = sub_403960();\n                                                if (v115 != 0)\n                                                {\n                                                    if (*((char *)(g_61d428 + 0 * 96 + 29)) == 0)\n                                                    {\n                                                        sub_403480();\n                                                    }\n                                                    v113 += 1;\n                                                    if (v2 - v112 == v113)\n                                                    {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            if (v115 == 0)\n                                            {\n                                                v124 = (unsigned int)sub_405e80();\n                                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416b46, 0x5));\n                                                sub_402fb0(); /* do not return */\n                                            }\n                                        }\n                                        if (v2 == v112 || *((char *)(g_61d428 + 0 * 96 + 29)) != 0)\n                                        {\n                                            if (*((char *)(g_61d428 + 0 * 96 + 29)) == 0)\n                                            {\n                                                sub_403000();\n                                            }\n                                            if (v103->field_0 > 0)\n                                            {\n                                                g_61d480 = v2;\n                                            }\n                                            v87 = 1;\n                                            v86 = g_61d428;\n                                        }\n                                    }\n                                    if (g_61d480 + *((long long *)(g_61d428 + 0 * 96)) < v112 || *((char *)(g_61d428 + 0 * 96 + 29)) != 0 && v2 != v112)\n                                    {\n                                        v124 = (unsigned int)sub_405e80();\n                                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416b46, 0x5));\n                                        sub_402fb0(); /* do not return */\n                                    }\n                                    if (v103->field_1c != 0)\n                                    {\n                                        if (*((char *)(g_61d428 + 0 * 96 + 29)) == 0)\n                                        {\n                                            sub_403a40();\n                                            sub_403000();\n                                        }\n                                        exit(0x0); /* do not return */\n                                    }\n                                    sub_403a70(); /* do not return */\n                                }\n                            }\n                            while (true)\n                            {\n                                v88 = v86;\n                                if (v88->field_1c == 0 && v87 > v88->field_10)\n                                {\n                                    break;\n                                }\n                                v90 = v87 + 1;\n                                sub_403190();\n                                v92 = v87 * v88->field_8;\n                                v93 = sub_403b30();\n                                if (g_61d430 == 0 || v93 != 0)\n                                {\n                                    v94 = sub_403c10();\n                                    v95 = v94 + 1;\n                                    if (v92 <= v94)\n                                    {\n                                        sub_403000();\n                                    }\n                                    else\n                                    {\n                                        while (true)\n                                        {\n                                            v96 = sub_403960();\n                                            if (v96 == 0)\n                                            {\n                                                break;\n                                            }\n                                            sub_403480();\n                                            v98 = v95 + 1;\n                                            if (v92 != v95)\n                                            {\n                                                v95 = v98;\n                                            }\n                                            else\n                                            {\n                                                sub_403000();\n                                                break;\n                                            }\n                                        }\n                                        if (v92 == v95 && v96 != 0)\n                                        {\n                                            sub_403960();\n                                        }\n                                        else if (v92 == v95 && v96 != 0)\n                                        {\n                                            v102 = sub_403b30();\n                                        }\n                                        else\n                                        {\n                                            sub_403290(); /* do not return */\n                                        }\n                                    }\n                                    v102 = sub_403b30();\n                                }\n                                if (g_61d430 == 0 && v92 > v94 || v93 != 0 && g_61d430 != 0)\n                                {\n                                    sub_403960();\n                                }\n                                if (g_61d430 == 0 && v102 != 0 || v93 != 0 && g_61d430 != 0)\n                                {\n                                    v86 = g_61d428;\n                                    v87 = v90;\n                                }\n                                if (v92 > v94 || v102 == 0 && g_61d430 == 0 || v93 == 0 && g_61d430 != 0)\n                                {\n                                    sub_403290(); /* do not return */\n                                }\n                            }\n                        }\n                        sub_403190();\n                        sub_403a40();\n                        sub_403000();\n                        if (close(0x0) == 0)\n                        {\n                            return 0;\n                        }\n                        error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x4169e2, 0x5));\n                        sub_402fb0(); /* do not return */\n                    }\n                }\n            }\n            else if (g_61d33c >= v1)\n            {\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416aee, 0x5));\n            }\n            else\n            {\n                v23 = (unsigned int)sub_405e80();\n                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x416afe, 0x5));\n            }\n        }\n        if ((unsigned int)v14 == 107)\n        {\n            g_61d432 = 0;\n        }\n        if ((unsigned int)v14 == -1 && v1 - g_61d33c <= 1 || v14 <= 107 && v14 <= -18446744069414584450 && (unsigned int)v14 != -131 && (unsigned int)v14 != 107 && (unsigned int)v14 != -130 && (unsigned int)v14 != -1 || v14 <= 115 && (unsigned int)v14 != 113 && (unsigned int)v14 != 110 && (unsigned int)v14 != 115 && (unsigned int)v14 != 107 && v14 > 107 && (unsigned int)v14 != -1 || v14 <= 107 && (unsigned int)v14 != 102 && (unsigned int)v14 != 107 && (unsigned int)v14 != 98 && (unsigned int)v14 != -130 && (unsigned int)v14 != -1 && v14 > -18446744069414584450 || v14 > 115 && (unsigned int)v14 != 122 && (unsigned int)v14 != 115 && (unsigned int)v14 != 107 && v14 > 107 && (unsigned int)v14 != 128 && (unsigned int)v14 != -1)\n        {\n            sub_403c80(); /* do not return */\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_40a0d0",
            "funcStartAddr": "0x40a0d0",
            "funcEndAddr": "0x40a117",
            "decompiledFuncCode": "int sub_40a0d0()\n{\n    unsigned long v1;  // rsi\n    unsigned long long v2[7];  // rdi\n    unsigned long long v3;  // rax\n    unsigned long long v6;  // rdx\n\n    if (v1 + 1 < v2[6] && *((int *)(v2[2] + (v1 + 1 << 2))) == -1)\n    {\n        v6 = 2;\n        while (true)\n        {\n            v3 = v6;\n            if (v6 != v2[6] - v1)\n            {\n                v6 += 1;\n                if (*((int *)(v2[2] + (v1 + 1) * 4 - 4 + (v6 << 2) - 4)) != -1)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                return v3;\n            }\n        }\n    }\n    if (*((int *)(v2[2] + (v1 + 1 << 2))) != -1 || v1 + 1 >= v2[6])\n    {\n        v3 = 1;\n    }\n    return v3;\n}\n"
        },
        {
            "funcName": "sub_405890",
            "funcStartAddr": "0x405890",
            "funcEndAddr": "0x4058bb",
            "decompiledFuncCode": "extern char g_61d5c0;\n\nint sub_405890()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_61d5c0 : v2);\n    *((int *)(tmp_11? &g_61d5c0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_61d5c0;\n    }\n    if (v5 == 0 || v4 == 0)\n    {\n        v0 = &g_61d5c0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408760",
            "funcStartAddr": "0x408760",
            "funcEndAddr": "0x408776",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[40];\n    unsigned long long field_28;\n    char field_30;\n    char padding_31[1];\n    char field_32;\n} struct_0;\n\nint sub_408760()\n{\n    struct_0 *v1;  // rsi\n    unsigned long v2;  // rdi\n\n    if (v1->field_30 == 17 && v2 == v1->field_28)\n    {\n        v1->field_32 = v1->field_32 | 8;\n        return 0;\n    }\n    if (v2 != v1->field_28 || v1->field_30 != 17)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_403960",
            "funcStartAddr": "0x403960",
            "funcEndAddr": "0x403a24",
            "decompiledFuncCode": "extern unsigned long long g_61d380;\nextern char g_61d478;\nextern unsigned long long g_61d480;\nextern unsigned long long g_61d4a0;\n\nint sub_403960()\n{\n    unsigned long long v2;  // rdx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rax\n    unsigned long long v5[164];  // rsi\n    unsigned long long v6;  // rcx\n    unsigned long long v7;  // rax\n    unsigned long long *v8;  // rcx\n    unsigned long long v9;  // rdx\n\n    if (g_61d380 != 0)\n    {\n        sub_403430();\n        free(g_61d380);\n        g_61d380 = 0;\n    }\n    v2 = g_61d4a0;\n    if (g_61d4a0 == 0)\n    {\n        if (g_61d478 == 0)\n        {\n            v3 = sub_403630();\n            if (v3 != 0)\n            {\n                v2 = g_61d4a0;\n            }\n        }\n        if (v3 == 0 || g_61d478 != 0)\n        {\n            return 0;\n        }\n    }\n    if (g_61d4a0 != 0 || g_61d478 == 0 && v3 != 0)\n    {\n        v4 = *((long long *)(v2 + 24));\n        if (*((long long *)(v2 + 24)) > g_61d480)\n        {\n            g_61d480 = v4;\n        }\n        v5 = *((long long *)(v2 + 56));\n        *((unsigned long long *)(v2 + 24)) = g_61d480 + 1;\n        v6 = v5[2] + 1;\n        v5[2] = v5[2] + 1;\n        v7 = &((unsigned long long [164])&v5[2 * v6])[1];\n        if (*(v5) == v6)\n        {\n            v8 = v5[163];\n            *((unsigned long long [164])(v2 + 56)) = v5[163];\n            if (*(v8) == 0 || v8 == 0)\n            {\n                g_61d380 = v2;\n                v9 = *((long long *)(v2 + 64));\n                g_61d4a0 = v9;\n                return v7;\n            }\n        }\n        if (*(v5) != v6 || *(v8) != 0 && v8 != 0)\n        {\n            return v7;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_4097f0",
            "funcStartAddr": "0x4097f0",
            "funcEndAddr": "0x4099af",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    unsigned long long field_20;\n    unsigned long long field_28;\n    unsigned long long field_30;\n    char padding_38[124];\n    unsigned int field_b4;\n} struct_1;\n\ntypedef struct struct_3 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    char field_a;\n} struct_3;\n\nint sub_4097f0()\n{\n    void *v0;  // [bp-0x48]\n    void tmp_77;  // tmp #77\n    void tmp_94;  // tmp #94\n    void *|unsigned long long v1;  // [bp-0x40]\n    struct_1 *v3;  // rdi\n    struct_1 *v4;  // rbx\n    unsigned long v5;  // rbp\n    unsigned long long v6;  // r14\n    unsigned long long v7;  // rdx\n    unsigned long long v8;  // rax\n    unsigned long v9;  // r13\n    unsigned long v10;  // rbp\n    unsigned long long *v11;  // r12\n    uint128_t *v12;  // r13\n    void *v13;  // rax\n    unsigned long long v14;  // rdx\n    unsigned long long *v15;  // rdi\n    unsigned long long v16;  // rcx\n    struct_3 *v17;  // rax\n    unsigned long v18;  // rsi\n    char v19;  // cl\n    unsigned int v20;  // ecx\n    unsigned long long v21;  // rax\n\n    v4 = v3;\n    v15 = v3->field_10;\n    v5 = v4->field_8;\n    if (v15 < v4->field_8)\n    {\n        v11 = v4->field_18;\n        v12 = v4->field_28;\n    }\n    else\n    {\n        v6 = v5 * 2;\n        if (v5 << 1 <= 768614336404564650)\n        {\n            v1 = v7;\n            v8 = realloc(v4->field_0, v5 * 32);\n            if (v8 != 0)\n            {\n                v4->field_0 = v8;\n                v9 = v5 * 16;\n                v10 = (v5 + v6) * 16;\n                v11 = realloc(v4->field_18, v9);\n                v0 = realloc(v4->field_20, v9);\n                v12 = realloc(v4->field_28, v10);\n                v13 = realloc(v4->field_30, v10);\n                if (v11 != 0 && v0 != 0 && v12 != 0)\n                {\n                    v14 = v1;\n                    if (v1 != 0)\n                    {\n                        v4->field_18 = v11;\n                        v15 = v4->field_10;\n                        v4->field_20 = v0;\n                        v4->field_28 = v12;\n                        v4->field_30 = v1;\n                        v4->field_8 = v6;\n                    }\n                }\n                if (v0 == 0 || v1 == 0 || v12 == 0 || v11 == 0)\n                {\n                    v1 = v13;\n                    v0 = v0;\n                    free(v11);\n                    free(v0);\n                    free(v12);\n                    free(v1);\n                }\n            }\n        }\n        if (v8 == 0 || v0 == 0 || v1 == 0 || v12 == 0 || v11 == 0 || v5 << 1 > 768614336404564650)\n        {\n            v21 = -1;\n        }\n    }\n    if (v15 < v4->field_8 || v5 << 1 <= 768614336404564650 && v8 != 0 && v0 != 0 && v1 != 0 && v12 != 0 && v11 != 0)\n    {\n        v16 = (unsigned int)v14 & -261889;\n        v17 = v15 * 16 + v4->field_0;\n        *((unsigned long long *)(v15 * 16 + v4->field_0 + 8)) = v14;\n        v17->field_0 = v18;\n        v17->field_8 = (unsigned int)v14 & -261889;\n        v19 = v14 == 6;\n        if (v14 == 5)\n        {\n            v19 = 1 < v4->field_b4;\n        }\n        v20 = (unsigned int)v19 * 16;\n        *(&((char *)&v17->field_8)[2]) = (char)(*(&((char *)&v17->field_8)[2]) & 4294967023) | v20;\n        *((long long *)((char *)v11 + 0x8 * v15)) = -1;\n        tmp_77 = (char *)v12 + 24 * v4->field_10;\n        *((int128_t *)&((char *)v12)[24 * v4->field_10]) = 0;\n        *((long long *)(tmp_77 + 16)) = 0;\n        tmp_94 = v4->field_30 + v4->field_10 * 24;\n        *((int128_t *)(v4->field_30 + v4->field_10 * 24)) = 0;\n        *((long long *)(tmp_94 + 16)) = 0;\n        v21 = v4->field_10;\n        v4->field_10 = v4->field_10 + 1;\n    }\n    return v21;\n}\n"
        },
        {
            "funcName": "sub_40d880",
            "funcStartAddr": "0x40d880",
            "funcEndAddr": "0x40d8ce",
            "decompiledFuncCode": "int sub_40d880()\n{\n    unsigned long v0;  // [bp-0x18]\n    void tmp_18;  // tmp #18\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n    unsigned long long v5[3];  // rdi\n    unsigned long long v6;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (*(v5) > 0)\n    {\n        v6 = 0;\n        while (true)\n        {\n            tmp_18 = v6 * 3;\n            v6 += 1;\n            free(*((long long *)(v5[2] + tmp_18 * 16 + 40)));\n            free(*((long long *)(v5[2] + tmp_18 * 16 + 16)));\n            if (v6 >= *(v5))\n            {\n                break;\n            }\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_415890",
            "funcStartAddr": "0x415890",
            "funcEndAddr": "0x4158f6",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n} struct_0;\n\nextern unsigned long long g_61d648;\n\nint sub_415890()\n{\n    struct_0 *v1;  // rdx\n\n    v1->field_38 = v1->field_38 & 4294967023 | (unsigned int)((unsigned long long)((unsigned int)(g_61d648 >> 25) & 1) * 16) | -128;\n    if (sub_414ae0() == 0)\n    {\n        return 0;\n    }\n}\n"
        },
        {
            "funcName": "sub_405c40",
            "funcStartAddr": "0x405c40",
            "funcEndAddr": "0x405c4f",
            "decompiledFuncCode": "int sub_405c40()\n{\n}\n"
        },
        {
            "funcName": "sub_40fb20",
            "funcStartAddr": "0x40fb20",
            "funcEndAddr": "0x40fca0",
            "decompiledFuncCode": "typedef struct struct_2 {\n    char padding_0[200];\n    unsigned long long field_c8;\n    unsigned long long field_d0;\n    unsigned long long field_d8;\n    unsigned int field_e0;\n} struct_2;\n\ntypedef struct struct_0 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_0;\n\ntypedef struct struct_3 {\n    char padding_0[32];\n    char field_20;\n} struct_3;\n\ntypedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n    unsigned long long field_18;\n    char field_20;\n    char padding_21[1];\n    unsigned short field_22;\n} struct_1;\n\nint sub_40fb20()\n{\n    unsigned long long v0;  // [bp-0x58]\n    void tmp_21;  // tmp #21\n    void tmp_24;  // tmp #24\n    unsigned long long v1;  // [bp-0x40]\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // rbp\n    unsigned long long v7;  // rdi\n    struct_2 *v8;  // rbx\n    struct_0 *v9;  // rdx\n    unsigned long long v10;  // r15\n    unsigned long v11;  // rdx\n    unsigned long long *v12;  // rsi\n    unsigned long long v13;  // rcx\n    void *v14;  // rdi\n    unsigned long long v15;  // rax\n    unsigned long long v17;  // rax\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    struct_3 *v20;  // r8\n    struct_1 *v21;  // rdi\n    unsigned int v22;  // edx\n    char v23;  // dl\n    unsigned int v25;  // r15d\n\n    v6 = v5;\n    v8 = v7;\n    v0 = 8;\n    v17 = sub_40eb30();\n    if ((unsigned int)v17 == 0)\n    {\n        v10 = v9->field_8;\n        v18 = v8->field_c8;\n        v11 = v8->field_d0;\n        v13 = *(v12);\n        v14 = v8->field_d8;\n        if (v8->field_c8 >= v8->field_d0)\n        {\n            v1 = *(v12);\n            v15 = realloc(v14, v11 * 80);\n            if (v15 != 0)\n            {\n                tmp_21 = v8->field_d0;\n                tmp_24 = v8->field_c8;\n                v1 = v1;\n                v8->field_d8 = v15;\n                memset(v15 + (tmp_24 + tmp_24 * 4) * 8, 0x0, (tmp_21 + tmp_21 * 4) * 8);\n                v8->field_d0 = v8->field_d0 * 2;\n                v18 = v8->field_c8;\n                v14 = v8->field_d8;\n                v13 = v1;\n            }\n            else\n            {\n                free(v8->field_d8);\n                v17 = 12;\n            }\n        }\n        if (v8->field_c8 < v8->field_d0 || v15 != 0)\n        {\n            v19 = v18 * 40;\n            if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)))\n            {\n                v20 = v14 + v19 - 40;\n                if (v6 == *((long long *)&((char *)v14)[v19 + -32]))\n                {\n                    v20->field_20 = 1;\n                }\n            }\n            v21 = v14 + v19;\n            v22 = 0;\n            v23 = v10 == v13;\n            v21->field_0 = v3;\n            v21->field_8 = v6;\n            *((unsigned long long *)&v21->field_22) = (unsigned int)(0 - rdx<4>);\n            v21->field_10 = v13;\n            v21->field_18 = v10;\n            v8->field_c8 = v18 + 1;\n            v21->field_20 = 0;\n            if ((int)v8->field_e0 < v10 - v13)\n            {\n                v25 = v10 - v13;\n                v8->field_e0 = v25;\n            }\n        }\n    }\n    if ((unsigned int)v17 != 0 || v15 == 0 && v8->field_c8 >= v8->field_d0)\n    {\n        return v17;\n    }\n}\n"
        },
        {
            "funcName": "sub_409a60",
            "funcStartAddr": "0x409a60",
            "funcEndAddr": "0x409cce",
            "decompiledFuncCode": "typedef struct struct_6 {\n    char padding_0[8];\n    unsigned int field_8;\n} struct_6;\n\ntypedef struct struct_4 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_4;\n\ntypedef struct struct_1 {\n    char padding_0[8];\n    unsigned long long field_8;\n} struct_1;\n\ntypedef struct struct_5 {\n    char padding_0[8];\n    unsigned int field_8;\n    char field_a;\n} struct_5;\n\nint sub_409a60()\n{\n    unsigned long long|unsigned long long * v0;  // [bp-0x48]\n    unsigned long v1;  // [bp-0x40]\n    unsigned long long v3;  // rsi\n    unsigned long long *v4;  // r9\n    unsigned long long v5;  // rdx\n    unsigned long v6;  // r8\n    unsigned long long v7;  // rdi\n    unsigned long long v8[6];  // rbx\n    unsigned long v9;  // rcx\n    unsigned long long v10;  // rcx\n    unsigned long long v11;  // rdi\n    unsigned long long *v12;  // r14\n    struct_6 *v13;  // rax\n    unsigned long long *v14;  // r14\n    struct_4 *v15;  // r8\n    unsigned long long v16;  // rsi\n    unsigned long long *v17;  // r15\n    unsigned long long v18;  // r9\n    struct_1 *v20;  // rdi\n    unsigned long long v21;  // r15\n    unsigned long long *|unsigned long long v22;  // r13\n    unsigned long long v24;  // rsi\n    struct_5 *v25;  // rax\n    unsigned int|unsigned long v26;  // r12d\n    unsigned long long v27;  // rdx\n    unsigned long long *v28;  // r8\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // cc_dep1\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rax\n    unsigned long long v33;  // r13\n    unsigned long long v34;  // rax\n    unsigned long long v36;  // rdx\n    unsigned long long v37;  // rax\n\n    v4 = v3;\n    v22 = v5;\n    v26 = v6;\n    v8 = v7;\n    v1 = v9;\n    while (true)\n    {\n        v10 = *(v8);\n        v11 = v8[5];\n        v12 = v22;\n        v13 = v4 * 16 + *(v8);\n        if (*((char *)((v4 << 4) + *(v8) + 8)) != 4)\n        {\n            v14 = v4 * 24;\n            v15 = v11 + v4 * 24;\n            v16 = *((long long *)(v11 + v4 * 24 + 8));\n            if (*((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0)\n            {\n                v20 = v11 + v22 * 24;\n                v21 = *((long long *)v15->field_10);\n                v20->field_8 = 0;\n                if (v16 != 1)\n                {\n                    v24 = v8[2] - 1;\n                    v25 = (v8[2] - 1) * 16 + v10;\n                    if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) && (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0)\n                    {\n                        v27 = v8[2] * 16;\n                        v28 = v8[4];\n                        v29 = &((struct struct_5 *)&(struct struct_5 *)(v10 + -0x1 * v25)->padding_0[v27])[-3].padding_0[7];\n                        while (true)\n                        {\n                            if ((unsigned int)v26 == ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023) && v28[v24] == v4)\n                            {\n                                v32 = sub_408b10();\n                                break;\n                            }\n                            if ((unsigned int)v26 != ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023) || v28[v24] != v4)\n                            {\n                                v25 = &v25->padding_0[v29];\n                                v24 -= 1;\n                                v30 = (char)(*(&((char *)&v25->field_8)[2]) & 4);\n                                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (char)v30 == 0)\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                        if ((unsigned int)v26 != ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023) || v28[v24] != v4)\n                        {\n                            v33 = (unsigned int)sub_4099c0();\n                        }\n                        else if ((unsigned int)v26 == ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023) && v28[v24] == v4)\n                        {\n                            v0 = *((long long *)(*((long long *)&((char *)v14)[16 + v8[5]]) + 8));\n                            v22 = (unsigned int)sub_4099c0();\n                        }\n                        else if ((unsigned int)v26 == ((unsigned int)((unsigned long long)v25->field_8 >> 8) & 1023) && v28[v24] == v4)\n                        {\n                            v37 = 12;\n                        }\n                    }\n                    if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>) || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) == 0 || v33 != -1)\n                    {\n                        v33 = (unsigned int)sub_4099c0();\n                    }\n                    if (v33 != -1)\n                    {\n                        v34 = sub_408b10();\n                        if (v34 != 0)\n                        {\n                            v37 = sub_409a60();\n                        }\n                        if (((unsigned int)v37 == 0 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>))) && ((unsigned int)v37 == 0 || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0) && (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) || v34 != 0) && (v34 != 0 || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0))\n                        {\n                            v0 = *((long long *)(*((long long *)&((char *)v14)[16 + v8[5]]) + 8));\n                            v22 = (unsigned int)sub_4099c0();\n                        }\n                    }\n                }\n                else\n                {\n                    if (v4 == v1 && v4 != v22)\n                    {\n                        v36 = (unsigned int)sub_408b10();\n                        v37 = 0;\n                        if (v36 != 0)\n                        {\n                            break;\n                        }\n                    }\n                    if (v4 == v22 || v4 != v1)\n                    {\n                        v26 |= (unsigned int)((unsigned long long)v13->field_8 >> 8) & 1023;\n                        v22 = (unsigned long long)(unsigned int)sub_4099c0();\n                        if (v22 != -1)\n                        {\n                            v31 = sub_408b10();\n                            if (v31 != 0)\n                            {\n                                v4 = v21;\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                *((long long *)(v8[3] + v22 * 8)) = *((long long *)(v8[3] + v4 * 8));\n                v37 = 0;\n            }\n        }\n        else\n        {\n            v17 = v4 * 8;\n            v18 = *((long long *)(v8[3] + v4 * 8));\n            *((long long *)(v11 + v22 * 24 + 8)) = 0;\n            v0 = v18;\n            v22 = (unsigned int)sub_4099c0();\n            if (v22 != -1)\n            {\n                v0 = v0;\n                *((long long *)(v8[3] + v12 * 8)) = *((long long *)&((char *)v17)[v8[3]]);\n            }\n        }\n        if (*((char *)((v4 << 4) + *(v8) + 8)) != 4 && v33 != -1 && v16 != 1 && *((long long *)(v11 + ((char *)v4 + 0x2 * v4 << 3) + 8)) != 0 && ((unsigned int)v37 == 0 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>))) && ((unsigned int)v37 == 0 || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0) && (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rsi<8>, 0x0<64>, cc_ndep<8>)) || v34 != 0) && (v34 != 0 || (*((char *)((v8[2] - 1 << 4) + v10 + 10)) & 4) != 0) && v22 != -1 || *((char *)((v4 << 4) + *(v8) + 8)) == 4 && v22 != -1)\n        {\n            v4 = v0;\n        }\n        if (...)\n        {\n            v37 = 12;\n        }\n    }\n    return v37;\n}\n"
        },
        {
            "funcName": "sub_405bc0",
            "funcStartAddr": "0x405bc0",
            "funcEndAddr": "0x405c29",
            "decompiledFuncCode": "int sub_405bc0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_405630();\n}\n"
        },
        {
            "funcName": "sub_412e28",
            "funcStartAddr": "0x412e28",
            "funcEndAddr": "0x412e36",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[8];\n    char field_8;\n} struct_0;\n\nint sub_412e28()\n{\n    struct_0 *v1;  // rbx\n\n    v1->field_8 = 11;\n}\n"
        },
        {
            "funcName": "sub_416950",
            "funcStartAddr": "0x416950",
            "funcEndAddr": "0x416968",
            "decompiledFuncCode": "extern int512_t g_61d2a8;\n\nint sub_416950()\n{\n}\n"
        },
        {
            "funcName": "sub_40595b",
            "funcStartAddr": "0x40595b",
            "funcEndAddr": "0x405a21",
            "decompiledFuncCode": "int sub_40595b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_404400();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_4064b0();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_404400();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_403000",
            "funcStartAddr": "0x403000",
            "funcEndAddr": "0x403180",
            "decompiledFuncCode": "extern unsigned int g_4169a9;\nextern unsigned int g_61d3a0;\nextern char g_61d431;\nextern char g_61d433;\nextern unsigned long long g_61d440;\nextern char *g_61d448;\nextern unsigned long long g_61d450;\nextern unsigned int g_61d458;\n\nint sub_403000()\n{\n    char v0;  // [bp-0x98]\n    unsigned long long v1;  // [bp-0x18]\n    unsigned long v2;  // [bp-0x10]\n    unsigned long long v3;  // [bp-0x8]\n    unsigned long v5;  // rax\n    unsigned long long v6;  // r12\n    unsigned long long v7;  // rbx\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // rbx\n    unsigned int v13;  // ebx\n    unsigned int v14;  // r12d\n    unsigned int v15;  // edx\n    unsigned long long v16;  // rax\n    unsigned long long v18;  // rbx\n    unsigned long long v19;  // r12\n\n    if (g_61d448 != 0)\n    {\n        v3 = v6;\n        v2 = stack_base + 0;\n        v1 = v7;\n        if ((*(g_61d448) & 32) == 0)\n        {\n            v16 = sub_4073b0();\n            if ((unsigned int)v16 == 0)\n            {\n                if (g_61d450 == 0 && g_61d431 != 0)\n                {\n                    sigprocmask(g_61d450, 0x61d3a0, (unsigned int)&v0);\n                    v13 = unlink(g_61d440);\n                    v14 = *(__errno_location());\n                    g_61d458 = g_61d458 - v15;\n                    v16 = sigprocmask(0x2, (unsigned int)&v0, 0x0);\n                    if (v13 != 0)\n                    {\n                        sub_405d00();\n                        v16 = error(0x0, v14, \"%s\");\n                    }\n                }\n                if ((g_61d431 == 0 || g_61d450 != 0) && g_61d433 == 0)\n                {\n                    sub_404210();\n                    v16 = __fprintf_chk();\n                }\n                g_61d448 = 0;\n                v18 = v1;\n                v19 = v3;\n                return v16;\n            }\n            v9 = (unsigned int)sub_405d00();\n            error(0x0, *(__errno_location()), \"%s\");\n            g_61d448 = 0;\n            sub_402fb0(); /* do not return */\n        }\n        v8 = (unsigned int)sub_405c30();\n        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x4169a9, 0x5));\n        g_61d448 = 0;\n        sub_402fb0(); /* do not return */\n    }\n    return v5;\n}\n"
        },
        {
            "funcName": "sub_405e80",
            "funcStartAddr": "0x405e80",
            "funcEndAddr": "0x405e96",
            "decompiledFuncCode": "int sub_405e80()\n{\n}\n"
        },
        {
            "funcName": "sub_406370",
            "funcStartAddr": "0x406370",
            "funcEndAddr": "0x406428",
            "decompiledFuncCode": "int sub_406370()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long *|unsigned long long v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || (unsigned int)v13 > 47 && v12 != 0)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_405f10();\n    }\n}\n"
        },
        {
            "funcName": "sub_406310",
            "funcStartAddr": "0x406310",
            "funcEndAddr": "0x406369",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_406310()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_405f10();\n}\n"
        },
        {
            "funcName": "sub_4064b0",
            "funcStartAddr": "0x4064b0",
            "funcEndAddr": "0x4064ca",
            "decompiledFuncCode": "int sub_4064b0()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_403510(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_412f40",
            "funcStartAddr": "0x412f40",
            "funcEndAddr": "0x412f94",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    char field_8;\n} struct_0;\n\nint sub_412f40()\n{\n    char v2;  // r15b\n    unsigned long v3;  // r12\n    unsigned long long v4;  // r12\n    unsigned long long v5[12];  // r13\n    struct_0 *v7;  // rbx\n\n    if ((v2 & 8) == 0)\n    {\n        v4 = v3 + 1;\n        if (v4 != v5[11])\n        {\n            v5[9] = v4;\n            sub_412be0();\n            v5[9] = v5[9] - 1;\n        }\n    }\n    v7->field_8 = 12;\n    v7->field_0 = 32;\n}\n"
        },
        {
            "funcName": "sub_416270",
            "funcStartAddr": "0x416270",
            "funcEndAddr": "0x4162aa",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[56];\n    char field_38;\n} struct_0;\n\nint sub_416270()\n{\n    void tmp_19;  // tmp #19\n    unsigned long v1;  // rdx\n    struct_0 *v2;  // rdi\n    unsigned long long v3[3];  // rsi\n    unsigned long v4;  // rcx\n    unsigned long v5;  // r8\n    struct_0 *v6;  // rdi\n    unsigned long long v7[3];  // rsi\n    unsigned long v8;  // rax\n\n    if (v1 != 0)\n    {\n        tmp_19 = v2->field_38;\n        v2->field_38 = (unsigned int)(v2->field_38 & 4294967033) | 2;\n        v3[0] = v1;\n        v3[1] = v4;\n        v3[2] = v5;\n        return tmp_19 & -7 | 2;\n    }\n    v6->field_38 = v6->field_38 & 249;\n    v7[0] = 0;\n    v7[2] = 0;\n    v7[1] = 0;\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_406550",
            "funcStartAddr": "0x406550",
            "funcEndAddr": "0x406571",
            "decompiledFuncCode": "int sub_406550()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_403510(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_415900",
            "funcStartAddr": "0x415900",
            "funcEndAddr": "0x41590f",
            "decompiledFuncCode": "extern unsigned long long g_61d648;\n\nint sub_415900()\n{\n    unsigned long long v1;  // rax\n    unsigned long long v2;  // rdi\n\n    v1 = g_61d648;\n    g_61d648 = v2;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_413290",
            "funcStartAddr": "0x413290",
            "funcEndAddr": "0x413336",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[72];\n    unsigned long long field_48;\n} struct_0;\n\nint sub_413290()\n{\n    unsigned long long v1;  // rdi\n    char v3[9];  // rsi\n    unsigned long v4;  // rdx\n    unsigned long long v5;  // rbx\n    unsigned long long v6;  // rax\n\n    v5 = -1;\n    while (true)\n    {\n        *((unsigned long long *)(v1 + 72)) = *((long long *)(v1 + 72)) + (unsigned long long)(unsigned int)sub_412be0();\n        if (v3[1] != 2)\n        {\n            if (v3[0] == 44 || v3[1] == 24)\n            {\n                break;\n            }\n            if (((unsigned long long)v3[0] - 48 & 255) <= 9 && v3[1] == 1 && v5 != -2)\n            {\n                if (v5 != -1)\n                {\n                    v5 = (32816 < v4 + (v5 + (v5 << 2) << 1)? 32816 : v4 + (v5 + (v5 << 2) << 1)) - 48;\n                }\n                else\n                {\n                    v5 = (int)((unsigned int)v3[0] - 48);\n                }\n            }\n            if (v5 == -2 || ((unsigned long long)v3[0] - 48 & 255) > 9 || v3[1] != 1)\n            {\n                v5 = -2;\n            }\n        }\n        else\n        {\n            v5 = -2;\n        }\n    }\n    v6 = v5;\n    return v6;\n}\n"
        },
        {
            "funcName": "sub_406f70",
            "funcStartAddr": "0x406f70",
            "funcEndAddr": "0x40737d",
            "decompiledFuncCode": "int sub_406f70()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char [3]|char v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned int|unsigned long|unsigned long long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned int|unsigned long long v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long v37;  // rcx\n    unsigned long long v38;  // rcx\n    unsigned long long v39;  // rcx\n    unsigned long long v42;  // cc_dep1\n    unsigned int v43;  // cc_dep1\n    unsigned int v44;  // cc_dep1\n    unsigned int v45;  // cc_dep1\n    unsigned int v46;  // cc_dep1\n    unsigned long long v47;  // rax\n    unsigned long long v48;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((v17 == 34 || *(v14) == 0) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4295592)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && v9 != 0 && v15 != 45 && *((char *)v6) != 0 && v19 != 0 || v9 != 0 && v1[0] != 0 && v15 != 45 && *(v12) != v5 && (v17 == 34 || *(v14) == 0) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v36 = v30;\n                v5 = 6;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v43 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v43 != 1);\n                break;\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v47 = tmp_11 * v28 * v28;\n                    v33 = v47;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n            case 14:\n                v38 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v45 != 1);\n            case 18: case 50:\n                v39 = v30;\n                v5 = 4;\n                do\n                {\n                    v33 = v33 * v39;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v46 != 1);\n            case 23:\n                v34 = v30;\n                v35 = 8;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v42 = v35;\n                    v35 -= 1;\n                }\n                while (v42 != 1);\n            case 24:\n                v37 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v37;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v44 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v48 = &v32[v31];\n                *(v12) = v48;\n            case 53:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 = -1;\n                    break;\n                }\n                else\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4097d0",
            "funcStartAddr": "0x4097d0",
            "funcEndAddr": "0x4097e4",
            "decompiledFuncCode": "int sub_4097d0()\n{\n    sub_4097a0();\n    return 0;\n}\n"
        },
        {
            "funcName": "sub_405830",
            "funcStartAddr": "0x405830",
            "funcEndAddr": "0x405863",
            "decompiledFuncCode": "extern int512_t g_61d5c0;\n\nint sub_405830()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_61d5c0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_61d5c0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_403a70",
            "funcStartAddr": "0x403a70",
            "funcEndAddr": "0x403b30",
            "decompiledFuncCode": "extern unsigned int g_4169be;\nextern unsigned int g_4169ed;\nextern unsigned long long stderr;\n\nint sub_403a70()\n{\n    unsigned long v0;  // [bp-0x20]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // r13\n    unsigned long v5;  // r12\n    unsigned long v6;  // rbx\n    unsigned long long v7;  // r13\n    unsigned long v8;  // rsi\n    unsigned long long v10;  // rbx\n    unsigned long v11;  // rdx\n\n    v2 = v4;\n    v1 = v5;\n    v0 = v6;\n    v7 = (unsigned int)sub_405e80();\n    dcgettext(0x0, 0x4169ed, 0x5);\n    __fprintf_chk();\n    if (v8 != 0)\n    {\n        v10 = (unsigned int)sub_404210();\n        dcgettext(0x0, 0x4169be, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        fputc(0xa, stderr);\n    }\n    if ((char)v11 == 0)\n    {\n        sub_403a40();\n        sub_403000();\n    }\n    sub_402fb0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407570",
            "funcStartAddr": "0x407570",
            "funcEndAddr": "0x4075ab",
            "decompiledFuncCode": "int sub_407570()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_4075b0();\n    }\n}\n"
        },
        {
            "funcName": "sub_407610",
            "funcStartAddr": "0x407610",
            "funcEndAddr": "0x4076e5",
            "decompiledFuncCode": "int sub_407610()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_402df1",
            "funcStartAddr": "0x402df1",
            "funcEndAddr": "0x402e48",
            "decompiledFuncCode": "extern char g_61d368;\nextern unsigned long long g_61d370;\n\nint sub_402df1()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_61d368 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_61d370 >= 0)\n            {\n                break;\n            }\n            g_61d370 = g_61d370 + 1;\n            *((long long *)(6409792 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_61d368 = 1;\n        return sub_402d9b();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_405f00",
            "funcStartAddr": "0x405f00",
            "funcEndAddr": "0x405f0e",
            "decompiledFuncCode": "int sub_405f00()\n{\n}\n"
        },
        {
            "funcName": "sub_408aa0",
            "funcStartAddr": "0x408aa0",
            "funcEndAddr": "0x408afb",
            "decompiledFuncCode": "int sub_408aa0()\n{\n    unsigned long long v1;  // rsi\n    unsigned long long v3[3];  // rdi\n    unsigned long long v4[3];  // rbx\n    unsigned long v5;  // rsi\n    unsigned long long *v6;  // rax\n    unsigned long long *v7;  // rsi\n    unsigned long long v8;  // rax\n\n    v4 = v3;\n    v7 = v3[1];\n    v6 = v3[2];\n    if (*(v3) == v3[1])\n    {\n        v5 = (v3[1] + 1) * 16;\n        *(v3) = (v3[1] + 1) * 2;\n        v6 = realloc(v6, v5);\n        if (v6 != 0)\n        {\n            v4[2] = v6;\n            v7 = v4[1];\n        }\n        else\n        {\n            v8 = 0;\n        }\n    }\n    if (*(v3) != v3[1] || v6 != 0)\n    {\n        v3[1] = (char *)v7 + 1;\n        *((unsigned long long *)((char *)v6 + 0x8 * v7)) = v1;\n        v8 = 1;\n    }\n    return v8;\n}\n"
        },
        {
            "funcName": "sub_4161f0",
            "funcStartAddr": "0x4161f0",
            "funcEndAddr": "0x416208",
            "decompiledFuncCode": "int sub_4161f0()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r8\n\n    v1 = 1;\n    v0 = v3;\n    return sub_4159e0();\n}\n"
        },
        {
            "funcName": "sub_40aa90",
            "funcStartAddr": "0x40aa90",
            "funcEndAddr": "0x40abc4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    uint128_t field_0;\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_1;\n\ntypedef struct struct_3 {\n    uint128_t field_0;\n    unsigned long long field_8;\n    struct struct_4 *field_10;\n} struct_3;\n\ntypedef struct struct_5 {\n    char padding_0[16];\n    unsigned long long field_10;\n} struct_5;\n\ndouble sub_40aa90()\n{\n    unsigned int v0;  // [bp-0x4c]\n    unsigned long v1;  // [bp-0x48]\n    unsigned long long v2;  // [bp-0x40]\n    void *v3;  // [bp-0x38]\n    struct_1 *v5;  // rsi\n    struct_3 *v6;  // r14\n    unsigned long long v7;  // rdi\n    unsigned long long v8[7];  // r13\n    unsigned long v9;  // rcx\n    unsigned int v10;  // ebx\n    void v11;  // xmm0\n    struct_5 *v12;  // rsi\n    unsigned long long v13;  // r9\n    unsigned long long v14;  // r11\n    unsigned long long v15;  // r10\n    unsigned long long v16;  // rcx\n    unsigned long long v17;  // rdi\n    unsigned long long *v18;  // rax\n    unsigned long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // r12\n    void v22;  // xmm0\n\n    v6 = v5;\n    v8 = v7;\n    v10 = v9;\n    v2 = 0;\n    v1 = *((long long *)&((char *)&v5->field_0)[8]);\n    v3 = malloc(*((long long *)&((char *)&v5->field_0)[8]) * 8);\n    if (v3 != 0)\n    {\n        if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n        {\n            v21 = 0;\n            while (true)\n            {\n                v12 = v8[6] + *((long long *)(v6->field_8 + v21 * 8)) * 24;\n                v13 = *((long long *)(v8[6] + *((long long *)(v6->field_8 + v21 * 8)) * 24 + 8));\n                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>)))\n                {\n                    v14 = v12->field_10;\n                    v15 = *(v8);\n                    v16 = 0;\n                    while (true)\n                    {\n                        v17 = *((long long *)(v14 + v16 * 8));\n                        v18 = *((long long *)(v14 + v16 * 8)) * 16 + v15;\n                        if (v19 == *(v18) && v10 == (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)))\n                        {\n                            if (v17 == -1)\n                            {\n                                break;\n                            }\n                            v20 = sub_40a190();\n                            break;\n                        }\n                        if (v19 != *(v18) || v10 != (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)))\n                        {\n                            v16 += 1;\n                            if (v13 == v16)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (true)\n                    {\n                        v20 = sub_40a660();\n                    }\n                    else if (v19 == *(v18) && v10 == (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)) && v17 != -1)\n                    {\n                        *((unsigned long long *)&v0) = v20;\n                        free(v3);\n                        return v22;\n                    }\n                    else if (v19 == *(v18) && v10 == (char)*((char *)((*((long long *)(v14 + (v16 << 3))) << 4) + v15 + 8)) && v17 != -1)\n                    {\n                        v21 += 1;\n                        if (*((long long *)&((char *)&v6->field_0)[8]) <= v21)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, Load(addr=(rsi<8> + 0x8<64>), size=8, endness=Iend_LE), 0x0<64>, cc_ndep<8>) || v20 != 0)\n                {\n                    v20 = sub_40a660();\n                }\n                if (v20 != 0)\n                {\n                    *((unsigned long long *)&v0) = v20;\n                    free(v3);\n                    return v22;\n                }\n            }\n        }\n        free(v6->field_8);\n        v6->field_8 = v3;\n        v6->field_0 = *((int128_t *)&v1);\n        return *((int128_t *)&v1);\n    }\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_40bd00",
            "funcStartAddr": "0x40bd00",
            "funcEndAddr": "0x40be3d",
            "decompiledFuncCode": "int sub_40bd00()\n{\n    unsigned long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x50]\n    unsigned long|unsigned long long * v2;  // [bp-0x48]\n    unsigned long long v3;  // [bp-0x40]\n    unsigned long long v5[32];  // rdi\n    unsigned long long v6[21];  // r12\n    unsigned long long *v7;  // rsi\n    unsigned long long v8[32];  // r15\n    unsigned long long v9;  // rcx\n    unsigned long long v11;  // rbp\n    unsigned long long *v12;  // rax\n    unsigned long long v13;  // rax\n    unsigned long v14;  // rcx\n    unsigned long long v15;  // r9\n    unsigned long long v16;  // rbx\n    unsigned long long v17[2];  // rax\n    unsigned long long **v18;  // rdx\n    unsigned long long v19;  // rax\n\n    v6 = v5[19];\n    if (*(v7) > 0)\n    {\n        v8 = v5;\n        v16 = 0;\n        while (true)\n        {\n            v11 = (*(v18))[v16];\n            v12 = (*(v18))[v16] * 16 + *(v6);\n            if (*((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) == 8)\n            {\n                v13 = *(v12);\n                if (v13 <= 63)\n                {\n                    *((unsigned long long [21])&v0) = v6[20];\n                    if (((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0)\n                    {\n                        v14 = v8[29];\n                        v15 = v8[31];\n                        if (v8[29] == v8[30])\n                        {\n                            v1 = v18;\n                            v2 = v14 * 2;\n                            v15 = realloc(v5[31], v14 * 16);\n                            if (v15 != 0)\n                            {\n                                v8[31] = v15;\n                                v14 = v8[29];\n                                v8[30] = v2;\n                            }\n                        }\n                        if (v15 != 0 || v8[29] != v8[30])\n                        {\n                            v2 = v15;\n                            v1 = v14;\n                            v3 = v3;\n                            v17 = calloc(0x1, 0x30);\n                            *((unsigned long long *[2])((char *)v2 + 0x8 * v1)) = v17;\n                            if (v17 != 0)\n                            {\n                                v17[0] = v9;\n                                v18 = v3;\n                                v16 += 1;\n                                v17[1] = v11;\n                                v8[29] = (char *)v1 + 1;\n                            }\n                        }\n                        if (v17 == 0 || v15 == 0 && v8[29] == v8[30])\n                        {\n                            v19 = 12;\n                        }\n                    }\n                }\n            }\n            if (((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) == 0 || v13 > 63 || *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) != 8)\n            {\n                v16 += 1;\n                if (v16 >= *(v7))\n                {\n                    break;\n                }\n            }\n        }\n        if (v13 <= 63 && *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) == 8 && ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0 && v17 != 0 && (v15 != 0 || v8[29] != v8[30]) && v16 >= *(v7) || ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) == 0 || v13 > 63 || *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) != 8)\n        {\n            v19 = 0;\n        }\n        else if (v13 <= 63 && *((char *)(((*(v18))[v16] << 4) + *(v6) + 8)) == 8 && ((char)((char)*(&((char *)stack_base)[((v13 & 63) >> 3) + -376]) >> (unsigned long long)(char)(v13 & 63 & 7)) & 1) != 0 && (v15 == 0 || v17 == 0) && (v8[29] == v8[30] || v17 == 0))\n        {\n            return v19;\n        }\n    }\n    v19 = 0;\n    return v19;\n}\n"
        },
        {
            "funcName": "sub_402e50",
            "funcStartAddr": "0x402e50",
            "funcEndAddr": "0x402f00",
            "decompiledFuncCode": "extern unsigned int g_4169a4;\nextern unsigned int g_61d2b0;\nextern unsigned long long g_61d460;\nextern unsigned long long g_61d468;\nextern unsigned long long g_61d470;\n\nint sub_402e50()\n{\n    unsigned long v2;  // rdi\n\n    strcpy(g_61d470, g_61d468);\n    if (g_61d460 != 0)\n    {\n        __sprintf_chk(g_61d470 + strlen(g_61d468), 0x1, 0xffffffff, g_61d460, v2);\n        return g_61d470;\n    }\n    __sprintf_chk(g_61d470 + strlen(g_61d468), 0x1, 0xffffffff, 0x4169a4, g_61d2b0);\n    return g_61d470;\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_csplit.elf"
}