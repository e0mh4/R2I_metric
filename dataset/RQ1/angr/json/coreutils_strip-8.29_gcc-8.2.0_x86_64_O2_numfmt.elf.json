{
    "funcInfo": [
        {
            "funcName": "sub_404a10",
            "funcStartAddr": "0x404a10",
            "funcEndAddr": "0x404a22",
            "decompiledFuncCode": "int sub_404a10()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rdi\n    unsigned int *v3;  // rsi\n\n    v1 = -18446744069414584321;\n    if (*(v2) >= *(v3))\n    {\n        v1 = [D] amd64g_calculate_condition(0xf<64>, 0x7<64>, Conv(32->64, Load(addr=rdi<8>, size=4, endness=Iend_LE)), Conv(32->64, Load(addr=rsi<8>, size=4, endness=Iend_LE)), cc_ndep<8>);\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_407042",
            "funcStartAddr": "0x407042",
            "funcEndAddr": "0x40706b",
            "decompiledFuncCode": "int sub_407042()\n{\n    unsigned long v0;  // [bp-0x30]\n    unsigned long v1;  // [bp-0x28]\n    unsigned long v2;  // [bp-0x20]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v4;  // [bp-0x10]\n    unsigned long v5;  // [bp-0x8]\n    unsigned long v7;  // r15\n    unsigned long v8;  // r14\n    unsigned long v9;  // r13\n    unsigned long v10;  // r12\n    unsigned long v11;  // rbx\n\n    v5 = v7;\n    v4 = v8;\n    v3 = v9;\n    v2 = v10;\n    v1 = stack_base + 0;\n    v0 = v11;\n}\n"
        },
        {
            "funcName": "sub_406f40",
            "funcStartAddr": "0x406f40",
            "funcEndAddr": "0x406f73",
            "decompiledFuncCode": "extern int512_t g_6104e0;\n\nint sub_406f40()\n{\n    void tmp_2;  // tmp #2\n    void tmp_52;  // tmp #52\n    void tmp_123;  // tmp #123\n    unsigned long v1;  // rdi\n    unsigned long v2;  // rsi\n    unsigned long long v3;  // rcx\n    unsigned long long v5;  // rsi\n    unsigned long v6;  // rdx\n\n    tmp_2 = v1;\n    tmp_52 = v1 == 0;\n    v3 = (unsigned int)v2 & 31;\n    v5 = (unsigned int)*((int *)((tmp_52? &g_6104e0 : tmp_2) + v2 % 32 * 4 + 8));\n    tmp_123 = ((unsigned int)v6 ^ (unsigned int)(v5 >> (v3 & 31))) & 1;\n    *((unsigned int *)((v1 == 0? &g_6104e0 : v1) + v2 % 32 * 4 + 8)) = (unsigned int)(tmp_123 << (v3 & 31)) ^ (unsigned int)v5;\n    return (unsigned int)(v5 >> (v3 & 31)) & 1;\n}\n"
        },
        {
            "funcName": "sub_403d60",
            "funcStartAddr": "0x403d60",
            "funcEndAddr": "0x403d69",
            "decompiledFuncCode": "int sub_403d60()\n{\n    [D] PutI(904:F64x8)[t8,0] = t12\n    [D] PutI(968:I8x8)[t8,0] = 0x01\n    [D] PutI(904:F64x8)[t8,2] = t5\n    [D] PutI(968:I8x8)[t8,2] = 0x01\n}\n"
        },
        {
            "funcName": "sub_40706b",
            "funcStartAddr": "0x40706b",
            "funcEndAddr": "0x407131",
            "decompiledFuncCode": "int sub_40706b()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long v1;  // [bp-0x50]\n    unsigned long v2;  // [bp-0x48]\n    unsigned int v3;  // [bp-0x2c]\n    unsigned long v4;  // [bp-0x28]\n    unsigned long v5;  // [bp-0x20]\n    unsigned long v6;  // [bp-0x18]\n    unsigned long v7;  // [bp-0x10]\n    unsigned long long v8;  // [bp+0x0]\n    unsigned long long v10;  // [bp+0x10]\n    unsigned long long v11;  // [bp+0x18]\n    unsigned long long v12;  // [bp+0x20]\n    unsigned long long v13;  // [bp+0x28]\n    unsigned long v14;  // rcx\n    unsigned long v15;  // rax\n    unsigned long long v17[7];  // rbx\n    unsigned int *v18;  // r13\n    unsigned long long *v20;  // r12\n    unsigned long long v21;  // rbx\n    unsigned long long v22;  // r12\n    unsigned long long v23;  // r13\n    unsigned long long v24;  // r14\n    unsigned long long v25;  // r15\n\n    v17 = (v14 == 0? v15 : rbx<8>);\n    v18 = __errno_location();\n    v3 = *(v18);\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = &v17[1];\n    v6 = &v17[1];\n    v7 = (unsigned int)sub_405b10();\n    v5 = v7 + 1;\n    v4 = (unsigned int)sub_407b50();\n    *((unsigned long long [7])&v2) = v17[6];\n    *((unsigned long long [7])&v1) = v17[5];\n    v0 = v6;\n    sub_405b10();\n    *(v18) = v3;\n    if (v20 != 0)\n    {\n        *(v20) = v7;\n    }\n    v21 = v8;\n    v22 = v10;\n    v23 = v11;\n    v24 = v12;\n    v25 = v13;\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4036f6",
            "funcStartAddr": "0x4036f6",
            "funcEndAddr": "0x403724",
            "decompiledFuncCode": "int sub_4036f6() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407150",
            "funcStartAddr": "0x407150",
            "funcEndAddr": "0x4071e5",
            "decompiledFuncCode": "extern struct_0 *g_6102d8;\nextern unsigned long long g_6102e0;\nextern unsigned long long g_6102e8;\nextern unsigned int g_6102f0;\nextern unsigned long long g_6103e0;\n\nint sub_407150()\n{\n    unsigned long long v1;  // rax\n    unsigned long long *v2;  // rbx\n    void *v3;  // rdi\n\n    v1 = g_6102f0;\n    if (g_6102f0 > 1)\n    {\n        v2 = &g_6102d8[1].field_8;\n        while (true)\n        {\n            v3 = *(v2);\n            v2 = &v2[2];\n            v1 = free(v3);\n            if (v2 == &g_6102d8[(unsigned long long)(g_6102f0 - 2) + 2].field_8)\n            {\n                break;\n            }\n        }\n    }\n    if (g_6102d8->field_8 != 6357984)\n    {\n        v1 = free(g_6102d8->field_8);\n        g_6102e0 = 0x100;\n        g_6102e8 = &g_6103e0;\n    }\n    if (g_6102d8 != 6357728)\n    {\n        v1 = free(g_6102d8);\n        g_6102d8 = &g_6102e0;\n    }\n    g_6102f0 = 1;\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_409700",
            "funcStartAddr": "0x409700",
            "funcEndAddr": "0x409715",
            "decompiledFuncCode": "int sub_409700()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409090();\n}\n"
        },
        {
            "funcName": "sub_407500",
            "funcStartAddr": "0x407500",
            "funcEndAddr": "0x407517",
            "decompiledFuncCode": "int sub_407500()\n{\n}\n"
        },
        {
            "funcName": "sub_407540",
            "funcStartAddr": "0x407540",
            "funcEndAddr": "0x40754a",
            "decompiledFuncCode": "int sub_407540()\n{\n}\n"
        },
        {
            "funcName": "sub_409e90",
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409ecb",
            "decompiledFuncCode": "int sub_409e90()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    unsigned int *v3;  // rdi\n\n    v0 = v2;\n    if (v3 != 0 && __freading() != 0 && ((unsigned short)*(v3) & 0x100) != 0)\n    {\n        sub_409ed0();\n    }\n}\n"
        },
        {
            "funcName": "sub_407b50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407b6a",
            "decompiledFuncCode": "int sub_407b50()\n{\n    unsigned int v1;  // rdi\n    unsigned long long v2;  // rax\n\n    v2 = malloc(v1);\n    if (v2 == 0 && v1 != 0)\n    {\n        sub_407da0(); /* do not return */\n    }\n    if (v1 == 0 || v2 != 0)\n    {\n        return v2;\n    }\n}\n"
        },
        {
            "funcName": "sub_405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x405a09",
            "decompiledFuncCode": "extern unsigned long long __progname_full;\nextern unsigned long long g_6103d8;\nextern unsigned long long program_invocation_short_name;\nextern unsigned long long stderr;\n\nint sub_405970()\n{\n    unsigned long long v1;  // rdi\n    unsigned long long v3;  // rbx\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // r8\n    unsigned long long v6;  // cc_dep1\n    unsigned long long v7;  // cc_dep2\n    unsigned long v8;  // d\n    char *v9;  // rdi\n    char *v10;  // rsi\n    unsigned long long v11;  // rcx\n    char *v13;  // rdi\n    unsigned long long v14;  // rcx\n    char *v15;  // rsi\n    unsigned long long v16;  // cc_dep1\n    unsigned long long v17;  // cc_dep2\n\n    if (v1 != 0)\n    {\n        v3 = v1;\n        v4 = strrchr();\n        if (v4 != 0)\n        {\n            v5 = v4 + 1;\n            if (v4 + 1 - v1 > 6)\n            {\n                v10 = v4 - 6;\n                v9 = \"/.libs/\";\n                v11 = 7;\n                while (v11 != 0)\n                {\n                    v11 -= 1;\n                    v6 = *(v10);\n                    v7 = *(v9);\n                    v9 = &v9[v8];\n                    v10 = &v10[v8];\n                    break;\n                }\n                if ((v6 > v7) - 0 - (v6 < v7) == 0)\n                {\n                    v13 = \"lt-\";\n                    v14 = 3;\n                    v15 = v5;\n                    v3 = v5;\n                    while (v14 != 0)\n                    {\n                        v14 -= 1;\n                        v16 = *(v15);\n                        v17 = *(v13);\n                        v13 = &v13[v8];\n                        v15 = &v15[v8];\n                        break;\n                    }\n                    if ((v16 > v17) - 0 - (v16 < v17) == 0)\n                    {\n                        v3 = v4 + 4;\n                        program_invocation_short_name = v4 + 4;\n                    }\n                }\n            }\n        }\n        g_6103d8 = v3;\n        __progname_full = v3;\n        return v4;\n    }\n    fwrite(\"A NULL argv[0] was passed through an exec system call.\\n\", 0x1, 0x37, stderr);\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_406fa0",
            "funcStartAddr": "0x406fa0",
            "funcEndAddr": "0x406fcb",
            "decompiledFuncCode": "extern char g_6104e0;\n\nint sub_406fa0()\n{\n    void tmp_2;  // tmp #2\n    void tmp_11;  // tmp #11\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long long v3[7];  // rdi\n    unsigned long v4;  // rsi\n    unsigned long v5;  // rdx\n\n    tmp_2 = v2;\n    tmp_11 = v2 == 0;\n    v3 = (v2 == 0? &g_6104e0 : v2);\n    *((int *)(tmp_11? &g_6104e0 : tmp_2)) = 10;\n    if (v4 != 0 && v5 != 0)\n    {\n        v3[5] = v4;\n        v3[6] = v5;\n        return &g_6104e0;\n    }\n    if (v4 == 0 || v5 == 0)\n    {\n        v0 = &g_6104e0;\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_408990",
            "funcStartAddr": "0x408990",
            "funcEndAddr": "0x408a65",
            "decompiledFuncCode": "int sub_408990()\n{\n    unsigned int v1[13];  // rsi\n    unsigned long long v2;  // r12\n    unsigned long long v3;  // rbp\n    unsigned long long v4;  // rbx\n    unsigned long long v5;  // r9\n    unsigned long long v6;  // r8\n    unsigned long long v7;  // r14\n    unsigned long long v8;  // rdx\n    unsigned long v9;  // rdi\n    unsigned long long *v10;  // rax\n    unsigned long long *v12;  // rdx\n    unsigned long long v13;  // rcx\n    unsigned long long v14;  // r10\n    unsigned long long *v15;  // rax\n    unsigned long long *v17;  // rdx\n    unsigned long long v18;  // rcx\n    unsigned int v19;  // r9d\n\n    v2 = v1[5 + 1];\n    v3 = v1[0];\n    v4 = (int)v1[6];\n    v5 = v1[5 + 1];\n    v14 = v1[0];\n    while ((unsigned int)v14 > v1[6])\n    {\n        for (v6 = (int)v1[6]; v5 < v1[6]; v19 = v5 + v7)\n        {\n            v7 = v14 - v6;\n            v8 = v6 - v5;\n            if ((unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n            {\n                v14 -= v8;\n                v10 = v9 + v5 * 8;\n                v12 = v14 - v5;\n                do\n                {\n                    v13 = *(v10);\n                    *(v10) = *((long long *)((char *)v10 + 0x8 * v12));\n                    *((unsigned long long *)((char *)v10 + 0x8 * v12)) = v13;\n                    v10 = &v10[1];\n                }\n                while (v9 + 8 + ((unsigned int)v8 - 1 + v5) * 8 != v10);\n                if ((unsigned int)v14 <= (unsigned int)v6)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v15 = v9 + v5 * 8;\n                v17 = v4 - v5;\n                do\n                {\n                    v18 = *(v15);\n                    *(v15) = *((long long *)((char *)v15 + 0x8 * v17));\n                    *((unsigned long long *)((char *)v15 + 0x8 * v17)) = v18;\n                    v15 = &v15[1];\n                }\n                while (v15 != v9 + 8 + (v7 - 1 + v5) * 8);\n            }\n        }\n        if (v5 >= v1[6] || (unsigned int)(v14 - v6) > (unsigned int)(v6 - v5))\n        {\n            v1[6] = v3;\n            v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n            return stack_base + 0 - v6;\n        }\n    }\n    v1[6] = v3;\n    v1[5 + 1] = (unsigned int)(v2 + stack_base + 0 - v6);\n    return stack_base + 0 - v6;\n}\n"
        },
        {
            "funcName": "sub_408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x40906e",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    char padding_18[8];\n    struct struct_1 *field_20;\n} struct_0;\n\nextern unsigned int g_40db70;\nextern unsigned int g_40db90;\nextern unsigned int g_40dbc0;\nextern unsigned int g_40dbe0;\nextern unsigned int g_40dc10;\nextern unsigned long long stderr;\n\nint sub_408a70()\n{\n    char *v0;  // [bp-0x78]\n    unsigned long long v1;  // [bp-0x70]\n    unsigned int *v2;  // [bp-0x68]\n    char *v3;  // [bp-0x58]\n    unsigned int v4;  // [bp-0x50]\n    char v5;  // [bp-0x49]\n    unsigned int v6;  // [bp-0x44]\n    unsigned int v7;  // [bp-0x40]\n    unsigned int v8;  // [bp-0x3c]\n    struct_0 *v9;  // [bp+0x8]\n    unsigned int v10;  // [bp+0x10]\n    char *v11;  // r14\n    char *v12;  // rdx\n    unsigned long v13;  // r8\n    char *v14;  // rbp\n    unsigned long long v15;  // rax\n    unsigned long long v16;  // r13\n    unsigned long long v17;  // rcx\n    unsigned long long|unsigned long long * v18;  // rbx\n    unsigned long long|unsigned int|unsigned long v19;  // r12\n    char *v20;  // r15\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // r8\n    char *v24;  // rdi\n    unsigned long long v25;  // r15\n    unsigned long long v26;  // rbp\n    unsigned long long v27;  // rax\n    unsigned int v28;  // r9d\n    unsigned long long v29;  // r9\n    unsigned long long v30;  // rdx\n    unsigned int v31;  // ecx\n    char *v33;  // rbp\n    unsigned long long v34;  // rdx\n    unsigned long long *v35;  // rsi\n    void *v36;  // rdi\n    unsigned long long v37;  // rbx\n    unsigned long long v38;  // rbp\n    unsigned long long v39;  // r12\n    unsigned int *v41;  // rdx\n    unsigned long long v42;  // rax\n    unsigned long long v43;  // r14\n\n    v11 = v9->field_20;\n    v3 = v12;\n    v2 = v13;\n    v14 = v9->field_20;\n    *((struct struct_1 *)&v5) = *(v9->field_20);\n    if (*(v9->field_20) != 61 && *(v9->field_20) != 0)\n    {\n        do\n        {\n            v14 = &v14[1];\n            v15 = *(v14);\n        }\n        while (v15 != 61 && (char)v15 != 0);\n        v16 = v14 - v11;\n    }\n    if (*(v9->field_20) == 61 || *(v9->field_20) == 0)\n    {\n        v16 = 0;\n    }\n    v18 = v17;\n    v19 = 0;\n    v0 = *((long long *)v17);\n    v20 = *((long long *)v17);\n    if (*((long long *)v17) != 0)\n    {\n        while (true)\n        {\n            v21 = strncmp(v20, v9->field_20, v16);\n            if (v21 == 0)\n            {\n                v22 = strlen(v20);\n            }\n            if (v22 != v16 || v21 != 0)\n            {\n                v18 += 32;\n                v20 = *(v18);\n                v23 = v19 + 1;\n                if (*(v18) != 0)\n                {\n                    v19 = v23;\n                }\n                else\n                {\n                    v8 = v19;\n                    v18 = 0;\n                    v6 = -1;\n                    v24 = v0;\n                    v25 = 0;\n                    v4 = 0;\n                    v7 = 0;\n                    v1 = 0;\n                    v0 = v14;\n                    v26 = v17;\n                    do\n                    {\n                        v27 = strncmp(v24, v9->field_20, v16);\n                        if (v27 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                v6 = v25;\n                                v18 = v26;\n                            }\n                            else if (*((int *)(v18 + 24)) != *((int *)(v26 + 24)) || *((long long *)(v18 + 16)) != *((long long *)(v26 + 16)) || *((int *)(v18 + 8)) != *((int *)(v26 + 8)) || v28 != 0)\n                            {\n                                if (v4 == 0)\n                                {\n                                    if (v10 == 0)\n                                    {\n                                        v4 = 1;\n                                    }\n                                    else if (v1 == 0)\n                                    {\n                                        v1 = calloc((int)v8, 0x1);\n                                        v4 = 1;\n                                    }\n                                    if (false)\n                                    {\n                                        v7 = 1;\n                                        *((char *)(v1 + (int)v6)) = 1;\n                                    }\n                                    if (v1 != 0)\n                                    {\n                                        *((char *)(v1 + v25)) = 1;\n                                    }\n                                }\n                            }\n                        }\n                        v26 += 32;\n                        v24 = *((long long *)v26);\n                        v25 += 1;\n                    }\n                    while (*((long long *)v26) != 0);\n                    v14 = v0;\n                    if (v1 == 0)\n                    {\n                        v29 = v4;\n                        if (v4 == 0)\n                        {\n                            if (v18 == 0)\n                            {\n                                break;\n                            }\n                            v19 = v6;\n                        }\n                    }\n                    if (v4 != 0 || v1 != 0)\n                    {\n                        if (v10 != 0)\n                        {\n                            if (v4 != 0)\n                            {\n                                dcgettext(0x0, 0x40db70, 0x5);\n                                __fprintf_chk();\n                                v11 = v9->field_20;\n                            }\n                            else\n                            {\n                                flockfile(stderr);\n                                dcgettext(0x0, 0x40db90, 0x5);\n                                __fprintf_chk();\n                                v36 = stderr;\n                                v37 = v17;\n                                v38 = v1;\n                                v39 = v1 + v19 + 1;\n                                do\n                                {\n                                    if (*((char *)v38) != 0)\n                                    {\n                                        __fprintf_chk();\n                                        v36 = stderr;\n                                    }\n                                    v38 += 1;\n                                    v37 += 32;\n                                }\n                                while (v39 != v38);\n                                fputc(0xa, v36);\n                                funlockfile(stderr);\n                                v11 = v9->field_20;\n                            }\n                        }\n                        if (v7 != 0)\n                        {\n                            free(v1);\n                        }\n                        v43 = &v11[strlen(v11)];\n                        v9->field_20 = v43;\n                        v9->field_0 = v9->field_0 + 1;\n                        v9->field_8 = 0;\n                        v42 = 63;\n                    }\n                }\n            }\n            if ((*(v18) == 0 || v22 == v16) && (*(v18) == 0 || v21 == 0) && (v4 == 0 || v22 == v16) && (v4 == 0 || v21 == 0) && (v22 == v16 || v1 == 0) && (v21 == 0 || v1 == 0))\n            {\n                v30 = v9->field_0;\n                v9->field_20 = 0;\n                v9->field_0 = (unsigned int)v30 + 1;\n                v31 = *((int *)(v18 + 8));\n                if (*(v14) == 0)\n                {\n                    if (v31 == 1)\n                    {\n                        if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24)\n                        {\n                            v9->field_0 = v9->field_0 + 2;\n                            v9->field_10 = v35[1 + v30];\n                        }\n                        else\n                        {\n                            if (v10 != 0)\n                            {\n                                dcgettext(0x0, 0x40dc10, 0x5);\n                                __fprintf_chk();\n                            }\n                            v9->field_8 = *((int *)(v18 + 24));\n                            v42 = (unsigned long long)(char)(*(v3) != 58) * 5 + 58;\n                        }\n                    }\n                }\n                else\n                {\n                    if (v31 != 0)\n                    {\n                        v33 = &v14[1];\n                        v9->field_10 = v33;\n                    }\n                    else\n                    {\n                        if (v10 != 0)\n                        {\n                            dcgettext(0x0, 0x40dbe0, 0x5);\n                            __fprintf_chk();\n                        }\n                        v9->field_8 = *((int *)(v18 + 24));\n                        v42 = 63;\n                    }\n                }\n                if ((unsigned int)((unsigned long long)v9->field_0 + 1) < v24 && *(v14) == 0 || *(v14) == 0 && v31 != 1 || v31 != 0 && *(v14) != 0)\n                {\n                    if (v2 != 0)\n                    {\n                        *((unsigned long *)&v2) = v19;\n                    }\n                    v41 = *((long long *)(v18 + 16));\n                    v42 = (unsigned int)*((int *)(v18 + 24));\n                    if (*((long long *)(v18 + 16)) == 0)\n                    {\n                        break;\n                    }\n                    *(v41) = v42;\n                    v42 = 0;\n                }\n            }\n        }\n        if (...)\n        {\n            return v42;\n        }\n    }\n    if (v28 != 0)\n    {\n        if (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45)\n        {\n            v34 = strchr(v3, v5);\n            v42 = -18446744069414584321;\n        }\n        if ((v34 != 0 || *((long long *)v17) != 0) && (*((char *)(v35[(long long)(int)v9->field_0] + 1)) != 45 || *((long long *)v17) != 0))\n        {\n            return v42;\n        }\n    }\n    if (v28 == 0 && *((long long *)v17) == 0 || v34 == 0 && v28 != 0 || *((char *)(v35[(long long)(int)v9->field_0] + 1)) == 45 && v28 != 0)\n    {\n        if (v10 != 0)\n        {\n            dcgettext(0x0, 0x40dbc0, 0x5);\n            __fprintf_chk();\n        }\n        v9->field_20 = 0;\n        v9->field_0 = v9->field_0 + 1;\n        v9->field_8 = 0;\n        return 63;\n    }\n}\n"
        },
        {
            "funcName": "sub_406f80",
            "funcStartAddr": "0x406f80",
            "funcEndAddr": "0x406f93",
            "decompiledFuncCode": "extern int512_t g_6104e0;\n\nint sub_406f80()\n{\n    unsigned long v1;  // rdi\n    unsigned long long v2;  // rax\n    unsigned int v3;  // esi\n\n    v2 = (unsigned int)*((int *)((v1 == 0? &g_6104e0 : v1) + 4));\n    *((unsigned int *)((v1 == 0? &g_6104e0 : v1) + 4)) = v3;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_407140",
            "funcStartAddr": "0x407140",
            "funcEndAddr": "0x40714a",
            "decompiledFuncCode": "int sub_407140()\n{\n}\n"
        },
        {
            "funcName": "sub_407b70",
            "funcStartAddr": "0x407b70",
            "funcEndAddr": "0x407b91",
            "decompiledFuncCode": "int sub_407b70()\n{\n    void tmp_10;  // tmp #10\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rdi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // rax\n    unsigned long long v5;  // rdi\n\n    tmp_10 = v2;\n    v4 = v2 * v3;\n    v5 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rdi<8>, 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, rsi<8>, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_407da0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_407220",
            "funcStartAddr": "0x407220",
            "funcEndAddr": "0x407236",
            "decompiledFuncCode": "int sub_407220()\n{\n}\n"
        },
        {
            "funcName": "sub_407990",
            "funcStartAddr": "0x407990",
            "funcEndAddr": "0x4079b0",
            "decompiledFuncCode": "int sub_407990()\n{\n    unsigned long long v1;  // r9\n    unsigned long long v2[2];  // r8\n\n    v1 = 0;\n    if (*(v2) != 0)\n    {\n        do\n        {\n            v1 += 1;\n        }\n        while (v2[v1] != 0);\n    }\n}\n"
        },
        {
            "funcName": "sub_402c00",
            "funcStartAddr": "0x402c00",
            "funcEndAddr": "0x403e68",
            "decompiledFuncCode": "int sub_402c00() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409740",
            "funcStartAddr": "0x409740",
            "funcEndAddr": "0x409758",
            "decompiledFuncCode": "int sub_409740()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v3;  // r9\n\n    v1 = 0;\n    v0 = v3;\n    return sub_409090();\n}\n"
        },
        {
            "funcName": "sub_4050a0",
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x4050d6",
            "decompiledFuncCode": "extern unsigned long long g_6103c0;\nextern unsigned long long g_610560;\nextern unsigned long long g_610568;\n\nint sub_4050a0()\n{\n    g_610568 = 0;\n    g_6103c0 = 0;\n    g_610560 = 0;\n    return (unsigned long long)free(g_610560);\n}\n"
        },
        {
            "funcName": "sub_403fc5",
            "funcStartAddr": "0x403fc5",
            "funcEndAddr": "0x403fcc",
            "decompiledFuncCode": "int sub_403fc5()\n{\n}\n"
        },
        {
            "funcName": "sub_405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x4058a0",
            "decompiledFuncCode": "int sub_405530() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403c47",
            "funcStartAddr": "0x403c47",
            "funcEndAddr": "0x403c5d",
            "decompiledFuncCode": "int sub_403c47() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409fb8",
            "funcStartAddr": "0x409fb8",
            "funcEndAddr": "0x409fd8",
            "decompiledFuncCode": "extern unsigned long long g_60fe30;\n\nint sub_409fb8()\n{\n    unsigned long long *v1;  // rbx\n    unsigned long long v2;  // rax\n    unsigned long v4;  // rdx\n\n    v1 = &g_60fe30;\n    while (true)\n    {\n        v2 = *(v1);\n        if (*(v1) == -1)\n        {\n            break;\n        }\n        rax<8>();\n        v1 = &v1[-1];\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_407480",
            "funcStartAddr": "0x407480",
            "funcEndAddr": "0x4074ec",
            "decompiledFuncCode": "extern uint128_t g_6104e0;\nextern uint128_t g_6104f0;\nextern uint128_t g_610500;\nextern unsigned long long g_610510;\n\nint sub_407480()\n{\n    unsigned int|void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x20]\n    unsigned long v4;  // [bp-0x18]\n    unsigned long v6;  // rsi\n    unsigned long v7;  // rdx\n\n    *((uint128_t *)&v0) = g_6104e0;\n    *((uint128_t *)&v1) = g_6104f0;\n    *((uint128_t *)&v2) = g_610500;\n    v4 = g_610510;\n    v0 = 10;\n    if (v6 != 0 && v7 != 0)\n    {\n        v3 = v6;\n        v4 = v7;\n        return sub_406d40();\n    }\n    if (v7 == 0 || v6 == 0)\n    {\n        abort(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_409e10",
            "funcStartAddr": "0x409e10",
            "funcEndAddr": "0x409e88",
            "decompiledFuncCode": "int sub_409e10()\n{\n    unsigned int v0;  // [bp+0x0]\n    void *v2;  // rdi\n    unsigned long long v4;  // rax\n    unsigned long long v8;  // rax\n\n    if (fileno(v2) >= 0)\n    {\n        v4 = __freading();\n        if ((v4 == 0 || (unsigned long long)lseek(fileno(v2), 0x0, 0x1) != -1) && sub_409e90() != 0)\n        {\n            v8 = fclose(v2);\n            if (v0 != 0)\n            {\n                *(__errno_location()) = v0;\n                v8 = -18446744069414584321;\n            }\n            return v8;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_407c20",
            "funcStartAddr": "0x407c20",
            "funcEndAddr": "0x407c98",
            "decompiledFuncCode": "int sub_407c20() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403529",
            "funcStartAddr": "0x403529",
            "funcEndAddr": "0x40352e",
            "decompiledFuncCode": "int sub_403529()\n{\n}\n"
        },
        {
            "funcName": "sub_40328a",
            "funcStartAddr": "0x40328a",
            "funcEndAddr": "0x403291",
            "decompiledFuncCode": "int sub_40328a()\n{\n}\n"
        },
        {
            "funcName": "sub_407ad0",
            "funcStartAddr": "0x407ad0",
            "funcEndAddr": "0x407b44",
            "decompiledFuncCode": "extern unsigned int g_40d172;\nextern unsigned int g_40d19d;\nextern unsigned int g_40d3d0;\n\nint sub_407ad0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d172, 0x5));\n    __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40d19d, 0x5));\n    dcgettext(0x0, 0x40d3d0, 0x5);\n}\n"
        },
        {
            "funcName": "sub_407de0",
            "funcStartAddr": "0x407de0",
            "funcEndAddr": "0x407df8",
            "decompiledFuncCode": "int sub_407de0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = strndup();\n    if (v1 != 0)\n    {\n        return v1;\n    }\n    sub_407da0(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_403d69",
            "funcStartAddr": "0x403d69",
            "funcEndAddr": "0x403d70",
            "decompiledFuncCode": "int sub_403d69()\n{\n}\n"
        },
        {
            "funcName": "sub_406fd0",
            "funcStartAddr": "0x406fd0",
            "funcEndAddr": "0x407042",
            "decompiledFuncCode": "extern int512_t g_6104e0;\n\nint sub_406fd0()\n{\n    unsigned long v0;  // [bp-0x68]\n    unsigned long v1;  // [bp-0x60]\n    unsigned long v2;  // [bp-0x58]\n    unsigned long v3;  // [bp-0x40]\n    unsigned int v5;  // [bp+0x100008]\n    unsigned long v6;  // r8\n    unsigned long long v7[7];  // rbx\n    unsigned long v8;  // rcx\n\n    v7 = (v6 == 0? &g_6104e0 : v6);\n    v3 = v8;\n    *((unsigned long long [7])&v2) = v7[6];\n    *((unsigned long long [7])&v1) = v7[5];\n    v0 = &v7[1];\n    *(__errno_location()) = v5;\n    return sub_405b10();\n}\n"
        },
        {
            "funcName": "sub_407d80",
            "funcStartAddr": "0x407d80",
            "funcEndAddr": "0x407d93",
            "decompiledFuncCode": "int sub_407d80()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n    char *v3;  // rdi\n\n    v0 = v2;\n    strlen(v3);\n}\n"
        },
        {
            "funcName": "sub_402951",
            "funcStartAddr": "0x402951",
            "funcEndAddr": "0x4029a8",
            "decompiledFuncCode": "extern char g_610328;\nextern unsigned long long g_610330;\n\nint sub_402951()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp-0x8]\n    unsigned long v4;  // rax\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    unsigned long long v7;  // rax\n    unsigned long long v9;  // rbx\n    unsigned long long v10;  // r12\n\n    if (g_610328 == 0)\n    {\n        v2 = stack_base + 0;\n        v1 = v5;\n        v0 = v6;\n        while (true)\n        {\n            if (g_610330 >= 0)\n            {\n                break;\n            }\n            g_610330 = g_610330 + 1;\n            *((long long *)(6356544 + (v7 + 1) * 8))();\n        }\n        v9 = v0;\n        v10 = v1;\n        g_610328 = 1;\n        return sub_4028fb();\n    }\n    return v4;\n}\n"
        },
        {
            "funcName": "sub_4096e0",
            "funcStartAddr": "0x4096e0",
            "funcEndAddr": "0x4096f3",
            "decompiledFuncCode": "int sub_4096e0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409660();\n}\n"
        },
        {
            "funcName": "sub_409760",
            "funcStartAddr": "0x409760",
            "funcEndAddr": "0x4097cf",
            "decompiledFuncCode": "extern unsigned long long g_40dc97;\n\nint sub_409760()\n{\n    char v0;  // [bp-0x1c]\n    unsigned long long v2;  // rsi\n    unsigned long long v3;  // rbx\n    unsigned long v4;  // rdx\n    unsigned long long|char * v5;  // rbp\n    unsigned long long v6;  // rdi\n    unsigned int *v7;  // r12\n    unsigned long long v9;  // rax\n\n    if (v2 != 0)\n    {\n        v3 = -2;\n        if (v4 != 0)\n        {\n            v7 = v6;\n            v5 = v2;\n        }\n    }\n    else\n    {\n        v5 = &g_40dc97;\n    }\n    if (v2 == 0 || v6 == 0 && v4 != 0)\n    {\n        v7 = &v0;\n    }\n    if (v2 == 0 || v4 != 0)\n    {\n        v3 = mbrtowc((unsigned int)v7, (unsigned int)v5);\n        if (v3 > -3 && sub_409840() == 0)\n        {\n            v3 = 1;\n            *(v7) = *(v5);\n        }\n    }\n    v9 = v3;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_4028fb",
            "funcStartAddr": "0x4028fb",
            "funcEndAddr": "0x40291a",
            "decompiledFuncCode": "extern unsigned long long program_invocation_short_name;\n\nint sub_4028fb()\n{\n    unsigned long long v1;  // rax\n\n    v1 = &program_invocation_short_name;\n    if (false)\n    {\n        v1 = 0;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_4074f0",
            "funcStartAddr": "0x4074f0",
            "funcEndAddr": "0x4074f9",
            "decompiledFuncCode": "int sub_4074f0()\n{\n}\n"
        },
        {
            "funcName": "sub_407dcc",
            "funcStartAddr": "0x407dcc",
            "funcEndAddr": "0x407dd1",
            "decompiledFuncCode": "int sub_407dcc()\n{\n    abort(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4053b0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x40541d",
            "decompiledFuncCode": "int sub_4053b0()\n{\n    unsigned long long v1;  // rax\n\n    v1 = sub_4050f0();\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n    {\n        sub_405210();\n        sub_405290();\n        r9<8>();\n        v1 = -1;\n    }\n    return v1;\n}\n"
        },
        {
            "funcName": "sub_405470",
            "funcStartAddr": "0x405470",
            "funcEndAddr": "0x405478",
            "decompiledFuncCode": "extern unsigned long long g_6103d0;\n\nint sub_405470()\n{\n    unsigned long long v1;  // rdi\n    unsigned long v2;  // rax\n\n    g_6103d0 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_403d70",
            "funcStartAddr": "0x403d70",
            "funcEndAddr": "0x403d89",
            "decompiledFuncCode": "int sub_403d70() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403bc7",
            "funcStartAddr": "0x403bc7",
            "funcEndAddr": "0x403c16",
            "decompiledFuncCode": "int sub_403bc7() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4050f0",
            "funcStartAddr": "0x4050f0",
            "funcEndAddr": "0x4051f3",
            "decompiledFuncCode": "int sub_4050f0()\n{\n    unsigned long long v0;  // [bp-0x58]\n    char v1;  // [bp-0x41]\n    unsigned long v2;  // [bp-0x40]\n    unsigned long long v4;  // rsi\n    unsigned long long v5;  // r15\n    unsigned long v6;  // rcx\n    unsigned long v7;  // r13\n    void *v8;  // rdx\n    char *v9;  // rdi\n    unsigned long v11;  // r12\n    unsigned long long v12;  // rbx\n    unsigned long long v13;  // rax\n    unsigned long long v14;  // rax\n    void *v15;  // rbp\n    char *v16;  // r14\n\n    v5 = v4;\n    v7 = v6;\n    v15 = v8;\n    v2 = v8;\n    v16 = *((long long *)v5);\n    v0 = -1;\n    if (*((long long *)v5) != 0)\n    {\n        v11 = strlen(v9);\n        v1 = 0;\n        v12 = 0;\n        while (true)\n        {\n            v13 = strncmp(v16, v9, v11);\n            if (v13 == 0)\n            {\n                v14 = strlen(v16);\n                if (v14 == v11)\n                {\n                    v0 = v12;\n                }\n                else if (v0 == -1)\n                {\n                    v0 = v12;\n                    v12 += 1;\n                    v15 += v6;\n                    v16 = *((long long *)(v5 + v12 * 8));\n                }\n                else if (v2 != 0)\n                {\n                    v1 = (memcmp(v7 * v0 + v2, v15, v7) != 0? 1 : (unsigned int)(char)(char)(stack_base)[-65]);\n                }\n                else\n                {\n                    v1 = 1;\n                }\n            }\n            if (v13 != 0 || v0 != -1 && v14 != v11)\n            {\n                v12 += 1;\n                v15 += v6;\n                v16 = *((long long *)(v5 + v12 * 8));\n            }\n            if ((v13 == 0 || *((long long *)(v5 + (v12 << 3))) == 0) && (*((long long *)(v5 + (v12 << 3))) == 0 || v0 == -1) && (v13 != 0 || v14 != v11) && (v13 != 0 || v0 != -1 || *((long long *)(v5 + (v12 << 3))) != 0))\n            {\n                *((int *)&v0) = (v1 == 0? v0 : -2);\n            }\n        }\n    }\n    return v0;\n}\n"
        },
        {
            "funcName": "sub_407410",
            "funcStartAddr": "0x407410",
            "funcEndAddr": "0x407483",
            "decompiledFuncCode": "int sub_407410()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v2 = 0x400000000000000;\n    v1 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_403c0a",
            "funcStartAddr": "0x403c0a",
            "funcEndAddr": "0x403c10",
            "decompiledFuncCode": "int sub_403c0a()\n{\n    [D] PutI(904:F64x8)[t4,2] = t5\n    [D] PutI(968:I8x8)[t4,2] = 0x01\n    [D] PutI(968:I8x8)[t4,0] = 0x00\n    [D] PutI(904:F64x8)[t14,0] = t23\n    [D] PutI(968:I8x8)[t14,0] = 0x01\n    [D] PutI(904:F64x8)[t14,1] = t16\n    [D] PutI(968:I8x8)[t14,1] = 0x01\n    [D] PutI(904:F64x8)[t14,0] = t41\n    [D] PutI(968:I8x8)[t14,0] = 0x01\n    [D] PutI(904:F64x8)[t14,2] = t34\n    [D] PutI(968:I8x8)[t14,2] = 0x01\n}\n"
        },
        {
            "funcName": "sub_407520",
            "funcStartAddr": "0x407520",
            "funcEndAddr": "0x407533",
            "decompiledFuncCode": "int sub_407520()\n{\n}\n"
        },
        {
            "funcName": "sub_403949",
            "funcStartAddr": "0x403949",
            "funcEndAddr": "0x4039c5",
            "decompiledFuncCode": "int sub_403949() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407bb0",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407be0",
            "decompiledFuncCode": "int sub_407bb0()\n{\n    unsigned int v1;  // rsi\n    void *v2;  // rdi\n    unsigned long long v3;  // rax\n\n    if (v1 == 0 && v2 != 0)\n    {\n        free(v2);\n        return 0;\n    }\n    if (v2 == 0 || v1 != 0)\n    {\n        v3 = realloc(v2, v1);\n        if (v3 == 0 && v1 != 0)\n        {\n            sub_407da0(); /* do not return */\n        }\n        if (v1 == 0 || v3 != 0)\n        {\n            return v3;\n        }\n    }\n}\n"
        },
        {
            "funcName": "sub_407e00",
            "funcStartAddr": "0x407e00",
            "funcEndAddr": "0x4084c4",
            "decompiledFuncCode": "int sub_407e00()\n{\n    unsigned long long v0;  // [bp-0x178]\n    unsigned long long *v1;  // [bp-0x58]\n    char v2;  // [bp-0x49]\n    char v3;  // [bp-0x40]\n    unsigned long v5;  // rcx\n    unsigned int v6;  // edx\n    char **v7;  // rsi\n    unsigned long long *v8;  // rbx\n    unsigned int *v9;  // r13\n    unsigned int *v10;  // r13\n    char v11[3];  // r15\n    unsigned int v12;  // eax\n    unsigned long long v13;  // r13\n    unsigned long long|unsigned long v14;  // r12\n    unsigned long long v15;  // rbp\n    unsigned long long v16;  // rax\n    char *v17;  // r8\n    unsigned long long v18;  // rax\n    unsigned long long v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    char v23;  // sil\n    unsigned long long v24;  // rdx\n    unsigned long long v25;  // r13\n    unsigned long long v26;  // r13\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rax\n    unsigned long long v29;  // rax\n    unsigned long long v30;  // rax\n    unsigned long long v31;  // rax\n    unsigned long long v32;  // rcx\n    unsigned long long v33;  // rax\n    unsigned long long v34;  // r9\n    unsigned long long v35;  // rcx\n    unsigned long long v36;  // rax\n    unsigned long long v37;  // r9\n    unsigned long long v38;  // rsi\n    unsigned long long v39;  // rcx\n    unsigned long long v40;  // r9\n    unsigned long long|unsigned int v41;  // rdi\n    unsigned long long|unsigned int|unsigned long v42;  // r10\n    unsigned long long v43;  // rcx\n    unsigned long long v44;  // r9\n    unsigned long long|unsigned int v45;  // edi\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // r9\n    unsigned long long|unsigned int v48;  // rdi\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // rcx\n    unsigned long long v51;  // rdi\n    unsigned long long v52;  // rcx\n    unsigned long long v53;  // r9\n    unsigned long long|unsigned int v54;  // rdi\n    unsigned long long|unsigned int v55;  // rdi\n    unsigned long long v56;  // cc_dep1\n    unsigned int v57;  // cc_dep1\n    unsigned long long v58;  // cc_dep1\n    unsigned long v59;  // rax\n    unsigned long long v60;  // cc_dep1\n    unsigned long long v61;  // cc_dep1\n    unsigned int v62;  // cc_dep1\n    char *v63;  // rsi\n    unsigned long long v64;  // rax\n\n    v1 = v5;\n    if (v6 <= 36)\n    {\n        v8 = (v7 == 0? &v3 : v7);\n        *(v9) = 0;\n        v9 = __errno_location();\n        v11 = *(v8);\n        v15 = strtol(v45, v7, v6);\n        if (*(v8) != v45)\n        {\n            v12 = *(v10);\n            if (*(v10) == 0)\n            {\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 4;\n                if (v12 == 34)\n                {\n                    v14 = 1;\n                }\n            }\n            if ((*(v10) == 0 || v12 == 34) && v17 != 0)\n            {\n                v13 = v11[0];\n                if (v11[0] != 0)\n                {\n                    v18 = strchr(v17, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n        }\n        else\n        {\n            if (v17 != 0)\n            {\n                v13 = v11[0];\n                v14 = 4;\n                if (v11[0] != 0)\n                {\n                    v15 = 1;\n                    v14 = 0;\n                    v16 = strchr(v17, (char)*((char *)*((long long *)(v7 == 0? &v3 : v7))));\n                }\n            }\n            if ((v17 == 0 || v16 == 0) && (v17 == 0 || v11[0] != 0))\n            {\n                v14 = 4;\n            }\n        }\n        if (*(v8) == v45 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v45 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0)\n        {\n            v19 = v13 - 69;\n            if ((v13 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v2) = v19;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0)\n                {\n                    v20 = strchr(v17, 0x30);\n                    if (v20 != 0 && v11[1] != 68)\n                    {\n                        if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 105)\n                        {\n                            v24 = v2;\n                            if (*((char *)(*((long long *)(v7 == 0? &v3 : v7)) + 1)) != 66)\n                            {\n                                /* goto *((long long *)(rdx<8> * 8 + 4249256)); */\n                            }\n                        }\n                        else\n                        {\n                            v22 = 0;\n                            v21 = 0x400;\n                            v23 = v11[2] == 66;\n                            v38 = rsi<8> * 2 + 1;\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v8) == v45 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v45 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0) && (v13 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) != 0 && v20 == 0 || (*(v8) == v45 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v45 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0) && (v13 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v2 & 63) >> 3) + -376]) >> (unsigned long long)(v2 & 63 & 7)) & 1) == 0 || (*(v8) == v45 && v11[0] != 0 && v17 != 0 && v16 != 0 || v17 != 0 && *(v8) != v45 && v11[0] != 0 && (*(v10) == 0 || v12 == 34) && v18 != 0) && (v13 - 69 & 255) > 47)\n        {\n            v38 = 1;\n            v21 = 0x400;\n        }\n        if (...)\n        {\n            v38 = 2;\n            v21 = 1000;\n        }\n        if (...)\n        {\n            v25 = (unsigned int)v13 - 66;\n            switch (v25)\n            {\n            case 0:\n                if (v15 >= -0x20000000000000 && v15 <= 9007199254740991)\n                {\n                    v15 *= 0x400;\n                    break;\n                }\n            case 3:\n                v39 = v21;\n                v27 = (-1 CONCAT 0x8000000000000000) % v21;\n                v40 = v27;\n            case 5: case 37:\n                v46 = v21;\n                v29 = (-1 CONCAT 0x8000000000000000) % v21;\n                v47 = v29;\n                v48 = 3;\n                v42 = 0;\n                do\n                {\n                    if (v15 < v47)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v46 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v58 = v48;\n                    v48 -= 1;\n                }\n                while (v58 != 1);\n            case 9: case 41:\n                v50 = v21;\n                v49 = (-1 CONCAT 0x8000000000000000) % v21;\n            case 11: case 43:\n                v50 = v21;\n                v30 = (-1 CONCAT 0x8000000000000000) % v21;\n                v51 = v30;\n            case 14:\n                v52 = v21;\n                v31 = (-1 CONCAT 0x8000000000000000) % v21;\n                v53 = v31;\n                v54 = 5;\n                v42 = 0;\n                do\n                {\n                    if (v53 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v52 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v60 = v54;\n                    v54 -= 1;\n                }\n                while (v60 != 1);\n            case 18: case 50:\n                v43 = v21;\n                v28 = (-1 CONCAT 0x8000000000000000) % v21;\n                v44 = v28;\n            case 23:\n                v32 = v21;\n                v33 = (-1 CONCAT 0x8000000000000000) % v21;\n                v34 = v33;\n                v55 = 8;\n                v42 = 0;\n                do\n                {\n                    if (v34 > v15)\n                    {\n                        v15 = 0x8000000000000000;\n                        v42 = 1;\n                    }\n                    else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n                    {\n                        v15 = v32 * v15;\n                    }\n                    else\n                    {\n                        v15 = 9223372036854775807;\n                        v42 = 1;\n                    }\n                    v61 = v55;\n                    v55 -= 1;\n                }\n                while (v61 != 1);\n            case 24:\n                v35 = v21;\n                v36 = (-1 CONCAT 0x8000000000000000) % v21;\n                v37 = v36;\n            case 33:\n                break;\n            case 53:\n                if (v15 >= 0xc000000000000000 && v15 <= 4611686018427387903)\n                {\n                    v15 *= 2;\n                    break;\n                }\n            default:\n                v14 = (unsigned int)v14 | 2;\n                *(v1) = v15;\n            }\n            if (v25 <= 53)\n            {\n                v26 = v25;\n            }\n        }\n        v38 = 1;\n        v50 = 0x400;\n        v49 = -0x20000000000000;\n        if (v15 >= v49)\n        {\n            v59 = (0 CONCAT 9223372036854775807) % v50;\n        }\n        v38 = 1;\n        v35 = 0x400;\n        v37 = -0x20000000000000;\n        v45 = 7;\n        v42 = 0;\n        do\n        {\n            if (v37 > v15)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v35 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v62 = v45;\n            v45 = (unsigned long long)v45 - 1;\n        }\n        while (v62 != 1);\n        v38 = 1;\n        v50 = 0x400;\n        v51 = -0x20000000000000;\n        if (v15 >= v51)\n        {\n            v59 = (0 CONCAT 9223372036854775807) % v50;\n            if (v15 <= (0 CONCAT 9223372036854775807) % v50)\n            {\n                v15 = v50 * v15;\n                if (v15 >= v51 && v59 >= v15)\n                {\n                    v15 = v50 * v15;\n                }\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v14 = 1;\n            }\n        }\n        else\n        {\n            v15 = 0x8000000000000000;\n            v14 = 1;\n        }\n        v38 = 1;\n        if (v15 >= -0x40000000000000 && v15 <= 18014398509481983)\n        {\n            v15 *= 0x200;\n        }\n        v38 = 1;\n        v38 = 1;\n        v52 = 0x400;\n        v53 = -0x20000000000000;\n        v38 = 1;\n        v39 = 0x400;\n        v40 = -0x20000000000000;\n        v41 = 6;\n        v42 = 0;\n        do\n        {\n            if (v15 < v40)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v39 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v56 = v41;\n            v41 -= 1;\n        }\n        while (v56 != 1);\n        v38 = 1;\n        v43 = 0x400;\n        v44 = -0x20000000000000;\n        v45 = 4;\n        v42 = 0;\n        do\n        {\n            if (v44 > v15)\n            {\n                v15 = 0x8000000000000000;\n                v42 = 1;\n            }\n            else if ((9223372036854775807 >> 63 CONCAT 9223372036854775807) % v39 >= v15)\n            {\n                v15 = v43 * v15;\n            }\n            else\n            {\n                v15 = 9223372036854775807;\n                v42 = 1;\n            }\n            v57 = v45;\n            v45 = (unsigned long long)v45 - 1;\n        }\n        while (v57 != 1);\n        v14 = (unsigned int)v14 | v42;\n        v63 = &v11[v38];\n        *(v8) = v63;\n        v14 = (unsigned int)(*(v63) != 0? v14 | 2 : (unsigned int)r12<8>);\n        v38 = 1;\n        v46 = 0x400;\n        v47 = -0x20000000000000;\n        v38 = 1;\n        v32 = 0x400;\n        v34 = -0x20000000000000;\n        *(v1) = v15;\n        v64 = v14;\n        return v64;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_407350",
            "funcStartAddr": "0x407350",
            "funcEndAddr": "0x40735f",
            "decompiledFuncCode": "int sub_407350()\n{\n}\n"
        },
        {
            "funcName": "sub_403a08",
            "funcStartAddr": "0x403a08",
            "funcEndAddr": "0x403a5f",
            "decompiledFuncCode": "int sub_403a08() { crash_skku;\n}"
        },
        {
            "funcName": "sub_408550",
            "funcStartAddr": "0x408550",
            "funcEndAddr": "0x40895d",
            "decompiledFuncCode": "int sub_408550()\n{\n    unsigned long long v0;  // [bp-0x178]\n    void tmp_11;  // tmp #11\n    char|char [3] v1;  // [bp-0x58]\n    char v2[3];  // [bp-0x50]\n    unsigned int v4;  // edx\n    unsigned long long|unsigned int|unsigned long v5;  // rdi\n    unsigned long v6;  // rbp\n    unsigned long long *v7;  // rcx\n    char *v9;  // r8\n    unsigned long v11;  // rsi\n    unsigned long long *v12;  // r15\n    unsigned int *v13;  // r12\n    unsigned int *v14;  // r12\n    unsigned long long v15;  // rbx\n    unsigned long v16;  // rax\n    unsigned int v17;  // eax\n    unsigned long long v18;  // r12\n    unsigned long long v19;  // rax\n    unsigned long long v20;  // rax\n    unsigned long long v21;  // rdx\n    unsigned long long v22;  // rax\n    unsigned long long v23;  // rax\n    unsigned long long v24;  // rsi\n    char v25;  // sil\n    unsigned long long v26;  // r12\n    unsigned long long v27;  // r12\n    unsigned long long v28;  // rcx\n    unsigned long long v29;  // rcx\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // rsi\n    char v32[3];  // r8\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rcx\n    unsigned long long|unsigned int v35;  // rdi\n    unsigned long long v36;  // rcx\n    unsigned long long|unsigned int v37;  // rdi\n    unsigned long long v38;  // rcx\n    unsigned long long|unsigned int v39;  // rdi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rcx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // cc_dep1\n    unsigned long long v46;  // cc_dep1\n    unsigned int v47;  // cc_dep1\n    unsigned int v48;  // cc_dep1\n    unsigned long long v49;  // rax\n    unsigned long long v50;  // r8\n\n    if (v4 <= 36)\n    {\n        v6 = v5;\n        v12 = (v11 == 0? stack_base + -64 : v11);\n        *(v13) = 0;\n        v13 = __errno_location();\n        v15 = (char)*((char *)v5);\n        v31 = *((long long *)(unsigned long long)__ctype_b_loc());\n        for (v16 = v5; (*((char *)(v31 + (v15 << 1) + 1)) & 32) != 0; v15 = (char)*((char *)v16))\n        {\n            v16 += 1;\n        }\n        if (v15 != 45)\n        {\n            v33 = __strtoul_internal(v5, (unsigned int)v12);\n            if (*(v12) != v5)\n            {\n                v17 = *(v14);\n                if ((*(v14) == 0 || v17 == 34) && v9 != 0)\n                {\n                    v18 = v1[0];\n                    if (v1[0] != 0)\n                    {\n                        *((char *[3])&v1[0]) = v1;\n                        v20 = strchr(v9, v18);\n                        v32 = v1;\n                    }\n                }\n            }\n            else\n            {\n                *((char **)&v1[0]) = v9;\n                if (v9 != 0)\n                {\n                    v18 = (char)*((char *)v6);\n                    if (*((char *)v6) != 0)\n                    {\n                        v33 = 1;\n                        v19 = strchr(v9, (char)*((char *)v5));\n                        v32 = v1;\n                    }\n                }\n            }\n        }\n        if (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0)\n        {\n            v21 = v18 - 69;\n            if ((v18 - 69 & 255) <= 47)\n            {\n                *((unsigned long long *)&v1) = v21;\n                v0 = 142129060940101;\n                if (((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0)\n                {\n                    *((char *[3])&v2[0]) = v32;\n                    v22 = strchr(v9, 0x30);\n                    v32 = v2;\n                    if (v22 != 0)\n                    {\n                        v23 = v32[1];\n                        if (v32[1] != 68)\n                        {\n                            if (v23 != 105)\n                            {\n                                v30 = v1;\n                                if (v23 != 66)\n                                {\n                                    /* goto *((long long *)(rdx<8> * 8 + 4249648)); */\n                                }\n                            }\n                            else\n                            {\n                                v24 = 0;\n                                v30 = 0x400;\n                                v25 = v32[2] == 66;\n                                v31 = rsi<8> * 2 + 1;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ((*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) != 0 && v22 == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) <= 47 && ((char)((char)*(&((char *)stack_base)[((unsigned long long)(v1 & 63) >> 3) + -376]) >> (unsigned long long)(v1 & 63 & 7)) & 1) == 0 || (*(v12) == v5 && *((char *)v6) != 0 && v15 != 45 && v9 != 0 && v19 != 0 || v15 != 45 && *(v12) != v5 && v1[0] != 0 && v9 != 0 && (*(v14) == 0 || v17 == 34) && v20 != 0) && (v18 - 69 & 255) > 47)\n        {\n            v31 = 1;\n            v30 = 0x400;\n        }\n        if (...)\n        {\n            v31 = 2;\n            v30 = 1000;\n        }\n        if (...)\n        {\n            v26 = (unsigned int)v18 - 66;\n            switch (v26)\n            {\n            case 0:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x400;\n                    break;\n                }\n            case 3:\n                v38 = v30;\n                v39 = 6;\n                do\n                {\n                    v33 = v33 * v38;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v46 = v39;\n                    v39 -= 1;\n                }\n                while (v46 != 1);\n            case 5: case 37:\n                v28 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v49 = tmp_11 * v28 * v28;\n                    v33 = v49;\n                }\n                else\n                {\n                    v33 = -1;\n                }\n            case 9: case 41:\n                v33 = v33 * v30;\n            case 11: case 43:\n                v29 = v30;\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 = tmp_11 * v29;\n                    break;\n                }\n                else\n                {\n                    v33 = -1;\n                    break;\n                }\n            case 14:\n                v40 = v30;\n                v5 = 5;\n                do\n                {\n                    v33 = v33 * v40;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v47 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v47 != 1);\n                break;\n            case 18: case 50:\n                v34 = v30;\n                v35 = 4;\n                do\n                {\n                    v33 = v33 * v34;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v44 = v35;\n                    v35 -= 1;\n                }\n                while (v44 != 1);\n            case 23:\n                v36 = v30;\n                v37 = 8;\n                do\n                {\n                    v33 = v33 * v36;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v45 = v37;\n                    v37 -= 1;\n                }\n                while (v45 != 1);\n            case 24:\n                v41 = v30;\n                v5 = 7;\n                do\n                {\n                    v33 = v33 * v41;\n                    if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                    {\n                        v33 = -1;\n                    }\n                    v48 = v5;\n                    v5 = (unsigned long long)v5 - 1;\n                }\n                while (v48 != 1);\n            case 32:\n                if ((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>))\n                {\n                    v33 *= 0x200;\n                    break;\n                }\n            case 33:\n                v50 = &v32[v31];\n                *(v12) = v50;\n            case 53:\n                if (!((char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t11, rcx<8>, 0x0<64>)))\n                {\n                    v33 *= 2;\n                    break;\n                }\n            default:\n                *(v7) = v33;\n            }\n            if (v26 <= 53)\n            {\n                v27 = v26;\n            }\n        }\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        v31 = 1;\n        v30 = 0x400;\n        *(v7) = v33;\n        return stack_base + 0;\n    }\n    __assert_fail(); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4039c0",
            "funcStartAddr": "0x4039c0",
            "funcEndAddr": "0x403a00",
            "decompiledFuncCode": "int sub_4039c0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407cb0",
            "funcStartAddr": "0x407cb0",
            "funcEndAddr": "0x407cfa",
            "decompiledFuncCode": "int sub_407cb0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_406f30",
            "funcStartAddr": "0x406f30",
            "funcEndAddr": "0x406f3f",
            "decompiledFuncCode": "extern int512_t g_6104e0;\n\nint sub_406f30()\n{\n    unsigned long v1;  // rdi\n    unsigned int v2;  // esi\n\n    *((unsigned int *)(v1 == 0? &g_6104e0 : v1)) = v2;\n    return &g_6104e0;\n}\n"
        },
        {
            "funcName": "sub_4050e0",
            "funcStartAddr": "0x4050e0",
            "funcEndAddr": "0x4050ea",
            "decompiledFuncCode": "int sub_4050e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4029a8",
            "funcStartAddr": "0x4029a8",
            "funcEndAddr": "0x4029e4",
            "decompiledFuncCode": "int sub_4029a8() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403d50",
            "funcStartAddr": "0x403d50",
            "funcEndAddr": "0x403d57",
            "decompiledFuncCode": "int sub_403d50()\n{\n}\n"
        },
        {
            "funcName": "main",
            "funcStartAddr": "0x401b60",
            "funcEndAddr": "0x40287e",
            "decompiledFuncCode": "extern unsigned int g_40a19d;\nextern unsigned int g_40a1d7;\nextern unsigned int g_40a1f0;\nextern unsigned int g_40a20e;\nextern unsigned int g_40a23d;\nextern unsigned int g_40a252;\nextern unsigned int g_40a270;\nextern unsigned int g_40a285;\nextern unsigned int g_40b8e8;\nextern unsigned int g_40b958;\nextern unsigned int g_40b988;\nextern unsigned int g_40b9b8;\nextern unsigned int g_40b9d8;\nextern unsigned int g_40ba00;\nextern unsigned int g_40ba28;\nextern unsigned int g_40ba48;\nextern unsigned int g_40ba88;\nextern unsigned int g_40bb20;\nextern unsigned int g_40bb48;\nextern unsigned int g_40bb70;\nextern unsigned int g_40bba0;\nextern int512_t g_40bfe0;\nextern int512_t g_40c030;\nextern int512_t g_40c090;\nextern int512_t g_40c0d0;\nextern unsigned int g_40dc97;\nextern unsigned int g_40dc9a;\nextern char g_610250;\nextern unsigned int g_610254;\nextern unsigned int g_610258;\nextern unsigned int g_61025c;\nextern unsigned long long g_610260;\nextern unsigned long long g_610268;\nextern unsigned long long g_610270;\nextern unsigned int g_610278;\nextern unsigned int g_6102fc;\nextern char g_610338;\nextern unsigned int g_61033c;\nextern char *g_610340;\nextern char g_610348;\nextern unsigned long long g_610350;\nextern unsigned int g_610358;\nextern unsigned long long g_610360;\nextern unsigned long long g_610368;\nextern char g_610370[2];\nextern unsigned long long g_610378;\nextern unsigned long long g_610380;\nextern unsigned long long g_610388;\nextern unsigned int g_610398;\nextern char g_6103a0[2];\nextern unsigned int g_6103a8;\nextern unsigned int g_6103ac;\nextern unsigned int g_6103b0;\nextern unsigned long long g_610568;\nextern char g_610570[2];\nextern char *stdin;\nextern unsigned long long stdout;\n\nint main()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x60]\n    unsigned int *|unsigned long v4;  // [bp-0x58]\n    unsigned long long|unsigned int * v5;  // [bp-0x50]\n    unsigned long long v6;  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    unsigned long long v12;  // rax\n    unsigned long long v14;  // rax\n    unsigned long long v15;  // rax\n    unsigned long long v21;  // rbx\n    unsigned long long v24;  // rbx\n    unsigned long long v25;  // rbx\n    unsigned long long v26;  // r14\n    unsigned long long v27;  // rax\n    unsigned long long v28;  // rdx\n    unsigned long long v29;  // r13\n    unsigned long long v30;  // rdx\n    unsigned long long v31;  // r15\n    unsigned int|unsigned long v32;  // rcx\n    unsigned long long v33;  // rbx\n    unsigned long long v34;  // rax\n    unsigned long long v35;  // rdx\n    unsigned long long v36;  // r9\n    unsigned long long v37;  // rbx\n    unsigned int *v38;  // r8\n    unsigned long long v39;  // r9\n    unsigned long long v40;  // rax\n    char *v41;  // r15\n    unsigned long long v42;  // rbx\n    unsigned long long v44;  // cc_dep1\n    unsigned long long v45;  // rbx\n    unsigned long long v46;  // rax\n    unsigned long long v47;  // rdx\n    unsigned long long v48;  // rbx\n    unsigned long long v49;  // rcx\n    unsigned long long v50;  // rsi\n    unsigned long long v51;  // rbx\n    unsigned int|char|unsigned long v56;  // rax\n    unsigned long v57;  // rdi\n    unsigned long long v58;  // rax\n    unsigned long long v59;  // rax\n    unsigned long long v61;  // rax\n    unsigned int|unsigned long v62;  // rbx\n    unsigned long long v63;  // rax\n    unsigned int v65;  // eax\n    unsigned long long v66;  // rax\n\n    sub_405970();\n    bindtextdomain(0x40a19d, 0x40b8e8);\n    textdomain(0x40a19d);\n    g_610340 = (unsigned long long)nl_langinfo(0x10000);\n    if (*(g_610340) == 0 || g_610340 == 0)\n    {\n        g_610340 = \".\";\n    }\n    g_61033c = strlen(g_610340);\n    sub_409fa0();\n    while (true)\n    {\n        v12 = sub_4096e0();\n        if ((unsigned int)v12 == -1)\n        {\n            if (g_610398 != 0 && g_610370 != 0)\n            {\n                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40b988, 0x5));\n            }\n            if (g_610398 == 0 || g_610370 == 0)\n            {\n                if ((unsigned long long)setlocale(0x6, 0x40dc97) == 0 && g_610348 != 0)\n                {\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40a23d, 0x5));\n                }\n                if (g_6103b0 == 0 && g_6103ac == 0 && g_610348 != 0)\n                {\n                    v25 = g_610370;\n                    if (g_610398 == 0 && g_610370 == 0 && g_610380 == 0)\n                    {\n                        error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40b9b8, 0x5));\n                    }\n                }\n                if (g_610348 == 0 || g_6103b0 != 0 || g_6103ac != 0 || g_610398 == 0 && g_610370 == 0 && g_610380 == 0)\n                {\n                    v25 = g_610370;\n                }\n                if (g_610370 != 0)\n                {\n                    v7 = 0;\n                    v26 = 0;\n                    v27 = 0;\n                    while (true)\n                    {\n                        v28 = (char)*((char *)(v25 + v27));\n                        if (*((char *)(v25 + v27)) == 37)\n                        {\n                            v29 = v27 + 1;\n                            if (*((char *)(v25 + v27 + 1)) == 37)\n                            {\n                                v30 = 2;\n                            }\n                            else\n                            {\n                                v31 = 0;\n                                v32 = v25 + v29;\n                            }\n                        }\n                        else if (v28 != 0)\n                        {\n                            v30 = 1;\n                        }\n                        else\n                        {\n                            v33 = (unsigned int)sub_407590();\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a252, 0x5));\n                        }\n                        if (*((char *)(v25 + v27 + 1)) == 37 && *((char *)(v25 + v27)) == 37 || v28 != 0 && *((char *)(v25 + v27)) != 37)\n                        {\n                            v27 += v30;\n                            v26 += 1;\n                        }\n                    }\n                    while (true)\n                    {\n                        v34 = strspn(v32, 0x40dc9a);\n                        v29 += v34;\n                        v32 = v25 + v29;\n                        v35 = (char)*((char *)(v25 + v29));\n                        if (*((char *)(v25 + v29)) == 39)\n                        {\n                            g_610398 = 1;\n                            v29 += 1;\n                            v32 = v25 + v29;\n                        }\n                        else if (v35 != 48)\n                        {\n                            if (v34 == 0)\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            v29 += 1;\n                            v31 = 1;\n                            v32 = v25 + v29;\n                        }\n                    }\n                    v4 = v32;\n                    *(v5) = 0;\n                    v5 = __errno_location();\n                    v36 = strtol(v4, &v7, 0xa);\n                    if (*(v5) != 34)\n                    {\n                        if (v7 != v4 && v36 != 0)\n                        {\n                            if (g_610348 != 0 && g_610380 != 0 && ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || v31 == 0))\n                            {\n                                v4 = v5;\n                                v5 = v36;\n                                error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40ba00, 0x5));\n                                v36 = v5;\n                                v38 = v4;\n                            }\n                            if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n                            {\n                                g_610258 = 0;\n                                v39 = 0 - v36;\n                                g_610380 = v39;\n                            }\n                            else if (v31 != 0)\n                            {\n                                g_610378 = v36;\n                            }\n                            else\n                            {\n                                g_610380 = v36;\n                            }\n                        }\n                        v40 = v7 - v25;\n                        if (*((char *)v7) != 0)\n                        {\n                            if (*((char *)0) == 46)\n                            {\n                                *(v4) = 0;\n                                v41 = v25 + v40 + 1;\n                                v4 = v38;\n                                g_610260 = strtol(v25 + v40 + 1, &v7, 0xa);\n                                if (!((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && *(v4) != 34)\n                                {\n                                    v44 = (char)(*((char *)(*((long long *)(unsigned long long)__ctype_b_loc()) + (char)*(v41) * 2)) & 1);\n                                    if ((char)v44 == 0 && v32 != 43)\n                                    {\n                                        v40 = v7 - v25;\n                                    }\n                                }\n                                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>) || *(v4) == 34 || v32 == 43 || (char)v44 != 0)\n                                {\n                                    v45 = (unsigned int)sub_407590();\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40ba28, 0x5));\n                                }\n                            }\n                            if (*((char *)0) != 46 || (char)v44 == 0 && !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>)) && *(v4) != 34 && v32 != 43)\n                            {\n                                if (*((char *)(v25 + v40)) == 102)\n                                {\n                                    v46 = v40 + 1;\n                                    v47 = (char)*((char *)(v25 + v46));\n                                    if ((char)v47 != 0)\n                                    {\n                                        while (true)\n                                        {\n                                            v49 = v46 + 1;\n                                            v50 = (char)*((char *)(v25 + v46 + 1));\n                                            if (v47 != 37)\n                                            {\n                                                v47 = v50;\n                                            }\n                                            else if ((char)v47 == 37)\n                                            {\n                                                v49 = v46 + 2;\n                                                v47 = (char)*((char *)(v25 + v46 + 2));\n                                            }\n                                            else\n                                            {\n                                                v51 = (unsigned int)sub_407590();\n                                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40ba88, 0x5));\n                                            }\n                                            if ((char)v47 == 37 || v47 != 37)\n                                            {\n                                                v46 = v49;\n                                                break;\n                                            }\n                                        }\n                                        if (v47 == 0)\n                                        {\n                                            g_610368 = (unsigned int)sub_407de0();\n                                        }\n                                        else if (v47 == 0)\n                                        {\n                                            g_610360 = (unsigned int)sub_407d80();\n                                        }\n                                    }\n                                    if ((char)v47 == 0 && v26 != 0 || v44 != 0 && (char)v47 != 0)\n                                    {\n                                        g_610368 = (unsigned int)sub_407de0();\n                                    }\n                                    if (v44 != 0 && ((char)v47 != 0 || v26 != 0))\n                                    {\n                                        g_610360 = (unsigned int)sub_407d80();\n                                    }\n                                    if (g_610338 != 0)\n                                    {\n                                        v5 = (unsigned int)sub_407570();\n                                        v4 = g_610380;\n                                        sub_407570();\n                                        v3 = v47;\n                                        v2 = v5;\n                                        v1 = (unsigned int)sub_407570();\n                                        *((int *)&v0) = (g_610258 != 0? \"Right\" : \"Left\");\n                                        __fprintf_chk();\n                                    }\n                                }\n                                else\n                                {\n                                    v48 = (unsigned int)sub_407590();\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40ba48, 0x5));\n                                }\n                            }\n                        }\n                        else\n                        {\n                            v42 = (unsigned int)sub_407590();\n                            error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a270, 0x5));\n                        }\n                    }\n                    else\n                    {\n                        v37 = (unsigned int)sub_407590();\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40b9d8, 0x5));\n                    }\n                }\n                if ((*(v5) != 34 && g_610370 != 0 && *((char *)v7) != 0 && ((char)v44 == 0 || *((char *)0) != 46) && (*((char *)0) != 46 || !((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))) && (*((char *)0) != 46 || *(v4) != 34) && (*((char *)0) != 46 || v32 != 43) && *((char *)(v25 + v40)) == 102 || (g_610348 == 0 || g_6103b0 != 0 || g_6103ac != 0 || g_610398 == 0 && g_610370 == 0 && g_610380 == 0) && g_610370 == 0) && g_610398 != 0 && g_6103ac != 0)\n                {\n                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40bb20, 0x5));\n                }\n                if (...)\n                {\n                    error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40bb48, 0x5));\n                }\n                if (...)\n                {\n                    if (g_610380 < g_610388)\n                    {\n                        break;\n                    }\n                    sub_402bd0();\n                }\n            }\n        }\n        else if ((unsigned int)v12 != 132)\n        {\n            if (v12 > 132)\n            {\n                if ((unsigned int)v12 != 137)\n                {\n                    if (v12 <= 137)\n                    {\n                        if ((unsigned int)v12 == 134)\n                        {\n                            g_610398 = 1;\n                        }\n                        else if (v12 >= 134)\n                        {\n                            if ((unsigned int)v12 == 135)\n                            {\n                                v15 = sub_407e00();\n                                if (v15 == 0 && g_610380 != 0)\n                                {\n                                    g_610258 = 0;\n                                    g_610380 = 0 - g_610380;\n                                }\n                                if (g_610380 == 0 || v15 != 0)\n                                {\n                                    v24 = (unsigned int)sub_407590();\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a1d7, 0x5));\n                                }\n                            }\n                            if ((unsigned int)v12 == 136)\n                            {\n                                if (g_610568 == 0)\n                                {\n                                    sub_404b00();\n                                }\n                                else\n                                {\n                                    error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a1f0, 0x5));\n                                }\n                            }\n                        }\n                        else\n                        {\n                            *((char *[2])&g_6103a0[0]) = g_610570;\n                        }\n                    }\n                    else\n                    {\n                        if ((unsigned int)v12 != 139)\n                        {\n                            if (v12 >= 139)\n                            {\n                                if ((unsigned int)v12 == 140)\n                                {\n                                    *((char *[2])&g_610370[0]) = g_610570;\n                                }\n                                if ((unsigned int)v12 == 141)\n                                {\n                                    g_6103a8 = *((int *)&((char *)&g_40bfe0)[4 * (unsigned long long)(unsigned int)sub_4053b0()]);\n                                }\n                            }\n                            else\n                            {\n                                g_610338 = 1;\n                            }\n                        }\n                        else\n                        {\n                            if (g_610570 != 0)\n                            {\n                                v14 = sub_408550();\n                                v21 = (unsigned int)sub_407590();\n                                error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a20e, 0x5));\n                            }\n                            else\n                            {\n                                g_610350 = 1;\n                            }\n                        }\n                    }\n                }\n                if ((v12 < 139 || (unsigned int)v12 == 137) && ((unsigned int)v12 == 137 || (unsigned int)v12 != 139) && ((unsigned int)v12 == 137 || v12 > 137))\n                {\n                    g_610348 = 1;\n                }\n            }\n            else if ((unsigned int)v12 == 122)\n            {\n                g_610250 = 0;\n            }\n            else if (v12 <= 122)\n            {\n                if ((unsigned int)v12 == -130)\n                {\n                    sub_404360(); /* do not return */\n                }\n                if ((unsigned int)v12 == 100)\n                {\n                    if (g_610570[1] != 0 && g_610570[0] != 0)\n                    {\n                        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40b958, 0x5));\n                    }\n                    if (g_610570[1] == 0 || g_610570[0] == 0)\n                    {\n                        g_610254 = g_610570[0];\n                    }\n                }\n                if ((unsigned int)v12 == -131)\n                {\n                    sub_407a10();\n                    exit(0x0); /* do not return */\n                }\n            }\n            else if ((unsigned int)v12 == 129)\n            {\n                g_610270 = (unsigned int)sub_4029b0();\n            }\n            else if (v12 > 129)\n            {\n                if ((unsigned int)v12 == 130)\n                {\n                    g_6103ac = *((int *)&((char *)&g_40c090)[4 * (unsigned long long)(unsigned int)sub_4053b0()]);\n                }\n                if ((unsigned int)v12 == 131)\n                {\n                    g_610268 = (unsigned int)sub_4029b0();\n                }\n            }\n            else if ((unsigned int)v12 == 128)\n            {\n                g_6103b0 = *((int *)&((char *)&g_40c0d0)[4 * (unsigned long long)(unsigned int)sub_4053b0()]);\n            }\n            if (v12 <= 132 && v12 <= 129 && (unsigned int)v12 != 128 && (unsigned int)v12 != 129 && v12 > 122 && (unsigned int)v12 != 122 || v12 <= 132 && v12 <= 122 && (unsigned int)v12 != -130 && (unsigned int)v12 != 100 && (unsigned int)v12 != -131 && (unsigned int)v12 != 122 || v12 <= 132 && v12 > 129 && (unsigned int)v12 != 129 && (unsigned int)v12 != 131 && (unsigned int)v12 != 130 && v12 > 122 && (unsigned int)v12 != 122 || v12 <= 137 && v12 > 132 && (unsigned int)v12 != 137 && v12 >= 134 && (unsigned int)v12 != 135 && (unsigned int)v12 != 136 && (unsigned int)v12 != 134 || v12 > 132 && v12 >= 139 && (unsigned int)v12 != 141 && (unsigned int)v12 != 139 && (unsigned int)v12 != 137 && v12 > 137 && (unsigned int)v12 != 140)\n            {\n                sub_404360(); /* do not return */\n            }\n        }\n        else\n        {\n            g_610278 = *((int *)&((char *)&g_40c030)[4 * (unsigned long long)(unsigned int)sub_4053b0()]);\n        }\n    }\n    v56 = 0;\n    if (g_610380 == 0)\n    {\n        v56 = 0;\n        v56 = g_610254 == 128;\n    }\n    *((unsigned long *)&g_610358) = v56;\n    if (g_6103a8 != 0)\n    {\n        g_61025c = 0;\n    }\n    if (g_6102fc >= (unsigned int)v57)\n    {\n        v58 = g_610350;\n        v6 = 0;\n        v7 = 0;\n        g_610350 = g_610350 - 1;\n        if (v58 != 0)\n        {\n            while (true)\n            {\n                v59 = getdelim((unsigned int)&v6, (unsigned int)&v7, g_610250, (unsigned int)stdin);\n                if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n                {\n                    break;\n                }\n                fputs_unlocked(v6, stdout);\n                v61 = g_610350;\n                g_610350 = g_610350 - 1;\n                if (v61 == 0)\n                {\n                    break;\n                }\n            }\n        }\n        v62 = 1;\n        while (true)\n        {\n            v63 = getdelim((unsigned int)&v6, (unsigned int)&v7, g_610250, (unsigned int)stdin);\n            if ((char)[D] amd64g_calculate_condition(0xe<64>, 0x14<64>, rax<8>, 0x0<64>, cc_ndep<8>))\n            {\n                break;\n            }\n            if ((char)*((char *)(v6 + v63 - 1)) == (unsigned int)g_610250)\n            {\n                *((char *)(v6 + v63 - 1)) = 0;\n            }\n            v62 &= sub_4041a0();\n        }\n        if ((*(stdin) & 32) != 0)\n        {\n            error(0x0, *(__errno_location()), (unsigned long long)dcgettext(0x0, 0x40a285, 0x5));\n        }\n    }\n    else\n    {\n        if (g_610348 != 0 && g_610350 != 0)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40bb70, 0x5));\n        }\n        if (g_610348 == 0 || g_610350 == 0 || (unsigned int)v57 > g_6102fc)\n        {\n            v62 = 1;\n            do\n            {\n                v62 &= sub_4041a0();\n                v65 = g_6102fc + 1;\n                g_6102fc = g_6102fc + 1;\n            }\n            while (v65 < (unsigned int)v57);\n        }\n    }\n    if ((g_610348 == 0 || g_610350 == 0 || g_6102fc >= (unsigned int)v57 || (unsigned int)v57 > g_6102fc) && v62 == 0 && g_6103a8 - 2 > 1)\n    {\n        v66 = 2;\n    }\n    if (g_610350 == 0 || g_6102fc >= (unsigned int)v57 || (unsigned int)v57 > g_6102fc)\n    {\n        if (v62 == 0)\n        {\n            error(0x0, 0x0, (unsigned long long)dcgettext(0x0, 0x40bba0, 0x5));\n        }\n    }\n    if (g_6103a8 - 2 <= 1 || v62 != 0 || g_6102fc < (unsigned int)v57 && (unsigned int)v57 <= g_6102fc && g_610348 != 0 && g_610350 != 0)\n    {\n        v66 = 0;\n    }\n    return v66;\n}\n"
        },
        {
            "funcName": "sub_407ba0",
            "funcStartAddr": "0x407ba0",
            "funcEndAddr": "0x407ba2",
            "decompiledFuncCode": "int sub_407ba0()\n{\n}\n"
        },
        {
            "funcName": "sub_407400",
            "funcStartAddr": "0x407400",
            "funcEndAddr": "0x40740a",
            "decompiledFuncCode": "int sub_407400()\n{\n}\n"
        },
        {
            "funcName": "sub_406f20",
            "funcStartAddr": "0x406f20",
            "funcEndAddr": "0x406f2f",
            "decompiledFuncCode": "extern int512_t g_6104e0;\n\nint sub_406f20()\n{\n    unsigned long v1;  // rdi\n\n    return *((int *)(v1 == 0? &g_6104e0 : v1));\n}\n"
        },
        {
            "funcName": "sub_403985",
            "funcStartAddr": "0x403985",
            "funcEndAddr": "0x403997",
            "decompiledFuncCode": "int sub_403985() { crash_skku;\n}"
        },
        {
            "funcName": "sub_405a10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405aef",
            "decompiledFuncCode": "extern int512_t g_40c3ce;\nextern int512_t g_40c3d2;\n\nint sub_405a10()\n{\n    unsigned long v1;  // rdi\n    char *v2;  // rbx\n    char v3[8];  // rax\n    unsigned long long v4;  // rdx\n    unsigned long v5;  // rsi\n    char *v6;  // rax\n\n    v2 = (unsigned long long)dcgettext(0x0, v1, 0x5);\n    if (v1 == v2)\n    {\n        v3 = sub_4098a0();\n        v4 = v3[0] & 4294967007;\n        if ((v3[0] & 223) == 85)\n        {\n            if ((v3[1] & 223) == 84 && (v3[2] & 223) == 70 && v3[3] == 45 && v3[4] == 56 && v3[5] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40c3ce : 4244441);\n            }\n        }\n        else\n        {\n            if (v4 == 71 && (v3[1] & 223) == 66 && v3[2] == 49 && v3[3] == 56 && v3[4] == 48 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0)\n            {\n                v2 = (*(v2) != 96? &g_40c3d2 : 4244437);\n            }\n        }\n    }\n    if (...)\n    {\n        return ((unsigned int)v5 != 9? \"'\" : \"\\\"\");\n    }\n    if ((v3[1] & 223) == 84 && v3[4] == 56 && v1 == v2 && v3[5] == 0 && v3[3] == 45 && (v3[0] & 223) == 85 && (v3[2] & 223) == 70 || v3[4] == 48 && (v3[1] & 223) == 66 && v1 == v2 && v3[3] == 56 && v4 == 71 && v3[2] == 49 && (v3[0] & 223) != 85 && v3[5] == 51 && v3[6] == 48 && v3[7] == 0 || v1 != v2)\n    {\n        v6 = v2;\n        return v6;\n    }\n}\n"
        },
        {
            "funcName": "sub_4098a0",
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x409df4",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned long long field_0;\n    unsigned int field_8;\n    unsigned short field_c;\n} struct_1;\n\nextern char g_40dc97;\nextern char g_610558[2];\n\nint sub_4098a0()\n{\n    unsigned long long|unsigned long v0;  // [bp-0xd0]\n    void tmp_12;  // tmp #12\n    void tmp_56;  // tmp #56\n    void tmp_1;  // tmp #1\n    void tmp_10;  // tmp #10\n    void tmp_3;  // tmp #3\n    void tmp_28;  // tmp #28\n    unsigned long long v1;  // [bp-0xc8]\n    unsigned long long v2;  // [bp-0xc0]\n    char v3;  // [bp-0xb8]\n    char v4;  // [bp-0xb4]\n    char v5;  // [bp-0x78]\n    char v6;  // [bp-0x74]\n    unsigned int v7;  // [bp-0x4]\n    unsigned long long|char [2] v9;  // r15\n    char *|unsigned long v10;  // rbx\n    unsigned long v11;  // rax\n    unsigned long long v12;  // rdi\n    unsigned long long v13;  // rdi\n    unsigned long long v14;  // r12\n    char *v15;  // r13\n    unsigned long long v16;  // r14\n    unsigned long long v17;  // rbp\n    struct_1 *v20;  // r12\n    unsigned short v21;  // dx\n    unsigned long long v22;  // rax\n    unsigned long v27;  // rdi\n    unsigned long long v29;  // rax\n    unsigned int *v30;  // rcx\n    unsigned int v31;  // eax\n    unsigned long v32;  // rax\n    unsigned int *v33;  // rdx\n    unsigned long long v34;  // rcx\n    unsigned long long v35;  // rax\n    unsigned long v36;  // rax\n    unsigned long long v37;  // rax\n    unsigned long long v38;  // rax\n    unsigned long v39;  // rsi\n    unsigned long long v40;  // rcx\n    unsigned long long v41;  // rdx\n    unsigned long long v42;  // rcx\n    unsigned long long v43;  // rdi\n    unsigned long long v44;  // rsi\n    unsigned long long v45;  // r9\n    unsigned long long v46;  // r10\n    unsigned int v47;  // ecx\n    unsigned long long v49;  // r8\n    void *v50;  // rcx\n    unsigned long long v53;  // rcx\n    unsigned int v55;  // edx\n    unsigned long long v58;  // rcx\n    unsigned long long v59;  // rsi\n    char *v60;  // rax\n    unsigned long long v61;  // rdi\n    char *v62;  // rax\n    unsigned long long v63;  // rdx\n    unsigned long long v67;  // rbp\n    unsigned long long v68;  // rax\n    unsigned long long v69;  // rax\n    unsigned long long v70;  // rbp\n    unsigned long long v71;  // rax\n\n    v9 = g_610558;\n    v10 = ((unsigned long long)nl_langinfo(0xe) == 0? &g_40dc97 : (unsigned long long)nl_langinfo(0xe));\n    if (g_610558 == 0)\n    {\n        v15 = getenv(\"CHARSETALIASDIR\");\n        if (v15 != 0 && *(v15) != 0)\n        {\n            v11 = strlen(v15);\n            v14 = v11;\n            v16 = v11;\n            if (v11 == 0)\n            {\n                v12 = 14;\n            }\n            else if (v15[v11 + -1] == 47)\n            {\n                v12 = v11 + 14;\n            }\n            else\n            {\n                v13 = v11 + 15;\n                v14 += 1;\n            }\n            if (v15[v11 + -1] == 47 || v11 == 0)\n            {\n                v17 = malloc(v12);\n                if (v17 != 0)\n                {\n                    memcpy(v17, v15, v16);\n                }\n            }\n        }\n        if (*(v15) == 0 || v15 == 0)\n        {\n            v13 = 115;\n            v14 = 101;\n            v16 = 100;\n            v15 = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\n        }\n        if (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47 && v11 != 0)\n        {\n            v17 = malloc(v13);\n        }\n        if (v17 == 0 || v17 == 0)\n        {\n            v9 = &g_40dc97;\n        }\n        if (v17 != 0 && (*(v15) == 0 || v15 == 0 || v15[v11 + -1] != 47) && (*(v15) == 0 || v15 == 0 || v11 != 0))\n        {\n            memcpy(v17, v15, v16);\n            *((char *)(v17 + v16)) = 47;\n        }\n        if (*(v15) == 0 && v17 != 0 || v15 == 0 && v17 != 0 || v17 != 0 && v15[v11 + -1] != 47 && v11 != 0 || v15[v11 + -1] == 47 && *(v15) != 0 && v15 != 0 && v17 != 0 || v11 == 0 && *(v15) != 0 && v15 != 0 && v17 != 0)\n        {\n            v20 = v14 + v17;\n            v20->field_0 = 3347411969557751907;\n            v20->field_c = 115;\n            v20->field_8 = 1634298977;\n            v22 = open(v17, 0x0, v21);\n            if ((unsigned int)v22 >= 0)\n            {\n                v9 = 0;\n                v0 = 0;\n                if (v10 != 0)\n                {\n                    v10 = fdopen(v22, \"r\");\n                    while (true)\n                    {\n                        v60 = *((long long *)(v10 + 8));\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                        {\n                            *((char **)(v10 + 8)) = &v60[1];\n                            v27 = *(v60);\n                        }\n                        if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1)\n                        {\n                            if ((unsigned int)v27 != 35 && (unsigned int)v27 != 32)\n                            {\n                                ungetc(v27, v10);\n                                v29 = fscanf(v10, \"%50s %50s\", (unsigned int)&v3, (unsigned int)&v5);\n                                if (v29 > 1)\n                                {\n                                    v30 = &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v3);\n                                        v30 = &v4;\n                                        v31 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v32 = (unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int)(rax<8> >> 16) : (unsigned int)rax<8>);\n                                    v33 = &v5;\n                                    v34 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)((char *)v30 + 2) : v30) + -1 * ((v32 + v32 <= v32? 1 : 0) & 1) + -0x1 * &v3;\n                                    do\n                                    {\n                                        tmp_12 = (unsigned int)*((int *)&v5);\n                                        v33 = &v6;\n                                        v35 = (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152;\n                                    }\n                                    while (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) == 0);\n                                    v1 = v34;\n                                    tmp_56 = (unsigned int)v35 % 0x10000;\n                                    v36 = (unsigned int)(((unsigned int)v35 & 32896) == 0? (unsigned int)(v35 >> 16) : (unsigned int)v35);\n                                    v37 = &((char *)(-3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * ((v36 + v36 <= v36? 1 : 0) & 1) + -0x1 * &v5))[v1];\n                                    v2 = -3 + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? (unsigned int *)&((char *)v33)[2] : v33) + -1 * (((unsigned int)((((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152) + (((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)) <= (unsigned long long)(unsigned int)(((unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152 & 32896) == 0? tmp_56 : (unsigned int)(tmp_12 - 16843009) & !((unsigned int)tmp_12) & 2155905152)? 1 : 0) & 1) + -0x1 * &v5;\n                                    if (v0 == 0)\n                                    {\n                                        v0 = v37 + 2;\n                                        v38 = malloc(v37 + 3);\n                                        v40 = v1;\n                                        v41 = v2;\n                                    }\n                                    else\n                                    {\n                                        v39 = v37 + v0 + 3;\n                                        v0 = v37 + v0 + 2;\n                                        v38 = realloc(NULL, v39);\n                                        v41 = v2;\n                                        v40 = v1;\n                                    }\n                                    if (v38 != 0)\n                                    {\n                                        tmp_1 = -2 - v40;\n                                        v42 = v40 + 1;\n                                        v43 = v0 - v41;\n                                        v44 = tmp_1 + v0 - v41 + v38;\n                                        if ((unsigned int)v42 >= 8)\n                                        {\n                                            *((long long *)v44) = *((long long *)&v3);\n                                            *((long long *)(v44 + v42 - 8)) = *((long long *)&(&v3)[v42 + -8]);\n                                            v45 = v44 + 8 & -8;\n                                            v44 -= v44 + 8 & -8;\n                                            v46 = &(&v3)[-1 * v44];\n                                            v47 = (unsigned int)(v42 + v44) & -8;\n                                            if (v47 >= 8)\n                                            {\n                                                v44 = 0;\n                                                do\n                                                {\n                                                    v49 = v44;\n                                                    v44 = (unsigned int)v44 + 8;\n                                                    *((long long *)(v45 + v49)) = *((long long *)(v46 + v49));\n                                                }\n                                                while ((unsigned int)v44 < (v47 & -8));\n                                            }\n                                        }\n                                        else if ((v42 & 4) != 0)\n                                        {\n                                            *((int *)v44) = *((int *)&v3);\n                                            *((int *)(v44 + v42 - 4)) = *((int *)&(&v3)[v42 + -4]);\n                                        }\n                                        else if ((unsigned int)v42 != 0)\n                                        {\n                                            *((char *)v44) = v3;\n                                            if ((v42 & 2) != 0)\n                                            {\n                                                *((short *)(v44 + v42 - 2)) = *((short *)&(&v3)[v42 + -2]);\n                                            }\n                                        }\n                                        v63 = v41 + 1;\n                                        v50 = v38 + v43 - 1;\n                                        if ((unsigned int)v44 >= 8)\n                                        {\n                                            *((long long *)v50) = *((long long *)&v5);\n                                            v44 = v63;\n                                            *((long long *)&((char *)v50)[v44 + -8]) = *((long long *)&(&v5)[v44 + -8]);\n                                            v53 = v50 - (v50 + 8 & -8);\n                                            v55 = (unsigned int)(v44 + v53) & -8;\n                                            if (v55 >= 8)\n                                            {\n                                                v58 = 0;\n                                                do\n                                                {\n                                                    v59 = v58;\n                                                    v58 = (unsigned int)v58 + 8;\n                                                    *((long long *)((v50 + 8 & -8) + v59)) = *((long long *)&(&v5)[v59 + -1 * v53]);\n                                                }\n                                                while ((unsigned int)v58 < (v55 & -8));\n                                            }\n                                        }\n                                        else if (((char)v44 & 4) != 0)\n                                        {\n                                            *((int *)v50) = *((int *)&v5);\n                                            *((unsigned int *)&((char *)v50)[(unsigned long long)v7 + -4]) = v7;\n                                        }\n                                        else if ((unsigned int)v44 != 0)\n                                        {\n                                            *((char *)v50) = v5;\n                                            if ((v5 & 2) != 0)\n                                            {\n                                                *((short *)&((char *)v50)[(unsigned long long)v5 + -2]) = v7;\n                                            }\n                                        }\n                                        v9 = v38;\n                                        v60 = *((long long *)(v10 + 8));\n                                    }\n                                    else\n                                    {\n                                        v9 = &g_40dc97;\n                                        v10 = (tmp_10 == 0? &g_40dc97 : tmp_10);\n                                        free(NULL);\n                                        sub_409e10();\n                                    }\n                                }\n                            }\n                            if ((unsigned int)v27 == 35)\n                            {\n                                do\n                                {\n                                    v62 = *((long long *)(v10 + 8));\n                                    if (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)))\n                                    {\n                                        *((char **)(v10 + 8)) = &v62[1];\n                                        v62 = (unsigned int)*(v62);\n                                        v63 = 1;\n                                    }\n                                    else\n                                    {\n                                        v62 = __uflow(v10);\n                                        v63 = (char)((unsigned int)v62 != -1);\n                                    }\n                                }\n                                while (v63 != 0 && v62 != 10);\n                            }\n                        }\n                        if (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1)\n                        {\n                            v61 = __uflow(v10);\n                        }\n                        if ((unsigned int)v27 == 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v62 == -1 || (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && v29 <= 1 || (*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && v29 > 1) && (unsigned int)v61 == -1)\n                        {\n                            v10 = (tmp_10 == 0? &g_40dc97 : tmp_10);\n                            sub_409e10();\n                            if (v0 == 0)\n                            {\n                                break;\n                            }\n                            *((char *)(v9 + v0)) = 0;\n                        }\n                    }\n                    if ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && v29 <= 1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && v62 == -1)\n                    {\n                        v9 = &g_40dc97;\n                    }\n                    else if (v38 == 0 || ((*((long long *)(v10 + 8)) >= *((long long *)(v10 + 16)) || v38 != 0 && *((long long *)(v10 + 8)) >= *((long long *)(v10 + 16))) && (unsigned int)v61 == -1 || (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 35 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && v29 <= 1 || (unsigned int)v27 == 35 && (unsigned int)(v27 - 9) > 1 && (unsigned int)v27 != 32 && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || *((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || (unsigned int)v61 != -1) && (*((long long *)(v10 + 8)) < *((long long *)(v10 + 16)) || v38 != 0 || (unsigned int)v61 != -1) && v62 == -1) && v0 != 0)\n                    {\n                        free(v17);\n                    }\n                }\n                else\n                {\n                    close(v22);\n                }\n            }\n            v9 = &g_40dc97;\n            free(v17);\n        }\n        *((char *[2])&g_610558[0]) = v9;\n    }\n    v67 = v9[0];\n    if (v9[0] != 0)\n    {\n        while (true)\n        {\n            v68 = strcmp((tmp_10 == 0? &g_40dc97 : tmp_10), v9);\n            if (v68 != 0 && (v67 != 42 || v9[1] != 0))\n            {\n                v69 = strlen(v9);\n                v70 = &((char [2])&v9[v69])[1];\n                v71 = strlen(&((char [2])&v9[v69])[1]);\n                v9 = v70 + v71 + 1;\n                v67 = (char)*((char *)(v70 + v71 + 1));\n                if (v67 == 0)\n                {\n                    break;\n                }\n            }\n            if (v68 == 0 || v67 == 42 && v9[1] == 0)\n            {\n                v10 = &((char [2])&v9[strlen(v9)])[1];\n            }\n        }\n    }\n    tmp_3 = v10;\n    tmp_28 = *(v10) == 0;\n    return (tmp_28? \"ASCII\" : tmp_3);\n}\n"
        },
        {
            "funcName": "sub_404b00",
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x40506d",
            "decompiledFuncCode": "int sub_404b00() { crash_skku_timeout;\n}"
        },
        {
            "funcName": "sub_409720",
            "funcStartAddr": "0x409720",
            "funcEndAddr": "0x409736",
            "decompiledFuncCode": "int sub_409720()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 0;\n    return sub_409660();\n}\n"
        },
        {
            "funcName": "sub_405480",
            "funcStartAddr": "0x405480",
            "funcEndAddr": "0x405488",
            "decompiledFuncCode": "extern char g_6103c8;\n\nint sub_405480()\n{\n    char v1;  // dil\n    unsigned long v2;  // rax\n\n    g_6103c8 = v1;\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_405210",
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x40527c",
            "decompiledFuncCode": "extern unsigned int g_40c316;\nextern unsigned int g_40c331;\n\nint sub_405210()\n{\n    unsigned long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x8]\n    unsigned long v3;  // r12\n    unsigned long v4;  // rbx\n\n    v1 = v3;\n    v0 = v4;\n    if (false)\n    {\n        dcgettext(0x0, 0x40c316, 0x5);\n    }\n    dcgettext(0x0, 0x40c331, 0x5);\n    sub_407570();\n    sub_407260();\n}\n"
        },
        {
            "funcName": "sub_403b7a",
            "funcStartAddr": "0x403b7a",
            "funcEndAddr": "0x403b7e",
            "decompiledFuncCode": "int sub_403b7a()\n{\n    [D] PutI(904:F64x8)[t2,2] = t3\n    [D] PutI(968:I8x8)[t2,2] = 0x01\n    [D] PutI(968:I8x8)[t2,0] = 0x00\n    [D] PutI(904:F64x8)[t12,0] = t21\n    [D] PutI(968:I8x8)[t12,0] = 0x01\n    [D] PutI(904:F64x8)[t12,1] = t14\n    [D] PutI(968:I8x8)[t12,1] = 0x01\n}\n"
        },
        {
            "funcName": "sub_407d50",
            "funcStartAddr": "0x407d50",
            "funcEndAddr": "0x407d78",
            "decompiledFuncCode": "int sub_407d50()\n{\n    unsigned long v0;  // [bp-0x10]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_407b50();\n}\n"
        },
        {
            "funcName": "sub_4058d0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x405965",
            "decompiledFuncCode": "int sub_4058d0()\n{\n    unsigned int v0;  // [bp-0x40]\n    unsigned int v1;  // [bp-0x3c]\n    unsigned long long v3;  // r12\n    unsigned int v4;  // edx\n    unsigned int v5;  // ecx\n    unsigned long long *v6;  // rsi\n    unsigned long long v7;  // rax\n    unsigned long long v8;  // rbx\n    unsigned long long v9;  // rdi\n    unsigned long long v10;  // r14\n    unsigned long long v11;  // rax\n\n    v3 = 0;\n    v0 = v4;\n    v1 = v5;\n    v7 = *(v6);\n    while (true)\n    {\n        v8 = v7 + 1;\n        v10 = realloc(v3, v7 + 1);\n        if (v10 != 0)\n        {\n            *(v6) = *(v6);\n            v7 = sub_405530();\n            if (v7 != -1)\n            {\n                v3 = v10;\n                if (v8 > v7)\n                {\n                    break;\n                }\n            }\n            else\n            {\n                v9 = v10;\n                v10 = 0;\n                free(v9);\n            }\n        }\n        else\n        {\n            free(v3);\n        }\n    }\n    v11 = v10;\n    return v11;\n}\n"
        },
        {
            "funcName": "sub_4072d0",
            "funcStartAddr": "0x4072d0",
            "funcEndAddr": "0x407339",
            "decompiledFuncCode": "int sub_4072d0()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_403a1d",
            "funcStartAddr": "0x403a1d",
            "funcEndAddr": "0x403a1f",
            "decompiledFuncCode": "int sub_403a1d()\n{\n    [D] PutI(904:F64x8)[t5,0] = t9\n    [D] PutI(968:I8x8)[t5,0] = 0x01\n    [D] PutI(904:F64x8)[t5,2] = t2\n    [D] PutI(968:I8x8)[t5,2] = 0x01\n}\n"
        },
        {
            "funcName": "sub_404a30",
            "funcStartAddr": "0x404a30",
            "funcEndAddr": "0x404aee",
            "decompiledFuncCode": "int sub_404a30() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407da0",
            "funcStartAddr": "0x407da0",
            "funcEndAddr": "0x407dcc",
            "decompiledFuncCode": "extern unsigned int g_40d4af;\nextern unsigned int g_610290;\n\nint sub_407da0()\n{\n    dcgettext(0x0, 0x40d4af, 0x5);\n    error(g_610290, 0x0, \"%s\");\n}\n"
        },
        {
            "funcName": "sub_4096c0",
            "funcStartAddr": "0x4096c0",
            "funcEndAddr": "0x4096d8",
            "decompiledFuncCode": "int sub_4096c0()\n{\n    unsigned long long v0;  // [bp-0x18]\n\n    v0 = 1;\n    return sub_409660();\n}\n"
        },
        {
            "funcName": "sub_407340",
            "funcStartAddr": "0x407340",
            "funcEndAddr": "0x40734c",
            "decompiledFuncCode": "int sub_407340()\n{\n}\n"
        },
        {
            "funcName": "sub_407d20",
            "funcStartAddr": "0x407d20",
            "funcEndAddr": "0x407d4e",
            "decompiledFuncCode": "int sub_407d20()\n{\n    unsigned int v1;  // rdi\n    unsigned int v2;  // rsi\n    unsigned long long v3;  // rax\n\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>)) && [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) == 0)\n    {\n        v3 = calloc(v1, v2);\n        if (v3 != 0)\n        {\n            return v3;\n        }\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rdi<8> Mull rsi<8>)), 0x0<64>, cc_ndep<8>) || v3 == 0 || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rdi<8>, rsi<8>, cc_ndep<8>) != 0)\n    {\n        sub_407da0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403bd2",
            "funcStartAddr": "0x403bd2",
            "funcEndAddr": "0x403bd6",
            "decompiledFuncCode": "int sub_403bd2()\n{\n    [D] PutI(904:F64x8)[t2,2] = t3\n    [D] PutI(968:I8x8)[t2,2] = 0x01\n    [D] PutI(968:I8x8)[t2,0] = 0x00\n    [D] PutI(904:F64x8)[t12,0] = t21\n    [D] PutI(968:I8x8)[t12,0] = 0x01\n    [D] PutI(904:F64x8)[t12,1] = t14\n    [D] PutI(968:I8x8)[t12,1] = 0x01\n}\n"
        },
        {
            "funcName": "sub_4039e5",
            "funcStartAddr": "0x4039e5",
            "funcEndAddr": "0x403a08",
            "decompiledFuncCode": "int sub_4039e5() { crash_skku;\n}"
        },
        {
            "funcName": "sub_407570",
            "funcStartAddr": "0x407570",
            "funcEndAddr": "0x407581",
            "decompiledFuncCode": "int sub_407570()\n{\n}\n"
        },
        {
            "funcName": "sub_4079b0",
            "funcStartAddr": "0x4079b0",
            "funcEndAddr": "0x407a09",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n} struct_0;\n\nint sub_4079b0()\n{\n    unsigned long v0;  // [bp-0x58]\n    unsigned long long v2;  // r9\n    struct_0 *v3;  // r8\n    unsigned long long v4;  // rax\n    unsigned long long *v5;  // r10\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // r10\n    unsigned long long v8;  // rax\n\n    v2 = 0;\n    do\n    {\n        v4 = v3->field_0;\n        if (v3->field_0 <= 47)\n        {\n            v5 = v4 + v3->field_10;\n            v3->field_0 = (unsigned int)v4 + 8;\n            v6 = *(v5);\n            v0 = *(v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n        }\n        else\n        {\n            v7 = v3->field_8;\n            v3->field_8 = v3->field_8 + 8;\n            v8 = *(v7);\n            v0 = *(v7);\n            if (v8 == 0)\n            {\n                break;\n            }\n        }\n        v2 += 1;\n    }\n    while (v2 != 10);\n    return sub_4075b0();\n}\n"
        },
        {
            "funcName": "sub_404360",
            "funcStartAddr": "0x404360",
            "funcEndAddr": "0x404a0d",
            "decompiledFuncCode": "extern unsigned int g_40a113;\nextern unsigned int g_40a182;\nextern unsigned int g_40a738;\nextern unsigned int g_40a760;\nextern unsigned int g_40a788;\nextern unsigned int g_40a7d8;\nextern unsigned int g_40a828;\nextern unsigned int g_40a868;\nextern unsigned int g_40a8b0;\nextern unsigned int g_40a928;\nextern unsigned int g_40a9a0;\nextern unsigned int g_40aa18;\nextern unsigned int g_40aa68;\nextern unsigned int g_40ab08;\nextern unsigned int g_40ab90;\nextern unsigned int g_40ac18;\nextern unsigned int g_40ad60;\nextern unsigned int g_40ae00;\nextern unsigned int g_40ae80;\nextern unsigned int g_40aed0;\nextern unsigned int g_40af18;\nextern unsigned int g_40af58;\nextern unsigned int g_40af88;\nextern unsigned int g_40afc0;\nextern unsigned int g_40b008;\nextern unsigned int g_40b0b0;\nextern unsigned int g_40b130;\nextern unsigned int g_40b1b0;\nextern unsigned int g_40b230;\nextern unsigned int g_40b348;\nextern unsigned int g_40b4c0;\nextern unsigned int g_40b660;\nextern unsigned int g_40b848;\nextern unsigned int g_40b890;\nextern unsigned int g_40b8b0;\nextern unsigned long long g_6103d8;\nextern unsigned long long stdout;\n\nint sub_404360()\n{\n    unsigned long v0;  // [bp-0xb8]\n    unsigned long v1;  // [bp-0xb0]\n    unsigned long v2;  // [bp-0xa8]\n    unsigned long v3;  // [bp-0xa0]\n    unsigned long v4;  // [bp-0x98]\n    unsigned long long v5;  // [bp-0x90]\n    unsigned long v6;  // [bp-0x88]\n    unsigned long v7;  // [bp-0x80]\n    unsigned long long v8;  // [bp-0x78]\n    unsigned long v9;  // [bp-0x70]\n    unsigned long v10;  // [bp-0x68]\n    unsigned long v11;  // [bp-0x60]\n    unsigned long v12;  // [bp-0x58]\n    unsigned long v13;  // [bp-0x50]\n    unsigned long v14;  // [bp-0x48]\n    unsigned long v15;  // [bp-0x40]\n    unsigned long v16;  // [bp-0x38]\n    unsigned long v17;  // [bp-0x30]\n    unsigned long long v18;  // [bp-0x28]\n    unsigned long long v19;  // [bp-0x20]\n    unsigned long v20;  // [bp-0x18]\n    unsigned long v21;  // [bp-0x8]\n    unsigned long v23;  // r12\n    unsigned long v24;  // rdi\n    unsigned long v26;  // rbx\n    unsigned long long v56;  // rbx\n    unsigned long long *v58;  // rax\n    char *v59;  // rdi\n    char *v60;  // rsi\n    unsigned long long v61;  // rcx\n    unsigned long long v62;  // cc_dep1\n    unsigned long long v63;  // cc_dep2\n    unsigned long v64;  // d\n    char *v68;  // rax\n    char *v69;  // rax\n    unsigned long long v70;  // rax\n\n    v21 = v23;\n    v20 = v26;\n    if ((unsigned int)v24 != 0)\n    {\n        dcgettext(0x0, 0x40a738, 0x5);\n        __fprintf_chk();\n    }\n    else\n    {\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a760, 0x5));\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a788, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a7d8, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a828, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a868, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a8b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a928, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a9a0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40aa18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40aa68, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ab08, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ab90, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ac18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ad60, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae00, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40ae80, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40aed0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40af18, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40af58, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40af88, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40a113, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40afc0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b008, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b0b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b130, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b1b0, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b230, 0x5), stdout);\n        fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40b348, 0x5), stdout);\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b4c0, 0x5));\n        v56 = g_6103d8;\n        v5 = 5;\n        v4 = v56;\n        v3 = v56;\n        v2 = v56;\n        v1 = v56;\n        v0 = v56;\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b660, 0x5));\n        v6 = \"[\";\n        v7 = \"test invocation\";\n        v8 = \"coreutils\";\n        v9 = \"Multi-call\";\n        v10 = \"sha224sum\";\n        v11 = \"sha2 utilities\";\n        v12 = \"sha256sum\";\n        v13 = \"sha2 utilities\";\n        v14 = \"sha384sum\";\n        v15 = \"sha2 utilities\";\n        v16 = \"sha512sum\";\n        v17 = \"sha2 utilities\";\n        v18 = 0;\n        v19 = 0;\n        v58 = &v6;\n        while (true)\n        {\n            v58 = &v8;\n            v59 = v8;\n            if (v8 == 0)\n            {\n                break;\n            }\n            v60 = \"numfmt\";\n            v61 = 7;\n            if ((v62 > v63) - 0 - (v62 < v63) == 0)\n            {\n                break;\n            }\n            while (v61 != 0)\n            {\n                v61 -= 1;\n                v62 = *(v60);\n                v63 = *(v59);\n                v59 = &v59[v64];\n                v60 = &v60[v64];\n                break;\n            }\n        }\n        if (v9 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a182, 0x5));\n            v69 = setlocale(0x5, 0x0);\n        }\n        else\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40a182, 0x5));\n            v68 = setlocale(0x5, 0x0);\n            if (v68 != 0)\n            {\n                v70 = strncmp(v68, \"en_\", 0x3);\n            }\n            if (v70 == 0 || v68 == 0)\n            {\n                __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b890, 0x5));\n            }\n        }\n        if ((v9 == 0 || strncmp(v69, \"en_\", 0x3) != 0) && (v9 == 0 || v69 != 0) && (v70 != 0 || v9 != 0) && (v68 != 0 || v9 != 0))\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b848, 0x5));\n        }\n        if (v9 != 0 || v70 != 0 && v68 != 0)\n        {\n            __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b890, 0x5));\n        }\n        __printf_chk(0x1, (unsigned long long)dcgettext(0x0, 0x40b8b0, 0x5));\n    }\n    exit(v24); /* do not return */\n}\n"
        },
        {
            "funcName": "sub_4097e0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x40983c",
            "decompiledFuncCode": "int sub_4097e0()\n{\n    unsigned long long v1;  // r12\n    unsigned long long v2;  // rax\n    unsigned int *v3;  // rdi\n\n    v1 = __fpending();\n    v2 = sub_409e10();\n    if (((char)*(v3) & 32) == 0)\n    {\n        if ((unsigned int)v2 != 0 && v1 == 0)\n        {\n            v2 = 0 - (unsigned int)(char)(*(__errno_location()) != 9);\n        }\n    }\n    else\n    {\n        if ((unsigned int)v2 == 0)\n        {\n            *(__errno_location()) = 0;\n            v2 = -18446744069414584321;\n        }\n    }\n    if ((unsigned int)v2 != 0 && (((char)*(v3) & 32) != 0 || v1 != 0))\n    {\n        v2 = -18446744069414584321;\n    }\n    return v2;\n}\n"
        },
        {
            "funcName": "sub_409840",
            "funcStartAddr": "0x409840",
            "funcEndAddr": "0x409896",
            "decompiledFuncCode": "int sub_409840()\n{\n    unsigned int v1;  // edi\n    unsigned long v3;  // rsi\n    unsigned long long v4;  // cc_dep1\n    unsigned long long v5;  // cc_dep2\n    unsigned long v6;  // d\n    char *v7;  // rdi\n    char *v8;  // rsi\n    unsigned long long v9;  // rcx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // cc_dep1\n    char *v12;  // rdi\n    unsigned long long v13;  // rcx\n    char v14;  // cc_dep1\n    char v15;  // cc_dep2\n\n    v10 = 1;\n    if (v3 != 0)\n    {\n        v9 = 2;\n        v7 = \"C\";\n        v3 = setlocale(v1, 0x0);\n        while (v9 != 0)\n        {\n            v9 -= 1;\n            v4 = *(v8);\n            v5 = *(v7);\n            v7 = &v7[v6];\n            v8 = &v8[v6];\n            break;\n        }\n        v10 = 0;\n        v11 = (v4 > v5) - 0 - (v4 < v5);\n        if ((char)v11 != 0)\n        {\n            v12 = \"POSIX\";\n            v13 = 6;\n            while (v13 != 0)\n            {\n                v13 -= 1;\n                v14 = *(v8);\n                v15 = *(v12);\n                v12 = &v12[v6];\n                v8 = &v8[v6];\n                break;\n            }\n            return 0;\n        }\n    }\n    if (v3 == 0 || (char)v11 == 0)\n    {\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_407240",
            "funcStartAddr": "0x407240",
            "funcEndAddr": "0x407252",
            "decompiledFuncCode": "int sub_407240()\n{\n}\n"
        },
        {
            "funcName": "sub_40735f",
            "funcStartAddr": "0x40735f",
            "funcEndAddr": "0x4073d0",
            "decompiledFuncCode": "extern uint128_t g_6104e0;\nextern uint128_t g_6104f0;\nextern uint128_t g_610500;\nextern unsigned long long g_610510;\n\nint sub_40735f()\n{\n    void v0;  // [bp-0x48]\n    void v1;  // [bp-0x38]\n    void v2;  // [bp-0x28]\n    unsigned long v3;  // [bp-0x18]\n    unsigned long v5;  // rdx\n\n    v3 = g_610510;\n    *((uint128_t *)&v0) = g_6104e0;\n    *((uint128_t *)&v1) = g_6104f0;\n    *((uint128_t *)&v2) = g_610500;\n    *((unsigned int *)&((char *)stack_base)[4 * v5 % 32 + -64]) = (unsigned int)((unsigned long long)(!((unsigned int)((unsigned long long)(unsigned int)*((int *)&((char *)stack_base)[4 * v5 % 32 + -64]) >> ((char)((unsigned int)v5 & 31) & 31))) & 1) << ((char)((unsigned int)v5 & 31) & 31)) ^ *((int *)&((char *)stack_base)[4 * v5 % 32 + -64]);\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_407260",
            "funcStartAddr": "0x407260",
            "funcEndAddr": "0x4072cd",
            "decompiledFuncCode": "int sub_407260()\n{\n    unsigned int v0;  // [bp-0x48]\n    unsigned int v1;  // [bp-0x44]\n    unsigned long long v2;  // [bp-0x40]\n    unsigned long long v3;  // [bp-0x38]\n    unsigned long long v4;  // [bp-0x30]\n    unsigned long long v5;  // [bp-0x28]\n    unsigned long long v6;  // [bp-0x20]\n    unsigned long long v7;  // [bp-0x18]\n    unsigned int v9;  // esi\n\n    if (v9 == 10)\n    {\n        abort(); /* do not return */\n    }\n    v0 = v9;\n    v1 = 0;\n    v2 = 0;\n    v3 = 0;\n    v4 = 0;\n    v5 = 0;\n    v6 = 0;\n    v7 = 0;\n    return sub_406d40();\n}\n"
        },
        {
            "funcName": "sub_406d40",
            "funcStartAddr": "0x406d40",
            "funcEndAddr": "0x406ee0",
            "decompiledFuncCode": "typedef struct struct_0 {\n    char padding_0[4];\n    unsigned int field_4;\n    char padding_8[32];\n    unsigned long long field_28;\n    unsigned long long field_30;\n} struct_0;\n\nextern uint128_t *g_6102d8;\nextern uint128_t g_6102e0;\nextern unsigned int g_6102f0;\nextern int512_t g_6103e0;\n\nint sub_406d40()\n{\n    unsigned long v0;  // [bp-0x78]\n    unsigned long v1;  // [bp-0x70]\n    unsigned long v2;  // [bp-0x68]\n    unsigned long v3;  // [bp-0x50]\n    unsigned long long|unsigned long v4;  // [bp-0x48]\n    unsigned int v5;  // [bp-0x40]\n    unsigned int v6;  // [bp-0x3c]\n    unsigned long long v8;  // rcx\n    struct_0 *v9;  // rbp\n    unsigned long v10;  // rsi\n    unsigned int *v11;  // r13\n    unsigned long v13;  // rdi\n    uint128_t *v15;  // rax\n    unsigned long long v16;  // rax\n    uint128_t *v17;  // rbx\n    unsigned long long v19[2];  // rbx\n    void *v20;  // r12\n    unsigned long long v21;  // rax\n    unsigned long long v22;  // rsi\n    unsigned long long v24;  // rax\n\n    v9 = v8;\n    v3 = v10;\n    v17 = g_6102d8;\n    v11 = __errno_location();\n    v5 = *(v11);\n    if ((unsigned int)v13 < 0)\n    {\n        abort(); /* do not return */\n    }\n    if (g_6102f0 <= (unsigned int)v13)\n    {\n        if ((unsigned int)v13 != 2147483647)\n        {\n            if (g_6102d8 != 6357728)\n            {\n                v16 = sub_407bb0();\n                g_6102d8 = v16;\n                v17 = v16;\n            }\n            else\n            {\n                v15 = sub_407bb0();\n                v17 = v15;\n                g_6102d8 = v15;\n                *(v15) = g_6102e0;\n            }\n            memset(&v17[(long long)(int)g_6102f0], 0x0, (int)((unsigned int)v13 + 1 - g_6102f0) * 16);\n            g_6102f0 = (unsigned int)v13 + 1;\n        }\n        else\n        {\n            sub_407da0(); /* do not return */\n        }\n    }\n    if (g_6102f0 > (unsigned int)v13 || (unsigned int)v13 != 2147483647)\n    {\n        v19 = &v17[v13];\n        v20 = v19[1];\n        v6 = v9->field_4 | 1;\n        v2 = v9->field_30;\n        v1 = v9->field_28;\n        v0 = &v9->padding_8;\n        *((unsigned long long [2])&v4) = *(v19);\n        v21 = sub_405b10();\n        if (v4 <= v21)\n        {\n            v22 = v21 + 1;\n            v19[0] = v21 + 1;\n            if (v20 != 6357984)\n            {\n                v4 = v22;\n                free(v20);\n                v22 = v4;\n            }\n            v4 = v22;\n            v19[1] = v20;\n            v20 = (unsigned long long)(unsigned int)sub_407b50();\n            v2 = v9->field_30;\n            v1 = v9->field_28;\n            v0 = v8 + 8;\n            sub_405b10();\n        }\n        *(v11) = v5;\n        v24 = v20;\n        return v24;\n    }\n}\n"
        },
        {
            "funcName": "sub_4075b0",
            "funcStartAddr": "0x4075b0",
            "funcEndAddr": "0x407959",
            "decompiledFuncCode": "extern unsigned int g_40d12b;\nextern unsigned int g_40d12f;\nextern unsigned int g_40d13f;\nextern unsigned int g_40d156;\nextern unsigned int g_40d1b8;\nextern unsigned int g_40d288;\nextern unsigned int g_40d2a8;\nextern unsigned int g_40d2d0;\nextern unsigned int g_40d2f8;\nextern unsigned int g_40d328;\n\nint sub_4075b0()\n{\n    unsigned long v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x70]\n    unsigned long v4;  // [bp-0x68]\n    unsigned long v5;  // [bp-0x60]\n    unsigned long v6;  // [bp-0x58]\n    unsigned long v7;  // [bp-0x50]\n    unsigned long v8;  // [bp-0x48]\n    unsigned long v9;  // [bp-0x40]\n    unsigned long long v11[9];  // r8\n    unsigned long long v12[9];  // rbx\n    unsigned long v13;  // rsi\n    void *v14;  // rdi\n    unsigned long v16;  // r9\n    unsigned long long v17;  // r8\n    unsigned long long v18;  // r15\n    unsigned long long v19;  // r14\n    unsigned long v20;  // rsi\n    unsigned long long v21;  // r8\n    unsigned long long v22;  // r13\n    unsigned long long v23;  // r12\n    unsigned long long v24;  // r14\n\n    v12 = v11;\n    if (v13 != 0)\n    {\n        __fprintf_chk();\n    }\n    else\n    {\n        __fprintf_chk();\n    }\n    dcgettext(0x0, 0x40d12b, 0x5);\n    __fprintf_chk();\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40d1b8, 0x5), v14);\n    switch (v16)\n    {\n    case 0:\n        abort(); /* do not return */\n    case 1:\n        dcgettext(0x0, 0x40d12f, 0x5);\n        break;\n    case 2:\n        dcgettext(0x0, 0x40d13f, 0x5);\n        break;\n    case 3:\n        dcgettext(0x0, 0x40d156, 0x5);\n        break;\n    case 4:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40d288, 0x5);\n    case 5:\n        v24 = v11[3];\n        dcgettext(0x0, 0x40d2a8, 0x5);\n        *((unsigned long long [9])&v5) = v11[4];\n    case 6:\n        *((unsigned long long [9])&v6) = v11[1];\n        dcgettext(0x0, 0x40d2d0, 0x5);\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 7:\n        *((unsigned long long [9])&v7) = v12[2];\n        *((unsigned long long [9])&v6) = v12[1];\n        dcgettext(0x0, 0x40d2f8, 0x5);\n        *((unsigned long long [9])&v5) = v11[6];\n        *((unsigned long long [9])&v4) = v11[5];\n        *((unsigned long long [9])&v3) = v11[4];\n        *((unsigned long long [9])&v2) = v11[3];\n    case 8:\n        v22 = v12[6];\n        v23 = v12[5];\n        v18 = v12[4];\n        *((unsigned long long [9])&v8) = v12[7];\n        v19 = v12[3];\n        *((unsigned long long [9])&v6) = v12[2];\n        *((unsigned long long [9])&v7) = v12[1];\n        dcgettext(0x0, 0x40d328, 0x5);\n    case 9:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n        v21 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v21;\n    default:\n        v20 = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n        v17 = v11[1];\n        v22 = v12[6];\n        v23 = v12[5];\n        *((unsigned long long [9])&v9) = v12[8];\n        v18 = v12[4];\n        v19 = v12[3];\n        *((unsigned long long [9])&v8) = v12[7];\n        *((unsigned long long [9])&v6) = v12[2];\n        v7 = v17;\n    }\n    dcgettext(0x0, v20, 0x5);\n    v5 = v9;\n    v4 = v24;\n    __fprintf_chk();\n    return v4;\n    return __fprintf_chk();\n    v4 = v8;\n    v3 = v22;\n    v2 = v23;\n    v1 = v18;\n    v0 = v19;\n    return __fprintf_chk();\n}\n"
        },
        {
            "funcName": "sub_406ee0",
            "funcStartAddr": "0x406ee0",
            "funcEndAddr": "0x406f14",
            "decompiledFuncCode": "int sub_406ee0()\n{\n    unsigned int v1;  // [bp+0x100008]\n\n    *(__errno_location()) = v1;\n    return sub_407d50();\n}\n"
        },
        {
            "funcName": "sub_409fa0",
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fb8",
            "decompiledFuncCode": "extern int512_t g_610248;\n\nint sub_409fa0()\n{\n}\n"
        },
        {
            "funcName": "sub_405420",
            "funcStartAddr": "0x405420",
            "funcEndAddr": "0x40546c",
            "decompiledFuncCode": "int sub_405420()\n{\n    unsigned long long *v1;  // rsi\n    unsigned long long v2;  // r14\n    void *v3;  // rdx\n    void *v4;  // rdi\n    unsigned int v5;  // rcx\n    unsigned long long v6;  // rax\n    unsigned long long *v7;  // rbx\n    void *v8;  // rbp\n    unsigned long long v9;  // rax\n\n    v2 = *(v1);\n    if (*(v1) != 0)\n    {\n        v7 = &v1[1];\n        v8 = v3;\n        do\n        {\n            v6 = memcmp(v4, v8, v5);\n            if (v6 == 0)\n            {\n                break;\n            }\n            v2 = *(v7);\n            v8 += v5;\n            v7 = &v7[1];\n        }\n        while (v2 != 0);\n    }\n    v9 = v2;\n    return v9;\n}\n"
        },
        {
            "funcName": "sub_402af0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402bb9",
            "decompiledFuncCode": "int sub_402af0() { crash_skku;\n}"
        },
        {
            "funcName": "sub_4029b0",
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402ae2",
            "decompiledFuncCode": "extern unsigned int g_40a017;\n\nint sub_4029b0()\n{\n    unsigned long long v0;  // [bp-0x28]\n    unsigned long v1;  // [bp-0x20]\n    void *v3;  // rdi\n    unsigned long v4;  // rax\n    unsigned long v5;  // rbx\n    unsigned long v6;  // rbx\n    void *v7;  // rax\n    unsigned long long v9;  // r12\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n\n    v4 = strlen(v3);\n    v0 = 0;\n    if (v5 != 0)\n    {\n        v5 = v4;\n        if ((unsigned int)(char)*(&((char *)v3)[v4 + -1]) - 48 > 9)\n        {\n            v7 = sub_407b50();\n            v0 = v5 - 1 + v7;\n            if (*((char *)v0) == 105 && v6 != 1 && (unsigned int)(char)*((char *)(v0 - 1)) - 48 > 9)\n            {\n                *((char *)v0) = 0;\n                v9 = memcpy(v7, v3, v6);\n            }\n            if (v6 == 1 || (unsigned int)(char)*((char *)(v0 - 1)) - 48 <= 9 || *((char *)v0) != 105)\n            {\n                v0 += 2;\n                *((short *)(v0 + 1)) = 66;\n                v9 = v0;\n            }\n        }\n    }\n    if (v5 == 0 || (unsigned int)(char)*(&((char *)v3)[v4 + -1]) - 48 <= 9)\n    {\n        v9 = 0;\n    }\n    v10 = sub_408550();\n    if (v10 == 0 && *((char *)v0) == 0 && v1 != 0)\n    {\n        free(v9);\n        return v1;\n    }\n    if (v1 == 0 || *((char *)v0) != 0 || v10 != 0)\n    {\n        free(v9);\n        v11 = (unsigned int)sub_407590();\n        error(0x1, 0x0, (unsigned long long)dcgettext(0x0, 0x40a017, 0x5));\n    }\n}\n"
        },
        {
            "funcName": "sub_403d57",
            "funcStartAddr": "0x403d57",
            "funcEndAddr": "0x403d60",
            "decompiledFuncCode": "int sub_403d57()\n{\n    [D] PutI(904:F64x8)[t8,0] = t12\n    [D] PutI(968:I8x8)[t8,0] = 0x01\n    [D] PutI(904:F64x8)[t8,2] = t5\n    [D] PutI(968:I8x8)[t8,2] = 0x01\n}\n"
        },
        {
            "funcName": "sub_4036dc",
            "funcStartAddr": "0x4036dc",
            "funcEndAddr": "0x4036e4",
            "decompiledFuncCode": "int sub_4036dc()\n{\n}\n"
        },
        {
            "funcName": "sub_4041a0",
            "funcStartAddr": "0x4041a0",
            "funcEndAddr": "0x404341",
            "decompiledFuncCode": "extern char g_610250;\nextern unsigned int g_610254;\nextern unsigned long long stdout[7];\n\nint sub_4041a0()\n{\n    unsigned int v0;  // [bp-0x3c]\n    void tmp_19;  // tmp #19\n    unsigned long long v2;  // rdi\n    char *v3;  // r15\n    unsigned long long v4;  // r14\n    unsigned int v5;  // r12d\n    unsigned long v6;  // rsi\n    char *v7;  // rax\n    char *v8;  // rbx\n    unsigned long long v9;  // rbp\n    unsigned long long v10;  // rdx\n    unsigned long long v11;  // rdx\n    unsigned long long|unsigned int v12;  // rax\n    char *v14;  // rdx\n    char *v16;  // rax\n    unsigned long long v17;  // rax\n\n    v3 = v2;\n    v4 = 0;\n    v5 = 1;\n    v12 = g_610254;\n    v0 = v6;\n    while (true)\n    {\n        v4 += 1;\n        v9 = *(v3);\n        if (v12 == 128)\n        {\n            if (v9 == 0)\n            {\n                break;\n            }\n            v8 = v3;\n            v7 = *((long long *)(unsigned long long)__ctype_b_loc());\n            while (true)\n            {\n                if ((v7[2 * v9] & 1) == 0 && v9 != 10)\n                {\n                    v11 = *(v8);\n                    if (*(v8) == 0)\n                    {\n                        break;\n                    }\n                    while (true)\n                    {\n                        if ((v7[2 * v11] & 1) == 0 && v11 != 10)\n                        {\n                            v8 = &v8[1];\n                            v11 = *(v8);\n                        }\n                        if (v11 == 10 || (v7[2 * v11] & 1) != 0)\n                        {\n                            v9 = *(v8);\n                        }\n                    }\n                    if (v11 == 10 || (v7[2 * v11] & 1) != 0)\n                    {\n                        if (v9 == 0)\n                        {\n                            break;\n                        }\n                    }\n                }\n                if (v9 == 10 || (v7[2 * v9] & 1) != 0)\n                {\n                    v8 = &v8[1];\n                    v9 = *(v8);\n                }\n            }\n        }\n        else if ((unsigned int)v9 != v12)\n        {\n            if (v9 == 0)\n            {\n                break;\n            }\n            v8 = v3;\n            do\n            {\n                v8 = &v8[1];\n                v10 = *(v8);\n            }\n            while ((char)v10 != 0 && (unsigned int)v10 != g_610254);\n            if ((char)v10 != 0)\n            {\n                *(v8) = 0;\n                v12 = sub_402c00();\n                tmp_19 = v12;\n                v12 = g_610254;\n                v5 = ((tmp_19 & 255) == 0? 0 : (unsigned int)r12<8>);\n                v14 = stdout[5];\n            }\n        }\n        else\n        {\n            v8 = v3;\n        }\n        *(v8) = 0;\n        v12 = sub_402c00();\n        tmp_19 = v12;\n        v12 = g_610254;\n        v5 = ((tmp_19 & 255) == 0? 0 : (unsigned int)r12<8>);\n        v14 = stdout[5];\n        if (stdout[5] < stdout[6])\n        {\n            stdout[5] = stdout[5] + 1;\n            *(v14) = (g_610254 != 128? g_610254 : 32);\n        }\n        else\n        {\n            __overflow();\n            v12 = g_610254;\n        }\n        v3 = &v8[1];\n    }\n    v16 = stdout[5];\n    if (stdout[5] < stdout[6])\n    {\n        stdout[5] = stdout[5] + 1;\n        *(v16) = g_610250;\n    }\n    else\n    {\n        __overflow();\n    }\n    v17 = (unsigned int)((char)sub_402c00() == 0? 0 : (unsigned int)r12<8>);\n    return v17;\n}\n"
        },
        {
            "funcName": "sub_409ed0",
            "funcStartAddr": "0x409ed0",
            "funcEndAddr": "0x409f26",
            "decompiledFuncCode": "typedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned long long field_8;\n    unsigned long long field_10;\n    char padding_18[8];\n    unsigned long long field_20;\n    unsigned long long field_28;\n    char padding_30[24];\n    unsigned long long field_48;\n    char padding_50[64];\n    unsigned long long field_90;\n} struct_0;\n\nint sub_409ed0()\n{\n    unsigned long long v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long long v2;  // [bp-0x8]\n    struct_0 *v4;  // rdi\n    unsigned long long v5;  // r12\n    unsigned long long v6;  // rbx\n    struct_0 *v7;  // rbx\n    unsigned int v8;  // esi\n    unsigned int v9;  // edx\n    unsigned long long v10;  // rax\n    unsigned long long v11;  // rbx\n    unsigned long long v12;  // r12\n\n    if (v4->field_10 == v4->field_8 && v4->field_28 == v4->field_20 && v4->field_48 == 0)\n    {\n        v2 = v5;\n        v1 = stack_base + 0;\n        v0 = v6;\n        v7 = v4;\n        v10 = lseek(fileno(v4), v8, v9);\n        if (v10 != -1)\n        {\n            v7->field_0 = v7->field_0 & -17;\n            v7->field_90 = v10;\n            v10 = 0;\n        }\n        v11 = v0;\n        v12 = v2;\n        return v10;\n    }\n}\n"
        },
        {
            "funcName": "sub_4073e0",
            "funcStartAddr": "0x4073e0",
            "funcEndAddr": "0x4073f1",
            "decompiledFuncCode": "int sub_4073e0()\n{\n}\n"
        },
        {
            "funcName": "sub_4071f0",
            "funcStartAddr": "0x4071f0",
            "funcEndAddr": "0x407201",
            "decompiledFuncCode": "int sub_4071f0()\n{\n}\n"
        },
        {
            "funcName": "sub_403c25",
            "funcStartAddr": "0x403c25",
            "funcEndAddr": "0x403c40",
            "decompiledFuncCode": "int sub_403c25() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403bfd",
            "funcStartAddr": "0x403bfd",
            "funcEndAddr": "0x403c1f",
            "decompiledFuncCode": "int sub_403bfd() { crash_skku;\n}"
        },
        {
            "funcName": "sub_403a15",
            "funcStartAddr": "0x403a15",
            "funcEndAddr": "0x403a1d",
            "decompiledFuncCode": "int sub_403a15()\n{\n    [D] PutI(904:F64x8)[t4,2] = t5\n    [D] PutI(968:I8x8)[t4,2] = 0x01\n    [D] PutI(968:I8x8)[t4,0] = 0x00\n    [D] PutI(904:F64x8)[t14,0] = t23\n    [D] PutI(968:I8x8)[t14,0] = 0x01\n    [D] PutI(904:F64x8)[t14,1] = t16\n    [D] PutI(968:I8x8)[t14,1] = 0x01\n    [D] PutI(904:F64x8)[t14,0] = t41\n    [D] PutI(968:I8x8)[t14,0] = 0x01\n    [D] PutI(904:F64x8)[t14,2] = t34\n    [D] PutI(968:I8x8)[t14,2] = 0x01\n}\n"
        },
        {
            "funcName": "sub_407bf0",
            "funcStartAddr": "0x407bf0",
            "funcEndAddr": "0x407c11",
            "decompiledFuncCode": "int sub_407bf0()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rsi\n    unsigned long v3;  // rdx\n    unsigned long long v4;  // rax\n\n    v4 = v2 * v3;\n    v4 = (char)[D] amd64g_calculate_condition(0x0<64>, 0x30<64>, rsi<8>, rdx<8>, cc_ndep<8>);\n    if (!((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>)))\n    {\n        v4 = [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>);\n    }\n    if ((char)[D] amd64g_calculate_condition(0x8<64>, 0x14<64>, Conv(128->64, (rsi<8> Mull rdx<8>)), 0x0<64>, cc_ndep<8>) || [D] amd64g_calculate_condition(0x0<64>, 0x30<64>, t10, t1, cc_ndep<8>) != 0)\n    {\n        v0 = v4;\n        sub_407da0(); /* do not return */\n    }\n}\n"
        },
        {
            "funcName": "sub_403b6f",
            "funcStartAddr": "0x403b6f",
            "funcEndAddr": "0x403bc3",
            "decompiledFuncCode": "int sub_403b6f() { crash_skku;\n}"
        },
        {
            "funcName": "sub_409090",
            "funcStartAddr": "0x409090",
            "funcEndAddr": "0x4095f7",
            "decompiledFuncCode": "typedef struct struct_1 {\n    unsigned int field_0;\n    unsigned int field_4;\n    char padding_8[24];\n    unsigned long long field_20;\n    char padding_28[8];\n    unsigned int field_30;\n} struct_1;\n\ntypedef struct struct_0 {\n    unsigned int field_0;\n    char padding_4[4];\n    unsigned int field_8;\n    char padding_c[4];\n    unsigned long long field_10;\n    unsigned int field_18;\n    char padding_1c[4];\n    unsigned long long field_20;\n    unsigned int field_28;\n    unsigned int field_2c;\n    unsigned int field_30;\n} struct_0;\n\nextern unsigned int g_40dc38;\nextern unsigned int g_40dc7c;\n\nint sub_409090()\n{\n    struct_0 *|struct_1 * v0;  // [bp-0x88]\n    unsigned long v1;  // [bp-0x80]\n    unsigned long v2;  // [bp-0x78]\n    unsigned long v3;  // [bp-0x60]\n    unsigned long v4;  // [bp-0x58]\n    unsigned int|char v5;  // [bp-0x4c]\n    char v6[2];  // [bp-0x48]\n    unsigned long long v7;  // [bp-0x40]\n    struct_1 *v8;  // [bp+0x8]\n    unsigned int v9;  // [bp+0x10]\n    unsigned long v10;  // rcx\n    unsigned long v11;  // r8\n    unsigned int v12;  // r13d\n    unsigned long v13;  // rdi\n    unsigned long v14;  // rsi\n    char *v15[3];  // r12\n    char v16[2];  // rdx\n    unsigned int|unsigned long v17;  // eax\n    unsigned long long v18;  // rax\n    unsigned long long|char [2] v19;  // rdx\n    unsigned long long v20;  // rax\n    unsigned int v22;  // r9d\n    unsigned long long v23;  // rax\n    unsigned long long|unsigned int v24;  // r9d\n    unsigned long long *|char *[3] v26;  // rax\n    unsigned long long *v27;  // rdx\n    char *v29[3];  // rax\n    char v30[3];  // rcx\n    unsigned long long *v31;  // rsi\n    unsigned long long v32;  // rcx\n    char *v33;  // rdi\n    char v34[3];  // rsi\n    unsigned long long v35;  // cc_dep1\n    unsigned long long v36;  // cc_dep2\n    unsigned long v37;  // d\n    unsigned long long v38;  // cc_dep1\n    unsigned int v39;  // ecx\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rcx\n    unsigned long long|unsigned long long * v42;  // rdx\n    unsigned int v44;  // eax\n    unsigned long long v45;  // r14\n    unsigned int|unsigned long v46;  // rbp\n    unsigned long long v47;  // rax\n    char v48[3];  // r14\n    unsigned long v49;  // r13\n    char *|char [2] v50;  // r15\n    char v51[3];  // rax\n    unsigned int v52;  // ecx\n    char v53[3];  // r8\n    unsigned long long v54;  // rcx\n    unsigned long long v55;  // rcx\n    unsigned long long v56;  // rdx\n    unsigned int v57;  // eax\n    char v58[3];  // rax\n    unsigned long long v59;  // r14\n    char v60;  // r14b\n    unsigned long long v61;  // r14\n    char v62;  // r14b\n    unsigned long long v63;  // rax\n\n    v3 = v10;\n    v4 = v11;\n    v12 = v8->field_4;\n    if ((unsigned int)v13 > 0)\n    {\n        v17 = v0->field_0;\n        v46 = v13;\n        v15 = v14;\n        v50 = v16;\n        v0->field_10 = 0;\n        if (!((unsigned int)v17 != 0))\n        {\n            v0->field_0 = 1;\n            v17 = 1;\n        }\n        else if (v0->field_18 != 0)\n        {\n            v18 = v16[0];\n            v19 = v0->field_20;\n            if (((char)(v18 - 43) & 253) == 0)\n            {\n                v20 = v50[1];\n                v50 = &v50[1];\n                v49 = (unsigned int)(v20 == 58? 0 : (unsigned int)r13<8>);\n            }\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0)\n        {\n            *((unsigned long *)&v0->field_30) = v17;\n            *((unsigned long *)&v0->field_2c) = v17;\n            v0->field_20 = 0;\n            if (!(v16[0] != 45))\n            {\n                v0->field_28 = 2;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            else if (v16[0] != 43)\n            {\n                v19 = 0;\n                if (v9 == 0)\n                {\n                    v5 = v22;\n                    v23 = getenv(\"POSIXLY_CORRECT\");\n                    v24 = v5;\n                    if (v23 != 0)\n                    {\n                        v19 = v0->field_20;\n                    }\n                    else\n                    {\n                        v0->field_28 = 1;\n                        v19 = v0->field_20;\n                    }\n                }\n                if (v9 != 0 || v23 != 0)\n                {\n                    v0->field_28 = 0;\n                }\n            }\n            else\n            {\n                v0->field_28 = 0;\n                v50 = &v16[1];\n                v19 = 0;\n            }\n            v0->field_18 = 1;\n            v18 = v50[0];\n        }\n        if ((unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)\n        {\n            v49 = (unsigned int)(v18 == 58? 0 : (unsigned int)r13<8>);\n        }\n        if (v19[0] == 0 || v19 == 0 && (unsigned int)v17 == 0 || v19 == 0 && v0->field_18 == 0 || v19 == 0 && ((char)(v18 - 43) & 253) != 0 || ((char)(v18 - 43) & 253) == 0 && v8->field_20 == 0 && (unsigned int)v17 != 0 && v0->field_18 != 0)\n        {\n            v26 = (unsigned long long)v0->field_0;\n            if (v0->field_30 > v0->field_0)\n            {\n                v0->field_30 = v8->field_0;\n            }\n            if (v8->field_0 < v0->field_2c)\n            {\n                v0->field_2c = v8->field_0;\n            }\n            if (v0->field_28 == 1)\n            {\n                v27 = (unsigned long long)v0->field_30;\n                if (v0->field_2c != v0->field_30)\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v5 = v5;\n                        sub_408990();\n                        v27 = (unsigned long long)v0->field_0;\n                        v24 = v5;\n                    }\n                }\n                else\n                {\n                    if (v8->field_0 != v8->field_30)\n                    {\n                        v0->field_2c = v8->field_0;\n                        v27 = v26;\n                    }\n                }\n                if ((unsigned int)v13 > (unsigned int)v27)\n                {\n                    v29 = v27;\n                    while (true)\n                    {\n                        v30 = *((long long *)((char *)v15 + 0x8 * v29));\n                        v31 = v29;\n                        v27 = (unsigned int)v29;\n                        if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                        {\n                            v26 = (unsigned long long)v0->field_0;\n                        }\n                        if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                        {\n                            v27 = (char *)v31 + 1;\n                            v29 = (char *)v29 + 1;\n                            v0->field_0 = (unsigned int)v31 + 1;\n                            if ((unsigned int)v13 <= (unsigned int)v29)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                    if (v30[1] == 0 || *((char *)*((long long *)((char *)v15 + 0x8 * v29))) != 45)\n                    {\n                        v26 = v27;\n                    }\n                    else if (*((char *)*((long long *)((char *)v15 + 0x8 * v29))) == 45 && v30[1] != 0)\n                    {\n                        *((unsigned long long **)&v0->field_30) = v27;\n                    }\n                }\n                v26 = v27;\n                *((unsigned long long **)&v0->field_30) = v27;\n            }\n            if ((unsigned int)v13 != (unsigned int)v26)\n            {\n                v42 = v26;\n                v32 = 3;\n                v33 = \"-\";\n                v48 = *((long long *)((char *)v15 + 0x8 * v26));\n                v34 = *((long long *)((char *)v15 + 0x8 * v26));\n                while (v32 != 0)\n                {\n                    v32 -= 1;\n                    v35 = v34[0];\n                    v36 = *(v33);\n                    v33 = &v33[v37];\n                    v34 = &v34[v37];\n                    break;\n                }\n                v38 = (v35 > v36) - 0 - (v35 < v36);\n                if ((char)v38 == 0)\n                {\n                    v39 = v0->field_30;\n                    v40 = (unsigned int)v26 + 1;\n                    v0->field_0 = (unsigned int)v42;\n                    if (v42 != v39)\n                    {\n                        if ((unsigned int)v42 != v8->field_30)\n                        {\n                            sub_408990();\n                            v42 = v0->field_2c;\n                        }\n                    }\n                    else\n                    {\n                        v0->field_2c = (unsigned int)v42;\n                        v42 = v40;\n                    }\n                    v0->field_30 = v46;\n                    v0->field_0 = v46;\n                }\n                else if (v48[0] == 45)\n                {\n                    v41 = v48[1];\n                    if (v48[1] != 0 && v3 != 0)\n                    {\n                        if (!(v41 != 45))\n                        {\n                            v0->field_20 = &v48[2];\n                            v2 = \"-\";\n                            v1 = v49;\n                            v0 = v0;\n                        }\n                        else if (v24 != 0)\n                        {\n                            if (v48[2] == 0)\n                            {\n                                v5 = v24;\n                                v47 = strchr(v50, v41);\n                            }\n                        }\n                    }\n                }\n            }\n            else\n            {\n                v46 = v0->field_30;\n                v42 = v0->field_2c;\n            }\n        }\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 == 0 || (unsigned int)v13 == (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0)) && v42 != v46)\n    {\n        *((unsigned long long *)&v0->field_0) = v42;\n    }\n    if (((unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] == 45 && v48[1] == 0 || (unsigned int)v13 != (unsigned int)v26 && (unsigned int)v13 > 0 && (((char)(v18 - 43) & 253) == 0 || v19 == 0 || v19[0] == 0) && (v19 == 0 || v19[0] == 0 || (unsigned int)v17 != 0) && (v19 == 0 || v19[0] == 0 || v0->field_18 != 0) && (v8->field_20 == 0 || v19[0] == 0 || (unsigned int)v17 == 0 || v0->field_18 == 0 || ((char)(v18 - 43) & 253) != 0) && (char)v38 != 0 && v48[0] != 45) && v0->field_28 != 0)\n    {\n        v44 = (unsigned int)v26 + 1;\n        v0->field_10 = v48;\n        v45 = 1;\n        v0->field_0 = v44;\n    }\n    if (...)\n    {\n        v45 = -18446744069414584321;\n    }\n    if (...)\n    {\n        v0->field_20 = &v48[1];\n        v2 = \"-\";\n        v1 = v49;\n        v0 = v8;\n        v45 = (unsigned int)sub_408a70();\n        if ((unsigned int)v45 == -1)\n        {\n            v48 = v15[(long long)(int)v0->field_0];\n        }\n    }\n    if (...)\n    {\n        v19 = &v48[1];\n    }\n    if (...)\n    {\n        *((char *[2])&v6[0]) = v19;\n        v0->field_20 = &v19[1];\n        v45 = v19[0];\n        v7 = &v19[1];\n        v5 = v19[0];\n        v51 = strchr(v50, v19[0]);\n        v52 = v5;\n        v53 = v7;\n        if (v6[1] == 0)\n        {\n            v0->field_0 = v0->field_0 + 1;\n        }\n        v54 = (unsigned long long)v52 - 58;\n        if (v54 > 1 && v51 != 0)\n        {\n            v55 = v51[1];\n            if (v51[0] == 87 && v3 != 0 && v55 == 59 && v6[1] == 0)\n            {\n                if (v0->field_0 != (unsigned int)v46)\n                {\n                    v53 = v15[(long long)(int)v8->field_0];\n                }\n                else\n                {\n                    if ((unsigned int)v49 != 0)\n                    {\n                        dcgettext(0x0, 0x40dc38, 0x5);\n                        __fprintf_chk();\n                    }\n                    v0->field_8 = v45;\n                    v59 = 0;\n                    v60 = *(v50) != 58;\n                    v45 = r14<8> * 5 + 58;\n                }\n            }\n        }\n    }\n    if (...)\n    {\n        if ((unsigned int)v49 != 0)\n        {\n            dcgettext(0x0, 0x40dc7c, 0x5);\n            __fprintf_chk();\n        }\n        v0->field_8 = v45;\n        v45 = 63;\n    }\n    if (...)\n    {\n        v56 = v6[1];\n        if (v51[2] != 58)\n        {\n            if (!(v56 == 0))\n            {\n                v57 = v8->field_0 + 1;\n                v0->field_10 = v7;\n                v0->field_0 = v57;\n            }\n            else if ((unsigned int)v46 != v8->field_0)\n            {\n                v58 = v15[(long long)(int)v8->field_0];\n                v0->field_0 = (int)v8->field_0 + 1;\n                v0->field_10 = v58;\n            }\n            else\n            {\n                if ((unsigned int)v49 != 0)\n                {\n                    dcgettext(0x0, 0x40dc38, 0x5);\n                    __fprintf_chk();\n                }\n                v0->field_8 = v45;\n                v61 = 0;\n                v62 = *(v50) != 58;\n                v45 = r14<8> * 5 + 58;\n            }\n        }\n        else\n        {\n            if (v56 != 0)\n            {\n                v0->field_10 = v7;\n                v0->field_0 = v0->field_0 + 1;\n            }\n            else\n            {\n                v0->field_10 = 0;\n            }\n        }\n        v0->field_20 = 0;\n    }\n    if (...)\n    {\n        v0->field_20 = v53;\n        v0->field_10 = 0;\n        v2 = \"-W\";\n        v1 = v49;\n        v0 = v0;\n    }\n    if (...)\n    {\n        v45 = (unsigned int)sub_408a70();\n    }\n    v63 = v45;\n    return v63;\n}\n"
        },
        {
            "funcName": "sub_4073d0",
            "funcStartAddr": "0x4073d0",
            "funcEndAddr": "0x4073dd",
            "decompiledFuncCode": "int sub_4073d0()\n{\n}\n"
        },
        {
            "funcName": "sub_405b10",
            "funcStartAddr": "0x405b10",
            "funcEndAddr": "0x406c48",
            "decompiledFuncCode": "int sub_405b10()\n{\n    unsigned long long v0;  // [bp-0x1e8]\n    void tmp_38;  // tmp #38\n    unsigned long long|unsigned int * v1;  // [bp-0xe8]\n    unsigned long long v2;  // [bp-0xe0]\n    unsigned long long v3;  // [bp-0xd8]\n    unsigned long long|char|unsigned long v4;  // [bp-0xc0]\n    unsigned long long|char|unsigned long v5;  // [bp-0xb8]\n    char v6;  // [bp-0xa9]\n    unsigned long v7;  // [bp-0xa8]\n    unsigned long long v8;  // [bp-0xa0]\n    unsigned long long|char v9;  // [bp-0x98]\n    unsigned long long|unsigned int|unsigned long v10;  // [bp-0x90]\n    unsigned long long|unsigned int v11;  // [bp-0x88]\n    unsigned long long|unsigned int v12;  // [bp-0x80]\n    unsigned long long v13;  // [bp-0x78]\n    unsigned long long v14;  // [bp-0x70]\n    unsigned long v15;  // [bp-0x68]\n    unsigned int v16;  // [bp-0x60]\n    char v17;  // [bp-0x5c]\n    char v18;  // [bp-0x5b]\n    unsigned long long v19;  // [bp-0x5a]\n    char v20;  // [bp-0x59]\n    unsigned long long v21;  // [bp-0x58]\n    unsigned long long v22;  // [bp-0x50]\n    unsigned long long v23;  // [bp-0x40]\n    unsigned int *v24;  // [bp+0x8]\n    unsigned long long v25;  // [bp+0x10]\n    unsigned long long v26;  // [bp+0x18]\n    unsigned long long v27;  // rdi\n    unsigned long long v28;  // r15\n    unsigned long v29;  // r8\n    unsigned long long v30;  // rcx\n    unsigned long v31;  // r9\n    unsigned long long|unsigned long v32;  // r10\n    unsigned long long v33;  // rbp\n    unsigned long long v34;  // r13\n    unsigned long long v35;  // r13\n    unsigned long long v36;  // r8\n    unsigned long long v37;  // r9\n    unsigned long long|unsigned long v38;  // r11\n    unsigned long long|unsigned long v39;  // rbp\n    unsigned long long v40;  // rax\n    unsigned long long v41;  // rax\n    char v42;  // al\n    unsigned long v43;  // rdx\n    unsigned long long v44;  // rcx\n    unsigned long long|unsigned short|unsigned long v45;  // rax\n    unsigned long long v46;  // rcx\n    unsigned long long v47;  // r13\n    unsigned long long v48;  // r13\n    unsigned long long v49;  // r13\n    char v50;  // r13b\n    unsigned long long v51;  // r13\n    unsigned long long v52;  // rdx\n    unsigned long long v53;  // rbx\n    unsigned long long v54;  // r13\n    unsigned long long v55;  // r15\n    unsigned long long v56;  // rbp\n    unsigned long long v57;  // r14\n    char *v58;  // rax\n    unsigned long long v59;  // rcx\n    unsigned long long v61;  // r13\n    unsigned long v62;  // r13\n    unsigned long long v63;  // rcx\n    char v64;  // al\n    char v65;  // al\n    unsigned int v66;  // eax\n    char v67;  // al\n    unsigned int v69;  // eax\n    char v70;  // al\n    unsigned long v71;  // rdx\n    unsigned long long v72;  // rax\n    char v73;  // al\n    unsigned long long v74;  // rdx\n    unsigned long long v75;  // rbx\n    unsigned long long|unsigned int|unsigned long v76;  // rsi\n    unsigned long long|unsigned int|char|unsigned long v77;  // r13\n    unsigned long long v78;  // r14\n    unsigned long long|unsigned long v79;  // r12\n    unsigned int v80;  // r13d\n    unsigned long long v81;  // r11\n    char v82;  // dl\n    char|unsigned long v83;  // rax\n    unsigned long long v84;  // cc_dep1\n    char|unsigned long v85;  // dl\n    unsigned long long v86;  // rax\n    unsigned long long v87;  // rax\n    unsigned long long|char|unsigned long v88;  // rdx\n    unsigned long long v89;  // rdx\n    unsigned long long v90;  // rax\n    unsigned long long v91;  // rax\n\n    v28 = v27;\n    v78 = v76;\n    v77 = v29;\n    v7 = v88;\n    v4 = v30;\n    v16 = v31;\n    v15 = __ctype_get_mb_cur_max();\n    v17 = ((unsigned int)v31 & 2) != 0;\n    switch ((unsigned int)v29)\n    {\n    case 0:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 0;\n        v8 = 0;\n        v13 = 0;\n    case 1:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 0;\n        v8 = 1;\n        v13 = \"'\";\n    case 2:\n        if (((char)v31 & 2) == 0)\n        {\n            v4 = 0;\n            if (v76 == 0)\n            {\n                v6 = 1;\n                v32 = 0;\n                v75 = 1;\n                v77 = 2;\n                v14 = 0;\n                v18 = 0;\n                v17 = 0;\n                v8 = 1;\n                v13 = \"'\";\n            }\n            else\n            {\n                v83 = 0;\n                v6 = 1;\n                v14 = 0;\n            }\n        }\n        else\n        {\n            v6 = 1;\n            v32 = 0;\n            v75 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 0;\n            v8 = 1;\n            v13 = \"'\";\n        }\n    case 3:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 2;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"'\";\n    case 4:\n        if (((char)v31 & 2) == 0)\n        {\n            v4 = 1;\n        }\n    case 5:\n        if (((char)v31 & 2) == 0)\n        {\n            if (v76 != 0)\n            {\n                *((char *)v27) = 34;\n                v32 = 0;\n                v6 = 1;\n                v18 = 0;\n                v14 = 0;\n            }\n            else\n            {\n                v14 = 0;\n                v32 = 0;\n                v6 = 1;\n                v18 = 0;\n            }\n            v17 = 0;\n            v75 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n        else\n        {\n            v6 = 1;\n            v32 = 0;\n            v75 = 0;\n            v18 = 0;\n            v14 = 0;\n            v17 = 1;\n            v4 = 1;\n            v8 = 1;\n            v13 = \"\\\"\";\n        }\n    case 6:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v77 = 5;\n        v18 = 0;\n        v14 = 0;\n        v17 = 1;\n        v4 = 1;\n        v8 = 1;\n        v13 = \"\\\"\";\n    case 7:\n        v6 = 1;\n        v32 = 0;\n        v75 = 0;\n        v18 = 0;\n        v14 = 0;\n        v17 = 0;\n        v4 = 1;\n        v8 = 0;\n        v13 = 0;\n    case 8: case 9: case 10:\n        if (v29 != 10)\n        {\n            v4 = v4;\n            v25 = (unsigned int)sub_405a10();\n            v26 = (unsigned int)sub_405a10();\n        }\n        v75 = 0;\n        if (((char)v31 & 2) == 0)\n        {\n            v77 = (char)*((char *)v25);\n            if (*((char *)v25) != 0)\n            {\n                do\n                {\n                    if (v76 > v75)\n                    {\n                        *((unsigned long long *)(v27 + v75)) = v77;\n                    }\n                    v75 += 1;\n                    v77 = (char)*((char *)(v25 + v75));\n                }\n                while ((char)v77 != 0);\n            }\n        }\n        v5 = v81;\n        v6 = 1;\n        v8 = strlen(v26);\n        v18 = 0;\n        v13 = v26;\n        v14 = 0;\n        v4 = 1;\n    default:\n        abort(); /* do not return */\n    }\n    v81 = v4;\n    while (true)\n    {\n        v37 = v81;\n        v79 = 0;\n        v38 = v77;\n        while (true)\n        {\n            v77 = v37 != v79;\n            if (v37 == -1)\n            {\n                v77 = *((char *)(v7 + v79)) != 0;\n            }\n            if (v77 != 0)\n            {\n                v36 = v7 + v79;\n                v5 = (unsigned int)v38 != 2 & v4;\n                if (((unsigned int)v38 != 2 & v4) != 0)\n                {\n                    v77 = v8;\n                    if (v8 != 0)\n                    {\n                        v33 = v79 + v77;\n                        if (v37 == -1 && v77 > 1)\n                        {\n                            v11 = v38;\n                            v10 = v32;\n                            v9 = v36;\n                            v37 = strlen(v7);\n                        }\n                        if (v33 <= v37)\n                        {\n                            v12 = v38;\n                            v11 = v37;\n                            v10 = v32;\n                            v9 = v36;\n                            v77 = memcmp(v36, v13, v8);\n                            v36 = v9;\n                            v32 = (char)v10;\n                            v37 = v11;\n                            v38 = v12;\n                            if (v17 == 0 && v77 == 0)\n                            {\n                                v39 = (char)*((char *)v36);\n                                switch (*((char *)v36))\n                                {\n                                case 0:\n                                    v88 = (unsigned int)v38 == 2;\n                                    v77 = (unsigned int)(0 ^ 1);\n                                    v77 = (char)(0 ^ 1) & (unsigned int)v38 == 2;\n                                    if (((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) != 0)\n                                    {\n                                        if (v76 > v75)\n                                        {\n                                            *((char *)(v27 + v75)) = 39;\n                                        }\n                                        if (v76 > v75 + 1)\n                                        {\n                                            *((char *)(v27 + v75 + 1)) = 36;\n                                        }\n                                        if (v76 > v75 + 2)\n                                        {\n                                            *((char *)(v27 + v75 + 2)) = 39;\n                                        }\n                                        v46 = v75 + 3;\n                                        v75 += 4;\n                                        v32 = rax<8>;\n                                        v77 = 0;\n                                        v39 = 48;\n                                    }\n                                    else\n                                    {\n                                        v46 = v75;\n                                        v77 = 0;\n                                        v75 = v46 + 1;\n                                        v77 = v77;\n                                        v39 = 48;\n                                        v77 = 0;\n                                        v39 = 48;\n                                        if (1 < v37)\n                                        {\n                                            v9 = *((char *)(v7 + 0 + 1));\n                                            if (((unsigned int)(char)*((char *)(v7 + 0 + 1)) - 48 & 255) <= 9)\n                                            {\n                                                if (v76 > v75)\n                                                {\n                                                    *((char *)(v27 + v75)) = 48;\n                                                }\n                                                if (v76 > v46 + 2)\n                                                {\n                                                    *((char *)(v27 + v46 + 2)) = 48;\n                                                }\n                                                v75 = v46 + 3;\n                                                v39 = 48;\n                                            }\n                                        }\n                                    }\n                                    if ((v76 > v75 || ((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) != 0) && (((char)((unsigned int)0 ^ 1) & (unsigned int)v38 == 2) == 0 || v76 > v75 + 3))\n                                    {\n                                        *((char *)(v27 + v46)) = 92;\n                                        v32 = v77;\n                                    }\n                                case 7:\n                                    v39 = 97;\n                                case 8:\n                                    v88 = 0;\n                                    v77 = 0;\n                                    v39 = 98;\n                                case 13:\n                                    v39 = 13;\n                                    v44 = 114;\n                                    v88 = (unsigned int)v38 == 2;\n                                case 32:\n                                    v40 = v5;\n                                case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                                    v88 = 0;\n                                case 35: case 126:\n                                    v41 = v5;\n                                case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                                    v40 = v5;\n                                case 92:\n                                    v43 = v4;\n                                    v39 = 92;\n                                    v44 = 92;\n                                    v88 = v4 & v17 & v8 != 0;\n                                    if ((v4 & v17 & v8 != 0) != 0)\n                                    {\n                                        v79 = 1;\n                                        v45 = 0;\n                                        v77 = 0;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (v8 == 0 || v33 > v37 || v77 != 0)\n                    {\n                        v39 = (char)*((char *)v36);\n                        switch (*((char *)v36))\n                        {\n                        case 0:\n                            if (v17 == 0)\n                            {\n                                v5 = 0;\n                            }\n                            else\n                            {\n                                v4 = (unsigned int)v38 == 2;\n                            }\n                        case 7:\n                            v39 = 97;\n                            break;\n                            if (v17 == 0)\n                            {\n                                v77 = 0;\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 92;\n                                }\n                                v75 += 1;\n                                v79 += 1;\n                            }\n                            else\n                            {\n                                v86 = 0;\n                                *((unsigned long long *)&v4) = v4 & v86;\n                            }\n                        case 8:\n                            v39 = 98;\n                        case 9:\n                            v39 = 116;\n                        case 10:\n                            v39 = 110;\n                            v88 = 0;\n                            v77 = 0;\n                        case 11:\n                            v39 = 118;\n                            break;\n                        case 12:\n                            v39 = 102;\n                            break;\n                        case 13:\n                            v5 = 0;\n                        case 32:\n                            v40 = 0;\n                            v39 = 32;\n                            v47 = v5;\n                            v5 = v40;\n                            v77 = 0;\n                        case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                            v5 = 0;\n                        case 35: case 126:\n                            v41 = 0;\n                            v48 = v5;\n                            v88 = 0;\n                            v5 = v41;\n                            v77 = ((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1;\n                            v77 = (char)(((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1) | v17;\n                            if (v17 != 0 || (char)(((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1) != 0)\n                            {\n                                v77 = 0;\n                                v71 = (unsigned int)((unsigned long long)v24[v39 % 32] >> ((char)v39 & 31)) & 1;\n                                v88 = (unsigned int)v38 == 2;\n                            }\n                            if (v17 == 0)\n                            {\n                                v88 = (unsigned int)v38 == 2;\n                                v79 += 1;\n                                v45 = (v77 ^ 1) & (unsigned int)v32;\n                                if (v45 != 0)\n                                {\n                                    if (v78 > v75)\n                                    {\n                                        *((char *)(v28 + v75)) = 39;\n                                    }\n                                    if (v78 > v75 + 1)\n                                    {\n                                        *((char *)(v28 + v75 + 1)) = 39;\n                                    }\n                                    v75 += 2;\n                                    v32 = 0;\n                                }\n                                v72 = (unsigned int)v32 ^ 1;\n                                v73 = (char)((unsigned int)v32 ^ 1) & v88;\n                                if (((char)((unsigned int)v32 ^ 1) & v88) != 0)\n                                {\n                                    if (v78 > v75)\n                                    {\n                                        *((char *)(v28 + v75)) = 39;\n                                    }\n                                    if (v75 + 1 < v78)\n                                    {\n                                        *((char *)(v28 + v75 + 1)) = 36;\n                                    }\n                                    v74 = v75 + 2;\n                                    if (v75 + 2 < v78)\n                                    {\n                                        *((char *)(v28 + v75 + 2)) = 39;\n                                    }\n                                    v75 += 3;\n                                    v32 = rax<8>;\n                                }\n                            }\n                        case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                            v40 = 0;\n                        case 39:\n                            v5 = 0;\n                        case 63:\n                            v5 = 0;\n                        case 92:\n                            v5 = 0;\n                        case 123: case 125:\n                            v5 = 0;\n                        default:\n                            v5 = 0;\n                        }\n                    }\n                }\n                else\n                {\n                    v39 = (char)*((char *)v36);\n                    switch (*((char *)v36))\n                    {\n                    case 0:\n                        if (v4 == 0)\n                        {\n                            v5 = 0;\n                            v88 = (unsigned int)v38 == 2;\n                            v35 = 0;\n                            v39 = 0;\n                            break;\n                            v79 += 1;\n                        }\n                    case 7:\n                        v39 = 7;\n                        v44 = 97;\n                        v88 = (unsigned int)v38 == 2;\n                        if (v4 == 0)\n                        {\n                            v54 = 0;\n                            break;\n                        }\n                        else\n                        {\n                            v39 = v44;\n                            v77 = 0;\n                        }\n                    case 8:\n                        v39 = 8;\n                        v44 = 98;\n                        v88 = (unsigned int)v38 == 2;\n                    case 9:\n                        v39 = 9;\n                        v44 = 116;\n                    case 10:\n                        v39 = 10;\n                        v44 = 110;\n                        v88 = (unsigned int)v38 == 2;\n                        v5 = v17 & (unsigned int)v38 == 2;\n                    case 11:\n                        v39 = 11;\n                        v44 = 118;\n                        v88 = (unsigned int)v38 == 2;\n                    case 12:\n                        v39 = 12;\n                        v44 = 102;\n                        v88 = (unsigned int)v38 == 2;\n                    case 13:\n                        v39 = 13;\n                        v44 = 114;\n                    case 32:\n                        v39 = 32;\n                        v88 = (unsigned int)v38 == 2;\n                        if (v17 != 0)\n                        {\n                            break;\n                        }\n                    case 33: case 34: case 36: case 38: case 40: case 41: case 42: case 59: case 60: case 61: case 62: case 91: case 94: case 96: case 124:\n                        v88 = (unsigned int)v38 == 2;\n                        v34 = 0;\n                    case 35: case 126:\n                        v88 = (unsigned int)v38 == 2;\n                    case 37: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 93: case 95: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122:\n                        v88 = (unsigned int)v38 == 2;\n                        break;\n                    case 39:\n                        if ((unsigned int)v38 == 2)\n                        {\n                            if (v76 != 0)\n                            {\n                                v52 = 0;\n                            }\n                            if (v76 == 0 || v14 != 0)\n                            {\n                                if (v76 > v75)\n                                {\n                                    *((char *)(v27 + v75)) = 39;\n                                }\n                                if (v76 > v75 + 1)\n                                {\n                                    *((char *)(v27 + v75 + 1)) = 92;\n                                }\n                                if (v76 > v75 + 2)\n                                {\n                                    v52 = v76;\n                                    *((char *)(v27 + v75 + 2)) = 39;\n                                    v78 = v14;\n                                }\n                                else\n                                {\n                                    v52 = v76;\n                                    v78 = v14;\n                                }\n                            }\n                            v18 = v77;\n                            v75 += 3;\n                            v77 = 0;\n                            v32 = 0;\n                            v14 = v78;\n                            v39 = 39;\n                            v78 = v52;\n                        }\n                        else\n                        {\n                            v18 = v77;\n                            v88 = 0;\n                            v39 = 39;\n                            break;\n                        }\n                    case 63:\n                        if ((unsigned int)v38 != 2)\n                        {\n                            v39 = 63;\n                            v88 = (unsigned int)v38 == 2;\n                            v51 = 0;\n                            break;\n                            v76 = v7;\n                            v39 = (char)*((char *)(v76 + 2));\n                            v76 = 0x7000a38200000000;\n                            v0 = 0x7000a38200000000;\n                            v88 = 0;\n                            v61 = 0;\n                            v39 = 63;\n                            break;\n                            if (v78 > v75)\n                            {\n                                *((char *)(v27 + v75)) = 63;\n                            }\n                            if (v78 > v75 + 1)\n                            {\n                                *((char *)(v27 + v75 + 1)) = 34;\n                            }\n                            if (v78 > v75 + 2)\n                            {\n                                *((char *)(v27 + v75 + 2)) = 34;\n                            }\n                            if (v78 > v75 + 3)\n                            {\n                                *((char *)(v27 + v75 + 3)) = 63;\n                            }\n                            v75 += 4;\n                            v88 = 0;\n                            v77 = 0;\n                            v79 = 2;\n                            v77 = v77;\n                            v77 = 0;\n                        }\n                        else\n                        {\n                            v77 = 0;\n                            v77 = 0;\n                            v39 = 63;\n                        }\n                    case 92:\n                        if ((unsigned int)v38 == 2)\n                        {\n                            v79 += 1;\n                            v45 = v32;\n                            v77 = 0;\n                            v39 = 92;\n                        }\n                    case 123: case 125:\n                        v42 = v37 != 1;\n                        if (v37 == -1)\n                        {\n                            v42 = *((char *)(v7 + 1)) != 0;\n                        }\n                        v88 = (unsigned int)v38 == 2;\n                    }\n                }\n            }\n            else\n            {\n                v80 = v38;\n                v81 = v37;\n                v82 = v80 == 2;\n                if ((v80 == 2 & v17) == 0 || v75 != 0)\n                {\n                    v83 = (unsigned int)v17 ^ 1;\n                    v84 = v82 & (char)((unsigned int)v17 ^ 1);\n                    v85 = v82 & (char)((unsigned int)v17 ^ 1);\n                    if ((char)v84 == 0)\n                    {\n                        v85 = v83;\n                    }\n                    else if (v18 != 0)\n                    {\n                        if (v6 == 0)\n                        {\n                            v83 = v78 == 0 & v14 != 0;\n                            if ((v78 == 0 & v14 != 0) == 0)\n                            {\n                                v85 = v18;\n                            }\n                        }\n                        else\n                        {\n                            v3 = v26;\n                            v2 = v25;\n                            v1 = v24;\n                            v75 = (unsigned int)sub_405b10();\n                        }\n                    }\n                }\n            }\n            if (v6 == 0 && v77 == 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && (v78 == 0 & v14 != 0) == 0 || v77 == 0 && (char)v84 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && v18 == 0 || (char)v84 == 0 && v77 == 0 && ((v80 == 2 & v17) == 0 || v75 != 0))\n            {\n                v87 = v13;\n                if (v13 != 0 && v85 != 0)\n                {\n                    v89 = (char)*((char *)v87);\n                    if (*((char *)v87) != 0)\n                    {\n                        v90 = v87 - v75;\n                        do\n                        {\n                            if (v78 > v75)\n                            {\n                                *((unsigned long long *)(v28 + v75)) = v89;\n                            }\n                            v75 += 1;\n                            v89 = (char)*((char *)(v90 + v75));\n                        }\n                        while ((char)v89 != 0);\n                    }\n                }\n                if (v78 > v75)\n                {\n                    *((char *)(v28 + v75)) = 0;\n                }\n            }\n            if (v15 == 1)\n            {\n                v11 = v38;\n                v10 = v37;\n                v9 = v32;\n                v45 = (unsigned short)*((short *)(*((long long *)(unsigned long long)__ctype_b_loc()) + v39 * 2));\n                tmp_38 = v45 & 0x4000;\n                v45 &= 0x4000;\n                v50 = (tmp_38 & 65535) != 0;\n                v88 = (tmp_38 & 65535) == 0 & v4;\n                if (v88 != 0)\n                {\n                    v88 = v4;\n                    v77 = 0;\n                }\n            }\n            else\n            {\n                v23 = 0;\n                if (v37 == -1)\n                {\n                    v11 = v38;\n                    v10 = v32;\n                    v9 = v36;\n                    v37 = strlen(v7);\n                }\n                v21 = v75;\n                v22 = v36;\n                v53 = 0;\n                v19 = v32;\n                *((unsigned long long *)&v20) = v39;\n                v11 = v28;\n                v12 = v78;\n                v9 = v37;\n                *((unsigned long *)&v10) = v38;\n                do\n                {\n                    v55 = v79 + v53;\n                    v56 = v7 + v79 + v53;\n                    v45 = sub_409760();\n                    v57 = v45;\n                    if (v45 != -2 && v45 != 0 && v45 != -1)\n                    {\n                        if (v10 == 2 && v17 != 0 && v45 != 1)\n                        {\n                            v58 = v7 + v76 + 1;\n                            v76 = v7 + v57 + v76;\n                            while (true)\n                            {\n                                v59 = (unsigned int)*(v58) - 91;\n                                if ((8589934635 & 1 << (v59 & 63)) == 0 || ((unsigned int)*(v58) - 91 & 255) > 33)\n                                {\n                                    v58 = &v58[1];\n                                    if (v76 == v58)\n                                    {\n                                        break;\n                                    }\n                                }\n                            }\n                            if ((8589934635 & 1 << (v59 & 63)) == 0 || ((unsigned int)*(v58) - 91 & 255) > 33)\n                            {\n                                v77 = (unsigned int)(iswprint() == 0? 0 : (unsigned int)r13<8>);\n                                v53 += v57;\n                                v45 = mbsinit((unsigned int)&v23);\n                            }\n                        }\n                        v77 = (unsigned int)(iswprint() == 0? 0 : (unsigned int)r13<8>);\n                        v53 += v57;\n                        v45 = mbsinit((unsigned int)&v23);\n                    }\n                    if (v45 == -1)\n                    {\n                        v27 = v53;\n                        v39 = v20;\n                        v75 = v21;\n                        v77 = 0;\n                        v32 = (char)v19;\n                        v28 = v11;\n                        v78 = v12;\n                        v37 = v9;\n                        v38 = v10;\n                        v88 = v4;\n                    }\n                    if (v45 == -2)\n                    {\n                        v37 = v9;\n                        v76 = v55;\n                        v45 = v53;\n                        v27 = v53;\n                        v32 = (char)v19;\n                        v39 = v20;\n                        v75 = v21;\n                        v28 = v11;\n                        v78 = v12;\n                        v38 = v10;\n                        if (v76 < v9 && *((char *)v56) != 0)\n                        {\n                            do\n                            {\n                                v45 += 1;\n                            }\n                            while (v45 < v9 && *((char *)(v22 + v45)) != 0);\n                            v27 = v45;\n                        }\n                        v88 = v4;\n                        v77 = 0;\n                    }\n                    if (v45 == 0 || v45 != -2 && v45 != -1 && (unsigned int)v45 != 0)\n                    {\n                        v27 = v53;\n                        v39 = v20;\n                        v75 = v21;\n                        v32 = (char)v19;\n                        v28 = v11;\n                        v88 = (unsigned int)v77 ^ 1;\n                        v78 = v12;\n                        v37 = v9;\n                        v38 = v10;\n                        v88 = (char)((unsigned int)v77 ^ 1) & v4;\n                    }\n                }\n                while (v27 <= 1);\n                if (v45 == -2 || v45 == 0 || v45 == -1 || (unsigned int)v45 != 0)\n                {\n                    v9 = v77;\n                    v76 = 0;\n                    v62 = v17;\n                    v63 = v27 + v79;\n                    v27 = v5;\n                }\n            }\n            if (false)\n            {\n                v5 = v41;\n                v49 = 0;\n                v86 = v88;\n            }\n            if (v15 != 1 || v88 != 0)\n            {\n                v9 = v77;\n                v76 = 0;\n                v62 = v17;\n                v63 = v27 + v79;\n                v27 = v5;\n                while (true)\n                {\n                    if (v88 != 0)\n                    {\n                        v64 = (unsigned int)v38 == 2;\n                        if (v62 == 0)\n                        {\n                            v76 = (unsigned int)v32 ^ 1;\n                            v65 = v4 & (char)((unsigned int)v32 ^ 1);\n                            if ((v4 & (char)((unsigned int)v32 ^ 1)) != 0)\n                            {\n                                if (v78 > v75)\n                                {\n                                    *((char *)(v28 + v75)) = 39;\n                                }\n                                if (v78 > v75 + 1)\n                                {\n                                    *((char *)(v28 + v75 + 1)) = 36;\n                                }\n                                v76 = v75 + 2;\n                                if (v78 > v75 + 2)\n                                {\n                                    *((char *)(v28 + v75 + 2)) = 39;\n                                }\n                                v75 += 3;\n                                v32 = v45;\n                            }\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            if (v78 > v75 + 1)\n                            {\n                                v66 = v39;\n                                v67 = (char)v39 % 64;\n                                *((unsigned long long *)(v28 + v75 + 1)) = (unsigned long long)(unsigned int)rax<4> + 48;\n                            }\n                            v45 = v75 + 2;\n                            if (v78 > v75 + 2)\n                            {\n                                v69 = v39;\n                                v70 = (char)v39 % 8;\n                                v45 = (unsigned int)((rax<4> & 7) + 48);\n                                *((unsigned long long *)(v28 + v75 + 2)) = v45;\n                            }\n                            v79 += 1;\n                            v75 += 3;\n                            v39 = ((unsigned int)v39 & 7) + 48;\n                            if (v79 < v63)\n                            {\n                                v76 = v88;\n                            }\n                            else\n                            {\n                                v77 = (char)v9;\n                            }\n                        }\n                        else\n                        {\n                            v4 = v64;\n                        }\n                    }\n                    else\n                    {\n                        v45 = (v76 ^ 1) & (unsigned int)v32;\n                        if (v27 != 0)\n                        {\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 92;\n                            }\n                            v75 += 1;\n                        }\n                        v79 += 1;\n                        if (v79 >= v63)\n                        {\n                            v77 = (char)v9;\n                        }\n                        else if (v45 != 0)\n                        {\n                            if (v78 > v75)\n                            {\n                                *((char *)(v28 + v75)) = 39;\n                            }\n                            v45 = v75 + 1;\n                            if (v78 > v75 + 1)\n                            {\n                                *((char *)(v28 + v75 + 1)) = 39;\n                            }\n                            v75 += 2;\n                            v27 = 0;\n                            v32 = 0;\n                        }\n                        else\n                        {\n                            v27 = 0;\n                        }\n                    }\n                    if ((v79 < v63 || v88 == 0) && (v62 == 0 || v88 == 0) && (v79 < v63 || v88 != 0))\n                    {\n                        if (v78 > v75)\n                        {\n                            *((unsigned long long *)(v28 + v75)) = v39;\n                        }\n                        v39 = (char)*((char *)(v7 + v79));\n                        v75 += 1;\n                    }\n                }\n            }\n            if ((v77 == 0 || v17 != 0) && (v75 == 0 || v17 != 0) && ((v80 == 2 & v17) != 0 || v17 != 0))\n            {\n                v3 = v26;\n                v2 = v25;\n                v1 = 0;\n                v75 = (unsigned int)sub_405b10();\n            }\n            if (v17 == 0 || v17 == 0 && (char)(((unsigned int)v4 ^ 1 | (unsigned int)v88) ^ 1) == 0 && v5 == 0 || (v15 != 1 || v88 != 0) && v75 >= v78)\n            {\n                if (v75 < v78)\n                {\n                    *((unsigned long long *)(v28 + v75)) = v39;\n                }\n                v75 += 1;\n                v6 = (v77 == 0? 0 : (unsigned int)(char)(char)(stack_base)[-169]);\n            }\n            if (v6 == 0 && v77 == 0 && (char)v84 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && (v78 == 0 & v14 != 0) == 0 || v77 == 0 && (char)v84 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) && v18 == 0 || (char)v84 == 0 && v77 == 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || v77 == 0 && (char)v84 != 0 && v6 != 0 && v18 != 0 && ((v80 == 2 & v17) == 0 || v75 != 0) || (v77 == 0 || v17 != 0) && (v75 == 0 || v17 != 0) && ((v80 == 2 & v17) != 0 || v17 != 0))\n            {\n                v91 = v75;\n                return v91;\n            }\n        }\n        *((char *)v28) = 39;\n        v77 = 2;\n        v13 = \"'\";\n        v8 = 1;\n        v17 = 0;\n        *((unsigned long *)&v18) = v83;\n    }\n}\n"
        },
        {
            "funcName": "sub_407550",
            "funcStartAddr": "0x407550",
            "funcEndAddr": "0x407562",
            "decompiledFuncCode": "int sub_407550()\n{\n}\n"
        },
        {
            "funcName": "sub_402bd0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402bf7",
            "decompiledFuncCode": "extern unsigned long long g_610388;\nextern unsigned long long g_610390;\n\nint sub_402bd0()\n{\n    unsigned long v1;  // rdi\n\n    g_610388 = v1 + 1;\n    g_610390 = (unsigned int)sub_407bb0();\n    return g_610390;\n}\n"
        },
        {
            "funcName": "sub_407210",
            "funcStartAddr": "0x407210",
            "funcEndAddr": "0x40721a",
            "decompiledFuncCode": "int sub_407210()\n{\n}\n"
        },
        {
            "funcName": "sub_409660",
            "funcStartAddr": "0x409660",
            "funcEndAddr": "0x4096b6",
            "decompiledFuncCode": "extern unsigned int g_6102f4;\nextern unsigned int g_6102f8;\nextern unsigned int g_6102fc;\nextern unsigned int g_610520;\nextern unsigned int g_610524;\nextern unsigned int g_610528;\nextern unsigned long long g_610530;\nextern unsigned long long g_610570;\n\nint sub_409660()\n{\n    unsigned int *v0;  // [bp-0x18]\n    unsigned long v1;  // [bp-0x10]\n    unsigned long v2;  // [bp+0x8]\n\n    g_610520 = g_6102fc;\n    g_610524 = g_6102f8;\n    v1 = (unsigned int)v2;\n    v0 = &g_610520;\n    g_6102fc = g_610520;\n    g_610570 = g_610530;\n    g_6102f4 = g_610528;\n    return sub_409090();\n}\n"
        },
        {
            "funcName": "sub_405290",
            "funcStartAddr": "0x405290",
            "funcEndAddr": "0x40539f",
            "decompiledFuncCode": "extern unsigned int g_40c34e;\nextern unsigned long long stderr[7];\n\nint sub_405290()\n{\n    unsigned long long v1;  // r14\n    void *v2;  // rsi\n    unsigned long long v4[2];  // rdi\n    unsigned int v5;  // rdx\n    unsigned long long v6;  // rax\n    void *v7;  // rbp\n    unsigned long long v9;  // rbx\n    char *v11;  // rax\n\n    v1 = 0;\n    v7 = v2;\n    v9 = 0;\n    fputs_unlocked((unsigned long long)dcgettext(0x0, 0x40c34e, 0x5), stderr);\n    if (*(v4) != 0)\n    {\n        while (true)\n        {\n            if (v9 != 0)\n            {\n                v6 = memcmp(v1, v7, v5);\n                if (v6 == 0)\n                {\n                    v9 += 1;\n                    v7 += v5;\n                    sub_407590();\n                    __fprintf_chk();\n                    if (v4[v9] == 0)\n                    {\n                        break;\n                    }\n                }\n            }\n            if (v9 == 0 || v6 != 0)\n            {\n                v9 += 1;\n                v1 = v7;\n                v7 += v5;\n                sub_407590();\n                __fprintf_chk();\n                if (v4[v9] == 0)\n                {\n                    break;\n                }\n            }\n        }\n    }\n    v11 = stderr[5];\n    if (stderr[5] < stderr[6])\n    {\n        stderr[5] = stderr[5] + 1;\n        *(v11) = 10;\n        return v11;\n    }\n}\n"
        },
        {
            "funcName": "sub_407590",
            "funcStartAddr": "0x407590",
            "funcEndAddr": "0x4075a6",
            "decompiledFuncCode": "int sub_407590()\n{\n}\n"
        },
        {
            "funcName": "sub_407a10",
            "funcStartAddr": "0x407a10",
            "funcEndAddr": "0x407ac8",
            "decompiledFuncCode": "int sub_407a10()\n{\n    unsigned int v0;  // [bp-0xa0]\n    void tmp_12;  // tmp #12\n    void tmp_8;  // tmp #8\n    unsigned long v1;  // [bp-0x98]\n    unsigned long long v2;  // [bp-0x90]\n    unsigned long v3;  // [bp-0x88]\n    unsigned long long v4;  // [bp-0x18]\n    unsigned long v5;  // [bp-0x10]\n    unsigned long long v6;  // [bp+0x8]\n    char v7;  // [bp+0x10]\n    unsigned long long v8;  // r11\n    unsigned long long v9;  // r8\n    unsigned long v10;  // r9\n    unsigned long long v11;  // rax\n    unsigned long long v12;  // rax\n    unsigned long long v13;  // r8\n    unsigned long long|unsigned long long * v14;  // r10\n    unsigned long long v15;  // r9\n\n    v8 = 0;\n    v4 = v9;\n    v14 = &v6;\n    v13 = 32;\n    v1 = &v6;\n    v5 = v10;\n    v15 = 0;\n    v0 = 32;\n    v2 = stack_base + -56;\n    while (true)\n    {\n        if ((unsigned int)v13 <= 47)\n        {\n            tmp_12 = v13;\n            v13 = (unsigned int)v13 + 8;\n            v8 = 1;\n            v11 = v4;\n            v3 = v4;\n        }\n        else\n        {\n            tmp_8 = v14;\n            v14 = &v7;\n            v12 = v6;\n            v3 = v6;\n        }\n        if ((unsigned int)v13 <= 47 && v11 != 0 || v12 != 0 && (unsigned int)v13 > 47)\n        {\n            v15 += 1;\n        }\n        if (v8 != 0)\n        {\n            v0 = v13;\n        }\n        return sub_4075b0();\n    }\n}\n"
        },
        {
            "funcName": "sub_407d00",
            "funcStartAddr": "0x407d00",
            "funcEndAddr": "0x407d17",
            "decompiledFuncCode": "int sub_407d00()\n{\n    unsigned long v0;  // [bp-0x8]\n    unsigned long v2;  // rbx\n\n    v0 = v2;\n    sub_407b50();\n}\n"
        },
        {
            "funcName": "sub_405490",
            "funcStartAddr": "0x405490",
            "funcEndAddr": "0x40552e",
            "decompiledFuncCode": "extern unsigned int g_40c370;\nextern unsigned int g_610290;\nextern char g_6103c8;\nextern unsigned long long g_6103d0;\n\nint sub_405490()\n{\n    unsigned long long v1;  // rax\n    unsigned int *v2;  // rbx\n    unsigned long long v3;  // rax\n    unsigned long long v4;  // rbp\n\n    v1 = sub_4097e0();\n    if (v1 != 0)\n    {\n        v2 = __errno_location();\n        if (g_6103c8 == 0 || *(v2) != 32)\n        {\n            v4 = dcgettext(0x0, 0x40c370, 0x5);\n            if (g_6103d0 != 0)\n            {\n                sub_4073e0();\n                error(0x0, *(v2), \"%s: %s\");\n            }\n        }\n    }\n    if (v1 == 0 || *(v2) == 32 && g_6103c8 != 0)\n    {\n        v3 = sub_4097e0();\n    }\n    if ((unsigned int)v3 == 0 && (v1 == 0 || *(v2) == 32) && (v1 == 0 || g_6103c8 != 0))\n    {\n        return v3;\n    }\n    while (true)\n    {\n        _exit(g_610290);\n        error(0x0, *(v2), \"%s\");\n    }\n}\n"
        }
    ],
    "isStripped": "True",
    "decompilerName": "Angr",
    "compilerName": "gcc",
    "optLevel": "-O",
    "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf"
}