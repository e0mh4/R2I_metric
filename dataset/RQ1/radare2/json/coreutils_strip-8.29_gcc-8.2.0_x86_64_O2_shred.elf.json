{
    "binaryInfo": {
        "isStripped": true,
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf"
    },
    "buildInfo": {
        "decompilerName": "radare2",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "optLevel": "O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x4020a0",
            "funcEndAddr": "0x402920",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4020a0 */\n#include <stdint.h>\n \nint32_t main (int32_t argc, char ** argv) {\n    int64_t var_7h;\n    uint32_t var_8h;\n    void * var_10h;\n    int64_t var_14h;\n    void * var_18h;\n    uint32_t var_20h;\n    void * s1;\n    void * ptr;\n    int64_t var_38h;\n    void * var_40h;\n    int64_t var_48h;\n    uint32_t var_50h;\n    int64_t var_58h;\n    int64_t var_60h;\n    uint32_t var_68h;\n    uint32_t var_6ch;\n    int64_t var_6dh;\n    int64_t var_6eh;\n    rdi = argc;\n    rsi = argv;\n    xmm0 = 0;\n    r14 = 0x7fffffffffffffff;\n    r12d = 0;\n    rbx = rsi;\n    *((rsp + 0x50)) = xmm0;\n    *((rsp + 0x60)) = xmm0;\n    fcn_004051c0 (*(rsi));\n    setlocale (6, 0x40cccf);\n    bindtextdomain (0x40a3d8, \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain (0x40a3d8, rsi);\n    edi = 0x4042c0;\n    fcn_0040a210 ();\n    *((rsp + 0x58)) = 3;\n    *((rsp + 0x60)) = 0xffffffffffffffff;\n    do {\nlabel_0:\n        r8d = 0;\n        ecx = 0x40b420;\n        edx = \"fn:s:uvxz\";\n        rsi = rbx;\n        edi = ebp;\n        eax = fcn_004099c0 ();\n        if (eax == 0xffffffff) {\n            goto label_12;\n        }\n        if (eax == 0x73) {\n            goto label_13;\n        }\n        if (eax <= 0x73) {\n            goto label_14;\n        }\n        if (eax == 0x78) {\n            goto label_15;\n        }\n        if (eax > 0x78) {\n            goto label_16;\n        }\n        if (eax != 0x75) {\n            goto label_17;\n        }\n        rsi = imp.__libc_start_main;\n        if (rsi == 0) {\n            goto label_18;\n        }\n        fcn_004041e0 (\"--remove\", rsi, 0x40b5a0, 0x40b580, 4, *(0x0060f2d8));\n        eax = *((rax*4 + 0x40b580));\n        *((rsp + 0x68)) = eax;\n    } while (1);\nlabel_14:\n    if (eax == 0xffffff7e) {\n        goto label_19;\n    }\n    if (eax > 0xffffff7e) {\n        if (eax == 0x66) {\n            *((rsp + 0x50)) = 1;\n            goto label_0;\nlabel_17:\n            if (eax != 0x76) {\n                goto label_20;\n            }\n            *((rsp + 0x6c)) = 1;\n            goto label_0;\nlabel_16:\n            if (eax != 0x7a) {\n                goto label_21;\n            }\n            *((rsp + 0x6e)) = 1;\n            goto label_0;\n        }\n        if (eax != 0x6e) {\n            goto label_20;\n        }\n        edx = 5;\n        rax = dcgettext (0, \"invalid number of passes\");\n        r9d = 0;\n        rdx = 0x3fffffffffffffff;\n        rax = fcn_004085a0 (*(0x0060f540), 0, rdx, 0x40cccf, rax);\n        *((rsp + 0x58)) = rax;\n        goto label_0;\n    }\n    if (eax != 0xffffff7d) {\n        goto label_20;\n    }\n    r9d = 0;\n    r8d = \"Colin Plumb\";\n    eax = 0;\n    rcx = *(str.8.29);\n    fcn_00408100 (*(obj.stdout), \"shred\", \"GNU coreutils\");\n    eax = exit (0);\nlabel_21:\n    if (eax != 0x80) {\n        goto label_20;\n    }\n    r13 = imp.__libc_start_main;\n    if (r12 != 0) {\n        eax = strcmp (r12, r13);\n        if (eax != 0) {\n            goto label_22;\n        }\n    }\n    r12 = r13;\n    goto label_0;\nlabel_13:\n    edx = 5;\n    rax = dcgettext (0, \"invalid file size\");\n    rax = fcn_004084d0 (*(0x0060f540), 0, 0, r14, \"cbBkKMGTPEZY0\", rax);\n    *((rsp + 0x70)) = rax;\n    goto label_0;\nlabel_15:\n    *((rsp + 0x6d)) = 1;\n    goto label_0;\nlabel_18:\n    *((rsp + 0x68)) = 3;\n    goto label_0;\nlabel_12:\n    r14 = *(0x0060f35c);\n    r13d = eax;\n    ebp -= r14d;\n    if (ebp == 0) {\n        goto label_23;\n    }\n    rsi |= 0xffffffffffffffff;\n    rdi = r12;\n    rax = fcn_00406e30 ();\n    *(0x0060f398) = rax;\n    if (rax == 0) {\n        goto label_24;\n    }\n    edi = 0x402a00;\n    fcn_0040a210 ();\n    if (ebp <= 0) {\n        goto label_25;\n    }\n    eax = rbp - 1;\n    r15 = rbx + r14*8;\n    *((rsp + 7)) = 1;\n    rax += r14;\n    *((rsp + 0x14)) = r13d;\n    rax = rbx + rax*8 + 8;\n    *((rsp + 8)) = rax;\n    while (al == 0) {\n        eax = fcn_00408a90 (1, 3, rdx, rcx, r8);\n        if (eax < 0) {\n            goto label_26;\n        }\n        if ((ah & 4) != 0) {\n            goto label_27;\n        }\n        al = fcn_004033d0 (1, rbp, rbx, rsp + 0x50);\nlabel_2:\nlabel_1:\n        r15 += 8;\n        free (rbp);\n        if (*((rsp + 8)) == r15) {\n            goto label_28;\n        }\n        rdx = *(r15);\n        rax = fcn_00406c60 (0, 3);\n        rax = fcn_00408470 (rax);\n        r12 = *(r15);\n        ecx = 2;\n        edi = 0x40ccb2;\n        rbx = imp.__libc_start_main;\n        rsi = r12;\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        al = (*((rsp + 8)) > r15) ? 1 : 0;\n    }\n    eax = 0;\n    eax = fcn_004044d0 (r12, 0x101, rdx, rcx);\n    r14d = eax;\n    if (eax < 0) {\n        goto label_29;\n    }\nlabel_5:\n    eax = fcn_004033d0 (r14d, rbp, rbx, rsp + 0x50);\n    r13d = eax;\n    eax = close (r14d);\n    if (eax != 0) {\n        goto label_30;\n    }\n    if (r13b == 0) {\n        goto label_3;\n    }\n    if (*((rsp + 0x68)) != 0) {\n        goto label_31;\n    }\n    do {\nlabel_3:\n        goto label_1;\nlabel_29:\n        rax = errno_location ();\n        r13 = rax;\n        if (*(rax) == 0xd) {\n            goto label_32;\n        }\nlabel_4:\n        edx = 5;\n        rax = dcgettext (0, \"%s: failed to open for writing\");\n        rcx = rbp;\n        eax = 0;\n        r13d = 0;\n        error (0, *(r13), rax);\n    } while (1);\nlabel_27:\n    edx = 5;\n    rax = dcgettext (0, \"%s: cannot shred append-only file descriptor\");\n    rcx = rbp;\n    eax = 0;\n    eax = error (0, 0, rax);\n    eax = 0;\n    goto label_2;\nlabel_25:\n    *((rsp + 7)) = 1;\nlabel_28:\n    eax = *((rsp + 7));\n    eax ^= 1;\n    eax = (int32_t) al;\n    return;\nlabel_30:\n    edx = 5;\n    r13d = 0;\n    rax = dcgettext (0, \"%s: failed to close\");\n    rbx = rax;\n    rax = errno_location ();\n    rcx = rbp;\n    eax = 0;\n    error (0, *(rax), rbx);\n    goto label_3;\nlabel_26:\n    edx = 5;\n    rax = dcgettext (0, \"%s: fcntl failed\");\n    rbx = rax;\n    rax = errno_location ();\n    rcx = rbp;\n    eax = 0;\n    eax = error (0, *(rax), rbx);\n    eax = 0;\n    goto label_2;\nlabel_32:\n    if (*((rsp + 0x50)) == 0) {\n        goto label_4;\n    }\n    eax = chmod (r12, 0x80);\n    if (eax != 0) {\n        goto label_4;\n    }\n    eax = fcn_004044d0 (r12, 0x101, rdx, rcx);\n    r14d = eax;\n    if (eax >= 0) {\n        goto label_5;\n    }\n    goto label_4;\nlabel_31:\n    rax = fcn_00408470 (r12);\n    r14 = rax;\n    rdi = rax;\n    *((rsp + 0x30)) = rax;\n    rax = fcn_00404440 (rdi);\n    rdi = r14;\n    rbx = rax;\n    rax = fcn_00404360 ();\n    rdx = rax;\n    *((rsp + 0x40)) = rax;\n    rax = fcn_00406c60 (0, 3);\n    rax = fcn_00408470 (rax);\n    *((rsp + 0x18)) = rax;\n    eax = *((rsp + 0x14));\n    *((rsp + 0x10)) = eax;\n    if (*((rsp + 0x68)) == 3) {\n        goto label_33;\n    }\nlabel_8:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_34;\n    }\nlabel_7:\n    if (*((rsp + 0x68)) == 1) {\n        goto label_35;\n    }\n    fcn_004044a0 (rbx);\n    rdx = *((rsp + 0x30));\n    *((rsp + 0x20)) = r13b;\n    r14 = rax - 1;\n    rax = rbx;\n    *((rsp + 0x38)) = rbp;\n    rax -= rdx;\n    *((rsp + 0x48)) = r15;\n    r15 = rdx;\n    rax += r12;\n    *((rsp + 0x28)) = rax;\nlabel_9:\n    rdx = r14 + 1;\n    if (r14 == -1) {\n        goto label_36;\n    }\n    memset (rbx, 0x30, rdx);\n    *((rbx + r14 + 1)) = 0;\nlabel_6:\n    eax = fcn_00407a00 (edx, r12, 0xffffff9c, r15, 1);\n    if (eax == 0) {\n        goto label_37;\n    }\n    rax = errno_location ();\n    if (*(rax) != 0x11) {\n        goto label_38;\n    }\n    rbp = rbx + r14;\n    while (al == 0) {\n        *(rbp) = 0x30;\n        rax = rbp - 1;\n        if (rbx == rbp) {\n            goto label_38;\n        }\n        esi = *(rbp);\n        rax = strchr (\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_.\", rsi);\n        if (rax == 0) {\n            goto label_39;\n        }\n        eax = *((rax + 1));\n    }\n    *(rbp) = al;\n    goto label_6;\nlabel_36:\n    r15 = *((rsp + 0x48));\n    rbp = *((rsp + 0x38));\nlabel_35:\n    eax = unlink (r12);\n    if (eax != 0) {\n        goto label_40;\n    }\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_41;\n    }\n    do {\nlabel_11:\n        ebx = *((rsp + 0x10));\n        if (ebx >= 0) {\n            goto label_42;\n        }\nlabel_10:\n        free (*((rsp + 0x30)));\n        free (*((rsp + 0x40)));\n        free (*((rsp + 0x18)));\n        goto label_3;\nlabel_34:\n        edx = 5;\n        rax = dcgettext (0, \"%s: removing\");\n        rcx = rbp;\n        eax = 0;\n        error (0, 0, rax);\n        goto label_7;\nlabel_40:\n        edx = 5;\n        r13d = 0;\n        rax = dcgettext (0, \"%s: failed to remove\");\n        rbx = rax;\n        rax = errno_location ();\n        rcx = rbp;\n        eax = 0;\n        eax = error (0, *(rax), rbx);\n    } while (1);\nlabel_33:\n    eax = 0;\n    eax = fcn_004044d0 (*((rsp + 0x40)), 0x10900, rdx, rcx);\n    *((rsp + 0x10)) = eax;\n    goto label_8;\nlabel_37:\n    if (*((rsp + 0x10)) >= 0) {\n        eax = fcn_00402a60 (*((rsp + 0x10)), *((rsp + 0x18)));\n        eax = 0;\n        if (eax == 0) {\n            r13d = eax;\n            goto label_43;\n        }\n    }\nlabel_43:\n    if (*((rsp + 0x6c)) != 0) {\n        rcx = *((rsp + 0x38));\n        edx = 5;\n        esi = \"%s: renamed to %s\";\n        if (*((rsp + 0x20)) == 0) {\n            rcx = r12;\n        }\n        *((rsp + 0x20)) = rcx;\n        rax = dcgettext (0, rsi);\n        rcx = *((rsp + 0x20));\n        r8 = r15;\n        eax = 0;\n        error (0, 0, rax);\n        *((rsp + 0x20)) = 0;\n    }\n    memcpy (*((rsp + 0x28)), rbx, r14 + 2);\nlabel_38:\n    r14--;\n    goto label_9;\nlabel_42:\n    eax = fcn_00402a60 (ebx, *((rsp + 0x18)));\n    edi = ebx;\n    eax = 0;\n    if (eax != 0) {\n        r13d = eax;\n    }\n    eax = close (rdi);\n    if (eax == 0) {\n        goto label_10;\n    }\n    edx = 5;\n    r13d = 0;\n    rax = dcgettext (0, \"%s: failed to close\");\n    rbx = rax;\n    rax = errno_location ();\n    rcx = *((rsp + 0x18));\n    eax = 0;\n    error (0, *(rax), rbx);\n    goto label_10;\nlabel_41:\n    edx = 5;\n    rax = dcgettext (0, \"%s: removed\");\n    rcx = rbp;\n    eax = 0;\n    error (0, 0, rax);\n    goto label_11;\nlabel_23:\n    edx = 5;\n    rax = dcgettext (0, \"missing file operand\");\n    eax = 0;\n    error (0, 0, rax);\nlabel_20:\n    fcn_00403ac0 (1);\nlabel_19:\n    fcn_00403ac0 (0);\nlabel_39:\n    assert_fail (0x40a4f9, \"src/shred.c\", 0x40a, \"incname\");\nlabel_24:\n    rdx = r12;\n    rax = fcn_00406c60 (0, 3);\n    rbx = rax;\n    rax = errno_location ();\n    rcx = rbx;\n    eax = 0;\n    error (1, *(rax), 0x40b61c);\nlabel_22:\n    edx = 5;\n    rax = dcgettext (0, \"multiple random sources specified\");\n    eax = 0;\n    error (1, 0, rax);\n}\n"
        },
        {
            "funcName": "fcn_0040294b",
            "funcStartAddr": "0x40294b",
            "funcEndAddr": "0x40296a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x40294b */\n#include <stdint.h>\n \nint32_t fcn_0040294b (void) {\n    eax = __progname;\n    if (rax != obj.__progname) {\n        eax = 0;\n        if (rax == 0) {\n            goto label_0;\n        }\n        edi = __progname;\n        void (*rax)() ();\n    }\nlabel_0:\n    return eax;\n}\n"
        },
        {
            "funcName": "fcn_004029a1",
            "funcStartAddr": "0x4029a1",
            "funcEndAddr": "0x4029f8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4029a1 */\n#include <stdint.h>\n \nint64_t fcn_004029a1 (int32_t argc, func fini, func init, func main, func rtld_fini, void * stack_end, char ** ubp_av) {\n    rsi = argc;\n    r8 = fini;\n    rcx = init;\n    rdi = main;\n    r9 = rtld_fini;\n    xmm0 = stack_end;\n    rdx = ubp_av;\n    if (*(0x0060f388) != 0) {\n        goto label_0;\n    }\n    r12d = section..dtors;\n    ebx = 0x60ee48;\n    rbx -= section..dtors;\n    rbx >>= 3;\n    rbx--;\n    do {\n        rax = imp.__libc_start_main;\n        if (rax >= rbx) {\n            goto label_1;\n        }\n        rax++;\n        *(0x0060f390) = rax;\n        uint64_t (*r12 + rax*8)() ();\n    } while (1);\nlabel_1:\n    fcn_0040294b ();\n    *(0x0060f388) = 1;\n    return rax;\nlabel_0:\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004029f8",
            "funcStartAddr": "0x4029f8",
            "funcEndAddr": "0x402a8b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4029f8 */\n#include <stdint.h>\n \nint64_t fcn_004029f8 (void) {\n    do {\n        esi = __progname;\n        ecx = 2;\n        rsi -= obj.__progname;\n        rsi >>= 3;\n        rax = rsi;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        rsi = rax;\n        if (rax != 0) {\n            eax = 0;\n            if (rax == 0) {\n                goto label_0;\n            }\n            edi = __progname;\n            void (*rax)() ();\n        }\nlabel_0:\n        return rax;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00402a10",
            "funcStartAddr": "0x402a10",
            "funcEndAddr": "0x402a5c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x402a10 */\n#include <stdint.h>\n \nint32_t fcn_00402a10 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    eax = 0;\n    ebx = edi;\n    eax = fcn_00408a90 (rdi, 3, rdx, rcx, r8);\n    if (eax > 0) {\n        ecx = eax;\n        edx = eax;\n        ch |= 0x40;\n        dh &= 0xbf;\n        if (bpl != 0) {\n            edx = ecx;\n        }\n        if (edx != eax) {\n            goto label_0;\n        }\n    }\n    return eax;\nlabel_0:\n    edi = ebx;\n    esi = 4;\n    eax = 0;\n    return void (*0x408a90)() ();\n}\n"
        },
        {
            "funcName": "fcn_00402a60",
            "funcStartAddr": "0x402a60",
            "funcEndAddr": "0x402b1d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x402a60 */\n#include <stdint.h>\n \nuint64_t fcn_00402a60 (void * arg1, time_t arg2) {\n    int64_t var_15h;\n    rdi = arg1;\n    rsi = arg2;\n    r13 = rsi;\n    ebx = edi;\n    eax = fdatasync ();\n    if (eax != 0) {\n        rax = errno_location ();\n        ebp = *(rax);\n        r12 = rax;\n        eax = rbp - 0x15;\n        if (eax > 1) {\n            if (ebp == 9) {\n                goto label_0;\n            }\n            edx = 5;\n            rax = dcgettext (0, \"%s: fdatasync failed\");\n            rcx = r13;\n            eax = 0;\n            error (0, ebp, rax);\n            *(r12) = ebp;\n            eax = 0xffffffff;\n            goto label_1;\n        }\nlabel_0:\n        edi = ebx;\n        eax = fsync ();\n        if (eax == 0) {\n            goto label_2;\n        }\n        ebx = *(r12);\n        eax = rbx - 0x15;\n        if (eax > 1) {\n            if (ebx != 9) {\n                goto label_3;\n            }\n        }\n        eax = sync ();\n    }\nlabel_2:\n    eax = 0;\n    do {\nlabel_1:\n        return rax;\nlabel_3:\n        edx = 5;\n        rax = dcgettext (0, \"%s: fsync failed\");\n        rcx = r13;\n        eax = 0;\n        error (0, ebx, rax);\n        *(r12) = ebx;\n        eax = 0xffffffff;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00402b20",
            "funcStartAddr": "0x402b20",
            "funcEndAddr": "0x4033c8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x402b20 */\n#include <stdint.h>\n \nuint16_t rotate_left16 (uint16_t value, uint32_t count) {\n    const uint16_t mask = (CHAR_BIT * sizeof (value)) - 1;\n    count &= mask;\n    return (value << count) | (value >> (-count & mask));\n}\n \nvoid fcn_00402b20 (int64_t arg_870h, uint32_t arg_868h, int64_t arg1, int64_t arg2, time_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    int64_t var_8h;\n    time_t var_10h;\n    uint32_t var_1bh;\n    int64_t var_1ch;\n    uint32_t var_20h;\n    int64_t errname;\n    void * ptr;\n    int64_t var_38h;\n    int64_t var_40h;\n    char * s1;\n    time_t var_50h;\n    signed int64_t var_58h;\n    char * format;\n    int64_t var_6dh;\n    int64_t var_6fh;\n    int64_t var_70h;\n    int64_t var_300h;\n    int64_t var_590h;\n    int64_t var_594h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    r12d = edi;\n    ebx = r8d;\n    r13 = *(rcx);\n    *((rsp + 0x10)) = rdx;\n    *((rsp + 0x40)) = rcx;\n    *((rsp + 0x1c)) = r8d;\n    *((rsp + 0x38)) = r9;\n    eax = getpagesize ();\n    r14 = (int64_t) eax;\n    if (ebx <= 0) {\n        goto label_21;\n    }\n    ebx &= 0xfff;\n    eax = ebx;\n    eax <<= 0xc;\n    eax |= ebx;\n    edx = eax;\n    edx >>= 4;\n    if (ah == dl) {\n        if (dl == al) {\n            goto label_21;\n        }\n    }\n    *((rsp + 0x20)) = 0xf000;\n    r15d = 0xf000;\nlabel_3:\n    rbx = r14 - 1;\n    rax = fcn_00408240 (r15 + rbx);\n    edx = 0;\n    rbx += rax;\n    *((rsp + 0x30)) = rax;\n    rax = rbx;\n    rax = rdx:rax / r14;\n    rdx = rdx:rax % r14;\n    r14 = r13;\n    rbx -= rdx;\n    dl = (r13 > 0) ? 1 : 0;\n    al = (r13 < *((rsp + 0x20))) ? 1 : 0;\n    dl &= al;\n    *((rsp + 0x1b)) = dl;\n    if (dl == 0) {\n        goto label_22;\n    }\nlabel_9:\n    eax = *((rbp + 0x18));\n    eax &= 0xf000;\n    if (eax == 0x2000) {\n        goto label_23;\n    }\nlabel_6:\n    edx = 0;\n    esi = 0;\n    edi = r12d;\n    rax = lseek ();\n    if (rax > 0) {\n        errno_location ();\n        *(rax) = 0x16;\n        rbx = rax;\nlabel_20:\n        edx = 5;\n        rax = dcgettext (0, \"%s: cannot rewind\");\n        rcx = *((rsp + 0x10));\nlabel_15:\n        eax = 0;\n        error (0, *(rbx), rax);\nlabel_0:\nlabel_16:\n        free (*((rsp + 0x30)));\n        eax = 0xffffffff;\nlabel_17:\n        return rax;\n    }\n    if (rax != 0) {\n        goto label_24;\n    }\n    ecx = *((rsp + 0x1c));\n    if (ecx < 0) {\n        goto label_25;\n    }\nlabel_7:\n    eax = ecx;\n    ecx &= 0xfff;\n    eax <<= 0xc;\n    eax &= 0xfff000;\n    eax |= ecx;\n    edx = eax;\n    ax = rotate_left16 (ax, 8);\n    edx >>= 4;\n    *((rbx + 1)) = ax;\n    *(rbx) = dl;\n    if (r13 >= r15) {\n        goto label_26;\n    }\n    if (r13 < 0) {\n        goto label_26;\n    }\n    rbp >>= 1;\n    if (rbp <= 2) {\n        goto label_27;\n    }\nlabel_11:\n    r15d = 3;\n    do {\n        r15 += r15;\n        memcpy (rbx + r15, rbx, r15);\n    } while (r15 <= rbp);\nlabel_13:\n    ebp = *((rsp + 0x1c));\n    ebp &= 0x1000;\n    if (r15 < r14) {\n        goto label_28;\n    }\n    if (ebp != 0) {\n        goto label_29;\n    }\nlabel_10:\n    eax = *((rbx + 2));\n    edx = 7;\n    ecx = \"%02x%02x%02x\";\n    esi = 1;\n    r9d = *((rbx + 1));\n    eax = 0;\n    r8d = *(rbx);\n    rdi = rsp + 0x79;\n    sprintf_chk ();\n    if (*((rsp + 0x868)) != 0) {\n        goto label_30;\n    }\nlabel_8:\n    *((rsp + 0x48)) = 0x40cccf;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x50)) = 0;\n    *(rsp) = 0;\nlabel_2:\n    if (r13 < 0) {\n        goto label_31;\n    }\n    rax = *(rsp);\n    rbp -= rax;\n    if (rbp >= *((rsp + 0x20))) {\n        goto label_31;\n    }\n    if (rbp == 0) {\n        goto label_32;\n    }\n    if (r13 < rax) {\n        goto label_32;\n    }\n    edi = *((rsp + 0x1c));\n    if (edi < 0) {\n        goto label_33;\n    }\nlabel_5:\n    r15d = 0;\n    rax = r15;\n    r15 = r13;\n    r13 = rax;\n    while (rax > 0) {\n        r13 += rax;\nlabel_4:\n        if (rbp <= r13) {\n            goto label_34;\n        }\nlabel_1:\n        rdx -= r13;\n        rax = write (r12d, rbx + r13, rbp);\n    }\n    if (r15 < 0) {\n        goto label_35;\n    }\n    rax = errno_location ();\n    *((rsp + 0x28)) = rax;\n    r14d = *(rax);\n    if (*((rsp + 0x1b)) == 0) {\n        if (r14d == 0x16) {\n            goto label_36;\n        }\n    }\n    rax = *(rsp);\n    rax = fcn_00405170 (rax + r13, rsp + 0x590, rdx);\n    edx = 5;\n    *((rsp + 8)) = rax;\n    rax = dcgettext (0, \"%s: error writing at offset %s\");\n    r8 = *((rsp + 8));\n    rcx = *((rsp + 0x10));\n    eax = 0;\n    error (0, r14d, rax);\n    if (r14d != 5) {\n        goto label_0;\n    }\n    r9 = r13;\n    r9 |= 0x1ff;\n    if (r9 >= rbp) {\n        goto label_0;\n    }\n    rax = *(rsp);\n    r13 = r9 + 1;\n    edx = 0;\n    edi = r12d;\n    rsi = rax + r13;\n    rax = lseek ();\n    if (rax == -1) {\n        goto label_37;\n    }\n    *((rsp + 8)) = 1;\n    if (rbp > r13) {\n        goto label_1;\n    }\nlabel_34:\n    rax = r13;\n    rcx = *(rsp);\n    r13 = r15;\n    r15 = rax;\n    rax = 0x7fffffffffffffff;\n    rax -= rcx;\n    if (rax < r15) {\n        goto label_38;\n    }\n    r15 += rcx;\n    *(rsp) = r15;\n    if (*((rsp + 0x868)) == 0) {\n        goto label_2;\n    }\n    if (r13 == r15) {\n        goto label_39;\n    }\n    rax = time (0);\n    *((rsp + 0x50)) = rax;\n    if (*((rsp + 0x58)) > rax) {\n        goto label_2;\n    }\n    r8d = 1;\n    rax = fcn_004045e0 (*(rsp), rsp + 0x300, 0x1b2, 1, r8d);\n    rsi = rax;\n    eax = strcmp (*((rsp + 0x48)), rsi);\n    if (eax == 0) {\n        goto label_2;\n    }\nlabel_14:\n    if (r13 < 0) {\n        goto label_40;\n    }\n    r9d = 0x64;\n    if (r13 != 0) {\n        rax = 0x28f5c28f5c28f5c;\n        if (r15 > rax) {\n            goto label_41;\n        }\n        rax = r15 * 5;\n        edx = 0;\n        rax *= 5;\n        rax <<= 2;\n        rax = rdx:rax / r13;\n        rdx = rdx:rax % r13;\n        r9 = rax;\n    }\nlabel_19:\n    r8d = 1;\n    *((rsp + 0x28)) = r9d;\n    rax = fcn_004045e0 (r13, rsp + 0x590, 0x1b0, 1, r8d);\n    edx = 5;\n    esi = \"%s: pass %lu/%lu (%s)...%s/%s %d%%\";\n    if (r13 == r15) {\n    }\n    r14 = rax;\n    rax = dcgettext (0, rsi);\n    r9d = *((rsp + 0x28));\n    rdx = rsp + 0x81;\n    r9 = *((rsp + 0x888));\n    eax = 0;\n    r8 = *((rsp + 0x880));\n    rcx = *((rsp + 0x30));\n    error (0, 0, rax);\nlabel_18:\n    rsi = rbp;\n    rdi = rsp + 0x70;\n    edx = 0x28c;\n    strcpy_chk ();\n    rax = *((rsp + 0x50));\n    rax += 5;\n    *((rsp + 0x58)) = rax;\n    eax = fcn_00402a60 (r12d, *((rsp + 0x10)));\n    if (eax == 0) {\n        goto label_42;\n    }\n    rax = errno_location ();\n    if (*(rax) != 5) {\n        goto label_0;\n    }\n    rax = rsp + 0x70;\n    *((rsp + 8)) = 1;\n    *((rsp + 0x48)) = rax;\n    goto label_2;\nlabel_21:\n    *((rsp + 0x20)) = 0x10000;\n    r15d = 0x10002;\n    goto label_3;\nlabel_35:\n    if (rax == 0) {\n        goto label_43;\n    }\n    rax = errno_location ();\n    r14d = *(rax);\n    if (r14d == 0x1c) {\n        goto label_43;\n    }\n    if (*((rsp + 0x1b)) != 0) {\n        goto label_44;\n    }\n    if (r14d != 0x16) {\n        goto label_44;\n    }\nlabel_36:\n    fcn_00402a10 (r12d, 0, rdx, rcx);\n    *((rsp + 0x1b)) = 1;\n    goto label_4;\nlabel_31:\n    edi = *((rsp + 0x1c));\n    rbp = *((rsp + 0x20));\n    if (edi >= 0) {\n        goto label_5;\n    }\nlabel_33:\n    fcn_00407360 (*((rsp + 0x38)), rbx, rbp);\n    goto label_5;\nlabel_37:\n    edx = 5;\n    rax = dcgettext (0, \"%s: lseek failed\");\n    rcx = *((rsp + 0x10));\n    rdx = rax;\n    rax = *((rsp + 0x28));\n    eax = 0;\n    eax = error (0, *(rax), rdx);\n    goto label_0;\nlabel_23:\n    r11d = 6;\n    eax = 0;\n    rdx = rsp + 0x590;\n    *((rsp + 0x590)) = r11w;\n    *((rsp + 0x594)) = 1;\n    eax = ioctl (r12d, 0x40086d01);\n    if (eax != 0) {\n        goto label_6;\n    }\n    ecx = *((rsp + 0x1c));\n    if (ecx >= 0) {\n        goto label_7;\n    }\nlabel_25:\n    r10d = 0x6d6f;\n    *((rsp + 0x69)) = 0x646e6172;\n    *((rsp + 0x6d)) = r10w;\n    *((rsp + 0x6f)) = 0;\n    if (*((rsp + 0x868)) == 0) {\n        goto label_8;\n    }\nlabel_30:\n    edx = 5;\n    rax = dcgettext (0, \"%s: pass %lu/%lu (%s)...\");\n    rdx = rsp + 0x71;\n    r9 = *((rsp + 0x878));\n    eax = 0;\n    r8 = *((rsp + 0x870));\n    rcx = *((rsp + 0x20));\n    error (0, 0, rax);\n    rax = time (0);\n    rax += 5;\n    *((rsp + 0x68)) = rax;\n    goto label_8;\nlabel_22:\n    eax = fcn_00402a10 (r12d, 1, rdx, rcx);\n    goto label_9;\nlabel_29:\n    if (r14 == 0) {\n        goto label_10;\n    }\nlabel_12:\n    eax = 0;\n    do {\n        *((rbx + rax)) += 0x80;\n        rax += 0x200;\n    } while (rax < r14);\n    goto label_10;\nlabel_26:\n    r14 = r15;\n    rbp >>= 1;\n    goto label_11;\nlabel_28:\n    rdx -= r15;\n    memcpy (rbx + r15, rbx, r14);\n    if (ebp != 0) {\n        goto label_12;\n    }\n    goto label_10;\nlabel_44:\n    rdi += r13;\n    rax = fcn_00405170 (*(rsp), rsp + 0x590, rdx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"%s: error writing at offset %s\");\n    rcx = *((rsp + 0x10));\n    r8 = rbx;\n    eax = 0;\n    error (0, r14d, rax);\n    goto label_0;\nlabel_27:\n    r15d = 3;\n    goto label_13;\nlabel_43:\n    rax = 0x7fffffffffffffff;\n    rax -= *(rsp);\n    r15 = r13;\n    if (rax < r13) {\n        goto label_38;\n    }\n    rax = *((rsp + 0x40));\n    r15 += *(rsp);\n    r13 = r15;\n    *(rsp) = r15;\n    *(rax) = r15;\n    if (*((rsp + 0x868)) == 0) {\n        goto label_2;\n    }\nlabel_39:\n    rax = *((rsp + 0x48));\n    if (*(rax) != 0) {\n        goto label_45;\n    }\n    rax = time (0);\n    *((rsp + 0x50)) = rax;\n    if (*((rsp + 0x58)) > rax) {\n        goto label_2;\n    }\nlabel_45:\n    r8d = 1;\n    rax = fcn_004045e0 (r15, rsp + 0x300, 0x1b2, 1, r8d);\n    goto label_14;\nlabel_38:\n    edx = 5;\n    rax = dcgettext (0, \"%s: file too large\");\n    rcx = *((rsp + 0x10));\n    esi = 0;\n    rdx = rax;\n    goto label_15;\nlabel_42:\n    rax = rsp + 0x70;\n    *((rsp + 0x48)) = rax;\n    goto label_2;\nlabel_32:\n    eax = fcn_00402a60 (r12d, *((rsp + 0x10)));\n    if (eax == 0) {\n        goto label_46;\n    }\n    rax = errno_location ();\n    rdi = *((rsp + 0x30));\n    if (*(rax) != 5) {\n        goto label_16;\n    }\n    free (rdi);\n    eax = 1;\n    goto label_17;\nlabel_40:\n    edx = 5;\n    rax = dcgettext (0, \"%s: pass %lu/%lu (%s)...%s\");\n    rdx = rsp + 0x71;\n    r9 = *((rsp + 0x878));\n    eax = 0;\n    r8 = *((rsp + 0x870));\n    rcx = *((rsp + 0x20));\n    error (0, 0, rax);\n    goto label_18;\nlabel_41:\n    rax = 0xa3d70a3d70a3d70b;\n    rdx:rax = rax * r13;\n    rax = r13;\n    rax >>= 0x3f;\n    rcx = rdx + r13;\n    edx = 0;\n    rcx >>= 6;\n    rcx -= rax;\n    rax = r15;\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\n    goto label_19;\nlabel_46:\n    free (*((rsp + 0x30)));\n    eax = *((rsp + 8));\n    goto label_17;\nlabel_24:\n    rax = errno_location ();\n    rbx = rax;\n    goto label_20;\n}\n"
        },
        {
            "funcName": "fcn_004033d0",
            "funcStartAddr": "0x4033d0",
            "funcEndAddr": "0x403ab5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4033d0 */\n#include <stdint.h>\n \nuint64_t fcn_004033d0 (int64_t arg1, int64_t arg2, int64_t arg3, uint32_t arg4) {\n    int64_t var_8h;\n    uint32_t var_10h_2;\n    int64_t var_18h;\n    uint32_t var_20h_2;\n    uint32_t var_28h;\n    uint32_t var_30h_2;\n    int64_t var_38h_2;\n    int64_t var_43h;\n    int64_t var_44h;\n    int64_t var_48h_2;\n    int64_t var_58h_2;\n    int64_t var_60h;\n    int64_t var_78h;\n    uint32_t var_90h;\n    int64_t var_98h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rbx = rcx;\n    *((rsp + 0x18)) = rsi;\n    *((rsp + 8)) = rdx;\n    *((rsp + 0x28)) = 0;\n    if (*((rcx + 0x1c)) != 0) {\n        eax = *((rcx + 0x1e));\n        rax += *((rcx + 8));\n        *((rsp + 0x28)) = rax;\n    }\n    rdx = rsp + 0x60;\n    esi = ebp;\n    edi = 1;\n    eax = fxstat ();\n    if (eax != 0) {\n        goto label_18;\n    }\n    eax = *((rsp + 0x78));\n    eax &= 0xf000;\n    if (eax == 0x2000) {\n        goto label_19;\n    }\nlabel_9:\n    cl = (eax == 0xc000) ? 1 : 0;\n    dl = (eax == 0x1000) ? 1 : 0;\n    cl |= dl;\n    *((rsp + 0x43)) = cl;\n    if (cl != 0) {\n        goto label_8;\n    }\n    if (eax == 0x8000) {\n        goto label_20;\n    }\nlabel_10:\n    rdi = *((rbx + 8));\n    rax = *((rbx + 8));\n    rax >>= 0x3e;\n    al = (rax != 0) ? 1 : 0;\n    rdi <<= 2;\n    eax = (int32_t) al;\n    if (rdi < 0) {\n        goto label_21;\n    }\n    if (rax != 0) {\n        goto label_21;\n    }\n    rax = fcn_00408240 (rdi);\n    r13 = rax;\n    rax = *((rbx + 0x10));\n    *((rsp + 0x20)) = rax;\n    if (rax == -1) {\n        goto label_22;\n    }\n    rax = *((rbx + 8));\n    *((rsp + 0x30)) = rax;\n    eax = *((rsp + 0x78));\n    eax &= 0xf000;\n    if (eax == 0x8000) {\n        goto label_23;\n    }\n    *((rsp + 0x38)) = 0;\n    if (*((rsp + 0x30)) == 0) {\n        goto label_24;\n    }\nlabel_2:\n    r12 = *((rsp + 0x30));\n    r14d = 0x40b340;\n    edi = 0;\n    r9 = r13;\n    *((rsp + 0x48)) = rbx;\n    eax = 0xfffffffe;\n    rbx = r12;\n    *((rsp + 0x44)) = ebp;\n    r12 = r14;\n    r14 = rdi;\n    while (eax == 0) {\n        eax = 0xfffffffe;\n        r12d = 0x40b344;\nlabel_0:\n        eax = -eax;\n        rax = (int64_t) eax;\n        if (rax >= rbx) {\n            goto label_25;\n        }\n        r14 += rax;\n        rbx -= rax;\nlabel_1:\n        eax = *(r12);\n    }\n    r12 += 4;\n    if (eax < 0) {\n        goto label_0;\n    }\n    r15 = (int64_t) eax;\n    if (r15 > rbx) {\n        goto label_26;\n    }\n    rbp = r15*4;\n    rbx -= r15;\n    r12 += rbp;\n    rax = memcpy (r9, r12, rbp);\n    r9 = rax;\n    r9 += rbp;\n    goto label_1;\nlabel_8:\n    edx = 5;\n    rax = dcgettext (0, \"%s: invalid file type\");\n    rcx = *((rsp + 0x18));\n    eax = 0;\n    error (0, 0, rax);\n    *((rsp + 0x43)) = 0;\n    do {\nlabel_4:\n        eax = *((rsp + 0x43));\n        return rax;\nlabel_18:\n        edx = 5;\n        rax = dcgettext (0, \"%s: fstat failed\");\n        rbx = rax;\n        rax = errno_location ();\n        rcx = *((rsp + 0x18));\n        eax = 0;\n        error (0, *(rax), rbx);\n        *((rsp + 0x43)) = 0;\n    } while (1);\nlabel_23:\n    rax = *((rsp + 0x98));\n    rdi = *((rsp + 0x90));\n    rdx = 0x1fffffffffffffff;\n    rcx = rax - 1;\n    *((rsp + 0x38)) = rdi;\n    edx = 0x200;\n    rcx = *((rsp + 0x20));\n    if (rcx > rdx) {\n        rax = rdx;\n    }\n    if (rax > rcx) {\n        rax = rcx;\n    }\n    if (rdi >= rax) {\n        if (*((rsp + 0x30)) == 0) {\n            goto label_24;\n        }\n        *((rsp + 0x38)) = 0;\n        goto label_2;\nlabel_22:\n        eax = *((rsp + 0x78));\n        eax &= 0xf000;\n        if (eax != 0x8000) {\n            goto label_27;\n        }\n        rsi = *((rsp + 0x90));\n        edi = *((rbx + 0x1d));\n        rax = *((rbx + 8));\n        *((rsp + 0x20)) = rsi;\n        *((rsp + 0x10)) = dil;\n        *((rsp + 0x30)) = rax;\n        if (dil != 0) {\n            goto label_28;\n        }\n        rcx = *((rsp + 0x98));\n        rax = 0x1fffffffffffffff;\n        rdx = rcx - 1;\n        eax = 0x200;\n        if (rdx > rax) {\n            rcx = rax;\n        }\n        rax = rsi;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rcx <= rsi) {\n            goto label_29;\n        }\n        *((rsp + 0x38)) = rsi;\n        if (rsi == 0) {\n            goto label_29;\n        }\nlabel_17:\n        if (rdx == 0) {\n            goto label_30;\n        }\n        rdi = *((rsp + 0x20));\n        rcx -= rdx;\n        rax = 0x7fffffffffffffff;\n        rax -= rdi;\n        if (rax <= rcx) {\n            rcx = rax;\n        }\n        rdi += rcx;\n        *((rsp + 0x20)) = rdi;\n    }\nlabel_30:\n    if (*((rsp + 0x30)) != 0) {\n        goto label_2;\n    }\nlabel_7:\n    rax = fcn_00406e60 (*((rsp + 8)));\n    r14 = rax;\n    rax = *((rsp + 0x38));\n    if (rax == 0) {\n        goto label_31;\n    }\n    *((rsp + 0x58)) = rax;\n    rdx = *((rbx + 8));\n    r12d = 0;\n    *((rsp + 0x10)) = 1;\nlabel_3:\n    r15d = 0;\n    *((rsp + 8)) = r13;\n    r13 = rbx;\n    rbx = r15;\n    r15 = *((rsp + 0x18));\n    while (rax > rbx) {\n        r8d = 0;\n        if (rbx < rdx) {\n            rax = *((rsp + 8));\n        }\n        rbx++;\n        eax = fcn_00402b20 (ebp, rsp + 0x70, r15, rsp + 0x68, *((rax + rbx*4)), r14);\n        if (eax != 0) {\n            if (eax < 0) {\n                goto label_32;\n            }\n            *((rsp + 0x10)) = 0;\n        }\n        rdx = *((r13 + 8));\n        eax = *((r13 + 0x1e));\n        rax += rdx;\n    }\n    rbx = r13;\n    r13 = *((rsp + 8));\nlabel_12:\n    if (*((rsp + 0x20)) == 0) {\n        goto label_33;\n    }\n    rdx = *((rbx + 8));\nlabel_13:\n    rax = *((rsp + 0x20));\n    r12 = *((rsp + 0x28));\n    *((rsp + 0x20)) = 0;\n    *((rsp + 0x58)) = rax;\n    goto label_3;\nlabel_32:\n    r13 = *((rsp + 8));\nlabel_15:\n    free (*((rsp + 8)));\n    goto label_4;\nlabel_26:\n    *((rsp + 0x10)) = r14;\n    r14 = r12;\n    r12 = rbx;\n    ebp = *((rsp + 0x44));\n    rbx = *((rsp + 0x48));\n    if (r12 <= 1) {\n        goto label_34;\n    }\n    rax = r12 * 3;\n    if (r15 > rax) {\n        goto label_34;\n    }\n    *((rsp + 0x48)) = rbx;\n    rbx = r9;\n    *((rsp + 0x44)) = ebp;\n    goto label_35;\nlabel_5:\n    rbx = rcx;\n    rbp = r15 - 1;\n    do {\n        r15 = rbp;\nlabel_35:\n        r14 += 4;\n        if (r12 == r15) {\n            goto label_36;\n        }\n        rbp = r15 - 1;\n        rax = fcn_00406e70 (*((rsp + 8)), rbp);\n    } while (r12 <= rax);\nlabel_36:\n    eax = *((r14 - 4));\n    rcx = rbx + 4;\n    *(rbx) = eax;\n    r12--;\n    if (r12 != 0) {\n        goto label_5;\n    }\n    ebp = *((rsp + 0x44));\n    rbx = *((rsp + 0x48));\nlabel_11:\n    rax = *((rsp + 0x30));\n    rdi = *((rsp + 0x10));\n    *((rsp + 0x44)) = ebp;\n    r14d = 0;\n    *((rsp + 0x48)) = rbx;\n    rdx = rax;\n    r12 = rdi - 1;\n    r8 = rax - 1;\n    rbx = rax;\n    rdx -= rdi;\n    r15 = r12;\n    r12 = rdx;\n    while (r15 <= rbp) {\n        *((r13 + r12*4)) = r9d;\n        r15 += r8;\n        r12++;\n        *((r13 + r14*4)) = 0xffffffff;\n        r14++;\n        r15 -= rbp;\n        if (r14 == rbx) {\n            goto label_37;\n        }\nlabel_6:\n        r9d = *((r13 + r14*4));\n    }\n    *((rsp + 0x30)) = r8;\n    r15 -= rbp;\n    rsi -= r14;\n    *((rsp + 0x10)) = r9d;\n    rax = fcn_00406e70 (*((rsp + 8)), r12 - 1);\n    r9d = *((rsp + 0x10));\n    r8 = *((rsp + 0x30));\n    rax += r14;\n    rax = r13 + rax*4;\n    esi = *(rax);\n    *((r13 + r14*4)) = esi;\n    r14++;\n    *(rax) = r9d;\n    if (r14 != rbx) {\n        goto label_6;\n    }\nlabel_37:\n    ebp = *((rsp + 0x44));\n    rbx = *((rsp + 0x48));\n    goto label_7;\nlabel_19:\n    eax = isatty (ebp);\n    if (eax != 0) {\n        goto label_8;\n    }\n    eax = *((rsp + 0x78));\n    eax &= 0xf000;\n    goto label_9;\nlabel_20:\n    if (*((rsp + 0x90)) >= 0) {\n        goto label_10;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"%s: file has negative size\");\n    rcx = *((rsp + 0x18));\n    eax = 0;\n    error (0, 0, rax);\n    goto label_4;\nlabel_34:\n    goto label_11;\nlabel_25:\n    r12 = rbx;\n    ebp = *((rsp + 0x44));\n    rbx = *((rsp + 0x48));\n    r14 += r12;\n    *((rsp + 0x10)) = r14;\n    goto label_11;\nlabel_24:\n    rax = fcn_00406e60 (*((rsp + 8)));\n    *((rsp + 0x10)) = 1;\n    r14 = rax;\n    goto label_12;\nlabel_27:\n    esi = 0;\n    edx = 2;\n    edi = ebp;\n    rax = lseek ();\n    if (rax <= 0) {\n        goto label_38;\n    }\n    rdi = *((rbx + 8));\n    *((rsp + 0x20)) = rax;\n    *((rsp + 0x38)) = 0;\n    *((rsp + 0x30)) = rdi;\n    if (rdi != 0) {\n        goto label_2;\n    }\nlabel_14:\n    rax = fcn_00406e60 (*((rsp + 8)));\n    edx = 0;\n    *((rsp + 0x10)) = 1;\n    r14 = rax;\n    goto label_13;\nlabel_28:\n    *((rsp + 0x38)) = 0;\n    if (*((rsp + 0x30)) != 0) {\n        goto label_2;\n    }\n    rax = fcn_00406e60 (*((rsp + 8)));\n    r14 = rax;\n    goto label_12;\nlabel_38:\n    *((rsp + 0x38)) = 0;\n    rax = *((rbx + 8));\n    *((rsp + 0x30)) = rax;\n    if (rax != 0) {\n        goto label_2;\n    }\n    goto label_14;\nlabel_33:\n    eax = *((rbx + 0x18));\n    while (eax == 0) {\nlabel_16:\n        eax = *((rsp + 0x10));\n        *((rsp + 0x43)) = al;\n        goto label_15;\n        esi = 0;\n        edi = ebp;\n        eax = ftruncate ();\n    }\n    eax = *((rsp + 0x78));\n    eax &= 0xf000;\n    if (eax != 0x8000) {\n        goto label_16;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"%s: error truncating\");\n    rbx = rax;\n    rax = errno_location ();\n    rcx = *((rsp + 0x18));\n    eax = 0;\n    error (0, *(rax), rbx);\n    goto label_15;\nlabel_29:\n    *((rsp + 0x38)) = 0;\n    goto label_17;\nlabel_31:\n    *((rsp + 0x10)) = 1;\n    goto label_12;\nlabel_21:\n    return fcn_00408490 ();\n}\n"
        },
        {
            "funcName": "fcn_00403ac0",
            "funcStartAddr": "0x403ac0",
            "funcEndAddr": "0x403f0d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x403ac0 */\n#include <stdint.h>\n \nuint64_t fcn_00403ac0 (int64_t arg1) {\n    char * var_8h_2;\n    int64_t var_10h;\n    char * var_18h_2;\n    char * var_20h;\n    char * var_28h_2;\n    char * var_30h;\n    char * var_38h;\n    char * var_40h;\n    char * var_48h;\n    char * var_50h;\n    char * var_58h;\n    int64_t var_60h_2;\n    int64_t var_68h;\n    rdi = arg1;\n    edx = 5;\n    ebx = edi;\n    rbp = imp.__libc_start_main;\n    if (edi != 0) {\n        rax = dcgettext (0, \"Try '%s --help' for more information.\\n\");\n        rdi = stderr;\n        rcx = rbp;\n        esi = 1;\n        rdx = rax;\n        eax = 0;\n        fprintf_chk ();\nlabel_0:\n        exit (ebx);\n    }\n    rax = dcgettext (0, \"Usage: %s [OPTION]... FILE...\\n\");\n    rdx = rbp;\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"Overwrite the specified FILE(s) repeatedly, in order to make it harder\\nfor even very expensive hardware probing to recover the data.\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nIf FILE is -, shred standard output.\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    edx = 5;\n    rax = dcgettext (0, \"  -f, --force    change permissions to allow writing if necessary\\n  -n, --iterations=N  overwrite N times instead of the default (%d)\\n      --random-source=FILE  get random bytes from FILE\\n  -s, --size=N   shred this many bytes (suffixes like K, M, G accepted)\\n\");\n    edx = 3;\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  -u             deallocate and remove file after overwriting\\n      --remove[=HOW]  like -u but give control on HOW to delete;  See below\\n  -v, --verbose  show progress\\n  -x, --exact    do not round file sizes up to the next full block;\\n                   this is the default for non-regular files\\n  -z, --zero     add a final overwrite with zeros to hide shredding\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --help     display this help and exit\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --version  output version information and exit\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nDelete FILE(s) if --remove (-u) is specified.  The default is not to remove\\nthe files because it is common to operate on device files like /dev/hda,\\nand those files usually should not be removed.\\nThe optional HOW parameter indicates how to remove a directory entry:\\n'unlink' => use a standard unlink call.\\n'wipe' => also first obfuscate bytes in the name.\\n'wipesync' => also sync each obfuscated byte to disk.\\nThe default mode is 'wipesync', but note it can be expensive.\\n\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"CAUTION: Note that shred relies on a very important assumption:\\nthat the file system overwrites data in place.  This is the traditional\\nway to do things, but many modern file system designs do not satisfy this\\nassumption.  The following are examples of file systems on which shred is\\nnot effective, or is not guaranteed to be effective in all file system modes:\\n\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    edx = 5;\n    rbp = stdout;\n    rax = dcgettext (0, \"* log-structured or journaled file systems, such as those supplied with\\nAIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)\\n\\n* file systems that write redundant data and carry on even if some writes\\nfail, such as RAID-based file systems\\n\\n* file systems that make snapshots, such as Network Appliance's NFS server\\n\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"* file systems that cache in temporary locations, such as NFS\\nversion 3 clients\\n\\n* compressed file systems\\n\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"In the case of ext3 file systems, the above disclaimer applies\\n(and shred is thus of limited effectiveness) only in data=journal mode,\\nwhich journals file data in addition to just metadata.  In both the\\ndata=ordered (default) and data=writeback modes, shred works as usual.\\nExt3 journaling modes can be changed by adding the data=something option\\nto the mount options for a particular file system in the /etc/fstab file,\\nas documented in the mount man page (man mount).\\n\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    rbp = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"In addition, file system backups and remote mirrors may contain copies\\nof the file that cannot be removed, and that will allow a shredded file\\nto be recovered later.\\n\");\n    rsi = rbp;\n    rdi = rax;\n    fputs_unlocked ();\n    *(rsp) = 0x40a35e;\n    rax = rsp;\n    *((rsp + 8)) = \"test invocation\";\n    *((rsp + 0x10)) = 0x40a3d8;\n    *((rsp + 0x18)) = \"Multi-call invocation\";\n    *((rsp + 0x20)) = \"sha224sum\";\n    *((rsp + 0x28)) = \"sha2 utilities\";\n    *((rsp + 0x30)) = \"sha256sum\";\n    *((rsp + 0x38)) = \"sha2 utilities\";\n    *((rsp + 0x40)) = \"sha384sum\";\n    *((rsp + 0x48)) = \"sha2 utilities\";\n    *((rsp + 0x50)) = \"sha512sum\";\n    *((rsp + 0x58)) = \"sha2 utilities\";\n    *((rsp + 0x60)) = 0;\n    *((rsp + 0x68)) = 0;\n    do {\n        rax += 0x10;\n        rdi = *(rax);\n        if (rdi == 0) {\n            goto label_2;\n        }\n        esi = \"shred\";\n        ecx = 6;\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        dl = (rdi > 0) ? 1 : 0;\n    } while (dl != 0);\nlabel_2:\n    rbp = *((rax + 8));\n    edx = 5;\n    esi = \"\\n%s online help: <%s>\\n\";\n    edi = 0;\n    if (rbp == 0) {\n        goto label_3;\n    }\n    rax = dcgettext (rdi, rsi);\n    edi = 1;\n    ecx = \"https://www.gnu.org/software/coreutils/\";\n    edx = \"GNU coreutils\";\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    rax = setlocale (5, 0);\n    if (rax != 0) {\n        eax = strncmp (rax, 0x40a3e2, 3);\n        if (eax != 0) {\n            goto label_4;\n        }\n    }\nlabel_1:\n    edx = 5;\n    r12d = 0x40a37a;\n    rax = dcgettext (0, \"Full documentation at: <%s%s>\\n\");\n    ecx = \"shred\";\n    edx = \"https://www.gnu.org/software/coreutils/\";\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    ecx = 0x40cccf;\n    r12 = rcx;\n    while (1) {\n        edx = 5;\n        rax = dcgettext (0, \"or available locally via: info '(coreutils) %s%s'\\n\");\n        rcx = r12;\n        rdx = rbp;\n        edi = 1;\n        rsi = rax;\n        eax = 0;\n        printf_chk ();\n        goto label_0;\nlabel_3:\n        rax = dcgettext (rdi, rsi);\n        edi = 1;\n        ecx = \"https://www.gnu.org/software/coreutils/\";\n        edx = \"GNU coreutils\";\n        rsi = rax;\n        eax = 0;\n        printf_chk ();\n        rax = setlocale (5, 0);\n        if (rax != 0) {\n            eax = strncmp (rax, 0x40a3e2, 3);\n            if (eax != 0) {\n                goto label_5;\n            }\n        }\n        edx = 5;\n        rax = dcgettext (0, \"Full documentation at: <%s%s>\\n\");\n        ecx = \"shred\";\n        edx = \"https://www.gnu.org/software/coreutils/\";\n        edi = 1;\n        rsi = rax;\n        eax = 0;\n        r12d = 0x40a37a;\n        printf_chk ();\n    }\nlabel_5:\nlabel_4:\n    edx = 5;\n    rax = dcgettext (0, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\");\n    edx = \"shred\";\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00403f20",
            "funcStartAddr": "0x403f20",
            "funcEndAddr": "0x404036",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x403f20 */\n#include <stdint.h>\n \nuint64_t fcn_00403f20 (char * arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    char * s2;\n    uint32_t var_17h;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r15 = rsi;\n    r13 = rcx;\n    *((rsp + 8)) = rdi;\n    *((rsp + 0x18)) = rdx;\n    rax = strlen (rdi);\n    r14 = *(r15);\n    *(rsp) = 0xffffffffffffffff;\n    if (r14 == 0) {\n        goto label_3;\n    }\n    r12 = rax;\n    *((rsp + 0x17)) = 0;\n    ebx = 0;\n    goto label_1;\nlabel_0:\n    rax = *((rsp + 0x18));\n    if (rax == 0) {\n        goto label_4;\n    }\n    rdi *= r13;\n    rdi += rax;\n    eax = memcmp (*(rsp), rbp, r13);\n    ecx = 1;\n    eax = *((rsp + 0x17));\n    if (eax != 0) {\n        eax = ecx;\n    }\n    *((rsp + 0x17)) = al;\n    do {\nlabel_2:\n        rbx++;\n        rbp += r13;\n        r14 = *((r15 + rbx*8));\n        if (r14 == 0) {\n            goto label_5;\n        }\nlabel_1:\n        eax = strncmp (r14, *((rsp + 8)), r12);\n    } while (eax != 0);\n    rax = strlen (r14);\n    if (rax == r12) {\n        goto label_6;\n    }\n    if (*(rsp) != -1) {\n        goto label_0;\n    }\n    *(rsp) = rbx;\n    rbx++;\n    rbp += r13;\n    r14 = *((r15 + rbx*8));\n    if (r14 != 0) {\n        goto label_1;\n    }\nlabel_5:\n    rax = 0xfffffffffffffffe;\n    if (*((rsp + 0x17)) == 0) {\n        rax = *(rsp);\n    }\n    *(rsp) = rax;\n    do {\nlabel_3:\n        rax = *(rsp);\n        return rax;\nlabel_4:\n        *((rsp + 0x17)) = 1;\n        goto label_2;\nlabel_6:\n        *(rsp) = rbx;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00404040",
            "funcStartAddr": "0x404040",
            "funcEndAddr": "0x4040b1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x404040 */\n#include <stdint.h>\n \nuint64_t fcn_00404040 (int64_t arg1, int64_t arg2, uint32_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    edx = 5;\n    r12 = rsi;\n    if (rdx == -1) {\n        goto label_0;\n    }\n    rax = dcgettext (0, \"ambiguous argument %s for %s\");\n    rbx = rax;\n    do {\n        rax = fcn_00406dc0 (1, rbp);\n        rax = fcn_00406ab0 (0, 8, r12);\n        r8 = rbp;\n        rdx = rbx;\n        esi = 0;\n        rcx = rax;\n        edi = 0;\n        eax = 0;\n        void (*0x401f60)() ();\nlabel_0:\n        rax = dcgettext (0, \"invalid argument %s for %s\");\n        rbx = rax;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_004040c0",
            "funcStartAddr": "0x4040c0",
            "funcEndAddr": "0x4041d8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4040c0 */\n#include <stdint.h>\n \nuint64_t fcn_004040c0 (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r15 = rdi;\n    r14d = 0;\n    r13 = rdx;\n    edx = 5;\n    rbx = stderr;\n    rax = dcgettext (0, \"Valid arguments are:\");\n    rdi = rax;\n    rsi = rbx;\n    ebx = 0;\n    fputs_unlocked ();\n    r12 = *(r15);\n    if (r12 != 0) {\n        goto label_1;\n    }\n    goto label_2;\n    do {\nlabel_0:\n        rbx++;\n        r14 = rbp;\n        rbp += r13;\n        rax = fcn_00406de0 (r12);\n        edx = \"\\n  - %s\";\n        esi = 1;\n        rdi = stderr;\n        rcx = rax;\n        eax = 0;\n        fprintf_chk ();\n        r12 = *((r15 + rbx*8));\n        if (r12 == 0) {\n            goto label_2;\n        }\nlabel_1:\n    } while (rbx == 0);\n    eax = memcmp (r14, rbp, r13);\n    if (eax != 0) {\n        goto label_0;\n    }\n    rbx++;\n    rbp += r13;\n    rax = fcn_00406de0 (r12);\n    edx = \", %s\";\n    esi = 1;\n    rdi = stderr;\n    rcx = rax;\n    eax = 0;\n    fprintf_chk ();\n    r12 = *((r15 + rbx*8));\n    if (r12 != 0) {\n        goto label_1;\n    }\nlabel_2:\n    rdi = stderr;\n    rax = *((rdi + 0x28));\n    if (rax < *((rdi + 0x30))) {\n        rdx = rax + 1;\n        *((rdi + 0x28)) = rdx;\n        *(rax) = 0xa;\n        return rax;\n    }\n    esi = 0xa;\n    return overflow ();\n}\n"
        },
        {
            "funcName": "fcn_004041e0",
            "funcStartAddr": "0x4041e0",
            "funcEndAddr": "0x404250",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4041e0 */\n#include <stdint.h>\n \nuint64_t fcn_004041e0 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    r15 = r8;\n    r14 = rdi;\n    r13 = r9;\n    r12 = rsi;\n    rbx = rdx;\n    rax = fcn_00403f20 (r12, rbx, rbp, r8);\n    while (1) {\n        return rax;\n        fcn_00404040 (r14, r12, rax);\n        fcn_004040c0 (rbx, rbp, r15);\n        void (*r13)() ();\n        rax = 0xffffffffffffffff;\n    }\n}\n"
        },
        {
            "funcName": "fcn_00404360",
            "funcStartAddr": "0x404360",
            "funcEndAddr": "0x404378",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x404360 */\n#include <stdint.h>\n \nuint64_t fcn_00404360 (void) {\n    rax = fcn_004043e0 (rdi);\n    if (rax != 0) {\n        return rax;\n    }\n    return fcn_00408490 ();\n}\n"
        },
        {
            "funcName": "fcn_00404380",
            "funcStartAddr": "0x404380",
            "funcEndAddr": "0x4043dd",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x404380 */\n#include <stdint.h>\n \nuint64_t fcn_00404380 (uint32_t arg1) {\n    rdi = arg1;\n    ebp = 0;\n    rbx = rdi;\n    bpl = (*(rdi) == 0x2f) ? 1 : 0;\n    rax = fcn_00404440 (rdi);\n    rcx = rax;\n    rcx -= rbx;\n    if (rcx <= rbp) {\n        goto label_0;\n    }\n    rdx = rcx - 1;\n    if (*((rax - 1)) == 0x2f) {\n        goto label_1;\n    }\n    goto label_0;\n    do {\n        rax = rdx - 1;\n        if (*((rbx + rdx - 1)) != 0x2f) {\n            goto label_2;\n        }\n        rdx = rax;\nlabel_1:\n    } while (rbp != rdx);\nlabel_2:\n    rax = rdx;\n    return rax;\nlabel_0:\n    rdx = rcx;\n    rax = rcx;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004043e0",
            "funcStartAddr": "0x4043e0",
            "funcEndAddr": "0x40443a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4043e0 */\n#include <stdint.h>\n \nuint64_t fcn_004043e0 (int64_t arg1) {\n    rdi = arg1;\n    rax = fcn_00404380 (rdi);\n    rbx = rax;\n    al = (rax == 0) ? 1 : 0;\n    eax = (int32_t) al;\n    rax = malloc (rbx + rax + 1);\n    rcx = rax;\n    if (rax == 0) {\n        goto label_0;\n    }\n    rax = memcpy (rax, rbp, rbx);\n    rcx = rax;\n    while (1) {\n        *((rcx + rbx)) = 0;\nlabel_0:\n        rax = rcx;\n        return rax;\n        *(rax) = 0x2e;\n        ebx = 1;\n    }\n}\n"
        },
        {
            "funcName": "fcn_00404440",
            "funcStartAddr": "0x404440",
            "funcEndAddr": "0x40449b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x404440 */\n#include <stdint.h>\n \nint64_t fcn_00404440 (int64_t arg1) {\n    rdi = arg1;\n    edx = *(rdi);\n    rax = rdi;\n    if (dl != 0x2f) {\n        goto label_1;\n    }\n    do {\n        rax++;\n        edx = *(rax);\n    } while (dl == 0x2f);\nlabel_1:\n    if (dl == 0) {\n        goto label_2;\n    }\n    rcx = rax;\n    esi = 0;\n    while (dl != 0x2f) {\n        if (sil != 0) {\n            rax = rcx;\n            esi = 0;\n        }\n        rcx++;\n        edx = *(rcx);\n        if (dl == 0) {\n            goto label_2;\n        }\nlabel_0:\n    }\n    rcx++;\n    edx = *(rcx);\n    esi = 1;\n    if (dl != 0) {\n        goto label_0;\n    }\nlabel_2:\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004044a0",
            "funcStartAddr": "0x4044a0",
            "funcEndAddr": "0x4044cb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4044a0 */\n#include <stdint.h>\n \nuint64_t fcn_004044a0 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    rax = strlen (rdi);\n    while (rdx != 1) {\n        rdx = rax - 1;\n        if (*((rbx + rax - 1)) != 0x2f) {\n            return rax;\n        }\n        rax = rdx;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004044d0",
            "funcStartAddr": "0x4044d0",
            "funcEndAddr": "0x40451a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4044d0 */\n#include <stdint.h>\n \nuint64_t fcn_004044d0 (int64_t arg_60h, int64_t arg3, int32_t oflag, const char * path) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdx = arg3;\n    rsi = oflag;\n    rdi = path;\n    *((rsp + 0x30)) = rdx;\n    edx = 0;\n    while (1) {\n        eax = 0;\n        eax = open (rdi, rsi, rdx);\n        fcn_00407c50 (eax);\n        return eax;\n        rax = rsp + 0x60;\n        *((rsp + 8)) = 0x10;\n        edx = *((rsp + 0x30));\n        *((rsp + 0x10)) = rax;\n        rax = rsp + 0x20;\n        *((rsp + 0x18)) = rax;\n    }\n}\n"
        },
        {
            "funcName": "fcn_00404520",
            "funcStartAddr": "0x404520",
            "funcEndAddr": "0x4045d7",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x404520 */\n#include <stdint.h>\n \nuint64_t fcn_00404520 (int64_t arg1) {\n    rdi = arg1;\n    *(fp_stack--) = *(0x0040b6c4);\n    *(fp_stack--) = fp_stack[?];\n    if (fp_stack[0] >= fp_stack[1]) {\n        goto label_0;\n    }\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    eax = *((rsp - 0xa));\n    ah |= 0xc;\n    *((rsp - 0xc)) = ax;\n    *(fp_stack--) = fp_stack[0];\n    *((rsp - 0x18)) = fp_stack[0];\n    fp_stack--;\n    rax = *((rsp - 0x18));\n    do {\n        *((rsp - 0x20)) = rax;\n        *(fp_stack--) = *((rsp - 0x20));\n        if (rax < 0) {\n            fp_stack[0] += *(0x0040b6c8);\n        }\n        if (edi == 0) {\n            fp_tmp_0 = fp_stack[1];\n            fp_stack[1] = fp_stack[0];\n            fp_stack[0] = fp_tmp_0;\n            __asm (\"fucompi st(1)\");\n            if (edi != 0) {\n                if (edi == 0) {\n                    goto label_1;\n                }\n                fp_stack++;\n            } else {\n                fp_stack++;\n            }\n            rax++;\n            *((rsp - 0x20)) = rax;\n            *(fp_stack--) = *((rsp - 0x20));\n            if (rax < 0) {\n                goto label_2;\n            }\n        } else {\n            fp_stack[1] = fp_stack[0];\n            fp_stack--;\n        }\nlabel_1:\n        return rax;\nlabel_0:\n        fp_stack[0] -= fp_stack[1];\n        fp_tmp_1 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_1;\n        eax = *((rsp - 0xa));\n        ah |= 0xc;\n        *((rsp - 0xc)) = ax;\n        *((rsp - 0x18)) = fp_stack[0];\n        fp_stack--;\n        rax = *((rsp - 0x18));\n        __asm (\"btc rax, 0x3f\");\n    } while (1);\nlabel_2:\n    fp_stack[0] += *(0x0040b6c8);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004045e0",
            "funcStartAddr": "0x4045e0",
            "funcEndAddr": "0x404fae",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4045e0 */\n#include <stdint.h>\n \nvoid fcn_004045e0 (int64_t arg1, void * arg2, int64_t arg3, int64_t arg4, int64_t arg5) {\n    void * s2;\n    int64_t var_10h;\n    uint32_t var_14h;\n    int64_t var_18h;\n    size_t var_20h;\n    int64_t var_30h;\n    int64_t var_34h;\n    int64_t var_38h;\n    void * var_40h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    eax = edx;\n    eax &= 0x20;\n    r14 = rcx;\n    ecx = edx;\n    ecx &= 3;\n    r13 = rsi;\n    rbx = rdi;\n    *((rsp + 0x30)) = eax;\n    eax -= eax;\n    eax &= 0xffffffe8;\n    *((rsp + 8)) = rsi;\n    eax += 0x400;\n    *((rsp + 0x10)) = edx;\n    *((rsp + 0x18)) = r8;\n    *((rsp + 0x14)) = ecx;\n    *((rsp + 0x34)) = eax;\n    rax = localeconv ();\n    r15 = *(rax);\n    r12 = rax;\n    rax = strlen (r15);\n    edx = 1;\n    r8 = rax;\n    rax--;\n    eax = 0x40a2b3;\n    if (rax >= 0x10) {\n        r15 = rax;\n    }\n    rax = *((r12 + 0x10));\n    r12 = *((r12 + 8));\n    if (rax >= 0x10) {\n        r8 = rdx;\n    }\n    *((rsp + 0x20)) = r8;\n    *((rsp + 0x38)) = rax;\n    rax = strlen (r12);\n    r8 = *((rsp + 0x20));\n    eax = 0x40cccf;\n    if (rax >= 0x11) {\n        r12 = rax;\n    }\n    rax = r13 + 0x287;\n    *(rsp) = rax;\n    if (rbp > r14) {\n        goto label_31;\n    }\n    rax = r14;\n    edx = 0;\n    rax = rdx:rax / rbp;\n    rdx = rdx:rax % rbp;\n    rcx = rax;\n    if (rdx == 0) {\n        rsi = rax;\n        edx = 0;\n        rsi *= rbx;\n        rax = rsi;\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax == rbx) {\n            goto label_32;\n        }\n    }\nlabel_5:\n    *((rsp + 0x20)) = r14;\n    *(fp_stack--) = *((rsp + 0x20));\n    if (r14 < 0) {\n        goto label_33;\n    }\nlabel_4:\n    rax = *((rsp + 0x18));\n    *((rsp + 0x20)) = rax;\n    *(fp_stack--) = *((rsp + 0x20));\n    if (rax < 0) {\n        goto label_34;\n    }\n    *((rsp + 0x20)) = rbx;\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\n    *(fp_stack--) = *((rsp + 0x20));\n    if (rbx < 0) {\n        goto label_3;\n    }\nlabel_2:\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    if ((*((rsp + 0x10)) & 0x10) == 0) {\n        goto label_1;\n    }\nlabel_0:\n    *(fp_stack--) = *((rsp + 0x34));\n    ebx = 0;\n    *(fp_stack--) = fp_stack[0];\n    while (ebx != 8) {\n        fp_stack[1] = fp_stack[0];\n        fp_stack--;\n        fp_tmp_0 = fp_stack[2];\n        fp_stack[2] = fp_stack[0];\n        fp_stack[0] = fp_tmp_0;\n        *(fp_stack--) = fp_stack[0];\n        ebx++;\n        fp_stack[0] *= fp_stack[2];\n        fp_tmp_1 = fp_stack[3];\n        fp_stack[3] = fp_stack[0];\n        fp_stack[0] = fp_tmp_1;\n        if (fp_stack[0] < fp_stack[3]) {\n            goto label_35;\n        }\n    }\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    goto label_36;\nlabel_35:\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\nlabel_36:\n    ecx = *((rsp + 0x30));\n    eax = 0;\n    edi = *((rsp + 0x14));\n    r14 = r8 + 1;\n    fp_stack[1] /= fp_stack[0];\n    fp_stack++;\n    al = (ecx == 0) ? 1 : 0;\n    r15 = r14 + rax + 1;\n    if (edi == 1) {\n        goto label_37;\n    }\n    *(fp_stack--) = fp_stack[?];\n    __asm (\"fcompi st(1)\");\n    if (edi > 1) {\n        goto label_38;\n    }\n    *(fp_stack--) = fp_stack[0];\nlabel_12:\n    ? = fp_stack[0];\n    fp_stack--;\n    esi = 1;\n    eax = 0;\n    rbp = *((rsp + 0x18));\n    ecx = \"%.1Lf\";\n    rdx = 0xffffffffffffffff;\n    rdi = rbp;\n    ? = fp_stack[0];\n    fp_stack--;\n    sprintf_chk ();\n    rax = strlen (rbp);\n    *(fp_stack--) = fp_stack[?];\n    if (rax <= r15) {\n        goto label_39;\n    }\n    *(fp_stack--) = *(0x0040b6cc);\n    fp_stack[1] *= fp_stack[0];\nlabel_26:\n    *(fp_stack--) = fp_stack[?];\n    __asm (\"fcompi st(2)\");\n    if (rax > r15) {\n        *((rsp + 0x20)) = fp_stack[0];\n        fp_stack--;\n        ? = fp_stack[0];\n        fp_stack--;\n        fcn_00404520 (*((rsp + 0x24)));\n        *(fp_stack--) = *((rsp + 0x20));\n    }\nlabel_15:\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\n    ecx = \"%.0Lf\";\n    esi = 1;\n    r15 = *((rsp + 0x18));\n    rdx = 0xffffffffffffffff;\n    eax = 0;\n    rdi = r15;\n    ? = fp_stack[0];\n    fp_stack--;\n    sprintf_chk ();\n    rax = strlen (r15);\n    r14 = rax;\n    goto label_14;\nlabel_1:\n    edi = *((rsp + 0x14));\n    if (edi != 1) {\n        *(fp_stack--) = fp_stack[?];\n        __asm (\"fcompi st(1)\");\n        if (edi > 1) {\n            goto label_40;\n        }\n    }\nlabel_11:\n    esi = 1;\n    ecx = \"%.0Lf\";\n    eax = 0;\n    rbx = *((rsp + 0x18));\n    rdx = 0xffffffffffffffff;\n    ? = fp_stack[0];\n    fp_stack--;\n    rdi = rbx;\n    sprintf_chk ();\n    ebx = 0xffffffff;\n    rax = strlen (rbx);\n    r14 = rax;\nlabel_14:\n    r15 = *(rsp);\n    r15 -= rax;\n    r14 += r15;\n    memmove (r15, *((rsp + 8)), rax);\nlabel_22:\n    if ((*((rsp + 0x10)) & 4) != 0) {\n        goto label_41;\n    }\nlabel_6:\n    if ((*((rsp + 0x10)) & 0x80) != 0) {\n        if (ebx == 0xffffffff) {\n            goto label_42;\n        }\nlabel_23:\n        eax = *((rsp + 0x10));\n        eax &= 0x100;\n        ecx = eax;\n        ecx |= ebx;\n        if (ecx != 0) {\n            goto label_43;\n        }\n    }\nlabel_7:\n    rax = *(rsp);\n    *(rax) = 0;\n    rax = r15;\n    return;\nlabel_3:\n    fp_stack[0] += *(0x0040b6c8);\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    if ((*((rsp + 0x10)) & 0x10) != 0) {\n        goto label_0;\n    }\n    goto label_1;\nlabel_34:\n    fp_stack[0] += *(0x0040b6c8);\n    *((rsp + 0x20)) = rbx;\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\n    *(fp_stack--) = *((rsp + 0x20));\n    if (rbx >= 0) {\n        goto label_2;\n    }\n    goto label_3;\nlabel_33:\n    fp_stack[0] += *(0x0040b6c8);\n    goto label_4;\nlabel_31:\n    if (r14 == 0) {\n        goto label_5;\n    }\n    rax = *((rsp + 0x18));\n    edx = 0;\n    rax = rdx:rax / r14;\n    rdx = rdx:rax % r14;\n    rcx = rax;\n    if (rdx != 0) {\n        goto label_5;\n    }\n    rax = rbx;\n    edx = 0;\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    rbx = rax;\n    rax = rdx * 5;\n    edx = 0;\n    rax += rax;\n    rsi = rbx;\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    rdx += rdx;\n    r9d = eax;\n    if (rcx <= rdx) {\n        goto label_44;\n    }\n    edi = 0;\n    dil = (rdx != 0) ? 1 : 0;\nlabel_18:\n    ecx = *((rsp + 0x10));\n    ecx &= 0x10;\n    if (ecx == 0) {\n        goto label_45;\n    }\nlabel_13:\n    r10d = *((rsp + 0x34));\n    ebx = 0;\n    if (r10 <= rsi) {\n        goto label_46;\n    }\nlabel_8:\n    r14 = *(rsp);\n    if (*((rsp + 0x14)) == 1) {\n        goto label_47;\n    }\nlabel_24:\n    r10d = *((rsp + 0x14));\n    if (r10d == 0) {\n        edi += r9d;\n        if (edi <= 0) {\n            goto label_16;\n        }\nlabel_17:\n        rsi++;\n        if (ecx == 0) {\n            goto label_16;\n        }\n        eax = *((rsp + 0x34));\n        if (rax == rsi) {\n            goto label_48;\n        }\n    }\nlabel_16:\n    rcx = 0xcccccccccccccccd;\n    r15 = r14;\n    while (rsi > 9) {\n        rsi = rdx;\n        rax = rdx;\n        rdi = rsi;\n        r15--;\n        rdx:rax = rax * rcx;\n        rdx >>= 3;\n        rax = rdx * 5;\n        rax += rax;\n        rdi -= rax;\n        rax = rdi;\n        eax += 0x30;\n        *(r15) = al;\n    }\n    if ((*((rsp + 0x10)) & 4) == 0) {\n        goto label_6;\n    }\nlabel_41:\n    r13 = 0xffffffffffffffff;\n    rax = strlen (r12);\n    rbp -= r15;\n    rsi = r15;\n    ecx = 0x29;\n    rdx = rbp;\n    rdi = rsp + 0x40;\n    *((rsp + 0x20)) = rax;\n    memcpy_chk ();\n    *((rsp + 0x14)) = ebx;\n    r15 = *((rsp + 0x38));\n    rbx = rbp;\n    r13 = r12;\n    r12 = *((rsp + 0x20));\n    do {\n        edx = *(r15);\n        if (dl != 0) {\n            eax = (int32_t) dl;\n            if (dl >= 0x7f) {\n                rax = rbx;\n            }\n            r15++;\n        }\n        if (rbp > rbx) {\n            r15 = r14;\n            ebx = *((rsp + 0x14));\n            r15 -= rbp;\n            memcpy (r15, rsp + 0x40, rbp);\n            goto label_6;\n        }\n        r14 -= rbp;\n        rbx -= rbp;\n        rax = rsp + 0x40;\n        memcpy (r14, rax + rbx, rbp);\n        if (rbx == 0) {\n            goto label_49;\n        }\n        r14 -= r12;\n        memcpy (r14, r13, r12);\n    } while (1);\nlabel_42:\n    rcx = *((rsp + 0x18));\n    if (rcx <= 1) {\n        goto label_50;\n    }\n    edx = *((rsp + 0x34));\n    ebx = 1;\n    eax = 1;\n    do {\n        rax *= rdx;\n        if (rcx <= rax) {\n            goto label_51;\n        }\n        ebx++;\n    } while (ebx != 8);\nlabel_51:\n    ecx = *((rsp + 0x10));\n    eax = *((rsp + 0x10));\n    eax &= 0x100;\n    ecx &= 0x40;\n    if (ecx != 0) {\nlabel_20:\n        rcx = *((rsp + 8));\n        rdi = rcx + 0x288;\n        *((rcx + 0x287)) = 0x20;\n        *(rsp) = rdi;\nlabel_19:\n        if (ebx == 0) {\n            goto label_52;\n        }\n    }\n    r9d = *((rsp + 0x30));\n    if (r9d == 0) {\n        if (ebx == 1) {\n            goto label_53;\n        }\n    }\n    rbx = (int64_t) ebx;\n    rdi = *(rsp);\n    ecx = *((rbx + 0x40b6b8));\n    rdx = rdi + 1;\n    *(rdi) = cl;\n    if (eax == 0) {\n        goto label_54;\n    }\n    r8d = *((rsp + 0x30));\n    if (r8d != 0) {\n        goto label_55;\n    }\nlabel_21:\n    rax = rdx + 1;\n    *(rdx) = 0x42;\n    *(rsp) = rax;\n    goto label_7;\nlabel_9:\n    dil = (edi != 0) ? 1 : 0;\n    edi = (int32_t) dil;\nlabel_10:\n    ebx++;\n    if (r10 > r11) {\n        goto label_56;\n    }\n    if (ebx == 8) {\n        goto label_8;\n    }\nlabel_46:\n    rax = rsi;\n    edx = 0;\n    esi = edi;\n    rax = rdx:rax / r10;\n    rdx = rdx:rax % r10;\n    esi >>= 1;\n    r11 = rax;\n    eax = rdx * 5;\n    edx = 0;\n    eax = r9 + rax*2;\n    eax = edx:eax / ebp;\n    edx = edx:eax % ebp;\n    edx = rsi + rdx*2;\n    r9d = eax;\n    rsi = r11;\n    edi += edx;\n    if (ebp > edx) {\n        goto label_9;\n    }\n    dil = (ebp < edi) ? 1 : 0;\n    edi = (int32_t) dil;\n    edi += 2;\n    goto label_10;\nlabel_40:\n    ? = fp_stack[0];\n    fp_stack--;\n    fcn_00404520 (rdi);\n    goto label_11;\nlabel_38:\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    ? = fp_stack[0];\n    fp_stack--;\n    fcn_00404520 (rdi);\n    *(fp_stack--) = fp_stack[?];\n    goto label_12;\nlabel_32:\n    ecx = *((rsp + 0x10));\n    edi = 0;\n    r9d = 0;\n    ecx &= 0x10;\n    if (ecx != 0) {\n        goto label_13;\n    }\nlabel_45:\n    ebx = 0xffffffff;\n    goto label_8;\n    do {\nlabel_39:\n        if ((*((rsp + 0x10)) & 8) != 0) {\n            rcx = *((rsp + 8));\n            if (*((rcx + rax - 1)) == 0x30) {\n                goto label_57;\n            }\n            fp_stack++;\n        } else {\n            fp_stack++;\n        }\n        rcx = rax;\n        rcx -= r14;\n        r14 = rcx;\n        goto label_14;\nlabel_37:\n        ecx = \"%.1Lf\";\n        esi = 1;\n        eax = 0;\n        *(fp_stack--) = fp_stack[0];\n        ? = fp_stack[0];\n        fp_stack--;\n        rbp = *((rsp + 0x18));\n        rdx = 0xffffffffffffffff;\n        rdi = rbp;\n        ? = fp_stack[0];\n        fp_stack--;\n        sprintf_chk ();\n        rax = strlen (rbp);\n        *(fp_stack--) = fp_stack[?];\n    } while (rax <= r15);\n    *(fp_stack--) = *(0x0040b6cc);\n    fp_stack[1] *= fp_stack[0];\n    goto label_15;\nlabel_47:\n    rax = rsi;\n    rdi = (int64_t) edi;\n    eax &= 1;\n    rax += rdi;\n    al = (rax != 0) ? 1 : 0;\n    eax = (int32_t) al;\n    r9d += eax;\n    if (r9d <= 5) {\n        goto label_16;\n    }\n    r14 = *(rsp);\n    goto label_17;\nlabel_44:\n    dil = (r9d < 5) ? 1 : 0;\n    edi = (int32_t) dil;\n    edi += 2;\n    goto label_18;\nlabel_43:\n    if ((*((rsp + 0x10)) & 0x40) == 0) {\n        goto label_19;\n    }\n    goto label_20;\nlabel_55:\n    rdx = rdi + 2;\n    *((rdi + 1)) = 0x69;\n    goto label_21;\nlabel_48:\n    if (ebx == 8) {\n        goto label_16;\n    }\n    ebx++;\n    if ((*((rsp + 0x10)) & 8) == 0) {\n        goto label_58;\n    }\nlabel_30:\n    r15 = r14 - 1;\n    *((r14 - 1)) = 0x31;\n    goto label_22;\nlabel_50:\n    ebx = 0;\n    goto label_23;\nlabel_53:\n    rcx = *(rsp);\n    rdx = rcx + 1;\n    *(rcx) = 0x6b;\n    if (eax != 0) {\n        goto label_21;\n    }\nlabel_54:\n    *(rsp) = rdx;\n    goto label_7;\nlabel_56:\n    if (r11 > 9) {\n        goto label_8;\n    }\n    if (*((rsp + 0x14)) == 1) {\n        goto label_59;\n    }\n    ebp = *((rsp + 0x14));\n    dl = (ebp == 0) ? 1 : 0;\n    r9b = (edi > 0) ? 1 : 0;\n    edx &= r9d;\nlabel_28:\n    if (dl != 0) {\n        goto label_60;\n    }\n    if (eax != 0) {\n        goto label_61;\n    }\nlabel_29:\n    r14 = *(rsp);\n    if ((*((rsp + 0x10)) & 8) == 0) {\n        eax = 0x30;\nlabel_27:\n        rdi = *((rsp + 8));\n        r14 = rdi + 0x286;\n        *((rdi + 0x286)) = al;\n        eax = r8d;\n        r14 -= r8;\n        if (r8d >= 8) {\n            goto label_62;\n        }\n        if ((r8b & 4) != 0) {\n            goto label_63;\n        }\n        if (eax != 0) {\n            edx = *(r15);\n            *(r14) = dl;\n            if ((al & 2) != 0) {\n                goto label_64;\n            }\n        }\nlabel_25:\n        edi = 0;\n    }\n    if (*((rsp + 0x14)) == 1) {\n        goto label_16;\n    }\n    r9d = 0;\n    goto label_24;\nlabel_64:\n    edx = *((r15 + rax - 2));\n    *((r14 + rax - 2)) = dx;\n    goto label_25;\nlabel_57:\n    *(fp_stack--) = *(0x0040b6cc);\n    fp_stack[1] *= fp_stack[0];\n    if (*((rsp + 0x14)) != 1) {\n        goto label_26;\n    }\n    goto label_15;\nlabel_60:\n    eax++;\n    if (eax == 0xa) {\n        goto label_65;\n    }\nlabel_61:\n    eax += 0x30;\n    goto label_27;\nlabel_59:\n    edx = eax;\n    edx &= 1;\n    edx += edi;\n    dl = (edx > 2) ? 1 : 0;\n    goto label_28;\nlabel_62:\n    rax = *(r15);\n    r9 = r14 + 8;\n    r10 = r15;\n    r9 &= 0xfffffffffffffff8;\n    *(r14) = rax;\n    eax = r8d;\n    rdx = *((r15 + rax - 8));\n    *((r14 + rax - 8)) = rdx;\n    rax = r14;\n    rax -= r9;\n    r10 -= rax;\n    eax += r8d;\n    eax &= 0xfffffff8;\n    if (eax < 8) {\n        goto label_25;\n    }\n    eax &= 0xfffffff8;\n    edx = 0;\n    do {\n        edi = edx;\n        edx += 8;\n        r11 = *((r10 + rdi));\n        *((r9 + rdi)) = r11;\n    } while (edx < eax);\n    goto label_25;\nlabel_65:\n    rsi = r11 + 1;\n    if (rsi == 0xa) {\n        goto label_66;\n    }\n    edi = 0;\n    goto label_29;\nlabel_58:\n    rax = r8;\n    *((r14 - 1)) = 0x30;\n    rax = ~rax;\n    r14 += rax;\n    eax = r8d;\n    if (r8d >= 8) {\n        goto label_67;\n    }\n    r8d &= 4;\n    if (r8d != 0) {\n        goto label_68;\n    }\n    if (eax == 0) {\n        goto label_30;\n    }\n    edx = *(r15);\n    *(r14) = dl;\n    if ((al & 2) == 0) {\n        goto label_30;\n    }\n    edx = *((r15 + rax - 2));\n    *((r14 + rax - 2)) = dx;\n    goto label_30;\nlabel_66:\n    r14 = *(rsp);\n    goto label_25;\nlabel_67:\n    rax = *(r15);\n    rcx = r14 + 8;\n    rcx &= 0xfffffffffffffff8;\n    *(r14) = rax;\n    eax = r8d;\n    rdx = *((r15 + rax - 8));\n    *((r14 + rax - 8)) = rdx;\n    rax = r14;\n    rax -= rcx;\n    r15 -= rax;\n    eax += r8d;\n    eax &= 0xfffffff8;\n    if (eax < 8) {\n        goto label_30;\n    }\n    eax &= 0xfffffff8;\n    edx = 0;\n    do {\n        esi = edx;\n        edx += 8;\n        rdi = *((r15 + rsi));\n        *((rcx + rsi)) = rdi;\n    } while (edx < eax);\n    goto label_30;\nlabel_63:\n    edx = *(r15);\n    *(r14) = edx;\n    edx = *((r15 + rax - 4));\n    *((r14 + rax - 4)) = edx;\n    goto label_25;\nlabel_68:\n    edx = *(r15);\n    *(r14) = edx;\n    edx = *((r15 + rax - 4));\n    *((r14 + rax - 4)) = edx;\n    goto label_30;\nlabel_49:\n    ebx = *((rsp + 0x14));\n    r15 = r14;\n    goto label_6;\nlabel_52:\n    rdx = *(rsp);\n    if (eax != 0) {\n        goto label_21;\n    }\n    goto label_7;\n}\n"
        },
        {
            "funcName": "fcn_00405170",
            "funcStartAddr": "0x405170",
            "funcEndAddr": "0x4051b8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x405170 */\n#include <stdint.h>\n \nint64_t fcn_00405170 (uint32_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = rsi + 0x14;\n    *((rsi + 0x14)) = 0;\n    rsi = 0xcccccccccccccccd;\n    while (rdi > 9) {\n        rdi = rdx;\n        rax = rdx;\n        r8 = rdi;\n        rcx--;\n        rdx:rax = rax * rsi;\n        rdx >>= 3;\n        rax = rdx * 5;\n        rax += rax;\n        r8 -= rax;\n        rax = r8;\n        eax += 0x30;\n        *(rcx) = al;\n    }\n    rax = rcx;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004051c0",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x405259",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4051c0 */\n#include <stdint.h>\n \nuint64_t fcn_004051c0 (char ** arg1) {\n    rdi = arg1;\n    if (rdi != 0) {\n        rbx = rdi;\n        rax = strrchr (rdi, 0x2f);\n        if (rax != 0) {\n            r8 = rax + 1;\n            rdx = r8;\n            rdx -= rbx;\n            if (rdx <= 6) {\n                goto label_0;\n            }\n            rsi = rax - 6;\n            edi = \"/.libs/\";\n            ecx = 7;\n            __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n            dl = (rdx > 6) ? 1 : 0;\n            if (dl != 0) {\n                goto label_0;\n            }\n            edi = 0x40b720;\n            ecx = 3;\n            rsi = r8;\n            rbx = r8;\n            __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n            dl = (dl > 0) ? 1 : 0;\n            if (dl != 0) {\n                goto label_0;\n            }\n            rbx = rax + 4;\n            *(obj.__progname) = rbx;\n        }\nlabel_0:\n        *(0x0060f3b0) = rbx;\n        *(obj.program_invocation_name) = rbx;\n        return rax;\n    }\n    fwrite (\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 0x37, *(obj.stderr));\n    return abort ();\n}\n"
        },
        {
            "funcName": "fcn_00405260",
            "funcStartAddr": "0x405260",
            "funcEndAddr": "0x405352",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x405260 */\n#include <stdint.h>\n \nuint64_t fcn_00405260 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    edx = 5;\n    r12d = esi;\n    rsi = rdi;\n    rax = dcgettext (0, rsi);\n    rbx = rax;\n    while (1) {\nlabel_0:\n        rax = rbx;\n        return rax;\n        rax = fcn_00409c20 ();\n        edx = *(rax);\n        edx &= 0xffffffdf;\n        if (dl != 0x55) {\n            goto label_1;\n        }\n        edx = *((rax + 1));\n        edx &= 0xffffffdf;\n        if (dl != 0x54) {\n            goto label_2;\n        }\n        edx = *((rax + 2));\n        edx &= 0xffffffdf;\n        if (dl != 0x46) {\n            goto label_2;\n        }\n        if (*((rax + 3)) != 0x2d) {\n            goto label_2;\n        }\n        if (*((rax + 4)) != 0x38) {\n            goto label_2;\n        }\n        if (*((rax + 5)) != 0) {\n            goto label_2;\n        }\n        eax = 0x40b726;\n        ebx = 0x40b731;\n        if (*(rbx) != 0x60) {\n            rbx = rax;\n        }\n    }\nlabel_1:\n    if (dl == 0x47) {\n        edx = *((rax + 1));\n        edx &= 0xffffffdf;\n        if (dl != 0x42) {\n            goto label_2;\n        }\n        if (*((rax + 2)) != 0x31) {\n            goto label_2;\n        }\n        if (*((rax + 3)) != 0x38) {\n            goto label_2;\n        }\n        if (*((rax + 4)) != 0x30) {\n            goto label_2;\n        }\n        if (*((rax + 5)) != 0x33) {\n            goto label_2;\n        }\n        if (*((rax + 6)) != 0x30) {\n            goto label_2;\n        }\n        if (*((rax + 7)) != 0) {\n            goto label_2;\n        }\n        eax = 0x40b72a;\n        ebx = 0x40b72d;\n        if (*(rbx) != 0x60) {\n            rbx = rax;\n        }\n        goto label_0;\n    }\nlabel_2:\n    eax = 0x40ccaf;\n    ebx = 0x40b724;\n    if (r12d != 9) {\n        rbx = rax;\n    }\n    rax = rbx;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00405360",
            "funcStartAddr": "0x405360",
            "funcEndAddr": "0x409871",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x405360 */\n#include <stdint.h>\n \nuint64_t fcn_00405360 (int64_t arg_e8h_3, uint32_t arg_e8h_2, int64_t arg_e8h, char * arg_e0h, int64_t arg1, char * arg2, char * arg3, size_t * arg4, int64_t arg5, int64_t arg6) {\n    size_t * var_8h;\n    size_t * var_10h;\n    uint32_t var_1fh;\n    char * s;\n    size_t n;\n    size_t * var_30h;\n    size_t * var_38h;\n    size_t var_40h;\n    size_t var_48h;\n    void * s2;\n    char * var_58h;\n    uint32_t var_60h;\n    int64_t var_68h;\n    uint32_t var_6ch;\n    char * var_6dh;\n    int64_t var_6eh;\n    int64_t var_6fh;\n    int64_t var_70h;\n    int64_t var_78h;\n    wint_t wc;\n    mbstate_t * ps;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    do {\n        /* [13] -r-x section size 33240 named .text */\n        abort ();\nlabel_5:\n        r15 = rdi;\n        r14 = rsi;\n        r13d = r8d;\n        *((rsp + 0x20)) = rdx;\n        *((rsp + 8)) = rcx;\n        *((rsp + 0x68)) = r9d;\n        rax = ctype_get_mb_cur_max ();\n        ebp &= 2;\n        *((rsp + 0x60)) = rax;\n        rsp + 0x6c = (ebp != 0) ? 1 : 0;\n    } while (r13d > 0xa);\n    eax = r13d;\n    r11 = *((rsp + 8));\n    /* switch table (11 cases) at 0x40b7a0 */\nlabel_30:\n    *((rsp + 0x1f)) = 1;\n    r10d = 0;\n    ebx = 0;\n    r13d = 2;\n    *((rsp + 0x6d)) = 0;\n    *((rsp + 0x58)) = 0;\n    *((rsp + 0x6c)) = 1;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x50)) = 0x40ccaf;\nlabel_21:\n    r9 = r11;\n    r12d = 0;\n    r11d = r13d;\n    do {\nlabel_28:\n        r13b = (r9 != r12) ? 1 : 0;\n        if (r9 == -1) {\n            rax = *((rsp + 0x20));\n            r13b = (*((rax + r12)) != 0) ? 1 : 0;\n        }\n        if (r13b == 0) {\n            goto label_47;\n        }\n        rdi = *((rsp + 0x20));\n        al = (r11d != 2) ? 1 : 0;\n        al &= *((rsp + 8));\n        r8 = rdi + r12;\n        *((rsp + 0x10)) = al;\n        if (al == 0) {\n            goto label_48;\n        }\n        rax = *((rsp + 0x28));\n        if (rax == 0) {\n            goto label_49;\n        }\n        rbp = r12 + rax;\n        if (r9 == -1) {\n            if (rax <= 1) {\n                goto label_50;\n            }\n            *((rsp + 0x40)) = r11d;\n            *((rsp + 0x38)) = r10b;\n            *((rsp + 0x30)) = r8;\n            rax = strlen (rdi);\n            r11d = *((rsp + 0x40));\n            r10d = *((rsp + 0x38));\n            r8 = *((rsp + 0x30));\n            r9 = rax;\n        }\nlabel_50:\n        if (rbp > r9) {\n            goto label_49;\n        }\n        rdi = r8;\n        *((rsp + 0x48)) = r11d;\n        *((rsp + 0x40)) = r9;\n        *((rsp + 0x38)) = r10b;\n        *((rsp + 0x30)) = r8;\n        eax = memcmp (rdi, *((rsp + 0x50)), *((rsp + 0x28)));\n        r8 = *((rsp + 0x30));\n        r10d = *((rsp + 0x38));\n        r9 = *((rsp + 0x40));\n        r11d = *((rsp + 0x48));\n        if (eax != 0) {\n            goto label_49;\n        }\n        if (*((rsp + 0x6c)) != 0) {\n            goto label_51;\n        }\n        ebp = *(r8);\n        if (bpl > 0x7e) {\n            goto label_52;\n        }\n        eax = (int32_t) bpl;\n        /* switch table (127 cases) at 0x40b7f8 */\n        *((rsp + 0x10)) = 0;\n        al = (r9 != 1) ? 1 : 0;\n        if (r9 == -1) {\n            rax = *((rsp + 0x20));\n            al = (*((rax + 1)) != 0) ? 1 : 0;\n        }\n        dl = (r11d == 2) ? 1 : 0;\n        if (al != 0) {\n            goto label_7;\n        }\nlabel_17:\n        if (r12 != 0) {\n            goto label_7;\n        }\nlabel_18:\n        if (*((rsp + 0x6c)) != 0) {\n            if (dl != 0) {\n                goto label_53;\n            }\n        }\nlabel_2:\n        eax = *((rsp + 8));\n        eax ^= 1;\n        eax |= edx;\n        eax ^= 1;\n        al |= *((rsp + 0x6c));\n        if (al == 0) {\n            goto label_11;\n        }\nlabel_24:\n        eax = 0;\nlabel_10:\n        if (*((rsp + 0xd0)) == 0) {\n            goto label_11;\n        }\n        edx = ebp;\n        rcx = *((rsp + 0xd0));\n        dl >>= 5;\n        edx = (int32_t) dl;\n        edx = *((rcx + rdx*4));\n        ecx = ebp;\n        edx >>= cl;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_11;\n        }\n        dl = (r11d == 2) ? 1 : 0;\nlabel_0:\n        if (*((rsp + 0x6c)) != 0) {\n            goto label_54;\n        }\nlabel_4:\n        eax = r10d;\n        eax ^= 1;\n        al &= dl;\n        if (al != 0) {\n            if (r14 > rbx) {\n                *((r15 + rbx)) = 0x27;\n            }\n            rdx = rbx + 1;\n            if (rdx < r14) {\n                *((r15 + rbx + 1)) = 0x24;\n            }\n            rdx = rbx + 2;\n            if (rdx < r14) {\n                *((r15 + rbx + 2)) = 0x27;\n            }\n            rbx += 3;\n            r10d = eax;\n        }\nlabel_9:\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x5c;\n        }\n        rbx++;\n        r12++;\nlabel_1:\n        if (rbx < r14) {\n            *((r15 + rbx)) = bpl;\n        }\n        edi = *((rsp + 0x1f));\n        rbx++;\n        eax = 0;\n        if (r13b == 0) {\n            edi = eax;\n        }\n        *((rsp + 0x1f)) = dil;\n    } while (1);\nlabel_3:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_55;\n    }\n    if (r14 == 0) {\n        goto label_56;\n    }\n    edx = 0;\n    if (*((rsp + 0x58)) != 0) {\n        goto label_56;\n    }\nlabel_27:\n    *((rsp + 0x6d)) = r13b;\n    rbx += 3;\n    eax = 0;\n    r10d = 0;\n    *((rsp + 0x58)) = r14;\n    r14 = rdx;\nlabel_11:\n    dl = (r11d == 2) ? 1 : 0;\n    if (*((rsp + 0x10)) != 0) {\n        goto label_0;\n    }\n    eax ^= 1;\n    r12++;\n    eax &= r10d;\nlabel_16:\n    if (al == 0) {\n        goto label_1;\n    }\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x27;\n    }\n    rax = rbx + 1;\n    if (r14 > rax) {\n        *((r15 + rbx + 1)) = 0x27;\n    }\n    rbx += 2;\n    r10d = 0;\n    goto label_1;\n    *((rsp + 0x10)) = 0;\n    if (r11d == 2) {\n        goto label_57;\n    }\n    if (r11d == 5) {\n        goto label_58;\n    }\n    dl = (r11d == 2) ? 1 : 0;\n    r13d = 0;\n    goto label_2;\n    *((rsp + 0x10)) = 0;\n    if (r11d == 2) {\n        goto label_3;\n    }\n    *((rsp + 0x6d)) = r13b;\n    edx = 0;\n    goto label_2;\n    *((rsp + 0x10)) = 0;\nlabel_15:\n    edx = *((rsp + 8));\n    dl &= *((rsp + 0x6c));\n    ecx = 0x5c;\n    al = (*((rsp + 0x28)) != 0) ? 1 : 0;\n    dl &= al;\n    if (dl != 0) {\n        goto label_59;\n    }\nlabel_8:\n    if (*((rsp + 8)) != 0) {\n        goto label_60;\n    }\nlabel_7:\n    r13d = 0;\n    goto label_2;\nlabel_6:\n    edx = 0;\n    r13d = 0;\n    if (*((rsp + 0x6c)) == 0) {\n        goto label_4;\n    }\nlabel_54:\n    r13d = r11d;\n    eax = edx;\n    r11 = r9;\nlabel_42:\nlabel_12:\n    eax = 4;\n    if (*((rsp + 8)) != 0) {\n        r13d = eax;\n    }\nlabel_43:\n    r9d &= 0xfffffffd;\n    rax = fcn_00405360 (r15, r14, *((rsp + 0x40)), r11, r13d, *((rsp + 0x88)));\n    goto label_5;\n    rbx = rax;\nlabel_44:\n    rax = rbx;\n    return rax;\n    goto label_6;\n    *((rsp + 0x10)) = 0;\n    edx = 0;\n    goto label_7;\n    *((rsp + 0x10)) = 0;\n    ecx = 0x72;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    do {\nlabel_20:\n        if (*((rsp + 0x6c)) != 0) {\n            goto label_61;\n        }\nlabel_34:\n        r13d = 0;\n        goto label_9;\n    } while (1);\nlabel_14:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_62;\n    }\n    *((rsp + 0x10)) = 0;\n    eax = r10d;\n    dl = (r11d == 2) ? 1 : 0;\n    eax ^= 1;\n    al &= dl;\n    if (al == 0) {\n        goto label_63;\n    }\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x27;\n    }\n    rcx = rbx + 1;\n    if (r14 > rcx) {\n        *((r15 + rbx + 1)) = 0x24;\n    }\n    rcx = rbx + 2;\n    if (r14 > rcx) {\n        *((r15 + rbx + 2)) = 0x27;\n    }\n    rcx = rbx + 3;\n    if (r14 <= rcx) {\n        goto label_64;\n    }\nlabel_26:\n    *((r15 + rcx)) = 0x5c;\n    r10d = eax;\nlabel_25:\n    rbx = rcx + 1;\n    if (r11d == 2) {\n        goto label_65;\n    }\n    rax = r12 + 1;\n    if (rax < r9) {\n        rax = *((rsp + 0x20));\n        eax = *((rax + r12 + 1));\n        *((rsp + 0x30)) = al;\n        eax -= 0x30;\n        if (al <= 9) {\n            goto label_66;\n        }\n    }\nlabel_35:\n    eax = *((rsp + 8));\n    eax ^= 1;\n    al |= dl;\n    eax = r13d;\n    r13d = 0;\n    if (al == 0) {\n        goto label_10;\n    }\n    goto label_11;\nlabel_19:\n    *((rsp + 0x10)) = 0;\n    do {\nlabel_52:\n        if (*((rsp + 0x60)) != 1) {\n            goto label_67;\n        }\n        *((rsp + 0x40)) = r11d;\n        *((rsp + 0x38)) = r9;\n        *((rsp + 0x30)) = r10b;\n        rax = ctype_b_loc ();\n        edx = (int32_t) bpl;\n        r10d = *((rsp + 0x30));\n        r9 = *((rsp + 0x38));\n        rax = *(rax);\n        r11d = *((rsp + 0x40));\n        edi = 1;\n        eax = *((rax + rdx*2));\n        ax &= 0x4000;\n        r13b = (ax != 0) ? 1 : 0;\n        dl = (ax == 0) ? 1 : 0;\n        dl &= *((rsp + 8));\nlabel_37:\n        if (dl != 0) {\n            goto label_68;\n        }\n        dl = (r11d == 2) ? 1 : 0;\n        goto label_2;\nlabel_48:\n        ebp = *(r8);\n    } while (bpl > 0x7e);\n    eax = (int32_t) bpl;\n    /* switch table (127 cases) at 0x40bbf0 */\n    ecx = 0x6e;\nlabel_13:\n    eax = *((rsp + 0x6c));\n    dl = (r11d == 2) ? 1 : 0;\n    al &= dl;\n    *((rsp + 0x10)) = al;\n    if (al == 0) {\n        goto label_8;\n    }\nlabel_53:\n    r11 = r9;\n    r13d = 2;\n    goto label_12;\n    ecx = 0x74;\n    goto label_13;\n    ecx = 0x62;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    ecx = 0x61;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    if (*((rsp + 8)) != 0) {\n        goto label_14;\n    }\n    if ((*((rsp + 0x68)) & 1) != 0) {\n        goto label_69;\n    }\n    *((rsp + 0x10)) = 0;\n    dl = (r11d == 2) ? 1 : 0;\n    r13d = 0;\n    ebp = 0;\n    goto label_2;\n    if (r11d != 2) {\n        goto label_15;\n    }\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_55;\n    }\n    r12++;\n    eax = r10d;\n    r13d = 0;\n    goto label_16;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_17;\n    dl = (r11d == 2) ? 1 : 0;\n    r13d = 0;\n    goto label_18;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_18;\n    ecx = 0x72;\n    goto label_13;\n    ecx = 0x66;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    ecx = 0x76;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\nlabel_49:\n    ebp = *(r8);\n    if (bpl > 0x7e) {\n        goto label_19;\n    }\n    eax = (int32_t) bpl;\n    /* switch table (127 cases) at 0x40bfe8 */\n    eax = 0;\n    do {\nlabel_31:\n        r13d = *((rsp + 0x10));\n        *((rsp + 0x10)) = al;\n        eax = 0;\n        goto label_10;\n        eax = 0;\nlabel_32:\n        if (r12 != 0) {\n            goto label_70;\n        }\n        r13d = *((rsp + 0x10));\n        edx = 0;\n        *((rsp + 0x10)) = al;\n        goto label_2;\n        eax = 0;\nlabel_33:\n    } while (1);\n    goto label_6;\n    goto label_20;\nlabel_47:\n    r13d = r11d;\n    r11 = r9;\n    dl = (r13d == 2) ? 1 : 0;\n    if (rbx == 0) {\n        if ((*((rsp + 0x6c)) & dl) != 0) {\n            goto label_71;\n        }\n    }\n    eax = *((rsp + 0x6c));\n    eax ^= 1;\n    dl &= al;\n    if (dl == 0) {\n        goto label_72;\n    }\n    if (*((rsp + 0x6d)) == 0) {\n        goto label_45;\n    }\n    if (*((rsp + 0x1f)) != 0) {\n        goto label_73;\n    }\n    al = (r14 == 0) ? 1 : 0;\n    dl = (*((rsp + 0x58)) != 0) ? 1 : 0;\n    al &= dl;\n    if (al == 0) {\n        goto label_74;\n    }\n    r14 = *((rsp + 0x58));\nlabel_46:\n    *(r15) = 0x27;\n    r13d = 2;\n    ebx = 1;\n    *((rsp + 0x50)) = 0x40ccaf;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x6c)) = 0;\n    *((rsp + 0x6d)) = al;\n    goto label_21;\nlabel_58:\n    if ((*((rsp + 0x68)) & 4) != 0) {\n        rax = r12 + 2;\n        if (rax >= r9) {\n            goto label_39;\n        }\n        rsi = *((rsp + 0x20));\n        if (*((rsi + r12 + 1)) == 0x3f) {\n            goto label_75;\n        }\n    }\nlabel_39:\n    edx = 0;\n    r13d = 0;\n    goto label_2;\nlabel_57:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_55;\n    }\n    r13d = 0;\n    eax = 0;\n    goto label_11;\nlabel_67:\n    *((rsp + 0x88)) = 0;\n    if (r9 == -1) {\n        *((rsp + 0x40)) = r11d;\n        *((rsp + 0x38)) = r10b;\n        *((rsp + 0x30)) = r8;\n        rax = strlen (*((rsp + 0x20)));\n        r11d = *((rsp + 0x40));\n        r10d = *((rsp + 0x38));\n        r8 = *((rsp + 0x30));\n        r9 = rax;\n    }\n    eax = 0;\n    *((rsp + 0x70)) = rbx;\n    *((rsp + 0x78)) = r8;\n    rbx = rax;\n    *((rsp + 0x6e)) = r10b;\n    *((rsp + 0x6f)) = bpl;\n    *((rsp + 0x40)) = r15;\n    *((rsp + 0x48)) = r14;\n    *((rsp + 0x30)) = r9;\n    *((rsp + 0x38)) = r11d;\n    while (*((rsp + 0x38)) != 2) {\nlabel_22:\n        eax = iswprint (*((rsp + 0x84)));\n        rdi = rsp + 0x88;\n        eax = 0;\n        if (eax == 0) {\n            r13d = eax;\n        }\n        rbx += r14;\n        eax = mbsinit (rdi);\n        if (eax != 0) {\n            goto label_76;\n        }\n        rax = *((rsp + 0x20));\n        r15 = r12 + rbx;\n        rbp = rax + r15;\n        rdx -= r15;\n        rax = fcn_00409a40 (rsp + 0x84, rbp, *((rsp + 0x30)), rsp + 0x88);\n        r14 = rax;\n        if (rax == 0) {\n            goto label_76;\n        }\n        if (rax == -1) {\n            goto label_77;\n        }\n        if (rax == 0xfffffffffffffffe) {\n            goto label_78;\n        }\n    }\n    if (*((rsp + 0x6c)) == 0) {\n        goto label_22;\n    }\n    if (rax == 1) {\n        goto label_22;\n    }\n    rsi = *((rsp + 0x20));\n    rax = rsi + r15 + 1;\n    rsi += r14;\n    rsi += r15;\n    goto label_79;\nlabel_23:\n    rax++;\n    if (rsi == rax) {\n        goto label_22;\n    }\nlabel_79:\n    ecx = *(rax);\n    ecx -= 0x5b;\n    if (cl > 0x21) {\n        goto label_23;\n    }\n    edx = 1;\n    rdx <<= cl;\n    rcx = 0x20000002b;\n    if ((rdx & rcx) == 0) {\n        goto label_23;\n    }\n    r15 = *((rsp + 0x40));\n    r14 = *((rsp + 0x48));\n    r13d = 2;\n    r11 = *((rsp + 0x30));\n    goto label_12;\nlabel_70:\n    *((rsp + 0x10)) = al;\n    r13d = 0;\n    goto label_24;\nlabel_63:\n    rcx = rbx;\n    if (r14 <= rbx) {\n        goto label_25;\n    }\n    eax = r10d;\n    goto label_26;\nlabel_56:\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x27;\n    }\n    rax = rbx + 1;\n    if (r14 > rax) {\n        *((r15 + rbx + 1)) = 0x5c;\n    }\n    rax = rbx + 2;\n    if (r14 <= rax) {\n        goto label_80;\n    }\n    rdx = r14;\n    *((r15 + rbx + 2)) = 0x27;\n    r14 = *((rsp + 0x58));\n    goto label_27;\nlabel_69:\n    r12++;\n    goto label_28;\nlabel_68:\n    edx = *((rsp + 8));\n    r13d = 0;\nlabel_36:\n    rcx = rdi;\n    *((rsp + 0x30)) = r13b;\n    esi = 0;\n    r13d = *((rsp + 0x6c));\n    rcx += r12;\n    edi = *((rsp + 0x10));\n    r8 = *((rsp + 0x20));\n    while (dl != 0) {\n        al = (r11d == 2) ? 1 : 0;\n        if (r13b != 0) {\n            goto label_81;\n        }\n        esi = r10d;\n        esi ^= 1;\n        al &= sil;\n        if (al != 0) {\n            if (r14 > rbx) {\n                *((r15 + rbx)) = 0x27;\n            }\n            rsi = rbx + 1;\n            if (r14 > rsi) {\n                *((r15 + rbx + 1)) = 0x24;\n            }\n            rsi = rbx + 2;\n            if (r14 > rsi) {\n                *((r15 + rbx + 2)) = 0x27;\n            }\n            rbx += 3;\n            r10d = eax;\n        }\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x5c;\n        }\n        rax = rbx + 1;\n        if (r14 > rax) {\n            eax = ebp;\n            al >>= 6;\n            eax += 0x30;\n            *((r15 + rbx + 1)) = al;\n        }\n        rax = rbx + 2;\n        if (r14 > rax) {\n            eax = ebp;\n            al >>= 3;\n            eax &= 7;\n            eax += 0x30;\n            *((r15 + rbx + 2)) = al;\n        }\n        ebp &= 7;\n        r12++;\n        rbx += 3;\n        ebp += 0x30;\n        if (r12 >= rcx) {\n            goto label_82;\n        }\n        esi = edx;\nlabel_29:\n        if (r14 > rbx) {\n            *((r15 + rbx)) = bpl;\n        }\n        ebp = *((r8 + r12));\n        rbx++;\n    }\n    eax = esi;\n    eax ^= 1;\n    eax &= r10d;\n    if (dil != 0) {\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x5c;\n        }\n        rbx++;\n    }\n    r12++;\n    if (r12 < rcx) {\n        if (al == 0) {\n            goto label_83;\n        }\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x27;\n        }\n        rax = rbx + 1;\n        if (r14 > rax) {\n            *((r15 + rbx + 1)) = 0x27;\n        }\n        rbx += 2;\n        edi = 0;\n        r10d = 0;\n        goto label_29;\n    }\n    r13d = *((rsp + 0x30));\n    goto label_16;\nlabel_81:\n    r13d = r11d;\n    *((rsp + 8)) = al;\n    r11 = r9;\n    goto label_12;\nlabel_64:\n    rbx += 4;\n    r10d = eax;\n    r13d = 0;\n    goto label_11;\n    if (ebp != 0) {\n        goto label_30;\n    }\n    *((rsp + 8)) = 1;\n    do {\n        if (r14 != 0) {\n            goto label_84;\n        }\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 1;\n        r13d = 2;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x6c)) = 0;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40ccaf;\n        goto label_21;\n        if (ebp != 0) {\n            goto label_85;\n        }\n        if (r14 == 0) {\n            goto label_86;\n        }\n        *(r15) = 0x22;\n        r10d = 0;\n        *((rsp + 0x1f)) = 1;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\nlabel_38:\n        *((rsp + 0x6c)) = 0;\n        ebx = 1;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40b724;\n        goto label_21;\n        if (r14 != 0) {\n            *((rsp + 8)) = r11;\n            rax = fcn_00405260 (0x40b735, r13d);\n            *((rsp + 0xd8)) = rax;\n            rax = fcn_00405260 (0x40ccaf, r13d);\n            r11 = *((rsp + 8));\n            *((rsp + 0xe0)) = rax;\n        }\n        ebx = 0;\n        if (ebp == 0) {\n            goto label_87;\n        }\nlabel_41:\n        *((rsp + 0x10)) = r11;\n        rax = strlen (*((rsp + 0xe0)));\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        r11 = *((rsp + 0x10));\n        *((rsp + 0x28)) = rax;\n        rax = *((rsp + 0xe0));\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x50)) = rax;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 8)) = 1;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 0;\n        *((rsp + 8)) = 0;\n        *((rsp + 0x28)) = 0;\n        *((rsp + 0x50)) = 0;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        r13d = 5;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 1;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40b724;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 0;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 0;\n        *((rsp + 0x50)) = 0;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        r13d = 2;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 1;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40ccaf;\n        goto label_21;\n        eax = *((rsp + 0x10));\n        goto label_31;\n        eax = *((rsp + 0x10));\n        goto label_32;\n        eax = *((rsp + 0x10));\n        goto label_33;\n        edx = 0;\n        r13d = 0;\n        goto label_4;\n        goto label_34;\nlabel_66:\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x30;\n        }\n        rax = rcx + 2;\n        if (r14 > rax) {\n            *((r15 + rcx + 2)) = 0x30;\n        }\n        rbx = rcx + 3;\n        goto label_35;\n        if (ebp != 0) {\n            goto label_88;\n        }\n        *((rsp + 8)) = 0;\n    } while (1);\nlabel_82:\n    r13d = *((rsp + 0x30));\n    goto label_1;\nlabel_59:\n    r12++;\n    eax = r10d;\n    r13d = 0;\n    goto label_16;\nlabel_83:\n    edi = 0;\n    goto label_29;\nlabel_76:\n    rdi = rbx;\n    edx = r13d;\n    ebp = *((rsp + 0x6f));\n    rbx = *((rsp + 0x70));\n    r10d = *((rsp + 0x6e));\n    r15 = *((rsp + 0x40));\n    edx ^= 1;\n    r14 = *((rsp + 0x48));\n    r9 = *((rsp + 0x30));\n    r11d = *((rsp + 0x38));\n    dl &= *((rsp + 8));\nlabel_40:\n    if (rdi > 1) {\n        goto label_36;\n    }\n    goto label_37;\nlabel_86:\n    *((rsp + 0x58)) = 0;\n    r10d = 0;\n    *((rsp + 0x1f)) = 1;\n    *((rsp + 0x6d)) = 0;\n    goto label_38;\nlabel_65:\n    eax = r13d;\n    r13d = 0;\n    goto label_11;\nlabel_75:\n    ebp = *((rsi + rax));\n    if (bpl > 0x3e) {\n        goto label_39;\n    }\n    rsi = 0x7000a38200000000;\n    if (((rsi >> rbp) & 1) >= 0) {\n        goto label_39;\n    }\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_51;\n    }\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x3f;\n    }\n    rdx = rbx + 1;\n    if (r14 > rdx) {\n        *((r15 + rbx + 1)) = 0x22;\n    }\n    rdx = rbx + 2;\n    if (r14 > rdx) {\n        *((r15 + rbx + 2)) = 0x22;\n    }\n    rdx = rbx + 3;\n    if (r14 > rdx) {\n        *((r15 + rbx + 3)) = 0x3f;\n    }\n    rbx += 4;\n    edx = 0;\n    r13d = 0;\n    r12 = rax;\n    goto label_35;\nlabel_77:\n    rdi = rbx;\n    ebp = *((rsp + 0x6f));\n    rbx = *((rsp + 0x70));\n    r13d = 0;\n    r10d = *((rsp + 0x6e));\n    r15 = *((rsp + 0x40));\n    r14 = *((rsp + 0x48));\n    r9 = *((rsp + 0x30));\n    r11d = *((rsp + 0x38));\n    edx = *((rsp + 8));\n    goto label_40;\nlabel_78:\n    r9 = *((rsp + 0x30));\n    rsi = r15;\n    rcx = rbp;\n    rax = rbx;\n    rdi = rbx;\n    r8 = *((rsp + 0x78));\n    r10d = *((rsp + 0x6e));\n    ebp = *((rsp + 0x6f));\n    rbx = *((rsp + 0x70));\n    r15 = *((rsp + 0x40));\n    r14 = *((rsp + 0x48));\n    r11d = *((rsp + 0x38));\n    if (rsi >= r9) {\n        goto label_89;\n    }\n    if (*(rcx) != 0) {\n        goto label_90;\n    }\n    goto label_89;\n    do {\n        if (*((r8 + rax)) == 0) {\n            goto label_91;\n        }\nlabel_90:\n        rax++;\n        rdx = r12 + rax;\n    } while (rdx < r9);\nlabel_91:\n    rdi = rax;\nlabel_89:\n    edx = *((rsp + 8));\n    r13d = 0;\n    goto label_40;\nlabel_87:\n    rax = *((rsp + 0xd8));\n    eax = *(rax);\n    if (al == 0) {\n        goto label_41;\n    }\n    rdx = *((rsp + 0xd8));\n    do {\n        if (r14 > rbx) {\n            *((r15 + rbx)) = al;\n        }\n        rbx++;\n        eax = *((rdx + rbx));\n    } while (al != 0);\n    goto label_41;\nlabel_61:\n    r13d = r11d;\n    eax = 0;\n    r11 = r9;\n    goto label_42;\nlabel_85:\n    *((rsp + 0x1f)) = 1;\n    r10d = 0;\n    ebx = 0;\n    *((rsp + 0x6d)) = 0;\n    *((rsp + 0x58)) = 0;\n    *((rsp + 0x6c)) = 1;\n    *((rsp + 8)) = 1;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x50)) = 0x40b724;\n    goto label_21;\nlabel_51:\n    r13d = r11d;\n    r11 = r9;\n    goto label_43;\nlabel_72:\n    edx = eax;\nlabel_45:\n    rax = *((rsp + 0x50));\n    if (rax == 0) {\n        goto label_92;\n    }\n    if (dl == 0) {\n        goto label_92;\n    }\n    edx = *(rax);\n    if (dl == 0) {\n        goto label_92;\n    }\n    rax -= rbx;\n    do {\n        if (r14 > rbx) {\n            *((r15 + rbx)) = dl;\n        }\n        rbx++;\n        edx = *((rax + rbx));\n    } while (dl != 0);\nlabel_92:\n    if (r14 <= rbx) {\n        goto label_44;\n    }\n    *((r15 + rbx)) = 0;\n    goto label_44;\nlabel_55:\n    r13d = r11d;\n    r11 = r9;\n    goto label_12;\nlabel_62:\n    r13d = r11d;\n    r11 = r9;\n    rsp + 8 = (r13d == 2) ? 1 : 0;\n    goto label_12;\nlabel_73:\n    rax = fcn_00405360 (r15, *((rsp + 0x78)), *((rsp + 0x40)), r11, 5, *((rsp + 0x88)));\n    goto label_5;\n    rbx = rax;\n    goto label_44;\nlabel_74:\n    edx = *((rsp + 0x6d));\n    goto label_45;\nlabel_71:\n    r13d = 2;\n    goto label_12;\nlabel_84:\n    r10d = 0;\n    eax = 0;\n    *((rsp + 0x1f)) = 1;\n    *((rsp + 0x58)) = 0;\n    goto label_46;\nlabel_80:\n    rdx = r14;\n    r14 = *((rsp + 0x58));\n    goto label_27;\nlabel_88:\n    *((rsp + 0x1f)) = 1;\n    r10d = 0;\n    ebx = 0;\n    *((rsp + 0x6d)) = 0;\n    *((rsp + 0x58)) = 0;\n    *((rsp + 0x6c)) = 1;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x50)) = 0x40ccaf;\n    goto label_21;\nlabel_60:\n    r13d = 0;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00406590",
            "funcStartAddr": "0x406590",
            "funcEndAddr": "0x40ac49",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406590 */\n#include <stdint.h>\n \nuint64_t fcn_00406590 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_8h;\n    int64_t var_30h;\n    int64_t var_18h;\n    int64_t var_24h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    do {\n        abort ();\n        r15 = (int64_t) edi;\n        r14 = rdx;\n        *((rsp + 8)) = rsi;\n        rax = errno_location ();\n        rbx = *(0x0060f338);\n        r13 = rax;\n        eax = *(rax);\n        *((rsp + 0x18)) = eax;\n    } while (r15d < 0);\n    if (*(0x0060f350) > r15d) {\n        goto label_0;\n    }\n    if (r15d == 0x7fffffff) {\n        goto label_1;\n    }\n    r12d = r15 + 1;\n    rsi = (int64_t) r12d;\n    rsi <<= 4;\n    if (rbx == 0x60f340) {\n        goto label_2;\n    }\n    rax = fcn_004082a0 (rbx, rsi);\n    *(0x0060f338) = rax;\n    rbx = rax;\n    do {\n        rdi = *(0x0060f350);\n        edx -= edi;\n        rdi <<= 4;\n        rdx = (int64_t) edx;\n        rdi += rbx;\n        rdx <<= 4;\n        memset (rdi, 0, r12d);\n        *(0x0060f350) = r12d;\nlabel_0:\n        eax = *((rbp + 4));\n        r15 <<= 4;\n        rbx += r15;\n        r15 = rbp + 8;\n        eax |= 1;\n        r11 = *(rbx);\n        r12 = *((rbx + 8));\n        *((rsp + 0x24)) = eax;\n        rsi = r11;\n        *((rsp + 0x30)) = r11;\n        rax = fcn_00405360 (r12, rsi, *((rsp + 0x28)), r14, *(rbp), eax);\n        r11 = *((rsp + 0x10));\n        if (r11 <= rax) {\n            rsi = rax + 1;\n            *(rbx) = rsi;\n            if (r12 != 0x60f3c0) {\n                *((rsp + 0x10)) = rsi;\n                free (r12);\n                rsi = *((rsp + 0x10));\n            }\n            *((rsp + 0x10)) = rsi;\n            rax = fcn_00408240 (*((rsp + 0x10)));\n            *((rbx + 8)) = rax;\n            rdi = rax;\n            r12 = rax;\n            fcn_00405360 (rdi, *((rsp + 0x30)), *((rsp + 0x28)), r14, *(rbp), *((rsp + 0x3c)));\n        }\n        eax = *((rsp + 0x18));\n        *(r13) = eax;\n        rax = r12;\n        return rax;\nlabel_2:\n        rax = fcn_004082a0 (0, rsi);\n        __asm (\"movdqa xmm0, xmmword [0x0060f340]\");\n        rbx = rax;\n        *(0x0060f338) = rax;\n        __asm (\"movups xmmword [rax], xmm0\");\n    } while (1);\nlabel_1:\n    return fcn_00408490 ();\n}\n"
        },
        {
            "funcName": "fcn_00406ab0",
            "funcStartAddr": "0x406ab0",
            "funcEndAddr": "0x40b54e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406ab0 */\n#include <stdint.h>\n \nint64_t fcn_00406ab0 (int64_t arg1, uint32_t arg2, int64_t arg3) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    do {\n        abort ();\n    } while (esi == 0xa);\n    rax = rdx;\n    *(rsp) = esi;\n    *((rsp + 4)) = 0;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x10)) = 0;\n    *((rsp + 0x18)) = 0;\n    *((rsp + 0x20)) = 0;\n    *((rsp + 0x28)) = 0;\n    *((rsp + 0x30)) = 0;\n    fcn_00406590 (rdi, rax, 0xffffffffffffffff, rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00406c30",
            "funcStartAddr": "0x406c30",
            "funcEndAddr": "0x406cc1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406c30 */\n#include <stdint.h>\n \nint64_t fcn_00406c30 (int64_t arg1, int64_t arg7, int64_t arg8, int64_t arg9) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdi = arg1;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    do {\n        rax = imp.__libc_start_main;\n        ecx = edx;\n        __asm (\"movdqa xmm0, xmmword [0x0060f4c0]\");\n        __asm (\"movdqa xmm1, xmmword [0x0060f4d0]\");\n        __asm (\"movdqa xmm2, xmmword [0x0060f4e0]\");\n        ecx &= 0x1f;\n        *((rsp + 0x30)) = rax;\n        eax = edx;\n        al >>= 5;\n        *(rsp) = xmm0;\n        eax = (int32_t) al;\n        *((rsp + 0x10)) = xmm1;\n        r8 = rsp + rax*4 + 8;\n        *((rsp + 0x20)) = xmm2;\n        edx = *(r8);\n        eax = *(r8);\n        eax >>= cl;\n        eax = ~eax;\n        eax &= 1;\n        eax <<= cl;\n        eax ^= edx;\n        *(r8) = eax;\n        fcn_00406590 (0, rdi, rsi, rsp);\n        return rax;\n        edx = 0x3a;\n        rsi = 0xffffffffffffffff;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00406c60",
            "funcStartAddr": "0x406c60",
            "funcEndAddr": "0x40b8aa",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406c60 */\n#include <stdint.h>\n \nint64_t fcn_00406c60 (uint32_t arg2, int64_t arg3) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rsi = arg2;\n    rdx = arg3;\n    do {\n        abort ();\n    } while (esi == 0xa);\n    rcx = 0x400000000000000;\n    rax = rdx;\n    *(rsp) = esi;\n    *((rsp + 8)) = rcx;\n    *((rsp + 4)) = 0;\n    *((rsp + 0x10)) = 0;\n    *((rsp + 0x18)) = 0;\n    *((rsp + 0x20)) = 0;\n    *((rsp + 0x28)) = 0;\n    *((rsp + 0x30)) = 0;\n    fcn_00406590 (rdi, rax, 0xffffffffffffffff, rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00406dc0",
            "funcStartAddr": "0x406dc0",
            "funcEndAddr": "0x406dd1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406dc0 */\n#include <stdint.h>\n \nvoid fcn_00406dc0 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    ecx = 0x60f300;\n    rdx = 0xffffffffffffffff;\n    return void (*0x406590)() ();\n}\n"
        },
        {
            "funcName": "fcn_00406de0",
            "funcStartAddr": "0x406de0",
            "funcEndAddr": "0x406df6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406de0 */\n#include <stdint.h>\n \nvoid fcn_00406de0 (int64_t arg1) {\n    rdi = arg1;\n    rsi = rdi;\n    ecx = 0x60f300;\n    rdx = 0xffffffffffffffff;\n    edi = 0;\n    return void (*0x406590)() ();\n}\n"
        },
        {
            "funcName": "fcn_00406e30",
            "funcStartAddr": "0x406e30",
            "funcEndAddr": "0x406e5f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406e30 */\n#include <stdint.h>\n \nuint64_t fcn_00406e30 (void) {\n    rax = fcn_00407050 (rdi, rsi);\n    rbx = rax;\n    eax = 0;\n    if (rbx != 0) {\n        fcn_00408240 (0x18);\n        *(rax) = rbx;\n        *((rax + 0x10)) = 0;\n        *((rax + 8)) = 0;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00406e60",
            "funcStartAddr": "0x406e60",
            "funcEndAddr": "0x406e64",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406e60 */\n#include <stdint.h>\n \nint64_t fcn_00406e60 (int64_t arg1) {\n    rdi = arg1;\n    rax = *(rdi);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00406e70",
            "funcStartAddr": "0x406e70",
            "funcEndAddr": "0x406f65",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x406e70 */\n#include <stdint.h>\n \nint64_t fcn_00406e70 (int64_t arg1, int64_t arg2) {\n    int64_t var_8h;\n    rdi = arg1;\n    rsi = arg2;\n    r15 = rdi;\n    r14 = rsi + 1;\n    r13 = rsi;\n    r12 = *(rdi);\n    rbp = *((rdi + 8));\n    rbx = *((rdi + 0x10));\n    while (rbx >= r13) {\n        if (rbx == r13) {\n            goto label_1;\n        }\nlabel_0:\n        rax = rbx;\n        edx = 0;\n        rax -= r13;\n        rax = rdx:rax / r14;\n        rdx = rdx:rax % r14;\n        rsi = rdx;\n        rcx = rax;\n        rbx -= rdx;\n        rax = rbp;\n        edx = 0;\n        rax = rdx:rax / r14;\n        rdx = rdx:rax % r14;\n        if (rbp <= rbx) {\n            goto label_2;\n        }\n        rbx = rsi - 1;\n    }\n    rax = rbx;\n    edx = 0;\n    do {\n        rax <<= 8;\n        rdx++;\n        rax += 0xff;\n    } while (r13 > rax);\n    fcn_00407360 (r12, rsp + 8, rdx);\n    rax = rsp + 8;\n    do {\n        edx = *(rax);\n        rbx <<= 8;\n        rbp <<= 8;\n        rax++;\n        rbx += 0xff;\n        rbp += rdx;\n    } while (r13 > rbx);\n    if (rbx != r13) {\n        goto label_0;\n    }\nlabel_1:\n    *((r15 + 0x10)) = 0;\n    *((r15 + 8)) = 0;\n    do {\n        rax = rbp;\n        return rax;\nlabel_2:\n        *((r15 + 8)) = rax;\n        *((r15 + 0x10)) = rcx;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00407050",
            "funcStartAddr": "0x407050",
            "funcEndAddr": "0x40733f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x407050 */\n#include <stdint.h>\n \nuint64_t fcn_00407050 (int64_t arg1, int64_t arg2) {\n    int64_t var_8h;\n    uid_t var_10h;\n    rdi = arg1;\n    rsi = arg2;\n    if (rsi == 0) {\n        goto label_3;\n    }\n    r12 = rdi;\n    if (rdi == 0) {\n        goto label_4;\n    }\n    rax = fcn_00409b20 (rdi, 0x40c4a4);\n    r13 = rax;\n    if (rax == 0) {\n        goto label_5;\n    }\n    fcn_00408240 (0x1038);\n    ecx = 0x1000;\n    rdi = r13;\n    *(rax) = r13;\n    if (rbp <= 0x1000) {\n        rcx = rbp;\n    }\n    *((rax + 8)) = 0x406ff0;\n    rbx = rax;\n    *((rax + 0x10)) = r12;\n    setvbuf (rdi, rax + 0x18, 0, rcx);\n    do {\nlabel_0:\n        rax = rbx;\n        return rax;\nlabel_4:\n        fcn_00408240 (0x1038);\n        *(rax) = 0;\n        rbx = rax;\n        r13 = rax + 0x20;\n        *((rax + 8)) = 0x406ff0;\n        *((rax + 0x10)) = 0;\n        *((rax + 0x18)) = 0;\n        eax = 0;\n        eax = open (\"/dev/urandom\", 0, rdx);\n        r15d = eax;\n        if (eax < 0) {\n            goto label_6;\n        }\n        rdx = rbp;\n        edi = eax;\n        rsi = r13;\n        r14d = 0x800;\n        ecx = 0x1018;\n        if (rbp > 0x800) {\n            rdx = r14;\n        }\n        rax = read_chk ();\n        close (r15d);\n        if (rbp <= 0x7ff) {\n            goto label_7;\n        }\nlabel_1:\n        fcn_004077c0 (r13);\n    } while (1);\nlabel_3:\n    rax = fcn_00408240 (0x1038);\n    rbx = rax;\n    *(rax) = 0;\n    *((rax + 8)) = 0x406ff0;\n    *((rax + 0x10)) = 0;\n    goto label_0;\nlabel_6:\n    r12 = rsp + 0x10;\n    esi = 0;\n    r14d = 0x14;\n    rdi = r12;\n    gettimeofday ();\n    __asm (\"movdqa xmm0, xmmword [rsp + 0x10]\");\n    __asm (\"movups xmmword [rbx + 0x20], xmm0\");\n    eax = getpid ();\n    *((rsp + 0x10)) = eax;\n    *((rbx + 0x30)) = eax;\nlabel_2:\n    eax = 4;\n    rbp -= r14;\n    if (rbp > 4) {\n    }\n    eax = getppid ();\n    rsi = r13 + r14;\n    *((rsp + 0x10)) = eax;\n    edi = ebp;\n    if (ebp == 0) {\n        goto label_8;\n    }\n    eax = 0;\n    do {\n        edx = eax;\n        eax++;\n        ecx = *((r12 + rdx));\n        *((rsi + rdx)) = cl;\n    } while (eax < edi);\nlabel_8:\n    rbp += r14;\n    if (rbp > 0x7ff) {\n        goto label_1;\n    }\n    r14d = 0x800;\n    eax = 4;\n    r14 -= rbp;\n    if (r14 > 4) {\n        r14 = rax;\n    }\n    eax = getuid ();\n    rsi = r13 + rbp;\n    *((rsp + 0x10)) = eax;\n    edi = r14d;\n    if (r14d == 0) {\n        goto label_9;\n    }\n    eax = 0;\n    do {\n        edx = eax;\n        eax++;\n        ecx = *((r12 + rdx));\n        *((rsi + rdx)) = cl;\n    } while (eax < edi);\nlabel_9:\n    rbp += r14;\n    if (rbp > 0x7ff) {\n        goto label_1;\n    }\n    eax = getgid ();\n    edx = 4;\n    rsi = r13 + rbp;\n    *((rsp + 0x10)) = eax;\n    eax = 0x800;\n    rax -= rbp;\n    if (rax > 4) {\n        rax = rdx;\n    }\n    edi = eax;\n    if (eax == 0) {\n        goto label_1;\n    }\n    eax = 0;\n    do {\n        edx = eax;\n        eax++;\n        ecx = *((r12 + rdx));\n        *((rsi + rdx)) = cl;\n    } while (eax < edi);\n    goto label_1;\nlabel_5:\n    ebx = 0;\n    goto label_0;\nlabel_7:\n    rcx = r14;\n    eax = 0x10;\n    __asm (\"cmovs rbp, r12\");\n    r12 = rsp + 0x10;\n    rdi = r12;\n    rcx -= rbp;\n    r15 = r13 + rbp;\n    if (rcx > 0x10) {\n        rcx = rax;\n    }\n    esi = 0;\n    rbp += rcx;\n    *((rsp + 8)) = rcx;\n    gettimeofday ();\n    rcx = *((rsp + 8));\n    rdi = r15;\n    rsi = r12;\n    *(rdi) = *(rsi);\n    rcx--;\n    rsi++;\n    rdi++;\n    if (rbp > 0x7ff) {\n        goto label_1;\n    }\n    r14 -= rbp;\n    eax = 4;\n    if (r14 > 4) {\n        r14 = rax;\n    }\n    eax = getpid ();\n    rsi = r12;\n    *((rsp + 0x10)) = eax;\n    ecx = r14d;\n    rax = r13 + rbp;\n    r14 += rbp;\n    rdi = rax;\n    *(rdi) = *(rsi);\n    rcx--;\n    rsi++;\n    rdi++;\n    if (r14 <= 0x7ff) {\n        goto label_2;\n    }\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00407360",
            "funcStartAddr": "0x407360",
            "funcEndAddr": "0x4074bc",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x407360 */\n#include <stdint.h>\n \nuint64_t fcn_00407360 (int64_t arg1, int64_t arg2, uint32_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r12 = rdi;\n    rbx = rdx;\n    r13 = *(rdi);\n    if (r13 == 0) {\n        goto label_1;\n    }\n    rax = errno_location ();\n    r15d = 0;\n    r14 = rax;\n    while (rbx != 0) {\n        rax = *(r12);\n        rdi = *((r12 + 0x10));\n        if ((*(rax) & 0x20) == 0) {\n            edx = r15d;\n        }\n        *(r14) = edx;\n        uint64_t (*r12 + 8)() ();\n        r13 = *(r12);\n        rdx = rbx;\n        rdi = rbp;\n        rcx = r13;\n        esi = 1;\n        rax = fread_unlocked ();\n        edx = *(r14);\n        rbp += rax;\n        rbx -= rax;\n    }\nlabel_0:\n    return rax;\nlabel_1:\n    r15 = *((rdi + 0x18));\n    r13 = rdi + 0x838;\n    r14 = rdi + 0x20;\n    if (rdx <= r15) {\n        goto label_2;\n    }\n    do {\n        rbp += r15;\n        rsi -= r15;\n        rbx -= r15;\n        rsi += r13;\n        memcpy (rbp, 0x800, r15);\n        if ((bpl & 7) == 0) {\n            goto label_3;\n        }\n        r15d = 0x800;\n        fcn_00407510 (r14, r13);\n    } while (rbx > 0x800);\n    goto label_4;\n    do {\n        rbp += 0x800;\n        fcn_00407510 (r14, rbp);\n        rbx -= 0x800;\n        if (rbx == 0) {\n            goto label_5;\n        }\nlabel_3:\n    } while (rbx > 0x7ff);\n    fcn_00407510 (r14, r13);\nlabel_4:\n    r15d = 0x800;\n    do {\n        memcpy (rbp, r13, rbx);\n        rcx = r15;\n        rcx -= rbx;\n        *((r12 + 0x18)) = rcx;\n        goto label_0;\nlabel_5:\n        *((r12 + 0x18)) = 0;\n        return rax;\nlabel_2:\n        r13 -= r15;\n        r13 += 0x800;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_004074c0",
            "funcStartAddr": "0x4074c0",
            "funcEndAddr": "0x407509",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4074c0 */\n#include <stdint.h>\n \nuint32_t fcn_004074c0 (int64_t arg1) {\n    rdi = arg1;\n    rdx = 0xffffffffffffffff;\n    esi = 0x1038;\n    rbx = rdi;\n    rbp = *(rdi);\n    explicit_bzero_chk ();\n    eax = free (rbx);\n    if (rbp != 0) {\n        rdi = rbp;\n        void (*0x408a10)() ();\n    }\n    eax = 0;\n    return eax;\n}\n"
        },
        {
            "funcName": "fcn_00407510",
            "funcStartAddr": "0x407510",
            "funcEndAddr": "0x4077b5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x407510 */\n#include <stdint.h>\n \nint64_t fcn_00407510 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rax = *((rdi + 0x810));\n    r11 = *((rdi + 0x808));\n    r10 = rdi + 0x400;\n    rdx = *((rdi + 0x800));\n    r9 = rsi;\n    r8 = rax + 1;\n    rax = rdi;\n    *((rdi + 0x810)) = r8;\n    r11 += r8;\n    do {\n        rcx = rdx;\n        rcx <<= 0x15;\n        rdx ^= rcx;\n        rcx = *(rax);\n        rdx = ~rdx;\n        rdx += *((rax + 0x400));\n        r8 = rcx;\n        r8d &= 0x7f8;\n        rbx = *((rdi + r8));\n        rbx += rdx;\n        r8 = rbx;\n        r8 += r11;\n        r11 = rdx;\n        *(rax) = r8;\n        r8 >>= 8;\n        r11 >>= 5;\n        r8d &= 0x7f8;\n        rdx ^= r11;\n        rbx = *((rdi + r8));\n        rbx += rcx;\n        *(r9) = rbx;\n        r8 = *((rax + 8));\n        rdx += *((rax + 0x408));\n        r11 = rdx;\n        rdx = r8;\n        edx &= 0x7f8;\n        rcx = *((rdi + rdx));\n        rdx = r11;\n        rdx <<= 0xc;\n        rcx += r11;\n        rdx ^= r11;\n        rcx += rbx;\n        *((rax + 8)) = rcx;\n        rcx >>= 8;\n        ecx &= 0x7f8;\n        rbx = *((rdi + rcx));\n        rbx += r8;\n        *((r9 + 8)) = rbx;\n        rcx = *((rax + 0x10));\n        rdx += *((rax + 0x410));\n        r8 = rcx;\n        r8d &= 0x7f8;\n        r11 = *((rdi + r8));\n        r11 += rdx;\n        r8 = r11;\n        r8 += rbx;\n        *((rax + 0x10)) = r8;\n        r8 >>= 8;\n        r8d &= 0x7f8;\n        rcx += *((rdi + r8));\n        *((r9 + 0x10)) = rcx;\n        r11 = rcx;\n        r8 = *((rax + 0x18));\n        rcx = rdx;\n        rcx >>= 0x21;\n        rdx ^= rcx;\n        rcx = r8;\n        rdx += *((rax + 0x418));\n        ecx &= 0x7f8;\n        rbx = *((rdi + rcx));\n        rbx += rdx;\n        rcx = rbx;\n        rcx += r11;\n        rax += 0x20;\n        r9 += 0x20;\n        *((rax - 8)) = rcx;\n        rcx >>= 8;\n        ecx &= 0x7f8;\n        r11 = *((rdi + rcx));\n        r11 += r8;\n        *((r9 - 8)) = r11;\n    } while (rax != r10);\n    rsi += 0x400;\n    r9 = rdi + 0x800;\n    do {\n        rcx = rdx;\n        rcx <<= 0x15;\n        rdx ^= rcx;\n        rcx = *(rax);\n        rdx = ~rdx;\n        rdx += *((rax - 0x400));\n        r8 = rcx;\n        r10 = rdx;\n        r8d &= 0x7f8;\n        r10 >>= 5;\n        rbx = *((rdi + r8));\n        rbx += rdx;\n        rdx ^= r10;\n        r8 = rbx;\n        r8 += r11;\n        *(rax) = r8;\n        r8 >>= 8;\n        r8d &= 0x7f8;\n        rcx += *((rdi + r8));\n        *(rsi) = rcx;\n        r8 = *((rax + 8));\n        r11 = rcx;\n        rdx += *((rax - 0x3f8));\n        r10 = rdx;\n        rdx = r8;\n        edx &= 0x7f8;\n        rcx = *((rdi + rdx));\n        rdx = r10;\n        rdx <<= 0xc;\n        rcx += r10;\n        rdx ^= r10;\n        rcx += r11;\n        *((rax + 8)) = rcx;\n        rcx >>= 8;\n        ecx &= 0x7f8;\n        r11 = *((rdi + rcx));\n        r11 += r8;\n        *((rsi + 8)) = r11;\n        rcx = *((rax + 0x10));\n        rdx += *((rax - 0x3f0));\n        r8 = rcx;\n        r8d &= 0x7f8;\n        rbx = *((rdi + r8));\n        rbx += rdx;\n        r8 = rbx;\n        r8 += r11;\n        *((rax + 0x10)) = r8;\n        r8 >>= 8;\n        r8d &= 0x7f8;\n        rcx += *((rdi + r8));\n        *((rsi + 0x10)) = rcx;\n        r10 = rcx;\n        r8 = *((rax + 0x18));\n        rcx = rdx;\n        rcx >>= 0x21;\n        rdx ^= rcx;\n        rcx = r8;\n        rdx += *((rax - 0x3e8));\n        ecx &= 0x7f8;\n        rbx = *((rdi + rcx));\n        rbx += rdx;\n        rcx = rbx;\n        rcx += r10;\n        rax += 0x20;\n        rsi += 0x20;\n        *((rax - 8)) = rcx;\n        rcx >>= 8;\n        ecx &= 0x7f8;\n        r11 = *((rdi + rcx));\n        r11 += r8;\n        *((rsi - 8)) = r11;\n    } while (rax != r9);\n    *((rdi + 0x800)) = rdx;\n    *((rdi + 0x808)) = r11;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004077c0",
            "funcStartAddr": "0x4077c0",
            "funcEndAddr": "0x407900",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4077c0 */\n#include <stdint.h>\n \nint64_t fcn_004077c0 (int64_t arg1) {\n    rdi = arg1;\n    rdx = rdi;\n    rax = rdi;\n    rcx = 0x98f5704f6c44c0ab;\n    rsi = 0x82f053db8355e0ce;\n    r11 = 0xb29b2e824a595524;\n    r12 = 0xae985bf2cbfc89ed;\n    r10 = 0x8c0ea5053d4712a0;\n    r9 = 0xb9f8b322c73ac862;\n    rbp = rdi + 0x800;\n    r8 = 0x647c4677a2884b7c;\n    rbx = 0x48fe4a0fa5a09315;\n    do {\n        r13 = *(rax);\n        rsi += *((rax + 0x20));\n        rcx += *((rax + 0x38));\n        rbx += *((rax + 0x28));\n        r13 -= rsi;\n        r12 += *((rax + 0x30));\n        r8 += r13;\n        r13 = rcx;\n        r13 >>= 9;\n        rcx += r8;\n        rbx ^= r13;\n        r13 = *((rax + 8));\n        r13 -= rbx;\n        r9 += r13;\n        r13 = r8;\n        r13 <<= 9;\n        r8 += r9;\n        r12 ^= r13;\n        r13 = *((rax + 0x10));\n        r13 -= r12;\n        r10 += r13;\n        r13 = r9;\n        r13 >>= 0x17;\n        r9 += r10;\n        rcx ^= r13;\n        r13 = *((rax + 0x18));\n        r13 -= rcx;\n        r11 += r13;\n        r13 = r10;\n        r13 <<= 0xf;\n        r10 += r11;\n        r8 ^= r13;\n        r13 = r11;\n        rsi -= r8;\n        r13 >>= 0xe;\n        *(rax) = r8;\n        r9 ^= r13;\n        r13 = rsi;\n        r11 += rsi;\n        rbx -= r9;\n        r13 <<= 0x14;\n        *((rax + 8)) = r9;\n        r10 ^= r13;\n        r13 = rsi + rbx;\n        rsi = rbx;\n        r12 -= r10;\n        rsi >>= 0x11;\n        *((rax + 0x10)) = r10;\n        rax += 0x40;\n        r11 ^= rsi;\n        rsi = r12;\n        rbx += r12;\n        rcx -= r11;\n        rsi <<= 0xe;\n        *((rax - 0x28)) = r11;\n        rsi ^= r13;\n        r12 += rcx;\n        *((rax - 0x18)) = rbx;\n        *((rax - 0x20)) = rsi;\n        *((rax - 0x10)) = r12;\n        *((rax - 8)) = rcx;\n    } while (rbp != rax);\n}\n"
        },
        {
            "funcName": "fcn_004079a6",
            "funcStartAddr": "0x4079a6",
            "funcEndAddr": "0x407a9a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4079a6 */\n#include <stdint.h>\n \nint64_t fcn_004079a6 (int64_t arg1, int64_t arg2, uint32_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    do {\n        rcx += *((rdx + 0x38));\n        rsi += *((rdx + 0x20));\n        r8 += *(rdx);\n        rax = rcx;\n        rbx += *((rdx + 0x28));\n        r8 -= rsi;\n        rax >>= 9;\n        r9 += *((rdx + 8));\n        r12 += *((rdx + 0x30));\n        rbx ^= rax;\n        rax = r8;\n        r10 += *((rdx + 0x10));\n        rcx += r8;\n        r9 -= rbx;\n        rax <<= 9;\n        r11 += *((rdx + 0x18));\n        r12 ^= rax;\n        rax = r9;\n        r8 += r9;\n        r10 -= r12;\n        rax >>= 0x17;\n        rcx ^= rax;\n        rax = r10;\n        r9 += r10;\n        r11 -= rcx;\n        rax <<= 0xf;\n        r8 ^= rax;\n        rax = r11;\n        r10 += r11;\n        rsi -= r8;\n        rax >>= 0xe;\n        *(rdx) = r8;\n        r9 ^= rax;\n        rax = rsi;\n        r11 += rsi;\n        rbx -= r9;\n        rax <<= 0x14;\n        *((rdx + 8)) = r9;\n        r10 ^= rax;\n        rax = rsi + rbx;\n        rsi = rbx;\n        r12 -= r10;\n        rsi >>= 0x11;\n        *((rdx + 0x10)) = r10;\n        rdx += 0x40;\n        r11 ^= rsi;\n        rsi = r12;\n        rbx += r12;\n        rcx -= r11;\n        rsi <<= 0xe;\n        esi <<= 0xe;\n        *((rdx - 0x28)) = r11;\n        rsi ^= rax;\n        r12 += rcx;\n        *((rdx - 0x18)) = rbx;\n        *((rdx - 0x20)) = rsi;\n        *((rdx - 0x10)) = r12;\n        *((rdx - 8)) = rcx;\n    } while (rbp != rdx);\n    *((rdi + 0x810)) = 0;\n    *((rdi + 0x808)) = 0;\n    *((rdi + 0x800)) = 0;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00407a00",
            "funcStartAddr": "0x407a00",
            "funcEndAddr": "0x407c42",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x407a00 */\n#include <stdint.h>\n \nuint64_t fcn_00407a00 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_28h;\n    int64_t var_a0h;\n    int64_t var_b8h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9d = r8d;\n    eax = 0;\n    r14d = edi;\n    r13d = edx;\n    r12 = rcx;\n    r8 = rcx;\n    ecx = edx;\n    rdx = rsi;\n    rbx = rsi;\n    esi = edi;\n    edi = 0x13c;\n    eax = syscall ();\n    edx = eax;\n    if (eax >= 0) {\n        goto label_0;\n    }\n    *((rsp + 8)) = eax;\n    rax = errno_location ();\n    edx = *((rsp + 8));\n    r9 = rax;\n    eax = *(rax);\n    ecx = rax - 0x16;\n    ecx &= 0xffffffef;\n    r15b = (ecx != 0) ? 1 : 0;\n    al = (eax != 0x5f) ? 1 : 0;\n    r15b &= al;\n    if (r15b != 0) {\n        goto label_0;\n    }\n    if (ebp == 0) {\n        goto label_2;\n    }\n    ebp &= 0xfffffffe;\n    if (ebp == 0) {\n        goto label_3;\n    }\n    *(r9) = 0x5f;\n    edx = 0xffffffff;\n    do {\nlabel_0:\n        eax = edx;\n        return rax;\nlabel_3:\n        rdx = r12;\n        esi = r13d;\n        edi = 1;\n        *((rsp + 8)) = r9;\n        r8d = 0x100;\n        rcx = rsp + 0xa0;\n        eax = fxstatat ();\n        r9 = *((rsp + 8));\n        if (eax == 0) {\n            goto label_4;\n        }\n        eax = *(r9);\n        if (eax == 0x4b) {\n            goto label_4;\n        }\n        if (eax != 2) {\n            goto label_1;\n        }\n        r15d = 1;\nlabel_2:\n        *((rsp + 8)) = r9;\n        rax = strlen (rbx);\n        rax = strlen (r12);\n        if (rbp == 0) {\n            goto label_5;\n        }\n        r9 = *((rsp + 8));\n        if (rax == 0) {\n            goto label_5;\n        }\n        if (*((rbx + rbp - 1)) != 0x2f) {\n            if (*((r12 + rax - 1)) != 0x2f) {\n                goto label_5;\n            }\n        }\n        rcx = rsp + 0x10;\n        rdx = rbx;\n        esi = r14d;\n        edi = 1;\n        r8d = 0x100;\n        *((rsp + 8)) = r9;\n        eax = fxstatat ();\n        if (eax != 0) {\n            goto label_1;\n        }\n        r9 = *((rsp + 8));\n        if (r15b == 0) {\n            goto label_6;\n        }\n        eax = *((rsp + 0x28));\n        eax &= 0xf000;\n        if (eax == 0x4000) {\n            goto label_5;\n        }\n        *(r9) = 2;\n        edx = 0xffffffff;\n    } while (1);\n    do {\n        eax = *((rsp + 0xb8));\n        eax &= 0xf000;\n        if (eax == 0x4000) {\n            goto label_7;\n        }\n        *(r9) = 0x14;\nlabel_1:\n        edx = 0xffffffff;\n        goto label_0;\nlabel_6:\n        rdx = r12;\n        esi = r13d;\n        edi = 1;\n        *((rsp + 8)) = r9;\n        r8d = 0x100;\n        rcx = rsp + 0xa0;\n        eax = fxstatat ();\n        r9 = *((rsp + 8));\n    } while (eax == 0);\n    if (*(r9) != 2) {\n        goto label_1;\n    }\n    eax = *((rsp + 0x28));\n    eax &= 0xf000;\n    if (eax != 0x4000) {\n        goto label_1;\n    }\n    do {\nlabel_5:\n        edx = r13d;\n        rcx = r12;\n        rsi = rbx;\n        edi = r14d;\n        eax = renameat ();\n        edx = eax;\n        goto label_0;\nlabel_4:\n        *(r9) = 0x11;\n        edx = 0xffffffff;\n        goto label_0;\nlabel_7:\n        eax = *((rsp + 0x28));\n        eax &= 0xf000;\n    } while (eax == 0x4000);\n    *(r9) = 0x15;\n    edx = 0xffffffff;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00407c50",
            "funcStartAddr": "0x407c50",
            "funcEndAddr": "0x407c9e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x407c50 */\n#include <stdint.h>\n \nuint64_t fcn_00407c50 (uint32_t arg1) {\n    rdi = arg1;\n    ebx = edi;\n    if (edi > 2) {\n        eax = ebx;\n        return eax;\n    }\n    eax = fcn_0040a190 (rdi, rsi);\n    r12d = eax;\n    rax = errno_location ();\n    ebx = r12d;\n    r13d = *(rax);\n    close (ebx);\n    eax = ebx;\n    *(rbp) = r13d;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00407ca0",
            "funcStartAddr": "0x407ca0",
            "funcEndAddr": "0x40dc8f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x407ca0 */\n#include <stdint.h>\n \nvoid fcn_00407ca0 (int64_t arg_20h, int64_t arg_30h, int64_t arg_8h_2, int64_t arg_10h, int64_t arg_8h, int64_t arg_8h_3, int64_t arg_10h_2, int64_t arg_18h, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    int64_t var_30h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    eax = abort ();\n    r12 = r9;\n    rbx = r8;\n    if (rsi == 0) {\n        goto label_1;\n    }\n    r9 = rcx;\n    r8 = rdx;\n    rcx = rsi;\n    edx = \"%s (%s) %s\\n\";\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    do {\n        edx = 5;\n        rax = dcgettext (0, 0x40c4ba);\n        r8d = 0x7e1;\n        edx = \"Copyright %s %d Free Software Foundation, Inc.\";\n        rdi = rbp;\n        rcx = rax;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\");\n        rsi = rbp;\n        rdi = rax;\n        eax = fputs_unlocked ();\n        if (r12 > 9) {\n            goto label_2;\n        }\n        /* switch table (10 cases) at 0x40c7a0 */\nlabel_1:\n        r8 = rcx;\n        esi = 1;\n        rcx = rdx;\n        eax = 0;\n        edx = \"%s %s\\n\";\n        fprintf_chk ();\n    } while (1);\n    r9 = *((rbx + 0x38));\n    rax = *((rbx + 0x10));\n    edx = 5;\n    r8 = *((rbx + 8));\n    r13 = *((rbx + 0x30));\n    r12 = *((rbx + 0x28));\n    r15 = *((rbx + 0x20));\n    *((rsp + 0x10)) = r9;\n    r14 = *((rbx + 0x18));\n    rbx = *(rbx);\n    *(rsp) = rax;\n    *((rsp + 8)) = r8;\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n    do {\n        r9 = *((rsp + 0x18));\n        rcx = rbx;\n        rdx = rax;\n        rdi = rbp;\n        esi = 1;\n        eax = 0;\n        r9 = *((rsp + 0x30));\n        r8 = *((rsp + 0x38));\n        fprintf_chk ();\n        return rax;\n        r10 = *((rbx + 0x40));\n        r9 = *((rbx + 0x38));\n        edx = 5;\n        rax = *((rbx + 0x10));\n        r8 = *((rbx + 8));\n        r13 = *((rbx + 0x30));\n        r12 = *((rbx + 0x28));\n        *((rsp + 0x18)) = r10;\n        r15 = *((rbx + 0x20));\n        r14 = *((rbx + 0x18));\n        *((rsp + 0x10)) = r9;\n        *(rsp) = rax;\n        rbx = *(rbx);\n        *((rsp + 8)) = r8;\nlabel_0:\n        dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        r10 = *((rsp + 0x18));\n    } while (1);\n    rbx = *(rbx);\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s.\\n\");\n    rdi = rbp;\n    esi = 1;\n    rcx = rbx;\n    rdx = rax;\n    eax = 0;\n    void (*0x402020)() ();\n    r12 = *((rbx + 8));\n    edx = 5;\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s and %s.\\n\");\n    r8 = r12;\n    rcx = rbx;\n    rdx = rax;\n    rdi = rbp;\n    esi = 1;\n    eax = 0;\n    void (*0x402020)() ();\n    r13 = *((rbx + 0x10));\n    r12 = *((rbx + 8));\n    edx = 5;\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s, %s, and %s.\\n\");\n    r9 = r13;\n    r8 = r12;\n    rcx = rbx;\n    rdx = rax;\n    rdi = rbp;\n    esi = 1;\n    eax = 0;\n    void (*0x402020)() ();\n    edx = 5;\n    r14 = *((rbx + 0x18));\n    r13 = *((rbx + 0x10));\n    r12 = *((rbx + 8));\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\nand %s.\\n\");\n    do {\n        rdx = rax;\n        r9 = r13;\n        r8 = r12;\n        rcx = rbx;\n        rdi = rbp;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        return;\n        r15 = *((rbx + 0x20));\n        edx = 5;\n        r14 = *((rbx + 0x18));\n        r13 = *((rbx + 0x10));\n        r12 = *((rbx + 8));\n        rbx = *(rbx);\n        dcgettext (0, \"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n    } while (1);\n    r8 = *((rbx + 8));\n    r12 = *((rbx + 0x28));\n    edx = 5;\n    r15 = *((rbx + 0x20));\n    r14 = *((rbx + 0x18));\n    *(rsp) = r8;\n    r13 = *((rbx + 0x10));\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n    r9 = r13;\n    do {\n        r8 = *((rsp + 0x20));\n        rcx = rbx;\n        rdx = rax;\n        rdi = rbp;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        return;\n        r9 = *((rbx + 0x10));\n        r13 = *((rbx + 0x30));\n        edx = 5;\n        r12 = *((rbx + 0x28));\n        r15 = *((rbx + 0x20));\n        r14 = *((rbx + 0x18));\n        r8 = *((rbx + 8));\n        *((rsp + 8)) = r9;\n        rbx = *(rbx);\n        *(rsp) = r8;\n        dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n        r9 = *((rsp + 0x28));\n    } while (1);\nlabel_2:\n    r10 = *((rbx + 0x40));\n    r9 = *((rbx + 0x38));\n    edx = 5;\n    esi = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    rax = *((rbx + 0x10));\n    r8 = *((rbx + 8));\n    r13 = *((rbx + 0x30));\n    r12 = *((rbx + 0x28));\n    *((rsp + 0x18)) = r10;\n    r15 = *((rbx + 0x20));\n    r14 = *((rbx + 0x18));\n    *((rsp + 0x10)) = r9;\n    *(rsp) = rax;\n    rbx = *(rbx);\n    *((rsp + 8)) = r8;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00408100",
            "funcStartAddr": "0x408100",
            "funcEndAddr": "0x4081bc",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408100 */\n#include <stdint.h>\n \nuint64_t fcn_00408100 (int64_t arg_b0h, int64_t arg5, int64_t arg6) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_70h;\n    int64_t var_90h;\n    int64_t var_98h;\n    r8 = arg5;\n    r9 = arg6;\n    r11d = 0;\n    rax = rsp + 0xb0;\n    *((rsp + 0x90)) = r8;\n    r10 = rsp + 0xb0;\n    r8d = 0x20;\n    *((rsp + 0x10)) = rax;\n    rax = rsp + 0x70;\n    *((rsp + 0x98)) = r9;\n    r9d = 0;\n    *((rsp + 8)) = 0x20;\n    *((rsp + 0x18)) = rax;\n    while (r8d <= 0x2f) {\n        eax = r8d;\n        r11 = rsp + 0x70;\n        r8d += 8;\n        rax += r11;\n        r11d = 1;\n        rax = *(rax);\n        *((rsp + r9*8 + 0x20)) = rax;\n        if (rax == 0) {\n            goto label_1;\n        }\nlabel_0:\n        r9++;\n        if (r9 == 0xa) {\n            goto label_1;\n        }\n    }\n    rax = r10;\n    r10 += 8;\n    rax = *(rax);\n    *((rsp + r9*8 + 0x20)) = rax;\n    if (rax != 0) {\n        goto label_0;\n    }\nlabel_1:\n    if (r11b != 0) {\n        *((rsp + 8)) = r8d;\n    }\n    fcn_00407ca0 (rdi, rsi, rdx, rcx, rsp + 0x20, r9);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00408240",
            "funcStartAddr": "0x408240",
            "funcEndAddr": "0x40825a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408240 */\n#include <stdint.h>\n \nuint64_t fcn_00408240 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    rax = malloc (rdi);\n    if (rax == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return fcn_00408490 ();\n}\n"
        },
        {
            "funcName": "fcn_004082a0",
            "funcStartAddr": "0x4082a0",
            "funcEndAddr": "0x4082d6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4082a0 */\n#include <stdint.h>\n \nuint64_t fcn_004082a0 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = rsi;\n    if (rsi == 0) {\n        if (rdi != 0) {\n            goto label_0;\n        }\n    }\n    rax = realloc (rdi, rbx);\n    if (rax == 0) {\n        if (rbx != 0) {\n            goto label_1;\n        }\n    }\n    return rax;\nlabel_0:\n    eax = free (rdi);\n    eax = 0;\n    return rax;\nlabel_1:\n    return fcn_00408490 ();\n}\n"
        },
        {
            "funcName": "fcn_00408440",
            "funcStartAddr": "0x408440",
            "funcEndAddr": "0x408468",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408440 */\n#include <stdint.h>\n \nuint64_t fcn_00408440 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rdi = rsi;\n    rbx = rsi;\n    rax = fcn_00408240 (rdi);\n    rdx = rbx;\n    rsi = rbp;\n    rdi = rax;\n    return memcpy ();\n}\n"
        },
        {
            "funcName": "fcn_00408470",
            "funcStartAddr": "0x408470",
            "funcEndAddr": "0x408483",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408470 */\n#include <stdint.h>\n \nvoid fcn_00408470 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    strlen (rdi);\n    rdi = rbx;\n    rsi = rax + 1;\n    return void (*0x408440)() ();\n}\n"
        },
        {
            "funcName": "fcn_00408490",
            "funcStartAddr": "0x408490",
            "funcEndAddr": "0x4084c1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408490 */\n#include <stdint.h>\n \nuint64_t fcn_00408490 (void) {\n    edx = 5;\n    rax = dcgettext (0, \"memory exhausted\");\n    rcx = rax;\n    eax = 0;\n    error (*(0x0060f2e0), 0, 0x40b61c);\n    return abort ();\n}\n"
        },
        {
            "funcName": "fcn_004084d0",
            "funcStartAddr": "0x4084d0",
            "funcEndAddr": "0x4085a0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4084d0 */\n#include <stdint.h>\n \nuint64_t fcn_004084d0 (int64_t arg_50h, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg6) {\n    int64_t var_8h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r9 = arg6;\n    r15 = rcx;\n    r14 = rdx;\n    edx = esi;\n    r13 = r9;\n    r12 = rdi;\n    ebx = *((rsp + 0x50));\n    eax = fcn_004085d0 (rdi, 0, edx, rsp + 8, r8);\n    if (eax != 0) {\n        goto label_1;\n    }\n    rbp = *((rsp + 8));\n    if (rbp >= r14) {\n        if (rbp <= r15) {\n            goto label_2;\n        }\n    }\n    rax = errno_location ();\n    r14 = rax;\n    eax -= eax;\n    eax &= 0xffffffd7;\n    eax += 0x4b;\n    *(r14) = eax;\n    do {\nlabel_0:\n        rax = fcn_00406de0 (r12);\n        esi = *(r14);\n        rcx = r13;\n        edx = \"%s: %s\";\n        r8 = rax;\n        eax = 0;\n        if (esi == 0x16) {\n            esi = eax;\n        }\n        eax = 1;\n        if (ebx == 0) {\n            ebx = eax;\n        }\n        eax = 0;\n        error (ebx, rsi, rdx);\n        rbp = *((rsp + 8));\nlabel_2:\n        rax = rbp;\n        return rax;\nlabel_1:\n        rax = errno_location ();\n        r14 = rax;\n        if (ebp == 1) {\n            goto label_3;\n        }\n    } while (ebp != 3);\n    *(rax) = 0;\n    goto label_0;\nlabel_3:\n    *(rax) = 0x4b;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_004085a0",
            "funcStartAddr": "0x4085a0",
            "funcEndAddr": "0x4085c1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4085a0 */\n#include <stdint.h>\n \nvoid fcn_004085a0 (int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    fcn_004084d0 (rdi, 0xa, rsi, rdx, rcx, r8);\n}\n"
        },
        {
            "funcName": "fcn_004085d0",
            "funcStartAddr": "0x4085d0",
            "funcEndAddr": "0x408a04",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4085d0 */\n#include <stdint.h>\n \nuint64_t fcn_004085d0 (int64_t arg1, int64_t arg2, uint32_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_8h;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    if (edx > 0x24) {\n        goto label_13;\n    }\n    r15 = rsi;\n    rax = rsp + 0x18;\n    *(rsp) = edx;\n    r14 = rcx;\n    r13 = r8;\n    if (rsi == 0) {\n        r15 = rax;\n    }\n    errno_location ();\n    *(rax) = 0;\n    r12 = rax;\n    ebx = *(rbp);\n    rax = ctype_b_loc ();\n    edx = *(rsp);\n    rsi = *(rax);\n    rax = rbp;\n    while ((*((rsi + rcx*2 + 1)) & 0x20) != 0) {\n        rax++;\n        ebx = *(rax);\n        ecx = (int32_t) bl;\n    }\n    if (bl == 0x2d) {\n        goto label_1;\n    }\n    ecx = 0;\n    rsi = r15;\n    rdi = rbp;\n    rax = strtoul_internal ();\n    r8 = *(r15);\n    rbx = rax;\n    if (r8 == rbp) {\n        goto label_14;\n    }\n    eax = *(r12);\n    if (eax != 0) {\n        goto label_15;\n    }\n    ebp = 0;\n    do {\n        if (r13 != 0) {\n            r12d = *(r8);\n            if (r12b != 0) {\n                goto label_16;\n            }\n        }\nlabel_2:\n        *(r14) = rbx;\nlabel_0:\n        eax = ebp;\n        return rax;\nlabel_15:\n    } while (eax == 0x22);\n    do {\nlabel_1:\n        goto label_0;\nlabel_14:\n        *(rsp) = r8;\n    } while (r13 == 0);\n    r12d = *(rbp);\n    if (r12b == 0) {\n        goto label_1;\n    }\n    esi = (int32_t) r12b;\n    ebp = 0;\n    ebx = 1;\n    rax = strchr (r13, rsi);\n    r8 = *(rsp);\n    if (rax == 0) {\n        goto label_1;\n    }\nlabel_4:\n    edx = r12 - 0x45;\n    if (dl <= 0x2f) {\n        rax = 0x814400308945;\n        *(rsp) = dl;\n        if (((rax >> rdx) & 1) >= 0) {\n            goto label_17;\n        }\n        *((rsp + 8)) = r8;\n        rax = strchr (r13, 0x30);\n        r8 = *((rsp + 8));\n        if (rax == 0) {\n            goto label_17;\n        }\n        eax = *((r8 + 1));\n        if (al == 0x44) {\n            goto label_18;\n        }\n        if (al == 0x69) {\n            goto label_19;\n        }\n        edx = *(rsp);\n        if (al == 0x42) {\n            goto label_18;\n        }\n        /* switch table (67 cases) at 0x40c878 */\n    }\nlabel_17:\n    esi = 1;\n    edx = 0x400;\nlabel_7:\n    r12d -= 0x42;\n    if (r12b > 0x35) {\n        goto label_20;\n    }\n    r12d = (int32_t) r12b;\n    /* switch table (54 cases) at 0x40c9f8 */\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    rax = rbx;\n    rdx:rax = rax * rcx;\n    if (r12b overflow 0x35) {\n        goto label_5;\n    }\n    rdx:rax = rax * rcx;\n    if (r12b overflow 0x35) {\n        goto label_5;\n    }\n    rbx = rax;\n    do {\nlabel_3:\n        rsi = (int64_t) esi;\n        eax = ebp;\n        r8 += rsi;\n        eax |= 2;\n        *(r15) = r8;\n        if (*(r8) != 0) {\n        }\n        goto label_2;\n        esi = 1;\n        edx = 0x400;\n        rax = rbx;\n        rdx:rax = rax * rdx;\n        rbx = rax;\n    } while (*(r8) !overflow 0);\nlabel_5:\n    rbx |= 0xffffffffffffffff;\n    goto label_3;\nlabel_16:\n    esi = (int32_t) r12b;\n    *(rsp) = r8;\n    rax = strchr (r13, rsi);\n    r8 = *(rsp);\n    if (rax != 0) {\n        goto label_4;\n    }\nlabel_20:\n    *(r14) = rbx;\n    ebp |= 2;\n    goto label_0;\n    if (rbx < 0) {\n        goto label_5;\n    }\n    rbx += rbx;\n    goto label_3;\n    esi = 1;\n    rax = rbx;\n    rax >>= 0x37;\n    if (rax != 0) {\n        goto label_5;\n    }\n    rbx <<= 9;\n    goto label_3;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 7;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (rbx overflow 0) {\n            goto label_21;\n        }\nlabel_8:\n        edi--;\n    } while (edi != 0);\nlabel_6:\n    ebp |= r9d;\n    goto label_3;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 8;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (ebp overflow 0) {\n            goto label_22;\n        }\nlabel_11:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 4;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (edi overflow 0) {\n            goto label_23;\n        }\nlabel_9:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 5;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (edi overflow 0) {\n            goto label_24;\n        }\nlabel_12:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 6;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (edi overflow 0) {\n            goto label_25;\n        }\nlabel_10:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    rax = rbx;\n    rdx:rax = rax * rcx;\n    if (edi overflow 0) {\n        goto label_26;\n    }\n    rdx:rax = rax * rcx;\n    if (edi overflow 0) {\n        goto label_26;\n    }\n    rdx:rax = rax * rcx;\n    if (edi overflow 0) {\n        goto label_26;\n    }\n    rbx = rax;\n    eax = 0;\n    ebp |= eax;\n    goto label_3;\n    rax = rbx;\n    rax >>= 0x36;\n    if (rax != 0) {\n        goto label_5;\n    }\n    rbx <<= 0xa;\n    goto label_3;\n    esi = 1;\n    goto label_3;\nlabel_18:\n    esi = 2;\n    edx = 0x3e8;\n    goto label_7;\nlabel_19:\n    esi = 0;\n    edx = 0x400;\n    sil = (*((r8 + 2)) == 0x42) ? 1 : 0;\n    esi = rsi + rsi + 1;\n    goto label_7;\nlabel_21:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_8;\nlabel_26:\n    eax = 1;\n    rbx |= 0xffffffffffffffff;\n    ebp |= eax;\n    goto label_3;\nlabel_23:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_9;\nlabel_25:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_10;\nlabel_22:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_11;\nlabel_24:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_12;\nlabel_13:\n    return assert_fail (\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60, \"xstrtoumax\");\n}\n"
        },
        {
            "funcName": "fcn_00408a10",
            "funcStartAddr": "0x408a10",
            "funcEndAddr": "0x408a8b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408a10 */\n#include <stdint.h>\n \nuint64_t fcn_00408a10 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    eax = fileno (rdi);\n    rdi = rbx;\n    if (eax < 0) {\n        goto label_1;\n    }\n    eax = freading ();\n    while (rax != -1) {\n        eax = fcn_00408bd0 (rbx);\n        if (eax == 0) {\n            goto label_2;\n        }\n        rax = errno_location ();\n        r12d = *(rax);\n        fclose (rbx);\n        if (r12d != 0) {\n            goto label_3;\n        }\nlabel_0:\n        return rax;\n        eax = fileno (rbx);\n        esi = 0;\n        edx = 1;\n        edi = eax;\n        rax = lseek ();\n    }\nlabel_2:\n    rdi = rbx;\nlabel_1:\n    void (*0x401c70)() ();\nlabel_3:\n    *(rbp) = r12d;\n    eax = 0xffffffff;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00408a90",
            "funcStartAddr": "0x408a90",
            "funcEndAddr": "0x408bc5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408a90 */\n#include <stdint.h>\n \nuint64_t fcn_00408a90 (int64_t arg_70h, int64_t arg1, uint32_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_30h;\n    int64_t var_38h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    do {\nlabel_2:\n        rax = rsp + 0x70;\n        *((rsp + 0x30)) = rdx;\n        *((rsp + 0x10)) = rax;\n        rax = rsp + 0x20;\n        *((rsp + 0x38)) = rcx;\n        *((rsp + 8)) = 0x10;\n        *((rsp + 0x18)) = rax;\n        if (esi != 0x406) {\n            goto label_4;\n        }\n        r12d = *((rax + 0x10));\n        eax = imp.__libc_start_main;\n        *((rsp + 8)) = 0x18;\n        edx = r12d;\n        if (eax >= 0) {\n            eax = 0;\n            eax = fcntl ();\n            ebx = eax;\n            if (eax < 0) {\n                goto label_5;\n            }\nlabel_1:\n            *(0x0060f4f8) = 1;\nlabel_0:\n            eax = ebx;\n            return rax;\n        }\n        eax = 0;\n        eax = fcn_00408a90 (rdi, 0, rdx, rcx, r8);\n    } while (1);\n    ebx = eax;\n    if (eax < 0) {\n        goto label_0;\n    }\n    if (*(0x0060f4f8) != 0xffffffff) {\n        goto label_0;\n    }\nlabel_3:\n    eax = 0;\n    esi = 1;\n    edi = ebx;\n    eax = fcntl ();\n    if (eax < 0) {\n        goto label_6;\n    }\n    eax |= 1;\n    esi = 2;\n    edi = ebx;\n    edx = eax;\n    eax = 0;\n    eax = fcntl ();\n    if (eax != 0xffffffff) {\n        goto label_0;\n    }\nlabel_6:\n    rax = errno_location ();\n    ebx = 0xffffffff;\n    r12d = *(rax);\n    close (ebx);\n    *(rbp) = r12d;\n    goto label_0;\nlabel_4:\n    rax = *((rsp + 0x18));\n    rdx = *((rax + 0x10));\n    eax = 0;\n    eax = fcntl ();\n    ebx = eax;\n    return rax;\nlabel_5:\n    rax = errno_location ();\n    if (*(rax) != 0x16) {\n        goto label_1;\n    }\n    eax = 0;\n    eax = fcn_00408a90 (ebp, 0, r12d, rcx, r8);\n    goto label_2;\n    ebx = eax;\n    if (eax < 0) {\n        goto label_0;\n    }\n    *(0x0060f4f8) = 0xffffffff;\n    goto label_3;\n}\n"
        },
        {
            "funcName": "fcn_00408bd0",
            "funcStartAddr": "0x408bd0",
            "funcEndAddr": "0x408c10",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408bd0 */\n#include <stdint.h>\n \nuint32_t fcn_00408bd0 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    if (rdi != 0) {\n        eax = freading ();\n        if (eax == 0) {\n            goto label_0;\n        }\n        if ((*(rbx) & 0x100) != 0) {\n            goto label_1;\n        }\n    }\nlabel_0:\n    rdi = rbx;\n    void (*0x401e90)() ();\nlabel_1:\n    fcn_00408c10 (rbx, 0, 1);\n    rdi = rbx;\n    return fflush ();\n}\n"
        },
        {
            "funcName": "fcn_00408c10",
            "funcStartAddr": "0x408c10",
            "funcEndAddr": "0x408c67",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408c10 */\n#include <stdint.h>\n \nint64_t fcn_00408c10 (uint32_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rax = *((rdi + 8));\n    while (*((rdi + 0x28)) != rax) {\nlabel_0:\n        void (*0x401fa0)() ();\n        rax = *((rdi + 0x20));\n    }\n    if (*((rdi + 0x48)) != 0) {\n        goto label_0;\n    }\n    r12d = edx;\n    rbx = rdi;\n    eax = fileno (rdi);\n    edx = r12d;\n    rsi = rbp;\n    edi = eax;\n    rax = lseek ();\n    if (rax != -1) {\n        *(rbx) &= 0xffffffef;\n        *((rbx + 0x90)) = rax;\n        eax = 0;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00408c70",
            "funcStartAddr": "0x408c70",
            "funcEndAddr": "0x408d4f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408c70 */\n#include <stdint.h>\n \nuint64_t fcn_00408c70 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    r11 = rdi + 8;\n    r12d = *((rsi + 0x2c));\n    ebp = *(rsi);\n    rbx = *((rsi + 0x30));\n    r9d = r12d;\n    r10d = ebp;\n    r8 = rbx;\nlabel_1:\n    if (r10d <= r8d) {\n        goto label_2;\n    }\nlabel_0:\n    if (r9d >= r8d) {\n        goto label_2;\n    }\n    r14d = r10d;\n    edx = r8d;\n    r14d -= r8d;\n    edx -= r9d;\n    if (r14d <= edx) {\n        goto label_3;\n    }\n    rcx = (int64_t) r9d;\n    r10d -= edx;\n    edx--;\n    rdx += rcx;\n    rax = rdi + rcx*8;\n    r13 = r11 + rdx*8;\n    rdx = (int64_t) r10d;\n    rdx -= rcx;\n    do {\n        rcx = *(rax);\n        r14 = *((rax + rdx*8));\n        *(rax) = r14;\n        *((rax + rdx*8)) = rcx;\n        rax += 8;\n    } while (r13 != rax);\n    if (r10d > r8d) {\n        goto label_0;\n    }\nlabel_2:\n    eax = ebp;\n    *((rsi + 0x30)) = ebp;\n    eax -= r8d;\n    r12d += eax;\n    *((rsi + 0x2c)) = r12d;\n    r12 = rbx;\n    r13 = rbx;\n    r14 = rbx;\n    r15 = rbx;\n    return rax;\nlabel_3:\n    rdx = (int64_t) r9d;\n    ecx = r14 - 1;\n    rcx += rdx;\n    rax = rdi + rdx*8;\n    r13 = r11 + rcx*8;\n    rcx = rbx;\n    rcx -= rdx;\n    rdx = rcx;\n    do {\n        rcx = *(rax);\n        r15 = *((rax + rdx*8));\n        *(rax) = r15;\n        *((rax + rdx*8)) = rcx;\n        rax += 8;\n    } while (rax != r13);\n    r9d += r14d;\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00408d50",
            "funcStartAddr": "0x408d50",
            "funcEndAddr": "0x40936c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x408d50 */\n#include <stdint.h>\n \nint64_t fcn_00408d50 (int64_t arg_90h, int64_t arg_98h, int64_t arg_a0h, signed int64_t arg1, int64_t arg2, char * arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    int64_t var_ch;\n    int64_t var_10h;\n    void * ptr;\n    int64_t var_20h;\n    int64_t var_28h;\n    char * s;\n    int64_t var_38h;\n    int64_t c;\n    signed int64_t var_40h;\n    int64_t var_44h;\n    void * var_48h;\n    size_t nmeb;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    rax = *((rsp + 0x90));\n    *((rsp + 0x40)) = edi;\n    *((rsp + 0x28)) = rsi;\n    r14 = *((rax + 0x20));\n    *((rsp + 0x30)) = rdx;\n    *(rsp) = rcx;\n    eax = *(r14);\n    *((rsp + 0x20)) = r8;\n    *((rsp + 0xc)) = r9d;\n    *((rsp + 0x3f)) = al;\n    if (al == 0x3d) {\n        goto label_11;\n    }\n    if (al == 0) {\n        goto label_11;\n    }\n    do {\n        rbp++;\n        eax = *(rbp);\n        if (al == 0) {\n            goto label_12;\n        }\n    } while (al != 0x3d);\nlabel_12:\n    r13 = rbp;\n    r13 -= r14;\nlabel_6:\n    rbx = *(rsp);\n    r12d = 0;\n    rax = *(rbx);\n    *((rsp + 0x10)) = rax;\n    r15 = rax;\n    if (rax != 0) {\n        goto label_13;\n    }\n    goto label_14;\n    do {\n        r12 = (int64_t) r8d;\nlabel_13:\n        eax = strncmp (r15, r14, r13);\n        if (eax == 0) {\n            rax = strlen (r15);\n            if (rax == r13) {\n                goto label_15;\n            }\n        }\n        rbx += 0x20;\n        r15 = *(rbx);\n        r8d = r12 + 1;\n    } while (r15 != 0);\n    rcx = *(rsp);\n    *((rsp + 0x4c)) = r8d;\n    r9d = 0;\n    ebx = 0;\n    *((rsp + 0x44)) = 0xffffffff;\n    r15 = r9;\n    *((rsp + 0x38)) = 0;\n    *((rsp + 0x48)) = 0;\n    *((rsp + 0x18)) = 0;\n    *((rsp + 0x10)) = rbp;\n    do {\n        eax = strncmp (*((rsp + 0x10)), r14, r13);\n        if (eax == 0) {\n            if (rbx == 0) {\n                goto label_16;\n            }\n            eax = *((rsp + 0xc));\n            if (eax == 0) {\n                goto label_17;\n            }\nlabel_0:\n            r11d = *((rsp + 0x38));\n            if (r11d != 0) {\n                goto label_1;\n            }\n            r10d = *((rsp + 0x98));\n            if (r10d == 0) {\n                goto label_18;\n            }\n            if (*((rsp + 0x18)) == 0) {\n                goto label_19;\n            }\nlabel_3:\n            rax = *((rsp + 0x18));\n            *((rax + r15)) = 1;\n        }\nlabel_1:\n        rbp += 0x20;\n        rdi = *(rbp);\n        r15++;\n    } while (rdi != 0);\n    rbp = *((rsp + 0x10));\n    if (*((rsp + 0x18)) != 0) {\n        goto label_20;\n    }\n    r9d = *((rsp + 0x38));\n    if (r9d != 0) {\n        goto label_20;\n    }\n    if (rbx == 0) {\nlabel_14:\n        eax = *((rsp + 0xc));\n        if (eax != 0) {\n            rax = *((rsp + 0x90));\n            rcx = *((rsp + 0x28));\n            rax = *(rax);\n            rax = *((rcx + rax*8));\n            if (*((rax + 1)) == 0x2d) {\n                goto label_21;\n            }\n            esi = *((rsp + 0x3f));\n            rax = strchr (*((rsp + 0x30)), rsi);\n            rdx = rax;\n            eax = 0xffffffff;\n            if (rdx != 0) {\n                goto label_5;\n            }\n        }\nlabel_21:\n        ecx = *((rsp + 0x98));\n        if (ecx != 0) {\n            goto label_22;\n        }\nlabel_4:\n        rax = *((rsp + 0x90));\n        *((rax + 0x20)) = 0;\n        *(rax)++;\n        *((rax + 8)) = 0;\n        eax = 0x3f;\n        return rax;\n    }\n    r12d = *((rsp + 0x44));\nlabel_15:\n    rax = *((rsp + 0x90));\n    rcx = *((rsp + 0x90));\n    edx = *(rax);\n    *((rcx + 0x20)) = 0;\n    eax = rdx + 1;\n    *(rcx) = eax;\n    ecx = *((rbx + 8));\n    if (*(rbp) != 0) {\n        goto label_23;\n    }\n    if (ecx == 1) {\n        goto label_24;\n    }\nlabel_2:\n    rax = *((rsp + 0x20));\n    if (rax != 0) {\n        *(rax) = r12d;\n    }\n    rdx = *((rbx + 0x10));\n    eax = *((rbx + 0x18));\n    if (rdx != 0) {\n        *(rdx) = eax;\n        eax = 0;\n    }\nlabel_5:\n    return rax;\nlabel_17:\n    eax = *((rbp + 8));\n    if (*((rbx + 8)) != eax) {\n        goto label_0;\n    }\n    rax = *((rbp + 0x10));\n    if (*((rbx + 0x10)) != rax) {\n        goto label_0;\n    }\n    eax = *((rbp + 0x18));\n    if (*((rbx + 0x18)) != eax) {\n        goto label_0;\n    }\n    goto label_1;\nlabel_23:\n    if (ecx == 0) {\n        goto label_25;\n    }\n    rax = *((rsp + 0x90));\n    rbp++;\n    *((rax + 0x10)) = rbp;\n    goto label_2;\nlabel_16:\n    *((rsp + 0x44)) = r15d;\n    rbx = rbp;\n    goto label_1;\nlabel_18:\n    *((rsp + 0x38)) = 1;\n    if (*((rsp + 0x18)) == 0) {\n        goto label_1;\n    }\n    goto label_3;\nlabel_22:\n    rax = *((rsp + 0x28));\n    edx = 5;\n    rbx = *(rax);\n    rax = dcgettext (0, \"%s: unrecognized option '%s%s'\\n\");\n    r8 = *((rsp + 0xa0));\n    r9 = r14;\n    rdi = stderr;\n    rdx = rax;\n    rcx = rbx;\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    goto label_4;\nlabel_20:\n    r8d = *((rsp + 0x98));\n    if (r8d != 0) {\n        edi = *((rsp + 0x38));\n        if (edi == 0) {\n            goto label_26;\n        }\n        rax = *((rsp + 0x28));\n        edx = 5;\n        rbx = *(rax);\n        rax = dcgettext (0, \"%s: option '%s%s' is ambiguous\\n\");\n        r8 = *((rsp + 0xa0));\n        r9 = r14;\n        rdi = stderr;\n        rdx = rax;\n        rcx = rbx;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        rax = *((rsp + 0x90));\n        r14 = *((rax + 0x20));\n    }\nlabel_9:\n    esi = *((rsp + 0x48));\n    if (esi != 0) {\n        goto label_27;\n    }\nlabel_7:\n    rax = strlen (r14);\n    r14 += rax;\n    rax = *((rsp + 0x90));\n    *((rax + 0x20)) = r14;\n    *(rax)++;\n    *((rax + 8)) = 0;\n    eax = 0x3f;\n    goto label_5;\nlabel_24:\n    if (eax >= *((rsp + 0x40))) {\n        goto label_28;\n    }\n    rcx = *((rsp + 0x90));\n    edx += 2;\n    rax = (int64_t) eax;\n    *(rcx) = edx;\n    rcx = *((rsp + 0x28));\n    rax = *((rcx + rax*8));\n    rcx = *((rsp + 0x90));\n    *((rcx + 0x10)) = rax;\n    goto label_2;\nlabel_11:\n    r13d = 0;\n    goto label_6;\nlabel_25:\n    edx = *((rsp + 0x98));\n    while (1) {\n        eax = *((rbx + 0x18));\n        rcx = *((rsp + 0x90));\n        *((rcx + 8)) = eax;\n        eax = 0x3f;\n        goto label_5;\nlabel_19:\n        rdi = *((rsp + 0x4c));\n        rax = calloc (rdi, 1);\n        *((rsp + 0x18)) = rax;\n        if (rax == 0) {\n            goto label_29;\n        }\n        rax = *((rsp + 0x44));\n        rcx = *((rsp + 0x18));\n        *((rsp + 0x48)) = 1;\n        *((rcx + rax)) = 1;\n        goto label_3;\n        rax = *((rsp + 0x28));\n        r12 = *(rbx);\n        edx = 5;\n        rbp = *(rax);\n        rax = dcgettext (0, \"%s: option '%s%s' doesn't allow an argument\\n\");\n        r8 = *((rsp + 0xa0));\n        r9 = r12;\n        rdi = stderr;\n        rdx = rax;\n        rcx = rbp;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n    }\nlabel_27:\n    free (*((rsp + 0x18)));\n    goto label_7;\nlabel_28:\n    eax = *((rsp + 0x98));\n    if (eax != 0) {\n        goto label_30;\n    }\nlabel_10:\n    eax = *((rbx + 0x18));\n    rcx = *((rsp + 0x90));\n    *((rcx + 8)) = eax;\n    rax = *((rsp + 0x30));\n    al = (*(rax) != 0x3a) ? 1 : 0;\n    eax = (int32_t) al;\n    eax = rax * 5;\n    goto label_5;\nlabel_26:\n    rdi = stderr;\n    flockfile ();\n    rax = *((rsp + 0x90));\n    edx = 5;\n    rbx = *((rax + 0x20));\n    rax = *((rsp + 0x28));\n    rbp = *(rax);\n    rax = dcgettext (0, \"%s: option '%s%s' is ambiguous; possibilities:\");\n    rdi = stderr;\n    r9 = rbx;\n    r8 = *((rsp + 0xa0));\n    rcx = rbp;\n    rdx = rax;\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    rax = *((rsp + 0x18));\n    rdi = stderr;\n    rbx = *(rsp);\n    r12 = rax + r12 + 1;\n    while (*(rbp) == 0) {\nlabel_8:\n        rbp++;\n        rbx += 0x20;\n        if (r12 == rbp) {\n            goto label_31;\n        }\n    }\n    r8 = *(rbx);\n    edx = \" '%s%s';\n    esi = 1;\n    eax = 0;\n    rcx = *((rsp + 0xa0));\n    fprintf_chk ();\n    rdi = stderr;\n    goto label_8;\nlabel_31:\n    fputc (0xa, rdi);\n    rdi = stderr;\n    funlockfile ();\n    rax = *((rsp + 0x90));\n    r14 = *((rax + 0x20));\n    goto label_9;\nlabel_30:\n    rax = *((rsp + 0x28));\n    r12 = *(rbx);\n    edx = 5;\n    rbp = *(rax);\n    rax = dcgettext (0, \"%s: option '%s%s' requires an argument\\n\");\n    r8 = *((rsp + 0xa0));\n    r9 = r12;\n    rdi = stderr;\n    rdx = rax;\n    rcx = rbp;\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    goto label_10;\nlabel_29:\n    *((rsp + 0x38)) = 1;\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00409370",
            "funcStartAddr": "0x409370",
            "funcEndAddr": "0x409936",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409370 */\n#include <stdint.h>\n \nuint64_t fcn_00409370 (int64_t arg_70h, int64_t arg_78h, int64_t arg1, int64_t arg2, int64_t arg3, uint32_t arg4, int64_t arg5, int64_t arg6) {\n    uint32_t var_8h;\n    int64_t var_10h;\n    int64_t var_1ch;\n    int64_t var_20h;\n    int64_t var_28h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    rbx = *((rsp + 0x70));\n    *((rsp + 8)) = rcx;\n    *((rsp + 0x10)) = r8;\n    r13d = *((rbx + 4));\n    if (edi <= 0) {\n        goto label_16;\n    }\n    eax = *(rbx);\n    r12 = rsi;\n    r15 = rdx;\n    *((rbx + 0x10)) = 0;\n    if (eax == 0) {\n        goto label_17;\n    }\n    esi = *((rbx + 0x18));\n    if (esi == 0) {\nlabel_1:\n        *((rbx + 0x30)) = eax;\n        *((rbx + 0x2c)) = eax;\n        *((rbx + 0x20)) = 0;\n        eax = *(r15);\n        if (al == 0x2d) {\n            goto label_18;\n        }\n        if (al == 0x2b) {\n            goto label_19;\n        }\n        ecx = *((rsp + 0x78));\n        edx = 0;\n        if (ecx == 0) {\n            goto label_20;\n        }\nlabel_8:\n        *((rbx + 0x28)) = 0;\n        goto label_11;\n    }\n    eax = *(rdx);\n    rdx = *((rbx + 0x20));\n    ecx = rax - 0x2b;\n    ecx &= 0xfd;\n    if (ecx != 0) {\n        goto label_21;\n    }\n    eax = *((r15 + 1));\n    r15++;\n    eax = 0;\n    if (al == 0x3a) {\n        r13d = eax;\n    }\n    if (rdx != 0) {\n        goto label_22;\n    }\n    do {\nlabel_0:\n        eax = *(rbx);\n        if (*((rbx + 0x30)) > eax) {\n            *((rbx + 0x30)) = eax;\n        }\n        if (eax < *((rbx + 0x2c))) {\n            *((rbx + 0x2c)) = eax;\n        }\n        if (*((rbx + 0x28)) == 1) {\n            goto label_23;\n        }\nlabel_4:\n        if (ebp == eax) {\n            goto label_24;\n        }\n        rdx = (int64_t) eax;\n        ecx = 3;\n        edi = 0x40ccb1;\n        r14 = *((r12 + rdx*8));\n        rsi = *((r12 + rdx*8));\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        cl = (ebp > eax) ? 1 : 0;\n        if (cl != 0) {\n            goto label_25;\n        }\n        edx = *((rbx + 0x2c));\n        ecx = *((rbx + 0x30));\n        eax++;\n        *(rbx) = eax;\n        if (edx == ecx) {\n            goto label_26;\n        }\n        if (eax != ecx) {\n            fcn_00408c70 (r12, rbx);\n            edx = *((rbx + 0x2c));\n        }\nlabel_12:\n        *((rbx + 0x30)) = ebp;\n        *(rbx) = ebp;\n        goto label_27;\nlabel_18:\n        *((rbx + 0x28)) = 2;\n        r15++;\n        edx = 0;\nlabel_11:\n        *((rbx + 0x18)) = 1;\n        eax = *(r15);\nlabel_21:\n        eax = 0;\n        if (al == 0x3a) {\n            r13d = eax;\n        }\n    } while (rdx == 0);\nlabel_22:\n    if (*(rdx) == 0) {\n        goto label_0;\n    }\nlabel_6:\n    r8 = rdx + 1;\n    *((rsp + 0x20)) = rdx;\n    *((rbx + 0x20)) = r8;\n    r14d = *(rdx);\n    *((rsp + 0x28)) = r8;\n    *((rsp + 0x1c)) = r14b;\n    rax = strchr (r15, r14d);\n    rdx = *((rsp + 0x20));\n    ecx = *((rsp + 0x1c));\n    r8 = *((rsp + 0x28));\n    if (*((rdx + 1)) == 0) {\n        *(rbx)++;\n    }\n    ecx -= 0x3a;\n    if (cl <= 1) {\n        goto label_28;\n    }\n    if (rax == 0) {\n        goto label_28;\n    }\n    ecx = *((rax + 1));\n    if (*(rax) == 0x57) {\n        goto label_29;\n    }\nlabel_7:\n    if (cl == 0x3a) {\n        goto label_30;\n    }\n    do {\nlabel_2:\n        eax = r14d;\n        return rax;\nlabel_25:\n        if (*(r14) == 0x2d) {\n            goto label_31;\n        }\nlabel_5:\n        edx = *((rbx + 0x28));\n        if (edx == 0) {\n            goto label_16;\n        }\n        eax++;\n        *((rbx + 0x10)) = r14;\n        r14d = 1;\n        *(rbx) = eax;\n    } while (1);\nlabel_17:\n    *(rbx) = 1;\n    eax = 1;\n    goto label_1;\nlabel_24:\n    ebp = *((rbx + 0x30));\n    edx = *((rbx + 0x2c));\nlabel_27:\n    if (edx != ebp) {\n        *(rbx) = edx;\n    }\nlabel_16:\n    r14d = 0xffffffff;\n    goto label_2;\nlabel_23:\n    edx = *((rbx + 0x30));\n    if (*((rbx + 0x2c)) == edx) {\n        goto label_32;\n    }\n    if (eax != edx) {\n        *((rsp + 0x1c)) = r9d;\n        fcn_00408c70 (r12, rbx);\n        edx = *(rbx);\n        r9d = *((rsp + 0x1c));\n    }\nlabel_9:\n    if (ebp <= edx) {\n        goto label_33;\n    }\n    rax = (int64_t) edx;\n    while (*(rcx) != 0x2d) {\nlabel_3:\n        edx = rsi + 1;\n        rax++;\n        *(rbx) = edx;\n        if (ebp <= eax) {\n            goto label_33;\n        }\n        rcx = *((r12 + rax*8));\n        esi = eax;\n        edx = eax;\n    }\n    if (*((rcx + 1)) == 0) {\n        goto label_3;\n    }\n    eax = *(rbx);\nlabel_10:\n    *((rbx + 0x30)) = edx;\n    goto label_4;\nlabel_31:\n    ecx = *((r14 + 1));\n    if (cl == 0) {\n        goto label_5;\n    }\n    if (*((rsp + 8)) == 0) {\n        goto label_34;\n    }\n    if (cl == 0x2d) {\n        goto label_35;\n    }\n    if (r9d == 0) {\n        goto label_34;\n    }\n    if (*((r14 + 2)) == 0) {\n        esi = (int32_t) cl;\n        *((rsp + 0x1c)) = r9d;\n        rax = strchr (r15, rsi);\n        r9d = *((rsp + 0x1c));\n        if (rax != 0) {\n            goto label_34;\n        }\n    }\n    rdx = r14 + 1;\n    *((rbx + 0x20)) = rdx;\n    eax = fcn_00408d50 (ebp, r12, r15, *((rsp + 0x28)), *((rsp + 0x30)), r9);\n    r14d = eax;\n    if (eax != 0xffffffff) {\n        goto label_2;\n    }\n    rax = *(rbx);\n    r14 = *((r12 + rax*8));\nlabel_34:\n    rdx = r14 + 1;\n    goto label_6;\nlabel_29:\n    if (*((rsp + 8)) == 0) {\n        goto label_7;\n    }\n    if (cl != 0x3b) {\n        goto label_7;\n    }\n    if (*((rdx + 1)) == 0) {\n        rax = *(rbx);\n        if (eax == ebp) {\n            goto label_36;\n        }\n        r8 = *((r12 + rax*8));\n    }\n    *((rbx + 0x20)) = r8;\n    *((rbx + 0x10)) = 0;\nlabel_14:\n    eax = fcn_00408d50 (ebp, r12, r15, *((rsp + 0x28)), *((rsp + 0x30)), 0);\n    r14d = eax;\n    goto label_2;\nlabel_20:\n    *((rsp + 0x1c)) = r9d;\n    rax = getenv (\"POSIXLY_CORRECT\");\n    r9d = *((rsp + 0x1c));\n    if (rax == 0) {\n        goto label_37;\n    }\n    rdx = *((rbx + 0x20));\n    goto label_8;\nlabel_30:\n    edx = *((rdx + 1));\n    if (*((rax + 2)) == 0x3a) {\n        goto label_38;\n    }\n    rax = *(rbx);\n    if (dl != 0) {\n        goto label_39;\n    }\n    if (ebp == eax) {\n        goto label_40;\n    }\n    edx = rax + 1;\n    rax = *((r12 + rax*8));\n    *(rbx) = edx;\n    *((rbx + 0x10)) = rax;\nlabel_13:\n    *((rbx + 0x20)) = 0;\n    goto label_2;\nlabel_32:\n    if (eax == edx) {\n        goto label_9;\n    }\n    *((rbx + 0x2c)) = eax;\n    edx = eax;\n    goto label_9;\nlabel_33:\n    eax = edx;\n    goto label_10;\nlabel_19:\n    *((rbx + 0x28)) = 0;\n    r15++;\n    edx = 0;\n    goto label_11;\nlabel_28:\n    while (1) {\n        *((rbx + 8)) = r14d;\n        r14d = 0x3f;\n        goto label_2;\nlabel_26:\n        *((rbx + 0x2c)) = eax;\n        edx = eax;\n        goto label_12;\nlabel_39:\n        eax++;\n        *((rbx + 0x10)) = r8;\n        *(rbx) = eax;\n        goto label_13;\n        rbp = *(r12);\n        edx = 5;\n        rax = dcgettext (0, \"%s: invalid option -- '%c'\\n\");\n        rdi = stderr;\n        r8d = r14d;\n        esi = 1;\n        rdx = rax;\n        rcx = rbp;\n        eax = 0;\n        fprintf_chk ();\n    }\nlabel_38:\n    if (dl != 0) {\n        *((rbx + 0x10)) = r8;\n        *(rbx)++;\n        goto label_13;\nlabel_37:\n        *((rbx + 0x28)) = 1;\n        rdx = *((rbx + 0x20));\n        goto label_11;\n    }\n    *((rbx + 0x10)) = 0;\n    goto label_13;\nlabel_40:\n    while (1) {\n        *((rbx + 8)) = r14d;\n        r14d = 0;\n        r14b = (*(r15) != 0x3a) ? 1 : 0;\n        r14d = r14 * 5;\n        goto label_13;\nlabel_35:\n        rdx = r14 + 2;\n        *((rbx + 0x20)) = rdx;\n        goto label_14;\nlabel_36:\n        if (r13d != 0) {\n            goto label_41;\n        }\nlabel_15:\n        *((rbx + 8)) = r14d;\n        r14d = 0;\n        r14b = (*(r15) != 0x3a) ? 1 : 0;\n        r14d = r14 * 5;\n        goto label_2;\n        rbp = *(r12);\n        edx = 5;\n        rax = dcgettext (0, \"%s: option requires an argument -- '%c'\\n\");\n        rdi = stderr;\n        r8d = r14d;\n        esi = 1;\n        rdx = rax;\n        rcx = rbp;\n        eax = 0;\n        fprintf_chk ();\n    }\nlabel_41:\n    rbp = *(r12);\n    edx = 5;\n    rax = dcgettext (0, \"%s: option requires an argument -- '%c'\\n\");\n    rdi = stderr;\n    r8d = r14d;\n    esi = 1;\n    rdx = rax;\n    rcx = rbp;\n    eax = 0;\n    fprintf_chk ();\n    goto label_15;\n}\n"
        },
        {
            "funcName": "fcn_00409940",
            "funcStartAddr": "0x409940",
            "funcEndAddr": "0x409996",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409940 */\n#include <stdint.h>\n \nint32_t fcn_00409940 (int64_t arg_10h) {\n    eax = *(0x0060f35c);\n    *(0x0060f500) = eax;\n    eax = *(0x0060f358);\n    *(0x0060f504) = eax;\n    eax = *((rsp + 0x10));\n    fcn_00409370 (rdi, rsi, rdx, rcx, r8, r9);\n    edx = imp.__libc_start_main;\n    *(0x0060f35c) = edx;\n    rdx = imp.__libc_start_main;\n    *(0x0060f540) = rdx;\n    edx = imp.__libc_start_main;\n    *(0x0060f354) = edx;\n    return eax;\n}\n"
        },
        {
            "funcName": "fcn_004099c0",
            "funcStartAddr": "0x4099c0",
            "funcEndAddr": "0x4099d3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x4099c0 */\n#include <stdint.h>\n \nvoid fcn_004099c0 (void) {\n    r9d = 0;\n    fcn_00409940 (rdi);\n}\n"
        },
        {
            "funcName": "fcn_00409a40",
            "funcStartAddr": "0x409a40",
            "funcEndAddr": "0x409aba",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409a40 */\n#include <stdint.h>\n \nuint64_t fcn_00409a40 (wint_t arg1, int64_t arg2, size_t * arg3, mbstate_t * ps) {\n    int64_t var_ch;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = ps;\n    if (rsi == 0) {\n        goto label_1;\n    }\n    rbx = 0xfffffffffffffffe;\n    if (rdx == 0) {\n        goto label_0;\n    }\n    r12 = rdi;\n    while (1) {\n        rax = mbrtowc (r12, rbp, rdx, rcx);\n        rbx = rax;\n        if (rax > 0xfffffffffffffffd) {\n            goto label_2;\n        }\nlabel_0:\n        rax = rbx;\n        return rax;\nlabel_1:\n        edx = 1;\n        r12 = rsp + 0xc;\n    }\nlabel_2:\n    al = fcn_00409bc0 (0);\n    if (al != 0) {\n        goto label_0;\n    }\n    eax = *(rbp);\n    ebx = 1;\n    *(r12) = eax;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00409ac0",
            "funcStartAddr": "0x409ac0",
            "funcEndAddr": "0x409b1d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409ac0 */\n#include <stdint.h>\n \nuint64_t fcn_00409ac0 (int64_t arg1) {\n    rdi = arg1;\n    rax = fpending ();\n    ebx = *(rbp);\n    r12 = rax;\n    ebx &= 0x20;\n    eax = fcn_00408a10 (rbp);\n    if (ebx != 0) {\n        goto label_1;\n    }\n    if (eax == 0) {\n        goto label_0;\n    }\n    if (r12 != 0) {\n        goto label_2;\n    }\n    rax = errno_location ();\n    al = (*(rax) != 9) ? 1 : 0;\n    eax = (int32_t) al;\n    eax = -eax;\n    do {\nlabel_0:\n        return rax;\nlabel_1:\n        if (eax != 0) {\n            goto label_2;\n        }\n        errno_location ();\n        *(rax) = 0;\n        eax = 0xffffffff;\n    } while (1);\nlabel_2:\n    eax = 0xffffffff;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00409b20",
            "funcStartAddr": "0x409b20",
            "funcEndAddr": "0x409bb3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409b20 */\n#include <stdint.h>\n \nuint64_t fcn_00409b20 (int64_t arg2, const char * filename) {\n    rsi = arg2;\n    rdi = filename;\n    rax = fopen (rdi, rsi);\n    rbx = rax;\n    if (rax == 0) {\n        goto label_0;\n    }\n    eax = fileno (rax);\n    while (rax != 0) {\nlabel_0:\n        rax = rbx;\n        return rax;\n        eax = fcn_0040a190 (eax, rsi);\n        r12d = eax;\n        if (eax < 0) {\n            goto label_1;\n        }\n        eax = fcn_00408a10 (rbx);\n        if (eax != 0) {\n            goto label_2;\n        }\n        rsi = rbp;\n        edi = r12d;\n        rax = fdopen ();\n        rbx = rax;\n    }\nlabel_2:\n    rax = errno_location ();\n    ebp = *(rax);\n    rbx = rax;\n    close (r12d);\n    *(rbx) = ebp;\n    ebx = 0;\n    goto label_0;\nlabel_1:\n    rax = errno_location ();\n    ebx = 0;\n    r12d = *(rax);\n    fcn_00408a10 (rbx);\n    *(rbp) = r12d;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00409bc0",
            "funcStartAddr": "0x409bc0",
            "funcEndAddr": "0x409c1e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409bc0 */\n#include <stdint.h>\n \nuint64_t fcn_00409bc0 (int32_t category) {\n    rdi = category;\n    rax = setlocale (rdi, 0);\n    rdx = rax;\n    eax = 1;\n    if (rdx != 0) {\n        ecx = 2;\n        edi = 0x40ccd4;\n        rsi = rdx;\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        cl = (rdx > 0) ? 1 : 0;\n        eax = 0;\n        if (cl != 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    edi = \"POSIX\";\n    ecx = 6;\n    rsi = rdx;\n    __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n    al = (cl > 0) ? 1 : 0;\n    al = (al != 0) ? 1 : 0;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00409c20",
            "funcStartAddr": "0x409c20",
            "funcEndAddr": "0x40a182",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x409c20 */\n#include <stdint.h>\n \nuint64_t fcn_00409c20 (void) {\n    uint32_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_60h;\n    rax = nl_langinfo (0xe);\n    r15 = imp.__libc_start_main;\n    rbx = rax;\n    eax = 0x40cccf;\n    if (rax == 0) {\n        rbx = rax;\n    }\n    if (r15 == 0) {\n        goto label_15;\n    }\nlabel_1:\n    ebp = *(r15);\n    if (bpl != 0) {\n        goto label_16;\n    }\n    goto label_17;\n    do {\nlabel_0:\n        strlen (r15);\n        rbp = r15 + rax + 1;\n        strlen (rbp);\n        r15 = rbp + rax + 1;\n        ebp = *(r15);\n        if (bpl == 0) {\n            goto label_17;\n        }\nlabel_16:\n        eax = strcmp (rbx, r15);\n        if (eax == 0) {\n            goto label_18;\n        }\n    } while (bpl != 0x2a);\n    if (*((r15 + 1)) != 0) {\n        goto label_0;\n    }\nlabel_18:\n    strlen (r15);\n    rbx = r15 + rax + 1;\nlabel_17:\n    eax = \"ASCII\";\n    if (*(rbx) == 0) {\n        rbx = rax;\n    }\n    rax = rbx;\n    return rax;\nlabel_15:\n    rax = getenv (\"CHARSETALIASDIR\");\n    r13 = rax;\n    if (rax == 0) {\n        goto label_19;\n    }\n    if (*(rax) == 0) {\n        goto label_19;\n    }\n    rax = strlen (rax);\n    r12 = rax;\n    r14 = rax;\n    if (rax != 0) {\n        goto label_20;\n    }\nlabel_13:\n    rax = malloc (0xe);\n    if (rax != 0) {\n        goto label_21;\n    }\n    do {\n        r15d = 0x40cccf;\nlabel_2:\n        *(0x0060f538) = r15;\n        goto label_1;\nlabel_19:\n        r12d = 0x65;\n        r14d = 0x64;\n        r13d = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\nlabel_14:\n        rax = malloc (0x73);\n    } while (rax == 0);\n    memcpy (rbp, r13, r14);\n    *((rbp + r14)) = 0x2f;\n    do {\n        r12 += rbp;\n        rax = 0x2e74657372616863;\n        *(r12) = rax;\n        eax = 0x73;\n        *((r12 + 0xc)) = ax;\n        eax = 0;\n        *((r12 + 8)) = 0x61696c61;\n        eax = open (rbp, 0, rdx);\n        r12d = eax;\n        if (eax >= 0) {\n            goto label_22;\n        }\nlabel_6:\n        r15d = 0x40cccf;\nlabel_7:\n        free (rbp);\n        goto label_2;\nlabel_21:\n        eax = memcpy (rbp, r13, r14);\n    } while (1);\nlabel_22:\n    esi = 0x40c495;\n    edi = eax;\n    r15d = 0;\n    rax = fdopen ();\n    *((rsp + 8)) = 0;\n    r13 = rax;\n    if (rax == 0) {\n        goto label_23;\n    }\n    rax = rbx;\n    r12 = rsp + 0x60;\n    r14 = rsp + 0x20;\n    rbx = r13;\n    r13 = rax;\n    do {\nlabel_3:\n        rax = *((rbx + 8));\n        if (rax >= *((rbx + 0x10))) {\n            goto label_24;\n        }\nlabel_4:\n        rdx = rax + 1;\n        *((rbx + 8)) = rdx;\n        edi = *(rax);\nlabel_5:\n        eax = rdi - 9;\n    } while (eax <= 1);\n    if (edi == 0x20) {\n        goto label_3;\n    }\n    if (edi == 0x23) {\n        goto label_25;\n    }\n    eax = ungetc (rdi, rbx);\n    eax = 0;\n    rcx = r12;\n    rdx = r14;\n    eax = fscanf (rbx, \"%50s %50s\");\n    if (eax <= 1) {\n        goto label_12;\n    }\n    rcx = r14;\n    do {\n        edx = *(rcx);\n        rcx += 4;\n        eax = rdx - 0x1010101;\n        edx = ~edx;\n        eax &= edx;\n        eax &= 0x80808080;\n    } while (eax == 0);\n    edx = eax;\n    edx >>= 0x10;\n    if ((eax & 0x8080) == 0) {\n        eax = edx;\n    }\n    rdx = rcx + 2;\n    if ((eax & 0x8080) == 0) {\n        rcx = rdx;\n    }\n    edx = eax;\n    dl += al;\n    rdx = r12;\n    rcx -= 3;\n    rcx -= r14;\n    do {\n        esi = *(rdx);\n        rdx += 4;\n        eax = rsi - 0x1010101;\n        esi = ~esi;\n        eax &= esi;\n        eax &= 0x80808080;\n    } while (eax == 0);\n    esi = eax;\n    *((rsp + 0x10)) = rcx;\n    esi >>= 0x10;\n    if ((eax & 0x8080) == 0) {\n        eax = esi;\n    }\n    rsi = rdx + 2;\n    if ((eax & 0x8080) == 0) {\n        rdx = rsi;\n    }\n    esi = eax;\n    sil += al;\n    rdx -= 3;\n    rdx -= r12;\n    rax = rcx + rdx;\n    *((rsp + 0x18)) = rdx;\n    if (*((rsp + 8)) != 0) {\n        goto label_26;\n    }\n    rcx = rax + 2;\n    *((rsp + 8)) = rcx;\n    rax = malloc (rax + 3);\n    rcx = *((rsp + 0x10));\n    rdx = *((rsp + 0x18));\nlabel_9:\n    if (rax == 0) {\n        goto label_27;\n    }\n    rdi = *((rsp + 8));\n    rsi = 0xfffffffffffffffe;\n    rsi -= rcx;\n    rcx++;\n    rdi -= rdx;\n    rsi += rdi;\n    rsi += rax;\n    if (ecx >= 8) {\n        goto label_28;\n    }\n    if ((cl & 4) != 0) {\n        goto label_29;\n    }\n    if (ecx != 0) {\n        r9d = *(r14);\n        *(rsi) = r9b;\n        if ((cl & 2) != 0) {\n            goto label_30;\n        }\n    }\nlabel_10:\n    rdx++;\n    rcx = rax + rdi - 1;\n    if (edx >= 8) {\n        goto label_31;\n    }\n    if ((dl & 4) != 0) {\n        goto label_32;\n    }\n    if (edx != 0) {\n        esi = *(r12);\n        *(rcx) = sil;\n        if ((dl & 2) != 0) {\n            goto label_33;\n        }\n    }\nlabel_11:\n    r15 = rax;\n    rax = *((rbx + 8));\n    if (rax < *((rbx + 0x10))) {\n        goto label_4;\n    }\nlabel_24:\n    rdi = rbx;\n    eax = uflow ();\n    edi = eax;\n    if (eax != 0xffffffff) {\n        goto label_5;\n    }\nlabel_12:\n    rax = r13;\n    r13 = rbx;\n    rbx = rax;\n    fcn_00408a10 (rbx);\n    rax = *((rsp + 8));\n    if (rax == 0) {\n        goto label_6;\n    }\n    *((r15 + rax)) = 0;\n    goto label_7;\n    do {\n        rdx = rax + 1;\n        *((rbx + 8)) = rdx;\n        eax = *(rax);\n        edx = 1;\nlabel_8:\n        if (eax == 0xa) {\n            goto label_34;\n        }\n        if (dl == 0) {\n            goto label_34;\n        }\nlabel_25:\n        rax = *((rbx + 8));\n    } while (rax < *((rbx + 0x10)));\n    rdi = rbx;\n    eax = uflow ();\n    dl = (eax != 0xffffffff) ? 1 : 0;\n    goto label_8;\nlabel_26:\n    rax += *((rsp + 8));\n    rcx = rax + 2;\n    *((rsp + 8)) = rcx;\n    eax = realloc (r15, rax + 3);\n    rdx = *((rsp + 0x18));\n    rcx = *((rsp + 0x10));\n    goto label_9;\nlabel_28:\n    r9 = *(r14);\n    *(rsi) = r9;\n    r9d = ecx;\n    r10 = *((r14 + r9 - 8));\n    *((rsi + r9 - 8)) = r10;\n    r9 = rsi + 8;\n    r10 = r14;\n    r9 &= 0xfffffffffffffff8;\n    rsi -= r9;\n    ecx += esi;\n    r10 -= rsi;\n    ecx &= 0xfffffff8;\n    if (ecx < 8) {\n        goto label_10;\n    }\n    ecx &= 0xfffffff8;\n    esi = 0;\n    do {\n        r8d = esi;\n        esi += 8;\n        r11 = *((r10 + r8));\n        *((r9 + r8)) = r11;\n    } while (esi < ecx);\n    goto label_10;\nlabel_31:\n    rsi = *(r12);\n    r9 = r12;\n    *(rcx) = rsi;\n    esi = edx;\n    rdi = *((r12 + rsi - 8));\n    *((rcx + rsi - 8)) = rdi;\n    rdi = rcx + 8;\n    rdi &= 0xfffffffffffffff8;\n    rcx -= rdi;\n    edx += ecx;\n    r9 -= rcx;\n    edx &= 0xfffffff8;\n    if (edx < 8) {\n        goto label_11;\n    }\n    edx &= 0xfffffff8;\n    ecx = 0;\n    do {\n        esi = ecx;\n        ecx += 8;\n        r8 = *((r9 + rsi));\n        *((rdi + rsi)) = r8;\n    } while (ecx < edx);\n    goto label_11;\nlabel_34:\n    if (eax == 0xffffffff) {\n        goto label_12;\n    }\n    goto label_3;\nlabel_20:\n    if (*((r13 + rax - 1)) == 0x2f) {\n        rdi = rax + 0xe;\n        goto label_13;\nlabel_23:\n        close (r12d);\n        goto label_6;\nlabel_29:\n        r9d = *(r14);\n        *(rsi) = r9d;\n        r9d = *((r14 + rcx - 4));\n        *((rsi + rcx - 4)) = r9d;\n        goto label_10;\nlabel_32:\n        esi = *(r12);\n        *(rcx) = esi;\n        esi = *((r12 + rdx - 4));\n        *((rcx + rdx - 4)) = esi;\n        goto label_11;\nlabel_27:\n        rax = r13;\n        r13 = rbx;\n        r15d = 0x40cccf;\n        rbx = rax;\n        free (r15);\n        fcn_00408a10 (r13);\n        goto label_7;\nlabel_30:\n        r9d = *((r14 + rcx - 2));\n        *((rsi + rcx - 2)) = r9w;\n        goto label_10;\nlabel_33:\n        esi = edx;\n        edx = *((r12 + rsi - 2));\n        *((rcx + rsi - 2)) = dx;\n        goto label_11;\n    }\n    rdi = rax + 0xf;\n    r12++;\n    goto label_14;\n}\n"
        },
        {
            "funcName": "fcn_0040a190",
            "funcStartAddr": "0x40a190",
            "funcEndAddr": "0x40a19e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x40a190 */\n#include <stdint.h>\n \nint32_t fcn_0040a190 (int64_t arg1, int64_t arg4) {\n    rdi = arg1;\n    rcx = arg4;\n    edx = 3;\n    esi = 0;\n    eax = 0;\n    return void (*0x408a90)() ();\n}\n"
        },
        {
            "funcName": "fcn_0040a210",
            "funcStartAddr": "0x40a210",
            "funcEndAddr": "0x40a228",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x40a210 */\n#include <stdint.h>\n \nint64_t fcn_0040a210 (void) {\n    rax = 0x60f2c8;\n    edx = 0;\n    if (rax != 0) {\n        rdx = *(rax);\n    }\n    esi = 0;\n    return cxa_atexit ();\n}\n"
        },
        {
            "funcName": "fcn_0040a228",
            "funcStartAddr": "0x40a228",
            "funcEndAddr": "0x40a248",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_shred.elf @ 0x40a228 */\n#include <stdint.h>\n \nvoid fcn_0040a228 (int64_t arg3) {\n    rdx = arg3;\n    ebx = segment.GNU_RELRO;\n    do {\n        rax = *(rbx);\n        if (rax == -1) {\n            goto label_0;\n        }\n        void (*rax)() ();\n        rbx -= 8;\n    } while (1);\nlabel_0:\n}\n"
        }
    ],
    "funcCount": 69
}