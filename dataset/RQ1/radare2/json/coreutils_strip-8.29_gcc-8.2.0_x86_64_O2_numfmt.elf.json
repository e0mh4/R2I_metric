{
    "binaryInfo": {
        "isStripped": true,
        "binaryName": "coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf"
    },
    "buildInfo": {
        "decompilerName": "radare2",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "optLevel": "O"
    },
    "funcInfo": [
        {
            "funcName": "main",
            "funcStartAddr": "0x401b60",
            "funcEndAddr": "0x4028d0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x401b60 */\n#include <stdint.h>\n \nint32_t main (int32_t argc, char ** argv) {\n    int64_t var_20h;\n    int64_t var_8h;\n    int64_t var_10h;\n    uint32_t var_18h;\n    rdi = argc;\n    rsi = argv;\n    r12d = edi;\n    fcn_00405970 (*(rsi));\n    rax = setlocale (6, 0x40dc97);\n    rbx = rax;\n    bindtextdomain (0x40a19d, \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/share/locale\");\n    textdomain (0x40a19d, rsi);\n    rax = nl_langinfo (0x10000);\n    *(0x00610340) = rax;\n    if (rax == 0) {\n        goto label_22;\n    }\n    if (*(rax) == 0) {\n        goto label_22;\n    }\nlabel_1:\n    eax = strlen (*(0x00610340));\n    edi = 0x405490;\n    *(0x0061033c) = eax;\n    fcn_00409fa0 ();\n    do {\nlabel_0:\n        r8d = 0;\n        ecx = 0x40bd80;\n        edx = 0x40a1bf;\n        rsi = rbp;\n        edi = r12d;\n        eax = fcn_004096e0 ();\n        if (eax == 0xffffffff) {\n            goto label_23;\n        }\n        if (eax == 0x84) {\n            goto label_24;\n        }\n        if (eax <= 0x84) {\n            goto label_25;\n        }\n        if (eax == 0x89) {\n            goto label_26;\n        }\n        if (eax > 0x89) {\n            goto label_27;\n        }\n        if (eax == 0x86) {\n            goto label_28;\n        }\n        if (eax < 0x86) {\n            goto label_29;\n        }\n        if (eax != 0x87) {\n            goto label_30;\n        }\n        eax = fcn_00407e00 (*(0x00610570), 0, 0xa, 0x610380, 0x40dc97);\n        if (eax != 0) {\n            goto label_31;\n        }\n        rax = imp.__libc_start_main;\n        if (rax == 0) {\n            goto label_31;\n        }\n    } while (rax >= 0);\n    *(0x00610258) = 0;\n    rax = -rax;\n    *(0x00610380) = rax;\n    goto label_0;\nlabel_22:\n    *(0x00610340) = 0x40a1bd;\n    goto label_1;\nlabel_30:\n    if (eax == 0x88) {\n        if (*(0x00610568) != 0) {\n            goto label_32;\n        }\n        eax = fcn_00404b00 (*(0x00610570), 1, rdx);\n        goto label_0;\nlabel_27:\n        if (eax == 0x8b) {\n            goto label_33;\n        }\n        if (eax < 0x8b) {\n            goto label_34;\n        }\n        if (eax == 0x8c) {\n            rax = imp.__libc_start_main;\n            *(0x00610370) = rax;\n            goto label_0;\nlabel_25:\n            if (eax == 0x7a) {\n                goto label_35;\n            }\n            if (eax <= 0x7a) {\n                goto label_36;\n            }\n            if (eax == 0x81) {\n                goto label_37;\n            }\n            if (eax <= 0x81) {\n                goto label_38;\n            }\n            if (eax != 0x82) {\n                goto label_39;\n            }\n            fcn_004053b0 (\"--to\", *(0x00610570), 0x40c0a0, 0x40c090, 4, *(0x00610288));\n            eax = *((rax*4 + 0x40c090));\n            *(0x006103ac) = eax;\n            goto label_0;\n        }\n        if (eax != 0x8d) {\n            goto label_40;\n        }\n        fcn_004053b0 (\"--invalid\", *(0x00610570), 0x40c000, 0x40bfe0, 4, *(0x00610288));\n        eax = *((rax*4 + 0x40bfe0));\n        *(0x006103a8) = eax;\n        goto label_0;\nlabel_39:\n        if (eax != 0x83) {\n            goto label_40;\n        }\n        rax = fcn_004029b0 (*(0x00610570));\n        *(0x00610268) = rax;\n        goto label_0;\nlabel_38:\n        if (eax != 0x80) {\n            goto label_40;\n        }\n        fcn_004053b0 (\"--from\", *(0x00610570), 0x40c100, 0x40c0d0, 4, *(0x00610288));\n        eax = *((rax*4 + 0x40c0d0));\n        *(0x006103b0) = eax;\n        goto label_0;\nlabel_36:\n        if (eax == 0xffffff7e) {\n            goto label_41;\n        }\n        if (eax == 0x64) {\n            rdx = imp.__libc_start_main;\n            eax = *(rdx);\n            if (al != 0) {\n                if (*((rdx + 1)) != 0) {\n                    goto label_42;\n                }\n            }\n            *(0x00610254) = eax;\n            goto label_0;\n        }\n        if (eax == 0xffffff7d) {\n            goto label_43;\n        }\n    }\nlabel_40:\n    fcn_00404360 (1);\nlabel_34:\n    *(0x00610338) = 1;\nlabel_26:\n    *(0x00610348) = 1;\n    goto label_0;\nlabel_37:\n    rax = fcn_004029b0 (*(0x00610570));\n    *(0x00610270) = rax;\n    goto label_0;\nlabel_35:\n    *(0x00610250) = 0;\n    goto label_0;\nlabel_29:\n    rax = imp.__libc_start_main;\n    *(0x006103a0) = rax;\n    goto label_0;\nlabel_28:\n    *(0x00610398) = 1;\n    goto label_0;\nlabel_33:\n    rdi = imp.__libc_start_main;\n    if (rdi == 0) {\n        goto label_44;\n    }\n    eax = fcn_00408550 (rdi, 0, 0xa, 0x610350, 0x40dc97);\n    if (eax != 0) {\n        goto label_45;\n    }\n    if (*(0x00610350) != 0) {\n        goto label_0;\n    }\nlabel_45:\n    rax = fcn_00407590 (*(0x00610570));\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"invalid header value %s\");\n    rcx = rbx;\n    eax = 0;\n    rax = error (1, 0, rax);\nlabel_24:\n    fcn_004053b0 (\"--round\", *(0x00610570), 0x40c060, 0x40c030, 4, *(0x00610288));\n    eax = *((rax*4 + 0x40c030));\n    *(0x00610278) = eax;\n    goto label_0;\nlabel_43:\n    r9d = 0;\n    r8d = \"Assaf Gordon\";\n    eax = 0;\n    rcx = *(str.8.29);\n    fcn_00407a10 (*(obj.stdout), \"numfmt\", \"GNU coreutils\");\n    exit (0);\nlabel_44:\n    *(0x00610350) = 1;\n    goto label_0;\nlabel_23:\n    if (*(0x00610370) != 0) {\n        if (*(0x00610398) != 0) {\n            goto label_46;\n        }\n    }\n    if (rbx == 0) {\n        if (*(0x00610348) != 0) {\n            goto label_47;\n        }\n    }\nlabel_13:\n    if (*(0x00610348) != 0) {\n        eax = imp.__libc_start_main;\n        eax |= *(0x006103ac);\n        if (eax != 0) {\n            goto label_48;\n        }\n        rbx = imp.__libc_start_main;\n        if (*(0x00610398) != 0) {\n            goto label_49;\n        }\n        if (*(0x00610380) != 0) {\n            goto label_50;\n        }\n        if (rbx != 0) {\n            goto label_15;\n        }\n        edx = 5;\n        rax = dcgettext (0, \"no conversion option specified\");\n        eax = 0;\n        eax = error (0, 0, rax);\n    }\nlabel_48:\n    rbx = imp.__libc_start_main;\n    if (rbx == 0) {\n        goto label_51;\n    }\nlabel_15:\n    *((rsp + 0x18)) = 0;\n    r14d = 0;\n    eax = 0;\n    while (dl != 0x25) {\n        if (dl == 0) {\n            goto label_52;\n        }\n        edx = 1;\nlabel_2:\n        rax += rdx;\n        r14++;\n        edx = *((rbx + rax));\n    }\n    r13 = rax + 1;\n    if (*((rbx + rax + 1)) != 0x25) {\n        goto label_53;\n    }\n    edx = 2;\n    goto label_2;\nlabel_6:\n    if (r14 == 0) {\n        goto label_54;\n    }\nlabel_21:\n    rax = fcn_00407de0 (rbx, r14);\n    *(0x00610368) = rax;\n    if (*(r13) != 0) {\n        goto label_54;\n    }\nlabel_17:\n    if (*(0x00610338) != 0) {\n        rsi = imp.__libc_start_main;\n        if (rsi == 0) {\n        }\n        rax = fcn_00407570 (2, 0x40dc97);\n        rsi = imp.__libc_start_main;\n        rcx = rax;\n        if (rsi == 0) {\n        }\n        *((rsp + 8)) = rcx;\n        r14d = \"Left\";\n        r13d = 0x40a1b6;\n        rax = fcn_00407570 (1, 0x40dc97);\n        r9 = imp.__libc_start_main;\n        rsi = rbx;\n        r15 = rax;\n        eax = \"Right\";\n        if (*(0x00610258) != 0) {\n            r14 = rax;\n        }\n        eax = 0x40a1ba;\n        *(rsp) = r9;\n        if (*(0x00610398) == 0) {\n            r13 = rax;\n        }\n        rax = fcn_00407570 (0, rsi);\n        rdi = stderr;\n        esi = 1;\n        rcx = *((rsp + 0x10));\n        r8 = r13;\n        edx = \"format String:\\n  input: %s\\n  grouping: %s\\n  padding width: %ld\\n  alignment: %s\\n  prefix: %s\\n  suffix: %s\\n\";\n        rcx = rax;\n        eax = 0;\n        r9 = *((rsp + 0x20));\n        eax = fprintf_chk ();\n    }\nlabel_51:\n    if (*(0x00610398) != 0) {\n        goto label_55;\n    }\nlabel_5:\n    rdi = imp.__libc_start_main;\n    if (rdi >= *(0x00610388)) {\n        goto label_56;\n    }\nlabel_4:\n    eax = 0;\n    if (*(0x00610380) == 0) {\n        eax = 0;\n        al = (*(0x00610254) == 0x80) ? 1 : 0;\n    }\n    *(0x00610358) = eax;\n    if (*(0x006103a8) != 0) {\n        *(0x0061025c) = 0;\n    }\n    eax = *(0x006102fc);\n    if (eax < r12d) {\n        goto label_57;\n    }\n    rax = imp.__libc_start_main;\n    r13 = rsp + 0x18;\n    rbp = rsp + 0x10;\n    *((rsp + 0x10)) = 0;\n    *((rsp + 0x18)) = 0;\n    rdx = rax - 1;\n    *(0x00610350) = rdx;\n    if (rax != 0) {\n        goto label_58;\n    }\n    goto label_59;\n    do {\n        rsi = stdout;\n        rdi = *((rsp + 0x10));\n        fputs_unlocked ();\n        rax = imp.__libc_start_main;\n        rdx = rax - 1;\n        *(0x00610350) = rdx;\n        if (rax == 0) {\n            goto label_59;\n        }\nlabel_58:\n        edx = *(0x00610250);\n        rcx = stdin;\n        rsi = r13;\n        rdi = rbp;\n        rax = getdelim ();\n    } while (rax > 0);\nlabel_59:\n    ebx = 1;\n    while (rax > 0) {\n        rdi = *((rsp + 0x10));\n        rcx = rdi + rax - 1;\n        eax = *(0x00610250);\n        edx = *(rcx);\n        sil = (edx == eax) ? 1 : 0;\n        if (edx == eax) {\n            *(rcx) = 0;\n        }\n        esi = (int32_t) sil;\n        eax = fcn_004041a0 (*((rsp + 0x10)), rsi);\n        ebx &= eax;\n        edx = *(0x00610250);\n        rcx = stdin;\n        rsi = r13;\n        rdi = rbp;\n        rax = getdelim ();\n    }\n    rax = stdin;\n    if ((*(rax) & 0x20) != 0) {\n        goto label_60;\n    }\nlabel_3:\n    if (*(0x00610348) == 0) {\n        goto label_61;\n    }\n    if (ebx == 0) {\n        goto label_62;\n    }\nlabel_10:\n    eax = 0;\nlabel_11:\n    return rax;\nlabel_57:\n    if (*(0x00610348) != 0) {\n        if (*(0x00610350) != 0) {\n            goto label_63;\n        }\n    }\nlabel_14:\n    ebx = 1;\n    do {\n        rax = (int64_t) eax;\n        eax = fcn_004041a0 (*((rbp + rax*8)), 1);\n        ebx &= eax;\n        eax = *(0x006102fc);\n        eax++;\n        *(0x006102fc) = eax;\n    } while (eax < r12d);\n    goto label_3;\nlabel_56:\n    fcn_00402bd0 (rdi);\n    goto label_4;\nlabel_55:\n    if (*(0x006103ac) != 0) {\n        goto label_64;\n    }\nlabel_16:\n    if (*(0x00610348) == 0) {\n        goto label_5;\n    }\n    rax = nl_langinfo (0x10001);\n    if (*(rax) != 0) {\n        goto label_5;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"grouping has no effect in this locale\");\n    eax = 0;\n    error (0, 0, rax);\n    goto label_5;\nlabel_53:\n    r15d = 0;\n    rcx = rbx + r13;\n    do {\nlabel_9:\n        rax = strspn (rcx, 0x40dc9a);\n        r13 += rax;\n        rcx = rbx + r13;\n        edx = *(rcx);\n        if (dl == 0x27) {\n            goto label_65;\n        }\n        if (dl == 0x30) {\n            goto label_66;\n        }\n    } while (rax != 0);\n    *(rsp) = rcx;\n    r13 = rsp + 0x18;\n    errno_location ();\n    rcx = *(rsp);\n    *(rax) = 0;\n    *((rsp + 8)) = rax;\n    rax = strtol (rcx, r13, 0xa);\n    r8 = *((rsp + 8));\n    rcx = *(rsp);\n    r9 = rax;\n    if (*(r8) == 0x22) {\n        goto label_67;\n    }\n    if (*((rsp + 0x18)) != rcx) {\n        if (rax == 0) {\n            goto label_19;\n        }\n        if (*(0x00610348) == 0) {\n            goto label_68;\n        }\n        if (*(0x00610380) == 0) {\n            goto label_68;\n        }\n        if (r15b == 0) {\n            goto label_69;\n        }\n        if (rax <= 0) {\n            goto label_69;\n        }\nlabel_18:\n        *(0x00610378) = r9;\n    }\nlabel_19:\n    rdx = *((rsp + 0x18));\n    rax = *((rsp + 0x18));\n    edx = *(rdx);\n    rax -= rbx;\n    if (dl == 0) {\n        goto label_70;\n    }\n    if (dl == 0x2e) {\n        goto label_71;\n    }\nlabel_20:\n    if (*((rbx + rax)) != 0x66) {\n        goto label_72;\n    }\n    rax++;\n    r13 = rbx + rax;\n    edx = *(r13);\n    if (dl != 0) {\n        goto label_73;\n    }\n    goto label_74;\nlabel_7:\n    edx = esi;\nlabel_8:\n    rax = rcx;\n    if (dl == 0) {\n        goto label_6;\n    }\nlabel_73:\n    rcx = rax + 1;\n    esi = *((rbx + rax + 1));\n    if (dl != 0x25) {\n        goto label_7;\n    }\n    if (sil != 0x25) {\n        goto label_75;\n    }\n    rcx = rax + 2;\n    edx = *((rbx + rax + 2));\n    goto label_8;\nlabel_65:\n    *(0x00610398) = 1;\n    r13++;\n    rcx = rbx + r13;\n    goto label_9;\nlabel_66:\n    r13++;\n    r15d = 1;\n    rcx = rbx + r13;\n    goto label_9;\nlabel_61:\n    if (ebx != 0) {\n        goto label_10;\n    }\nlabel_12:\n    eax = imp.__libc_start_main;\n    eax -= 2;\n    if (eax <= 1) {\n        goto label_10;\n    }\n    eax = 2;\n    goto label_11;\nlabel_62:\n    edx = 5;\n    rax = dcgettext (0, \"failed to convert some of the input numbers\");\n    eax = 0;\n    error (0, 0, rax);\n    goto label_12;\nlabel_47:\n    edx = 5;\n    rax = dcgettext (0, \"failed to set locale\");\n    eax = 0;\n    error (0, 0, rax);\n    goto label_13;\nlabel_63:\n    edx = 5;\n    rax = dcgettext (0, \"--header ignored with command-line input\");\n    eax = 0;\n    error (0, 0, rax);\n    eax = *(0x006102fc);\n    if (r12d <= eax) {\n        goto label_10;\n    }\n    goto label_14;\nlabel_49:\n    if (rbx != 0) {\n        goto label_15;\n    }\n    goto label_16;\nlabel_54:\n    rax = fcn_00407d80 (r13);\n    *(0x00610360) = rax;\n    goto label_17;\nlabel_60:\n    edx = 5;\n    rax = dcgettext (0, \"error reading input\");\n    rax = errno_location ();\n    eax = 0;\n    error (0, *(rax), rbp);\n    goto label_3;\nlabel_69:\n    edx = 5;\n    *(rsp) = r8;\n    *((rsp + 8)) = r9;\n    rax = dcgettext (0, \"--format padding overriding --padding\");\n    eax = 0;\n    error (0, 0, rax);\n    r9 = *((rsp + 8));\n    r8 = *(rsp);\nlabel_68:\n    if (r9 < 0) {\n        goto label_76;\n    }\n    if (r15b != 0) {\n        goto label_18;\n    }\n    *(0x00610380) = r9;\n    goto label_19;\nlabel_71:\n    *(r8) = 0;\n    r15 = rbx + rax + 1;\n    *(rsp) = r8;\n    rax = strtol (r15, r13, 0xa);\n    r8 = *(rsp);\n    *(0x00610260) = rax;\n    if (*(r8) == 0x22) {\n        goto label_77;\n    }\n    if (rax < 0) {\n        goto label_77;\n    }\n    rax = ctype_b_loc ();\n    rcx = *(r15);\n    rax = *(rax);\n    if ((*((rax + rcx*2)) & 1) != 0) {\n        goto label_77;\n    }\n    if (cl == 0x2b) {\n        goto label_77;\n    }\n    rax = *((rsp + 0x18));\n    rax -= rbx;\n    goto label_20;\nlabel_76:\n    *(0x00610258) = 0;\n    r9 = -r9;\n    *(0x00610380) = r9;\n    goto label_19;\nlabel_50:\n    if (rbx != 0) {\n        goto label_15;\n    }\n    goto label_5;\nlabel_74:\n    if (r14 == 0) {\n        goto label_17;\n    }\n    goto label_21;\nlabel_41:\n    fcn_00404360 (0);\nlabel_52:\n    rax = fcn_00407590 (rbx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"format %s has no %% directive\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_67:\n    rax = fcn_00407590 (rbx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"invalid format %s (width overflow)\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_46:\n    edx = 5;\n    rax = dcgettext (0, \"--grouping cannot be combined with --format\");\n    eax = 0;\n    error (1, 0, rax);\nlabel_64:\n    edx = 5;\n    rax = dcgettext (0, \"grouping cannot be combined with --to\");\n    eax = 0;\n    error (1, 0, rax);\nlabel_75:\n    rax = fcn_00407590 (rbx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"format %s has too many %% directives\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_72:\n    rax = fcn_00407590 (rbx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"invalid format %s, directive must be %%[0]['][-][N][.][N]f\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_70:\n    rax = fcn_00407590 (rbx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"format %s ends in %%\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_77:\n    rax = fcn_00407590 (rbx);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"invalid precision in format %s\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_31:\n    rax = fcn_00407590 (*(0x00610570));\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"invalid padding value %s\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\nlabel_32:\n    edx = 5;\n    rax = dcgettext (0, \"multiple field specifications\");\n    eax = 0;\n    error (1, 0, rax);\nlabel_42:\n    edx = 5;\n    rax = dcgettext (0, \"the delimiter must be a single character\");\n    eax = 0;\n    error (1, 0, rax);\n}\n"
        },
        {
            "funcName": "fcn_004028fb",
            "funcStartAddr": "0x4028fb",
            "funcEndAddr": "0x40291a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4028fb */\n#include <stdint.h>\n \nint32_t fcn_004028fb (void) {\n    eax = __progname;\n    if (rax != obj.__progname) {\n        eax = 0;\n        if (rax == 0) {\n            goto label_0;\n        }\n        edi = __progname;\n        void (*rax)() ();\n    }\nlabel_0:\n    return eax;\n}\n"
        },
        {
            "funcName": "fcn_00402951",
            "funcStartAddr": "0x402951",
            "funcEndAddr": "0x4029a8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x402951 */\n#include <stdint.h>\n \nint64_t fcn_00402951 (int32_t argc, func fini, func init, func main, func rtld_fini, void * stack_end, char ** ubp_av) {\n    rsi = argc;\n    r8 = fini;\n    rcx = init;\n    rdi = main;\n    r9 = rtld_fini;\n    xmm0 = stack_end;\n    rdx = ubp_av;\n    if (*(0x00610328) != 0) {\n        goto label_0;\n    }\n    r12d = section..dtors;\n    ebx = 0x60fe48;\n    rbx -= section..dtors;\n    rbx >>= 3;\n    rbx--;\n    do {\n        rax = imp.__libc_start_main;\n        if (rax >= rbx) {\n            goto label_1;\n        }\n        rax++;\n        *(0x00610330) = rax;\n        uint64_t (*r12 + rax*8)() ();\n    } while (1);\nlabel_1:\n    fcn_004028fb ();\n    *(0x00610328) = 1;\n    return rax;\nlabel_0:\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004029a8",
            "funcStartAddr": "0x4029a8",
            "funcEndAddr": "0x402a3b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4029a8 */\n#include <stdint.h>\n \nint64_t fcn_004029a8 (void) {\n    do {\n        esi = __progname;\n        ecx = 2;\n        rsi -= obj.__progname;\n        rsi >>= 3;\n        rax = rsi;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        rsi = rax;\n        if (rax != 0) {\n            eax = 0;\n            if (rax == 0) {\n                goto label_0;\n            }\n            edi = __progname;\n            void (*rax)() ();\n        }\nlabel_0:\n        return rax;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_004029b0",
            "funcStartAddr": "0x4029b0",
            "funcEndAddr": "0x402af0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4029b0 */\n#include <stdint.h>\n \nuint64_t fcn_004029b0 (int64_t arg1) {\n    int64_t var_8h;\n    rdi = arg1;\n    rax = strlen (rdi);\n    *(rsp) = 0;\n    if (rax != 0) {\n        rbx = rax;\n        r12 = rax - 1;\n        eax = *((rbp + rax - 1));\n        eax -= 0x30;\n        if (eax > 9) {\n            goto label_1;\n        }\n    }\n    r9 = rbp;\n    r12d = 0;\n    do {\nlabel_0:\n        eax = fcn_00408550 (r9, rsp, 0xa, rsp + 8, \"KMGTPEZY\");\n        if (eax != 0) {\n            goto label_2;\n        }\n        rax = *(rsp);\n        if (*(rax) != 0) {\n            goto label_2;\n        }\n        rbx = *((rsp + 8));\n        if (rbx == 0) {\n            goto label_2;\n        }\n        free (r12);\n        rax = rbx;\n        return rax;\nlabel_1:\n        rax = fcn_00407b50 (rbx + 2);\n        r12 += rax;\n        *(rsp) = r12;\n        rax = memcpy (rax, rbp, rbx);\n        r9 = rax;\n        if (*(r12) != 0x69) {\n            goto label_3;\n        }\n        if (rbx == 1) {\n            goto label_3;\n        }\n        eax = *((r12 - 1));\n        eax -= 0x30;\n        if (eax <= 9) {\n            goto label_3;\n        }\n        *(r12) = 0;\n        r8d = \"KMGTPEZY\";\n        r12 = r9;\n    } while (1);\nlabel_3:\n    rax = r12 + 2;\n    r8d = \"KMGTPEZY0\";\n    *(rsp) = rax;\n    eax = 0x42;\n    *((r12 + 1)) = ax;\n    r12 = r9;\n    goto label_0;\nlabel_2:\n    free (r12);\n    rax = fcn_00407590 (rbp);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"invalid unit size: %s\");\n    rcx = rbx;\n    eax = 0;\n    error (1, 0, rax);\n}\n"
        },
        {
            "funcName": "fcn_00402af0",
            "funcStartAddr": "0x402af0",
            "funcEndAddr": "0x402bc9",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x402af0 */\n#include <stdint.h>\n \nint32_t fcn_00402af0 (int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_ch;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = rdx;\n    rcx = *(rdi);\n    if (rcx == 0) {\n        goto label_1;\n    }\n    edx = *(rcx);\n    edx -= 0x30;\n    if (edx > 9) {\n        goto label_1;\n    }\n    rcx++;\n    eax = 0;\n    r8d = 0;\n    r9d = 1;\n    *(fp_stack--) = 0.0;\n    do {\n        *(fp_stack--) = 0.0;\n        __asm (\"fucompi st(1)\");\n        __asm (\"setp sil\");\n        if (rcx != 0) {\n            esi = r9d;\n        }\n        if (sil != 0) {\n            goto label_2;\n        }\n        if (edx != 0) {\n            goto label_2;\n        }\nlabel_0:\n        if (r8d > 0x12) {\n            if (r8d > 0x1b) {\n                goto label_3;\n            }\n            eax = 1;\n        }\n        *(fp_stack--) = *(0x0040c130);\n        *((rsp + 0xc)) = edx;\n        *(rdi) = rcx;\n        fp_stack[0] *= fp_stack[1];\n        fp_stack++;\n        *(fp_stack--) = *((rsp + 0xc));\n        fp_stack[0] += fp_stack[1];\n        fp_stack++;\n        if (rcx == 0) {\n            goto label_4;\n        }\n        edx = *(rcx);\n        rcx++;\n        edx -= 0x30;\n        if (edx > 9) {\n            goto label_4;\n        }\n    } while (1);\nlabel_1:\n    rdx = *(0x0061033c);\n    eax = strncmp (rcx, *(0x00610340), rdx);\n    edx = eax;\n    eax = 3;\n    if (edx != 0) {\n        goto label_5;\n    }\n    eax = 0;\n    *(fp_stack--) = 0.0;\nlabel_4:\n    if (*(rbx) != 0) {\n        fp_stack[0] = -fp_stack[0];\n    }\n    ? = fp_stack[0];\n    fp_stack--;\n    do {\nlabel_5:\n        return eax;\nlabel_2:\n        r8d++;\n        goto label_0;\nlabel_3:\n        fp_stack++;\n        eax = 2;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00402bd0",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402bf7",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x402bd0 */\n#include <stdint.h>\n \nuint64_t fcn_00402bd0 (int64_t arg1) {\n    rdi = arg1;\n    *(0x00610388) = rsi;\n    rax = fcn_00407bb0 (*(0x00610390), rdi + 1);\n    *(0x00610390) = rax;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00402c00",
            "funcStartAddr": "0x402c00",
            "funcEndAddr": "0x4041a0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x402c00 */\n#include <stdint.h>\n \nvoid fcn_00402c00 (int64_t arg1, uint32_t arg2) {\n    uint32_t var_10h;\n    int64_t var_20h;\n    int64_t var_40h_2;\n    int64_t var_40h;\n    int64_t var_4ch;\n    int64_t var_4eh;\n    int64_t var_60h_2;\n    uint32_t var_5eh;\n    uint32_t var_5fh;\n    char ** s1;\n    int64_t var_68h;\n    int64_t var_70h;\n    int64_t var_71h;\n    int64_t var_b0h;\n    rdi = arg1;\n    rsi = arg2;\n    r12 = rdi;\n    rax = imp.__libc_start_main;\n    if (rax != 0) {\n        goto label_54;\n    }\n    goto label_55;\n    do {\n        if (rbp >= rdx) {\n            if (rbp <= *((rax + 8))) {\n                goto label_56;\n            }\n        }\n        rax += 0x10;\nlabel_54:\n        rdx = *(rax);\n    } while (rdx != -1);\n    do {\n        rsi = stdout;\n        rdi = r12;\n        ebx = 1;\n        fputs_unlocked ();\nlabel_0:\n        eax = ebx;\n        return rax;\nlabel_55:\n    } while (rsi != 1);\nlabel_56:\n    r13 = imp.__libc_start_main;\n    if (r13 != 0) {\n        rax = strlen (r12);\n        rbx = rax;\n        rax = strlen (r13);\n        if (rbx <= rax) {\n            goto label_11;\n        }\n        rbx -= rax;\n        rbx += r12;\n        eax = strcmp (r13, rbx);\n        edx = *(0x00610338);\n        if (eax != 0) {\n            goto label_57;\n        }\n        *(rbx) = 0;\n        if (dl != 0) {\n            goto label_58;\n        }\n    }\nlabel_11:\n    ebx = *(r12);\n    if (bl == 0) {\n        goto label_59;\n    }\n    rax = ctype_b_loc ();\n    r13 = r12;\n    rax = *(rax);\n    while ((*((rax + rbx*2)) & 1) != 0) {\n        r13++;\n        ebx = *(r13);\n        if (bl == 0) {\n            goto label_60;\n        }\n    }\nlabel_60:\n    eax = r12d;\n    eax -= r13d;\nlabel_16:\n    edx = imp.__libc_start_main;\n    if (edx == 0) {\n        goto label_61;\n    }\n    if (eax != 0) {\n        goto label_62;\n    }\n    if (rbp > 1) {\n        goto label_62;\n    }\n    *(0x00610380) = 0;\nlabel_4:\n    if (*(0x00610338) != 0) {\n        goto label_63;\n    }\n    eax = imp.__libc_start_main;\n    xmm2 = 0;\n    *(rsp) = xmm2;\n    *(fp_stack--) = *(rsp);\n    *((rsp + 0x10)) = eax;\n    eax -= 3;\n    ebx -= ebx;\n    ? = fp_stack[0];\n    fp_stack--;\n    ebx &= 0x18;\n    ebx += 0x3e8;\nlabel_1:\n    edx = 0;\n    rax = r13;\n    if (*(r13) == 0x2d) {\n        rax = r13 + 1;\n        edx = 1;\n    }\n    *((rsp + 0x5e)) = dl;\n    *((rsp + 0x60)) = rax;\n    eax = fcn_00402af0 (rsp + 0x60, rsp + 0x70, rsp + 0x5e);\n    if (eax > 1) {\n        goto label_64;\n    }\n    r15 = *(0x0061033c);\n    r14 = *((rsp + 0x60));\n    eax = strncmp (r14, *(0x00610340), r15);\n    if (eax == 0) {\n        goto label_65;\n    }\n    r14d = 0;\nlabel_2:\n    if (*(0x00610338) != 0) {\n        goto label_66;\n    }\nlabel_10:\n    r15 = *((rsp + 0x60));\n    edx = *(r15);\n    *((rsp + 0x20)) = dl;\n    if (dl == 0) {\n        goto label_67;\n    }\n    rax = ctype_b_loc ();\n    edx = *((rsp + 0x20));\n    rsi = *(rax);\n    rax = r15;\n    while ((*((rsi + rcx*2)) & 1) != 0) {\n        *((rsp + 0x60)) = rax;\n        edx = *((r15 + 1));\n        ecx = (int32_t) dl;\n        r15 = rax;\n        rax = rax + 1;\n    }\n    esi = (int32_t) dl;\n    *((rsp + 0x20)) = dl;\n    rax = strchr (\"KMGTPEZY\", rsi);\n    if (rax == 0) {\n        goto label_68;\n    }\n    r11d = *((rsp + 0x10));\n    if (r11d == 0) {\n        goto label_69;\n    }\n    edx = *((rsp + 0x20));\n    r8d = 0;\n    edx -= 0x45;\n    if (dl <= 0x15) {\n        edx = (int32_t) dl;\n        r8d = *((rdx*4 + 0x40bd20));\n    }\n    rax = r15 + 1;\n    *((rsp + 0x60)) = rax;\n    if (*((rsp + 0x10)) == 1) {\n        goto label_70;\n    }\n    if (*((rsp + 0x10)) == 4) {\n        goto label_71;\n    }\nlabel_14:\n    *((rsp + 0x10)) = ebx;\n    *(fp_stack--) = *((rsp + 0x10));\n    edx = *(0x00610338);\nlabel_30:\n    if (r8d == 0) {\n        goto label_72;\n    }\n    eax = r8d;\n    *(fp_stack--) = fp_stack[0];\n    eax--;\n    if (eax == 0) {\n        goto label_73;\n    }\n    do {\n        fp_stack[0] *= fp_stack[1];\n        eax--;\n    } while (eax != 0);\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    r14d = 0;\nlabel_9:\n    if (dl != 0) {\n        goto label_74;\n    }\n    *(fp_stack--) = fp_stack[?];\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    ? = fp_stack[0];\n    fp_stack--;\n    goto label_13;\nlabel_12:\n    fp_stack++;\nlabel_13:\n    rsi = *((rsp + 0x60));\n    if (rsi == 0) {\n        goto label_75;\n    }\n    if (*(rsi) == 0) {\n        goto label_75;\n    }\n    if (*(0x006103a8) != 3) {\n        rax = fcn_00407570 (1, rsi);\n        r15 = rax;\n        rax = fcn_00407570 (0, r13);\n        edx = 5;\n        rbx = rax;\n        rax = dcgettext (0, \"invalid suffix in input %s: %s\");\n        r8 = r15;\n        rcx = rbx;\n        eax = 0;\n        error (*(0x0061025c), 0, rax);\n    }\nlabel_5:\n    rax = *(0x00610270);\n    rdx = *(0x00610268);\n    *(fp_stack--) = fp_stack[?];\n    if (rax == 1) {\n        goto label_76;\n    }\nlabel_6:\n    *((rsp + 0x10)) = rax;\n    *(fp_stack--) = *((rsp + 0x10));\n    if (rax < 0) {\n        fp_stack[0] += *(0x0040c138);\n    }\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    *((rsp + 0x10)) = rdx;\n    *(fp_stack--) = *((rsp + 0x10));\n    if (rdx < 0) {\n        goto label_77;\n    }\nlabel_3:\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\nlabel_7:\n    if (ebp <= 1) {\n        goto label_78;\n    }\n    fp_stack++;\n    goto label_8;\nlabel_20:\n    fp_stack++;\nlabel_8:\n    rsi = stdout;\n    rdi = r12;\n    ebx = 0;\n    eax = fputs_unlocked ();\n    goto label_0;\nlabel_63:\n    rcx = imp.__libc_start_main;\n    rdi = stderr;\n    edx = \"setting Auto-Padding to %ld characters\\n\";\n    eax = 0;\n    esi = 1;\n    fprintf_chk ();\nlabel_61:\n    ecx = imp.__libc_start_main;\n    xmm1 = 0;\n    eax = *(0x00610338);\n    *((rsp + 0x60)) = 0;\n    *(rsp) = xmm1;\n    *(fp_stack--) = *(rsp);\n    edx = rcx - 3;\n    *((rsp + 0x10)) = ecx;\n    ebx -= ebx;\n    ? = fp_stack[0];\n    fp_stack--;\n    ebx &= 0x18;\n    ebx += 0x3e8;\n    if (al == 0) {\n        goto label_1;\n    }\n    rax = fcn_00407570 (1, *(0x00610340));\n    r14 = rax;\n    rax = fcn_00407570 (0, r13);\n    rdi = stderr;\n    r9d = 0x12;\n    r8 = r14;\n    rcx = rax;\n    edx = \"simple_strtod_human:\\n  input string: %s\\n  locale decimal-point: %s\\n  MAX_UNSCALED_DIGITS: %d\\n\";\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    goto label_1;\nlabel_65:\n    *(fp_stack--) = *(rsp);\n    r14 += r15;\n    *((rsp + 0x60)) = r14;\n    ? = fp_stack[0];\n    fp_stack--;\n    if (*(r14) == 0x2d) {\n        r14++;\n        eax = 1;\n    }\n    *((rsp + 0x5f)) = al;\n    *((rsp + 0x68)) = r14;\n    eax = fcn_00402af0 (rsp + 0x68, rsp + 0xb0, rsp + 0x5f);\n    if (eax > 1) {\n        goto label_79;\n    }\n    eax = 1;\n    if (eax == 1) {\n    }\n    if (*((rsp + 0x5f)) != 0) {\n        goto label_80;\n    }\n    rdx = *((rsp + 0x68));\n    *(fp_stack--) = fp_stack[?];\n    r14 = rdx;\n    r14 -= *((rsp + 0x60));\n    if (r14d == 0) {\n        goto label_47;\n    }\n    eax = r14d;\n    eax--;\n    if (eax == 0) {\n        goto label_81;\n    }\n    *(fp_stack--) = *(0x0040c130);\n    *(fp_stack--) = fp_stack[0];\n    do {\n        fp_stack[0] *= fp_stack[1];\n        eax--;\n    } while (eax != 0);\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\nlabel_47:\n    *(fp_stack--) = fp_stack[?];\n    if (*((rsp + 0x5e)) != 0) {\n        goto label_82;\n    }\n    fp_stack[0] += fp_stack[1];\n    fp_stack++;\nlabel_17:\n    ? = fp_stack[0];\n    fp_stack--;\n    *((rsp + 0x60)) = rdx;\n    goto label_2;\nlabel_77:\n    fp_stack[0] += *(0x0040c138);\n    goto label_3;\nlabel_62:\n    rax = strlen (r12);\n    *(0x00610380) = rax;\n    if (rax < *(0x00610388)) {\n        goto label_4;\n    }\n    fcn_00402bd0 (rax);\n    goto label_4;\nlabel_75:\n    if (ebp != 1) {\n        goto label_5;\n    }\n    if (*(0x00610348) == 0) {\n        goto label_5;\n    }\n    rax = fcn_00407590 (r13);\n    edx = 5;\n    rbx = rax;\n    rax = dcgettext (0, \"large input value %s: possible precision loss\");\n    rcx = rbx;\n    eax = 0;\n    eax = error (0, 0, rax);\n    goto label_5;\nlabel_79:\nlabel_64:\n    if (ebp > 6) {\n        goto label_83;\n    }\n    eax = ebp;\n    /* switch table (7 cases) at 0x40bbe0 */\nlabel_76:\n    if (rdx != 1) {\n        goto label_6;\n    }\n    goto label_7;\nlabel_78:\n    rax = *(0x00610260);\n    *(fp_stack--) = fp_stack[?];\n    fp_tmp_0 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_0;\n    if (rax != -1) {\n        r14 = rax;\n    }\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    if (fp_stack[0] < fp_stack[1]) {\n        goto label_84;\n    }\n    *(fp_stack--) = fp_stack[?];\n    __asm (\"fcompi st(1)\");\n    if (fp_stack[0] < fp_stack[1]) {\n        goto label_84;\n    }\n    *(fp_stack--) = fp_stack[0];\n    eax = 0;\n    *(fp_stack--) = *(0x0040c130);\n    while (eax >= 0) {\n        fp_stack[0] /= fp_stack[2];\n        fp_stack++;\n        eax++;\n        *(fp_stack--) = 0.0;\n        *(fp_stack--) = fp_stack[2];\n        fp_stack[0] = -fp_stack[0];\n        fp_tmp_1 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_1;\n        __asm (\"fcompi st(3)\");\n        __asm (\"fcmovbe st(0), st(2)\");\n        *(fp_stack--) = fp_stack[1];\n        fp_tmp_2 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_2;\n        __asm (\"fcompi st(1)\");\n    }\n    fp_stack++;\n    fp_stack++;\n    fp_stack++;\n    ebx = imp.__libc_start_main;\n    if (ebx == 0) {\n        edx = eax;\n        rdx += r14;\n        if (rdx > 0x12) {\n            goto label_85;\n        }\n    }\n    if (eax <= 0x1a) {\n        goto label_86;\n    }\n    ? = fp_stack[0];\n    fp_stack--;\n    if (*(0x006103a8) == 3) {\n        goto label_8;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"value too large to be printed: '%Lg' (cannot handle values > 999Y)\");\n    *(fp_stack--) = fp_stack[?];\n    eax = 0;\n    ? = fp_stack[0];\n    fp_stack--;\n    error (*(0x0061025c), 0, rax);\n    goto label_8;\nlabel_84:\n    ebx = imp.__libc_start_main;\n    if (ebx == 0) {\n        if (r14 > 0x12) {\n            goto label_85;\n        }\n    }\nlabel_86:\n    ebp = *(0x00610278);\n    *((rsp + 0x70)) = 0x25;\n    rax = rsp + 0x70;\n    r12 = rsp + 0x71;\n    r13d = imp.__libc_start_main;\n    if (r13d != 0) {\n        *((rsp + 0x71)) = 0x27;\n        r12 = rax + 2;\n    }\n    r9 = imp.__libc_start_main;\n    if (r9 != 0) {\n        goto label_87;\n    }\nlabel_19:\n    ecx = *(0x00610338);\n    if (cl != 0) {\n        goto label_88;\n    }\nlabel_18:\n    if (ebx == 0) {\n        goto label_89;\n    }\n    eax = rbx - 3;\n    if (eax <= 1) {\n        goto label_90;\n    }\n    xmm3 = *(0x0040c148);\n    *((rsp + 0x20)) = 0x3e8;\n    *((rsp + 0x10)) = xmm3;\nlabel_32:\n    *(fp_stack--) = fp_stack[?];\n    fp_tmp_3 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_3;\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    if (fp_stack[0] < fp_stack[1]) {\n        goto label_91;\n    }\n    *(fp_stack--) = fp_stack[?];\n    __asm (\"fcompi st(1)\");\n    if (fp_stack[0] < fp_stack[1]) {\n        goto label_91;\n    }\n    *(fp_stack--) = *((rsp + 0x20));\n    r13d = 0;\n    *(fp_stack--) = fp_stack[1];\n    while (r13d >= 0) {\n        fp_stack[0] /= fp_stack[1];\n        r13d++;\n        *(fp_stack--) = 0.0;\n        *(fp_stack--) = fp_stack[1];\n        fp_stack[0] = -fp_stack[0];\n        fp_tmp_4 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_4;\n        __asm (\"fcompi st(2)\");\n        __asm (\"fcmovbe st(0), st(1)\");\n        __asm (\"fcompi st(2)\");\n    }\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\nlabel_31:\n    if (cl != 0) {\n        goto label_92;\n    }\nlabel_42:\n    rsi = *(0x00610260);\n    if (rsi == -1) {\n        goto label_93;\n    }\n    eax = r13 * 3;\n    if (rax > rsi) {\n        rax = rsi;\n    }\n    edi = eax;\n    if (eax == 0) {\n        goto label_94;\n    }\n    eax--;\n    if (eax == 0) {\n        goto label_95;\n    }\n    *(fp_stack--) = *(0x0040c130);\n    edx = eax;\n    *(fp_stack--) = fp_stack[0];\n    do {\n        fp_stack[0] *= fp_stack[1];\n        edx--;\n    } while (edx != 0);\n    fp_stack[0] *= fp_stack[2];\n    fp_stack++;\n    *(fp_stack--) = fp_stack[?];\n    edx = *((rsp + 0x4e));\n    *(fp_stack--) = fp_stack[2];\n    dh |= 0xc;\n    *((rsp + 0x4c)) = dx;\n    fp_stack[0] /= fp_stack[1];\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    fp_stack[2] -= fp_stack[0];\n    *(fp_stack--) = *((rsp + 0x10));\n    if (ebp > 4) {\n        goto label_96;\n    }\n    /* switch table (5 cases) at 0x40bc18 */\nlabel_67:\n    if (*((rsp + 0x10)) == 4) {\n        goto label_97;\n    }\n    edx = *(0x00610338);\n    r8d = 0;\n    *(fp_stack--) = 1.0;\n    goto label_9;\nlabel_66:\n    rdi = stderr;\n    ecx = r14d;\n    eax = 0;\n    edx = \"  parsed numeric value: %Lf\\n  input precision = %d\\n\";\n    esi = 1;\n    fprintf_chk ();\n    goto label_10;\nlabel_57:\n    if (dl == 0) {\n        goto label_11;\n    }\n    eax = fwrite (\"no valid suffix found\\n\", 1, 0x16, *(obj.stderr));\n    goto label_11;\nlabel_74:\n    rdi = stderr;\n    eax = 0;\n    ecx = ebx;\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    edx = \"  suffix power=%d^%d = %Lf\\n\";\n    esi = 1;\n    ? = fp_stack[0];\n    fp_stack--;\n    eax = fprintf_chk ();\n    *(fp_stack--) = fp_stack[?];\n    *(fp_stack--) = fp_stack[?];\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    if (*(0x00610338) == 0) {\n        goto label_12;\n    }\n    edx = \"  returning value: %Lf (%LG)\\n\";\n    esi = 1;\n    eax = 0;\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    rdi = stderr;\n    ? = fp_stack[0];\n    fp_stack--;\n    fprintf_chk ();\n    goto label_13;\nlabel_97:\n    ebx = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\nlabel_15:\n    if (*(0x006103a8) == 3) {\n        goto label_5;\n    }\n    rax = fcn_00407590 (r13);\n    edx = 5;\n    r13 = rax;\n    rax = dcgettext (0, rbx);\n    rcx = r13;\n    eax = 0;\n    error (*(0x0061025c), 0, rax);\n    goto label_5;\nlabel_71:\n    if (*((r15 + 1)) != 0x69) {\n        goto label_98;\n    }\n    r15 += 2;\n    *((rsp + 0x60)) = r15;\n    goto label_14;\n    r14d = 0;\n    ebx = \"value too large to be converted: %s\";\n    goto label_15;\n    r14d = 0;\n    ebx = \"invalid suffix in input: %s\";\n    goto label_15;\nlabel_89:\n    esi = r14d;\n    if (r14d == 0) {\n        goto label_99;\n    }\n    eax = r14d;\n    eax--;\n    if (eax == 0) {\n        goto label_100;\n    }\n    *(fp_stack--) = *(0x0040c130);\n    edx = eax;\n    *(fp_stack--) = fp_stack[0];\n    do {\n        fp_stack[0] *= fp_stack[1];\n        edx--;\n    } while (edx != 0);\n    fp_stack[0] *= fp_stack[2];\n    *(fp_stack--) = fp_stack[?];\n    edx = *((rsp + 0x4e));\n    *(fp_stack--) = fp_stack[1];\n    dh |= 0xc;\n    fp_stack[0] /= fp_stack[1];\n    *((rsp + 0x4c)) = dx;\n    *((rsp + 0x10)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x10));\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    fp_stack[1] -= fp_stack[0];\n    if (ebp > 4) {\n        goto label_101;\n    }\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_tmp_5 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_5;\n    goto label_102;\nlabel_44:\n    fp_tmp_6 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_6;\n    goto label_102;\nlabel_49:\n    fp_tmp_7 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_7;\n    /* switch table (5 cases) at 0x40bc40 */\nlabel_102:\nlabel_58:\n    rax = fcn_00407590 (r13);\n    edx = \"trimming suffix %s\\n\";\n    esi = 1;\n    rdi = stderr;\n    rcx = rax;\n    eax = 0;\n    eax = fprintf_chk ();\n    goto label_11;\n    r14d = 0;\n    ebx = \"rejecting suffix in input: %s (consider using --from)\";\n    goto label_15;\nlabel_59:\n    r13 = r12;\n    eax = 0;\n    goto label_16;\nlabel_82:\n    fp_stack[1] -= fp_stack[0];\n    fp_stack++;\n    goto label_17;\n    r14d = 0;\n    ebx = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n    goto label_15;\nlabel_88:\n    ? = fp_stack[0];\n    fp_stack--;\n    eax = fwrite (\"double_to_human:\\n\", 1, 0x11, *(obj.stderr));\n    ecx = *(0x00610338);\n    *(fp_stack--) = fp_stack[?];\n    goto label_18;\nlabel_87:\n    rdi = r12;\n    r8d = \"0%ld\";\n    ecx = 0x3f;\n    eax = 0;\n    edx = 1;\n    esi = 0x3e;\n    ? = fp_stack[0];\n    fp_stack--;\n    rax = snprintf_chk ();\n    *(fp_stack--) = fp_stack[?];\n    rax = (int64_t) eax;\n    r12 += rax;\n    goto label_19;\nlabel_83:\n    r14d = 0;\n    ebx = 0;\n    goto label_15;\nlabel_85:\n    if (*(0x006103a8) == 3) {\n        goto label_20;\n    }\n    ebx = *(0x0061025c);\n    ? = fp_stack[0];\n    fp_stack--;\n    edx = 5;\n    if (r14 == 0) {\n        goto label_103;\n    }\n    rax = dcgettext (0, \"value/precision too large to be printed: '%Lg/%lu' (consider using --to)\");\n    *(fp_stack--) = fp_stack[?];\n    rcx = r14;\n    eax = 0;\n    ? = fp_stack[0];\n    fp_stack--;\n    error (ebx, 0, rax);\n    goto label_8;\nlabel_80:\n    r14d = 0;\n    ebx = \"invalid number: %s\";\n    goto label_15;\n    fp_tmp_8 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_8;\n    *(rsp) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *(rsp);\nlabel_21:\n    fp_stack[0] += fp_stack[1];\n    fp_stack++;\n    if (esi == 0) {\n        goto label_28;\n    }\n    eax = esi;\n    *(fp_stack--) = *(0x0040c130);\n    eax--;\n    if (eax == 0) {\n        goto label_104;\n    }\nlabel_53:\n    *(fp_stack--) = fp_stack[0];\n    do {\n        fp_stack[0] *= fp_stack[1];\n        eax--;\n    } while (eax != 0);\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\nlabel_28:\n    r9d = r14d;\n    if (cl != 0) {\n        fp_tmp_9 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_9;\n        ? = fp_stack[0];\n        fp_stack--;\n        eax = \"  no scaling, returning value: %.*Lf\\n\";\n        ecx = r14d;\n        edx = \"  no scaling, returning (grouped) value: %'.*Lf\\n\";\n        rdi = stderr;\n        esi = 1;\n        *((rsp + 0x20)) = r14d;\n        if (r13d == 0) {\n            rdx = rax;\n        }\n        eax = 0;\n        *(fp_stack--) = fp_stack[0];\n        ? = fp_stack[0];\n        fp_stack--;\n        ? = fp_stack[0];\n        fp_stack--;\n        eax = fprintf_chk ();\n        *(fp_stack--) = fp_stack[?];\n        *(fp_stack--) = fp_stack[?];\n        r9d = *((rsp + 0x20));\n    } else {\n        fp_tmp_10 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_10;\n    }\n    ? = fp_stack[0];\n    fp_stack--;\n    eax = 0;\n    ecx = 0x80;\n    edx = 1;\n    rbp = rsp + 0xb0;\n    esi = 0x80;\n    *(r12) = 0x664c2a2e;\n    r8 = rsp + 0x80;\n    rdi = rbp;\n    *((r12 + 4)) = 0;\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    ? = fp_stack[0];\n    fp_stack--;\n    eax = snprintf_chk ();\n    *(fp_stack--) = fp_stack[?];\n    if (eax > 0x7f) {\n        goto label_105;\n    }\n    fp_stack++;\n    *(fp_stack--) = fp_stack[?];\n    ebx = *(0x00610338);\nlabel_43:\n    rsi = imp.__libc_start_main;\n    if (rsi == 0) {\n        goto label_106;\n    }\nlabel_23:\n    rdx = rbp;\n    do {\n        ecx = *(rdx);\n        rdx += 4;\n        eax = rcx - 0x1010101;\n        ecx = ~ecx;\n        eax &= ecx;\n        eax &= 0x80808080;\n    } while (eax == 0);\n    ecx = eax;\n    rdi = rbp;\n    ? = fp_stack[0];\n    fp_stack--;\n    ecx >>= 0x10;\n    if ((eax & 0x8080) == 0) {\n        eax = ecx;\n    }\n    rcx = rdx + 2;\n    if ((eax & 0x8080) == 0) {\n        rdx = rcx;\n    }\n    ecx = eax;\n    cl += al;\n    rax = rbp;\n    ecx = 0x80;\n    rdx -= 3;\n    rax -= rdx;\n    rdx = rax + 0x7f;\n    strncat_chk ();\n    *(fp_stack--) = fp_stack[?];\nlabel_106:\n    if (bl != 0) {\n        ? = fp_stack[0];\n        fp_stack--;\n        rax = fcn_00407590 (rbp);\n        *(fp_stack--) = fp_stack[?];\n        edx = \"formatting output:\\n  value: %Lf\\n  humanized: %s\\n\";\n        rdi = stderr;\n        rcx = rax;\n        esi = 1;\n        eax = 0;\n        ? = fp_stack[0];\n        fp_stack--;\n        fprintf_chk ();\n    } else {\n        fp_stack++;\n    }\nlabel_24:\n    rsi = imp.__libc_start_main;\n    rcx = rbp;\n    do {\n        edx = *(rcx);\n        rcx += 4;\n        eax = rdx - 0x1010101;\n        edx = ~edx;\n        eax &= edx;\n        eax &= 0x80808080;\n    } while (eax == 0);\n    edx = eax;\n    edx >>= 0x10;\n    if ((eax & 0x8080) == 0) {\n        eax = edx;\n    }\n    rdx = rcx + 2;\n    if ((eax & 0x8080) == 0) {\n        rcx = rdx;\n    }\n    rdx = imp.__libc_start_main;\n    edi = eax;\n    dil += al;\n    rcx -= 3;\n    rcx -= rbp;\n    if (rsi != 0) {\n        if (rsi > rcx) {\n            goto label_107;\n        }\n    }\n    rdi = rcx + 1;\n    if (rdi >= rdx) {\n        fcn_00402bd0 (rdi);\n    }\n    strcpy (*(0x00610390), rbp);\nlabel_40:\n    rdi = imp.__libc_start_main;\n    rsi = stdout;\n    if (rdi != 0) {\n        fputs_unlocked ();\n        rsi = stdout;\n    }\n    rdi = imp.__libc_start_main;\n    ebx = 1;\n    fputs_unlocked ();\n    rdi = imp.__libc_start_main;\n    if (rdi == 0) {\n        goto label_0;\n    }\n    rsi = stdout;\n    fputs_unlocked ();\n    goto label_0;\n    *(fp_stack--) = 0.0;\n    __asm (\"fcompi st(2)\");\n    if (rdi > 0) {\n        goto label_108;\n    }\n    fp_tmp_11 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_11;\n    *(fp_stack--) = fp_stack[0];\n    *(rsp) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *(rsp);\n    fp_tmp_12 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_12;\n    __asm (\"fcompi st(1)\");\n    if (rdi <= 0) {\n        goto label_21;\n    }\n    fp_stack++;\nlabel_22:\n    rax = *(rsp);\n    rax++;\n    *(rsp) = rax;\n    *(fp_stack--) = *(rsp);\n    goto label_21;\n    fp_tmp_13 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_13;\n    fp_stack[0] = -fp_stack[0];\n    *(fp_stack--) = fp_stack[0];\n    *((rsp + 0x40)) = fp_stack[0];\n    fp_stack--;\nlabel_48:\n    rax = *((rsp + 0x40));\n    edx = 0;\n    *(rsp) = rax;\n    *(fp_stack--) = *(rsp);\n    fp_tmp_14 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_14;\n    __asm (\"fcompi st(1)\");\n    fp_stack++;\n    dl = (rax > 0) ? 1 : 0;\n    rax += rdx;\n    rax = -rax;\n    *(rsp) = rax;\n    *(fp_stack--) = *(rsp);\n    goto label_21;\n    *(fp_stack--) = 0.0;\n    __asm (\"fcompi st(2)\");\n    if (rax > 0) {\n        goto label_109;\n    }\n    fp_tmp_15 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_15;\n    fp_stack[0] += *(0x0040c13c);\n    *(rsp) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *(rsp);\n    goto label_21;\n    fp_tmp_16 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_16;\n    *(fp_stack--) = fp_stack[0];\n    *(rsp) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *(rsp);\n    fp_tmp_17 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_17;\n    __asm (\"fcompi st(1)\");\n    if (rax <= 0) {\n        goto label_21;\n    }\n    fp_stack++;\n    goto label_22;\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_tmp_18 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_18;\n    fp_tmp_19 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_19;\n    edi = 1;\n    goto label_37;\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_tmp_20 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_20;\n    fp_tmp_21 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_21;\n    goto label_37;\nlabel_25:\n    fp_tmp_22 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_22;\nlabel_37:\n    *(fp_stack--) = fp_stack[0];\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_tmp_23 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_23;\n    __asm (\"fcompi st(1)\");\n    if (rax > 0) {\n        fp_stack++;\n        rax = *((rsp + 0x20));\n        rax++;\n        *((rsp + 0x20)) = rax;\n        *(fp_stack--) = *((rsp + 0x20));\n    }\nlabel_26:\n    fp_stack[0] += fp_stack[1];\n    fp_stack++;\n    if (edi == 0) {\n        goto label_29;\n    }\n    eax = edi;\n    *(fp_stack--) = *(0x0040c130);\n    eax--;\n    if (eax == 0) {\n        goto label_110;\n    }\nlabel_27:\n    *(fp_stack--) = fp_stack[0];\n    do {\n        fp_stack[0] *= fp_stack[1];\n        eax--;\n    } while (eax != 0);\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\nlabel_29:\n    *(fp_stack--) = 0.0;\n    __asm (\"fcompi st(1)\");\n    if (eax > 0) {\n        goto label_111;\n    }\nlabel_52:\n    if (fp_stack[0] >= fp_stack[1]) {\n        goto label_112;\nlabel_33:\n        fp_stack++;\nlabel_112:\n        r13d++;\n        fp_stack[1] /= fp_stack[0];\n        fp_stack++;\n    } else {\n        fp_stack[1] = fp_stack[0];\n        fp_stack--;\n    }\n    *(fp_stack--) = 0.0;\n    fp_tmp_24 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_24;\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    if (fp_stack[0] == fp_stack[1]) {\n        goto label_113;\n    }\n    if (fp_stack[0] != fp_stack[1]) {\n        goto label_113;\n    }\n    r9d = 0;\nlabel_34:\n    if (cl != 0) {\n        goto label_114;\n    }\nlabel_39:\n    edi = 0x7325;\n    eax = \"(error)\";\n    *(r12) = 0x664c2a2e;\n    *((r12 + 4)) = di;\n    if (rsi != -1) {\n        r9d = esi;\n    }\n    *((r12 + 6)) = 0;\n    if (r13d <= 8) {\n        fp_tmp_25 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_25;\n        eax = r13d;\n        rax = *((rax*8 + 0x40bcc0));\n    } else {\n        fp_tmp_26 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_26;\n    }\n    ? = fp_stack[0];\n    fp_stack--;\n    ecx = 0x80;\n    edx = 1;\n    rbp = rsp + 0xb0;\n    esi = 0x7f;\n    rdi = rbp;\n    eax = 0;\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    r8 = rsp + 0x90;\n    ? = fp_stack[0];\n    fp_stack--;\n    eax = snprintf_chk ();\n    *(fp_stack--) = fp_stack[?];\n    if (eax > 0x7e) {\n        goto label_115;\n    }\n    if (r13d != 0) {\n        if (ebx == 4) {\n            goto label_116;\n        }\n    }\nlabel_46:\n    ebx = *(0x00610338);\n    if (bl != 0) {\n        goto label_117;\n    }\n    rsi = imp.__libc_start_main;\n    if (rsi != 0) {\n        goto label_23;\n    }\n    fp_stack++;\n    goto label_24;\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_tmp_27 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_27;\n    edi = 1;\n    goto label_35;\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_tmp_28 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_28;\nlabel_35:\n    *(fp_stack--) = 0.0;\n    __asm (\"fcompi st(3)\");\n    if (rsi <= 0) {\n        goto label_25;\n    }\n    fp_tmp_29 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_29;\n    fp_stack[0] = -fp_stack[0];\n    *(fp_stack--) = fp_stack[0];\n    *((rsp + 0x40)) = fp_stack[0];\n    fp_stack--;\n    do {\n        rax = *((rsp + 0x40));\n        edx = 0;\n        *((rsp + 0x20)) = rax;\n        *(fp_stack--) = *((rsp + 0x20));\n        fp_tmp_30 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_30;\n        __asm (\"fcompi st(1)\");\n        fp_stack++;\n        dl = (rsi > 0) ? 1 : 0;\n        rax += rdx;\n        rax = -rax;\n        *((rsp + 0x20)) = rax;\n        *(fp_stack--) = *((rsp + 0x20));\n        goto label_26;\n        fp_stack[2] = fp_stack[0];\n        fp_stack--;\n        fp_tmp_31 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_31;\n        edi = 1;\n        goto label_38;\n        fp_stack[2] = fp_stack[0];\n        fp_stack--;\n        fp_tmp_32 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_32;\nlabel_38:\n        *(fp_stack--) = 0.0;\n        __asm (\"fcompi st(3)\");\n        if (rax > 0) {\n            goto label_118;\n        }\n        fp_tmp_33 = fp_stack[2];\n        fp_stack[2] = fp_stack[0];\n        fp_stack[0] = fp_tmp_33;\n        fp_stack[0] += *(0x0040c13c);\n        *((rsp + 0x20)) = fp_stack[0];\n        fp_stack--;\n        *(fp_stack--) = *((rsp + 0x20));\n        goto label_26;\n        fp_stack[2] = fp_stack[0];\n        fp_stack--;\n        fp_tmp_34 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_34;\n        fp_tmp_35 = fp_stack[2];\n        fp_stack[2] = fp_stack[0];\n        fp_stack[0] = fp_tmp_35;\n        edi = 1;\n        goto label_36;\n        fp_stack[2] = fp_stack[0];\n        fp_stack--;\n        fp_tmp_36 = fp_stack[1];\n        fp_stack[1] = fp_stack[0];\n        fp_stack[0] = fp_tmp_36;\n        fp_tmp_37 = fp_stack[2];\n        fp_stack[2] = fp_stack[0];\n        fp_stack[0] = fp_tmp_37;\nlabel_36:\n        fp_stack[0] = -fp_stack[0];\n        *(fp_stack--) = fp_stack[0];\n        *((rsp + 0x40)) = fp_stack[0];\n        fp_stack--;\n    } while (1);\n    fp_tmp_38 = fp_stack[3];\n    fp_stack[3] = fp_stack[0];\n    fp_stack[0] = fp_tmp_38;\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_stack[0] += fp_stack[1];\n    fp_stack++;\n    fp_tmp_39 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_39;\n    goto label_27;\nlabel_104:\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\n    goto label_28;\n    fp_tmp_40 = fp_stack[3];\n    fp_stack[3] = fp_stack[0];\n    fp_stack[0] = fp_tmp_40;\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_stack[0] += fp_stack[1];\n    fp_stack++;\n    fp_tmp_41 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_41;\nlabel_110:\n    fp_stack[0] /= fp_stack[1];\n    fp_stack++;\n    goto label_29;\nlabel_70:\n    edx = *(0x00610338);\n    if (*((r15 + 1)) == 0x69) {\n        goto label_119;\n    }\n    *((rsp + 0x10)) = ebx;\n    *(fp_stack--) = *((rsp + 0x10));\n    goto label_30;\nlabel_69:\n    ebx = \"rejecting suffix in input: %s (consider using --from)\";\n    goto label_15;\nlabel_91:\n    *(fp_stack--) = fp_stack[0];\n    r13d = 0;\n    goto label_31;\nlabel_68:\n    ebx = \"invalid suffix in input: %s\";\n    goto label_15;\nlabel_73:\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    r14d = 0;\n    r8d = 1;\n    goto label_9;\nlabel_90:\n    xmm4 = *(0x0040c140);\n    *((rsp + 0x20)) = 0x400;\n    *((rsp + 0x10)) = xmm4;\n    goto label_32;\nlabel_111:\n    *(fp_stack--) = fp_stack[0];\n    fp_stack[0] = -fp_stack[0];\n    if (fp_stack[0] >= fp_stack[2]) {\n        goto label_33;\n    }\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_tmp_42 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_42;\nlabel_50:\n    fp_tmp_43 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_43;\nlabel_45:\n    *(fp_stack--) = *(0x0040c130);\n    al = (r13d != 0) ? 1 : 0;\n    r9d = 0;\n    __asm (\"fcompi st(2)\");\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    r9b = (r13d > 0) ? 1 : 0;\n    r9d &= eax;\n    goto label_34;\nlabel_41:\n    fp_stack++;\nlabel_94:\n    *(fp_stack--) = fp_stack[?];\n    eax = *((rsp + 0x4e));\n    *(fp_stack--) = fp_stack[1];\n    fp_stack[0] /= fp_stack[1];\n    ah |= 0xc;\n    *((rsp + 0x4c)) = ax;\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    fp_stack[1] -= fp_stack[0];\n    *(fp_stack--) = *((rsp + 0x10));\n    if (ebp > 4) {\n        goto label_120;\n    }\n    /* switch table (5 cases) at 0x40bc68 */\n    edi = 0;\n    goto label_35;\n    fp_tmp_44 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_44;\n    edi = 0;\n    goto label_36;\n    fp_tmp_45 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_45;\n    edi = 0;\n    goto label_37;\n    edi = 0;\n    goto label_38;\n    fp_tmp_46 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_46;\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_stack[0] += fp_stack[1];\n    fp_stack++;\n    goto label_29;\nlabel_114:\n    fp_tmp_47 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_47;\n    ? = fp_stack[0];\n    fp_stack--;\n    esi = 1;\n    ecx = r13d;\n    rdi = stderr;\n    edx = \"  after rounding, value=%Lf * %0.f ^ %u\\n\";\n    eax = 1;\n    *((rsp + 0x40)) = r9d;\n    xmm0 = *((rsp + 0x20));\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    ? = fp_stack[0];\n    fp_stack--;\n    fprintf_chk ();\n    rsi = *(0x00610260);\n    r9d = *((rsp + 0x30));\n    *(fp_stack--) = fp_stack[?];\n    *(fp_stack--) = fp_stack[?];\n    goto label_39;\nlabel_119:\n    r15 += 2;\n    *((rsp + 0x60)) = r15;\n    if (dl != 0) {\n        goto label_121;\n    }\n    *(fp_stack--) = *(0x0040c134);\n    ebx = 0x400;\n    goto label_30;\nlabel_107:\n    *((rsp + 0x70)) = rsi;\n    fcn_00405530 (rbp, *(0x00610390), rdx, rsp + 0x70, *(0x00610258), 2);\n    if (*(0x00610338) == 0) {\n        goto label_40;\n    }\n    rax = fcn_00407590 (*(0x00610390));\n    edx = \"  After padding: %s\\n\";\n    esi = 1;\n    rdi = stderr;\n    rcx = rax;\n    eax = 0;\n    fprintf_chk ();\n    goto label_40;\nlabel_93:\n    *(fp_stack--) = 0.0;\n    *(fp_stack--) = fp_stack[1];\n    fp_stack[0] = -fp_stack[0];\n    fp_tmp_48 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_48;\n    __asm (\"fcompi st(2)\");\n    __asm (\"fcmovbe st(0), st(1)\");\n    *(fp_stack--) = *(0x0040c130);\n    *(fp_stack--) = fp_stack[0];\n    __asm (\"fcompi st(2)\");\n    fp_stack[1] = fp_stack[0];\n    fp_stack--;\n    if (*(0x00610338) <= 0) {\n        goto label_41;\n    }\nlabel_51:\n    fp_stack[1] *= fp_stack[0];\n    *(fp_stack--) = fp_stack[?];\n    eax = *((rsp + 0x4e));\n    *(fp_stack--) = fp_stack[2];\n    ah |= 0xc;\n    fp_stack[0] /= fp_stack[1];\n    *((rsp + 0x4c)) = ax;\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    fp_stack[2] -= fp_stack[0];\n    *(fp_stack--) = *((rsp + 0x10));\n    if (ebp > 4) {\n        goto label_122;\n    }\n    /* switch table (5 cases) at 0x40bc90 */\nlabel_92:\n    fp_tmp_49 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_49;\n    ? = fp_stack[0];\n    fp_stack--;\n    ecx = r13d;\n    edx = \"  scaled value to %Lf * %0.f ^ %u\\n\";\n    xmm0 = *((rsp + 0x20));\n    esi = 1;\n    eax = 1;\n    rdi = stderr;\n    *(fp_stack--) = fp_stack[0];\n    ? = fp_stack[0];\n    fp_stack--;\n    ? = fp_stack[0];\n    fp_stack--;\n    fprintf_chk ();\n    ecx = *(0x00610338);\n    *(fp_stack--) = fp_stack[?];\n    *(fp_stack--) = fp_stack[?];\n    goto label_42;\nlabel_117:\n    ? = fp_stack[0];\n    fp_stack--;\n    rax = fcn_00407590 (rbp);\n    edx = \"  returning value: %s\\n\";\n    esi = 1;\n    rdi = stderr;\n    rcx = rax;\n    eax = 0;\n    fprintf_chk ();\n    ebx = *(0x00610338);\n    *(fp_stack--) = fp_stack[?];\n    goto label_43;\nlabel_99:\n    *(fp_stack--) = fp_stack[?];\n    eax = *((rsp + 0x4e));\n    *(fp_stack--) = fp_stack[1];\n    fp_stack[0] /= fp_stack[1];\n    ah |= 0xc;\n    *((rsp + 0x4c)) = ax;\n    *((rsp + 0x10)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x10));\n    fp_stack[0] *= fp_stack[1];\n    fp_stack++;\n    *(fp_stack--) = fp_stack[1];\n    fp_stack[0] -= fp_stack[1];\n    if (ebp <= 4) {\n        goto label_44;\n    }\n    fp_stack++;\n    fp_stack++;\n    *(fp_stack--) = 0.0;\n    goto label_28;\nlabel_113:\n    *(fp_stack--) = 0.0;\n    __asm (\"fcompi st(1)\");\n    if (ebp > 4) {\n        goto label_123;\n    }\n    *(fp_stack--) = fp_stack[0];\n    goto label_45;\nlabel_103:\n    rax = dcgettext (0, \"value too large to be printed: '%Lg' (consider using --to)\");\n    *(fp_stack--) = fp_stack[?];\n    eax = 0;\n    ? = fp_stack[0];\n    fp_stack--;\n    rax = error (ebx, 0, rax);\n    goto label_8;\nlabel_116:\n    rax = (int64_t) eax;\n    edx = 0x7f;\n    ecx = 0x80;\n    rdi = rbp;\n    rdx -= rax;\n    esi = 0x40a35f;\n    ? = fp_stack[0];\n    fp_stack--;\n    eax = strncat_chk ();\n    *(fp_stack--) = fp_stack[?];\n    goto label_46;\nlabel_81:\n    fp_stack[0] /= *(0x0040c130);\n    goto label_47;\nlabel_121:\n    rdi = stderr;\n    edx = \"  Auto-scaling, found 'i', switching to base %d\\n\";\n    ecx = 0x400;\n    eax = 0;\n    esi = 1;\n    *((rsp + 0x10)) = r8d;\n    ebx = 0x400;\n    fprintf_chk ();\n    r8d = *((rsp + 0x10));\n    edx = *(0x00610338);\n    *(fp_stack--) = *(0x0040c134);\n    goto label_30;\nlabel_108:\n    fp_tmp_50 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_50;\n    fp_stack[0] = -fp_stack[0];\n    *(fp_stack--) = fp_stack[0];\n    *((rsp + 0x40)) = fp_stack[0];\n    fp_stack--;\n    goto label_48;\nlabel_109:\n    fp_tmp_51 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_51;\n    fp_stack[0] -= *(0x0040c13c);\n    *(rsp) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *(rsp);\n    goto label_21;\nlabel_100:\n    *(fp_stack--) = fp_stack[?];\n    eax = *((rsp + 0x4e));\n    *(fp_stack--) = fp_stack[1];\n    fp_stack[0] *= *(0x0040c130);\n    ah |= 0xc;\n    *((rsp + 0x4c)) = ax;\n    *(fp_stack--) = fp_stack[0];\n    fp_stack[0] /= fp_stack[2];\n    *((rsp + 0x10)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x10));\n    fp_stack[0] *= fp_stack[2];\n    fp_stack++;\n    fp_stack[0] -= fp_stack[1];\n    if (ebp <= 4) {\n        goto label_49;\n    }\n    fp_stack++;\n    fp_stack++;\n    *(fp_stack--) = 0.0;\n    goto label_28;\nlabel_118:\n    fp_tmp_52 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_52;\n    fp_stack[0] -= *(0x0040c13c);\n    *((rsp + 0x20)) = fp_stack[0];\n    fp_stack--;\n    *(fp_stack--) = *((rsp + 0x20));\n    goto label_26;\nlabel_98:\n    r14d = 0;\n    ebx = \"missing 'i' suffix in input: %s (e.g Ki/Mi/Gi)\";\n    goto label_15;\nlabel_105:\n    edx = 5;\n    ? = fp_stack[0];\n    fp_stack--;\n    rax = dcgettext (0, \"failed to prepare value '%Lf' for printing\");\n    *(fp_stack--) = fp_stack[?];\n    eax = 0;\n    ? = fp_stack[0];\n    fp_stack--;\n    error (1, 0, rax);\nlabel_72:\n    fp_stack++;\n    r14d = 0;\n    *(fp_stack--) = 1.0;\n    goto label_9;\nlabel_123:\n    *(fp_stack--) = fp_stack[0];\n    fp_stack[0] = -fp_stack[0];\n    goto label_50;\nlabel_95:\n    *(fp_stack--) = *(0x0040c130);\n    goto label_51;\nlabel_115:\n    fp_stack++;\n    edx = 5;\n    rax = dcgettext (0, \"failed to prepare value '%Lf' for printing\");\n    *(fp_stack--) = fp_stack[?];\n    eax = 0;\n    ? = fp_stack[0];\n    fp_stack--;\n    error (1, 0, rax);\nlabel_96:\n    fp_stack[3] = fp_stack[0];\n    fp_stack--;\n    fp_stack++;\n    fp_tmp_53 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_53;\n    *(fp_stack--) = 0.0;\n    fp_tmp_54 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_54;\n    fp_tmp_55 = fp_stack[2];\n    fp_stack[2] = fp_stack[0];\n    fp_stack[0] = fp_tmp_55;\n    goto label_27;\nlabel_120:\n    fp_stack[2] = fp_stack[0];\n    fp_stack--;\n    fp_stack++;\n    goto label_124;\nlabel_122:\n    fp_stack[3] = fp_stack[0];\n    fp_stack--;\n    fp_stack++;\n    fp_stack++;\nlabel_124:\n    *(fp_stack--) = 0.0;\n    goto label_52;\nlabel_101:\n    fp_stack++;\n    fp_stack++;\n    *(fp_stack--) = 0.0;\n    fp_tmp_56 = fp_stack[1];\n    fp_stack[1] = fp_stack[0];\n    fp_stack[0] = fp_tmp_56;\n    goto label_53;\n}\n"
        },
        {
            "funcName": "fcn_004041a0",
            "funcStartAddr": "0x4041a0",
            "funcEndAddr": "0x40435e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4041a0 */\n#include <stdint.h>\n \nint64_t fcn_004041a0 (int64_t arg1, uint32_t arg2) {\n    uint32_t var_ch;\n    rdi = arg1;\n    rsi = arg2;\n    r15 = rdi;\n    r14d = 0;\n    r13d = 0;\n    r12d = 1;\n    eax = *(0x00610254);\n    *((rsp + 0xc)) = esi;\nlabel_1:\n    r14++;\n    ebp = *(r15);\n    if (eax == 0x80) {\n        goto label_7;\n    }\n    edx = (int32_t) bpl;\n    if (edx == eax) {\n        goto label_8;\n    }\n    if (bpl == 0) {\n        goto label_0;\n    }\n    rbx = r15;\n    while (dl != 0) {\n        if (edx == eax) {\n            goto label_9;\n        }\n        rbx++;\n        edx = *(rbx);\n    }\n    do {\nlabel_0:\n        al = fcn_00402c00 (r15, r14);\n        eax = 0;\n        if (al == 0) {\n            r12d = eax;\n        }\n        if (*((rsp + 0xc)) != 0) {\n            rdi = stdout;\n            edx = *(0x00610250);\n            rax = *((rdi + 0x28));\n            if (rax >= *((rdi + 0x30))) {\n                goto label_10;\n            }\n            rcx = rax + 1;\n            *((rdi + 0x28)) = rcx;\n            *(rax) = dl;\n        }\nlabel_6:\n        eax = r12d;\n        return rax;\nlabel_7:\n    } while (bpl == 0);\n    rax = ctype_b_loc ();\n    rbx = r15;\n    rax = *(rax);\nlabel_2:\n    edx = (int32_t) bpl;\n    if ((*((rax + rdx*2)) & 1) != 0) {\n        goto label_11;\n    }\n    if (bpl == 0xa) {\n        goto label_11;\n    }\n    edx = *(rbx);\n    if (dl == 0) {\n        goto label_0;\n    }\nlabel_3:\n    esi = (int32_t) dl;\n    if ((*((rax + rsi*2)) & 1) == 0) {\n        if (dl != 0xa) {\n            goto label_12;\n        }\n    }\n    ebp = *(rbx);\nlabel_4:\n    if (bpl == 0) {\n        goto label_0;\n    }\nlabel_9:\n    *(rbx) = 0;\n    al = fcn_00402c00 (r15, r14);\n    rdi = stdout;\n    esi = 0x20;\n    eax = *(0x00610254);\n    if (al == 0) {\n        r12d = r13d;\n    }\n    rdx = *((rdi + 0x28));\n    if (eax != 0x80) {\n        esi = eax;\n    }\n    if (rdx >= *((rdi + 0x30))) {\n        goto label_13;\n    }\n    r8 = rdx + 1;\n    *((rdi + 0x28)) = r8;\n    *(rdx) = sil;\nlabel_5:\n    r15 = rbx + 1;\n    goto label_1;\nlabel_11:\n    rbx++;\n    ebp = *(rbx);\n    if (bpl != 0) {\n        goto label_2;\n    }\n    goto label_0;\nlabel_12:\n    rbx++;\n    edx = *(rbx);\n    if (dl != 0) {\n        goto label_3;\n    }\n    goto label_0;\nlabel_8:\n    rbx = r15;\n    goto label_4;\nlabel_13:\n    esi = (int32_t) sil;\n    overflow ();\n    eax = *(0x00610254);\n    goto label_5;\nlabel_10:\n    esi = (int32_t) dl;\n    overflow ();\n    goto label_6;\n}\n"
        },
        {
            "funcName": "fcn_00404360",
            "funcStartAddr": "0x404360",
            "funcEndAddr": "0x404a0d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x404360 */\n#include <stdint.h>\n \nuint64_t fcn_00404360 (int64_t arg1) {\n    int64_t var_30h;\n    char * var_38h;\n    int64_t var_40h;\n    char * var_48h;\n    char * var_50h;\n    char * var_58h;\n    char * var_60h;\n    char * var_68h;\n    char * var_70h;\n    char * var_78h;\n    char * var_80h;\n    char * var_88h;\n    int64_t var_90h;\n    int64_t var_98h;\n    rdi = arg1;\n    edx = 5;\n    rbx = imp.__libc_start_main;\n    if (edi != 0) {\n        rax = dcgettext (0, \"Try '%s --help' for more information.\\n\");\n        rdi = stderr;\n        rcx = rbx;\n        esi = 1;\n        rdx = rax;\n        eax = 0;\n        fprintf_chk ();\nlabel_0:\n        exit (ebp);\n    }\n    rax = dcgettext (0, \"Usage: %s [OPTION]... [NUMBER]...\\n\");\n    rdx = rbx;\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"Reformat NUMBER(s), or the numbers from standard input if none are specified.\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nMandatory arguments to long options are mandatory for short options too.\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --debug          print warnings about invalid input\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  -d, --delimiter=X    use X instead of whitespace for field delimiter\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --field=FIELDS   replace the numbers in these input fields (default=1)\\n                         see FIELDS below\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --format=FORMAT  use printf style floating-point FORMAT;\\n                         see FORMAT below for details\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --from=UNIT      auto-scale input numbers to UNITs; default is 'none';\\n                         see UNIT below\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --from-unit=N    specify the input unit size (instead of the default 1)\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\\n                         (which means it has no effect in the C/POSIX locale)\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --header[=N]     print (without converting) the first N header lines;\\n                         N defaults to 1 if not specified\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --invalid=MODE   failure mode for invalid numbers: MODE can be:\\n                         abort (default), fail, warn, ignore\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --padding=N      pad the output to N characters; positive N will\\n                         right-align; negative N will left-align;\\n                         padding is ignored if the output is wider than N;\\n                         the default is to automatically pad if a whitespace\\n                         is found\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\\n                         up, down, from-zero (default), towards-zero, nearest\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\\n                         SUFFIX in input numbers\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --to-unit=N      the output unit size (instead of the default 1)\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  -z, --zero-terminated    line delimiter is NUL, not newline\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --help     display this help and exit\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"      --version  output version information and exit\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nUNIT options:\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    edx = 5;\n    rbx = stdout;\n    rax = dcgettext (0, \"  none       no auto-scaling is done; suffixes will trigger an error\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  auto       accept optional single/two letter suffix:\\n               1K = 1000,\\n               1Ki = 1024,\\n               1M = 1000000,\\n               1Mi = 1048576,\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  si         accept optional single letter suffix:\\n               1K = 1000,\\n               1M = 1000000,\\n               ...\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  iec        accept optional single letter suffix:\\n               1K = 1024,\\n               1M = 1048576,\\n               ...\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"  iec-i      accept optional two-letter suffix:\\n               1Ki = 1024,\\n               1Mi = 1048576,\\n               ...\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nFIELDS supports cut(1) style field ranges:\\n  N    N'th field, counted from 1\\n  N-   from N'th field, to end of line\\n  N-M  from N'th to M'th field (inclusive)\\n  -M   from first to M'th field (inclusive)\\n  -    all fields\\nMultiple fields/ranges can be separated with commas\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = stdout;\n    edx = 5;\n    rax = dcgettext (0, \"\\nFORMAT must be suitable for printing one floating-point argument '%f'.\\nOptional quote (%'f) will enable --grouping (if supported by current locale).\\nOptional width value (%10f) will pad output. Optional zero (%010f) width\\nwill zero pad the number. Optional negative values (%-10f) will left align.\\nOptional precision (%.1f) will override the input determined precision.\\n\");\n    rsi = rbx;\n    rdi = rax;\n    fputs_unlocked ();\n    rbx = imp.__libc_start_main;\n    edx = 5;\n    rax = dcgettext (0, \"\\nExit status is 0 if all input numbers were successfully converted.\\nBy default, %s will stop at the first conversion error with exit status 2.\\nWith --invalid='fail' a warning is printed for each conversion error\\nand the exit status is 2.  With --invalid='warn' each conversion error is\\ndiagnosed, but the exit status is 0.  With --invalid='ignore' conversion\\nerrors are not diagnosed and the exit status is 0.\\n\");\n    rdx = rbx;\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    rbx = imp.__libc_start_main;\n    edx = 5;\n    rax = dcgettext (0, \"\\nExamples:\\n  $ %s --to=si 1000\\n            -> \\\"1.0K\\\"\\n  $ %s --to=iec 2048\\n           -> \\\"2.0K\\\"\\n  $ %s --to=iec-i 4096\\n           -> \\\"4.0Ki\\\"\\n  $ echo 1K | %s --from=si\\n           -> \\\"1000\\\"\\n  $ echo 1K | %s --from=iec\\n           -> \\\"1024\\\"\\n  $ df -B1 | %s --header --field 2-4 --to=si\\n  $ ls -l  | %s --header --field 5 --to=iec\\n  $ ls -lh | %s --header --field 5 --from=iec --padding=10\\n  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\\n\");\n    r9 = rbx;\n    r8 = rbx;\n    rcx = rbx;\n    rsi = rax;\n    rdx = rbx;\n    edi = 1;\n    eax = 0;\n    printf_chk ();\n    *((rsp + 0x30)) = 0x40a123;\n    *((rsp + 0x38)) = \"test invocation\";\n    *((rsp + 0x40)) = 0x40a19d;\n    *((rsp + 0x48)) = \"Multi-call invocation\";\n    *((rsp + 0x50)) = \"sha224sum\";\n    *((rsp + 0x58)) = \"sha2 utilities\";\n    *((rsp + 0x60)) = \"sha256sum\";\n    *((rsp + 0x68)) = \"sha2 utilities\";\n    *((rsp + 0x70)) = \"sha384sum\";\n    *((rsp + 0x78)) = \"sha2 utilities\";\n    *((rsp + 0x80)) = \"sha512sum\";\n    *((rsp + 0x88)) = \"sha2 utilities\";\n    *((rsp + 0x90)) = 0;\n    *((rsp + 0x98)) = 0;\n    rax = rsp;\n    do {\n        rax += 0x10;\n        rdi = *(rax);\n        if (rdi == 0) {\n            goto label_2;\n        }\n        esi = \"numfmt\";\n        ecx = 7;\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        dl = (rdi > 0) ? 1 : 0;\n    } while (dl != 0);\nlabel_2:\n    rbx = *((rax + 8));\n    edx = 5;\n    esi = \"\\n%s online help: <%s>\\n\";\n    edi = 0;\n    if (rbx == 0) {\n        goto label_3;\n    }\n    rax = dcgettext (rdi, rsi);\n    edi = 1;\n    ecx = \"https://www.gnu.org/software/coreutils/\";\n    edx = \"GNU coreutils\";\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    rax = setlocale (5, 0);\n    if (rax != 0) {\n        eax = strncmp (rax, 0x40a1a7, 3);\n        if (eax != 0) {\n            goto label_4;\n        }\n    }\nlabel_1:\n    edx = 5;\n    r12d = 0x40a13f;\n    rax = dcgettext (0, \"Full documentation at: <%s%s>\\n\");\n    ecx = \"numfmt\";\n    edx = \"https://www.gnu.org/software/coreutils/\";\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    ecx = 0x40dc97;\n    r12 = rcx;\n    while (1) {\n        edx = 5;\n        rax = dcgettext (0, \"or available locally via: info '(coreutils) %s%s'\\n\");\n        rcx = r12;\n        rdx = rbx;\n        edi = 1;\n        rsi = rax;\n        eax = 0;\n        printf_chk ();\n        goto label_0;\nlabel_3:\n        rax = dcgettext (rdi, rsi);\n        edi = 1;\n        ecx = \"https://www.gnu.org/software/coreutils/\";\n        edx = \"GNU coreutils\";\n        rsi = rax;\n        eax = 0;\n        printf_chk ();\n        rax = setlocale (5, 0);\n        if (rax != 0) {\n            eax = strncmp (rax, 0x40a1a7, 3);\n            if (eax != 0) {\n                goto label_5;\n            }\n        }\n        edx = 5;\n        ebx = \"numfmt\";\n        rax = dcgettext (0, \"Full documentation at: <%s%s>\\n\");\n        ecx = \"numfmt\";\n        edx = \"https://www.gnu.org/software/coreutils/\";\n        edi = 1;\n        rsi = rax;\n        eax = 0;\n        r12d = 0x40a13f;\n        printf_chk ();\n    }\nlabel_5:\n    ebx = \"numfmt\";\nlabel_4:\n    edx = 5;\n    rax = dcgettext (0, \"Report %s translation bugs to <https://translationproject.org/team/>\\n\");\n    edx = \"numfmt\";\n    edi = 1;\n    rsi = rax;\n    eax = 0;\n    printf_chk ();\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00404a30",
            "funcStartAddr": "0x404a30",
            "funcEndAddr": "0x404afc",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x404a30 */\n#include <stdint.h>\n \nint64_t fcn_00404a30 (uint32_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = rsi;\n    rdx = imp.__libc_start_main;\n    rcx = imp.__libc_start_main;\n    rax = imp.__libc_start_main;\n    while (1) {\n        rdi = rdx;\n        rdx++;\n        rdi <<= 4;\n        rax += rdi;\n        *(rax) = rbp;\n        *((rax + 8)) = rbx;\n        *(0x00610568) = rdx;\n        return rax;\n        if (rax == 0) {\n            goto label_1;\n        }\n        rdx = 0x555555555555554;\n        if (rcx > rdx) {\n            goto label_2;\n        }\n        rdx = rcx;\n        rdx >>= 1;\n        rcx = rcx + rdx + 1;\n        rsi = rcx;\n        rsi <<= 4;\nlabel_0:\n        *(0x006103c0) = rcx;\n        rax = fcn_00407bb0 (rax, rsi);\n        rdx = imp.__libc_start_main;\n        *(0x00610560) = rax;\n    }\nlabel_1:\n    if (rcx == 0) {\n        goto label_3;\n    }\n    rsi = rcx;\n    edx = 0;\n    rsi >>= 0x3c;\n    rsi = rcx;\n    dl = (rsi != 0) ? 1 : 0;\n    rsi <<= 4;\n    if (rsi < 0) {\n        goto label_2;\n    }\n    if (rdx == 0) {\n        goto label_0;\n    }\nlabel_2:\n    fcn_00407da0 ();\nlabel_3:\n    esi = 0x80;\n    ecx = 8;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00404b00",
            "funcStartAddr": "0x404b00",
            "funcEndAddr": "0x40509e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x404b00 */\n#include <stdint.h>\n \nuint64_t fcn_00404b00 (int64_t arg1, int64_t arg2, int64_t arg4) {\n    uint32_t var_8h;\n    int64_t var_sp_10h;\n    int64_t var_18h;\n    int64_t var_1ch;\n    rdi = arg1;\n    rsi = arg2;\n    rcx = arg4;\n    eax = esi;\n    r15 = rdi;\n    eax &= 1;\n    *((rsp + 0x1c)) = esi;\n    *((rsp + 0x18)) = eax;\n    if (eax != 0) {\n        edi = 0x40dc7a;\n        ecx = 2;\n        rsi = r15;\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        al = (eax > 0) ? 1 : 0;\n        if (al == 0) {\n            goto label_13;\n        }\n    }\n    edi = 0;\n    ebx = 0;\nlabel_7:\n    r12d = 0;\n    r14d = 0;\n    *((rsp + 8)) = 1;\n    while (r13b != 0x2d) {\n        if (r13b != 0x2c) {\n            *((rsp + 0x10)) = rdi;\n            rax = ctype_b_loc ();\n            r9d = (int32_t) r13b;\n            rdi = *((rsp + 0x10));\n            rax = *(rax);\n            if ((*((rax + r9*2)) & 1) != 0) {\n                goto label_14;\n            }\n            if (r13b != 0) {\n                goto label_15;\n            }\n        }\nlabel_14:\n        if (bpl == 0) {\n            goto label_16;\n        }\n        if (bl != 0) {\n            goto label_17;\n        }\n        if (r14b != 0) {\n            goto label_18;\n        }\n        eax = *((rsp + 0x18));\n        if (eax == 0) {\n            goto label_19;\n        }\n        *((rsp + 8)) = 1;\nlabel_5:\n        fcn_00404a30 (*((rsp + 8)), 0xffffffffffffffff);\nlabel_6:\n        if (*(r15) == 0) {\n            goto label_20;\n        }\nlabel_1:\n        edi = 0;\n        r12d = 0;\n        ebp = 0;\n        r14d = 0;\n        ebx = 0;\nlabel_0:\n        r15++;\n        r13d = *(r15);\n    }\n    if (bpl != 0) {\n        goto label_21;\n    }\n    cl = (rdi == 0) ? 1 : 0;\n    cl &= bl;\n    r12d = ecx;\n    if (cl != 0) {\n        goto label_22;\n    }\n    if (bl != 0) {\n        goto label_23;\n    }\n    r12d = ebx;\n    edi = 0;\n    *((rsp + 8)) = 1;\n    goto label_0;\nlabel_16:\n    if (rdi == 0) {\n        goto label_24;\n    }\n    fcn_00404a30 (rdi, rdi);\n    if (*(r15) != 0) {\n        goto label_1;\n    }\nlabel_20:\n    rsi = imp.__libc_start_main;\n    if (rsi == 0) {\n        goto label_25;\n    }\n    rdi = imp.__libc_start_main;\n    ecx = 0x404a10;\n    edx = 0x10;\n    r15d = 0;\n    qsort ();\n    rbx = imp.__libc_start_main;\n    r14 = imp.__libc_start_main;\n    do {\nlabel_2:\n        if (r15 >= rbx) {\n            goto label_26;\n        }\nlabel_4:\n        r15++;\n    } while (r15 >= rbx);\n    rbp <<= 4;\n    r12 = rbp - 0x10;\n    rdi = r14 + rbp;\n    rdx = r14 + r12;\n    rax = *((rdx + 8));\n    if (rax < *(rdi)) {\n        goto label_2;\n    }\n    r13 = rbp + 0x10;\nlabel_3:\n    if (*((rdi + 8)) >= rax) {\n        rax = *((rdi + 8));\n    }\n    rbx -= r15;\n    rbx <<= 4;\n    *((rdx + 8)) = rax;\n    memmove (rdi, r14 + r13, rbx - 0x10);\n    rax = imp.__libc_start_main;\n    r14 = imp.__libc_start_main;\n    rbx = rax - 1;\n    *(0x00610568) = rbx;\n    if (rbx <= r15) {\n        goto label_2;\n    }\n    rdx = r14 + r12;\n    rdi = r14 + rbp;\n    rax = *((rdx + 8));\n    if (*(rdi) <= rax) {\n        goto label_3;\n    }\n    if (r15 < rbx) {\n        goto label_4;\n    }\nlabel_26:\n    if ((*((rsp + 0x1c)) & 2) != 0) {\n        goto label_27;\n    }\nlabel_8:\n    rbx++;\n    rsi = rbx;\n    *(0x00610568) = rbx;\n    rsi <<= 4;\n    rax = fcn_00407bb0 (r14, rsi);\n    rdx = imp.__libc_start_main;\n    *(0x00610560) = rax;\n    rdx <<= 4;\n    rax = rax + rdx - 0x10;\n    rdx = 0xffffffffffffffff;\n    *((rax + 8)) = rdx;\n    *(rax) = rdx;\n    return rax;\nlabel_17:\n    if (r14b == 0) {\n        goto label_5;\n    }\nlabel_18:\n    if (*((rsp + 8)) > rdi) {\n        goto label_28;\n    }\n    fcn_00404a30 (*((rsp + 8)), rdi);\n    goto label_6;\nlabel_23:\n    *((rsp + 8)) = rdi;\n    edi = 0;\n    goto label_0;\nlabel_15:\n    eax = (int32_t) r13b;\n    r9d = rax - 0x30;\n    if (r9d > 9) {\n        goto label_29;\n    }\n    if (r12b == 0) {\n        goto label_30;\n    }\n    while (1) {\n        ecx = 1;\n        if (bpl == 0) {\n            ebx = ecx;\n        }\n        if (bpl != 0) {\n            r14d = ebp;\n        }\n        rcx = 0x1999999999999999;\n        if (rdi > rcx) {\n            goto label_31;\n        }\n        eax -= 0x30;\n        rcx = rdi * 5;\n        rax = (int64_t) eax;\n        rax = rax + rcx*2;\n        if (rax < rdi) {\n            goto label_31;\n        }\n        if (rax == -1) {\n            goto label_31;\n        }\n        rdi = rax;\n        r12d = 1;\n        goto label_0;\nlabel_30:\n        *(0x006103b8) = r15;\n    }\nlabel_13:\n    r15++;\n    edi = 1;\n    ebx = 1;\n    goto label_7;\nlabel_27:\n    *(0x00610560) = 0;\n    rax = *(r14);\n    *(0x00610568) = 0;\n    *(0x006103c0) = 0;\n    if (rax > 1) {\n        goto label_32;\n    }\nlabel_9:\n    r12 = rbx;\n    rbp = r14 + 0x10;\n    r12 <<= 4;\n    r12 += r14;\n    if (rbx <= 1) {\n        goto label_33;\n    }\n    do {\n        rax = *((rbp - 8));\n        rsi = *(rbp);\n        rdi = rax + 1;\n        if (rdi != rsi) {\n            rsi--;\n            fcn_00404a30 (rdi, rsi);\n        }\n        rbp += 0x10;\n    } while (r12 != rbp);\nlabel_33:\n    rbx <<= 4;\n    rax = *((r14 + rbx - 8));\n    while (1) {\n        free (r14);\n        rbx = imp.__libc_start_main;\n        r14 = imp.__libc_start_main;\n        goto label_8;\n        fcn_00404a30 (rax + 1, 0xffffffffffffffff);\n    }\nlabel_32:\n    fcn_00404a30 (1, rax - 1);\n    goto label_9;\nlabel_19:\n    edx = 5;\n    do {\nlabel_12:\n        rax = dcgettext (0, \"invalid range with no endpoint: -\");\nlabel_10:\n        eax = 0;\n        error (0, 0, rax);\n        fcn_00404360 (1);\nlabel_31:\n        rbx = imp.__libc_start_main;\n        rax = strspn (rbx, \"0123456789\");\n        rax = fcn_00407de0 (rbx, rax);\n        rdi = rax;\n        rbx = rax;\n        rax = fcn_00407590 (rdi);\n        edx = 5;\n        if ((*((rsp + 0x1c)) & 4) == 0) {\n            goto label_34;\n        }\n        rax = dcgettext (0, \"byte/character offset %s is too large\");\nlabel_11:\n        rcx = rbp;\n        eax = 0;\n        error (0, 0, rax);\n        free (rbx);\n        fcn_00404360 (1);\nlabel_28:\n        edx = 5;\n        esi = \"invalid decreasing range\";\n    } while (1);\nlabel_22:\n    edx = 5;\n    if ((*((rsp + 0x1c)) & 4) == 0) {\n        goto label_35;\n    }\n    dcgettext (0, \"byte/character positions are numbered from 1\");\n    goto label_10;\nlabel_21:\n    edx = 5;\n    if ((*((rsp + 0x1c)) & 4) == 0) {\n        goto label_36;\n    }\n    dcgettext (0, \"invalid byte or character range\");\n    goto label_10;\n    do {\nlabel_35:\n        dcgettext (0, \"fields are numbered from 1\");\n        goto label_10;\nlabel_36:\n        dcgettext (0, \"invalid field range\");\n        goto label_10;\nlabel_24:\n        edx = 5;\n    } while ((*((rsp + 0x1c)) & 4) == 0);\n    dcgettext (rdi, \"byte/character positions are numbered from 1\");\n    goto label_10;\nlabel_34:\n    dcgettext (0, \"field number %s is too large\");\n    goto label_11;\nlabel_25:\n    edx = 5;\n    if ((*((rsp + 0x1c)) & 4) == 0) {\n        goto label_37;\n    }\n    dcgettext (0, \"missing list of byte/character positions\");\n    goto label_10;\nlabel_29:\n    rax = fcn_00407590 (r15);\n    edx = 5;\n    rbx = rax;\n    if ((*((rsp + 0x1c)) & 4) == 0) {\n        goto label_38;\n    }\n    rax = dcgettext (0, \"invalid byte/character position %s\");\n    do {\n        rcx = rbx;\n        eax = 0;\n        error (0, 0, rax);\n        fcn_00404360 (1);\nlabel_37:\n        esi = \"missing list of fields\";\n        goto label_12;\nlabel_38:\n        dcgettext (0, \"invalid field value %s\");\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_004050f0",
            "funcStartAddr": "0x4050f0",
            "funcEndAddr": "0x405206",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4050f0 */\n#include <stdint.h>\n \nuint64_t fcn_004050f0 (char * arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    char * s2;\n    uint32_t var_17h;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r15 = rsi;\n    r13 = rcx;\n    *((rsp + 8)) = rdi;\n    *((rsp + 0x18)) = rdx;\n    rax = strlen (rdi);\n    r14 = *(r15);\n    *(rsp) = 0xffffffffffffffff;\n    if (r14 == 0) {\n        goto label_3;\n    }\n    r12 = rax;\n    *((rsp + 0x17)) = 0;\n    ebx = 0;\n    goto label_1;\nlabel_0:\n    rax = *((rsp + 0x18));\n    if (rax == 0) {\n        goto label_4;\n    }\n    rdi *= r13;\n    rdi += rax;\n    eax = memcmp (*(rsp), rbp, r13);\n    ecx = 1;\n    eax = *((rsp + 0x17));\n    if (eax != 0) {\n        eax = ecx;\n    }\n    *((rsp + 0x17)) = al;\n    do {\nlabel_2:\n        rbx++;\n        rbp += r13;\n        r14 = *((r15 + rbx*8));\n        if (r14 == 0) {\n            goto label_5;\n        }\nlabel_1:\n        eax = strncmp (r14, *((rsp + 8)), r12);\n    } while (eax != 0);\n    rax = strlen (r14);\n    if (rax == r12) {\n        goto label_6;\n    }\n    if (*(rsp) != -1) {\n        goto label_0;\n    }\n    *(rsp) = rbx;\n    rbx++;\n    rbp += r13;\n    r14 = *((r15 + rbx*8));\n    if (r14 != 0) {\n        goto label_1;\n    }\nlabel_5:\n    rax = 0xfffffffffffffffe;\n    if (*((rsp + 0x17)) == 0) {\n        rax = *(rsp);\n    }\n    *(rsp) = rax;\n    do {\nlabel_3:\n        rax = *(rsp);\n        return rax;\nlabel_4:\n        *((rsp + 0x17)) = 1;\n        goto label_2;\nlabel_6:\n        *(rsp) = rbx;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00405210",
            "funcStartAddr": "0x405210",
            "funcEndAddr": "0x405281",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x405210 */\n#include <stdint.h>\n \nuint64_t fcn_00405210 (int64_t arg1, int64_t arg2, uint32_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    edx = 5;\n    r12 = rsi;\n    if (rdx == -1) {\n        goto label_0;\n    }\n    rax = dcgettext (0, \"ambiguous argument %s for %s\");\n    rbx = rax;\n    do {\n        rax = fcn_00407570 (1, rbp);\n        rdx = r12;\n        rax = fcn_00407260 (0, 8);\n        r8 = rbp;\n        rdx = rbx;\n        esi = 0;\n        rcx = rax;\n        edi = 0;\n        eax = 0;\n        void (*0x401a70)() ();\nlabel_0:\n        rax = dcgettext (0, \"invalid argument %s for %s\");\n        rbx = rax;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00405290",
            "funcStartAddr": "0x405290",
            "funcEndAddr": "0x4053a8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x405290 */\n#include <stdint.h>\n \nuint64_t fcn_00405290 (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r15 = rdi;\n    r14d = 0;\n    r13 = rdx;\n    edx = 5;\n    rbx = stderr;\n    rax = dcgettext (0, \"Valid arguments are:\");\n    rdi = rax;\n    rsi = rbx;\n    ebx = 0;\n    fputs_unlocked ();\n    r12 = *(r15);\n    if (r12 != 0) {\n        goto label_1;\n    }\n    goto label_2;\n    do {\nlabel_0:\n        rbx++;\n        r14 = rbp;\n        rbp += r13;\n        rax = fcn_00407590 (r12);\n        edx = \"\\n  - %s\";\n        esi = 1;\n        rdi = stderr;\n        rcx = rax;\n        eax = 0;\n        fprintf_chk ();\n        r12 = *((r15 + rbx*8));\n        if (r12 == 0) {\n            goto label_2;\n        }\nlabel_1:\n    } while (rbx == 0);\n    eax = memcmp (r14, rbp, r13);\n    if (eax != 0) {\n        goto label_0;\n    }\n    rbx++;\n    rbp += r13;\n    rax = fcn_00407590 (r12);\n    edx = \", %s\";\n    esi = 1;\n    rdi = stderr;\n    rcx = rax;\n    eax = 0;\n    fprintf_chk ();\n    r12 = *((r15 + rbx*8));\n    if (r12 != 0) {\n        goto label_1;\n    }\nlabel_2:\n    rdi = stderr;\n    rax = *((rdi + 0x28));\n    if (rax < *((rdi + 0x30))) {\n        rdx = rax + 1;\n        *((rdi + 0x28)) = rdx;\n        *(rax) = 0xa;\n        return rax;\n    }\n    esi = 0xa;\n    return overflow ();\n}\n"
        },
        {
            "funcName": "fcn_004053b0",
            "funcStartAddr": "0x4053b0",
            "funcEndAddr": "0x405420",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4053b0 */\n#include <stdint.h>\n \nuint64_t fcn_004053b0 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    r15 = r8;\n    r14 = rdi;\n    r13 = r9;\n    r12 = rsi;\n    rbx = rdx;\n    rax = fcn_004050f0 (r12, rbx, rbp, r8);\n    while (1) {\n        return rax;\n        fcn_00405210 (r14, r12, rax);\n        fcn_00405290 (rbx, rbp, r15);\n        void (*r13)() ();\n        rax = 0xffffffffffffffff;\n    }\n}\n"
        },
        {
            "funcName": "fcn_00405530",
            "funcStartAddr": "0x405530",
            "funcEndAddr": "0x4058cb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x405530 */\n#include <stdint.h>\n \nuint64_t fcn_00405530 (char * arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    int64_t var_8h;\n    int64_t var_14h;\n    char * s;\n    size_t size;\n    int64_t var_28h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    r13 = rcx;\n    rbx = rsi;\n    *((rsp + 0x18)) = rdi;\n    *((rsp + 8)) = rdx;\n    *((rsp + 0x14)) = r8d;\n    rax = strlen (rdi);\n    r14 = rax;\n    if ((bpl & 2) == 0) {\n        goto label_10;\n    }\nlabel_2:\n    *(rsp) = 0;\n    r15 = r14;\n    r12d = 0;\nlabel_5:\n    rdx = *(r13);\n    if (rdx >= r15) {\n        goto label_11;\n    }\n    r14 = rdx;\n    eax = 0;\nlabel_9:\n    esi = *((rsp + 0x14));\n    *(r13) = rdx;\n    if (esi == 0) {\n        goto label_12;\n    }\nlabel_0:\n    r13d = 0;\n    if (esi != 1) {\n        r13 = rax;\n        eax &= 1;\n        r13 >>= 1;\n        rax += r13;\n    }\nlabel_1:\n    r15 = rax + r14;\n    if ((bpl & 4) != 0) {\n        r15 = r14;\n        eax = 0;\n    }\n    rsi = *((rsp + 8));\n    ebp &= 8;\n    edx = 0;\n    if (ebp != 0) {\n        r13 = rdx;\n    }\n    if (rsi == 0) {\n        goto label_13;\n    }\n    rbp = rbx + rsi - 1;\n    rdi = rbx;\n    if (rbx >= rbp) {\n        goto label_14;\n    }\n    if (rax != 0) {\n        goto label_15;\n    }\n    goto label_14;\n    do {\n        if (rbp <= rdi) {\n            goto label_14;\n        }\nlabel_15:\n        rdi++;\n        rdx = rbx;\n        *((rdi - 1)) = 0x20;\n        rdx -= rdi;\n        rdx += rax;\n    } while (rdx != 0);\nlabel_14:\n    rdx = rbp;\n    *(rdi) = 0;\n    rsi = *((rsp + 0x18));\n    rdx -= rdi;\n    if (rdx > r14) {\n        rdx = r14;\n    }\n    rax = mempcpy ();\n    rdx = rax;\n    if (rbp <= rax) {\n        goto label_16;\n    }\n    if (r13 != 0) {\n        goto label_17;\n    }\n    goto label_16;\n    do {\n        if (rbp <= rdx) {\n            goto label_16;\n        }\nlabel_17:\n        rdx++;\n        rcx = r13;\n        *((rdx - 1)) = 0x20;\n        rcx -= rdx;\n        rcx += rax;\n    } while (rcx != 0);\nlabel_16:\n    *(rdx) = 0;\nlabel_13:\n    r13 += r15;\nlabel_3:\n    free (*(rsp));\n    free (r12);\n    rax = r13;\n    return rax;\nlabel_7:\n    r12d = 0;\nlabel_11:\n    if (r15 >= rdx) {\n        goto label_18;\n    }\n    esi = *((rsp + 0x14));\n    rax = rdx;\n    rdx = r15;\n    rax -= r15;\n    *(r13) = rdx;\n    if (esi != 0) {\n        goto label_0;\n    }\nlabel_12:\n    r13 = rax;\n    eax = 0;\n    goto label_1;\nlabel_10:\n    r12 = rax;\n    rax = ctype_get_mb_cur_max ();\n    if (rax <= 1) {\n        goto label_2;\n    }\n    rax = mbstowcs (0, *((rsp + 0x18)), 0);\n    if (rax != -1) {\n        goto label_19;\n    }\n    if ((bpl & 1) != 0) {\n        goto label_2;\n    }\nlabel_6:\n    *(rsp) = 0;\n    r12d = 0;\n    r13 = 0xffffffffffffffff;\n    goto label_3;\nlabel_19:\n    r15 = rax + 1;\n    rax = r15*4;\n    rdi = rax;\n    *((rsp + 0x20)) = rax;\n    rax = malloc (rdi);\n    *(rsp) = rax;\n    if (rax == 0) {\n        goto label_20;\n    }\n    rax = mbstowcs (*(rsp), *((rsp + 0x18)), r15);\n    if (rax == 0) {\n        goto label_21;\n    }\n    rax = *(rsp);\n    rsi = *((rsp + 0x20));\n    *((rax + rsi - 4)) = 0;\n    edi = *(rax);\n    rdx = rax;\n    if (edi == 0) {\n        goto label_22;\n    }\n    *((rsp + 0x20)) = 0;\n    do {\n        *((rsp + 0x28)) = rdx;\n        eax = iswprint (rdi);\n        rdx = *((rsp + 0x28));\n        if (eax == 0) {\n            *(rdx) = 0xfffd;\n            *((rsp + 0x20)) = 1;\n        }\n        rdx += 4;\n        edi = *(rdx);\n    } while (edi != 0);\n    rdi = *(rsp);\n    rsi = r15;\n    eax = wcswidth ();\n    r15 = (int64_t) eax;\n    if (*((rsp + 0x20)) == 0) {\n        goto label_23;\n    }\n    rax = wcstombs (0, *(rsp), 0);\n    rax++;\n    *((rsp + 0x20)) = rax;\nlabel_8:\n    rax = malloc (*((rsp + 0x20)));\n    r12 = rax;\n    if (rax == 0) {\n        goto label_24;\n    }\n    r14 = *(rsp);\n    rax = *(r13);\n    edi = *(r14);\n    *((rsp + 0x18)) = rax;\n    if (edi == 0) {\n        goto label_25;\n    }\n    r15d = 0;\n    while (eax != 0xffffffff) {\n        rax = (int64_t) eax;\nlabel_4:\n        rax += r15;\n        if (*((rsp + 0x18)) < rax) {\n            goto label_26;\n        }\n        r14 += 4;\n        edi = *(r14);\n        r15 = rax;\n        if (edi == 0) {\n            goto label_26;\n        }\n        eax = wcwidth ();\n    }\n    *(r14) = 0xfffd;\n    eax = 1;\n    goto label_4;\nlabel_20:\n    r15 = r14;\n    r12d = 0;\n    if ((bpl & 1) != 0) {\n        goto label_5;\n    }\n    goto label_6;\nlabel_22:\n    rdi = *(rsp);\n    rsi = r15;\n    eax = wcswidth ();\n    r15 = (int64_t) eax;\nlabel_23:\n    rdx = *(r13);\n    if (rdx >= r15) {\n        goto label_7;\n    }\n    rax = r12 + 1;\n    *((rsp + 0x20)) = rax;\n    goto label_8;\nlabel_25:\n    r14 = *(rsp);\n    r15d = 0;\nlabel_26:\n    *(r14) = 0;\n    rax = wcstombs (r12, *(rsp), *((rsp + 0x20)));\n    *((rsp + 0x18)) = r12;\n    r14 = rax;\n    goto label_5;\nlabel_24:\n    if ((bpl & 1) != 0) {\n        goto label_5;\n    }\n    r13 = 0xffffffffffffffff;\n    goto label_3;\nlabel_21:\n    r15 = r14;\n    r12d = 0;\n    goto label_5;\nlabel_18:\n    rdx = r15;\n    eax = 0;\n    goto label_9;\n}\n"
        },
        {
            "funcName": "fcn_00405970",
            "funcStartAddr": "0x405970",
            "funcEndAddr": "0x405a09",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x405970 */\n#include <stdint.h>\n \nuint64_t fcn_00405970 (char ** arg1) {\n    rdi = arg1;\n    if (rdi != 0) {\n        rbx = rdi;\n        rax = strrchr (rdi, 0x2f);\n        if (rax != 0) {\n            r8 = rax + 1;\n            rdx = r8;\n            rdx -= rbx;\n            if (rdx <= 6) {\n                goto label_0;\n            }\n            rsi = rax - 6;\n            edi = \"/.libs/\";\n            ecx = 7;\n            __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n            dl = (rdx > 6) ? 1 : 0;\n            if (dl != 0) {\n                goto label_0;\n            }\n            edi = 0x40c3c8;\n            ecx = 3;\n            rsi = r8;\n            rbx = r8;\n            __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n            dl = (dl > 0) ? 1 : 0;\n            if (dl != 0) {\n                goto label_0;\n            }\n            rbx = rax + 4;\n            *(obj.__progname) = rbx;\n        }\nlabel_0:\n        *(0x006103d8) = rbx;\n        *(obj.program_invocation_name) = rbx;\n        return rax;\n    }\n    fwrite (\"A NULL argv[0] was passed through an exec system call.\\n\", 1, 0x37, *(obj.stderr));\n    return abort ();\n}\n"
        },
        {
            "funcName": "fcn_00405a10",
            "funcStartAddr": "0x405a10",
            "funcEndAddr": "0x405b02",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x405a10 */\n#include <stdint.h>\n \nuint64_t fcn_00405a10 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    edx = 5;\n    r12d = esi;\n    rsi = rdi;\n    rax = dcgettext (0, rsi);\n    rbx = rax;\n    while (1) {\nlabel_0:\n        rax = rbx;\n        return rax;\n        rax = fcn_004098a0 ();\n        edx = *(rax);\n        edx &= 0xffffffdf;\n        if (dl != 0x55) {\n            goto label_1;\n        }\n        edx = *((rax + 1));\n        edx &= 0xffffffdf;\n        if (dl != 0x54) {\n            goto label_2;\n        }\n        edx = *((rax + 2));\n        edx &= 0xffffffdf;\n        if (dl != 0x46) {\n            goto label_2;\n        }\n        if (*((rax + 3)) != 0x2d) {\n            goto label_2;\n        }\n        if (*((rax + 4)) != 0x38) {\n            goto label_2;\n        }\n        if (*((rax + 5)) != 0) {\n            goto label_2;\n        }\n        eax = 0x40c3ce;\n        ebx = 0x40c3d9;\n        if (*(rbx) != 0x60) {\n            rbx = rax;\n        }\n    }\nlabel_1:\n    if (dl == 0x47) {\n        edx = *((rax + 1));\n        edx &= 0xffffffdf;\n        if (dl != 0x42) {\n            goto label_2;\n        }\n        if (*((rax + 2)) != 0x31) {\n            goto label_2;\n        }\n        if (*((rax + 3)) != 0x38) {\n            goto label_2;\n        }\n        if (*((rax + 4)) != 0x30) {\n            goto label_2;\n        }\n        if (*((rax + 5)) != 0x33) {\n            goto label_2;\n        }\n        if (*((rax + 6)) != 0x30) {\n            goto label_2;\n        }\n        if (*((rax + 7)) != 0) {\n            goto label_2;\n        }\n        eax = 0x40c3d2;\n        ebx = 0x40c3d5;\n        if (*(rbx) != 0x60) {\n            rbx = rax;\n        }\n        goto label_0;\n    }\nlabel_2:\n    eax = 0x40dc67;\n    ebx = 0x40c3cc;\n    if (r12d != 9) {\n        rbx = rax;\n    }\n    rax = rbx;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00405b10",
            "funcStartAddr": "0x405b10",
            "funcEndAddr": "0x40ad01",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x405b10 */\n#include <stdint.h>\n \nuint64_t fcn_00405b10 (int64_t arg_e8h_3, uint32_t arg_e8h_2, int64_t arg_e8h, char * arg_e0h, int64_t arg1, char * arg2, char * arg3, size_t * arg4, int64_t arg5, int64_t arg6) {\n    size_t * var_8h;\n    size_t * var_10h;\n    uint32_t var_1fh;\n    char * s;\n    size_t n;\n    size_t * var_30h;\n    size_t * var_38h;\n    size_t var_40h;\n    size_t var_48h;\n    void * s2;\n    char * var_58h;\n    uint32_t var_60h;\n    int64_t var_68h;\n    uint32_t var_6ch;\n    char * var_6dh;\n    int64_t var_6eh;\n    int64_t var_6fh;\n    int64_t var_70h;\n    int64_t var_78h;\n    wint_t wc;\n    mbstate_t * ps;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    do {\n        /* [13] -r-x section size 33944 named .text */\n        abort ();\nlabel_5:\n        r15 = rdi;\n        r14 = rsi;\n        r13d = r8d;\n        *((rsp + 0x20)) = rdx;\n        *((rsp + 8)) = rcx;\n        *((rsp + 0x68)) = r9d;\n        rax = ctype_get_mb_cur_max ();\n        ebp &= 2;\n        *((rsp + 0x60)) = rax;\n        rsp + 0x6c = (ebp != 0) ? 1 : 0;\n    } while (r13d > 0xa);\n    eax = r13d;\n    r11 = *((rsp + 8));\n    /* switch table (11 cases) at 0x40c440 */\nlabel_30:\n    *((rsp + 0x1f)) = 1;\n    r10d = 0;\n    ebx = 0;\n    r13d = 2;\n    *((rsp + 0x6d)) = 0;\n    *((rsp + 0x58)) = 0;\n    *((rsp + 0x6c)) = 1;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x50)) = 0x40dc67;\nlabel_21:\n    r9 = r11;\n    r12d = 0;\n    r11d = r13d;\n    do {\nlabel_28:\n        r13b = (r9 != r12) ? 1 : 0;\n        if (r9 == -1) {\n            rax = *((rsp + 0x20));\n            r13b = (*((rax + r12)) != 0) ? 1 : 0;\n        }\n        if (r13b == 0) {\n            goto label_47;\n        }\n        rdi = *((rsp + 0x20));\n        al = (r11d != 2) ? 1 : 0;\n        al &= *((rsp + 8));\n        r8 = rdi + r12;\n        *((rsp + 0x10)) = al;\n        if (al == 0) {\n            goto label_48;\n        }\n        rax = *((rsp + 0x28));\n        if (rax == 0) {\n            goto label_49;\n        }\n        rbp = r12 + rax;\n        if (r9 == -1) {\n            if (rax <= 1) {\n                goto label_50;\n            }\n            *((rsp + 0x40)) = r11d;\n            *((rsp + 0x38)) = r10b;\n            *((rsp + 0x30)) = r8;\n            rax = strlen (rdi);\n            r11d = *((rsp + 0x40));\n            r10d = *((rsp + 0x38));\n            r8 = *((rsp + 0x30));\n            r9 = rax;\n        }\nlabel_50:\n        if (rbp > r9) {\n            goto label_49;\n        }\n        rdi = r8;\n        *((rsp + 0x48)) = r11d;\n        *((rsp + 0x40)) = r9;\n        *((rsp + 0x38)) = r10b;\n        *((rsp + 0x30)) = r8;\n        eax = memcmp (rdi, *((rsp + 0x50)), *((rsp + 0x28)));\n        r8 = *((rsp + 0x30));\n        r10d = *((rsp + 0x38));\n        r9 = *((rsp + 0x40));\n        r11d = *((rsp + 0x48));\n        if (eax != 0) {\n            goto label_49;\n        }\n        if (*((rsp + 0x6c)) != 0) {\n            goto label_51;\n        }\n        ebp = *(r8);\n        if (bpl > 0x7e) {\n            goto label_52;\n        }\n        eax = (int32_t) bpl;\n        /* switch table (127 cases) at 0x40c498 */\n        *((rsp + 0x10)) = 0;\n        al = (r9 != 1) ? 1 : 0;\n        if (r9 == -1) {\n            rax = *((rsp + 0x20));\n            al = (*((rax + 1)) != 0) ? 1 : 0;\n        }\n        dl = (r11d == 2) ? 1 : 0;\n        if (al != 0) {\n            goto label_7;\n        }\nlabel_17:\n        if (r12 != 0) {\n            goto label_7;\n        }\nlabel_18:\n        if (*((rsp + 0x6c)) != 0) {\n            if (dl != 0) {\n                goto label_53;\n            }\n        }\nlabel_2:\n        eax = *((rsp + 8));\n        eax ^= 1;\n        eax |= edx;\n        eax ^= 1;\n        al |= *((rsp + 0x6c));\n        if (al == 0) {\n            goto label_11;\n        }\nlabel_24:\n        eax = 0;\nlabel_10:\n        if (*((rsp + 0xd0)) == 0) {\n            goto label_11;\n        }\n        edx = ebp;\n        rcx = *((rsp + 0xd0));\n        dl >>= 5;\n        edx = (int32_t) dl;\n        edx = *((rcx + rdx*4));\n        ecx = ebp;\n        edx >>= cl;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_11;\n        }\n        dl = (r11d == 2) ? 1 : 0;\nlabel_0:\n        if (*((rsp + 0x6c)) != 0) {\n            goto label_54;\n        }\nlabel_4:\n        eax = r10d;\n        eax ^= 1;\n        al &= dl;\n        if (al != 0) {\n            if (r14 > rbx) {\n                *((r15 + rbx)) = 0x27;\n            }\n            rdx = rbx + 1;\n            if (rdx < r14) {\n                *((r15 + rbx + 1)) = 0x24;\n            }\n            rdx = rbx + 2;\n            if (rdx < r14) {\n                *((r15 + rbx + 2)) = 0x27;\n            }\n            rbx += 3;\n            r10d = eax;\n        }\nlabel_9:\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x5c;\n        }\n        rbx++;\n        r12++;\nlabel_1:\n        if (rbx < r14) {\n            *((r15 + rbx)) = bpl;\n        }\n        edi = *((rsp + 0x1f));\n        rbx++;\n        eax = 0;\n        if (r13b == 0) {\n            edi = eax;\n        }\n        *((rsp + 0x1f)) = dil;\n    } while (1);\nlabel_3:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_55;\n    }\n    if (r14 == 0) {\n        goto label_56;\n    }\n    edx = 0;\n    if (*((rsp + 0x58)) != 0) {\n        goto label_56;\n    }\nlabel_27:\n    *((rsp + 0x6d)) = r13b;\n    rbx += 3;\n    eax = 0;\n    r10d = 0;\n    *((rsp + 0x58)) = r14;\n    r14 = rdx;\nlabel_11:\n    dl = (r11d == 2) ? 1 : 0;\n    if (*((rsp + 0x10)) != 0) {\n        goto label_0;\n    }\n    eax ^= 1;\n    r12++;\n    eax &= r10d;\nlabel_16:\n    if (al == 0) {\n        goto label_1;\n    }\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x27;\n    }\n    rax = rbx + 1;\n    if (r14 > rax) {\n        *((r15 + rbx + 1)) = 0x27;\n    }\n    rbx += 2;\n    r10d = 0;\n    goto label_1;\n    *((rsp + 0x10)) = 0;\n    if (r11d == 2) {\n        goto label_57;\n    }\n    if (r11d == 5) {\n        goto label_58;\n    }\n    dl = (r11d == 2) ? 1 : 0;\n    r13d = 0;\n    goto label_2;\n    *((rsp + 0x10)) = 0;\n    if (r11d == 2) {\n        goto label_3;\n    }\n    *((rsp + 0x6d)) = r13b;\n    edx = 0;\n    goto label_2;\n    *((rsp + 0x10)) = 0;\nlabel_15:\n    edx = *((rsp + 8));\n    dl &= *((rsp + 0x6c));\n    ecx = 0x5c;\n    al = (*((rsp + 0x28)) != 0) ? 1 : 0;\n    dl &= al;\n    if (dl != 0) {\n        goto label_59;\n    }\nlabel_8:\n    if (*((rsp + 8)) != 0) {\n        goto label_60;\n    }\nlabel_7:\n    r13d = 0;\n    goto label_2;\nlabel_6:\n    edx = 0;\n    r13d = 0;\n    if (*((rsp + 0x6c)) == 0) {\n        goto label_4;\n    }\nlabel_54:\n    r13d = r11d;\n    eax = edx;\n    r11 = r9;\nlabel_42:\nlabel_12:\n    eax = 4;\n    if (*((rsp + 8)) != 0) {\n        r13d = eax;\n    }\nlabel_43:\n    r9d &= 0xfffffffd;\n    rax = fcn_00405b10 (r15, r14, *((rsp + 0x40)), r11, r13d, *((rsp + 0x88)));\n    goto label_5;\n    rbx = rax;\nlabel_44:\n    rax = rbx;\n    return rax;\n    goto label_6;\n    *((rsp + 0x10)) = 0;\n    edx = 0;\n    goto label_7;\n    *((rsp + 0x10)) = 0;\n    ecx = 0x72;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    do {\nlabel_20:\n        if (*((rsp + 0x6c)) != 0) {\n            goto label_61;\n        }\nlabel_34:\n        r13d = 0;\n        goto label_9;\n    } while (1);\nlabel_14:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_62;\n    }\n    *((rsp + 0x10)) = 0;\n    eax = r10d;\n    dl = (r11d == 2) ? 1 : 0;\n    eax ^= 1;\n    al &= dl;\n    if (al == 0) {\n        goto label_63;\n    }\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x27;\n    }\n    rcx = rbx + 1;\n    if (r14 > rcx) {\n        *((r15 + rbx + 1)) = 0x24;\n    }\n    rcx = rbx + 2;\n    if (r14 > rcx) {\n        *((r15 + rbx + 2)) = 0x27;\n    }\n    rcx = rbx + 3;\n    if (r14 <= rcx) {\n        goto label_64;\n    }\nlabel_26:\n    *((r15 + rcx)) = 0x5c;\n    r10d = eax;\nlabel_25:\n    rbx = rcx + 1;\n    if (r11d == 2) {\n        goto label_65;\n    }\n    rax = r12 + 1;\n    if (rax < r9) {\n        rax = *((rsp + 0x20));\n        eax = *((rax + r12 + 1));\n        *((rsp + 0x30)) = al;\n        eax -= 0x30;\n        if (al <= 9) {\n            goto label_66;\n        }\n    }\nlabel_35:\n    eax = *((rsp + 8));\n    eax ^= 1;\n    al |= dl;\n    eax = r13d;\n    r13d = 0;\n    if (al == 0) {\n        goto label_10;\n    }\n    goto label_11;\nlabel_19:\n    *((rsp + 0x10)) = 0;\n    do {\nlabel_52:\n        if (*((rsp + 0x60)) != 1) {\n            goto label_67;\n        }\n        *((rsp + 0x40)) = r11d;\n        *((rsp + 0x38)) = r9;\n        *((rsp + 0x30)) = r10b;\n        rax = ctype_b_loc ();\n        edx = (int32_t) bpl;\n        r10d = *((rsp + 0x30));\n        r9 = *((rsp + 0x38));\n        rax = *(rax);\n        r11d = *((rsp + 0x40));\n        edi = 1;\n        eax = *((rax + rdx*2));\n        ax &= 0x4000;\n        r13b = (ax != 0) ? 1 : 0;\n        dl = (ax == 0) ? 1 : 0;\n        dl &= *((rsp + 8));\nlabel_37:\n        if (dl != 0) {\n            goto label_68;\n        }\n        dl = (r11d == 2) ? 1 : 0;\n        goto label_2;\nlabel_48:\n        ebp = *(r8);\n    } while (bpl > 0x7e);\n    eax = (int32_t) bpl;\n    /* switch table (127 cases) at 0x40c890 */\n    ecx = 0x6e;\nlabel_13:\n    eax = *((rsp + 0x6c));\n    dl = (r11d == 2) ? 1 : 0;\n    al &= dl;\n    *((rsp + 0x10)) = al;\n    if (al == 0) {\n        goto label_8;\n    }\nlabel_53:\n    r11 = r9;\n    r13d = 2;\n    goto label_12;\n    ecx = 0x74;\n    goto label_13;\n    ecx = 0x62;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    ecx = 0x61;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    if (*((rsp + 8)) != 0) {\n        goto label_14;\n    }\n    if ((*((rsp + 0x68)) & 1) != 0) {\n        goto label_69;\n    }\n    *((rsp + 0x10)) = 0;\n    dl = (r11d == 2) ? 1 : 0;\n    r13d = 0;\n    ebp = 0;\n    goto label_2;\n    if (r11d != 2) {\n        goto label_15;\n    }\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_55;\n    }\n    r12++;\n    eax = r10d;\n    r13d = 0;\n    goto label_16;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_17;\n    dl = (r11d == 2) ? 1 : 0;\n    r13d = 0;\n    goto label_18;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_18;\n    ecx = 0x72;\n    goto label_13;\n    ecx = 0x66;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\n    ecx = 0x76;\n    dl = (r11d == 2) ? 1 : 0;\n    goto label_8;\nlabel_49:\n    ebp = *(r8);\n    if (bpl > 0x7e) {\n        goto label_19;\n    }\n    eax = (int32_t) bpl;\n    /* switch table (127 cases) at 0x40cc88 */\n    eax = 0;\n    do {\nlabel_31:\n        r13d = *((rsp + 0x10));\n        *((rsp + 0x10)) = al;\n        eax = 0;\n        goto label_10;\n        eax = 0;\nlabel_32:\n        if (r12 != 0) {\n            goto label_70;\n        }\n        r13d = *((rsp + 0x10));\n        edx = 0;\n        *((rsp + 0x10)) = al;\n        goto label_2;\n        eax = 0;\nlabel_33:\n    } while (1);\n    goto label_6;\n    goto label_20;\nlabel_47:\n    r13d = r11d;\n    r11 = r9;\n    dl = (r13d == 2) ? 1 : 0;\n    if (rbx == 0) {\n        if ((*((rsp + 0x6c)) & dl) != 0) {\n            goto label_71;\n        }\n    }\n    eax = *((rsp + 0x6c));\n    eax ^= 1;\n    dl &= al;\n    if (dl == 0) {\n        goto label_72;\n    }\n    if (*((rsp + 0x6d)) == 0) {\n        goto label_45;\n    }\n    if (*((rsp + 0x1f)) != 0) {\n        goto label_73;\n    }\n    al = (r14 == 0) ? 1 : 0;\n    dl = (*((rsp + 0x58)) != 0) ? 1 : 0;\n    al &= dl;\n    if (al == 0) {\n        goto label_74;\n    }\n    r14 = *((rsp + 0x58));\nlabel_46:\n    *(r15) = 0x27;\n    r13d = 2;\n    ebx = 1;\n    *((rsp + 0x50)) = 0x40dc67;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x6c)) = 0;\n    *((rsp + 0x6d)) = al;\n    goto label_21;\nlabel_58:\n    if ((*((rsp + 0x68)) & 4) != 0) {\n        rax = r12 + 2;\n        if (rax >= r9) {\n            goto label_39;\n        }\n        rsi = *((rsp + 0x20));\n        if (*((rsi + r12 + 1)) == 0x3f) {\n            goto label_75;\n        }\n    }\nlabel_39:\n    edx = 0;\n    r13d = 0;\n    goto label_2;\nlabel_57:\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_55;\n    }\n    r13d = 0;\n    eax = 0;\n    goto label_11;\nlabel_67:\n    *((rsp + 0x88)) = 0;\n    if (r9 == -1) {\n        *((rsp + 0x40)) = r11d;\n        *((rsp + 0x38)) = r10b;\n        *((rsp + 0x30)) = r8;\n        rax = strlen (*((rsp + 0x20)));\n        r11d = *((rsp + 0x40));\n        r10d = *((rsp + 0x38));\n        r8 = *((rsp + 0x30));\n        r9 = rax;\n    }\n    eax = 0;\n    *((rsp + 0x70)) = rbx;\n    *((rsp + 0x78)) = r8;\n    rbx = rax;\n    *((rsp + 0x6e)) = r10b;\n    *((rsp + 0x6f)) = bpl;\n    *((rsp + 0x40)) = r15;\n    *((rsp + 0x48)) = r14;\n    *((rsp + 0x30)) = r9;\n    *((rsp + 0x38)) = r11d;\n    while (*((rsp + 0x38)) != 2) {\nlabel_22:\n        eax = iswprint (*((rsp + 0x84)));\n        rdi = rsp + 0x88;\n        eax = 0;\n        if (eax == 0) {\n            r13d = eax;\n        }\n        rbx += r14;\n        eax = mbsinit (rdi);\n        if (eax != 0) {\n            goto label_76;\n        }\n        rax = *((rsp + 0x20));\n        r15 = r12 + rbx;\n        rbp = rax + r15;\n        rdx -= r15;\n        rax = fcn_00409760 (rsp + 0x84, rbp, *((rsp + 0x30)), rsp + 0x88);\n        r14 = rax;\n        if (rax == 0) {\n            goto label_76;\n        }\n        if (rax == -1) {\n            goto label_77;\n        }\n        if (rax == 0xfffffffffffffffe) {\n            goto label_78;\n        }\n    }\n    if (*((rsp + 0x6c)) == 0) {\n        goto label_22;\n    }\n    if (rax == 1) {\n        goto label_22;\n    }\n    rsi = *((rsp + 0x20));\n    rax = rsi + r15 + 1;\n    rsi += r14;\n    rsi += r15;\n    goto label_79;\nlabel_23:\n    rax++;\n    if (rsi == rax) {\n        goto label_22;\n    }\nlabel_79:\n    ecx = *(rax);\n    ecx -= 0x5b;\n    if (cl > 0x21) {\n        goto label_23;\n    }\n    edx = 1;\n    rdx <<= cl;\n    rcx = 0x20000002b;\n    if ((rdx & rcx) == 0) {\n        goto label_23;\n    }\n    r15 = *((rsp + 0x40));\n    r14 = *((rsp + 0x48));\n    r13d = 2;\n    r11 = *((rsp + 0x30));\n    goto label_12;\nlabel_70:\n    *((rsp + 0x10)) = al;\n    r13d = 0;\n    goto label_24;\nlabel_63:\n    rcx = rbx;\n    if (r14 <= rbx) {\n        goto label_25;\n    }\n    eax = r10d;\n    goto label_26;\nlabel_56:\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x27;\n    }\n    rax = rbx + 1;\n    if (r14 > rax) {\n        *((r15 + rbx + 1)) = 0x5c;\n    }\n    rax = rbx + 2;\n    if (r14 <= rax) {\n        goto label_80;\n    }\n    rdx = r14;\n    *((r15 + rbx + 2)) = 0x27;\n    r14 = *((rsp + 0x58));\n    goto label_27;\nlabel_69:\n    r12++;\n    goto label_28;\nlabel_68:\n    edx = *((rsp + 8));\n    r13d = 0;\nlabel_36:\n    rcx = rdi;\n    *((rsp + 0x30)) = r13b;\n    esi = 0;\n    r13d = *((rsp + 0x6c));\n    rcx += r12;\n    edi = *((rsp + 0x10));\n    r8 = *((rsp + 0x20));\n    while (dl != 0) {\n        al = (r11d == 2) ? 1 : 0;\n        if (r13b != 0) {\n            goto label_81;\n        }\n        esi = r10d;\n        esi ^= 1;\n        al &= sil;\n        if (al != 0) {\n            if (r14 > rbx) {\n                *((r15 + rbx)) = 0x27;\n            }\n            rsi = rbx + 1;\n            if (r14 > rsi) {\n                *((r15 + rbx + 1)) = 0x24;\n            }\n            rsi = rbx + 2;\n            if (r14 > rsi) {\n                *((r15 + rbx + 2)) = 0x27;\n            }\n            rbx += 3;\n            r10d = eax;\n        }\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x5c;\n        }\n        rax = rbx + 1;\n        if (r14 > rax) {\n            eax = ebp;\n            al >>= 6;\n            eax += 0x30;\n            *((r15 + rbx + 1)) = al;\n        }\n        rax = rbx + 2;\n        if (r14 > rax) {\n            eax = ebp;\n            al >>= 3;\n            eax &= 7;\n            eax += 0x30;\n            *((r15 + rbx + 2)) = al;\n        }\n        ebp &= 7;\n        r12++;\n        rbx += 3;\n        ebp += 0x30;\n        if (r12 >= rcx) {\n            goto label_82;\n        }\n        esi = edx;\nlabel_29:\n        if (r14 > rbx) {\n            *((r15 + rbx)) = bpl;\n        }\n        ebp = *((r8 + r12));\n        rbx++;\n    }\n    eax = esi;\n    eax ^= 1;\n    eax &= r10d;\n    if (dil != 0) {\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x5c;\n        }\n        rbx++;\n    }\n    r12++;\n    if (r12 < rcx) {\n        if (al == 0) {\n            goto label_83;\n        }\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x27;\n        }\n        rax = rbx + 1;\n        if (r14 > rax) {\n            *((r15 + rbx + 1)) = 0x27;\n        }\n        rbx += 2;\n        edi = 0;\n        r10d = 0;\n        goto label_29;\n    }\n    r13d = *((rsp + 0x30));\n    goto label_16;\nlabel_81:\n    r13d = r11d;\n    *((rsp + 8)) = al;\n    r11 = r9;\n    goto label_12;\nlabel_64:\n    rbx += 4;\n    r10d = eax;\n    r13d = 0;\n    goto label_11;\n    if (ebp != 0) {\n        goto label_30;\n    }\n    *((rsp + 8)) = 1;\n    do {\n        if (r14 != 0) {\n            goto label_84;\n        }\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 1;\n        r13d = 2;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x6c)) = 0;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40dc67;\n        goto label_21;\n        if (ebp != 0) {\n            goto label_85;\n        }\n        if (r14 == 0) {\n            goto label_86;\n        }\n        *(r15) = 0x22;\n        r10d = 0;\n        *((rsp + 0x1f)) = 1;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\nlabel_38:\n        *((rsp + 0x6c)) = 0;\n        ebx = 1;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40c3cc;\n        goto label_21;\n        if (r14 != 0) {\n            *((rsp + 8)) = r11;\n            rax = fcn_00405a10 (0x40c3dd, r13d);\n            *((rsp + 0xd8)) = rax;\n            rax = fcn_00405a10 (0x40dc67, r13d);\n            r11 = *((rsp + 8));\n            *((rsp + 0xe0)) = rax;\n        }\n        ebx = 0;\n        if (ebp == 0) {\n            goto label_87;\n        }\nlabel_41:\n        *((rsp + 0x10)) = r11;\n        rax = strlen (*((rsp + 0xe0)));\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        r11 = *((rsp + 0x10));\n        *((rsp + 0x28)) = rax;\n        rax = *((rsp + 0xe0));\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x50)) = rax;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 8)) = 1;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 0;\n        *((rsp + 8)) = 0;\n        *((rsp + 0x28)) = 0;\n        *((rsp + 0x50)) = 0;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        r13d = 5;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 1;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40c3cc;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 0;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 0;\n        *((rsp + 0x50)) = 0;\n        goto label_21;\n        *((rsp + 0x1f)) = 1;\n        r10d = 0;\n        ebx = 0;\n        r13d = 2;\n        *((rsp + 0x6d)) = 0;\n        *((rsp + 0x58)) = 0;\n        *((rsp + 0x6c)) = 1;\n        *((rsp + 8)) = 1;\n        *((rsp + 0x28)) = 1;\n        *((rsp + 0x50)) = 0x40dc67;\n        goto label_21;\n        eax = *((rsp + 0x10));\n        goto label_31;\n        eax = *((rsp + 0x10));\n        goto label_32;\n        eax = *((rsp + 0x10));\n        goto label_33;\n        edx = 0;\n        r13d = 0;\n        goto label_4;\n        goto label_34;\nlabel_66:\n        if (r14 > rbx) {\n            *((r15 + rbx)) = 0x30;\n        }\n        rax = rcx + 2;\n        if (r14 > rax) {\n            *((r15 + rcx + 2)) = 0x30;\n        }\n        rbx = rcx + 3;\n        goto label_35;\n        if (ebp != 0) {\n            goto label_88;\n        }\n        *((rsp + 8)) = 0;\n    } while (1);\nlabel_82:\n    r13d = *((rsp + 0x30));\n    goto label_1;\nlabel_59:\n    r12++;\n    eax = r10d;\n    r13d = 0;\n    goto label_16;\nlabel_83:\n    edi = 0;\n    goto label_29;\nlabel_76:\n    rdi = rbx;\n    edx = r13d;\n    ebp = *((rsp + 0x6f));\n    rbx = *((rsp + 0x70));\n    r10d = *((rsp + 0x6e));\n    r15 = *((rsp + 0x40));\n    edx ^= 1;\n    r14 = *((rsp + 0x48));\n    r9 = *((rsp + 0x30));\n    r11d = *((rsp + 0x38));\n    dl &= *((rsp + 8));\nlabel_40:\n    if (rdi > 1) {\n        goto label_36;\n    }\n    goto label_37;\nlabel_86:\n    *((rsp + 0x58)) = 0;\n    r10d = 0;\n    *((rsp + 0x1f)) = 1;\n    *((rsp + 0x6d)) = 0;\n    goto label_38;\nlabel_65:\n    eax = r13d;\n    r13d = 0;\n    goto label_11;\nlabel_75:\n    ebp = *((rsi + rax));\n    if (bpl > 0x3e) {\n        goto label_39;\n    }\n    rsi = 0x7000a38200000000;\n    if (((rsi >> rbp) & 1) >= 0) {\n        goto label_39;\n    }\n    if (*((rsp + 0x6c)) != 0) {\n        goto label_51;\n    }\n    if (r14 > rbx) {\n        *((r15 + rbx)) = 0x3f;\n    }\n    rdx = rbx + 1;\n    if (r14 > rdx) {\n        *((r15 + rbx + 1)) = 0x22;\n    }\n    rdx = rbx + 2;\n    if (r14 > rdx) {\n        *((r15 + rbx + 2)) = 0x22;\n    }\n    rdx = rbx + 3;\n    if (r14 > rdx) {\n        *((r15 + rbx + 3)) = 0x3f;\n    }\n    rbx += 4;\n    edx = 0;\n    r13d = 0;\n    r12 = rax;\n    goto label_35;\nlabel_77:\n    rdi = rbx;\n    ebp = *((rsp + 0x6f));\n    rbx = *((rsp + 0x70));\n    r13d = 0;\n    r10d = *((rsp + 0x6e));\n    r15 = *((rsp + 0x40));\n    r14 = *((rsp + 0x48));\n    r9 = *((rsp + 0x30));\n    r11d = *((rsp + 0x38));\n    edx = *((rsp + 8));\n    goto label_40;\nlabel_78:\n    r9 = *((rsp + 0x30));\n    rsi = r15;\n    rcx = rbp;\n    rax = rbx;\n    rdi = rbx;\n    r8 = *((rsp + 0x78));\n    r10d = *((rsp + 0x6e));\n    ebp = *((rsp + 0x6f));\n    rbx = *((rsp + 0x70));\n    r15 = *((rsp + 0x40));\n    r14 = *((rsp + 0x48));\n    r11d = *((rsp + 0x38));\n    if (rsi >= r9) {\n        goto label_89;\n    }\n    if (*(rcx) != 0) {\n        goto label_90;\n    }\n    goto label_89;\n    do {\n        if (*((r8 + rax)) == 0) {\n            goto label_91;\n        }\nlabel_90:\n        rax++;\n        rdx = r12 + rax;\n    } while (rdx < r9);\nlabel_91:\n    rdi = rax;\nlabel_89:\n    edx = *((rsp + 8));\n    r13d = 0;\n    goto label_40;\nlabel_87:\n    rax = *((rsp + 0xd8));\n    eax = *(rax);\n    if (al == 0) {\n        goto label_41;\n    }\n    rdx = *((rsp + 0xd8));\n    do {\n        if (r14 > rbx) {\n            *((r15 + rbx)) = al;\n        }\n        rbx++;\n        eax = *((rdx + rbx));\n    } while (al != 0);\n    goto label_41;\nlabel_61:\n    r13d = r11d;\n    eax = 0;\n    r11 = r9;\n    goto label_42;\nlabel_85:\n    *((rsp + 0x1f)) = 1;\n    r10d = 0;\n    ebx = 0;\n    *((rsp + 0x6d)) = 0;\n    *((rsp + 0x58)) = 0;\n    *((rsp + 0x6c)) = 1;\n    *((rsp + 8)) = 1;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x50)) = 0x40c3cc;\n    goto label_21;\nlabel_51:\n    r13d = r11d;\n    r11 = r9;\n    goto label_43;\nlabel_72:\n    edx = eax;\nlabel_45:\n    rax = *((rsp + 0x50));\n    if (rax == 0) {\n        goto label_92;\n    }\n    if (dl == 0) {\n        goto label_92;\n    }\n    edx = *(rax);\n    if (dl == 0) {\n        goto label_92;\n    }\n    rax -= rbx;\n    do {\n        if (r14 > rbx) {\n            *((r15 + rbx)) = dl;\n        }\n        rbx++;\n        edx = *((rax + rbx));\n    } while (dl != 0);\nlabel_92:\n    if (r14 <= rbx) {\n        goto label_44;\n    }\n    *((r15 + rbx)) = 0;\n    goto label_44;\nlabel_55:\n    r13d = r11d;\n    r11 = r9;\n    goto label_12;\nlabel_62:\n    r13d = r11d;\n    r11 = r9;\n    rsp + 8 = (r13d == 2) ? 1 : 0;\n    goto label_12;\nlabel_73:\n    rax = fcn_00405b10 (r15, *((rsp + 0x78)), *((rsp + 0x40)), r11, 5, *((rsp + 0x88)));\n    goto label_5;\n    rbx = rax;\n    goto label_44;\nlabel_74:\n    edx = *((rsp + 0x6d));\n    goto label_45;\nlabel_71:\n    r13d = 2;\n    goto label_12;\nlabel_84:\n    r10d = 0;\n    eax = 0;\n    *((rsp + 0x1f)) = 1;\n    *((rsp + 0x58)) = 0;\n    goto label_46;\nlabel_80:\n    rdx = r14;\n    r14 = *((rsp + 0x58));\n    goto label_27;\nlabel_88:\n    *((rsp + 0x1f)) = 1;\n    r10d = 0;\n    ebx = 0;\n    *((rsp + 0x6d)) = 0;\n    *((rsp + 0x58)) = 0;\n    *((rsp + 0x6c)) = 1;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x28)) = 1;\n    *((rsp + 0x50)) = 0x40dc67;\n    goto label_21;\nlabel_60:\n    r13d = 0;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00406d40",
            "funcStartAddr": "0x406d40",
            "funcEndAddr": "0x40c0d9",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x406d40 */\n#include <stdint.h>\n \nuint64_t fcn_00406d40 (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_8h;\n    int64_t var_30h;\n    int64_t var_18h;\n    int64_t var_24h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    do {\n        abort ();\n        r15 = (int64_t) edi;\n        r14 = rdx;\n        *((rsp + 8)) = rsi;\n        rax = errno_location ();\n        rbx = *(0x006102d8);\n        r13 = rax;\n        eax = *(rax);\n        *((rsp + 0x18)) = eax;\n    } while (r15d < 0);\n    if (*(0x006102f0) > r15d) {\n        goto label_0;\n    }\n    if (r15d == 0x7fffffff) {\n        goto label_1;\n    }\n    r12d = r15 + 1;\n    rsi = (int64_t) r12d;\n    rsi <<= 4;\n    if (rbx == 0x6102e0) {\n        goto label_2;\n    }\n    rax = fcn_00407bb0 (rbx, rsi);\n    *(0x006102d8) = rax;\n    rbx = rax;\n    do {\n        rdi = *(0x006102f0);\n        edx -= edi;\n        rdi <<= 4;\n        rdx = (int64_t) edx;\n        rdi += rbx;\n        rdx <<= 4;\n        memset (rdi, 0, r12d);\n        *(0x006102f0) = r12d;\nlabel_0:\n        eax = *((rbp + 4));\n        r15 <<= 4;\n        rbx += r15;\n        r15 = rbp + 8;\n        eax |= 1;\n        r11 = *(rbx);\n        r12 = *((rbx + 8));\n        *((rsp + 0x24)) = eax;\n        rsi = r11;\n        *((rsp + 0x30)) = r11;\n        rax = fcn_00405b10 (r12, rsi, *((rsp + 0x28)), r14, *(rbp), eax);\n        r11 = *((rsp + 0x10));\n        if (r11 <= rax) {\n            rsi = rax + 1;\n            *(rbx) = rsi;\n            if (r12 != 0x6103e0) {\n                *((rsp + 0x10)) = rsi;\n                free (r12);\n                rsi = *((rsp + 0x10));\n            }\n            *((rsp + 0x10)) = rsi;\n            rax = fcn_00407b50 (*((rsp + 0x10)));\n            *((rbx + 8)) = rax;\n            rdi = rax;\n            r12 = rax;\n            fcn_00405b10 (rdi, *((rsp + 0x30)), *((rsp + 0x28)), r14, *(rbp), *((rsp + 0x3c)));\n        }\n        eax = *((rsp + 0x18));\n        *(r13) = eax;\n        rax = r12;\n        return rax;\nlabel_2:\n        rax = fcn_00407bb0 (0, rsi);\n        __asm (\"movdqa xmm0, xmmword [0x006102e0]\");\n        rbx = rax;\n        *(0x006102d8) = rax;\n        __asm (\"movups xmmword [rax], xmm0\");\n    } while (1);\nlabel_1:\n    return fcn_00407da0 ();\n}\n"
        },
        {
            "funcName": "fcn_00407260",
            "funcStartAddr": "0x407260",
            "funcEndAddr": "0x40c9de",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407260 */\n#include <stdint.h>\n \nint64_t fcn_00407260 (uint32_t arg2, int64_t arg3) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rsi = arg2;\n    rdx = arg3;\n    do {\n        abort ();\n    } while (esi == 0xa);\n    rax = rdx;\n    *(rsp) = esi;\n    *((rsp + 4)) = 0;\n    *((rsp + 8)) = 0;\n    *((rsp + 0x10)) = 0;\n    *((rsp + 0x18)) = 0;\n    *((rsp + 0x20)) = 0;\n    *((rsp + 0x28)) = 0;\n    *((rsp + 0x30)) = 0;\n    fcn_00406d40 (rdi, rax, 0xffffffffffffffff, rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004073e0",
            "funcStartAddr": "0x4073e0",
            "funcEndAddr": "0x407471",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4073e0 */\n#include <stdint.h>\n \nint64_t fcn_004073e0 (int64_t arg1, int64_t arg7, int64_t arg8, int64_t arg9) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdi = arg1;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    do {\n        rax = imp.__libc_start_main;\n        ecx = edx;\n        __asm (\"movdqa xmm0, xmmword [0x006104e0]\");\n        __asm (\"movdqa xmm1, xmmword [0x006104f0]\");\n        __asm (\"movdqa xmm2, xmmword [0x00610500]\");\n        ecx &= 0x1f;\n        *((rsp + 0x30)) = rax;\n        eax = edx;\n        al >>= 5;\n        *(rsp) = xmm0;\n        eax = (int32_t) al;\n        *((rsp + 0x10)) = xmm1;\n        r8 = rsp + rax*4 + 8;\n        *((rsp + 0x20)) = xmm2;\n        edx = *(r8);\n        eax = *(r8);\n        eax >>= cl;\n        eax = ~eax;\n        eax &= 1;\n        eax <<= cl;\n        eax ^= edx;\n        *(r8) = eax;\n        fcn_00406d40 (0, rdi, rsi, rsp);\n        return rax;\n        edx = 0x3a;\n        rsi = 0xffffffffffffffff;\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00407570",
            "funcStartAddr": "0x407570",
            "funcEndAddr": "0x407581",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407570 */\n#include <stdint.h>\n \nvoid fcn_00407570 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    ecx = 0x6102a0;\n    rdx = 0xffffffffffffffff;\n    return void (*0x406d40)() ();\n}\n"
        },
        {
            "funcName": "fcn_00407590",
            "funcStartAddr": "0x407590",
            "funcEndAddr": "0x4075a6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407590 */\n#include <stdint.h>\n \nvoid fcn_00407590 (int64_t arg1) {\n    rdi = arg1;\n    rsi = rdi;\n    ecx = 0x6102a0;\n    rdx = 0xffffffffffffffff;\n    edi = 0;\n    return void (*0x406d40)() ();\n}\n"
        },
        {
            "funcName": "fcn_004075b0",
            "funcStartAddr": "0x4075b0",
            "funcEndAddr": "0x40d3e4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4075b0 */\n#include <stdint.h>\n \nvoid fcn_004075b0 (int64_t arg_20h, int64_t arg_30h, int64_t arg_8h_2, int64_t arg_10h, int64_t arg_8h, int64_t arg_8h_3, int64_t arg_10h_2, int64_t arg_18h, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    eax = abort ();\n    r12 = r9;\n    rbx = r8;\n    if (rsi == 0) {\n        goto label_0;\n    }\n    r9 = rcx;\n    r8 = rdx;\n    rcx = rsi;\n    edx = \"%s (%s) %s\\n\";\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    do {\n        edx = 5;\n        rax = dcgettext (0, 0x40d12b);\n        r8d = 0x7e1;\n        edx = \"Copyright %s %d Free Software Foundation, Inc.\";\n        rdi = rbp;\n        rcx = rax;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\");\n        rsi = rbp;\n        rdi = rax;\n        eax = fputs_unlocked ();\n        if (r12 > 9) {\n            goto label_1;\n        }\n        /* switch table (10 cases) at 0x40d418 */\nlabel_0:\n        r8 = rcx;\n        esi = 1;\n        rcx = rdx;\n        eax = 0;\n        edx = \"%s %s\\n\";\n        fprintf_chk ();\n    } while (1);\n    r9 = *((rbx + 0x38));\n    rax = *((rbx + 0x10));\n    edx = 5;\n    r8 = *((rbx + 8));\n    r13 = *((rbx + 0x30));\n    r12 = *((rbx + 0x28));\n    r15 = *((rbx + 0x20));\n    *((rsp + 0x10)) = r9;\n    r14 = *((rbx + 0x18));\n    rbx = *(rbx);\n    *(rsp) = rax;\n    *((rsp + 8)) = r8;\n    dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n    r10 = *((rbx + 0x40));\n    r9 = *((rbx + 0x38));\n    edx = 5;\n    esi = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\";\n    rax = *((rbx + 0x10));\n    r8 = *((rbx + 8));\n    r13 = *((rbx + 0x30));\n    r12 = *((rbx + 0x28));\n    *((rsp + 0x18)) = r10;\n    r15 = *((rbx + 0x20));\n    r14 = *((rbx + 0x18));\n    *((rsp + 0x10)) = r9;\n    *(rsp) = rax;\n    rbx = *(rbx);\n    *((rsp + 8)) = r8;\n    al &= 8;\n    rbx = *(rbx);\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s.\\n\");\n    rdi = rbp;\n    esi = 1;\n    rcx = rbx;\n    rdx = rax;\n    eax = 0;\n    void (*0x401ae0)() ();\n    r12 = *((rbx + 8));\n    edx = 5;\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s and %s.\\n\");\n    r8 = r12;\n    rcx = rbx;\n    rdx = rax;\n    rdi = rbp;\n    esi = 1;\n    eax = 0;\n    void (*0x401ae0)() ();\n    r13 = *((rbx + 0x10));\n    r12 = *((rbx + 8));\n    edx = 5;\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s, %s, and %s.\\n\");\n    r9 = r13;\n    r8 = r12;\n    rcx = rbx;\n    rdx = rax;\n    rdi = rbp;\n    esi = 1;\n    eax = 0;\n    void (*0x401ae0)() ();\n    edx = 5;\n    r14 = *((rbx + 0x18));\n    r13 = *((rbx + 0x10));\n    r12 = *((rbx + 8));\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\nand %s.\\n\");\n    do {\n        rdx = rax;\n        r9 = r13;\n        r8 = r12;\n        rcx = rbx;\n        rdi = rbp;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        return;\n        r15 = *((rbx + 0x20));\n        edx = 5;\n        r14 = *((rbx + 0x18));\n        r13 = *((rbx + 0x10));\n        r12 = *((rbx + 8));\n        rbx = *(rbx);\n        dcgettext (0, \"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n    } while (1);\n    r8 = *((rbx + 8));\n    r12 = *((rbx + 0x28));\n    edx = 5;\n    r15 = *((rbx + 0x20));\n    r14 = *((rbx + 0x18));\n    *(rsp) = r8;\n    r13 = *((rbx + 0x10));\n    rbx = *(rbx);\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n    r9 = r13;\n    do {\n        r8 = *((rsp + 0x20));\n        rcx = rbx;\n        rdx = rax;\n        rdi = rbp;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        return;\n        r9 = *((rbx + 0x10));\n        r13 = *((rbx + 0x30));\n        edx = 5;\n        r12 = *((rbx + 0x28));\n        r15 = *((rbx + 0x20));\n        r14 = *((rbx + 0x18));\n        r8 = *((rbx + 8));\n        *((rsp + 8)) = r9;\n        rbx = *(rbx);\n        *(rsp) = r8;\n        dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n        r9 = *((rsp + 0x28));\n    } while (1);\nlabel_1:\n    r10 = *((rbx + 0x40));\n    r9 = *((rbx + 0x38));\n    edx = 5;\n    esi = \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\";\n    rax = *((rbx + 0x10));\n    r8 = *((rbx + 8));\n    r13 = *((rbx + 0x30));\n    r12 = *((rbx + 0x28));\n    *((rsp + 0x18)) = r10;\n    r15 = *((rbx + 0x20));\n    r14 = *((rbx + 0x18));\n    *((rsp + 0x10)) = r9;\n    *(rsp) = rax;\n    rbx = *(rbx);\n    *((rsp + 8)) = r8;\n    return void (*0x407730)() ();\n}\n"
        },
        {
            "funcName": "fcn_0040772e",
            "funcStartAddr": "0x40772e",
            "funcEndAddr": "0x4077c7",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x40772e */\n#include <stdint.h>\n \nint32_t fcn_0040772e (int64_t arg_30h, int64_t arg_38h, int64_t arg_18h_2, int64_t arg_18h) {\n    do {\n        r9 = *((rsp + 0x18));\n        rcx = rbx;\n        rdx = rax;\n        rdi = rbp;\n        esi = 1;\n        eax = 0;\n        r9 = *((rsp + 0x30));\n        r8 = *((rsp + 0x38));\n        al = fprintf_chk ();\n        return eax;\n        al &= 8;\n        dcgettext (0, rsi);\n        r10 = *((rsp + 0x18));\n    } while (1);\n}\n"
        },
        {
            "funcName": "fcn_00407a10",
            "funcStartAddr": "0x407a10",
            "funcEndAddr": "0x407acc",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407a10 */\n#include <stdint.h>\n \nuint64_t fcn_00407a10 (int64_t arg_b0h, int64_t arg5, int64_t arg6) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_70h;\n    int64_t var_90h;\n    int64_t var_98h;\n    r8 = arg5;\n    r9 = arg6;\n    r11d = 0;\n    rax = rsp + 0xb0;\n    *((rsp + 0x90)) = r8;\n    r10 = rsp + 0xb0;\n    r8d = 0x20;\n    *((rsp + 0x10)) = rax;\n    rax = rsp + 0x70;\n    *((rsp + 0x98)) = r9;\n    r9d = 0;\n    *((rsp + 8)) = 0x20;\n    *((rsp + 0x18)) = rax;\n    while (r8d <= 0x2f) {\n        eax = r8d;\n        r11 = rsp + 0x70;\n        r8d += 8;\n        rax += r11;\n        r11d = 1;\n        rax = *(rax);\n        *((rsp + r9*8 + 0x20)) = rax;\n        if (rax == 0) {\n            goto label_1;\n        }\nlabel_0:\n        r9++;\n        if (r9 == 0xa) {\n            goto label_1;\n        }\n    }\n    rax = r10;\n    r10 += 8;\n    rax = *(rax);\n    *((rsp + r9*8 + 0x20)) = rax;\n    if (rax != 0) {\n        goto label_0;\n    }\nlabel_1:\n    if (r11b != 0) {\n        *((rsp + 8)) = r8d;\n    }\n    fcn_004075b0 (rdi, rsi, rdx, rcx, rsp + 0x20, r9);\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00407b50",
            "funcStartAddr": "0x407b50",
            "funcEndAddr": "0x407b6a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407b50 */\n#include <stdint.h>\n \nuint64_t fcn_00407b50 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    rax = malloc (rdi);\n    if (rax == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return fcn_00407da0 ();\n}\n"
        },
        {
            "funcName": "fcn_00407bb0",
            "funcStartAddr": "0x407bb0",
            "funcEndAddr": "0x407be6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407bb0 */\n#include <stdint.h>\n \nuint64_t fcn_00407bb0 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = rsi;\n    if (rsi == 0) {\n        if (rdi != 0) {\n            goto label_0;\n        }\n    }\n    rax = realloc (rdi, rbx);\n    if (rax == 0) {\n        if (rbx != 0) {\n            goto label_1;\n        }\n    }\n    return rax;\nlabel_0:\n    eax = free (rdi);\n    eax = 0;\n    return rax;\nlabel_1:\n    return fcn_00407da0 ();\n}\n"
        },
        {
            "funcName": "fcn_00407d50",
            "funcStartAddr": "0x407d50",
            "funcEndAddr": "0x407d78",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407d50 */\n#include <stdint.h>\n \nuint64_t fcn_00407d50 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rdi = rsi;\n    rbx = rsi;\n    rax = fcn_00407b50 (rdi);\n    rdx = rbx;\n    rsi = rbp;\n    rdi = rax;\n    return memcpy ();\n}\n"
        },
        {
            "funcName": "fcn_00407d80",
            "funcStartAddr": "0x407d80",
            "funcEndAddr": "0x407d93",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407d80 */\n#include <stdint.h>\n \nvoid fcn_00407d80 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    strlen (rdi);\n    rdi = rbx;\n    rsi = rax + 1;\n    return void (*0x407d50)() ();\n}\n"
        },
        {
            "funcName": "fcn_00407da0",
            "funcStartAddr": "0x407da0",
            "funcEndAddr": "0x407dd1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407da0 */\n#include <stdint.h>\n \nuint64_t fcn_00407da0 (void) {\n    edx = 5;\n    rax = dcgettext (0, \"memory exhausted\");\n    rcx = rax;\n    eax = 0;\n    error (*(0x00610290), 0, 0x40c36d);\n    return abort ();\n}\n"
        },
        {
            "funcName": "fcn_00407de0",
            "funcStartAddr": "0x407de0",
            "funcEndAddr": "0x407df8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407de0 */\n#include <stdint.h>\n \nuint64_t fcn_00407de0 (int32_t n, const char * src) {\n    rsi = n;\n    rdi = src;\n    rax = strndup (rdi, rsi);\n    if (rax != 0) {\n        return rax;\n    }\n    return fcn_00407da0 ();\n}\n"
        },
        {
            "funcName": "fcn_00407e00",
            "funcStartAddr": "0x407e00",
            "funcEndAddr": "0x408542",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x407e00 */\n#include <stdint.h>\n \nuint64_t fcn_00407e00 (int64_t arg1, int64_t arg2, uint32_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_fh;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    *(rsp) = rcx;\n    if (edx > 0x24) {\n        goto label_22;\n    }\n    rbx = rsi;\n    rax = rsp + 0x18;\n    if (rsi == 0) {\n        rbx = rax;\n    }\n    r12 = rdi;\n    r14 = r8;\n    errno_location ();\n    *(rax) = 0;\n    r13 = rax;\n    rax = strtol (r12, rbx, ebp);\n    r15 = *(rbx);\n    if (r15 == r12) {\n        goto label_23;\n    }\n    eax = *(r13);\n    if (eax != 0) {\n        goto label_24;\n    }\n    r12d = 0;\nlabel_0:\n    if (r14 != 0) {\n        r13d = *(r15);\n        if (r13b != 0) {\n            goto label_25;\n        }\n    }\nlabel_4:\n    rax = *(rsp);\n    *(rax) = rbp;\n    do {\nlabel_1:\n        eax = r12d;\n        return rax;\nlabel_24:\n        r12d = 4;\n    } while (eax != 0x22);\n    r12d = 1;\n    goto label_0;\nlabel_23:\n    if (r14 == 0) {\n        goto label_26;\n    }\n    r13d = *(r15);\n    r12d = 4;\n    if (r13b == 0) {\n        goto label_1;\n    }\n    esi = (int32_t) r13b;\n    r12d = 0;\n    rax = strchr (r14, rsi);\n    if (rax == 0) {\n        goto label_26;\n    }\nlabel_3:\n    edx = r13 - 0x45;\n    while (((rax >> rdx) & 1) >= 0) {\nlabel_2:\n        esi = 1;\n        eax = 0x400;\nlabel_21:\n        r13d -= 0x42;\n        if (r13b > 0x35) {\n            goto label_27;\n        }\n        r13d = (int32_t) r13b;\n        /* switch table (54 cases) at 0x40d4f8 */\n        rax = 0x814400308945;\n        *((rsp + 0xf)) = dl;\n    }\n    rax = strchr (r14, 0x30);\n    if (rax == 0) {\n        goto label_2;\n    }\n    eax = *((r15 + 1));\n    if (al == 0x44) {\n        goto label_28;\n    }\n    if (al == 0x69) {\n        goto label_29;\n    }\n    edx = *((rsp + 0xf));\n    if (al == 0x42) {\n        goto label_28;\n    }\n    /* switch table (48 cases) at 0x40d6a8 */\nlabel_26:\n    r12d = 4;\n    goto label_1;\nlabel_25:\n    esi = (int32_t) r13b;\n    rax = strchr (r14, rsi);\n    if (rax != 0) {\n        goto label_3;\n    }\nlabel_27:\n    rax = *(rsp);\n    r12d |= 2;\n    *(rax) = rbp;\n    goto label_1;\n    rax = 0xffe0000000000000;\n    rsi = (int64_t) esi;\n    if (rbp < rax) {\n        goto label_30;\n    }\n    rax = 0x1fffffffffffff;\n    if (rbp > rax) {\n        goto label_31;\n    }\n    rbp <<= 0xa;\n    do {\nlabel_5:\n        rsi += r15;\n        eax = r12d;\n        eax |= 2;\n        *(rbx) = rsi;\n        if (*(rsi) != 0) {\n            r12d = eax;\n        }\n        goto label_4;\n        rax = 0xc000000000000000;\n        rsi = (int64_t) esi;\n        if (rbp < rax) {\n            goto label_30;\n        }\n        rax = 0x3fffffffffffffff;\n        if (rbp > rax) {\n            goto label_31;\n        }\n        rbp += rbp;\n    } while (1);\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\nlabel_18:\n    if (rbp < rax) {\n        goto label_30;\n    }\n    rdi = 0x7fffffffffffffff;\n    rax = rdi;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    do {\n        if (rax < rbp) {\n            goto label_31;\n        }\n        rbp *= rcx;\n        goto label_5;\n        rcx = (int64_t) eax;\n        rsi = (int64_t) esi;\n        rax = 0x8000000000000000;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        rdi = rax;\nlabel_17:\n        if (rbp < rdi) {\n            goto label_30;\n        }\n        r8 = 0x7fffffffffffffff;\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rbp > rax) {\n            goto label_31;\n        }\n        rbp *= rcx;\n    } while (rbp >= rdi);\n    do {\nlabel_30:\n        r12d = 1;\n        goto label_5;\n        rsi = (int64_t) esi;\nlabel_12:\n        rax = 0xffc0000000000000;\n    } while (rbp < rax);\n    rax = 0x3fffffffffffff;\n    if (rbp > rax) {\n        goto label_31;\n    }\n    rbp <<= 9;\n    goto label_5;\n    rsi = (int64_t) esi;\n    goto label_5;\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\nlabel_16:\n    edi = 5;\n    r10d = 0;\n    r8 = 0x7fffffffffffffff;\n    while (r9 <= rbp) {\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax < rbp) {\n            goto label_32;\n        }\n        rbp *= rcx;\nlabel_6:\n        edi--;\n        if (edi == 0) {\n            goto label_33;\n        }\n    }\n    r10d = 1;\n    goto label_6;\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\nlabel_15:\n    edi = 4;\n    r10d = 0;\n    r8 = 0x7fffffffffffffff;\n    while (r9 <= rbp) {\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax < rbp) {\n            goto label_34;\n        }\n        rbp *= rcx;\nlabel_7:\n        edi--;\n        if (edi == 0) {\n            goto label_33;\n        }\n    }\n    r10d = 1;\n    goto label_7;\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\nlabel_20:\n    edi = 6;\n    r10d = 0;\n    r8 = 0x7fffffffffffffff;\n    while (rbp >= r9) {\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax < rbp) {\n            goto label_35;\n        }\n        rbp *= rcx;\nlabel_8:\n        edi--;\n        if (edi == 0) {\n            goto label_33;\n        }\n    }\n    r10d = 1;\n    goto label_8;\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\nlabel_19:\n    edi = 3;\n    r10d = 0;\n    r8 = 0x7fffffffffffffff;\n    while (rbp >= r9) {\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax < rbp) {\n            goto label_36;\n        }\n        rbp *= rcx;\nlabel_9:\n        edi--;\n        if (edi == 0) {\n            goto label_33;\n        }\n    }\n    r10d = 1;\n    goto label_9;\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\nlabel_14:\n    edi = 8;\n    r10d = 0;\n    r8 = 0x7fffffffffffffff;\n    while (r9 <= rbp) {\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax < rbp) {\n            goto label_37;\n        }\n        rbp *= rcx;\nlabel_10:\n        edi--;\n        if (edi == 0) {\n            goto label_33;\n        }\n    }\n    r10d = 1;\n    goto label_10;\n    rcx = (int64_t) eax;\n    rsi = (int64_t) esi;\n    rax = 0x8000000000000000;\n    __asm (\"cqo\");\n    rax = rdx:rax / rcx;\n    rdx = rdx:rax % rcx;\n    r9 = rax;\nlabel_13:\n    edi = 7;\n    r10d = 0;\n    r8 = 0x7fffffffffffffff;\n    while (r9 <= rbp) {\n        rax = r8;\n        __asm (\"cqo\");\n        rax = rdx:rax / rcx;\n        rdx = rdx:rax % rcx;\n        if (rax < rbp) {\n            goto label_38;\n        }\n        rbp *= rcx;\nlabel_11:\n        edi--;\n        if (edi == 0) {\n            goto label_33;\n        }\n    }\n    r10d = 1;\n    goto label_11;\n    esi = 1;\n    goto label_12;\n    esi = 1;\n    ecx = 0x400;\n    r9 = 0xffe0000000000000;\n    goto label_13;\n    esi = 1;\n    ecx = 0x400;\n    r9 = 0xffe0000000000000;\n    goto label_14;\n    esi = 1;\n    ecx = 0x400;\n    r9 = 0xffe0000000000000;\n    goto label_15;\n    esi = 1;\n    ecx = 0x400;\n    r9 = 0xffe0000000000000;\n    goto label_16;\n    esi = 1;\n    ecx = 0x400;\n    rdi = 0xffe0000000000000;\n    goto label_17;\n    esi = 1;\n    ecx = 0x400;\n    rax = 0xffe0000000000000;\n    goto label_18;\n    esi = 1;\n    ecx = 0x400;\n    r9 = 0xffe0000000000000;\n    goto label_19;\n    esi = 1;\n    ecx = 0x400;\n    r9 = 0xffe0000000000000;\n    goto label_20;\n    esi = 1;\n    goto label_5;\nlabel_33:\n    r12d |= r10d;\n    goto label_5;\nlabel_31:\n    r12d = 1;\n    goto label_5;\nlabel_38:\n    r10d = 1;\n    goto label_11;\nlabel_32:\n    r10d = 1;\n    goto label_6;\nlabel_37:\n    r10d = 1;\n    goto label_10;\nlabel_36:\n    r10d = 1;\n    goto label_9;\nlabel_35:\n    r10d = 1;\n    goto label_8;\nlabel_34:\n    r10d = 1;\n    goto label_7;\nlabel_28:\n    esi = 2;\n    eax = 0x3e8;\n    goto label_21;\nlabel_29:\n    esi = 0;\n    eax = 0x400;\n    sil = (*((r15 + 2)) == 0x42) ? 1 : 0;\n    esi = rsi + rsi + 1;\n    goto label_21;\nlabel_22:\n    return assert_fail (\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60, \"xstrtol\");\n}\n"
        },
        {
            "funcName": "fcn_00408550",
            "funcStartAddr": "0x408550",
            "funcEndAddr": "0x408984",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x408550 */\n#include <stdint.h>\n \nuint64_t fcn_00408550 (int64_t arg1, int64_t arg2, uint32_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_8h;\n    int64_t var_18h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    if (edx > 0x24) {\n        goto label_13;\n    }\n    r15 = rsi;\n    rax = rsp + 0x18;\n    *(rsp) = edx;\n    r14 = rcx;\n    r13 = r8;\n    if (rsi == 0) {\n        r15 = rax;\n    }\n    errno_location ();\n    *(rax) = 0;\n    r12 = rax;\n    ebx = *(rbp);\n    rax = ctype_b_loc ();\n    edx = *(rsp);\n    rsi = *(rax);\n    rax = rbp;\n    while ((*((rsi + rcx*2 + 1)) & 0x20) != 0) {\n        rax++;\n        ebx = *(rax);\n        ecx = (int32_t) bl;\n    }\n    if (bl == 0x2d) {\n        goto label_1;\n    }\n    ecx = 0;\n    rsi = r15;\n    rdi = rbp;\n    rax = strtoul_internal ();\n    r8 = *(r15);\n    rbx = rax;\n    if (r8 == rbp) {\n        goto label_14;\n    }\n    eax = *(r12);\n    if (eax != 0) {\n        goto label_15;\n    }\n    ebp = 0;\n    do {\n        if (r13 != 0) {\n            r12d = *(r8);\n            if (r12b != 0) {\n                goto label_16;\n            }\n        }\nlabel_2:\n        *(r14) = rbx;\nlabel_0:\n        eax = ebp;\n        return rax;\nlabel_15:\n    } while (eax == 0x22);\n    do {\nlabel_1:\n        goto label_0;\nlabel_14:\n        *(rsp) = r8;\n    } while (r13 == 0);\n    r12d = *(rbp);\n    if (r12b == 0) {\n        goto label_1;\n    }\n    esi = (int32_t) r12b;\n    ebp = 0;\n    ebx = 1;\n    rax = strchr (r13, rsi);\n    r8 = *(rsp);\n    if (rax == 0) {\n        goto label_1;\n    }\nlabel_4:\n    edx = r12 - 0x45;\n    if (dl <= 0x2f) {\n        rax = 0x814400308945;\n        *(rsp) = dl;\n        if (((rax >> rdx) & 1) >= 0) {\n            goto label_17;\n        }\n        *((rsp + 8)) = r8;\n        rax = strchr (r13, 0x30);\n        r8 = *((rsp + 8));\n        if (rax == 0) {\n            goto label_17;\n        }\n        eax = *((r8 + 1));\n        if (al == 0x44) {\n            goto label_18;\n        }\n        if (al == 0x69) {\n            goto label_19;\n        }\n        edx = *(rsp);\n        if (al == 0x42) {\n            goto label_18;\n        }\n        /* switch table (67 cases) at 0x40d830 */\n    }\nlabel_17:\n    esi = 1;\n    edx = 0x400;\nlabel_7:\n    r12d -= 0x42;\n    if (r12b > 0x35) {\n        goto label_20;\n    }\n    r12d = (int32_t) r12b;\n    /* switch table (54 cases) at 0x40d9b0 */\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    rax = rbx;\n    rdx:rax = rax * rcx;\n    if (r12b overflow 0x35) {\n        goto label_5;\n    }\n    rdx:rax = rax * rcx;\n    if (r12b overflow 0x35) {\n        goto label_5;\n    }\n    rbx = rax;\n    do {\nlabel_3:\n        rsi = (int64_t) esi;\n        eax = ebp;\n        r8 += rsi;\n        eax |= 2;\n        *(r15) = r8;\n        if (*(r8) != 0) {\n        }\n        goto label_2;\n        esi = 1;\n        edx = 0x400;\n        rax = rbx;\n        rdx:rax = rax * rdx;\n        rbx = rax;\n    } while (*(r8) !overflow 0);\nlabel_5:\n    rbx |= 0xffffffffffffffff;\n    goto label_3;\nlabel_16:\n    esi = (int32_t) r12b;\n    *(rsp) = r8;\n    rax = strchr (r13, rsi);\n    r8 = *(rsp);\n    if (rax != 0) {\n        goto label_4;\n    }\nlabel_20:\n    *(r14) = rbx;\n    ebp |= 2;\n    goto label_0;\n    if (rbx < 0) {\n        goto label_5;\n    }\n    rbx += rbx;\n    goto label_3;\n    esi = 1;\n    rax = rbx;\n    rax >>= 0x37;\n    if (rax != 0) {\n        goto label_5;\n    }\n    rbx <<= 9;\n    goto label_3;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 7;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (rbx overflow 0) {\n            goto label_21;\n        }\nlabel_8:\n        edi--;\n    } while (edi != 0);\nlabel_6:\n    ebp |= r9d;\n    goto label_3;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 8;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (ebp overflow 0) {\n            goto label_22;\n        }\nlabel_11:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 4;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (edi overflow 0) {\n            goto label_23;\n        }\nlabel_9:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 5;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (edi overflow 0) {\n            goto label_24;\n        }\nlabel_12:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    edi = 6;\n    r9d = 0;\n    do {\n        rax = rbx;\n        rdx:rax = rax * rcx;\n        rbx = rax;\n        if (edi overflow 0) {\n            goto label_25;\n        }\nlabel_10:\n        edi--;\n    } while (edi != 0);\n    goto label_6;\n    esi = 1;\n    edx = 0x400;\n    rcx = (int64_t) edx;\n    rax = rbx;\n    rdx:rax = rax * rcx;\n    if (edi overflow 0) {\n        goto label_26;\n    }\n    rdx:rax = rax * rcx;\n    if (edi overflow 0) {\n        goto label_26;\n    }\n    rdx:rax = rax * rcx;\n    if (edi overflow 0) {\n        goto label_26;\n    }\n    rbx = rax;\n    eax = 0;\n    ebp |= eax;\n    goto label_3;\n    rax = rbx;\n    rax >>= 0x36;\n    if (rax != 0) {\n        goto label_5;\n    }\n    rbx <<= 0xa;\n    goto label_3;\n    esi = 1;\n    goto label_3;\nlabel_18:\n    esi = 2;\n    edx = 0x3e8;\n    goto label_7;\nlabel_19:\n    esi = 0;\n    edx = 0x400;\n    sil = (*((r8 + 2)) == 0x42) ? 1 : 0;\n    esi = rsi + rsi + 1;\n    goto label_7;\nlabel_21:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_8;\nlabel_26:\n    eax = 1;\n    rbx |= 0xffffffffffffffff;\n    ebp |= eax;\n    goto label_3;\nlabel_23:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_9;\nlabel_25:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_10;\nlabel_22:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_11;\nlabel_24:\n    r9d = 1;\n    rbx |= 0xffffffffffffffff;\n    goto label_12;\nlabel_13:\n    return assert_fail (\"0 <= strtol_base && strtol_base <= 36\", \"lib/xstrtol.c\", 0x60, \"xstrtoumax\");\n}\n"
        },
        {
            "funcName": "fcn_00408990",
            "funcStartAddr": "0x408990",
            "funcEndAddr": "0x408a6f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x408990 */\n#include <stdint.h>\n \nuint64_t fcn_00408990 (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    r11 = rdi + 8;\n    r12d = *((rsi + 0x2c));\n    ebp = *(rsi);\n    rbx = *((rsi + 0x30));\n    r9d = r12d;\n    r10d = ebp;\n    r8 = rbx;\nlabel_1:\n    if (r10d <= r8d) {\n        goto label_2;\n    }\nlabel_0:\n    if (r9d >= r8d) {\n        goto label_2;\n    }\n    r14d = r10d;\n    edx = r8d;\n    r14d -= r8d;\n    edx -= r9d;\n    if (r14d <= edx) {\n        goto label_3;\n    }\n    rcx = (int64_t) r9d;\n    r10d -= edx;\n    edx--;\n    rdx += rcx;\n    rax = rdi + rcx*8;\n    r13 = r11 + rdx*8;\n    rdx = (int64_t) r10d;\n    rdx -= rcx;\n    do {\n        rcx = *(rax);\n        r14 = *((rax + rdx*8));\n        *(rax) = r14;\n        *((rax + rdx*8)) = rcx;\n        rax += 8;\n    } while (r13 != rax);\n    if (r10d > r8d) {\n        goto label_0;\n    }\nlabel_2:\n    eax = ebp;\n    *((rsi + 0x30)) = ebp;\n    eax -= r8d;\n    r12d += eax;\n    *((rsi + 0x2c)) = r12d;\n    r12 = rbx;\n    r13 = rbx;\n    r14 = rbx;\n    r15 = rbx;\n    return rax;\nlabel_3:\n    rdx = (int64_t) r9d;\n    ecx = r14 - 1;\n    rcx += rdx;\n    rax = rdi + rdx*8;\n    r13 = r11 + rcx*8;\n    rcx = rbx;\n    rcx -= rdx;\n    rdx = rcx;\n    do {\n        rcx = *(rax);\n        r15 = *((rax + rdx*8));\n        *(rax) = r15;\n        *((rax + rdx*8)) = rcx;\n        rax += 8;\n    } while (rax != r13);\n    r9d += r14d;\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00408a70",
            "funcStartAddr": "0x408a70",
            "funcEndAddr": "0x40908c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x408a70 */\n#include <stdint.h>\n \nint64_t fcn_00408a70 (int64_t arg_90h, int64_t arg_98h, int64_t arg_a0h, signed int64_t arg1, int64_t arg2, char * arg3, int64_t arg4, int64_t arg5, int64_t arg6) {\n    int64_t var_ch;\n    int64_t var_10h;\n    void * ptr;\n    int64_t var_20h;\n    int64_t var_28h;\n    char * s;\n    int64_t var_38h;\n    int64_t c;\n    signed int64_t var_40h;\n    int64_t var_44h;\n    void * var_48h;\n    size_t nmeb;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    rax = *((rsp + 0x90));\n    *((rsp + 0x40)) = edi;\n    *((rsp + 0x28)) = rsi;\n    r14 = *((rax + 0x20));\n    *((rsp + 0x30)) = rdx;\n    *(rsp) = rcx;\n    eax = *(r14);\n    *((rsp + 0x20)) = r8;\n    *((rsp + 0xc)) = r9d;\n    *((rsp + 0x3f)) = al;\n    if (al == 0x3d) {\n        goto label_11;\n    }\n    if (al == 0) {\n        goto label_11;\n    }\n    do {\n        rbp++;\n        eax = *(rbp);\n        if (al == 0) {\n            goto label_12;\n        }\n    } while (al != 0x3d);\nlabel_12:\n    r13 = rbp;\n    r13 -= r14;\nlabel_6:\n    rbx = *(rsp);\n    r12d = 0;\n    rax = *(rbx);\n    *((rsp + 0x10)) = rax;\n    r15 = rax;\n    if (rax != 0) {\n        goto label_13;\n    }\n    goto label_14;\n    do {\n        r12 = (int64_t) r8d;\nlabel_13:\n        eax = strncmp (r15, r14, r13);\n        if (eax == 0) {\n            rax = strlen (r15);\n            if (rax == r13) {\n                goto label_15;\n            }\n        }\n        rbx += 0x20;\n        r15 = *(rbx);\n        r8d = r12 + 1;\n    } while (r15 != 0);\n    rcx = *(rsp);\n    *((rsp + 0x4c)) = r8d;\n    r9d = 0;\n    ebx = 0;\n    *((rsp + 0x44)) = 0xffffffff;\n    r15 = r9;\n    *((rsp + 0x38)) = 0;\n    *((rsp + 0x48)) = 0;\n    *((rsp + 0x18)) = 0;\n    *((rsp + 0x10)) = rbp;\n    do {\n        eax = strncmp (*((rsp + 0x10)), r14, r13);\n        if (eax == 0) {\n            if (rbx == 0) {\n                goto label_16;\n            }\n            eax = *((rsp + 0xc));\n            if (eax == 0) {\n                goto label_17;\n            }\nlabel_0:\n            r11d = *((rsp + 0x38));\n            if (r11d != 0) {\n                goto label_1;\n            }\n            r10d = *((rsp + 0x98));\n            if (r10d == 0) {\n                goto label_18;\n            }\n            if (*((rsp + 0x18)) == 0) {\n                goto label_19;\n            }\nlabel_3:\n            rax = *((rsp + 0x18));\n            *((rax + r15)) = 1;\n        }\nlabel_1:\n        rbp += 0x20;\n        rdi = *(rbp);\n        r15++;\n    } while (rdi != 0);\n    rbp = *((rsp + 0x10));\n    if (*((rsp + 0x18)) != 0) {\n        goto label_20;\n    }\n    r9d = *((rsp + 0x38));\n    if (r9d != 0) {\n        goto label_20;\n    }\n    if (rbx == 0) {\nlabel_14:\n        eax = *((rsp + 0xc));\n        if (eax != 0) {\n            rax = *((rsp + 0x90));\n            rcx = *((rsp + 0x28));\n            rax = *(rax);\n            rax = *((rcx + rax*8));\n            if (*((rax + 1)) == 0x2d) {\n                goto label_21;\n            }\n            esi = *((rsp + 0x3f));\n            rax = strchr (*((rsp + 0x30)), rsi);\n            rdx = rax;\n            eax = 0xffffffff;\n            if (rdx != 0) {\n                goto label_5;\n            }\n        }\nlabel_21:\n        ecx = *((rsp + 0x98));\n        if (ecx != 0) {\n            goto label_22;\n        }\nlabel_4:\n        rax = *((rsp + 0x90));\n        *((rax + 0x20)) = 0;\n        *(rax)++;\n        *((rax + 8)) = 0;\n        eax = 0x3f;\n        return rax;\n    }\n    r12d = *((rsp + 0x44));\nlabel_15:\n    rax = *((rsp + 0x90));\n    rcx = *((rsp + 0x90));\n    edx = *(rax);\n    *((rcx + 0x20)) = 0;\n    eax = rdx + 1;\n    *(rcx) = eax;\n    ecx = *((rbx + 8));\n    if (*(rbp) != 0) {\n        goto label_23;\n    }\n    if (ecx == 1) {\n        goto label_24;\n    }\nlabel_2:\n    rax = *((rsp + 0x20));\n    if (rax != 0) {\n        *(rax) = r12d;\n    }\n    rdx = *((rbx + 0x10));\n    eax = *((rbx + 0x18));\n    if (rdx != 0) {\n        *(rdx) = eax;\n        eax = 0;\n    }\nlabel_5:\n    return rax;\nlabel_17:\n    eax = *((rbp + 8));\n    if (*((rbx + 8)) != eax) {\n        goto label_0;\n    }\n    rax = *((rbp + 0x10));\n    if (*((rbx + 0x10)) != rax) {\n        goto label_0;\n    }\n    eax = *((rbp + 0x18));\n    if (*((rbx + 0x18)) != eax) {\n        goto label_0;\n    }\n    goto label_1;\nlabel_23:\n    if (ecx == 0) {\n        goto label_25;\n    }\n    rax = *((rsp + 0x90));\n    rbp++;\n    *((rax + 0x10)) = rbp;\n    goto label_2;\nlabel_16:\n    *((rsp + 0x44)) = r15d;\n    rbx = rbp;\n    goto label_1;\nlabel_18:\n    *((rsp + 0x38)) = 1;\n    if (*((rsp + 0x18)) == 0) {\n        goto label_1;\n    }\n    goto label_3;\nlabel_22:\n    rax = *((rsp + 0x28));\n    edx = 5;\n    rbx = *(rax);\n    rax = dcgettext (0, \"%s: unrecognized option '%s%s'\\n\");\n    r8 = *((rsp + 0xa0));\n    r9 = r14;\n    rdi = stderr;\n    rdx = rax;\n    rcx = rbx;\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    goto label_4;\nlabel_20:\n    r8d = *((rsp + 0x98));\n    if (r8d != 0) {\n        edi = *((rsp + 0x38));\n        if (edi == 0) {\n            goto label_26;\n        }\n        rax = *((rsp + 0x28));\n        edx = 5;\n        rbx = *(rax);\n        rax = dcgettext (0, \"%s: option '%s%s' is ambiguous\\n\");\n        r8 = *((rsp + 0xa0));\n        r9 = r14;\n        rdi = stderr;\n        rdx = rax;\n        rcx = rbx;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n        rax = *((rsp + 0x90));\n        r14 = *((rax + 0x20));\n    }\nlabel_9:\n    esi = *((rsp + 0x48));\n    if (esi != 0) {\n        goto label_27;\n    }\nlabel_7:\n    rax = strlen (r14);\n    r14 += rax;\n    rax = *((rsp + 0x90));\n    *((rax + 0x20)) = r14;\n    *(rax)++;\n    *((rax + 8)) = 0;\n    eax = 0x3f;\n    goto label_5;\nlabel_24:\n    if (eax >= *((rsp + 0x40))) {\n        goto label_28;\n    }\n    rcx = *((rsp + 0x90));\n    edx += 2;\n    rax = (int64_t) eax;\n    *(rcx) = edx;\n    rcx = *((rsp + 0x28));\n    rax = *((rcx + rax*8));\n    rcx = *((rsp + 0x90));\n    *((rcx + 0x10)) = rax;\n    goto label_2;\nlabel_11:\n    r13d = 0;\n    goto label_6;\nlabel_25:\n    edx = *((rsp + 0x98));\n    while (1) {\n        eax = *((rbx + 0x18));\n        rcx = *((rsp + 0x90));\n        *((rcx + 8)) = eax;\n        eax = 0x3f;\n        goto label_5;\nlabel_19:\n        rdi = *((rsp + 0x4c));\n        rax = calloc (rdi, 1);\n        *((rsp + 0x18)) = rax;\n        if (rax == 0) {\n            goto label_29;\n        }\n        rax = *((rsp + 0x44));\n        rcx = *((rsp + 0x18));\n        *((rsp + 0x48)) = 1;\n        *((rcx + rax)) = 1;\n        goto label_3;\n        rax = *((rsp + 0x28));\n        r12 = *(rbx);\n        edx = 5;\n        rbp = *(rax);\n        rax = dcgettext (0, \"%s: option '%s%s' doesn't allow an argument\\n\");\n        r8 = *((rsp + 0xa0));\n        r9 = r12;\n        rdi = stderr;\n        rdx = rax;\n        rcx = rbp;\n        esi = 1;\n        eax = 0;\n        fprintf_chk ();\n    }\nlabel_27:\n    free (*((rsp + 0x18)));\n    goto label_7;\nlabel_28:\n    eax = *((rsp + 0x98));\n    if (eax != 0) {\n        goto label_30;\n    }\nlabel_10:\n    eax = *((rbx + 0x18));\n    rcx = *((rsp + 0x90));\n    *((rcx + 8)) = eax;\n    rax = *((rsp + 0x30));\n    al = (*(rax) != 0x3a) ? 1 : 0;\n    eax = (int32_t) al;\n    eax = rax * 5;\n    goto label_5;\nlabel_26:\n    rdi = stderr;\n    flockfile ();\n    rax = *((rsp + 0x90));\n    edx = 5;\n    rbx = *((rax + 0x20));\n    rax = *((rsp + 0x28));\n    rbp = *(rax);\n    rax = dcgettext (0, \"%s: option '%s%s' is ambiguous; possibilities:\");\n    rdi = stderr;\n    r9 = rbx;\n    r8 = *((rsp + 0xa0));\n    rcx = rbp;\n    rdx = rax;\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    rax = *((rsp + 0x18));\n    rdi = stderr;\n    rbx = *(rsp);\n    r12 = rax + r12 + 1;\n    while (*(rbp) == 0) {\nlabel_8:\n        rbp++;\n        rbx += 0x20;\n        if (r12 == rbp) {\n            goto label_31;\n        }\n    }\n    r8 = *(rbx);\n    edx = \" '%s%s';\n    esi = 1;\n    eax = 0;\n    rcx = *((rsp + 0xa0));\n    fprintf_chk ();\n    rdi = stderr;\n    goto label_8;\nlabel_31:\n    fputc (0xa, rdi);\n    rdi = stderr;\n    funlockfile ();\n    rax = *((rsp + 0x90));\n    r14 = *((rax + 0x20));\n    goto label_9;\nlabel_30:\n    rax = *((rsp + 0x28));\n    r12 = *(rbx);\n    edx = 5;\n    rbp = *(rax);\n    rax = dcgettext (0, \"%s: option '%s%s' requires an argument\\n\");\n    r8 = *((rsp + 0xa0));\n    r9 = r12;\n    rdi = stderr;\n    rdx = rax;\n    rcx = rbp;\n    esi = 1;\n    eax = 0;\n    fprintf_chk ();\n    goto label_10;\nlabel_29:\n    *((rsp + 0x38)) = 1;\n    goto label_1;\n}\n"
        },
        {
            "funcName": "fcn_00409090",
            "funcStartAddr": "0x409090",
            "funcEndAddr": "0x409656",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409090 */\n#include <stdint.h>\n \nuint64_t fcn_00409090 (int64_t arg_70h, int64_t arg_78h, int64_t arg1, int64_t arg2, int64_t arg3, uint32_t arg4, int64_t arg5, int64_t arg6) {\n    uint32_t var_8h;\n    int64_t var_10h;\n    int64_t var_1ch;\n    int64_t var_20h;\n    int64_t var_28h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    rbx = *((rsp + 0x70));\n    *((rsp + 8)) = rcx;\n    *((rsp + 0x10)) = r8;\n    r13d = *((rbx + 4));\n    if (edi <= 0) {\n        goto label_16;\n    }\n    eax = *(rbx);\n    r12 = rsi;\n    r15 = rdx;\n    *((rbx + 0x10)) = 0;\n    if (eax == 0) {\n        goto label_17;\n    }\n    esi = *((rbx + 0x18));\n    if (esi == 0) {\nlabel_1:\n        *((rbx + 0x30)) = eax;\n        *((rbx + 0x2c)) = eax;\n        *((rbx + 0x20)) = 0;\n        eax = *(r15);\n        if (al == 0x2d) {\n            goto label_18;\n        }\n        if (al == 0x2b) {\n            goto label_19;\n        }\n        ecx = *((rsp + 0x78));\n        edx = 0;\n        if (ecx == 0) {\n            goto label_20;\n        }\nlabel_8:\n        *((rbx + 0x28)) = 0;\n        goto label_11;\n    }\n    eax = *(rdx);\n    rdx = *((rbx + 0x20));\n    ecx = rax - 0x2b;\n    ecx &= 0xfd;\n    if (ecx != 0) {\n        goto label_21;\n    }\n    eax = *((r15 + 1));\n    r15++;\n    eax = 0;\n    if (al == 0x3a) {\n        r13d = eax;\n    }\n    if (rdx != 0) {\n        goto label_22;\n    }\n    do {\nlabel_0:\n        eax = *(rbx);\n        if (*((rbx + 0x30)) > eax) {\n            *((rbx + 0x30)) = eax;\n        }\n        if (eax < *((rbx + 0x2c))) {\n            *((rbx + 0x2c)) = eax;\n        }\n        if (*((rbx + 0x28)) == 1) {\n            goto label_23;\n        }\nlabel_4:\n        if (ebp == eax) {\n            goto label_24;\n        }\n        rdx = (int64_t) eax;\n        ecx = 3;\n        edi = 0x40dc79;\n        r14 = *((r12 + rdx*8));\n        rsi = *((r12 + rdx*8));\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        cl = (ebp > eax) ? 1 : 0;\n        if (cl != 0) {\n            goto label_25;\n        }\n        edx = *((rbx + 0x2c));\n        ecx = *((rbx + 0x30));\n        eax++;\n        *(rbx) = eax;\n        if (edx == ecx) {\n            goto label_26;\n        }\n        if (eax != ecx) {\n            fcn_00408990 (r12, rbx);\n            edx = *((rbx + 0x2c));\n        }\nlabel_12:\n        *((rbx + 0x30)) = ebp;\n        *(rbx) = ebp;\n        goto label_27;\nlabel_18:\n        *((rbx + 0x28)) = 2;\n        r15++;\n        edx = 0;\nlabel_11:\n        *((rbx + 0x18)) = 1;\n        eax = *(r15);\nlabel_21:\n        eax = 0;\n        if (al == 0x3a) {\n            r13d = eax;\n        }\n    } while (rdx == 0);\nlabel_22:\n    if (*(rdx) == 0) {\n        goto label_0;\n    }\nlabel_6:\n    r8 = rdx + 1;\n    *((rsp + 0x20)) = rdx;\n    *((rbx + 0x20)) = r8;\n    r14d = *(rdx);\n    *((rsp + 0x28)) = r8;\n    *((rsp + 0x1c)) = r14b;\n    rax = strchr (r15, r14d);\n    rdx = *((rsp + 0x20));\n    ecx = *((rsp + 0x1c));\n    r8 = *((rsp + 0x28));\n    if (*((rdx + 1)) == 0) {\n        *(rbx)++;\n    }\n    ecx -= 0x3a;\n    if (cl <= 1) {\n        goto label_28;\n    }\n    if (rax == 0) {\n        goto label_28;\n    }\n    ecx = *((rax + 1));\n    if (*(rax) == 0x57) {\n        goto label_29;\n    }\nlabel_7:\n    if (cl == 0x3a) {\n        goto label_30;\n    }\n    do {\nlabel_2:\n        eax = r14d;\n        return rax;\nlabel_25:\n        if (*(r14) == 0x2d) {\n            goto label_31;\n        }\nlabel_5:\n        edx = *((rbx + 0x28));\n        if (edx == 0) {\n            goto label_16;\n        }\n        eax++;\n        *((rbx + 0x10)) = r14;\n        r14d = 1;\n        *(rbx) = eax;\n    } while (1);\nlabel_17:\n    *(rbx) = 1;\n    eax = 1;\n    goto label_1;\nlabel_24:\n    ebp = *((rbx + 0x30));\n    edx = *((rbx + 0x2c));\nlabel_27:\n    if (edx != ebp) {\n        *(rbx) = edx;\n    }\nlabel_16:\n    r14d = 0xffffffff;\n    goto label_2;\nlabel_23:\n    edx = *((rbx + 0x30));\n    if (*((rbx + 0x2c)) == edx) {\n        goto label_32;\n    }\n    if (eax != edx) {\n        *((rsp + 0x1c)) = r9d;\n        fcn_00408990 (r12, rbx);\n        edx = *(rbx);\n        r9d = *((rsp + 0x1c));\n    }\nlabel_9:\n    if (ebp <= edx) {\n        goto label_33;\n    }\n    rax = (int64_t) edx;\n    while (*(rcx) != 0x2d) {\nlabel_3:\n        edx = rsi + 1;\n        rax++;\n        *(rbx) = edx;\n        if (ebp <= eax) {\n            goto label_33;\n        }\n        rcx = *((r12 + rax*8));\n        esi = eax;\n        edx = eax;\n    }\n    if (*((rcx + 1)) == 0) {\n        goto label_3;\n    }\n    eax = *(rbx);\nlabel_10:\n    *((rbx + 0x30)) = edx;\n    goto label_4;\nlabel_31:\n    ecx = *((r14 + 1));\n    if (cl == 0) {\n        goto label_5;\n    }\n    if (*((rsp + 8)) == 0) {\n        goto label_34;\n    }\n    if (cl == 0x2d) {\n        goto label_35;\n    }\n    if (r9d == 0) {\n        goto label_34;\n    }\n    if (*((r14 + 2)) == 0) {\n        esi = (int32_t) cl;\n        *((rsp + 0x1c)) = r9d;\n        rax = strchr (r15, rsi);\n        r9d = *((rsp + 0x1c));\n        if (rax != 0) {\n            goto label_34;\n        }\n    }\n    rdx = r14 + 1;\n    *((rbx + 0x20)) = rdx;\n    eax = fcn_00408a70 (ebp, r12, r15, *((rsp + 0x28)), *((rsp + 0x30)), r9);\n    r14d = eax;\n    if (eax != 0xffffffff) {\n        goto label_2;\n    }\n    rax = *(rbx);\n    r14 = *((r12 + rax*8));\nlabel_34:\n    rdx = r14 + 1;\n    goto label_6;\nlabel_29:\n    if (*((rsp + 8)) == 0) {\n        goto label_7;\n    }\n    if (cl != 0x3b) {\n        goto label_7;\n    }\n    if (*((rdx + 1)) == 0) {\n        rax = *(rbx);\n        if (eax == ebp) {\n            goto label_36;\n        }\n        r8 = *((r12 + rax*8));\n    }\n    *((rbx + 0x20)) = r8;\n    *((rbx + 0x10)) = 0;\nlabel_14:\n    eax = fcn_00408a70 (ebp, r12, r15, *((rsp + 0x28)), *((rsp + 0x30)), 0);\n    r14d = eax;\n    goto label_2;\nlabel_20:\n    *((rsp + 0x1c)) = r9d;\n    rax = getenv (\"POSIXLY_CORRECT\");\n    r9d = *((rsp + 0x1c));\n    if (rax == 0) {\n        goto label_37;\n    }\n    rdx = *((rbx + 0x20));\n    goto label_8;\nlabel_30:\n    edx = *((rdx + 1));\n    if (*((rax + 2)) == 0x3a) {\n        goto label_38;\n    }\n    rax = *(rbx);\n    if (dl != 0) {\n        goto label_39;\n    }\n    if (ebp == eax) {\n        goto label_40;\n    }\n    edx = rax + 1;\n    rax = *((r12 + rax*8));\n    *(rbx) = edx;\n    *((rbx + 0x10)) = rax;\nlabel_13:\n    *((rbx + 0x20)) = 0;\n    goto label_2;\nlabel_32:\n    if (eax == edx) {\n        goto label_9;\n    }\n    *((rbx + 0x2c)) = eax;\n    edx = eax;\n    goto label_9;\nlabel_33:\n    eax = edx;\n    goto label_10;\nlabel_19:\n    *((rbx + 0x28)) = 0;\n    r15++;\n    edx = 0;\n    goto label_11;\nlabel_28:\n    while (1) {\n        *((rbx + 8)) = r14d;\n        r14d = 0x3f;\n        goto label_2;\nlabel_26:\n        *((rbx + 0x2c)) = eax;\n        edx = eax;\n        goto label_12;\nlabel_39:\n        eax++;\n        *((rbx + 0x10)) = r8;\n        *(rbx) = eax;\n        goto label_13;\n        rbp = *(r12);\n        edx = 5;\n        rax = dcgettext (0, \"%s: invalid option -- '%c'\\n\");\n        rdi = stderr;\n        r8d = r14d;\n        esi = 1;\n        rdx = rax;\n        rcx = rbp;\n        eax = 0;\n        fprintf_chk ();\n    }\nlabel_38:\n    if (dl != 0) {\n        *((rbx + 0x10)) = r8;\n        *(rbx)++;\n        goto label_13;\nlabel_37:\n        *((rbx + 0x28)) = 1;\n        rdx = *((rbx + 0x20));\n        goto label_11;\n    }\n    *((rbx + 0x10)) = 0;\n    goto label_13;\nlabel_40:\n    while (1) {\n        *((rbx + 8)) = r14d;\n        r14d = 0;\n        r14b = (*(r15) != 0x3a) ? 1 : 0;\n        r14d = r14 * 5;\n        goto label_13;\nlabel_35:\n        rdx = r14 + 2;\n        *((rbx + 0x20)) = rdx;\n        goto label_14;\nlabel_36:\n        if (r13d != 0) {\n            goto label_41;\n        }\nlabel_15:\n        *((rbx + 8)) = r14d;\n        r14d = 0;\n        r14b = (*(r15) != 0x3a) ? 1 : 0;\n        r14d = r14 * 5;\n        goto label_2;\n        rbp = *(r12);\n        edx = 5;\n        rax = dcgettext (0, \"%s: option requires an argument -- '%c'\\n\");\n        rdi = stderr;\n        r8d = r14d;\n        esi = 1;\n        rdx = rax;\n        rcx = rbp;\n        eax = 0;\n        fprintf_chk ();\n    }\nlabel_41:\n    rbp = *(r12);\n    edx = 5;\n    rax = dcgettext (0, \"%s: option requires an argument -- '%c'\\n\");\n    rdi = stderr;\n    r8d = r14d;\n    esi = 1;\n    rdx = rax;\n    rcx = rbp;\n    eax = 0;\n    fprintf_chk ();\n    goto label_15;\n}\n"
        },
        {
            "funcName": "fcn_00409660",
            "funcStartAddr": "0x409660",
            "funcEndAddr": "0x4096b6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409660 */\n#include <stdint.h>\n \nint32_t fcn_00409660 (int64_t arg_10h) {\n    eax = *(0x006102fc);\n    *(0x00610520) = eax;\n    eax = *(0x006102f8);\n    *(0x00610524) = eax;\n    eax = *((rsp + 0x10));\n    fcn_00409090 (rdi, rsi, rdx, rcx, r8, r9);\n    edx = imp.__libc_start_main;\n    *(0x006102fc) = edx;\n    rdx = imp.__libc_start_main;\n    *(0x00610570) = rdx;\n    edx = imp.__libc_start_main;\n    *(0x006102f4) = edx;\n    return eax;\n}\n"
        },
        {
            "funcName": "fcn_004096e0",
            "funcStartAddr": "0x4096e0",
            "funcEndAddr": "0x4096f3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4096e0 */\n#include <stdint.h>\n \nvoid fcn_004096e0 (void) {\n    r9d = 0;\n    fcn_00409660 (rdi);\n}\n"
        },
        {
            "funcName": "fcn_00409760",
            "funcStartAddr": "0x409760",
            "funcEndAddr": "0x4097da",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409760 */\n#include <stdint.h>\n \nuint64_t fcn_00409760 (wint_t arg1, int64_t arg2, size_t * arg3, mbstate_t * ps) {\n    int64_t var_ch;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = ps;\n    if (rsi == 0) {\n        goto label_1;\n    }\n    rbx = 0xfffffffffffffffe;\n    if (rdx == 0) {\n        goto label_0;\n    }\n    r12 = rdi;\n    while (1) {\n        rax = mbrtowc (r12, rbp, rdx, rcx);\n        rbx = rax;\n        if (rax > 0xfffffffffffffffd) {\n            goto label_2;\n        }\nlabel_0:\n        rax = rbx;\n        return rax;\nlabel_1:\n        edx = 1;\n        r12 = rsp + 0xc;\n    }\nlabel_2:\n    al = fcn_00409840 (0);\n    if (al != 0) {\n        goto label_0;\n    }\n    eax = *(rbp);\n    ebx = 1;\n    *(r12) = eax;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_004097e0",
            "funcStartAddr": "0x4097e0",
            "funcEndAddr": "0x40983d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4097e0 */\n#include <stdint.h>\n \nuint64_t fcn_004097e0 (int64_t arg1) {\n    rdi = arg1;\n    rax = fpending ();\n    ebx = *(rbp);\n    r12 = rax;\n    ebx &= 0x20;\n    eax = fcn_00409e10 (rbp);\n    if (ebx != 0) {\n        goto label_1;\n    }\n    if (eax == 0) {\n        goto label_0;\n    }\n    if (r12 != 0) {\n        goto label_2;\n    }\n    rax = errno_location ();\n    al = (*(rax) != 9) ? 1 : 0;\n    eax = (int32_t) al;\n    eax = -eax;\n    do {\nlabel_0:\n        return rax;\nlabel_1:\n        if (eax != 0) {\n            goto label_2;\n        }\n        errno_location ();\n        *(rax) = 0;\n        eax = 0xffffffff;\n    } while (1);\nlabel_2:\n    eax = 0xffffffff;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00409840",
            "funcStartAddr": "0x409840",
            "funcEndAddr": "0x40989e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409840 */\n#include <stdint.h>\n \nuint64_t fcn_00409840 (int32_t category) {\n    rdi = category;\n    rax = setlocale (rdi, 0);\n    rdx = rax;\n    eax = 1;\n    if (rdx != 0) {\n        ecx = 2;\n        edi = 0x40dc9c;\n        rsi = rdx;\n        __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n        cl = (rdx > 0) ? 1 : 0;\n        eax = 0;\n        if (cl != 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    edi = \"POSIX\";\n    ecx = 6;\n    rsi = rdx;\n    __asm (\"repe cmpsb byte [rsi], byte [rdi]\");\n    al = (cl > 0) ? 1 : 0;\n    al = (al != 0) ? 1 : 0;\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_004098a0",
            "funcStartAddr": "0x4098a0",
            "funcEndAddr": "0x409e02",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x4098a0 */\n#include <stdint.h>\n \nuint64_t fcn_004098a0 (void) {\n    uint32_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_60h;\n    rax = nl_langinfo (0xe);\n    r15 = imp.__libc_start_main;\n    rbx = rax;\n    eax = 0x40dc97;\n    if (rax == 0) {\n        rbx = rax;\n    }\n    if (r15 == 0) {\n        goto label_15;\n    }\nlabel_1:\n    ebp = *(r15);\n    if (bpl != 0) {\n        goto label_16;\n    }\n    goto label_17;\n    do {\nlabel_0:\n        strlen (r15);\n        rbp = r15 + rax + 1;\n        strlen (rbp);\n        r15 = rbp + rax + 1;\n        ebp = *(r15);\n        if (bpl == 0) {\n            goto label_17;\n        }\nlabel_16:\n        eax = strcmp (rbx, r15);\n        if (eax == 0) {\n            goto label_18;\n        }\n    } while (bpl != 0x2a);\n    if (*((r15 + 1)) != 0) {\n        goto label_0;\n    }\nlabel_18:\n    strlen (r15);\n    rbx = r15 + rax + 1;\nlabel_17:\n    eax = \"ASCII\";\n    if (*(rbx) == 0) {\n        rbx = rax;\n    }\n    rax = rbx;\n    return rax;\nlabel_15:\n    rax = getenv (\"CHARSETALIASDIR\");\n    r13 = rax;\n    if (rax == 0) {\n        goto label_19;\n    }\n    if (*(rax) == 0) {\n        goto label_19;\n    }\n    rax = strlen (rax);\n    r12 = rax;\n    r14 = rax;\n    if (rax != 0) {\n        goto label_20;\n    }\nlabel_13:\n    rax = malloc (0xe);\n    if (rax != 0) {\n        goto label_21;\n    }\n    do {\n        r15d = 0x40dc97;\nlabel_2:\n        *(0x00610558) = r15;\n        goto label_1;\nlabel_19:\n        r12d = 0x65;\n        r14d = 0x64;\n        r13d = \"/home/dongkwan/data/scripts/gnu_packages/coreutils/coreutils-8.29_gcc-8.2.0_x86_64_O2_debug/gogo/lib\";\nlabel_14:\n        rax = malloc (0x73);\n    } while (rax == 0);\n    memcpy (rbp, r13, r14);\n    *((rbp + r14)) = 0x2f;\n    do {\n        r12 += rbp;\n        rax = 0x2e74657372616863;\n        *(r12) = rax;\n        eax = 0x73;\n        *((r12 + 0xc)) = ax;\n        eax = 0;\n        *((r12 + 8)) = 0x61696c61;\n        eax = open (rbp, 0, rdx);\n        r12d = eax;\n        if (eax >= 0) {\n            goto label_22;\n        }\nlabel_6:\n        r15d = 0x40dc97;\nlabel_7:\n        free (rbp);\n        goto label_2;\nlabel_21:\n        eax = memcpy (rbp, r13, r14);\n    } while (1);\nlabel_22:\n    esi = 0x40a2eb;\n    edi = eax;\n    r15d = 0;\n    rax = fdopen ();\n    *((rsp + 8)) = 0;\n    r13 = rax;\n    if (rax == 0) {\n        goto label_23;\n    }\n    rax = rbx;\n    r12 = rsp + 0x60;\n    r14 = rsp + 0x20;\n    rbx = r13;\n    r13 = rax;\n    do {\nlabel_3:\n        rax = *((rbx + 8));\n        if (rax >= *((rbx + 0x10))) {\n            goto label_24;\n        }\nlabel_4:\n        rdx = rax + 1;\n        *((rbx + 8)) = rdx;\n        edi = *(rax);\nlabel_5:\n        eax = rdi - 9;\n    } while (eax <= 1);\n    if (edi == 0x20) {\n        goto label_3;\n    }\n    if (edi == 0x23) {\n        goto label_25;\n    }\n    eax = ungetc (rdi, rbx);\n    eax = 0;\n    rcx = r12;\n    rdx = r14;\n    eax = fscanf (rbx, \"%50s %50s\");\n    if (eax <= 1) {\n        goto label_12;\n    }\n    rcx = r14;\n    do {\n        edx = *(rcx);\n        rcx += 4;\n        eax = rdx - 0x1010101;\n        edx = ~edx;\n        eax &= edx;\n        eax &= 0x80808080;\n    } while (eax == 0);\n    edx = eax;\n    edx >>= 0x10;\n    if ((eax & 0x8080) == 0) {\n        eax = edx;\n    }\n    rdx = rcx + 2;\n    if ((eax & 0x8080) == 0) {\n        rcx = rdx;\n    }\n    edx = eax;\n    dl += al;\n    rdx = r12;\n    rcx -= 3;\n    rcx -= r14;\n    do {\n        esi = *(rdx);\n        rdx += 4;\n        eax = rsi - 0x1010101;\n        esi = ~esi;\n        eax &= esi;\n        eax &= 0x80808080;\n    } while (eax == 0);\n    esi = eax;\n    *((rsp + 0x10)) = rcx;\n    esi >>= 0x10;\n    if ((eax & 0x8080) == 0) {\n        eax = esi;\n    }\n    rsi = rdx + 2;\n    if ((eax & 0x8080) == 0) {\n        rdx = rsi;\n    }\n    esi = eax;\n    sil += al;\n    rdx -= 3;\n    rdx -= r12;\n    rax = rcx + rdx;\n    *((rsp + 0x18)) = rdx;\n    if (*((rsp + 8)) != 0) {\n        goto label_26;\n    }\n    rcx = rax + 2;\n    *((rsp + 8)) = rcx;\n    rax = malloc (rax + 3);\n    rcx = *((rsp + 0x10));\n    rdx = *((rsp + 0x18));\nlabel_9:\n    if (rax == 0) {\n        goto label_27;\n    }\n    rdi = *((rsp + 8));\n    rsi = 0xfffffffffffffffe;\n    rsi -= rcx;\n    rcx++;\n    rdi -= rdx;\n    rsi += rdi;\n    rsi += rax;\n    if (ecx >= 8) {\n        goto label_28;\n    }\n    if ((cl & 4) != 0) {\n        goto label_29;\n    }\n    if (ecx != 0) {\n        r9d = *(r14);\n        *(rsi) = r9b;\n        if ((cl & 2) != 0) {\n            goto label_30;\n        }\n    }\nlabel_10:\n    rdx++;\n    rcx = rax + rdi - 1;\n    if (edx >= 8) {\n        goto label_31;\n    }\n    if ((dl & 4) != 0) {\n        goto label_32;\n    }\n    if (edx != 0) {\n        esi = *(r12);\n        *(rcx) = sil;\n        if ((dl & 2) != 0) {\n            goto label_33;\n        }\n    }\nlabel_11:\n    r15 = rax;\n    rax = *((rbx + 8));\n    if (rax < *((rbx + 0x10))) {\n        goto label_4;\n    }\nlabel_24:\n    rdi = rbx;\n    eax = uflow ();\n    edi = eax;\n    if (eax != 0xffffffff) {\n        goto label_5;\n    }\nlabel_12:\n    rax = r13;\n    r13 = rbx;\n    rbx = rax;\n    fcn_00409e10 (rbx);\n    rax = *((rsp + 8));\n    if (rax == 0) {\n        goto label_6;\n    }\n    *((r15 + rax)) = 0;\n    goto label_7;\n    do {\n        rdx = rax + 1;\n        *((rbx + 8)) = rdx;\n        eax = *(rax);\n        edx = 1;\nlabel_8:\n        if (eax == 0xa) {\n            goto label_34;\n        }\n        if (dl == 0) {\n            goto label_34;\n        }\nlabel_25:\n        rax = *((rbx + 8));\n    } while (rax < *((rbx + 0x10)));\n    rdi = rbx;\n    eax = uflow ();\n    dl = (eax != 0xffffffff) ? 1 : 0;\n    goto label_8;\nlabel_26:\n    rax += *((rsp + 8));\n    rcx = rax + 2;\n    *((rsp + 8)) = rcx;\n    eax = realloc (r15, rax + 3);\n    rdx = *((rsp + 0x18));\n    rcx = *((rsp + 0x10));\n    goto label_9;\nlabel_28:\n    r9 = *(r14);\n    *(rsi) = r9;\n    r9d = ecx;\n    r10 = *((r14 + r9 - 8));\n    *((rsi + r9 - 8)) = r10;\n    r9 = rsi + 8;\n    r10 = r14;\n    r9 &= 0xfffffffffffffff8;\n    rsi -= r9;\n    ecx += esi;\n    r10 -= rsi;\n    ecx &= 0xfffffff8;\n    if (ecx < 8) {\n        goto label_10;\n    }\n    ecx &= 0xfffffff8;\n    esi = 0;\n    do {\n        r8d = esi;\n        esi += 8;\n        r11 = *((r10 + r8));\n        *((r9 + r8)) = r11;\n    } while (esi < ecx);\n    goto label_10;\nlabel_31:\n    rsi = *(r12);\n    r9 = r12;\n    *(rcx) = rsi;\n    esi = edx;\n    rdi = *((r12 + rsi - 8));\n    *((rcx + rsi - 8)) = rdi;\n    rdi = rcx + 8;\n    rdi &= 0xfffffffffffffff8;\n    rcx -= rdi;\n    edx += ecx;\n    r9 -= rcx;\n    edx &= 0xfffffff8;\n    if (edx < 8) {\n        goto label_11;\n    }\n    edx &= 0xfffffff8;\n    ecx = 0;\n    do {\n        esi = ecx;\n        ecx += 8;\n        r8 = *((r9 + rsi));\n        *((rdi + rsi)) = r8;\n    } while (ecx < edx);\n    goto label_11;\nlabel_34:\n    if (eax == 0xffffffff) {\n        goto label_12;\n    }\n    goto label_3;\nlabel_20:\n    if (*((r13 + rax - 1)) == 0x2f) {\n        rdi = rax + 0xe;\n        goto label_13;\nlabel_23:\n        close (r12d);\n        goto label_6;\nlabel_29:\n        r9d = *(r14);\n        *(rsi) = r9d;\n        r9d = *((r14 + rcx - 4));\n        *((rsi + rcx - 4)) = r9d;\n        goto label_10;\nlabel_32:\n        esi = *(r12);\n        *(rcx) = esi;\n        esi = *((r12 + rdx - 4));\n        *((rcx + rdx - 4)) = esi;\n        goto label_11;\nlabel_27:\n        rax = r13;\n        r13 = rbx;\n        r15d = 0x40dc97;\n        rbx = rax;\n        free (r15);\n        fcn_00409e10 (r13);\n        goto label_7;\nlabel_30:\n        r9d = *((r14 + rcx - 2));\n        *((rsi + rcx - 2)) = r9w;\n        goto label_10;\nlabel_33:\n        esi = edx;\n        edx = *((r12 + rsi - 2));\n        *((rcx + rsi - 2)) = dx;\n        goto label_11;\n    }\n    rdi = rax + 0xf;\n    r12++;\n    goto label_14;\n}\n"
        },
        {
            "funcName": "fcn_00409e10",
            "funcStartAddr": "0x409e10",
            "funcEndAddr": "0x409e8b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409e10 */\n#include <stdint.h>\n \nuint64_t fcn_00409e10 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    eax = fileno (rdi);\n    rdi = rbx;\n    if (eax < 0) {\n        goto label_1;\n    }\n    eax = freading ();\n    while (rax != -1) {\n        eax = fcn_00409e90 (rbx);\n        if (eax == 0) {\n            goto label_2;\n        }\n        rax = errno_location ();\n        r12d = *(rax);\n        fclose (rbx);\n        if (r12d != 0) {\n            goto label_3;\n        }\nlabel_0:\n        return rax;\n        eax = fileno (rbx);\n        esi = 0;\n        edx = 1;\n        edi = eax;\n        rax = lseek ();\n    }\nlabel_2:\n    rdi = rbx;\nlabel_1:\n    void (*0x401810)() ();\nlabel_3:\n    *(rbp) = r12d;\n    eax = 0xffffffff;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "fcn_00409e90",
            "funcStartAddr": "0x409e90",
            "funcEndAddr": "0x409ed0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409e90 */\n#include <stdint.h>\n \nuint32_t fcn_00409e90 (int64_t arg1) {\n    rdi = arg1;\n    rbx = rdi;\n    if (rdi != 0) {\n        eax = freading ();\n        if (eax == 0) {\n            goto label_0;\n        }\n        if ((*(rbx) & 0x100) != 0) {\n            goto label_1;\n        }\n    }\nlabel_0:\n    rdi = rbx;\n    void (*0x4019d0)() ();\nlabel_1:\n    fcn_00409ed0 (rbx, 0, 1);\n    rdi = rbx;\n    return fflush ();\n}\n"
        },
        {
            "funcName": "fcn_00409ed0",
            "funcStartAddr": "0x409ed0",
            "funcEndAddr": "0x409f27",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409ed0 */\n#include <stdint.h>\n \nint64_t fcn_00409ed0 (uint32_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rax = *((rdi + 8));\n    while (*((rdi + 0x28)) != rax) {\nlabel_0:\n        void (*0x401a90)() ();\n        rax = *((rdi + 0x20));\n    }\n    if (*((rdi + 0x48)) != 0) {\n        goto label_0;\n    }\n    r12d = edx;\n    rbx = rdi;\n    eax = fileno (rdi);\n    edx = r12d;\n    rsi = rbp;\n    edi = eax;\n    rax = lseek ();\n    if (rax != -1) {\n        *(rbx) &= 0xffffffef;\n        *((rbx + 0x90)) = rax;\n        eax = 0;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "fcn_00409fa0",
            "funcStartAddr": "0x409fa0",
            "funcEndAddr": "0x409fb8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409fa0 */\n#include <stdint.h>\n \nint64_t fcn_00409fa0 (void) {\n    rax = 0x610248;\n    edx = 0;\n    if (rax != 0) {\n        rdx = *(rax);\n    }\n    esi = 0;\n    return cxa_atexit ();\n}\n"
        },
        {
            "funcName": "fcn_00409fb8",
            "funcStartAddr": "0x409fb8",
            "funcEndAddr": "0x409fd8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* ../dataset/coreutils_strip_8.2/coreutils_strip-8.29_gcc-8.2.0_x86_64_O2_numfmt.elf @ 0x409fb8 */\n#include <stdint.h>\n \nvoid fcn_00409fb8 (int64_t arg3) {\n    rdx = arg3;\n    ebx = segment.GNU_RELRO;\n    do {\n        rax = *(rbx);\n        if (rax == -1) {\n            goto label_0;\n        }\n        void (*rax)() ();\n        rbx -= 8;\n    } while (1);\nlabel_0:\n}\n"
        }
    ],
    "funcCount": 50
}