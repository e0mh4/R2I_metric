{
    "binaryInfo": {
        "isStripped": true,
        "binaryName": "nproc-amd64-clang-sub_O2"
    },
    "buildInfo": {
        "decompilerName": "radare2",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "optLevel": "O"
    },
    "funcInfo": [
        {
            "funcName": "dl_relocate_static_pie",
            "funcStartAddr": "0x402350",
            "funcEndAddr": "0x402355",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402350 */\n#include <stdint.h>\n \nvoid dl_relocate_static_pie (void) {\n}\n"
        },
        {
            "funcName": "dbg_usage",
            "funcStartAddr": "0x402410",
            "funcEndAddr": "0x4025cb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402410 */\n#include <stdint.h>\n \nuint64_t dbg_usage (int64_t arg1, char const * lc_messages) {\n    int32_t status;\n    rdi = arg1;\n    rax = lc_messages;\n    /* void usage(int status); */\n    if (ebp == 0) {\n        edx = 5;\n        rax = dcgettext (0, \"Usage: %s [OPTION]...\\n\");\n        rcx = rax;\n        rdx = program_name;\n        edi = 1;\n        eax = 0;\n        rsi = rcx;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"Print the number of processing units available to the current process,\\nwhich may be less than the number of online processors\\n\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"      --all      print the number of installed processors\\n      --ignore=N  if possible, exclude N processing units\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"      --help     display this help and exit\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"      --version  output version information and exit\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"\\n%s online help: <%s>\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"GNU coreutils\";\n        ecx = \"https://www.gnu.org/software/coreutils/\";\n        eax = 0;\n        printf_chk ();\n        rax = setlocale (5, 0);\n        if (rax != 0) {\n            eax = strncmp (rax, 0x407266, 3);\n            if (eax == 0) {\n                goto label_0;\n            }\n            edx = 5;\n            rax = dcgettext (0, \"Report any translation bugs to <https://translationproject.org/team/>\\n\");\n            rsi = stdout;\n            rdi = rax;\n            fputs_unlocked ();\n        }\nlabel_0:\n        edx = 5;\n        rax = dcgettext (0, \"Full documentation <%s%s>\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"https://www.gnu.org/software/coreutils/\";\n        ecx = \"nproc\";\n        eax = 0;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"or available locally via: info '(coreutils) %s%s'\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"nproc\";\n        ecx = \" invocation\";\n        eax = 0;\n        printf_chk ();\n        exit (ebp);\n    }\n    rbx = stderr;\n    edx = 5;\n    rax = dcgettext (0, \"Try '%s --help' for more information.\\n\");\n    rdx = rax;\n    rcx = program_name;\n    esi = 1;\n    eax = 0;\n    rdi = rbx;\n    fprintf_chk ();\n    return exit (ebp);\n}\n"
        },
        {
            "funcName": "dbg_main",
            "funcStartAddr": "0x4025d0",
            "funcEndAddr": "0x402780",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4025d0 */\n#include <stdint.h>\n \nuint64_t dbg_main (int32_t argc, char ** argv, int32_t c) {\n    rdi = argc;\n    rsi = argv;\n    rax = c;\n    /* int main(int argc,char ** argv); */\n    r14 = rsi;\n    r15d = edi;\n    set_program_name (*(r14));\n    setlocale (6, 0x407ac2);\n    bindtextdomain (0x4071e6, \"/home/yujeong/binary_gen/coreutils-8.31/tmp/_install/share/locale\");\n    textdomain (0x4071e6, rsi);\n    edi = close_stdout;\n    eax = atexit ();\n    ebx = 2;\n    r12d = 0;\n    while (eax != 0x80) {\n        if (eax != 0x81) {\n            goto label_1;\n        }\n        rbp = optarg;\n        edx = 5;\n        rax = dcgettext (0, \"invalid number\");\n        rdx = 0xffffffffffffffff;\n        ecx = 0x407ac2;\n        r9d = 0;\n        r8 = rax;\n        rax = xdectoumax (rbp, 0);\n        r12 = rax;\nlabel_0:\n        ebp = 0;\n        edx = 0x407ac2;\n        ecx = longopts;\n        r8d = 0;\n        edi = r15d;\n        rsi = r14;\n        eax = getopt_long ();\n        if (eax <= 0x7f) {\n            goto label_2;\n        }\n    }\n    goto label_0;\nlabel_2:\n    if (eax == 0xffffffff) {\n        if (*(obj.optind) != r15d) {\n            goto label_3;\n        }\n        edi = ebx;\n        rax = num_processors ();\n        rcx = 0x6520d4e292a7a1ca;\n        rsi = rax + rcx;\n        rsi -= r12;\n        rsi -= rcx;\n        edx = 1;\n        if (rax > r12) {\n            rdx = rsi;\n        }\n        edi = 1;\n        esi = \"%lu\\n\";\n        eax = 0;\n        eax = printf_chk ();\n        eax = 0;\n        return rax;\n    }\n    if (eax != 0xffffff7d) {\n        if (eax != 0xffffff7e) {\n            goto label_1;\n        }\n        dbg_usage (0);\nlabel_3:\n        edx = 5;\n        rax = dcgettext (0, \"extra operand %s\");\n        rbx = rax;\n        rax = *(obj.optind);\n        rax = quote (*((r14 + rax*8)));\n        rcx = rax;\n        eax = 0;\n        error (0, 0, rbx);\n        eax = dbg_usage (1);\n    }\n    eax = 0;\n    version_etc (*(obj.stdout), \"nproc\", \"GNU coreutils\", *(obj.Version), \"Giuseppe Scrivano\", 0);\n    exit (0);\nlabel_1:\n    rax = dbg_usage (1);\n}\n"
        },
        {
            "funcName": "dbg_close_stdout_set_file_name",
            "funcStartAddr": "0x402780",
            "funcEndAddr": "0x402788",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402780 */\n#include <stdint.h>\n \nvoid dbg_close_stdout_set_file_name (char const * file) {\n    rdi = file;\n    /* void close_stdout_set_file_name(char const * file); */\n    *(obj.file_name) = rdi;\n}\n"
        },
        {
            "funcName": "dbg_close_stdout_set_ignore_EPIPE",
            "funcStartAddr": "0x402790",
            "funcEndAddr": "0x402798",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402790 */\n#include <stdint.h>\n \nvoid dbg_close_stdout_set_ignore_EPIPE (_Bool ignore) {\n    rdi = ignore;\n    /* void close_stdout_set_ignore_EPIPE(_Bool ignore); */\n    *(obj.ignore_EPIPE) = dil;\n}\n"
        },
        {
            "funcName": "dbg_close_stdout",
            "funcStartAddr": "0x4027a0",
            "funcEndAddr": "0x402855",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4027a0 */\n#include <stdint.h>\n \nuint64_t dbg_close_stdout (char const * write_error) {\n    rbx = write_error;\n    /* void close_stdout(); */\n    eax = close_stream (*(obj.stdout));\n    if (eax != 0) {\n        bl = ignore_EPIPE;\n        rax = errno_location ();\n        if (bl == 0) {\n            goto label_0;\n        }\n        if (*(rbp) != 0x20) {\n            goto label_0;\n        }\n    }\n    eax = close_stream (*(obj.stderr));\n    if (eax == 0) {\n        return rax;\nlabel_0:\n        edx = 5;\n        rax = dcgettext (0, \"write error\");\n        rbx = rax;\n        rdi = file_name;\n        ebp = *(rbp);\n        if (rdi != 0) {\n            goto label_1;\n        }\n        eax = 0;\n        rcx = rbx;\n        error (0, ebp, 0x4073e5);\n        exit (*(obj.exit_failure));\n    }\n    exit (*(obj.exit_failure));\nlabel_1:\n    rax = quotearg_colon (rdi);\n    rcx = rax;\n    eax = 0;\n    r8 = rbx;\n    error (0, ebp, \"%s: %s\");\n    return exit (*(obj.exit_failure));\n}\n"
        },
        {
            "funcName": "dbg_num_processors",
            "funcStartAddr": "0x402860",
            "funcEndAddr": "0x40295a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402860 */\n#include <stdint.h>\n \nuint64_t dbg_num_processors (long int nprocs, long unsigned int omp_env_threads, nproc_query query) {\n    cpu_set_t set;\n    rax = nprocs;\n    rbx = omp_env_threads;\n    rdi = query;\n    /* long unsigned int num_processors(nproc_query query); */\n    r14 = 0xffffffffffffffff;\n    if (edi == 2) {\n        rax = getenv (\"OMP_NUM_THREADS\");\n        rdi = rax;\n        rax = parse_omp_threads ();\n        rbx = rax;\n        rax = getenv (\"OMP_THREAD_LIMIT\");\n        rdi = rax;\n        rax = parse_omp_threads ();\n        r14 -= r14;\n        r14 |= rax;\n        rax = r14;\n        if (rbx < r14) {\n            rax = rbx;\n        }\n        if (rbx != 0) {\n            goto label_0;\n        }\n        edi = 1;\n    }\n    if (edi != 1) {\n        goto label_1;\n    }\n    rdx = rsp + 8;\n    edi = 0;\n    esi = 0x80;\n    eax = sched_getaffinity ();\n    while (eax == 0) {\n        edi = 0x54;\n        rax = sysconf ();\n        if (rax > 0) {\n            goto label_2;\n        }\n        goto label_3;\nlabel_1:\n        edi = 0x53;\n        rax = sysconf ();\n        if (rax == 1) {\n            rdx = rsp + 8;\n            edi = 0;\n            esi = 0x80;\n            eax = sched_getaffinity ();\n            if (eax != 0) {\n                goto label_3;\n            }\n            rsi = rsp + 8;\n            edi = 0x80;\n            eax = sched_cpucount ();\n            if (eax == 0) {\n                goto label_3;\n            }\n            rax = (int64_t) eax;\n        }\n        if (rax > 0) {\n            goto label_2;\n        }\nlabel_3:\n        eax = 1;\n        goto label_2;\n        rsi = rsp + 8;\n        edi = 0x80;\n        eax = sched_cpucount ();\n    }\n    rax = (int64_t) eax;\nlabel_2:\n    if (rax < r14) {\n        r14 = rax;\n    }\n    rax = r14;\nlabel_0:\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_parse_omp_threads",
            "funcStartAddr": "0x402960",
            "funcEndAddr": "0x402a2a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402960 */\n#include <stdint.h>\n \nint32_t dbg_parse_omp_threads (int32_t c, char * endptr, char const * threads, long unsigned int value) {\n    rcx = c;\n    rdx = endptr;\n    rdi = threads;\n    rax = value;\n    /* long unsigned int parse_omp_threads(char const * threads); */\n    if (rdi == 0) {\n        goto label_0;\n    }\n    al = *(rdi);\n    if (al != 0) {\n        goto label_1;\n    }\n    goto label_2;\n    do {\n        al = *((rdi + 1));\n        rdi++;\n        if (al == 0) {\n            goto label_2;\n        }\nlabel_1:\n        ecx = (int32_t) al;\n        ecx += 0xfffffff7;\n        if (ecx > 0x17) {\n            goto label_3;\n        }\n        edx = 0x80001f;\n        edx >>= cl;\n        ecx = edx;\n        ecx ^= 0xfffffe;\n        ecx &= edx;\n    } while ((ecx & 0xffffff) != 0);\n    goto label_3;\nlabel_2:\n    eax = 0;\nlabel_3:\n    eax = (int32_t) al;\n    eax += 0xffffffd0;\n    if (eax > 9) {\n        goto label_0;\n    }\n    *(rsp) = 0;\n    eax = strtoul (rdi, rsp, 0xa);\n    rdx = *(rsp);\n    if (rdx == 0) {\n        goto label_0;\n    }\n    cl = *(rdx);\n    if (cl == 0) {\n        goto label_4;\n    }\n    do {\n        ecx = (int32_t) cl;\n        ecx += 0xfffffff7;\n        if (ecx >= 0x18) {\n            goto label_5;\n        }\n        esi = 0x80001f;\n        esi >>= cl;\n        esi = ~esi;\n        esi |= 0xfffffffe;\n        if (esi == 0xffffffff) {\n            goto label_5;\n        }\n        ecx = *((rdx + 1));\n        rdx++;\n    } while (cl != 0);\nlabel_5:\n    *(rsp) = rdx;\nlabel_4:\n    cl = *(rdx);\n    if (cl != 0x2c) {\n        if (cl == 0) {\n            goto label_6;\n        }\nlabel_0:\n        eax = 0;\n    }\nlabel_6:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_set_program_name",
            "funcStartAddr": "0x402a30",
            "funcEndAddr": "0x402ad1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402a30 */\n#include <stdint.h>\n \nuint64_t dbg_set_program_name (char ** arg1, char const * base, char const * slash) {\n    rdi = arg1;\n    r14 = base;\n    rax = slash;\n    /* void set_program_name(char const * argv0); */\n    rbx = rdi;\n    if (rbx != 0) {\n        rax = strrchr (rbx, 0x2f);\n        r14 = rax + 1;\n        if (rax == 0) {\n            r14 = rbx;\n        }\n        rax = r14;\n        rax -= rbx;\n        if (rax >= 7) {\n            eax = strncmp (r14 - 7, \"/.libs/\", 7);\n            if (eax != 0) {\n                goto label_0;\n            }\n            eax = strncmp (r14, 0x407449, 3);\n            if (eax == 0) {\n                r14 += 3;\n                *(obj.__progname) = r14;\n            }\n            rbx = r14;\n        }\nlabel_0:\n        *(obj.program_name) = rbx;\n        *(obj.program_invocation_name) = rbx;\n        return rax;\n    }\n    fwrite (\"A NULL argv[0] was passed through an exec system call.\\n\", 0x37, 1, *(obj.stderr));\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_clone_quoting_options",
            "funcStartAddr": "0x402ae0",
            "funcEndAddr": "0x402b13",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402ae0 */\n#include <stdint.h>\n \nuint64_t dbg_clone_quoting_options (int64_t arg1, quoting_options * o, quoting_options * p) {\n    int32_t e;\n    rdi = arg1;\n    rbx = o;\n    rax = p;\n    /* quoting_options * clone_quoting_options(quoting_options * o); */\n    rbx = rdi;\n    rax = errno_location ();\n    r14 = rax;\n    ebp = *(r14);\n    eax = default_quoting_options;\n    if (rbx == 0) {\n        rbx = rax;\n    }\n    esi = 0x38;\n    rdi = rbx;\n    xmemdup ();\n    *(r14) = ebp;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_get_quoting_style",
            "funcStartAddr": "0x402b20",
            "funcEndAddr": "0x402b2f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402b20 */\n#include <stdint.h>\n \nint64_t dbg_get_quoting_style (quoting_options const * o) {\n    rdi = o;\n    /* quoting_style get_quoting_style(quoting_options const * o); */\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    eax = *(rax);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_set_quoting_style",
            "funcStartAddr": "0x402b30",
            "funcEndAddr": "0x402b3f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402b30 */\n#include <stdint.h>\n \nint64_t dbg_set_quoting_style (quoting_options * o, quoting_style s) {\n    rdi = o;\n    rsi = s;\n    /* void set_quoting_style(quoting_options * o,quoting_style s); */\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    *(rax) = esi;\n    return rax;\n}\n"
        },
        {
            "funcName": "set_char_quoting",
            "funcStartAddr": "0x402b40",
            "funcEndAddr": "0x402bae",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402b40 */\n#include <stdint.h>\n \nint32_t set_char_quoting (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r8d = default_quoting_options;\n    if (rdi != 0) {\n        r8 = rdi;\n    }\n    ecx = esi;\n    cl ^= 0xe0;\n    cl &= sil;\n    eax = esi;\n    al >>= 5;\n    r9d = (int32_t) al;\n    esi = *((r8 + r9*4 + 8));\n    edi = *((r8 + r9*4 + 8));\n    edi >>= cl;\n    eax = edi;\n    eax ^= 0xfffffffe;\n    eax &= edi;\n    edi = eax;\n    edi = ~edi;\n    edi &= edx;\n    edx = ~edx;\n    edx |= 0xfffffffe;\n    edi &= 1;\n    edx &= eax;\n    edx |= edi;\n    edx <<= cl;\n    ecx = edx;\n    ecx = ~ecx;\n    ecx &= 0x9dece435;\n    edx &= 0x62131bca;\n    edi = esi;\n    edi = ~edi;\n    edi &= 0x9dece435;\n    esi &= 0x62131bca;\n    edx |= ecx;\n    esi |= edi;\n    esi ^= edx;\n    *((r8 + r9*4 + 8)) = esi;\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_set_quoting_flags",
            "funcStartAddr": "0x402bb0",
            "funcEndAddr": "0x402bc3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402bb0 */\n#include <stdint.h>\n \nint32_t dbg_set_quoting_flags (int32_t i, quoting_options * o, int32_t r) {\n    rsi = i;\n    rdi = o;\n    rax = r;\n    /* int set_quoting_flags(quoting_options * o,int i); */\n    ecx = default_quoting_options;\n    if (rdi != 0) {\n        rcx = rdi;\n    }\n    eax = *((rcx + 4));\n    *((rcx + 4)) = esi;\n    return eax;\n}\n"
        },
        {
            "funcName": "set_custom_quoting",
            "funcStartAddr": "0x402bd0",
            "funcEndAddr": "0x402c08",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402bd0 */\n#include <stdint.h>\n \nint64_t set_custom_quoting (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    *(rax) = 0xa;\n    dil = (rsi != 0) ? 1 : 0;\n    cl = (rdx != 0) ? 1 : 0;\n    cl ^= dil;\n    if (rdx == 0) {\n        if (rsi == 0) {\n            goto label_0;\n        }\n        *((rax + 0x28)) = rsi;\n        *((rax + 0x30)) = rdx;\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_buffer",
            "funcStartAddr": "0x402c10",
            "funcEndAddr": "0x402c82",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402c10 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_buffer (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, char const * arg, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, size_t argsize, char * buffer, size_t buffersize, quoting_options const * o, size_t r) {\n    quoting_options const * p;\n    int32_t e;\n    int64_t var_4h;\n    r15 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r14 = argsize;\n    r13 = buffer;\n    r12 = buffersize;\n    r8 = o;\n    rax = r;\n    /* size_t quotearg_buffer(char * buffer,size_t buffersize,char const * arg,size_t argsize,quoting_options const * o); */\n    r14 = rcx;\n    r15 = rdx;\n    r12 = rsi;\n    r13 = rdi;\n    if (r8 != 0) {\n    }\n    rax = errno_location ();\n    rbx = rax;\n    eax = *(rbx);\n    *((rsp + 4)) = eax;\n    rax = rbp + 8;\n    quotearg_buffer_restyled (r13, r12, r15, r14, *(rbp), *((rbp + 4)));\n    ecx = *((rsp + 4));\n    *(rbx) = ecx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_buffer_restyled",
            "funcStartAddr": "0x402c90",
            "funcEndAddr": "0x403e44",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402c90 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_buffer_restyled (int64_t arg_108h, uint32_t arg_f0h, int64_t arg_f8h, int64_t arg_100h, size_t * arg2, size_t * arg3, int64_t arg5, int64_t arg6, size_t argsize, size_t bytes, unsigned char c, _Bool elide_outer_quotes, unsigned char esc) {\n    int64_t var_1h;\n    uint32_t var_5h;\n    int64_t var_6h;\n    uint32_t var_7h;\n    char const * arg;\n    size_t var_eh;\n    uint32_t var_fh;\n    size_t * main;\n    uint32_t var_1eh;\n    int64_t var_1fh;\n    char const * quote_string;\n    uint32_t var_21h;\n    uint32_t var_22h;\n    uint32_t var_23h;\n    int64_t var_24h;\n    size_t * var_28h;\n    size_t ilim;\n    size_t var_38h;\n    void * s2;\n    int32_t flags;\n    char const * left_quote;\n    char const * right_quote;\n    size_t * var_58h;\n    int64_t var_78h_2;\n    func rtld_fini;\n    int64_t var_68h;\n    char * s;\n    wchar_t w;\n    size_t n;\n    mbstate_t * ps;\n    uint32_t var_8ch;\n    uint32_t var_90h;\n    wint_t wc;\n    int64_t var_98h;\n    int64_t var_a0h;\n    size_t var_a8h;\n    uint32_t var_b0h;\n    rsi = arg2;\n    rdx = arg3;\n    r8 = arg5;\n    r9 = arg6;\n    r11 = argsize;\n    rdi = bytes;\n    r13 = c;\n    r12 = elide_outer_quotes;\n    rcx = esc;\n    /* size_t quotearg_buffer_restyled(char * buffer,size_t buffersize,char const * arg,size_t argsize,quoting_style quoting_style,int flags,unsigned int const * quote_these_too,char const * left_quote,char const * right_quote); */\nlabel_14:\n    ebx = r9d;\n    r13d = r8d;\n    *((rsp + 0x38)) = rcx;\n    *((rsp + 0x28)) = rdx;\n    *((rsp + 0x10)) = rdi;\n    rax = *((rsp + 0x100));\n    *((rsp + 0x70)) = rax;\n    rax = *((rsp + 0xf8));\n    *((rsp + 0x68)) = rax;\n    rax = ctype_get_mb_cur_max ();\n    *((rsp + 0xb0)) = rax;\n    r12d = ebx;\n    r12b >>= 1;\n    r12b &= 1;\n    eax = ebx;\n    eax ^= 0xfffffffe;\n    eax &= ebx;\n    *((rsp + 0x90)) = eax;\n    eax = ebx;\n    eax ^= 0xfffffffb;\n    *((rsp + 0x64)) = ebx;\n    eax &= ebx;\n    *((rsp + 0x8c)) = eax;\n    r9b = 1;\n    r8 = 0x62ff2d22a07dc239;\n    eax = 0;\n    *((rsp + 0x58)) = rax;\n    eax = 0;\n    *((rsp + 0x40)) = rax;\n    esi = 0;\n    eax = 0;\n    *((rsp + 8)) = 0;\n    ecx = 0;\n    *((rsp + 0xa0)) = rcx;\n    goto label_18;\nlabel_13:\n    *((rsp + 0x38)) = r11;\n    cl = (edi != 2) ? 1 : 0;\n    al = (*((rsp + 5)) != 0) ? 1 : 0;\n    al |= cl;\n    rcx = *((rsp + 0xa0));\n    edx = ecx;\n    dl ^= 0xfe;\n    dl &= cl;\n    cl = (dl != 0) ? 1 : 0;\n    dl = (dl == 0) ? 1 : 0;\n    dl ^= al;\n    if (dl != 0) {\n        goto label_19;\n    }\n    al ^= 1;\n    cl |= al;\n    cl ^= 1;\n    if (cl != 0) {\n        goto label_19;\n    }\n    eax = r9d;\n    al ^= 0xfe;\n    if ((al & r9b) != 0) {\n        goto label_20;\n    }\n    al = (*((rsp + 0x58)) == 0) ? 1 : 0;\n    cl = (*((rsp + 0x48)) != 0) ? 1 : 0;\n    cl |= al;\n    if (cl == 1) {\n        goto label_19;\n    }\n    al = 1;\n    r13d = edi;\n    al = bl;\n    r12d = ebp;\n    rbp = *((rsp + 0x58));\n    if (al == 0) {\n        goto label_19;\n        eax = r12d;\n        al ^= 0xfe;\n        if ((al & r12b) != 0) {\n            r14d = 0;\n            goto label_21;\n            r15b = 1;\n            edx = 5;\n            r14d = 0;\n            eax = 0x407974;\n            *((rsp + 0x40)) = rax;\n            r10d = 1;\n            sil = 1;\n            goto label_22;\n        }\n        if (rbp != 0) {\n            *(rdi) = 0x22;\n        }\n        r14d = 1;\nlabel_21:\n        eax = 0x407974;\n        *((rsp + 0x40)) = rax;\n        r10d = 1;\n        r15b = 1;\n        sil = r12b;\n        edx = 5;\n        goto label_22;\n    }\nlabel_18:\n    r10 = rsi;\n    if (r13d > 0xa) {\n        goto label_23;\n    }\n    edx = 7;\n    r14d = 0;\n    ecx = r13d;\n    r15b = 1;\n    esi = 0;\n    rdi = *((rsp + 0x10));\n    rbx = *((rsp + 0x38));\n    /* switch table (11 cases) at 0x407450 */\n    ebx = r9d;\n    rax = gettext_quote (0x407976, r13d);\n    *((rsp + 0x68)) = rax;\n    rax = gettext_quote (0x407978, r13d);\n    r9d = ebx;\n    rdi = *((rsp + 0x10));\n    *((rsp + 0x70)) = rax;\n    eax = r12d;\n    al = ~al;\n    al |= 0xfe;\n    *((rsp + 6)) = r9b;\n    while (al == 0) {\n        r14d = 0;\n        goto label_24;\n        rdx = *((rsp + 0x68));\n        al = *(rdx);\n        rsi = 0x95fb53789b2dc18f;\n    }\n    ecx = 0;\n    do {\n        if (rcx < rbp) {\n            *((rdi + rcx)) = al;\n        }\n        r14 = rcx + rsi + 1;\n        r14 -= rsi;\n        eax = *((rdx + rcx + 1));\n        rcx = r14;\n    } while (al != 0);\nlabel_24:\n    rbx = *((rsp + 0x70));\n    rax = strlen (*((rsp + 0x70)));\n    r10 = rax;\n    edx = r13d;\n    *((rsp + 0x40)) = rbx;\n    sil = r12b;\n    rbx = *((rsp + 0x38));\n    r8 = 0x62ff2d22a07dc239;\n    r9b = *((rsp + 6));\n    r15b = 1;\n    goto label_22;\n    edx = 0;\n    r14d = 0;\n    r15d = eax;\n    esi = 0;\n    goto label_22;\n    al = 1;\n    r12b = 1;\n    ecx = r12d;\n    cl ^= 0xfe;\n    cl = 1;\n    if ((cl & r12b) != 0) {\n        ecx = eax;\n    }\n    al = cl;\n    ecx = r12d;\n    cl ^= 0xfe;\n    if ((cl & r12b) != 0) {\n        r14d = 0;\n    } else {\n        if (rbp != 0) {\n            *(rdi) = 0x27;\n        }\n        r14d = 1;\n    }\n    ecx = 0x407978;\n    *((rsp + 0x40)) = rcx;\n    r10d = 1;\n    r15d = eax;\n    sil = r12b;\n    edx = 2;\nlabel_22:\n    *((rsp + 0x30)) = rdx;\n    r12b = (*((rsp + 0xf0)) != 0) ? 1 : 0;\n    ecx = r15d;\n    cl ^= 0xfe;\n    al = (edx != 2) ? 1 : 0;\n    r13 = rbx;\n    r11 = rbp;\n    dl = (edx == 2) ? 1 : 0;\n    cl &= r15b;\n    *((rsp + 7)) = cl;\n    cl = (cl == 0) ? 1 : 0;\n    ebx = edx;\n    *((rsp + 0x1f)) = cl;\n    bl |= cl;\n    bl ^= 1;\n    *((rsp + 0x78)) = r10;\n    rdi = r8;\n    r8 = *((rsp + 0x28));\n    r11 = r13;\n    r10b = (r10 != 0) ? 1 : 0;\n    ecx = r10d;\n    *((rsp + 0x22)) = bl;\n    cl ^= bl;\n    cl = ~cl;\n    cl &= r10b;\n    *((rsp + 0x23)) = cl;\n    ecx = esi;\n    cl ^= 0xfe;\n    cl &= sil;\n    *((rsp + 5)) = cl;\n    cl = (cl != 0) ? 1 : 0;\n    bl = (cl == 0) ? 1 : 0;\n    al |= bl;\n    al ^= 1;\n    *((rsp + 0x20)) = al;\n    bl ^= r12b;\n    bl &= r12b;\n    *((rsp + 0x21)) = bl;\n    eax = edx;\n    al ^= cl;\n    dl |= cl;\n    dl ^= 1;\n    dl |= al;\n    *((rsp + 0xf)) = dl;\n    *((rsp + 0xe)) = r15b;\n    r15b = ~r15b;\n    *((rsp + 0xa8)) = rsi;\n    ecx = esi;\n    cl = ~cl;\n    cl |= r15b;\n    eax = ecx;\n    al = ~al;\n    cl ^= 1;\n    al = ((cl & al) != 0) ? 1 : 0;\n    r10b ^= al;\n    r10b = ~r10b;\n    r10b &= al;\n    *((rsp + 0x1e)) = r10b;\n    r10 = r8;\n    r8 = rdi;\n    rdi = *((rsp + 0x10));\n    r12d = 0;\n    if (r11 != -1) {\nlabel_3:\n        if (r12 != r11) {\n            goto label_25;\n        }\n        goto label_26;\n    }\nlabel_4:\n    if (*((r10 + r12)) == 0) {\n        goto label_27;\n    }\nlabel_25:\n    if (*((rsp + 0x23)) != 0) {\n        al = (r11 == -1) ? 1 : 0;\n        rsi = *((rsp + 0x78));\n        cl = (rsi > 1) ? 1 : 0;\n        rbx = r12;\n        rdx = 0x8e7cbf2a3aa3b7e5;\n        rbx -= rdx;\n        rbx += rsi;\n        rbx += rdx;\n        cl ^= al;\n        if (rbx == 0) {\n            if (rsi < 2) {\n                goto label_28;\n            }\n            r15d = r9d;\n            rax = strlen (r10);\n            r9d = r15d;\n            r8 = 0x62ff2d22a07dc239;\n            r10 = *((rsp + 0x28));\n            rdi = *((rsp + 0x10));\n            r11 = rax;\n        }\nlabel_28:\n        if (rbx <= r11) {\n            goto label_29;\n        }\n    }\n    ecx = 0;\n    do {\nlabel_0:\n        r15d = ecx;\n        r13d = *((r10 + r12));\n        if (r13 > 0x7e) {\n            goto label_30;\n        }\n        esi = 0;\n        al = 1;\n        cl = 0x6e;\n        bl = 0x61;\n        edx = 0;\n        /* switch table (127 cases) at 0x4074a8 */\nlabel_2:\n        if (*((rsp + 0x22)) == 0) {\n            goto label_7;\n        }\nlabel_1:\n        if (*((rsp + 0xf0)) != 0) {\n            goto label_31;\n        }\n        goto label_32;\nlabel_29:\n        r15d = r9d;\n        r13 = rbp;\n        bl = (*((rsp + 5)) == 0) ? 1 : 0;\n        eax = memcmp (r10 + r12, *((rsp + 0x40)), *((rsp + 0x78)));\n        al = (eax != 0) ? 1 : 0;\n        cl = (eax == 0) ? 1 : 0;\n        if ((al & bl) != 0) {\n            goto label_33;\n        }\n        al ^= bl;\n        rdi = *((rsp + 0x10));\n        r10 = *((rsp + 0x28));\n        r11 = rbp;\n        r8 = 0x62ff2d22a07dc239;\n        r9d = r15d;\n    } while ((al & bl) != 0);\n    goto label_34;\nlabel_33:\n    rdi = *((rsp + 0x10));\n    r10 = *((rsp + 0x28));\n    r11 = rbp;\n    r8 = 0x62ff2d22a07dc239;\n    r9d = r15d;\n    goto label_0;\n    if (r12 != 0) {\n        goto label_35;\n    }\n    goto label_36;\n    if (r11 == -1) {\n        goto label_37;\n    }\n    al = (r11 != 1) ? 1 : 0;\n    cl = (r12 != 0) ? 1 : 0;\n    edx = 0;\n    if ((cl & al) != 0) {\n        goto label_8;\n    }\n    cl ^= al;\n    if ((cl & al) == 0) {\n        goto label_36;\n    }\n    goto label_8;\n    if (*((rsp + 7)) == 0) {\n        goto label_38;\n    }\n    if (*((rsp + 5)) != 0) {\n        goto label_34;\n    }\n    rdx = *((rsp + 0x30));\n    al = (edx == 2) ? 1 : 0;\n    ecx = *((rsp + 8));\n    cl = ~cl;\n    cl |= 0xfe;\n    cl = (cl == 0xff) ? 1 : 0;\n    cl ^= al;\n    if (cl != 0xff) {\n        goto label_39;\n    }\n    if (edx != 2) {\n        goto label_39;\n    }\n    if (r14 < rbp) {\n        *((rdi + r14)) = 0x27;\n    }\n    rax = r14;\n    rcx = 0x904ef83cbac1b19e;\n    rax -= rcx;\n    rax = rax + rcx + 1;\n    if (rax < rbp) {\n        *((rdi + rax)) = 0x24;\n    }\n    rcx = r14;\n    rcx = -rcx;\n    eax = 2;\n    rax -= rcx;\n    if (rax < rbp) {\n        *((rdi + rax)) = 0x27;\n    }\n    rax = 0x788ec96944b31fb7;\n    rcx = rax;\n    rax = r14 + rcx + 3;\n    rax -= rcx;\n    cl = 1;\n    *((rsp + 8)) = ecx;\n    if (rax < rbp) {\n        goto label_40;\n    }\n    goto label_41;\n    bl = 0x62;\n    goto label_42;\n    cl = 0x74;\n    goto label_43;\n    bl = 0x76;\n    goto label_42;\n    bl = 0x66;\n    goto label_42;\n    cl = 0x72;\n    goto label_43;\n    r13b = 0x27;\n    al = 1;\n    *((rsp + 0xa0)) = rax;\n    if (*((rsp + 0x30)) == 2) {\n        if (*((rsp + 5)) != 0) {\n            goto label_44;\n        }\n        al = (rbp == 0) ? 1 : 0;\n        rcx = *((rsp + 0x58));\n        rsi = *((rsp + 0x58));\n        cl = (rsi != 0) ? 1 : 0;\n        edx = ecx;\n        dl &= al;\n        cl ^= al;\n        cl |= dl;\n        if (cl == 0) {\n            rsi = rbp;\n        }\n        *((rsp + 0x58)) = rsi;\n        eax = 0;\n        if (cl == 0) {\n        }\n        if (r14 < rbp) {\n            *((rdi + r14)) = 0x27;\n        }\n        rax = r14;\n        rax = -rax;\n        ecx = 1;\n        rcx -= rax;\n        if (rcx < rbp) {\n            *((rdi + rcx)) = 0x5c;\n        }\n        ecx = 2;\n        rcx -= rax;\n        if (rcx < rbp) {\n            *((rdi + rcx)) = 0x27;\n        }\n        r14 += 3;\n        *((rsp + 8)) = 0;\n    }\n    edx = 0;\n    al = 1;\n    if (*((rsp + 0x22)) != 0) {\n        goto label_1;\n    }\n    goto label_7;\n    r13b = 0x3f;\n    rax = *((rsp + 0x30));\n    if (eax == 5) {\n        goto label_45;\n    }\n    if (eax != 2) {\n        goto label_35;\n    }\n    if (*((rsp + 5)) == 0) {\n        goto label_35;\n    }\n    goto label_44;\n    if (*((rsp + 0x30)) != 2) {\n        goto label_46;\n    }\n    if (*((rsp + 5)) != 0) {\n        goto label_44;\n    }\n    r13b = 0x5c;\n    edx = 0;\n    eax = 0;\n    goto label_11;\nlabel_30:\n    *((rsp + 0x48)) = rbp;\n    *((rsp + 6)) = r9b;\n    if (*((rsp + 0xb0)) != 1) {\n        goto label_47;\n    }\n    *((rsp + 0x38)) = r11;\n    rax = ctype_b_loc ();\n    r10 = *((rsp + 0x28));\n    rax = *(rax);\n    ecx = *((rax + r13*2));\n    ecx >>= 0xe;\n    cl &= 1;\n    esi = 1;\nlabel_12:\n    al = cl;\n    al ^= 0xfe;\n    al &= cl;\n    r8b = (al != 0) ? 1 : 0;\n    dl = (rsi < 2) ? 1 : 0;\n    ecx = r8d;\n    bl = *((rsp + 0x1f));\n    cl &= bl;\n    r8b ^= bl;\n    r8b |= cl;\n    dl ^= r8b;\n    rbp = *((rsp + 0x48));\n    if (dl == 1) {\n        goto label_48;\n    }\n    if (rsi >= 2) {\n        goto label_48;\n    }\n    edx = 0;\n    r11 = *((rsp + 0x38));\n    r8 = 0x62ff2d22a07dc239;\n    r9b = *((rsp + 6));\n    rdi = *((rsp + 0x10));\n    if (*((rsp + 0x22)) != 0) {\n        goto label_1;\n    }\n    goto label_7;\nlabel_37:\n    al = (*((r10 + 1)) != 0) ? 1 : 0;\n    cl = (r12 != 0) ? 1 : 0;\n    edx = 0;\n    if ((cl & al) != 0) {\n        goto label_49;\n    }\n    cl ^= al;\n    if ((cl & al) != 0) {\n        goto label_49;\n    }\nlabel_36:\n    sil = 1;\n    if (*((rsp + 0xf)) == 0) {\n        goto label_44;\n    }\n    edx = 0;\n    al = sil;\n    if (*((rsp + 0x22)) != 0) {\n        goto label_1;\n    }\nlabel_7:\n    if (*((rsp + 0x21)) != 0) {\nlabel_31:\n        ecx = r13d;\n        cl >>= 5;\n        ecx = (int32_t) cl;\n        rsi = *((rsp + 0xf0));\n        esi = *((rsi + rcx*4));\n        ecx = r13d;\n        cl ^= 0xe0;\n        cl &= r13b;\n        ebx = 1;\n        ebx <<= cl;\n        ebx ^= esi;\n        ebx = ~ebx;\n        cl = ((ebx & esi) == 0) ? 1 : 0;\n        bl = (r15b == 0) ? 1 : 0;\n        bl ^= cl;\n        if (r15b != 0) {\n            goto label_50;\n        }\n    }\nlabel_32:\n    ebx = r13d;\n    if (r15b != 0) {\n        goto label_51;\n    }\n    do {\nlabel_11:\n        ecx = *((rsp + 8));\n        cl = ~cl;\n        cl |= 0xfe;\n        dl = ~dl;\n        dl |= 0xfe;\n        cl = (cl == 0xff) ? 1 : 0;\n        dl = (dl != 0xff) ? 1 : 0;\n        dl |= cl;\n        if (dl != 1) {\n            cl = 1;\n            if (cl == 0) {\n                goto label_52;\n            }\n            if (r14 < rbp) {\n                *((rdi + r14)) = 0x27;\n            }\n            rcx = r14;\n            rdx = 0x8cd7f854d35caefc;\n            rcx -= rdx;\n            rcx = rcx + rdx + 1;\n            if (rcx < rbp) {\n                *((rdi + rcx)) = 0x27;\n            }\n            rcx = 0x24af43e9b5bf94c3;\n            r14 = r14 + rcx + 2;\n            r14 -= rcx;\n            *((rsp + 8)) = 0;\n        }\nlabel_52:\n        ebx = r13d;\n        if (r14 < rbp) {\n            goto label_53;\n        }\n        goto label_54;\nlabel_50:\n        ebx = r13d;\n        if (*((rsp + 5)) == 0) {\n            goto label_55;\n        }\n        goto label_34;\nlabel_46:\n        cl = 0x5c;\n        if (*((rsp + 0x1e)) == 0) {\n            goto label_43;\n        }\n        edx = 0;\n        r13b = 0x5c;\n        eax = 0;\n    } while (1);\nlabel_43:\n    ebx = ecx;\n    if (*((rsp + 0xf)) == 0) {\n        goto label_44;\n    }\nlabel_42:\n    edx = 0;\n    eax = 0;\n    if (*((rsp + 7)) == 0) {\n        goto label_2;\n    }\nlabel_51:\n    if (*((rsp + 5)) != 0) {\n        goto label_34;\n    }\nlabel_55:\n    esi = *((rsp + 8));\n    ecx = *((rsp + 8));\n    cl ^= 0xfe;\n    dl = (*((rsp + 0x30)) != 2) ? 1 : 0;\n    cl = ((cl & sil) != 0) ? 1 : 0;\n    cl |= dl;\n    if (cl != 1) {\n        cl = 1;\n        if (cl == 0) {\n            goto label_56;\n        }\n        if (r14 < rbp) {\n            *((rdi + r14)) = 0x27;\n        }\n        rcx = 0x57635e786a48b60;\n        rdx = rcx;\n        rcx = r14 + rdx + 1;\n        rcx -= rdx;\n        if (rcx < rbp) {\n            *((rdi + rcx)) = 0x24;\n        }\n        rcx = r14 + 2;\n        if (rcx < rbp) {\n            *((rdi + rcx)) = 0x27;\n        }\n        r14 += 3;\n        cl = 1;\n        *((rsp + 8)) = ecx;\n    }\nlabel_56:\n    if (r14 < rbp) {\n        *((rdi + r14)) = 0x5c;\n    }\n    rcx = 0xf2369cbba8928360;\n    r14 = r14 + rcx + 1;\n    r14 -= rcx;\n    if (r14 < rbp) {\nlabel_53:\n        *((rdi + r14)) = bl;\n    }\nlabel_54:\n    r14 = r14 + r8 + 1;\n    ecx = eax;\n    cl ^= 0xfe;\n    cl &= al;\n    if (cl != 0) {\n        ecx = r9d;\n    }\n    r14 -= r8;\n    r9d = ecx;\nlabel_6:\n    r12 = -r12;\n    eax = 1;\n    rax -= r12;\n    r12 = rax;\n    if (r11 != -1) {\n        goto label_3;\n    }\n    goto label_4;\nlabel_47:\n    *((rsp + 0x80)) = 0;\n    if (r11 == -1) {\n        rax = strlen (r10);\n        r10 = *((rsp + 0x28));\n        r11 = rax;\n    }\n    rax = r10 + r12;\n    *((rsp + 0x98)) = rax;\n    al = 1;\n    *((rsp + 0x24)) = eax;\n    ebp = 0;\n    rax = rsp + 0x80;\n    rcx = rax;\n    *((rsp + 0x38)) = r11;\nlabel_5:\n    rbx = rbp;\n    rax = 0xa70d02956f40b2c3;\n    rbx -= rax;\n    rbx += r12;\n    rbx += rax;\n    rax = 0xc1d5c458694f9756;\n    rdx -= rbx;\n    rdx -= rax;\n    rax = rpl_mbrtowc (rsp + 0x94, r10 + rbx, r11 + rax);\n    rdi = rax;\n    if (rdi == 0) {\n        goto label_57;\n    }\n    rsi = 0x14043678fe8a24c8;\n    if (rdi == -1) {\n        goto label_58;\n    }\n    r11 = *((rsp + 0x38));\n    if (rdi == 0xfffffffffffffffe) {\n        goto label_59;\n    }\n    *((rsp + 0x50)) = rbp;\n    al = *((rsp + 0x20));\n    al ^= 1;\n    cl = (rdi < 2) ? 1 : 0;\n    cl |= al;\n    r10 = *((rsp + 0x28));\n    rbp = *((rsp + 0x48));\n    if (cl == 1) {\n        goto label_60;\n    }\n    al = 1;\n    if (al == 0) {\n        goto label_60;\n    }\n    rax = *((rsp + 0x50));\n    rcx = *((rsp + 0x98));\n    rax = rcx + rax;\n    ecx = 1;\n    do {\n        edx = *((rax + rcx));\n        edx += 0xffffffa5;\n        if (edx <= 0x21) {\n            rbx = 0x20000002b;\n            if (((rbx >> rdx) & 1) < 0) {\n                goto label_44;\n            }\n        }\n        rcx = rcx + rsi + 1;\n        rcx -= rsi;\n    } while (rcx < rdi);\nlabel_60:\n    rbx = rdi;\n    eax = iswprint (*((rsp + 0x94)));\n    if (eax == 0) {\n        *((rsp + 0x24)) = 0;\n    }\n    rcx = *((rsp + 0x50));\n    rax = 0xd1db9ec0478b7a9d;\n    rbx -= rax;\n    rbx += rcx;\n    rbx += rax;\n    eax = mbsinit (rsp + 0x80);\n    rcx = rbp;\n    rsi = rbx;\n    r10 = *((rsp + 0x28));\n    r11 = *((rsp + 0x38));\n    if (eax == 0) {\n        goto label_5;\n    }\n    goto label_61;\nlabel_38:\n    if (*((rsp + 0x90)) != 0) {\n        goto label_6;\n    }\n    r13d = 0;\n    goto label_35;\nlabel_49:\n    r11 = 0xffffffffffffffff;\n    goto label_8;\nlabel_45:\n    if (*((rsp + 0x8c)) != 0) {\n        rax = 0x9035910ebfa73863;\n        rcx = rax;\n        rax = r12 + rcx + 2;\n        rax -= rcx;\n        if (rax < r11) {\n            rcx = 0xd51ff49002e98485;\n            rdx = rcx;\n            rcx = r12 + rdx + 1;\n            rcx -= rdx;\n            if (*((r10 + rcx)) != 0x3f) {\n                goto label_35;\n            }\n            ecx = *((r10 + rax));\n            edx = 0;\n            if (ecx > 0x3e) {\n                goto label_8;\n            }\n            rsi = 0x7000a38200000000;\n            if (((rsi >> rcx) & 1) >= 0) {\n                goto label_8;\n            }\n            if (*((rsp + 5)) != 0) {\n                goto label_62;\n            }\n            if (r14 < rbp) {\n                *((rdi + r14)) = 0x3f;\n            }\n            rdx = 0x6a4613951cafae6d;\n            rsi = rdx;\n            rdx = r14 + rsi + 1;\n            rdx -= rsi;\n            if (rdx < rbp) {\n                *((rdi + rdx)) = 0x22;\n            }\n            rdx = r14;\n            rsi = 0xc41b7c4bbb524000;\n            rdx -= rsi;\n            rdx = rdx + rsi + 2;\n            if (rdx < rbp) {\n                *((rdi + rdx)) = 0x22;\n            }\n            rdx = r14;\n            rsi = 0x7ab275e8abab34c1;\n            rdx -= rsi;\n            rdx = rdx + rsi + 3;\n            if (rdx < rbp) {\n                *((rdi + rdx)) = 0x3f;\n            }\n            r14 = -r14;\n            esi = 4;\n            rsi -= r14;\n            edx = 0;\n            r12 = rax;\n            r14 = rsi;\n            r13b = cl;\n        }\n    } else {\nlabel_35:\n        edx = 0;\n    }\nlabel_8:\n    eax = 0;\n    if (*((rsp + 0x22)) != 0) {\n        goto label_1;\n    }\n    goto label_7;\nlabel_39:\n    rax = r14;\n    if (rax < rbp) {\nlabel_40:\n        *((rdi + rax)) = 0x5c;\n    }\nlabel_41:\n    rcx = rax;\n    rdx = 0xc15e277223ec58fd;\n    rcx -= rdx;\n    r14 = rcx + rdx + 1;\n    dl = 1;\n    r13b = 0x30;\n    if (*((rsp + 0x30)) == 2) {\n        goto label_8;\n    }\n    rcx = r12;\n    rsi = 0xd27d2df4a16afc81;\n    rcx -= rsi;\n    rcx = rcx + rsi + 1;\n    if (rcx >= r11) {\n        goto label_8;\n    }\n    cl = *((r10 + rcx));\n    cl += 0xd0;\n    if (cl > 9) {\n        goto label_8;\n    }\n    if (r14 < rbp) {\n        *((rdi + r14)) = 0x30;\n    }\n    rcx = 0x7cd181083d28e096;\n    rsi = rcx;\n    rcx = rax + rsi + 2;\n    rcx -= rsi;\n    if (rcx < rbp) {\n        *((rdi + rcx)) = 0x30;\n    }\n    rcx = 0x5d0e0dd8fd52b37;\n    r14 = rax + rcx + 3;\n    r14 -= rcx;\n    goto label_8;\nlabel_48:\n    rsi += r12;\n    *((rsp + 0x50)) = rsi;\n    r9 = r12 + 1;\n    edx = 0;\n    r11 = *((rsp + 0x38));\n    if (r8b != 0) {\n        goto label_63;\n    }\n    while (*((rsp + 0x50)) > r9) {\nlabel_10:\n        edi = r15d;\n        ecx = *((rsp + 8));\n        ebx = *((rsp + 8));\n        bl ^= 0xfe;\n        bl &= cl;\n        sil = (bl != 0) ? 1 : 0;\n        ecx = edx;\n        cl = ~cl;\n        cl |= 0xfe;\n        cl = (cl == 0xff) ? 1 : 0;\n        cl ^= sil;\n        if (cl == 0xff) {\n            if (bl != 0) {\n                r15d = edi;\n                if (r14 < rbp) {\n                    rcx = *((rsp + 0x10));\n                    *((rcx + r14)) = 0x27;\n                }\n                rcx = r14 + 1;\n                if (rcx < rbp) {\n                    rsi = *((rsp + 0x10));\n                    *((rsi + rcx)) = 0x27;\n                    r15d = edi;\n                }\n                r14 = -r14;\n                ecx = 2;\n                rcx -= r14;\n                *((rsp + 8)) = 0;\n                r14 = rcx;\n            }\n        } else {\n            r15d = edi;\n        }\n        rcx = 0x8248105f5c633024;\n        r12 = r12 + rcx + 1;\n        if (r14 >= rbp) {\n            goto label_64;\n        }\n        rcx = *((rsp + 0x10));\n        *((rcx + r14)) = r13b;\n        goto label_64;\nlabel_9:\n        if (*((rsp + 5)) != 0) {\n            goto label_34;\n        }\n        rbx = *((rsp + 0x30));\n        cl = (ebx == 2) ? 1 : 0;\n        esi = *((rsp + 8));\n        edx = *((rsp + 8));\n        dl ^= 0xfe;\n        dl = ((dl & sil) == 0) ? 1 : 0;\n        dl ^= cl;\n        if ((dl & sil) == 0) {\n            if (ebx != 2) {\n                goto label_65;\n            }\n            if (r14 < rbp) {\n                rcx = *((rsp + 0x10));\n                *((rcx + r14)) = 0x27;\n            }\n            rcx = r14;\n            rcx = -rcx;\n            edx = 1;\n            rdx -= rcx;\n            if (rdx < rbp) {\n                rcx = *((rsp + 0x10));\n                *((rcx + rdx)) = 0x24;\n            }\n            rdx = r14 + 2;\n            if (rdx < rbp) {\n                rcx = *((rsp + 0x10));\n                *((rcx + rdx)) = 0x27;\n            }\n            rcx = 0x71004f7dfe0a6a3d;\n            r14 = r14 + rcx + 3;\n            r14 -= rcx;\n            cl = 1;\n            *((rsp + 8)) = ecx;\n        }\nlabel_65:\n        if (r14 < rbp) {\n            rcx = *((rsp + 0x10));\n            *((rcx + r14)) = 0x5c;\n        }\n        rdx = r14 + 1;\n        if (rdx < rbp) {\n            ecx = r13d;\n            cl >>= 6;\n            cl |= 0x60;\n            cl ^= 0x50;\n            rsi = *((rsp + 0x10));\n            *((rsi + rdx)) = cl;\n        }\n        rcx = 0xe18a8fd28121d94f;\n        rdx = r14 + rcx + 2;\n        rdx -= rcx;\n        if (rdx < rbp) {\n            ecx = r13d;\n            cl >>= 3;\n            cl |= 0x30;\n            cl &= 0x37;\n            rsi = *((rsp + 0x10));\n            *((rsi + rdx)) = cl;\n        }\n        r14 = -r14;\n        esi = 3;\n        rsi -= r14;\n        ebx = r13d;\n        bl ^= 0xf8;\n        bl &= r13b;\n        edx = ebx;\n        dl = ~dl;\n        dl &= 0x4f;\n        ecx = ebx;\n        cl &= 0xb0;\n        cl |= dl;\n        cl ^= 0x7f;\n        bl &= 0x30;\n        bl |= cl;\n        dl = 1;\n        r14 = rsi;\n        r13b = bl;\n    }\n    goto label_66;\nlabel_64:\n    rcx = 0x8248105f5c633024;\n    r12 -= rcx;\n    rcx = 0xff125961f5d6ed19;\n    r14 -= rcx;\n    r14 = r14 + rcx + 1;\n    r13b = *((r10 + r9));\n    r9++;\n    if (r8b == 0) {\n        goto label_9;\n    }\nlabel_63:\n    ecx = r15d;\n    cl = ~cl;\n    cl |= 0xfe;\n    if (cl == 0xff) {\n        goto label_67;\n    }\n    if (r14 < rbp) {\n        rcx = *((rsp + 0x10));\n        *((rcx + r14)) = 0x5c;\n    }\n    r14 = -r14;\n    ecx = 1;\n    rcx -= r14;\n    r15d = 0;\n    r14 = rcx;\n    if (*((rsp + 0x50)) > r9) {\n        goto label_10;\n    }\n    goto label_66;\nlabel_67:\n    if (*((rsp + 0x50)) > r9) {\n        goto label_10;\n    }\nlabel_66:\n    r9--;\n    r12 = r9;\n    r8 = 0x62ff2d22a07dc239;\n    r9b = *((rsp + 6));\n    rdi = *((rsp + 0x10));\n    goto label_11;\nlabel_58:\n    *((rsp + 0x24)) = 0;\nlabel_57:\n    r10 = *((rsp + 0x28));\n    goto label_68;\nlabel_59:\n    r10 = *((rsp + 0x28));\n    if (r11 <= rbx) {\n        goto label_69;\n    }\n    rcx = 0xcc149a1667ee91b8;\n    do {\n        rax = *((rsp + 0x98));\n        if (*((rax + rbp)) == 0) {\n            goto label_69;\n        }\n        rbp = rbp + rcx + 1;\n        rbp -= rcx;\n        rax = rbp + r12;\n    } while (rax < r11);\nlabel_69:\n    *((rsp + 0x24)) = 0;\nlabel_68:\n    rsi = rbp;\nlabel_61:\n    ecx = *((rsp + 0x24));\n    goto label_12;\nlabel_26:\n    *((rsp + 0x48)) = rbp;\n    r11 = r12;\n    goto label_70;\nlabel_27:\n    *((rsp + 0x48)) = rbp;\n    r11 = 0xffffffffffffffff;\nlabel_70:\n    rsi = *((rsp + 0x78));\n    bl = *((rsp + 0xe));\n    rbp = *((rsp + 0xa8));\n    rdi = *((rsp + 0x30));\n    dl = (edi == 2) ? 1 : 0;\n    al = (r14 == 0) ? 1 : 0;\n    al ^= dl;\n    cl = (*((rsp + 5)) == 0) ? 1 : 0;\n    al = ~al;\n    al &= dl;\n    al ^= 1;\n    if ((cl & al) != 0) {\n        goto label_13;\n    }\n    cl ^= al;\n    if ((cl & al) != 0) {\n        goto label_13;\n    }\n    rbp = *((rsp + 0x48));\n    goto label_17;\nlabel_34:\n    rdi = *((rsp + 0x30));\n    goto label_17;\nlabel_44:\n    edi = 2;\nlabel_17:\n    al = (edi != 2) ? 1 : 0;\n    dl = *((rsp + 7));\n    cl = (dl == 0) ? 1 : 0;\n    cl ^= al;\n    eax = 4;\n    if (dl != 0) {\n        eax = edi;\n    }\n    r8d = eax;\n    if (dl == 0) {\n        r8d = edi;\n    }\n    if (edi == 2) {\n        r8d = eax;\n    }\n    r9d &= 0xfffffffd;\n    rax = quotearg_buffer_restyled (*((rsp + 0x18)), rbp, r10, r11, r8, *((rsp + 0x64)));\n    goto label_14;\nlabel_15:\n    r14 = rax;\nlabel_16:\n    return rax;\nlabel_19:\n    al = (*((rsp + 5)) == 0) ? 1 : 0;\n    rdx = *((rsp + 0x40));\n    cl = (rdx != 0) ? 1 : 0;\n    cl ^= al;\n    if (rdx != 0) {\n        goto label_71;\n    }\n    rcx = *((rsp + 0x10));\n    if (rdx == 0) {\n        goto label_72;\n    }\n    al = *(rdx);\n    rsi = *((rsp + 0x48));\n    if (al == 0) {\n        goto label_73;\n    }\n    rdx++;\n    do {\n        if (r14 < rsi) {\n            *((rcx + r14)) = al;\n        }\n        r14++;\n        eax = *(rdx);\n        rdx++;\n    } while (al != 0);\n    goto label_73;\nlabel_20:\n    quotearg_buffer_restyled (*((rsp + 0x18)), *((rsp + 0x60)), *((rsp + 0x30)), *((rsp + 0x40)), 5, *((rsp + 0x6c)));\n    goto label_14;\n    goto label_15;\nlabel_71:\n    rcx = *((rsp + 0x10));\n    rsi = *((rsp + 0x48));\n    if (r14 >= rsi) {\n        goto label_16;\n    }\n    goto label_74;\nlabel_72:\n    rsi = *((rsp + 0x48));\nlabel_73:\n    if (r14 >= rsi) {\n        goto label_16;\n    }\nlabel_74:\n    *((rcx + r14)) = 0;\n    goto label_16;\nlabel_62:\n    edi = 5;\n    goto label_17;\nlabel_23:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_alloc",
            "funcStartAddr": "0x403e50",
            "funcEndAddr": "0x403f24",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403e50 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_alloc (int64_t arg1, int64_t arg2, size_t argsize, char * buf, size_t n, quoting_options const * o, quoting_options const * p) {\n    int32_t flags;\n    int32_t e;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    rdi = arg1;\n    rsi = arg2;\n    r12 = argsize;\n    r13 = buf;\n    rbx = n;\n    rdx = o;\n    r14 = p;\n    /* char * quotearg_alloc(char const * arg,size_t argsize,quoting_options const * o); */\n    r12 = rsi;\n    rbx = rdi;\n    *((rsp + 8)) = rbx;\n    r14d = default_quoting_options;\n    if (rdx != 0) {\n        r14 = rdx;\n    }\n    rax = errno_location ();\n    *((rsp + 0x10)) = rax;\n    ecx = *(rax);\n    *((rsp + 4)) = ecx;\n    ebp = *((r14 + 4));\n    eax = *((r14 + 4));\n    eax &= 1;\n    ebp ^= 1;\n    ebp |= eax;\n    r15 = r14 + 8;\n    quotearg_buffer_restyled (0, 0, rbx, r12, *(r14), ebp);\n    rcx = 0x6cc8fdb62f6074db;\n    rbx = rax + rcx + 1;\n    rbx -= rcx;\n    rax = xmalloc (rbx);\n    r13 = rax;\n    quotearg_buffer_restyled (r13, rbx, *((rsp + 0x10)), r12, *(r14), ebp);\n    eax = *((rsp + 4));\n    rcx = *((rsp + 0x10));\n    *(rcx) = eax;\n    rax = r13;\n    return rax;\n}\n"
        },
        {
            "funcName": "quotearg_alloc_mem",
            "funcStartAddr": "0x403f30",
            "funcEndAddr": "0x40404c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403f30 */\n#include <stdint.h>\n \nuint64_t quotearg_alloc_mem (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rbx = rdx;\n    *((rsp + 0x18)) = rbx;\n    r14 = rsi;\n    *((rsp + 0x10)) = r14;\n    r15 = rdi;\n    *((rsp + 8)) = r15;\n    r12d = default_quoting_options;\n    if (rcx != 0) {\n        r12 = rcx;\n    }\n    rax = errno_location ();\n    *((rsp + 0x20)) = rax;\n    ecx = *(rax);\n    *((rsp + 4)) = ecx;\n    eax = *((r12 + 4));\n    ecx = 0;\n    cl = (rbx == 0) ? 1 : 0;\n    edx = eax;\n    edx = ~edx;\n    ebp = ~ebp;\n    ebp |= edx;\n    edx &= 0x5530148e;\n    eax &= 0xaacfeb71;\n    eax |= edx;\n    ecx |= 0x5530148e;\n    ecx ^= eax;\n    ebp = ~ebp;\n    ebp |= ecx;\n    r13 = r12 + 8;\n    rax = quotearg_buffer_restyled (0, 0, r15, r14, *(r12), ebp);\n    rbx = rax;\n    rax = 0x171b95faa836514e;\n    r15 = rbx + rax + 1;\n    r15 -= rax;\n    rax = xmalloc (r15);\n    r14 = rax;\n    quotearg_buffer_restyled (r14, r15, *((rsp + 0x10)), *((rsp + 0x18)), *(r12), ebp);\n    rax = *((rsp + 0x38));\n    ecx = *((rsp + 4));\n    rdx = *((rsp + 0x20));\n    *(rdx) = ecx;\n    if (rax != 0) {\n        *(rax) = rbx;\n    }\n    rax = r14;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_free",
            "funcStartAddr": "0x404050",
            "funcEndAddr": "0x4040fd",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404050 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_free (slotvec * sv) {\n    r14 = sv;\n    /* void quotearg_free(); */\n    r14 = slotvec;\n    if (*(obj.nslots) < 2) {\n        goto label_0;\n    }\n    r12 = r14 + 0x18;\n    r15 = 0x905b268215148d50;\n    ebx = 1;\n    do {\n        free (*(r12));\n        rbx = rbx + r15 + 1;\n        rbx -= r15;\n        rax = *(obj.nslots);\n        r12 += 0x10;\n    } while (rbx < rax);\nlabel_0:\n    rdi = *((r14 + 8));\n    eax = slot0;\n    if (rdi != rax) {\n        free (rdi);\n        *(obj.slotvec0) = 0x100;\n        *(obj.slot0) = 0x40a2d0;\n    }\n    eax = slotvec0;\n    if (r14 != rax) {\n        free (r14);\n        *(obj.slotvec) = 0x40a1c0;\n    }\n    *(obj.nslots) = 1;\n    return rax;\n}\n"
        },
        {
            "funcName": "quotearg_n",
            "funcStartAddr": "0x404100",
            "funcEndAddr": "0x40410e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404100 */\n#include <stdint.h>\n \nvoid quotearg_n (int64_t arg1, int64_t arg2) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = 0xffffffffffffffff;\n    ecx = default_quoting_options;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_n_options",
            "funcStartAddr": "0x404110",
            "funcEndAddr": "0x4042dd",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404110 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_n_options (char const * arg, int64_t arg1, int64_t arg3, int64_t arg4, int32_t e, size_t n, quoting_options const * options, slotvec * sv, char * val) {\n    int32_t flags;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    uint32_t var_30h;\n    rsi = arg;\n    rdi = arg1;\n    rdx = arg3;\n    rcx = arg4;\n    rax = e;\n    r15 = n;\n    rbx = options;\n    r14 = sv;\n    r12 = val;\n    /* char * quotearg_n_options(int n,char const * arg,size_t argsize,quoting_options const * options); */\n    rbx = rcx;\n    r15 = rdx;\n    *((rsp + 0x20)) = rsi;\n    r12d = edi;\n    rax = errno_location ();\n    if (r12d >= 0) {\n        eax = *(rbp);\n        r14 = slotvec;\n        *((rsp + 0x18)) = rbp;\n        *((rsp + 4)) = eax;\n        *((rsp + 0x10)) = rbx;\n        *((rsp + 8)) = r15;\n        if (*(obj.nslots) <= r12d) {\n            if (r12d == 0x7fffffff) {\n                goto label_0;\n            }\n            ebx = slotvec0;\n            edi = 0;\n            if (r14 != rbx) {\n                rdi = r14;\n            }\n            r15d = r12 + 1;\n            rsi = (int64_t) r15d;\n            rsi <<= 4;\n            rax = xrealloc ();\n            r13 = rax;\n            *(obj.slotvec) = r13;\n            if (r14 == rbx) {\n                __asm (\"movups xmm0, xmmword [obj.slotvec0]\");\n                __asm (\"movups xmmword [r13], xmm0\");\n            }\n            rax = *(obj.nslots);\n            ecx = r15 + 0x5dbcb3;\n            ecx -= eax;\n            rax <<= 4;\n            rdi += rax;\n            ecx += 0xffa2434d;\n            rdx = (int64_t) ecx;\n            rdx <<= 4;\n            memset (r13, 0, rdx);\n            *(obj.nslots) = r15d;\n            r14 = r13;\n            rbx = *((rsp + 0x10));\n            r15 = *((rsp + 8));\n        }\n        r13 = (int64_t) r12d;\n        r13 <<= 4;\n        *((rsp + 0x30)) = rsi;\n        r12 = *((r14 + r13 + 8));\n        ebp = *((rbx + 4));\n        eax = *((rbx + 4));\n        eax &= 1;\n        ebp ^= 1;\n        ebp |= eax;\n        rax = rbx + 8;\n        *((rsp + 0x40)) = rax;\n        rax = quotearg_buffer_restyled (r12, *((r14 + r13)), *((rsp + 0x28)), r15, *(rbx), ebp);\n        r15 = rax;\n        if (*((rsp + 0x30)) > r15) {\n            rax = *((rsp + 0x18));\n            ebx = *((rsp + 4));\n        } else {\n            rax = r14 + r13;\n            r14 = r14 + r13 + 8;\n            r15++;\n            *(rax) = r15;\n            eax = slot0;\n            ebx = *((rsp + 4));\n            if (r12 != rax) {\n                free (r12);\n            }\n            rax = xmalloc (r15);\n            r12 = rax;\n            *(r14) = r12;\n            rax = *((rsp + 0x10));\n            quotearg_buffer_restyled (r12, r15, *((rsp + 0x28)), *((rsp + 0x10)), *(rax), ebp);\n            rax = *((rsp + 0x18));\n        }\n        *(rax) = ebx;\n        rax = r12;\n        return rax;\n    }\n    abort ();\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "quotearg_n_mem",
            "funcStartAddr": "0x4042e0",
            "funcEndAddr": "0x4042ea",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4042e0 */\n#include <stdint.h>\n \nvoid quotearg_n_mem (int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = default_quoting_options;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg",
            "funcStartAddr": "0x4042f0",
            "funcEndAddr": "0x404309",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4042f0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg (char const * arg, int64_t arg1) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rax = arg;\n    rdi = arg1;\n    /* char * quotearg(char const * arg); */\n    rax = rdi;\n    edi = 0;\n    rdx = 0xffffffffffffffff;\n    ecx = default_quoting_options;\n    rsi = rax;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_mem",
            "funcStartAddr": "0x404310",
            "funcEndAddr": "0x404328",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404310 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_mem (char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    /* char * quotearg_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    edi = 0;\n    ecx = default_quoting_options;\n    rsi = rdx;\n    rdx = rax;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "quotearg_n_style",
            "funcStartAddr": "0x404330",
            "funcEndAddr": "0x40439c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404330 */\n#include <stdint.h>\n \nint64_t quotearg_n_style (int64_t arg1, uint32_t arg2, int64_t arg3) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rax = rdx;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        *((rsp + 0x40)) = esi;\n        ecx = *((rsp + 0x30));\n        *((rsp + 0x74)) = ecx;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        rcx = rsp + 0x40;\n        quotearg_n_options (rdi, rax, 0xffffffffffffffff);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_n_style_mem",
            "funcStartAddr": "0x4043a0",
            "funcEndAddr": "0x404408",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4043a0 */\n#include <stdint.h>\n \nuint64_t quotearg_n_style_mem (int64_t arg1, uint32_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        *((rsp + 0x40)) = esi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        rax = rsp + 0x40;\n        rcx = rax;\n        quotearg_n_options (rdi, rdx, rcx);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_style",
            "funcStartAddr": "0x404410",
            "funcEndAddr": "0x404478",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404410 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_style (char const * arg, quoting_style style) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rsi = arg;\n    rdi = style;\n    /* char * quotearg_style(quoting_style s,char const * arg); */\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (edi != 0xa) {\n        *((rsp + 0x40)) = edi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        rcx = rsp + 0x40;\n        quotearg_n_options (0, rsi, 0xffffffffffffffff);\n        return eax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_style_mem",
            "funcStartAddr": "0x404480",
            "funcEndAddr": "0x4044e1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404480 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_style_mem (char const * arg, size_t argsize, quoting_style style) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rsi = arg;\n    rdx = argsize;\n    rdi = style;\n    /* char * quotearg_style_mem(quoting_style s,char const * arg,size_t argsize); */\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (edi != 0xa) {\n        *((rsp + 0x40)) = edi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        rcx = rsp + 0x40;\n        quotearg_n_options (0, rsi, rdx);\n        return eax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_char_mem",
            "funcStartAddr": "0x4044f0",
            "funcEndAddr": "0x404581",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4044f0 */\n#include <stdint.h>\n \nint32_t quotearg_char_mem (int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = edx;\n    r8 = rsi;\n    r9 = rdi;\n    rsi = .comment;\n    *((rsp + 0x30)) = rsi;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    eax = ecx;\n    al >>= 5;\n    esi = (int32_t) al;\n    eax = *((rsp + rsi*4 + 8));\n    edx = *((rsp + rsi*4 + 8));\n    edx >>= cl;\n    edi = edx;\n    edi ^= 0xfffffffe;\n    edi &= edx;\n    edx = edi;\n    edx = ~edx;\n    edx &= 0x16b9b0e9;\n    edi &= 0xe9464f16;\n    edi |= edx;\n    edi ^= 0x16b9b0e8;\n    edi <<= cl;\n    ecx = edi;\n    ecx = ~ecx;\n    ecx &= eax;\n    eax = ~eax;\n    eax &= edi;\n    eax |= ecx;\n    *((rsp + rsi*4 + 8)) = eax;\n    rcx = rsp;\n    quotearg_n_options (0, r9, r8);\n    return eax;\n}\n"
        },
        {
            "funcName": "quotearg_char",
            "funcStartAddr": "0x404590",
            "funcEndAddr": "0x404627",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404590 */\n#include <stdint.h>\n \nint32_t quotearg_char (int64_t arg1, int64_t arg2) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    r8 = rdi;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    ecx = esi;\n    cl ^= 0xe0;\n    cl &= sil;\n    edx = esi;\n    dl >>= 5;\n    edx = (int32_t) dl;\n    esi = *((rsp + rdx*4 + 8));\n    edi = *((rsp + rdx*4 + 8));\n    edi >>= cl;\n    edi = ~edi;\n    edi &= 1;\n    edi <<= cl;\n    ecx = edi;\n    ecx = ~ecx;\n    ecx &= 0x192d388;\n    edi &= 0xfe6d2c77;\n    eax = esi;\n    eax = ~eax;\n    eax &= 0x192d388;\n    esi &= 0xfe6d2c77;\n    edi |= ecx;\n    esi |= eax;\n    esi ^= edi;\n    *((rsp + rdx*4 + 8)) = esi;\n    rcx = rsp;\n    quotearg_n_options (0, r8, 0xffffffffffffffff);\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_colon",
            "funcStartAddr": "0x404630",
            "funcEndAddr": "0x404697",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404630 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_colon (char const * arg, int64_t arg1, quoting_options * o) {\n    quoting_options options;\n    int64_t var_ch;\n    int64_t var_10h;\n    int64_t var_20h;\n    rax = arg;\n    rdi = arg1;\n    rcx = o;\n    /* char * quotearg_colon(char const * arg); */\n    rax = rdi;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    ecx = *((rsp + 0xc));\n    edx = *((rsp + 0xc));\n    edx &= 0x4000000;\n    ecx ^= 0x4000000;\n    ecx |= edx;\n    *((rsp + 0xc)) = ecx;\n    rcx = rsp;\n    quotearg_n_options (0, rax, 0xffffffffffffffff);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_colon_mem",
            "funcStartAddr": "0x4046a0",
            "funcEndAddr": "0x404706",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4046a0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_colon_mem (char const * arg, int64_t arg1, int64_t arg2, size_t argsize, quoting_options * o) {\n    quoting_options options;\n    int64_t var_ch;\n    int64_t var_10h;\n    int64_t var_20h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    rcx = o;\n    /* char * quotearg_colon_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    ecx = *((rsp + 0xc));\n    esi = *((rsp + 0xc));\n    esi &= 0x4000000;\n    ecx ^= 0x4000000;\n    ecx |= esi;\n    *((rsp + 0xc)) = ecx;\n    rcx = rsp;\n    quotearg_n_options (0, rdx, rax);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_n_style_colon",
            "funcStartAddr": "0x404710",
            "funcEndAddr": "0x4047b7",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404710 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_n_style_colon (char const * arg, int64_t arg3, int32_t n, quoting_options * o, quoting_style style) {\n    quoting_options options;\n    int64_t var_ch;\n    int64_t var_10h;\n    int64_t var_14h;\n    int64_t var_20h;\n    int64_t var_24h;\n    int64_t var_34h;\n    int64_t var_40h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    rax = arg;\n    rdx = arg3;\n    rdi = n;\n    rcx = o;\n    rsi = style;\n    /* char * quotearg_n_style_colon(int n,quoting_style s,char const * arg); */\n    rax = rdx;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        ecx = *((rsp + 0x30));\n        *((rsp + 0x70)) = ecx;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        *((rsp + 0x60)) = xmm2;\n        *((rsp + 0x50)) = xmm1;\n        *((rsp + 0x40)) = xmm0;\n        *(rsp) = esi;\n        ecx = *((rsp + 0x70));\n        *((rsp + 0x34)) = ecx;\n        xmm0 = *((rsp + 0x40));\n        xmm1 = *((rsp + 0x50));\n        xmm2 = *((rsp + 0x60));\n        __asm (\"movups xmmword [rsp + 0x24], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x14], xmm1\");\n        __asm (\"movups xmmword [rsp + 4], xmm0\");\n        ecx = *((rsp + 0xc));\n        edx = *((rsp + 0xc));\n        edx &= 0x4000000;\n        ecx ^= 0x4000000;\n        ecx |= edx;\n        *((rsp + 0xc)) = ecx;\n        rcx = rsp;\n        quotearg_n_options (rdi, rax, 0xffffffffffffffff);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_n_custom",
            "funcStartAddr": "0x4047c0",
            "funcEndAddr": "0x40483a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4047c0 */\n#include <stdint.h>\n \nint64_t quotearg_n_custom (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    r8b = (rsi != 0) ? 1 : 0;\n    al = (rdx != 0) ? 1 : 0;\n    al ^= r8b;\n    if (rdx == 0) {\n        if (rsi == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rsi;\n        *((rsp + 0x30)) = rdx;\n        rax = rsp;\n        rcx = rax;\n        quotearg_n_options (rdi, rcx, 0xffffffffffffffff);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_n_custom_mem",
            "funcStartAddr": "0x404840",
            "funcEndAddr": "0x4048b9",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404840 */\n#include <stdint.h>\n \nint64_t quotearg_n_custom_mem (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    r9b = (rsi == 0) ? 1 : 0;\n    al = (rdx == 0) ? 1 : 0;\n    al |= r9b;\n    if (al != 1) {\n        al = 1;\n        if (al == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rsi;\n        *((rsp + 0x30)) = rdx;\n        rax = rsp;\n        rcx = rax;\n        quotearg_n_options (rdi, rcx, r8);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_custom",
            "funcStartAddr": "0x4048c0",
            "funcEndAddr": "0x40493e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4048c0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_custom (char const * arg, int64_t arg3, char const * left_quote, char const * right_quote) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    rax = arg;\n    rdx = arg3;\n    rdi = left_quote;\n    rsi = right_quote;\n    /* char * quotearg_custom(char const * left_quote,char const * right_quote,char const * arg); */\n    rax = rdx;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    cl = (rdi == 0) ? 1 : 0;\n    dl = (rsi == 0) ? 1 : 0;\n    dl |= cl;\n    if (dl != 1) {\n        cl = 1;\n        if (cl == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rdi;\n        *((rsp + 0x30)) = rsi;\n        rcx = rsp;\n        quotearg_n_options (0, rax, 0xffffffffffffffff);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_custom_mem",
            "funcStartAddr": "0x404940",
            "funcEndAddr": "0x4049bb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404940 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_custom_mem (char const * arg, size_t argsize, char const * left_quote, char const * right_quote) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    rdx = arg;\n    rcx = argsize;\n    rdi = left_quote;\n    rsi = right_quote;\n    /* char * quotearg_custom_mem(char const * left_quote,char const * right_quote,char const * arg,size_t argsize); */\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x0040a2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040a2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    r8b = (rdi == 0) ? 1 : 0;\n    al = (rsi == 0) ? 1 : 0;\n    al |= r8b;\n    if (al != 1) {\n        al = 1;\n        if (al == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rdi;\n        *((rsp + 0x30)) = rsi;\n        rax = rsp;\n        rcx = rax;\n        quotearg_n_options (0, rdx, rcx);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "quote_n_mem",
            "funcStartAddr": "0x4049c0",
            "funcEndAddr": "0x4049ca",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4049c0 */\n#include <stdint.h>\n \nvoid quote_n_mem (int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = quote_quoting_options;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "dbg_quote_mem",
            "funcStartAddr": "0x4049d0",
            "funcEndAddr": "0x4049e8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4049d0 */\n#include <stdint.h>\n \nint64_t dbg_quote_mem (char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    /* char const * quote_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    edi = 0;\n    ecx = quote_quoting_options;\n    rsi = rdx;\n    rdx = rax;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "quote_n",
            "funcStartAddr": "0x4049f0",
            "funcEndAddr": "0x404a01",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4049f0 */\n#include <stdint.h>\n \nvoid quote_n (int64_t arg1, int64_t arg2) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = 0xffffffffffffffff;\n    ecx = quote_quoting_options;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "dbg_quote",
            "funcStartAddr": "0x404a10",
            "funcEndAddr": "0x404a29",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404a10 */\n#include <stdint.h>\n \nint64_t dbg_quote (char const * arg, int64_t arg1) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_30h;\n    rax = arg;\n    rdi = arg1;\n    /* char const * quote(char const * arg); */\n    rax = rdi;\n    edi = 0;\n    rdx = 0xffffffffffffffff;\n    ecx = quote_quoting_options;\n    rsi = rax;\n    return void (*0x404110)() ();\n}\n"
        },
        {
            "funcName": "dbg_gettext_quote",
            "funcStartAddr": "0x404a30",
            "funcEndAddr": "0x404b01",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404a30 */\n#include <stdint.h>\n \nuint64_t dbg_gettext_quote (int64_t arg1, int64_t arg2, char const * locale_code, char const * msgid) {\n    quoting_style s;\n    rdi = arg1;\n    rsi = arg2;\n    rax = locale_code;\n    rbx = msgid;\n    /* char const * gettext_quote(char const * msgid,quoting_style s); */\n    rbx = rdi;\n    edx = 5;\n    rax = dcgettext (0, rbx);\n    if (rax != rbx) {\n        goto label_0;\n    }\n    rax = locale_charset ();\n    edx = *(rax);\n    ecx = edx;\n    ecx ^= 0x20;\n    ecx &= edx;\n    if (ecx != 0x47) {\n        if (ecx == 0x55) {\n            ecx = *((rax + 1));\n            edx = ecx;\n            edx ^= 0x20;\n            edx &= ecx;\n            if (edx != 0x54) {\n                goto label_1;\n            }\n            ecx = *((rax + 2));\n            ecx = ~ecx;\n            ecx |= 0x20;\n            if (ecx != 0xffffffb9) {\n                goto label_1;\n            }\n            if (*((rax + 3)) != 0x2d) {\n                goto label_1;\n            }\n            if (*((rax + 4)) != 0x38) {\n                goto label_1;\n            }\n            if (*((rax + 5)) != 0) {\n                goto label_1;\n            }\n            ecx = 0x40797a;\n            eax = 0x40797e;\n        } else {\n            ecx = *((rax + 1));\n            ecx = ~ecx;\n            ecx |= 0x20;\n            if (ecx != 0xffffffbd) {\n                goto label_1;\n            }\n            if (*((rax + 2)) != 0x31) {\n                goto label_1;\n            }\n            if (*((rax + 3)) != 0x38) {\n                goto label_1;\n            }\n            if (*((rax + 4)) != 0x30) {\n                goto label_1;\n            }\n            if (*((rax + 5)) != 0x33) {\n                goto label_1;\n            }\n            if (*((rax + 6)) != 0x30) {\n                goto label_1;\n            }\n            if (*((rax + 7)) == 0) {\n                goto label_2;\n            }\n        }\nlabel_1:\n        ecx = 0x407974;\n        eax = 0x407978;\n    }\n    do {\n        if (ebp == 9) {\n            rax = rcx;\n        }\nlabel_0:\n        return rax;\nlabel_2:\n        ecx = 0x407982;\n        eax = 0x407986;\n    } while (1);\n}\n"
        },
        {
            "funcName": "dbg_version_etc_arn",
            "funcStartAddr": "0x404b10",
            "funcEndAddr": "0x404e68",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404b10 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc_arn (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg5, char const * const * authors, char const * command_name, size_t n_authors, char const * package, FILE * stream, char const * version) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r8 = arg5;\n    r15 = authors;\n    rcx = command_name;\n    r12 = n_authors;\n    rbx = package;\n    r14 = stream;\n    r9 = version;\n    /* void version_etc_arn(FILE * stream,char const * command_name,char const * package,char const * version,char const * const * authors,size_t n_authors); */\n    r12 = r9;\n    r15 = r8;\n    r9 = rcx;\n    rbx = rdx;\n    rcx = rsi;\n    r14 = rdi;\n    esi = 1;\n    if (rcx != 0) {\n        edx = \"%s (%s) %s\\n\";\n        eax = 0;\n        rdi = r14;\n        r8 = rbx;\n        eax = fprintf_chk ();\n    } else {\n        edx = \"%s %s\\n\";\n        eax = 0;\n        rdi = r14;\n        rcx = rbx;\n        r8 = r9;\n        fprintf_chk ();\n    }\n    edx = 5;\n    rax = dcgettext (0, 0x4079f3);\n    rcx = rax;\n    esi = 1;\n    edx = \"Copyright %s %d Free Software Foundation, Inc.\";\n    r8d = 0x7e3;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\");\n    rdi = rax;\n    rsi = r14;\n    fputs_unlocked ();\n    if (r12 <= 9) {\n        /* switch table (10 cases) at 0x407990 */\n    } else {\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x4022d0)() ();\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x4022d0)() ();\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x4022d0)() ();\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\nand %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n    }\nlabel_0:\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_version_etc_ar",
            "funcStartAddr": "0x404e70",
            "funcEndAddr": "0x404e94",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404e70 */\n#include <stdint.h>\n \nint64_t dbg_version_etc_ar (char const * const * authors, char const * command_name, char const * package, FILE * stream, char const * version) {\n    r8 = authors;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc_ar(FILE * stream,char const * command_name,char const * package,char const * version,char const * const * authors); */\n    r9 = 0xffffffffffffffff;\n    eax = 0;\n    do {\n        rax++;\n        r9 = r9 + 1;\n    } while (*((r8 + r9*8 + 8)) != 0);\n    return void (*0x404b10)() ();\n}\n"
        },
        {
            "funcName": "dbg_version_etc_va",
            "funcStartAddr": "0x404ea0",
            "funcEndAddr": "0x405098",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404ea0 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc_va (__va_list_tag * authors, char const * command_name, char const * package, FILE * stream, char const * version) {\n    char const *[11] authtab;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    int64_t var_38h;\n    int64_t var_40h;\n    int64_t var_48h;\n    r8 = authors;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc_va(FILE * stream,char const * command_name,char const * package,char const * version,__va_list_tag * authors); */\n    r10 = *(r8);\n    if (r10 <= 0x28) {\n        r9 = r10;\n        r9 += *((r8 + 0x10));\n        r10d = r10 + 8;\n        *(r8) = r10d;\n    } else {\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r9);\n    *(rsp) = rax;\n    if (rax != 0) {\n        if (r10d < 0x29) {\n            r9 = (int64_t) r10d;\n            r9 += *((r8 + 0x10));\n            r10d += 8;\n            *(r8) = r10d;\n        } else {\n            r9d = 0;\n            goto label_0;\n        }\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r9);\n    *((rsp + 8)) = rax;\n    if (rax != 0) {\n        if (r10d < 0x29) {\n            r9 = (int64_t) r10d;\n            r9 += *((r8 + 0x10));\n            r10d += 8;\n            *(r8) = r10d;\n        } else {\n            r9d = 1;\n            goto label_0;\n        }\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r9);\n    *((rsp + 0x10)) = rax;\n    if (rax != 0) {\n        if (r10d < 0x29) {\n            r9 = (int64_t) r10d;\n            r9 += *((r8 + 0x10));\n            r10d += 8;\n            *(r8) = r10d;\n        } else {\n            r9d = 2;\n            goto label_0;\n        }\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r9);\n    *((rsp + 0x18)) = rax;\n    if (rax != 0) {\n        if (r10d < 0x29) {\n            r9 = (int64_t) r10d;\n            r9 += *((r8 + 0x10));\n            r10d = -r10d;\n            eax = 8;\n            eax -= r10d;\n            *(r8) = eax;\n            r10d = eax;\n        } else {\n            r9d = 3;\n            goto label_0;\n        }\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r9);\n    *((rsp + 0x20)) = rax;\n    if (rax != 0) {\n        if (r10d < 0x29) {\n            r9 = (int64_t) r10d;\n            r9 += *((r8 + 0x10));\n            r10d += 8;\n            *(r8) = r10d;\n        } else {\n            r9d = 4;\n            goto label_0;\n        }\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r9);\n    *((rsp + 0x28)) = rax;\n    if (rax != 0) {\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n        rax = *(r9);\n        *((rsp + 0x30)) = rax;\n        if (rax != 0) {\n            r9 = *((r8 + 8));\n            rax = r9 + 8;\n            *((r8 + 8)) = rax;\n            rax = *(r9);\n            *((rsp + 0x38)) = rax;\n            if (rax != 0) {\n                r9 = *((r8 + 8));\n                rax = r9 + 8;\n                *((r8 + 8)) = rax;\n                rax = *(r9);\n                *((rsp + 0x40)) = rax;\n                if (rax != 0) {\n                    r9 = *((r8 + 8));\n                    rax = r9 + 8;\n                    *((r8 + 8)) = rax;\n                    rax = *(r9);\n                    *((rsp + 0x48)) = rax;\n                    r9d = 9;\n                    r9 -= 0xffffffffffffffff;\n                } else {\n                    r9d = 5;\n                } else {\n                    r9d = 6;\n                }\n            } else {\n                r9d = 7;\n            }\n        } else {\n            r9d = 8;\n        }\n    }\nlabel_0:\n    r8 = rsp;\n    version_etc_arn (rdi, rsi, rdx, rcx);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_version_etc",
            "funcStartAddr": "0x4050a0",
            "funcEndAddr": "0x405122",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4050a0 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc (int64_t arg_e0h, int64_t arg10, int64_t arg11, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, char const * command_name, char const * package, FILE * stream, char const * version) {\n    va_list authors;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_48h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    int64_t var_80h;\n    int64_t var_90h;\n    int64_t var_a0h;\n    int64_t var_b0h;\n    int64_t var_c0h;\n    xmm3 = arg10;\n    xmm4 = arg11;\n    r8 = arg5;\n    r9 = arg6;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc(FILE * stream,char const * command_name,char const * package,char const * version,va_args ...); */\n    if (al != 0) {\n        *((rsp + 0x50)) = xmm0;\n        *((rsp + 0x60)) = xmm1;\n        *((rsp + 0x70)) = xmm2;\n        *((rsp + 0x80)) = xmm3;\n        *((rsp + 0x90)) = xmm4;\n        *((rsp + 0xa0)) = xmm5;\n        *((rsp + 0xb0)) = xmm6;\n        *((rsp + 0xc0)) = xmm7;\n    }\n    *((rsp + 0x48)) = r9;\n    *((rsp + 0x40)) = r8;\n    rax = rsp + 0x20;\n    *((rsp + 0x10)) = rax;\n    rax = rsp + 0xe0;\n    *((rsp + 8)) = rax;\n    *((rsp + 4)) = 0x30;\n    *(rsp) = 0x20;\n    r8 = rsp;\n    version_etc_va ();\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_emit_bug_reporting_address",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x4051a4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405130 */\n#include <stdint.h>\n \nvoid dbg_emit_bug_reporting_address (void) {\n    /* void emit_bug_reporting_address(); */\n    edx = 5;\n    rax = dcgettext (0, \"\\nReport bugs to: %s\\n\");\n    rcx = rax;\n    edi = 1;\n    edx = \"bug-coreutils@gnu.org\";\n    eax = 0;\n    rsi = rcx;\n    printf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"%s home page: <%s>\\n\");\n    rsi = rax;\n    edi = 1;\n    edx = \"GNU coreutils\";\n    ecx = \"https://www.gnu.org/software/coreutils/\";\n    eax = 0;\n    printf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\");\n    rsi = stdout;\n    rdi = rax;\n    return fputs_unlocked ();\n}\n"
        },
        {
            "funcName": "dbg_xnmalloc",
            "funcStartAddr": "0x4051b0",
            "funcEndAddr": "0x4051f4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4051b0 */\n#include <stdint.h>\n \nint64_t dbg_xnmalloc (uint32_t arg1, int64_t arg2, size_t n, void * p) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = n;\n    rax = p;\n    /* void * xnmalloc(size_t n,size_t s); */\n    rbx = rsi;\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rbx;\n    rdx = rdx:rax % rbx;\n    if (rax >= rdi) {\n        rbx *= rdi;\n        rax = malloc (rbx);\n        cl = (rbx == 0) ? 1 : 0;\n        dl = (rax != 0) ? 1 : 0;\n        dl |= cl;\n        if (dl != 1) {\n            cl = 1;\n            if (cl != 0) {\n                goto label_0;\n            }\n        }\n        return rax;\n    }\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "xmalloc",
            "funcStartAddr": "0x405200",
            "funcEndAddr": "0x405225",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405200 */\n#include <stdint.h>\n \nuint64_t xmalloc (size_t size) {\n    rdi = size;\n    rbx = rdi;\n    rax = malloc (rdi);\n    cl = (rax == 0) ? 1 : 0;\n    dl = (rbx != 0) ? 1 : 0;\n    dl ^= cl;\n    if (rbx == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xnrealloc",
            "funcStartAddr": "0x405230",
            "funcEndAddr": "0x405292",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405230 */\n#include <stdint.h>\n \nint64_t dbg_xnrealloc (int64_t arg1, uint32_t arg2, int64_t arg3, size_t n, void * p) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = n;\n    rax = p;\n    /* void * xnrealloc(void * p,size_t n,size_t s); */\n    rbx = rdx;\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rbx;\n    rdx = rdx:rax % rbx;\n    if (rax >= rsi) {\n        rbx *= rsi;\n        al = (rbx == 0) ? 1 : 0;\n        cl = (rdi != 0) ? 1 : 0;\n        cl ^= al;\n        if (rdi == 0) {\n            if (rdi == 0) {\n                goto label_0;\n            }\n            eax = free (rdi);\n            eax = 0;\n            return rax;\n        }\nlabel_0:\n        rax = realloc (rdi, rbx);\n        cl = (rbx == 0) ? 1 : 0;\n        dl = (rax != 0) ? 1 : 0;\n        dl |= cl;\n        if (dl != 1) {\n            cl = 1;\n            if (cl != 0) {\n                goto label_1;\n            }\n        }\n        return rax;\n    }\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "xrealloc",
            "funcStartAddr": "0x4052a0",
            "funcEndAddr": "0x4052f6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4052a0 */\n#include <stdint.h>\n \nuint64_t xrealloc (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = rsi;\n    al = (rdi == 0) ? 1 : 0;\n    cl = (rbx != 0) ? 1 : 0;\n    cl |= al;\n    bpl = 1;\n    if (cl != 1) {\n        if (bpl != 0) {\n            eax = free (rdi);\n            eax = 0;\n        }\n    } else {\n        rax = realloc (rdi, rbx);\n        cl = (rbx == 0) ? 1 : 0;\n        dl = (rax != 0) ? 1 : 0;\n        dl |= cl;\n        if (dl == 1) {\n            goto label_0;\n        }\n        if (bpl != 0) {\n            goto label_1;\n        }\n    }\nlabel_0:\n    return rax;\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "x2nrealloc",
            "funcStartAddr": "0x405300",
            "funcEndAddr": "0x4053e5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405300 */\n#include <stdint.h>\n \nint64_t x2nrealloc (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = rdx;\n    rcx = *(rsi);\n    if (rdi != 0) {\n        rax = 0x5555555555555554;\n        edx = 0;\n        rax = rdx:rax / rbx;\n        rdx = rdx:rax % rbx;\n        if (rax <= rcx) {\n            goto label_0;\n        }\n        rax = rcx;\n        rax >>= 1;\n        rcx++;\n        rdx = 0x3d08f1964b422ef1;\n        rcx -= rdx;\n        rcx += rax;\n        rcx += rdx;\n    } else {\n        if (rcx == 0) {\n            eax = 0x80;\n            edx = 0;\n            rax = rdx:rax / rbx;\n            rdx = rdx:rax % rbx;\n            rcx = rax;\n            eax = 0;\n            al = (rbx > 0x80) ? 1 : 0;\n            rdx = 0xb4a80e1fe7938091;\n            rcx -= rdx;\n            rcx += rax;\n            rcx += rdx;\n        }\n        rax = 0x7fffffffffffffff;\n        edx = 0;\n        rax = rdx:rax / rbx;\n        rdx = rdx:rax % rbx;\n        if (rax < rcx) {\n            goto label_1;\n        }\n    }\n    *(rsi) = rcx;\n    rbx *= rcx;\n    al = (rdi == 0) ? 1 : 0;\n    cl = (rbx != 0) ? 1 : 0;\n    cl |= al;\n    bpl = 1;\n    if (cl != 1) {\n        if (bpl != 0) {\n            eax = free (rdi);\n            eax = 0;\n        }\n    } else {\n        rax = realloc (rdi, rbx);\n        cl = (rbx == 0) ? 1 : 0;\n        dl = (rax != 0) ? 1 : 0;\n        dl |= cl;\n        if (dl == 1) {\n            goto label_2;\n        }\n        if (bpl != 0) {\n            goto label_0;\n        }\n    }\nlabel_2:\n    return rax;\nlabel_0:\n    xalloc_die ();\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xcharalloc",
            "funcStartAddr": "0x4053f0",
            "funcEndAddr": "0x405415",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4053f0 */\n#include <stdint.h>\n \nuint64_t dbg_xcharalloc (int64_t arg1, size_t n, void * p) {\n    rdi = arg1;\n    rbx = n;\n    rax = p;\n    /* char * xcharalloc(size_t n); */\n    rbx = rdi;\n    rax = malloc (rdi);\n    cl = (rax == 0) ? 1 : 0;\n    dl = (rbx != 0) ? 1 : 0;\n    dl ^= cl;\n    if (rbx == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_x2realloc",
            "funcStartAddr": "0x405420",
            "funcEndAddr": "0x405497",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405420 */\n#include <stdint.h>\n \nint64_t dbg_x2realloc (int64_t arg1, size_t n, void * p, size_t * pn) {\n    rdi = arg1;\n    rbx = n;\n    rax = p;\n    rsi = pn;\n    /* void * x2realloc(void * p,size_t * pn); */\n    rax = *(rsi);\n    if (rdi != 0) {\n        rcx = 0x5555555555555554;\n        if (rax >= rcx) {\n            goto label_0;\n        }\n        rcx = rax;\n        rcx >>= 1;\n        rcx = -rcx;\n        rcx = -rcx;\n        rbx = rax + rcx + 1;\n        *(rsi) = rbx;\n        if (rbx != 0) {\n            goto label_1;\n        }\n        eax = free (rdi);\n        eax = 0;\n        return rax;\n    }\n    ebx = 0x80;\n    if (rax != 0) {\n        rbx = rax;\n    }\n    if (rbx >= 0) {\n        *(rsi) = rbx;\nlabel_1:\n        rax = realloc (rdi, rbx);\n        cl = (rax == 0) ? 1 : 0;\n        dl = (rbx != 0) ? 1 : 0;\n        dl ^= cl;\n        if (rbx == 0) {\n            if (rbx != 0) {\n                goto label_2;\n            }\n        }\n        return rax;\n    }\nlabel_2:\n    xalloc_die ();\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xzalloc",
            "funcStartAddr": "0x4054a0",
            "funcEndAddr": "0x4054e1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4054a0 */\n#include <stdint.h>\n \nuint64_t dbg_xzalloc (int64_t arg1, size_t n, void * p) {\n    rdi = arg1;\n    rbx = n;\n    r14 = p;\n    /* void * xzalloc(size_t s); */\n    rbx = rdi;\n    rax = malloc (rdi);\n    r14 = rax;\n    al = (r14 == 0) ? 1 : 0;\n    cl = (rbx != 0) ? 1 : 0;\n    cl ^= al;\n    if (rbx == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    memset (r14, 0, rbx);\n    rax = r14;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xcalloc",
            "funcStartAddr": "0x4054f0",
            "funcEndAddr": "0x405516",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4054f0 */\n#include <stdint.h>\n \nint64_t dbg_xcalloc (size_t n, void * p, size_t s) {\n    rdi = n;\n    rax = p;\n    rsi = s;\n    /* void * xcalloc(size_t n,size_t s); */\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    if (rax >= rdi) {\n        rax = rpl_calloc ();\n        if (rax == 0) {\n            goto label_0;\n        }\n        return rax;\n    }\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "xmemdup",
            "funcStartAddr": "0x405520",
            "funcEndAddr": "0x405567",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405520 */\n#include <stdint.h>\n \nuint64_t xmemdup (int64_t arg1, size_t size) {\n    rdi = arg1;\n    rsi = size;\n    rbx = rsi;\n    r14 = rdi;\n    rax = malloc (rbx);\n    r15 = rax;\n    al = (r15 == 0) ? 1 : 0;\n    cl = (rbx != 0) ? 1 : 0;\n    cl ^= al;\n    if (rbx == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    memcpy (r15, r14, rbx);\n    rax = r15;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xstrdup",
            "funcStartAddr": "0x405570",
            "funcEndAddr": "0x4055d5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405570 */\n#include <stdint.h>\n \nuint64_t dbg_xstrdup (int64_t arg1, size_t n, void * p, char const * string) {\n    rdi = arg1;\n    rbx = n;\n    r15 = p;\n    r14 = string;\n    /* char * xstrdup(char const * string); */\n    r14 = rdi;\n    rax = strlen (rdi);\n    rbx = rax;\n    rax = 0xb3513215eae4138c;\n    rbx -= rax;\n    rbx++;\n    rbx += rax;\n    bpl = (rbx != 0) ? 1 : 0;\n    rax = malloc (rbx);\n    r15 = rax;\n    al = (r15 == 0) ? 1 : 0;\n    al ^= bpl;\n    if (r15 == 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n    }\n    memcpy (r15, r14, rbx);\n    rax = r15;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xalloc_die",
            "funcStartAddr": "0x4055e0",
            "funcEndAddr": "0x405610",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4055e0 */\n#include <stdint.h>\n \nuint64_t dbg_xalloc_die (void) {\n    /* void xalloc_die(); */\n    ebx = *(obj.exit_failure);\n    edx = 5;\n    rax = dcgettext (0, \"memory exhausted\");\n    rcx = rax;\n    eax = 0;\n    error (ebx, 0, 0x4073e5);\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_xnumtoumax",
            "funcStartAddr": "0x405610",
            "funcEndAddr": "0x4056e7",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405610 */\n#include <stdint.h>\n \nint64_t dbg_xnumtoumax (int64_t arg_40h, int64_t arg1, int64_t arg3, int64_t arg6, int32_t base, char const * err, int32_t err_exit, uintmax_t max, uintmax_t min, char const * n_str, char const * suffixes, uintmax_t tnum) {\n    rdi = arg1;\n    rdx = arg3;\n    r9 = arg6;\n    rsi = base;\n    r14 = err;\n    rcx = err_exit;\n    r12 = max;\n    r13 = min;\n    r15 = n_str;\n    r8 = suffixes;\n    rbx = tnum;\n    /* uintmax_t xnumtoumax(char const * n_str,int base,uintmax_t min,uintmax_t max,char const * suffixes,char const * err,int err_exit); */\n    r14 = r9;\n    r12 = rcx;\n    r13 = rdx;\n    eax = esi;\n    r15 = rdi;\n    eax = xstrtoumax (rdi, 0, eax, rsp);\n    if (eax != 0) {\n        if (eax != 1) {\n            if (eax == 3) {\n                errno_location ();\n                *(rax) = 0;\n            } else {\n                errno_location ();\n            }\n            *(rax) = 0x4b;\n        } else {\n            rbx = *(rsp);\n            al = (rbx >= r13) ? 1 : 0;\n            cl = (rbx <= r12) ? 1 : 0;\n            edx = eax;\n            dl ^= cl;\n            if (rbx == r12) {\n                al |= cl;\n                al ^= 1;\n                if (al == 0) {\n                    goto label_0;\n                }\n            }\n            errno_location ();\n            ecx = 0x4b;\n            edx = 0x22;\n            if (rbx > 0x3fffffff) {\n                edx = ecx;\n            }\n            *(rax) = edx;\n        } else {\n            rax = errno_location ();\n        }\n    }\n    ecx = *((rsp + 0x40));\n    ebx = 1;\n    if (ecx != 0) {\n        ebx = ecx;\n    }\n    ebp = *(rax);\n    eax = 0;\n    if (ebp == 0x16) {\n    }\n    rax = quote (r15);\n    r8 = rax;\n    eax = 0;\n    rcx = r14;\n    error (ebx, ebp, \"%s: %s\");\n    rbx = *(rsp);\nlabel_0:\n    rax = *(rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_xdectoumax",
            "funcStartAddr": "0x4056f0",
            "funcEndAddr": "0x405713",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4056f0 */\n#include <stdint.h>\n \nint64_t dbg_xdectoumax (int64_t arg2, int64_t arg5, char const * err, int32_t err_exit, uintmax_t max, uintmax_t min, char const * n_str, char const * suffixes) {\n    rsi = arg2;\n    r8 = arg5;\n    r10 = err;\n    r9 = err_exit;\n    rcx = max;\n    rdx = min;\n    rdi = n_str;\n    rax = suffixes;\n    /* uintmax_t xdectoumax(char const * n_str,uintmax_t min,uintmax_t max,char const * suffixes,char const * err,int err_exit); */\n    r10 = r8;\n    rax = rcx;\n    *(rsp) = r9d;\n    r8 = rax;\n    r9 = r10;\n    xnumtoumax (rdi, 0xa, rsi, rdx);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_xstrtoumax",
            "funcStartAddr": "0x405720",
            "funcEndAddr": "0x405e34",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405720 */\n#include <stdint.h>\n \nuint64_t dbg_xstrtoumax (int64_t arg_6h, int64_t arg_7h, int64_t arg1, int64_t arg5, int32_t base, char ** restrict endptr, char const * restrict nptr, strtol_error overflow, char const * q, uintmax_t * val, char const * valid_suffixes) {\n    char ** ptr;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    r8 = arg5;\n    r12 = base;\n    rsi = endptr;\n    rbx = nptr;\n    rax = overflow;\n    rdx = q;\n    rcx = val;\n    r14 = valid_suffixes;\n    /* strtol_error xstrtoumax(char const * s,char ** ptr,int strtol_base,uintmax_t * val,char const * valid_suffixes); */\n    r14 = r8;\n    r12d = edx;\n    rbx = rdi;\n    if (r12d >= 0x25) {\n        goto label_1;\n    }\n    *((rsp + 8)) = rcx;\n    rax = errno_location ();\n    r15 = rax;\n    *(r15) = 0;\n    rax = ctype_b_loc ();\n    rcx = *(rax);\n    rdx = rbx;\n    do {\n        eax = *(rdx);\n        esi = *((rcx + rax*2));\n        edi = esi;\n        edi ^= 0xdfff;\n        edi &= esi;\n        rdx++;\n    } while (di != 0);\n    rsi = rsp + 0x20;\n    if (rbp != 0) {\n        rsi = rbp;\n    }\n    r13d = 4;\n    if (al == 0x2d) {\n        goto label_2;\n    }\n    ebp = 0;\n    ecx = 0;\n    rdi = rbx;\n    *((rsp + 0x18)) = rsi;\n    edx = r12d;\n    rax = strtoul_internal ();\n    r12 = rax;\n    rax = *((rsp + 0x18));\n    rcx = *(rax);\n    if (rcx != rbx) {\n        eax = *(r15);\n        if (eax != 0) {\n            if (eax != 0x22) {\n                goto label_2;\n            }\n        }\n        r15d = ebp;\n        if (r14 != 0) {\n            goto label_3;\n        }\n        goto label_4;\n    }\n    if (r14 == 0) {\n        goto label_2;\n    }\n    esi = *(rbx);\n    if (esi == 0) {\n        goto label_2;\n    }\n    rbx = rcx;\n    rax = strchr (r14, rsi);\n    rcx = rbx;\n    if (rax == 0) {\n        goto label_2;\n    }\n    r15d = 0;\n    r12d = 1;\nlabel_3:\n    r13d = *(rcx);\n    if (r13d == 0) {\n        goto label_4;\n    }\n    *((rsp + 0x10)) = rcx;\n    rax = strchr (r14, r13d);\n    if (rax != 0) {\n        r8d = 1;\n        esi = 0x400;\n        eax = r13 - 0x45;\n        if (eax > 0x2f) {\n            goto label_5;\n        }\n        rdx = 0x814400308945;\n        if (((rdx >> rax) & 1) >= 0) {\n            goto label_5;\n        }\n        rax = strchr (r14, 0x30);\n        if (rax != 0) {\n            rcx = *((rsp + 0x10));\n            eax = *((rcx + 1));\n            if (eax == 0x42) {\n                goto label_6;\n            }\n            if (eax == 0x44) {\n                goto label_6;\n            }\n            if (eax != 0x69) {\n                goto label_7;\n            }\n            eax = 0;\n            al = (*((rcx + 2)) == 0x42) ? 1 : 0;\n            r8 = rax + rax + 1;\n            esi = 0x400;\n        } else {\n            rax = *((rsp + 8));\n            *(rax) = r12;\n            r15d |= 2;\n            goto label_8;\n        }\nlabel_7:\n        r8d = 1;\n        esi = 0x400;\n        goto label_5;\nlabel_6:\n        r8d = 2;\n        esi = 0x3e8;\n    }\nlabel_5:\n    r13d += 0xffffffbe;\n    if (r13d <= 0x35) {\n        eax = 0;\n        /* switch table (54 cases) at 0x407d00 */\n        rdi = 0xffffffffffffffff;\n        rax = 0xffffffffffffffff;\n        edx = 0;\n        rax = rdx:rax / rsi;\n        rdx = rdx:rax % rsi;\n        dl -= dl;\n        rbx = r12;\n        rbx *= rsi;\n        if (rax < r12) {\n            rbx = rdi;\n        }\n        cl -= cl;\n        rbp *= rsi;\n        if (rax < rbx) {\n        }\n        bl -= bl;\n        rsi *= rbp;\n        if (rax < rbp) {\n            rsi = rdi;\n        }\n        eax = ecx;\n        al ^= dl;\n        cl &= dl;\n        cl |= al;\n        eax = ebx;\n        al ^= cl;\n        cl &= bl;\n        cl |= al;\n        cl &= 1;\n        eax = (int32_t) cl;\n        goto label_9;\n        rcx = 0xffffffffffffffff;\n        rax = 0xffffffffffffffff;\n        edx = 0;\n        rax = rdx:rax / rsi;\n        rdx = rdx:rax % rsi;\n        rsi *= r12;\n        if (rax < r12) {\n            rsi = rcx;\n        }\n        eax -= eax;\n        goto label_10;\n        rcx = 0xffffffffffffffff;\n        rax = 0xffffffffffffffff;\n        edx = 0;\n        rax = rdx:rax / rsi;\n        rdx = rdx:rax % rsi;\n        rdx = r12;\n        rdx *= rsi;\n        if (rax < r12) {\n            rdx = rcx;\n        }\n        bl = (rax >= r12) ? 1 : 0;\n        rsi *= rdx;\n        if (rax < rdx) {\n            rsi = rcx;\n        }\n        al = (rax >= rdx) ? 1 : 0;\n        ecx = eax;\n        cl ^= bl;\n        al |= bl;\n        al ^= 1;\n        al |= cl;\n        eax = (int32_t) al;\n        goto label_9;\n        r9 = 0xffffffffffffffff;\n        rax = 0xffffffffffffffff;\n        edx = 0;\n        rax = rdx:rax / rsi;\n        rdx = rdx:rax % rsi;\n        bl -= bl;\n        rdi = r12;\n        rdi *= rsi;\n        if (rax < r12) {\n            rdi = r9;\n        }\n        dl -= dl;\n        rbp *= rsi;\n        if (rax < rdi) {\n        }\n        cl -= cl;\n        rdi = rbp;\n        rdi *= rsi;\n        if (rax < rbp) {\n            rdi = r9;\n        }\n        r10b -= r10b;\n        r11b = (rax >= rdi) ? 1 : 0;\n        rsi *= rdi;\n        if (rax < rdi) {\n            rsi = r9;\n        }\n        eax = edx;\n        al ^= bl;\n        dl &= bl;\n        dl |= al;\n        eax = ecx;\n        al ^= dl;\n        dl &= cl;\n        dl |= al;\n        eax = edx;\n        al = ~al;\n        dl &= 1;\n        al |= r11b;\n        al = ~al;\n        dl ^= r10b;\n        al &= 1;\n        al |= dl;\n        eax = (int32_t) al;\n        goto label_10;\n        eax = 0;\n        rdx = r12;\n        rdx >>= 0x36;\n        al = (rdx != 0) ? 1 : 0;\n        r12 <<= 0xa;\n        goto label_11;\n    }\n    rax = *((rsp + 8));\n    *(rax) = r12;\n    r15d = ~r15d;\n    r15d &= 0x422869bf;\n    r15d ^= 0x422869bd;\n    goto label_8;\n    r13d = r15d;\n    r15 = 0xffffffffffffffff;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    r9b -= r9b;\n    rbx = r12;\n    rbx *= rsi;\n    if (rax < r12) {\n        rbx = r15;\n    }\n    dl -= dl;\n    rbp *= rsi;\n    if (rax < rbx) {\n    }\n    rbx = rbp;\n    rbx *= rsi;\n    if (rax < rbp) {\n        rbx = r15;\n    }\n    r11b = (rax >= rbp) ? 1 : 0;\n    rdi = rbx;\n    rdi *= rsi;\n    if (rax < rbx) {\n        rdi = r15;\n    }\n    r14b = (rax >= rbx) ? 1 : 0;\n    rbp *= rsi;\n    r10b = (rax < rdi) ? 1 : 0;\n    if (rax < rdi) {\n    }\n    bl -= bl;\n    cl = (rax >= rbp) ? 1 : 0;\n    rsi *= rbp;\n    if (rax < rbp) {\n        rsi = r15;\n    }\n    r15d = r13d;\n    eax = edx;\n    al ^= r9b;\n    dl &= r9b;\n    dl |= al;\n    dl = ~dl;\n    dl &= 1;\n    eax = r11d;\n    al ^= dl;\n    dl |= r11b;\n    dl ^= 1;\n    dl |= al;\n    dl ^= 1;\n    eax = r14d;\n    al ^= dl;\n    dl |= r14b;\n    dl ^= 1;\n    dl |= al;\n    eax = r10d;\n    al &= dl;\n    dl ^= r10b;\n    dl |= al;\n    bl ^= dl;\n    dl = ~dl;\n    dl |= cl;\n    dl = ~dl;\n    dl |= bl;\n    goto label_12;\n    r10 = 0xffffffffffffffff;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    cl -= cl;\n    rbx = r12;\n    rbx *= rsi;\n    if (rax < r12) {\n        rbx = r10;\n    }\n    dl -= dl;\n    rbp *= rsi;\n    if (rax < rbx) {\n    }\n    ebx = edx;\n    bl ^= cl;\n    dl &= cl;\n    dl |= bl;\n    dl = ~dl;\n    rdi = rbp;\n    rdi *= rsi;\n    if (rax < rbp) {\n        rdi = r10;\n    }\n    r9b = (rax >= rbp) ? 1 : 0;\n    dl &= 1;\n    ebx = r9d;\n    bl ^= dl;\n    goto label_13;\n    rdi = 0xffffffffffffffff;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    rcx = r12;\n    rcx *= rsi;\n    if (rax < r12) {\n        rcx = rdi;\n    }\n    r13b = (rax >= r12) ? 1 : 0;\n    rbp *= rsi;\n    if (rax < rcx) {\n    }\n    dl = (rax >= rcx) ? 1 : 0;\n    rbx = rbp;\n    rbx *= rsi;\n    if (rax < rbp) {\n        rbx = rdi;\n    }\n    r14b = (rax >= rbp) ? 1 : 0;\n    rbp *= rsi;\n    r12b = (rax < rbx) ? 1 : 0;\n    if (rax < rbx) {\n    }\n    rbx = rbp;\n    rbx *= rsi;\n    if (rax < rbp) {\n        rbx = rdi;\n    }\n    r15b = (rax >= rbp) ? 1 : 0;\n    r10 = rbx;\n    r10 *= rsi;\n    bl = (rax < rbx) ? 1 : 0;\n    if (rax < rbx) {\n        r10 = rdi;\n    }\n    rsp + 7 = (rax >= rbx) ? 1 : 0;\n    r9 = r10;\n    r9 *= rsi;\n    cl = (rax < r10) ? 1 : 0;\n    if (rax < r10) {\n        r9 = rdi;\n    }\n    r10b = (rax >= r10) ? 1 : 0;\n    r11b -= r11b;\n    rsp + 6 = (rax >= r9) ? 1 : 0;\n    rsi *= r9;\n    if (rax < r9) {\n        rsi = rdi;\n    }\n    eax = edx;\n    al ^= r13b;\n    dl |= r13b;\n    dl ^= 1;\n    dl |= al;\n    dl ^= 1;\n    eax = r14d;\n    al ^= dl;\n    dl |= r14b;\n    dl ^= 1;\n    dl |= al;\n    eax = r12d;\n    al &= dl;\n    dl ^= r12b;\n    dl |= al;\n    dl ^= 1;\n    eax = r15d;\n    al ^= dl;\n    dl |= r15b;\n    r15d = ebp;\n    dl ^= 1;\n    dl |= al;\n    bl ^= dl;\n    dl ^= 1;\n    dl |= *((rsp + 7));\n    dl ^= 1;\n    dl |= bl;\n    cl ^= dl;\n    dl ^= 1;\n    dl |= r10b;\n    dl ^= 1;\n    dl |= cl;\n    r11b ^= dl;\n    dl = ~dl;\n    dl |= *((rsp + 6));\n    dl = ~dl;\n    dl |= r11b;\n    goto label_12;\n    r10 = 0xffffffffffffffff;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    rcx = r12;\n    rcx *= rsi;\n    if (rax < r12) {\n        rcx = r10;\n    }\n    bl = (rax >= r12) ? 1 : 0;\n    rbp *= rsi;\n    if (rax < rcx) {\n    }\n    dl = (rax >= rcx) ? 1 : 0;\n    ecx = edx;\n    cl ^= bl;\n    dl |= bl;\n    dl ^= 1;\n    dl |= cl;\n    rcx = rbp;\n    rcx *= rsi;\n    r9b = (rax < rbp) ? 1 : 0;\n    if (rax < rbp) {\n        rcx = r10;\n    }\n    ebx = r9d;\n    bl &= dl;\n    dl ^= r9b;\n    dl |= bl;\n    rbp *= rsi;\n    bl = (rax < rcx) ? 1 : 0;\n    if (rax < rcx) {\n    }\n    ecx = ebx;\n    cl &= dl;\n    dl ^= bl;\n    dl |= cl;\n    rdi = rbp;\n    rdi *= rsi;\n    bl = (rax < rbp) ? 1 : 0;\n    if (rax < rbp) {\n        rdi = r10;\n    }\n    r9b = (rax >= rbp) ? 1 : 0;\n    bl ^= dl;\n    dl ^= 1;\nlabel_13:\n    dl |= r9b;\n    dl ^= 1;\n    dl |= bl;\n    rcx = rdi;\n    rcx *= rsi;\n    dil = (rax < rdi) ? 1 : 0;\n    if (rax < rdi) {\n        rcx = r10;\n    }\n    ebx = edi;\n    bl &= dl;\n    dl ^= dil;\n    dl |= bl;\n    rsi *= rcx;\n    if (rax < rcx) {\n        rsi = r10;\n    }\n    al = (rax >= rcx) ? 1 : 0;\n    dl ^= 1;\n    ecx = eax;\n    cl ^= dl;\n    dl |= al;\n    dl = ~dl;\n    dl |= cl;\nlabel_12:\n    eax = (int32_t) dl;\nlabel_10:\n    eax &= 1;\nlabel_9:\n    r12 = rsi;\n    do {\nlabel_0:\n        ecx = eax;\n        ecx &= r15d;\n        eax ^= r15d;\n        eax |= ecx;\n        rsi = *((rsp + 0x10));\n        rcx = rsi + r8;\n        rdx = *((rsp + 0x18));\n        *(rdx) = rcx;\n        r15d = rax + 2;\n        if (*((rsi + r8)) == 0) {\n            r15d = eax;\n        }\nlabel_4:\n        rax = *((rsp + 8));\n        *(rax) = r12;\nlabel_8:\n        r13d = r15d;\nlabel_2:\n        eax = r15d;\n        return rax;\n        eax = 0;\n        rdx = r12;\n        rdx >>= 0x37;\n        al = (rdx != 0) ? 1 : 0;\n        r12 <<= 9;\nlabel_11:\n        rdx -= rdx;\n        rdx = ~rdx;\n        r12 |= rdx;\n    } while (1);\n    rax = r12 + r12;\n    rcx = 0xffffffffffffffff;\n    __asm (\"cmovns rcx, rax\");\n    r12 >>= 0x3f;\n    eax = r12d;\n    r12 = rcx;\n    goto label_0;\nlabel_1:\n    return assert_fail (\"0 <= strtol_base && strtol_base <= 36\", \"../lib/xstrtol.c\", 0x54, \"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\");\n}\n"
        },
        {
            "funcName": "dbg_rpl_calloc",
            "funcStartAddr": "0x405e40",
            "funcEndAddr": "0x405e99",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405e40 */\n#include <stdint.h>\n \nint64_t dbg_rpl_calloc (size_t bytes, size_t n, size_t s) {\n    rax = bytes;\n    rdi = n;\n    rsi = s;\n    /* void * rpl_calloc(size_t n,size_t s); */\n    cl = (rdi == 0) ? 1 : 0;\n    dl = (rsi == 0) ? 1 : 0;\n    rax = rdi;\n    rax |= rsi;\n    eax = 1;\n    if (rax != 0) {\n        cl ^= dl;\n        ecx = 1;\n        if (rax != 0) {\n            goto label_0;\n        }\n        rax = rsi;\n        rax *= rdi;\n        edx = 0;\n        rax = rdx:rax / rsi;\n        rdx = rdx:rax % rsi;\n        rax = rsi;\n        rcx = rdi;\n        if (rax == rdi) {\n            goto label_0;\n        }\n        errno_location ();\n        *(rax) = 0xc;\n        eax = 0;\n        return rax;\n    }\n    ecx = 1;\nlabel_0:\n    rdi = rcx;\n    rsi = rax;\n    return calloc ();\n}\n"
        },
        {
            "funcName": "dbg_rpl_mbrtowc",
            "funcStartAddr": "0x405ea0",
            "funcEndAddr": "0x405f07",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405ea0 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_mbrtowc (int64_t arg1, int64_t arg2, int64_t arg3, size_t n, mbstate_t * ps, size_t ret, char const * s) {\n    wchar_t * pwc;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = n;\n    rcx = ps;\n    r15 = ret;\n    r14 = s;\n    /* size_t rpl_mbrtowc(wchar_t * pwc,char const * s,size_t n,mbstate_t * ps); */\n    rbx = rdx;\n    r14 = rsi;\n    r12 = rsp + 4;\n    if (rdi != 0) {\n        r12 = rdi;\n    }\n    rax = mbrtowc (r12, rsi, rdx, rcx);\n    r15 = rax;\n    al = (rbx == 0) ? 1 : 0;\n    cl = (r15 < 0xfffffffffffffffe) ? 1 : 0;\n    cl |= al;\n    if (cl != 1) {\n        al = 1;\n        if (al == 0) {\n            goto label_0;\n        }\n        edi = 0;\n        al = hard_locale ();\n        if (al != 0) {\n            goto label_0;\n        }\n        eax = *(r14);\n        *(r12) = eax;\n        r15d = 1;\n    }\nlabel_0:\n    rax = r15;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_close_stream",
            "funcStartAddr": "0x405f10",
            "funcEndAddr": "0x405f79",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405f10 */\n#include <stdint.h>\n \nuint64_t dbg_close_stream (FILE * __stream, int64_t arg1) {\n    rbx = __stream;\n    rdi = arg1;\n    /* int close_stream(FILE * stream); */\n    rbx = rdi;\n    rax = fpending ();\n    r14 = rax;\n    ebp = *(rbx);\n    ebp = ~ebp;\n    ebp |= 0xffffffdf;\n    eax = rpl_fclose (rbx);\n    if (ebp != 0xffffffff) {\n        ebx = 0xffffffff;\n        if (eax != 0) {\n            goto label_0;\n        }\n        errno_location ();\n        *(rax) = 0;\n    } else {\n        cl = (eax == 0) ? 1 : 0;\n        dl = (r14 != 0) ? 1 : 0;\n        eax = -eax;\n        ebx -= ebx;\n        if ((dl & cl) != 0) {\n            goto label_0;\n        }\n        dl ^= cl;\n        if ((dl & cl) != 0) {\n            goto label_0;\n        }\n        rax = errno_location ();\n        ecx = 0;\n        ebx = 0xffffffff;\n        if (*(rax) != 9) {\n            ebx = ecx;\n            goto label_0;\n        }\n    }\nlabel_0:\n    eax = ebx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_hard_locale",
            "funcStartAddr": "0x405f80",
            "funcEndAddr": "0x405fc2",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405f80 */\n#include <stdint.h>\n \nuint64_t dbg_hard_locale (int32_t category, char const * p) {\n    rdi = category;\n    rbx = p;\n    /* _Bool hard_locale(int category); */\n    rax = setlocale (rdi, 0);\n    rbx = rax;\n    bpl = 1;\n    if (rbx != 0) {\n        eax = strcmp (rbx, 0x407f36);\n        if (eax != 0) {\n            eax = strcmp (rbx, \"POSIX\");\n            if (eax != 0) {\n                goto label_0;\n            }\n        }\n        ebp = 0;\n    }\nlabel_0:\n    eax = ebp;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_locale_charset",
            "funcStartAddr": "0x405fd0",
            "funcEndAddr": "0x405ff5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405fd0 */\n#include <stdint.h>\n \nuint64_t dbg_locale_charset (char const * codeset) {\n    rax = codeset;\n    /* char const * locale_charset(); */\n    rax = nl_langinfo (0xe);\n    ecx = 0x407ac2;\n    if (rax != 0) {\n        rcx = rax;\n    }\n    eax = \"ASCII\";\n    if (*(rcx) != 0) {\n        rax = rcx;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_rpl_fclose",
            "funcStartAddr": "0x406000",
            "funcEndAddr": "0x406074",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406000 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_fclose (int64_t arg1, int32_t fd, FILE * fp) {\n    rdi = arg1;\n    rax = fd;\n    rbx = fp;\n    /* int rpl_fclose(FILE * fp); */\n    rbx = rdi;\n    eax = fileno (rdi);\n    if (eax >= 0) {\n        rdi = rbx;\n        eax = freading ();\n        if (eax != 0) {\n            eax = fileno (rbx);\n            esi = 0;\n            edx = 1;\n            edi = eax;\n            rax = lseek ();\n            if (rax == -1) {\n                goto label_0;\n            }\n        }\n        eax = rpl_fflush (rbx);\n        if (eax == 0) {\n            goto label_0;\n        }\n        rax = errno_location ();\n        r14 = rax;\n        ebp = *(r14);\n        fclose (rbx);\n        if (ebp != 0) {\n            *(r14) = ebp;\n            eax = 0xffffffff;\n        }\n        return rax;\n    }\nlabel_0:\n    rdi = rbx;\n    return fclose ();\n}\n"
        },
        {
            "funcName": "dbg_rpl_fflush",
            "funcStartAddr": "0x406080",
            "funcEndAddr": "0x4060bb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406080 */\n#include <stdint.h>\n \nuint32_t dbg_rpl_fflush (int64_t arg1, FILE * fp) {\n    rdi = arg1;\n    rbx = fp;\n    /* int rpl_fflush(FILE * stream); */\n    rbx = rdi;\n    if (rbx != 0) {\n        rdi = rbx;\n        eax = freading ();\n        if (eax == 0) {\n            goto label_0;\n        }\n        eax = *(rbx);\n        ecx = *(rbx);\n        ecx ^= 0xfffffeff;\n        if ((ecx & eax) == 0) {\n            goto label_0;\n        }\n        rpl_fseeko (rbx, 0, 1);\n    }\nlabel_0:\n    rdi = rbx;\n    return fflush ();\n}\n"
        },
        {
            "funcName": "dbg_rpl_fseeko",
            "funcStartAddr": "0x4060c0",
            "funcEndAddr": "0x40612d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4060c0 */\n#include <stdint.h>\n \nint64_t dbg_rpl_fseeko (int64_t arg1, int64_t arg2, int64_t arg3, FILE * fp, off_t pos, int32_t whence) {\n    off_t offset;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = fp;\n    rax = pos;\n    r14 = whence;\n    /* int rpl_fseeko(FILE * fp,off_t offset,int whence); */\n    r14d = edx;\n    rbx = rdi;\n    rax = *((rbx + 0x10));\n    if (rax == *((rbx + 8))) {\n        rax = *((rbx + 0x28));\n        if (rax != *((rbx + 0x20))) {\n            goto label_0;\n        }\n        if (*((rbx + 0x48)) == 0) {\n            goto label_1;\n        }\n    }\nlabel_0:\n    rdi = rbx;\n    rsi = rbp;\n    edx = r14d;\n    r14 = rbx;\n    void (*0x402270)() ();\nlabel_1:\n    eax = fileno (rbx);\n    edi = eax;\n    rsi = rbp;\n    edx = r14d;\n    rax = lseek ();\n    if (rax != -1) {\n        *(rbx) &= 0xef;\n        *((rbx + 0x90)) = rax;\n        eax = 0;\n    } else {\n        eax = 0xffffffff;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "atexit",
            "funcStartAddr": "0x4061b0",
            "funcEndAddr": "0x4061c2",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4061b0 */\n#include <stdint.h>\n \nvoid atexit (void) {\n    rdx = *(obj.__dso_handle);\n    esi = 0;\n    return cxa_atexit ();\n}\n"
        }
    ],
    "funcCount": 74
}