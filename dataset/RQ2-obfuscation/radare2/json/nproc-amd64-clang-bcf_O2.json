{
    "binaryInfo": {
        "isStripped": true,
        "binaryName": "nproc-amd64-clang-bcf_O2"
    },
    "buildInfo": {
        "decompilerName": "radare2",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "optLevel": "O"
    },
    "funcInfo": [
        {
            "funcName": "dl_relocate_static_pie",
            "funcStartAddr": "0x402350",
            "funcEndAddr": "0x402355",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402350 */\n#include <stdint.h>\n \nvoid dl_relocate_static_pie (void) {\n}\n"
        },
        {
            "funcName": "dbg_usage",
            "funcStartAddr": "0x402410",
            "funcEndAddr": "0x4026d1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402410 */\n#include <stdint.h>\n \nuint64_t dbg_usage (int64_t arg1, char const * lc_messages, char const * node, int32_t status) {\n    infomap const * map_prog;\n    int64_t var_8h;\n    rdi = arg1;\n    rax = lc_messages;\n    rbx = node;\n    r14 = status;\n    /* void usage(int status); */\n    r14d = edi;\n    if (r14d != 0) {\n        goto label_0;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"Usage: %s [OPTION]...\\n\");\n    rcx = rax;\n    rdx = program_name;\n    edi = 1;\n    eax = 0;\n    rsi = rcx;\n    printf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"Print the number of processing units available to the current process,\\nwhich may be less than the number of online processors\\n\\n\");\n    rsi = stdout;\n    rdi = rax;\n    fputs_unlocked ();\n    edx = 5;\n    rax = dcgettext (0, \"      --all      print the number of installed processors\\n      --ignore=N  if possible, exclude N processing units\\n\");\n    rsi = stdout;\n    rdi = rax;\n    fputs_unlocked ();\n    edx = 5;\n    rax = dcgettext (0, \"      --help     display this help and exit\\n\");\n    rsi = stdout;\n    rdi = rax;\n    fputs_unlocked ();\n    edx = 5;\n    rax = dcgettext (0, \"      --version  output version information and exit\\n\");\n    rsi = stdout;\n    rdi = rax;\n    fputs_unlocked ();\n    eax = x.34;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bl = (*(obj.y.35) < 0xa) ? 1 : 0;\n    bl |= al;\n    do {\n        rsi = *(rbp);\n        if (rsi != 0) {\n            eax = strcmp (\"nproc\", rsi);\n            al = (eax != 0) ? 1 : 0;\n            if (bl != 0) {\n                goto label_1;\n            }\n            goto label_2;\n        }\n        eax = 0;\n        if (bl == 0) {\n            goto label_2;\n        }\nlabel_1:\n        rbp += 0x10;\n    } while (al != 0);\n    rax = *((rbp - 8));\n    ebx = \"nproc\";\n    if (rax != 0) {\n        rbx = rax;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"\\n%s online help: <%s>\\n\");\n    rsi = rax;\n    edi = 1;\n    edx = \"GNU coreutils\";\n    ecx = \"https://www.gnu.org/software/coreutils/\";\n    eax = 0;\n    printf_chk ();\n    rax = setlocale (5, 0);\n    if (rax == 0) {\n        goto label_3;\n    }\n    if (*(obj.y.35) >= 0xa) {\n        ecx = x.34;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_4;\n        }\nlabel_2:\n    }\nlabel_4:\n    eax = strncmp (rax, 0x4092c5, 3);\n    if (eax != 0) {\n        goto label_5;\n    }\n    goto label_3;\n    do {\n        edx = 5;\n        rax = dcgettext (0, \"Report any translation bugs to <https://translationproject.org/team/>\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\nlabel_5:\n        edx = 5;\n        rax = dcgettext (0, \"Report any translation bugs to <https://translationproject.org/team/>\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        if (*(obj.y.35) < 0xa) {\n            goto label_3;\n        }\n        eax = x.34;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n    } while (ecx != 0);\nlabel_3:\n    edx = 5;\n    rax = dcgettext (0, \"Full documentation <%s%s>\\n\");\n    rsi = rax;\n    edi = 1;\n    edx = \"https://www.gnu.org/software/coreutils/\";\n    ecx = \"nproc\";\n    eax = 0;\n    printf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"or available locally via: info '(coreutils) %s%s'\\n\");\n    rdx = rax;\n    eax = 0x409243;\n    ecx = 0x409b82;\n    if (rbx == rbp) {\n        rcx = rax;\n    }\n    edi = 1;\n    eax = 0;\n    rsi = rdx;\n    rdx = rbx;\n    printf_chk ();\n    exit (r14d);\nlabel_0:\n    rbx = stderr;\n    edx = 5;\n    rax = dcgettext (0, \"Try '%s --help' for more information.\\n\");\n    rdx = rax;\n    rcx = program_name;\n    esi = 1;\n    eax = 0;\n    rdi = rbx;\n    fprintf_chk ();\n    return exit (r14d);\n}\n"
        },
        {
            "funcName": "dbg_main",
            "funcStartAddr": "0x4026e0",
            "funcEndAddr": "0x40294b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4026e0 */\n#include <stdint.h>\n \nuint64_t dbg_main (int32_t argc, char ** argv, int32_t c, long unsigned int nproc) {\n    rdi = argc;\n    rsi = argv;\n    rax = c;\n    rbx = nproc;\n    /* int main(int argc,char ** argv); */\n    r14 = rsi;\n    r12d = edi;\n    set_program_name (*(r14));\n    setlocale (6, 0x409b82);\n    bindtextdomain (0x4091e6, \"/home/yujeong/binary_gen/coreutils-8.31/tmp/_install/share/locale\");\n    textdomain (0x4091e6, rsi);\n    edi = close_stdout;\n    atexit ();\n    ebx = 2;\n    r15d = 0;\n    goto label_1;\nlabel_0:\n    rbp = optarg;\n    edx = 5;\n    rax = dcgettext (0, \"invalid number\");\n    rdx = 0xffffffffffffffff;\n    ecx = 0x409b82;\n    r9d = 0;\n    r8 = rax;\n    rax = xdectoumax (rbp, 0);\n    r15 = rax;\n    do {\nlabel_1:\n        edx = 0x409b82;\n        ecx = longopts;\n        r8d = 0;\n        edi = r12d;\n        rsi = r14;\n        getopt_long ();\n        ecx = x.36;\n        edx = rcx - 1;\n        edx *= ecx;\n        dl = ((dl & 1) == 0) ? 1 : 0;\n        cl = (*(obj.y.37) < 0xa) ? 1 : 0;\n        cl |= dl;\n        if (eax == 0xffffffff) {\n            goto label_2;\n        }\n        if (cl == 0) {\n            goto label_3;\n        }\n        if (eax > 0x80) {\n            goto label_4;\n        }\n        ebx = 0;\n    } while (eax == 0x80);\n    goto label_5;\nlabel_4:\n    if (eax == 0x81) {\n        goto label_0;\n    }\n    goto label_6;\nlabel_3:\nlabel_2:\n    if (cl != 0) {\n        if (*(obj.optind) != r12d) {\n            goto label_7;\n        }\n        edi = ebx;\n        rax = num_processors ();\n        rbx = rax;\n        rbx -= r15;\n        if (rbx <= 0) {\n            goto label_8;\n        }\n        eax = x.36;\n        ecx = y.37;\n        if (ecx >= 0xa) {\n            goto label_9;\n        }\n        goto label_10;\n    }\nlabel_8:\n    eax = x.36;\n    ecx = y.37;\n    ebx = 1;\n    if (ecx >= 0xa) {\n        edx = rax - 1;\n        edx *= eax;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_11;\n        }\n    }\nlabel_11:\n    if (ecx < 0xa) {\n        goto label_10;\n    }\nlabel_9:\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_12;\n    }\n    goto label_10;\nlabel_5:\n    if (eax != 0xffffff7d) {\n        if (eax != 0xffffff7e) {\n            goto label_6;\n        }\n        eax = dbg_usage (0);\n    }\n    eax = 0;\n    version_etc (*(obj.stdout), \"nproc\", \"GNU coreutils\", *(obj.Version), \"Giuseppe Scrivano\", 0);\n    exit (0);\nlabel_6:\n    dbg_usage (1);\nlabel_7:\n    edx = 5;\n    rax = dcgettext (0, \"extra operand %s\");\n    rbx = rax;\n    rax = *(obj.optind);\n    rax = quote (*((r14 + rax*8)));\n    while (1);\n    rcx = rax;\n    eax = 0;\n    error (0, 0, rbx);\n    eax = dbg_usage (1);\n    do {\nlabel_10:\n        edi = 1;\n        esi = \"%lu\\n\";\n        eax = 0;\n        rdx = rbx;\n        printf_chk ();\n        if (*(obj.y.37) < 0xa) {\n            goto label_13;\n        }\n        eax = x.36;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_13;\n        }\nlabel_12:\n        edi = 1;\n        esi = \"%lu\\n\";\n        eax = 0;\n        rdx = rbx;\n        eax = printf_chk ();\n    } while (1);\nlabel_13:\n    eax = 0;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_close_stdout_set_file_name",
            "funcStartAddr": "0x402950",
            "funcEndAddr": "0x402988",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402950 */\n#include <stdint.h>\n \nint32_t dbg_close_stdout_set_file_name (char const * file) {\n    rdi = file;\n    /* void close_stdout_set_file_name(char const * file); */\n    edx = x;\n    eax = y;\n    ecx = rdx - 1;\n    ecx *= edx;\n    ecx &= 1;\n    if (eax < 0xa) {\n        goto label_0;\n    }\n    while (1) {\nlabel_0:\n        *(obj.file_name) = rdi;\n        if (eax < 0xa) {\n            goto label_1;\n        }\n        if (ecx == 0) {\n            goto label_1;\n        }\n        *(obj.file_name) = rdi;\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_close_stdout_set_ignore_EPIPE",
            "funcStartAddr": "0x402990",
            "funcEndAddr": "0x4029c8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402990 */\n#include <stdint.h>\n \nint32_t dbg_close_stdout_set_ignore_EPIPE (void) {\n    /* void close_stdout_set_ignore_EPIPE(_Bool ignore); */\n    edx = x.3;\n    eax = y.4;\n    ecx = rdx - 1;\n    ecx *= edx;\n    ecx &= 1;\n    if (eax < 0xa) {\n        goto label_0;\n    }\n    while (1) {\nlabel_0:\n        *(obj.ignore_EPIPE) = dil;\n        if (eax < 0xa) {\n            goto label_1;\n        }\n        if (ecx == 0) {\n            goto label_1;\n        }\n        *(obj.ignore_EPIPE) = dil;\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_close_stdout",
            "funcStartAddr": "0x4029d0",
            "funcEndAddr": "0x402b4b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4029d0 */\n#include <stdint.h>\n \nuint64_t dbg_close_stdout (char const * write_error) {\n    rbx = write_error;\n    /* void close_stdout(); */\n    if (*(obj.y.6) < 0xa) {\n        goto label_0;\n    }\n    eax = x.5;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        close_stream (*(obj.stdout));\n        if (*(obj.y.6) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.5;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        eax = close_stream (*(obj.stdout));\n    }\nlabel_1:\n    if (eax == 0) {\n        goto label_2;\n    }\n    bl = ignore_EPIPE;\n    rax = errno_location ();\n    if (bl != 0) {\n        if (*(rbp) == 0x20) {\n            goto label_2;\n        }\n    }\n    edx = 5;\n    rax = dcgettext (0, \"write error\");\n    rbx = rax;\n    rdi = file_name;\n    ebp = *(rbp);\n    if (rdi != 0) {\n        goto label_3;\n    }\n    if (*(obj.y.6) < 0xa) {\n        goto label_4;\n    }\n    eax = x.5;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_5;\n    }\n    goto label_4;\n    do {\n        close_stream (*(obj.stderr));\nlabel_2:\n        close_stream (*(obj.stderr));\n        if (*(obj.y.6) < 0xa) {\n            goto label_6;\n        }\n        ecx = x.5;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n    } while (edx != 0);\nlabel_6:\n    if (eax == 0) {\n        return rax;\n    }\n    exit (*(obj.exit_failure));\nlabel_3:\n    rax = quotearg_colon ();\n    rcx = rax;\n    eax = 0;\n    r8 = rbx;\n    error (0, ebp, \"%s: %s\");\n    eax = exit (*(obj.exit_failure));\n    do {\nlabel_4:\n        eax = 0;\n        rcx = rbx;\n        error (0, ebp, 0x4094a5);\n        if (*(obj.y.6) < 0xa) {\n            goto label_7;\n        }\n        eax = x.5;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_7;\n        }\nlabel_5:\n        eax = 0;\n        rcx = rbx;\n        error (0, ebp, 0x4094a5);\n    } while (1);\nlabel_7:\n    return exit (*(obj.exit_failure));\n}\n"
        },
        {
            "funcName": "dbg_num_processors",
            "funcStartAddr": "0x402b50",
            "funcEndAddr": "0x402dd0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402b50 */\n#include <stdint.h>\n \nuint64_t dbg_num_processors (long unsigned int count, long unsigned int omp_env_limit, long unsigned int omp_env_threads, nproc_query query) {\n    cpu_set_t set;\n    rax = count;\n    rbx = omp_env_limit;\n    r14 = omp_env_threads;\n    rdi = query;\n    /* long unsigned int num_processors(nproc_query query); */\n    if (edi == 1) {\n        goto label_1;\n    }\n    if (edi != 2) {\n        goto label_2;\n    }\n    rax = getenv (\"OMP_NUM_THREADS\");\n    rax = parse_omp_threads (rax);\n    r14 = rax;\n    rax = getenv (\"OMP_THREAD_LIMIT\");\n    rax = parse_omp_threads (rax);\n    rbx -= rbx;\n    rbx |= rax;\n    if (r14 == 0) {\n        goto label_3;\n    }\n    eax = x;\n    ecx = y;\n    if (ecx < 0xa) {\n        goto label_4;\n    }\n    edx = rax - 1;\n    edx *= eax;\n    edx &= 1;\n    if (edx == 0) {\n        goto label_4;\n    }\n    while (1);\nlabel_1:\n    rbx = 0xffffffffffffffff;\nlabel_3:\n    rdx = rsp + 8;\n    edi = 0;\n    esi = 0x80;\n    eax = sched_getaffinity ();\n    while (eax == 0) {\n        eax = 0;\n        if (*(obj.y.7) >= 0xa) {\n            goto label_5;\n        }\n        goto label_6;\nlabel_2:\n        if (*(obj.y.5) < 0xa) {\n            goto label_7;\n        }\n        eax = x.4;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_8;\n        }\n        goto label_7;\n        rsi = rsp + 8;\n        edi = 0x80;\n        eax = sched_cpucount ();\n    }\n    rax = (int64_t) eax;\n    if (*(obj.y.7) >= 0xa) {\nlabel_5:\n        ecx = x.6;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_6;\n        }\n    }\nlabel_6:\n    edx = x.4;\n    ecx = rdx - 1;\n    ecx *= edx;\n    ecx &= 1;\n    esi = y.5;\n    if (rax != 0) {\n        edx = 1;\n        if (esi < 0xa) {\n            goto label_9;\n        }\n        if (ecx == 0) {\n            goto label_9;\n        }\nlabel_4:\n        if (r14 < rbx) {\n            rbx = r14;\n        }\n        if (ecx >= 0xa) {\n            goto label_10;\n        }\n        goto label_11;\n    }\n    edx = 0;\nlabel_9:\n    if (esi >= 0xa) {\n        if (ecx == 0) {\n            goto label_12;\n        }\n    }\nlabel_12:\n    if (edx != 0) {\n        goto label_13;\n    }\n    edi = 0x54;\n    rax = sysconf ();\n    if (rax > 0) {\n        goto label_13;\n    }\n    goto label_14;\n    do {\nlabel_7:\n        edi = 0x53;\n        sysconf ();\n        if (*(obj.y.5) < 0xa) {\n            goto label_15;\n        }\n        ecx = x.4;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_15;\n        }\nlabel_8:\n        edi = 0x53;\n        rax = sysconf ();\n    } while (1);\nlabel_15:\n    if (rax != 1) {\n        goto label_16;\n    }\n    rdx = rsp + 8;\n    edi = 0;\n    esi = 0x80;\n    eax = sched_getaffinity ();\n    if (eax == 0) {\n        goto label_17;\n    }\nlabel_0:\n    eax = 0;\n    while (1);\n    if (*(obj.y.7) >= 0xa) {\n        goto label_18;\n    }\n    goto label_19;\nlabel_17:\n    rsi = rsp + 8;\n    edi = 0x80;\n    eax = sched_cpucount ();\n    if (eax == 0) {\n        goto label_0;\n    }\n    rax = (int64_t) eax;\n    if (*(obj.y.7) >= 0xa) {\nlabel_18:\n        ecx = x.6;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_19;\n        }\n    }\nlabel_19:\n    if (rax != 0) {\nlabel_16:\n        rbx = 0xffffffffffffffff;\n        if (rax > 0) {\n            goto label_13;\n        }\n    } else {\n        rbx = 0xffffffffffffffff;\n    }\nlabel_14:\n    eax = 1;\nlabel_13:\n    if (rax < rbx) {\n        rbx = rax;\n    }\n    eax = x;\n    ecx = y;\n    if (ecx >= 0xa) {\nlabel_10:\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_11;\n        }\n    }\nlabel_11:\n    rax = rbx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_parse_omp_threads",
            "funcStartAddr": "0x402dd0",
            "funcEndAddr": "0x402f0b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402dd0 */\n#include <stdint.h>\n \nuint32_t dbg_parse_omp_threads (int64_t arg1, char * endptr, char const * threads, long unsigned int value) {\n    int64_t var_10h;\n    rdi = arg1;\n    rbx = endptr;\n    r14 = threads;\n    rax = value;\n    /* long unsigned int parse_omp_threads(char const * threads); */\n    r14 = rdi;\n    ecx = x.2;\n    edi = y.3;\n    eax = rcx - 1;\n    eax *= ecx;\n    dl = ((al & 1) == 0) ? 1 : 0;\n    al = (edi < 0xa) ? 1 : 0;\n    al |= dl;\n    do {\n        rbx = rsp;\n        rbx += 0xfffffffffffffff0;\n    } while (al == 0);\n    if (r14 == 0) {\n        goto label_0;\n    }\n    al = *(r14);\n    if (al == 0) {\n        goto label_1;\n    }\n    esi = 0x80001f;\n    do {\n        edx = (int32_t) al;\n        edx += 0xfffffff7;\n        if (edx > 0x17) {\n            goto label_2;\n        }\n        if (((esi >> edx) & 1) >= 0) {\n            goto label_2;\n        }\n        al = *((r14 + 1));\n        r14++;\n    } while (al != 0);\nlabel_1:\n    eax = 0;\nlabel_2:\n    eax = (int32_t) al;\n    eax += 0xffffffd0;\n    if (eax <= 9) {\n        goto label_3;\n    }\n    goto label_0;\n    do {\n        *(rbx) = 0;\n        strtoul (r14, rbx, 0xa);\nlabel_3:\n        *(rbx) = 0;\n        strtoul (r14, rbx, 0xa);\n        ecx = x.2;\n        edi = y.3;\n        if (edi < 0xa) {\n            goto label_4;\n        }\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n    } while (edx != 0);\nlabel_4:\n    rsi = *(rbx);\n    if (rsi == 0) {\n        goto label_0;\n    }\n    dl = *(rsi);\n    if (dl == 0) {\n        goto label_5;\n    }\n    r8d = 0x80001f;\n    do {\n        edx = (int32_t) dl;\n        edx += 0xfffffff7;\n        if (edx > 0x17) {\n            goto label_5;\n        }\n        if (((r8d >> edx) & 1) >= 0) {\n            goto label_5;\n        }\n        edx = *((rsi + 1));\n        rsi++;\n    } while (dl != 0);\nlabel_5:\n    *(rbx) = rsi;\n    dl = *(rsi);\n    if (dl != 0x2c) {\n        if (dl == 0) {\n            goto label_6;\n        }\nlabel_0:\n        eax = 0;\n    }\nlabel_6:\n    if (edi >= 0xa) {\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_7;\n        }\n    }\nlabel_7:\n    rsp = rbp - 0x10;\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_set_program_name",
            "funcStartAddr": "0x402f10",
            "funcEndAddr": "0x402fd3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402f10 */\n#include <stdint.h>\n \nuint64_t dbg_set_program_name (char ** arg1, char const * base, char const * slash) {\n    rdi = arg1;\n    r14 = base;\n    rax = slash;\n    /* void set_program_name(char const * argv0); */\n    rbx = rdi;\n    if (rbx == 0) {\n        goto label_0;\n    }\n    rax = strrchr (rbx, 0x2f);\n    r14 = rax + 1;\n    if (rax == 0) {\n        r14 = rbx;\n    }\n    rax = r14;\n    rax -= rbx;\n    if (rax < 7) {\n        goto label_1;\n    }\n    if (*(obj.y) < 0xa) {\n        goto label_2;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_2;\n    }\n    while (1);\nlabel_2:\n    eax = strncmp (r14 - 7, \"/.libs/\", 7);\n    if (eax == 0) {\n        eax = strncmp (r14, 0x409509, 3);\n        if (eax == 0) {\n            r14 += 3;\n            *(obj.__progname) = r14;\n        }\n        rbx = r14;\n    }\nlabel_1:\n    *(obj.program_name) = rbx;\n    *(obj.program_invocation_name) = rbx;\n    return rax;\nlabel_0:\n    fwrite (\"A NULL argv[0] was passed through an exec system call.\\n\", 0x37, 1, *(obj.stderr));\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_clone_quoting_options",
            "funcStartAddr": "0x402fe0",
            "funcEndAddr": "0x403013",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402fe0 */\n#include <stdint.h>\n \nuint64_t dbg_clone_quoting_options (int64_t arg1, quoting_options * o, quoting_options * p) {\n    int32_t e;\n    rdi = arg1;\n    rbx = o;\n    rax = p;\n    /* quoting_options * clone_quoting_options(quoting_options * o); */\n    rbx = rdi;\n    rax = errno_location ();\n    r14 = rax;\n    ebp = *(r14);\n    eax = default_quoting_options;\n    if (rbx == 0) {\n        rbx = rax;\n    }\n    esi = 0x38;\n    rdi = rbx;\n    xmemdup ();\n    *(r14) = ebp;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_get_quoting_style",
            "funcStartAddr": "0x403020",
            "funcEndAddr": "0x40302f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403020 */\n#include <stdint.h>\n \nint64_t dbg_get_quoting_style (quoting_options const * o) {\n    rdi = o;\n    /* quoting_style get_quoting_style(quoting_options const * o); */\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    eax = *(rax);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_set_quoting_style",
            "funcStartAddr": "0x403030",
            "funcEndAddr": "0x403083",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403030 */\n#include <stdint.h>\n \nint64_t dbg_set_quoting_style (quoting_options * o, quoting_style s) {\n    rdi = o;\n    rsi = s;\n    /* void set_quoting_style(quoting_options * o,quoting_style s); */\n    if (*(obj.y.22) < 0xa) {\n        goto label_0;\n    }\n    eax = x.21;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        eax = default_quoting_options;\n        if (rdi != 0) {\n            rax = rdi;\n        }\n        *(rax) = esi;\n        if (*(obj.y.22) < 0xa) {\n            goto label_1;\n        }\n        eax = x.21;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_1;\n        }\n        eax = default_quoting_options;\n        if (rdi != 0) {\n            rax = rdi;\n        }\n        *(rax) = esi;\n    }\nlabel_1:\n    return rax;\n}\n"
        },
        {
            "funcName": "set_char_quoting",
            "funcStartAddr": "0x403090",
            "funcEndAddr": "0x4030c6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403090 */\n#include <stdint.h>\n \nint32_t set_char_quoting (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = esi;\n    esi = default_quoting_options;\n    if (rdi != 0) {\n        rsi = rdi;\n    }\n    eax = ecx;\n    al >>= 5;\n    r8d = (int32_t) al;\n    r9d = *((rsi + r8*4 + 8));\n    edi = *((rsi + r8*4 + 8));\n    edi >>= cl;\n    eax = edi;\n    eax &= 1;\n    edi ^= edx;\n    edi &= 1;\n    edi <<= cl;\n    edi ^= r9d;\n    *((rsi + r8*4 + 8)) = edi;\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_set_quoting_flags",
            "funcStartAddr": "0x4030d0",
            "funcEndAddr": "0x4030e3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4030d0 */\n#include <stdint.h>\n \nint32_t dbg_set_quoting_flags (int32_t i, quoting_options * o, int32_t r) {\n    rsi = i;\n    rdi = o;\n    rax = r;\n    /* int set_quoting_flags(quoting_options * o,int i); */\n    ecx = default_quoting_options;\n    if (rdi != 0) {\n        rcx = rdi;\n    }\n    eax = *((rcx + 4));\n    *((rcx + 4)) = esi;\n    return eax;\n}\n"
        },
        {
            "funcName": "set_custom_quoting",
            "funcStartAddr": "0x4030f0",
            "funcEndAddr": "0x40311b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4030f0 */\n#include <stdint.h>\n \nint64_t set_custom_quoting (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    *(rax) = 0xa;\n    if (rsi != 0) {\n        if (rdx == 0) {\n            goto label_0;\n        }\n        *((rax + 0x28)) = rsi;\n        *((rax + 0x30)) = rdx;\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_buffer",
            "funcStartAddr": "0x403120",
            "funcEndAddr": "0x403192",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403120 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_buffer (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, char const * arg, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, size_t argsize, char * buffer, size_t buffersize, quoting_options const * o, size_t r) {\n    quoting_options const * p;\n    int32_t e;\n    int64_t var_4h;\n    r15 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r14 = argsize;\n    r13 = buffer;\n    r12 = buffersize;\n    r8 = o;\n    rax = r;\n    /* size_t quotearg_buffer(char * buffer,size_t buffersize,char const * arg,size_t argsize,quoting_options const * o); */\n    r14 = rcx;\n    r15 = rdx;\n    r12 = rsi;\n    r13 = rdi;\n    if (r8 != 0) {\n    }\n    rax = errno_location ();\n    rbx = rax;\n    eax = *(rbx);\n    *((rsp + 4)) = eax;\n    rax = rbp + 8;\n    quotearg_buffer_restyled (r13, r12, r15, r14, *(rbp), *((rbp + 4)));\n    ecx = *((rsp + 4));\n    *(rbx) = ecx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_buffer_restyled",
            "funcStartAddr": "0x4031a0",
            "funcEndAddr": "0x4049d8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4031a0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_buffer_restyled (int64_t arg_128h, uint32_t arg_110h, int64_t arg_118h, int64_t arg_120h, uint32_t arg2, uint32_t arg4, int64_t arg5, int64_t arg6, char * buffer, size_t bytes, unsigned char c, _Bool elide_outer_quotes, unsigned char esc, quoting_style quoting_style) {\n    char const * left_quote;\n    uint32_t var_eh;\n    uint32_t var_fh;\n    signed int64_t var_10h;\n    char const * quote_string;\n    int64_t var_1ch;\n    int64_t var_23h;\n    uint32_t var_24h;\n    int64_t var_2ah;\n    uint32_t var_2bh;\n    int64_t var_2ch;\n    uint32_t var_2dh;\n    uint32_t var_2eh;\n    uint32_t var_2fh;\n    size_t n;\n    void * s2;\n    size_t * var_40h;\n    char ** ubp_av;\n    int64_t var_50h;\n    char const * right_quote;\n    int64_t var_60h;\n    uint32_t var_68h;\n    int32_t flags;\n    uint32_t var_70h;\n    char * s;\n    uint32_t var_80h;\n    wchar_t w;\n    int64_t var_90h;\n    size_t * var_98h;\n    int64_t var_a0h;\n    uint32_t var_a4h;\n    uint32_t var_a8h;\n    wint_t wc;\n    int64_t var_b0h;\n    size_t * var_b8h;\n    mbstate_t * ps;\n    uint32_t var_c8h;\n    int64_t var_d0h;\n    rsi = arg2;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    rdi = buffer;\n    r14 = bytes;\n    rdx = c;\n    r13 = elide_outer_quotes;\n    xmm5 = esc;\n    r12 = quoting_style;\n    /* size_t quotearg_buffer_restyled(char * buffer,size_t buffersize,char const * arg,size_t argsize,quoting_style quoting_style,int flags,unsigned int const * quote_these_too,char const * left_quote,char const * right_quote); */\nlabel_29:\n    ebx = r9d;\n    r12d = r8d;\n    *((rsp + 0x80)) = rcx;\n    *((rsp + 0x48)) = rdx;\n    r15 = rsi;\n    *((rsp + 0x40)) = rdi;\n    rax = *((rsp + 0x120));\n    *((rsp + 0x78)) = rax;\n    rbp = *((rsp + 0x118));\n    rax = ctype_get_mb_cur_max ();\n    *((rsp + 0xc8)) = rax;\n    r13d = ebx;\n    r13b >>= 1;\n    r13b &= 1;\n    eax = ebx;\n    eax &= 1;\n    *((rsp + 0xa8)) = eax;\n    *((rsp + 0x8c)) = ebx;\n    ebx &= 4;\n    *((rsp + 0xa4)) = ebx;\n    r10b = 1;\n    eax = 0;\n    *((rsp + 0x68)) = rax;\n    eax = 0;\n    *((rsp + 0x38)) = rax;\n    eax = 0;\n    *((rsp + 0x30)) = rax;\n    eax = 0;\n    *((rsp + 0x50)) = rax;\n    *((rsp + 0x1c)) = 0;\n    eax = 0;\n    *((rsp + 0x90)) = rax;\nlabel_28:\n    if (r12d > 0xa) {\n        goto label_30;\n    }\n    eax = r12d;\n    ecx = 0;\n    ebx = 0;\n    esi = 0;\n    rdi = *((rsp + 0x40));\n    r8 = r15;\n    r11 = *((rsp + 0x80));\n    /* switch table (11 cases) at 0x409510 */\n    if (*(obj.y.32) < 0xa) {\n        goto label_31;\n    }\n    eax = x.31;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_32;\n    }\n    goto label_31;\n    eax = x.31;\n    ecx = y.32;\n    if (ecx < 0xa) {\n        goto label_33;\n        al = 1;\n        *((rsp + 0x50)) = rax;\n        if (*(obj.y.32) >= 0xa) {\n            eax = x.31;\n            ecx = rax - 1;\n            ecx *= eax;\n            ecx &= 1;\n            if (ecx != 0) {\n                goto label_34;\n            }\n        }\n        r13b = 1;\n        eax = x.31;\n        ecx = y.32;\n        if (ecx >= 0xa) {\n            edx = rax - 1;\n            edx *= eax;\n            edx &= 1;\n            if (edx != 0) {\n                goto label_35;\n            }\n        }\n        dl = 1;\n        if ((r13b & 1) != 0) {\n            rdx = *((rsp + 0x50));\n        }\n        *((rsp + 0x50)) = rdx;\n        if (ecx < 0xa) {\n            goto label_33;\n        }\n    }\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_36;\n    }\nlabel_33:\n    ecx = 2;\n    if ((r13b & 1) != 0) {\n        goto label_37;\n    }\n    if (r8 == 0) {\n        goto label_38;\n    }\n    *(rdi) = 0x27;\n    if (*(obj.y.32) < 0xa) {\n        goto label_38;\n    }\n    do {\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_39;\n        }\n        *(rdi) = 0x27;\n    } while (*(obj.y.32) >= 0xa);\nlabel_39:\n    ebx = 1;\n    eax = 0x409a38;\n    *((rsp + 0x38)) = rax;\n    eax = 1;\n    *((rsp + 0x30)) = rax;\n    sil = r13b;\n    ecx = 2;\n    goto label_40;\nlabel_37:\n    ebx = 0;\n    eax = 0x409a38;\n    goto label_41;\n    al = 1;\n    *((rsp + 0x50)) = rax;\n    ecx = 5;\n    if ((r13b & 1) == 0) {\n        if (r8 != 0) {\n            *(rdi) = 0x22;\n        }\n        ebx = 1;\n        goto label_42;\n        al = 1;\n        *((rsp + 0x50)) = rax;\n        ecx = 5;\n        ebx = 0;\n        eax = 0x409a34;\n        *((rsp + 0x38)) = rax;\n        eax = 1;\n        *((rsp + 0x30)) = rax;\n        sil = 1;\n        goto label_40;\n        ebx = 0;\n        al = 1;\n        *((rsp + 0x50)) = rax;\n        ecx = 7;\n        esi = 0;\n        if (*(obj.y.32) < 0xa) {\n            goto label_40;\n        }\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        ecx = 7;\n        esi = 0;\n        if (ecx == 0) {\n            goto label_40;\n        }\n        goto label_43;\nlabel_38:\n        ebx = 1;\n        eax = 0x409a38;\n    } else {\n        ebx = 0;\nlabel_42:\n        eax = 0x409a34;\n    }\nlabel_41:\n    *((rsp + 0x38)) = rax;\n    eax = 1;\n    *((rsp + 0x30)) = rax;\n    sil = r13b;\n    goto label_40;\n    do {\nlabel_31:\n        ebx = r10d;\n        rax = gettext_quote (0x409a36, r12d);\n        rax = gettext_quote (0x409a38, r12d);\n        *((rsp + 0x78)) = rax;\n        if (*(obj.y.32) < 0xa) {\n            goto label_44;\n        }\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        rdi = *((rsp + 0x40));\n        r8 = r15;\n        r10d = ebx;\n        if (ecx == 0) {\n            goto label_45;\n        }\nlabel_32:\n        ebx = r10d;\n        gettext_quote (0x409a36, r12d);\n        gettext_quote (0x409a38, r12d);\n        r10d = ebx;\n    } while (1);\nlabel_44:\n    rdi = *((rsp + 0x40));\n    r8 = r15;\n    r10d = ebx;\nlabel_45:\n    if ((r13b & 1) != 0) {\n        goto label_46;\n    }\n    if (*(obj.y.32) >= 0xa) {\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_47;\n        }\n    }\n    edx = 0;\n    do {\nlabel_0:\n        eax = *((rbp + rdx));\n        if (al == 0) {\n            goto label_48;\n        }\n        if (rdx < r8) {\n            *((rdi + rdx)) = al;\n        }\n        rdx++;\n    } while (*(obj.y.32) < 0xa);\n    eax = x.31;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_0;\n    }\n    goto label_47;\nlabel_46:\n    *((rsp + 0x70)) = rbp;\n    r14d = r10d;\n    ebx = 0;\n    goto label_49;\nlabel_48:\n    *((rsp + 0x70)) = rbp;\n    rbx = rdx;\n    r14d = r10d;\nlabel_49:\n    rbp = *((rsp + 0x78));\n    rax = strlen (*((rsp + 0x78)));\n    *((rsp + 0x30)) = rax;\n    al = 1;\n    *((rsp + 0x50)) = rax;\n    *((rsp + 0x38)) = rbp;\n    sil = r13b;\n    r8 = r15;\n    r11 = *((rsp + 0x80));\n    r10d = r14d;\n    ecx = r12d;\n    rbp = *((rsp + 0x70));\nlabel_40:\n    *((rsp + 0x70)) = rbp;\n    r14d = x.31;\n    r13d = y.32;\n    if (r13d >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_50;\n        }\n    }\n    dl = (*((rsp + 0x110)) != 0) ? 1 : 0;\n    rbp = *((rsp + 0x50));\n    rdi = rbx;\n    r9d = r10d;\n    r10 = r8;\n    r8d = ecx;\n    ebx = ebp;\n    bl &= 1;\n    rsp + 0x2a = (bl == 0) ? 1 : 0;\n    r15b = (r8d != 2) ? 1 : 0;\n    al = (r8d == 2) ? 1 : 0;\n    ecx = r15d;\n    *((rsp + 0xf)) = bl;\n    cl &= bl;\n    r12b = (*((rsp + 0x30)) != 0) ? 1 : 0;\n    ebx = r12d;\n    *((rsp + 0x2f)) = cl;\n    bl &= cl;\n    *((rsp + 0x80)) = bl;\n    ebx = esi;\n    bl &= 1;\n    cl = (bl == 0) ? 1 : 0;\n    al &= bl;\n    *((rsp + 0x2c)) = al;\n    *((rsp + 0xe)) = bl;\n    dl &= bl;\n    *((rsp + 0x24)) = r8d;\n    r8 = r10;\n    r10d = r9d;\n    r9 = r11;\n    r11 = rdi;\n    rdi = *((rsp + 0x40));\n    *((rsp + 0x2e)) = dl;\n    edx = r13d;\n    cl |= r15b;\n    *((rsp + 0x2d)) = cl;\n    eax = ebp;\n    *((rsp + 0xd0)) = rsi;\n    al &= sil;\n    al &= r12b;\n    *((rsp + 0x2b)) = al;\n    r13d = 0;\n    r15 = *((rsp + 0x48));\n    goto label_51;\nlabel_26:\n    r11 += 2;\n    ecx = 0;\n    goto label_25;\nlabel_22:\n    ecx = 0x10;\nlabel_2:\n    bpl = r10b;\n    if (edx >= 0xa) {\n        goto label_18;\n    }\n    goto label_19;\n    do {\nlabel_10:\n        *((rdi + rax)) = 0x22;\n        if (*(obj.y.32) < 0xa) {\n            goto label_9;\n        }\n        esi = x.31;\n        ebp = rsi - 1;\n        ebp *= esi;\n        ebp &= 1;\n        if (ebp == 0) {\n            goto label_9;\n        }\nlabel_11:\n        *((rdi + rax)) = 0x22;\n    } while (1);\nlabel_9:\n    rax = r11 + 3;\n    if (rax >= r8) {\n        goto label_52;\n    }\n    if (*(obj.y.32) < 0xa) {\n        goto label_53;\n    }\n    esi = x.31;\n    ebp = rsi - 1;\n    ebp *= esi;\n    ebp &= 1;\n    while (1) {\nlabel_53:\n        *((rdi + rax)) = 0x3f;\n        if (*(obj.y.32) < 0xa) {\n            goto label_52;\n        }\n        esi = x.31;\n        ebp = rsi - 1;\n        ebp *= esi;\n        ebp &= 1;\n        if (ebp == 0) {\n            goto label_52;\n        }\n        *((rdi + rax)) = 0x3f;\n    }\nlabel_52:\n    r11 += 4;\n    eax = 0;\n    r13 = rcx;\n    r12b = dl;\n    goto label_54;\nlabel_1:\n    if (edx >= 0xa) {\nlabel_18:\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_55;\n        }\n    }\nlabel_19:\n    if (ecx == 0) {\n        goto label_56;\n    }\n    if (ecx == 0xf) {\n        goto label_56;\n    }\n    goto label_57;\n    do {\nlabel_14:\n        *((rdi + rax)) = 0x24;\n        r14d = x.31;\n        edx = y.32;\n        if (edx < 0xa) {\n            goto label_13;\n        }\n        ecx = r14 - 1;\n        ecx *= r14d;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_13;\n        }\nlabel_15:\n        *((rdi + rax)) = 0x24;\n    } while (1);\nlabel_13:\n    rax = r11 + 2;\n    if (rax >= r8) {\n        goto label_58;\n    }\n    if (edx < 0xa) {\n        goto label_59;\n    }\n    ecx = r14 - 1;\n    ecx *= r14d;\n    ecx &= 1;\n    while (1) {\nlabel_59:\n        *((rdi + rax)) = 0x27;\n        r14d = x.31;\n        edx = y.32;\n        if (edx < 0xa) {\n            goto label_58;\n        }\n        ecx = r14 - 1;\n        ecx *= r14d;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_58;\n        }\n        *((rdi + rax)) = 0x27;\n    }\nlabel_58:\n    r11 += 3;\n    cl = 1;\nlabel_12:\n    if (edx >= 0xa) {\nlabel_16:\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_60;\n        }\n    }\nlabel_17:\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x5c;\n    }\n    r11++;\n    r12b = sil;\nlabel_25:\n    r14d = x.31;\n    edx = y.32;\n    if (r11 >= r8) {\n        goto label_61;\n    }\n    if (edx < 0xa) {\n        goto label_62;\n    }\n    eax = r14 - 1;\n    eax *= r14d;\n    eax &= 1;\n    if (eax != 0) {\n        goto label_63;\n    }\n    do {\nlabel_62:\n        *((rdi + r11)) = r12b;\n        r14d = x.31;\n        edx = y.32;\n        if (edx < 0xa) {\n            goto label_61;\n        }\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax == 0) {\n            goto label_61;\n        }\nlabel_63:\n        *((rdi + r11)) = r12b;\n    } while (1);\nlabel_61:\n    *((rsp + 0x1c)) = ecx;\n    r11++;\n    bpl = -bpl;\n    bpl &= r10b;\n    ecx = 0;\n    if (edx < 0xa) {\n        goto label_1;\n    }\n    eax = r14 - 1;\n    eax *= r14d;\n    eax &= 1;\n    if (eax == 0) {\n        goto label_1;\n    }\n    goto label_64;\nlabel_56:\n    r13++;\n    r10d = ebp;\nlabel_51:\n    *((rsp + 0x10)) = edx;\n    if (r9 != -1) {\n        if (r13 != r9) {\n            goto label_65;\n        }\n        goto label_66;\n    }\n    if (*((r15 + r13)) == 0) {\n        goto label_67;\n    }\nlabel_65:\n    if (*((rsp + 0x80)) != 0) {\n        rax = *((rsp + 0x30));\n        r12 = r13 + rax;\n        if (rax >= 2) {\n            if (r9 != -1) {\n                goto label_68;\n            }\n            rbx = r8;\n            r15d = r10d;\n            rax = strlen (r15);\n            edx = *((rsp + 0x10));\n            r11 = rbp;\n            r10d = r15d;\n            r8 = rbx;\n            r15 = *((rsp + 0x48));\n            rdi = *((rsp + 0x40));\n            r9 = rax;\n            if (r12 > r9) {\n                goto label_69;\n            }\n            goto label_70;\n        }\nlabel_68:\n        if (edx >= 0xa) {\n            eax = r14 - 1;\n            eax *= r14d;\n            eax &= 1;\n            if (eax != 0) {\n                goto label_71;\n            }\n        }\n        if (r12 <= r9) {\n            goto label_70;\n        }\n    }\nlabel_69:\n    ebx = 0;\nlabel_3:\n    if (edx >= 0xa) {\nlabel_4:\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_72;\n        }\n    }\nlabel_5:\n    r12d = *((r15 + r13));\n    if (r12 > 0x7e) {\n        goto label_73;\n    }\n    bpl = 1;\n    cl = 0x74;\n    sil = 0x62;\n    edx = 0;\n    eax = 0;\n    /* switch table (127 cases) at 0x409568 */\nlabel_7:\n    if (*((rsp + 0x2f)) == 0) {\n        goto label_20;\n    }\nlabel_6:\n    if (*((rsp + 0x110)) != 0) {\n        goto label_74;\n    }\n    goto label_75;\nlabel_70:\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_76;\n        }\n    }\n    *((rsp + 0x58)) = r14;\n    rax = r15;\n    r15 = r11;\n    r12d = r10d;\n    rbx = r9;\n    rcx = r13;\n    r13 = rax;\n    r14 = rcx;\n    eax = memcmp (rax + rcx, *((rsp + 0x38)), *((rsp + 0x30)));\n    al = (eax == 0) ? 1 : 0;\n    if (eax != 0) {\n        goto label_77;\n    }\n    ecx = 0x10;\n    rdi = *((rsp + 0x40));\n    r8 = rbp;\n    r9 = rbx;\n    r10d = r12d;\n    r11 = r15;\n    r15 = r13;\n    r13 = r14;\n    ebx = eax;\n    r14 = *((rsp + 0x58));\n    edx = *((rsp + 0x10));\n    if (*((rsp + 0xe)) != 0) {\n        goto label_2;\n    }\n    goto label_3;\nlabel_77:\n    rdi = *((rsp + 0x40));\n    r8 = rbp;\n    r9 = rbx;\n    r10d = r12d;\n    r11 = r15;\n    r15 = r13;\n    r13 = r14;\n    ebx = eax;\n    r14 = *((rsp + 0x58));\n    edx = *((rsp + 0x10));\n    if (edx >= 0xa) {\n        goto label_4;\n    }\n    goto label_5;\n    if (r13 != 0) {\n        goto label_78;\n    }\n    goto label_79;\n    eax = 0;\n    if (r9 == -1) {\n        goto label_80;\n    }\n    if (r13 != 0) {\n        goto label_54;\n    }\n    if (r9 == 1) {\n        goto label_79;\n    }\n    goto label_54;\n    if (*((rsp + 0xf)) == 0) {\n        goto label_81;\n    }\n    ecx = 0x10;\n    edx = *((rsp + 0x10));\n    if (*((rsp + 0xe)) != 0) {\n        goto label_2;\n    }\n    if (*((rsp + 0x24)) != 2) {\n        goto label_82;\n    }\n    eax = *((rsp + 0x1c));\n    al &= 1;\n    if (al != 0) {\n        goto label_82;\n    }\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x27;\n        r14d = x.31;\n        edx = y.32;\n    }\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_83;\n        }\n    }\n    rax = r11 + 1;\n    if (rax >= r8) {\n        goto label_84;\n    }\n    do {\n        *((rdi + rax)) = 0x24;\n        if (*(obj.y.32) < 0xa) {\n            goto label_84;\n        }\n        ecx = x.31;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n    } while (edx != 0);\nlabel_84:\n    rax = r11 + 2;\n    if (rax < r8) {\n        *((rdi + rax)) = 0x27;\n    }\n    r11 += 3;\n    al = 1;\n    *((rsp + 0x1c)) = eax;\nlabel_82:\n    rcx = r11;\n    if (rcx < r8) {\n        *((rdi + rcx)) = 0x5c;\n    }\n    r11 = rcx + 1;\n    al = 1;\n    r12b = 0x30;\n    if (*((rsp + 0x24)) == 2) {\n        goto label_54;\n    }\n    if (*(obj.y.32) >= 0xa) {\n        edx = x.31;\n        esi = rdx - 1;\n        esi *= edx;\n        esi &= 1;\n        if (esi != 0) {\n            goto label_85;\n        }\n    }\n    rdx = r13 + 1;\n    if (rdx >= r9) {\n        goto label_54;\n    }\n    dl = *((r15 + rdx));\n    dl += 0xd0;\n    if (dl > 9) {\n        goto label_54;\n    }\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x30;\n    }\n    rdx = rcx + 2;\n    if (rdx < r8) {\n        *((rdi + rdx)) = 0x30;\n    }\n    rcx += 3;\n    ebp = 0;\n    r11 = rcx;\n    if (*((rsp + 0x2f)) != 0) {\n        goto label_6;\n    }\n    goto label_20;\n    sil = 0x61;\n    goto label_86;\n    cl = 0x6e;\n    goto label_87;\n    sil = 0x76;\n    goto label_86;\n    sil = 0x66;\n    goto label_86;\n    cl = 0x72;\n    goto label_87;\n    r12b = 0x27;\n    if (*((rsp + 0x24)) != 2) {\n        goto label_88;\n    }\n    if (*((rsp + 0xe)) != 0) {\n        goto label_89;\n    }\n    al = (r8 == 0) ? 1 : 0;\n    rcx = *((rsp + 0x68));\n    rdx = *((rsp + 0x68));\n    cl = (rdx != 0) ? 1 : 0;\n    cl |= al;\n    if (cl == 0) {\n        rdx = r8;\n    }\n    *((rsp + 0x68)) = rdx;\n    eax = 0;\n    if (cl == 0) {\n        r8 = rax;\n    }\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x27;\n    }\n    rax = r11 + 1;\n    if (rax < r8) {\n        *((rdi + rax)) = 0x5c;\n    }\n    eax = x.31;\n    ecx = y.32;\n    if (ecx >= 0xa) {\n        edx = rax - 1;\n        edx *= eax;\n        edx &= 1;\n        if (edx != 0) {\n            goto label_90;\n        }\n    }\n    rdx = r11 + 2;\n    if (rdx >= r8) {\n        goto label_91;\n    }\n    do {\n        *((rdi + rdx)) = 0x27;\n        eax = x.31;\n        ecx = y.32;\n        if (ecx < 0xa) {\n            goto label_91;\n        }\n        esi = rax - 1;\n        esi *= eax;\n        esi &= 1;\n    } while (esi != 0);\nlabel_91:\n    if (ecx >= 0xa) {\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_92;\n        }\n    }\n    r11 += 3;\n    al = 1;\n    *((rsp + 0x90)) = rax;\n    *((rsp + 0x1c)) = 0;\n    goto label_93;\n    r12b = 0x3f;\n    eax = *((rsp + 0x24));\n    if (eax == 5) {\n        goto label_94;\n    }\n    if (eax != 2) {\n        goto label_78;\n    }\n    ecx = 0x10;\n    if (*((rsp + 0xe)) != 0) {\n        goto label_95;\n    }\n    goto label_78;\n    if (*((rsp + 0x24)) != 2) {\n        goto label_96;\n    }\n    ecx = 0x10;\n    if (*((rsp + 0xe)) != 0) {\n        goto label_95;\n    }\n    r12b = 0x5c;\n    eax = 0;\n    goto label_97;\nlabel_73:\n    *((rsp + 0x98)) = r11;\n    *((rsp + 0x23)) = r10b;\n    *((rsp + 0xb8)) = r8;\n    if (*((rsp + 0xc8)) != 1) {\n        goto label_98;\n    }\n    rax = ctype_b_loc ();\n    r9 = rbp;\n    rax = *(rax);\n    ebp = *((rax + r12*2));\n    ebp >>= 0xe;\n    bpl &= 1;\n    ecx = 1;\n    edx = *((rsp + 0x10));\n    goto label_99;\nlabel_80:\n    if (r13 != 0) {\n        goto label_100;\n    }\n    cl = *((r15 + 1));\n    if (cl != 0) {\n        goto label_100;\n    }\nlabel_79:\n    dl = 1;\n    if (*((rsp + 0x24)) == 2) {\n        ecx = 0x10;\n        if (*((rsp + 0xe)) != 0) {\n            goto label_95;\n        }\n    }\n    eax = 0;\n    bpl = dl;\n    if (*((rsp + 0x2f)) != 0) {\n        goto label_6;\n    }\n    goto label_20;\nlabel_81:\n    ecx = 0xf;\n    edx = *((rsp + 0x10));\n    if (*((rsp + 0xa8)) != 0) {\n        goto label_2;\n    }\n    r12d = 0;\n    goto label_78;\nlabel_88:\n    al = 1;\n    *((rsp + 0x90)) = rax;\nlabel_93:\n    eax = 0;\n    bpl = 1;\n    if (*((rsp + 0x2f)) != 0) {\n        goto label_6;\n    }\n    goto label_20;\nlabel_96:\n    cl = 0x5c;\n    if (*((rsp + 0x2b)) != 0) {\n        eax = 0;\n        r12b = 0x5c;\nlabel_97:\n        ebp = 0;\n        goto label_101;\n    }\nlabel_87:\n    esi = ecx;\n    if (*((rsp + 0x2d)) == 0) {\n        goto label_102;\n    }\nlabel_86:\n    eax = 0;\n    if (*((rsp + 0xf)) != 0) {\n        goto label_103;\n    }\n    goto label_7;\nlabel_98:\n    *((rsp + 0xa0)) = ebx;\n    *((rsp + 0xc0)) = 0;\n    if (r9 == -1) {\n        rax = strlen (r15);\n        r9 = rax;\n    }\n    rax = r15 + r13;\n    *((rsp + 0xb0)) = rax;\n    al = 1;\n    ecx = 0;\n    *((rsp + 0x60)) = r13;\nlabel_8:\n    *((rsp + 0x10)) = eax;\n    r14 = rcx;\n    rbp = rcx + r13;\n    r13 = r9;\n    r9 -= rbp;\n    rdx = r9;\n    rcx = rsp + 0xc0;\n    rax = rpl_mbrtowc (rsp + 0xac, r15 + rbp);\n    rbx = rax;\n    if (rbx == 0) {\n        goto label_104;\n    }\n    if (*(obj.y.32) >= 0xa) {\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_105;\n        }\n    }\n    if (rbx == -1) {\n        goto label_106;\n    }\n    r9 = r13;\n    if (rbx == 0xfffffffffffffffe) {\n        goto label_107;\n    }\n    al = (rbx > 1) ? 1 : 0;\n    al &= *((rsp + 0x2c));\n    rsi = 0x20000002b;\n    if (al != 1) {\n        goto label_108;\n    }\n    rax = *((rsp + 0xb0));\n    rax = rax + r14;\n    ecx = 1;\n    do {\n        edx = *((rax + rcx));\n        edx += 0xffffffa5;\n        if (edx <= 0x21) {\n            if (((rsi >> rdx) & 1) < 0) {\n                goto label_109;\n            }\n        }\n        rcx++;\n    } while (rcx < rbx);\nlabel_108:\n    eax = iswprint (*((rsp + 0xac)));\n    *((rsp + 0x58)) = 0;\n    if (eax != 0) {\n        ebp = *((rsp + 0x10));\n    }\n    r14 += rbx;\n    eax = mbsinit (rsp + 0xc0);\n    rcx = r14;\n    al = bpl;\n    r15 = *((rsp + 0x48));\n    r9 = r13;\n    r13 = *((rsp + 0x60));\n    if (eax == 0) {\n        goto label_8;\n    }\n    goto label_110;\nlabel_100:\n    r9 = 0xffffffffffffffff;\n    goto label_54;\nlabel_109:\n    *((rsp + 0x58)) = 0x10;\n    ebp = *((rsp + 0x10));\n    r15 = *((rsp + 0x48));\n    r13 = *((rsp + 0x60));\n    rcx = r14;\n    goto label_110;\nlabel_94:\n    if (*((rsp + 0xa4)) == 0) {\n        goto label_78;\n    }\n    rcx = r13 + 2;\n    if (rcx >= r9) {\n        goto label_78;\n    }\n    if (*((r15 + r13 + 1)) != 0x3f) {\n        goto label_78;\n    }\n    edx = *((r15 + rcx));\n    eax = 0;\n    if (edx > 0x3e) {\n        goto label_54;\n    }\n    rsi = 0x7000a38200000000;\n    if (((rsi >> rdx) & 1) >= 0) {\n        goto label_54;\n    }\n    if (*((rsp + 0xe)) != 0) {\n        goto label_102;\n    }\n    if (r11 >= r8) {\n        goto label_111;\n    }\n    do {\n        *((rdi + r11)) = 0x3f;\n        r14d = x.31;\n        eax = y.32;\n        *((rsp + 0x10)) = eax;\n        if (eax < 0xa) {\n            goto label_111;\n        }\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n    } while (eax != 0);\nlabel_111:\n    if (*((rsp + 0x10)) >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_112;\n        }\n    }\n    rax = r11 + 1;\n    if (rax < r8) {\n        *((rdi + rax)) = 0x22;\n    }\n    rax = r11 + 2;\n    if (rax >= r8) {\n        goto label_9;\n    }\n    if (*(obj.y.32) < 0xa) {\n        goto label_10;\n    }\n    esi = x.31;\n    ebp = rsi - 1;\n    ebp *= esi;\n    ebp &= 1;\n    if (ebp != 0) {\n        goto label_11;\n    }\n    goto label_10;\nlabel_78:\n    eax = 0;\nlabel_54:\n    ebp = 0;\n    if (*((rsp + 0x2f)) != 0) {\n        goto label_6;\n    }\nlabel_20:\n    if (*((rsp + 0x2e)) != 0) {\nlabel_74:\n        ecx = r12d;\n        cl >>= 5;\n        ecx = (int32_t) cl;\n        rdx = *((rsp + 0x110));\n        ecx = *((rdx + rcx*4));\n        edx = (int32_t) r12b;\n        if (((ecx >> edx) & 1) < 0) {\n            esi = r12d;\n        }\n    } else {\nlabel_75:\n        r14d = x.31;\n        edx = y.32;\n        if (edx >= 0xa) {\n            ecx = r14 - 1;\n            ecx *= r14d;\n            ecx &= 1;\n            if (ecx != 0) {\n                goto label_113;\n            }\n        }\n        *((rsp + 0x10)) = edx;\n        esi = r12d;\n        if (bl == 0) {\n            goto label_101;\n        }\n    }\nlabel_103:\n    r14d = x.31;\n    ecx = 0x10;\n    edx = y.32;\n    if (*((rsp + 0xe)) != 0) {\n        goto label_2;\n    }\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_114;\n        }\n    }\n    if (*((rsp + 0x24)) != 2) {\n        goto label_115;\n    }\n    ecx = *((rsp + 0x1c));\n    eax = *((rsp + 0x1c));\n    al &= 1;\n    if (al != 0) {\n        goto label_12;\n    }\n    if (r11 >= r8) {\n        goto label_116;\n    }\n    do {\n        *((rdi + r11)) = 0x27;\n        r14d = x.31;\n        edx = y.32;\n        if (edx < 0xa) {\n            goto label_116;\n        }\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n    } while (eax != 0);\nlabel_116:\n    rax = r11 + 1;\n    if (rax >= r8) {\n        goto label_13;\n    }\n    if (edx < 0xa) {\n        goto label_14;\n    }\n    ecx = r14 - 1;\n    ecx *= r14d;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_15;\n    }\n    goto label_14;\nlabel_115:\n    ecx = *((rsp + 0x1c));\n    if (edx >= 0xa) {\n        goto label_16;\n    }\n    goto label_17;\nlabel_102:\n    bpl = r10b;\n    edx = *((rsp + 0x10));\n    ecx = 0x10;\n    if (edx >= 0xa) {\n        goto label_18;\n    }\n    goto label_19;\nlabel_89:\n    ecx = 0x10;\n    al = 1;\n    *((rsp + 0x90)) = rax;\nlabel_95:\n    bpl = r10b;\n    edx = *((rsp + 0x10));\n    if (edx >= 0xa) {\n        goto label_18;\n    }\n    goto label_19;\nlabel_104:\n    r15 = *((rsp + 0x48));\n    r9 = r13;\n    r13 = *((rsp + 0x60));\n    rcx = r14;\n    ebp = *((rsp + 0x10));\n    goto label_117;\nlabel_106:\n    ebp = 0;\n    r15 = *((rsp + 0x48));\n    r9 = r13;\n    goto label_118;\nlabel_107:\n    if (r9 <= rbp) {\n        goto label_119;\n    }\n    r15 = *((rsp + 0x48));\n    r13 = *((rsp + 0x60));\n    rcx = r14;\n    do {\n        rax = *((rsp + 0xb0));\n        if (*((rax + rcx)) == 0) {\n            goto label_120;\n        }\n        rax = r13 + rcx + 1;\n        rcx++;\n    } while (rax < r9);\nlabel_120:\n    ebp = 0;\n    goto label_117;\nlabel_119:\n    ebp = 0;\n    r15 = *((rsp + 0x48));\nlabel_118:\n    r13 = *((rsp + 0x60));\n    rcx = r14;\nlabel_117:\n    *((rsp + 0x58)) = 0;\nlabel_110:\n    r14d = x.31;\n    edx = y.32;\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_121;\n        }\n    }\n    ebx = *((rsp + 0xa0));\n    if (*((rsp + 0x58)) == 0) {\n        goto label_99;\n    }\n    al = *((rsp + 0x23));\n    bpl = *((rsp + 0x23));\n    rdi = *((rsp + 0x40));\n    r8 = *((rsp + 0xb8));\n    r11 = *((rsp + 0x98));\n    ecx = *((rsp + 0x58));\n    if (edx >= 0xa) {\n        goto label_18;\n    }\n    goto label_19;\nlabel_99:\n    r10b = *((rsp + 0x23));\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_122;\n        }\n    }\n    bpl &= 1;\n    r8 = *((rsp + 0xb8));\n    if (rcx > 1) {\n        goto label_123;\n    }\n    eax = ebp;\n    al |= *((rsp + 0x2a));\n    if (al == 0) {\n        goto label_123;\n    }\n    eax = 0;\n    rdi = *((rsp + 0x40));\n    r11 = *((rsp + 0x98));\n    if (*((rsp + 0x2f)) != 0) {\n        goto label_6;\n    }\n    goto label_20;\nlabel_123:\n    rcx += r13;\n    *((rsp + 0x10)) = rcx;\n    eax = 0;\n    rdi = *((rsp + 0x40));\n    r11 = *((rsp + 0x98));\n    goto label_124;\nlabel_23:\n    rax = r11 + 2;\n    if (rax < r8) {\n        ecx = r12d;\n        cl >>= 3;\n        cl &= 7;\n        cl |= 0x30;\n        *((rdi + rax)) = cl;\n    }\n    r11 += 3;\n    r12b &= 7;\n    r12b |= 0x30;\n    al = 1;\n    do {\nlabel_21:\n        r14d = x.31;\n        edx = y.32;\n        if (edx >= 0xa) {\n            ecx = r14 - 1;\n            ecx *= r14d;\n            ecx &= 1;\n            if (ecx != 0) {\n                goto label_125;\n            }\n        }\n        rcx = r13 + 1;\n        if (*((rsp + 0x10)) <= rcx) {\n            goto label_126;\n        }\n        if ((*((rsp + 0x1c)) & 1) != 0) {\n            edx = eax;\n            dl &= 1;\n            if (dl != 0) {\n                goto label_127;\n            }\n            if (r11 < r8) {\n                *((rdi + r11)) = 0x27;\n            }\n            rdx = r11 + 1;\n            if (rdx < r8) {\n                *((rdi + rdx)) = 0x27;\n            }\n            r11 += 2;\n            *((rsp + 0x1c)) = 0;\n        }\nlabel_127:\n        if (r11 < r8) {\n            *((rdi + r11)) = r12b;\n        }\n        r14d = x.31;\n        edx = y.32;\n        if (edx >= 0xa) {\n            esi = edx;\n            edx = r14 - 1;\n            edx *= r14d;\n            edx &= 1;\n            edx = esi;\n            if (edx != 0) {\n                goto label_128;\n            }\n        }\n        r12b = *((r15 + rcx));\n        r11++;\n        r13 = rcx;\nlabel_124:\n        ecx = *((rsp + 0x1c));\n        if (*((rsp + 0xf)) != 0) {\n            if (edx >= 0xa) {\n                ecx = r14 - 1;\n                ecx *= r14d;\n                ecx &= 1;\n                ecx = *((rsp + 0x1c));\n                if (ecx != 0) {\n                    goto label_129;\n                }\n            }\n            if (bpl == 0) {\n                goto label_130;\n            }\n        }\n    } while ((bl & 1) == 0);\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x5c;\n    }\n    r11++;\n    ebx = 0;\n    goto label_21;\nlabel_130:\n    if (*((rsp + 0xe)) != 0) {\n        goto label_22;\n    }\n    if (*((rsp + 0x24)) != 2) {\n        goto label_131;\n    }\n    eax = ecx;\n    al &= 1;\n    if (al != 0) {\n        goto label_131;\n    }\n    if (r11 >= r8) {\n        goto label_132;\n    }\n    do {\n        *((rdi + r11)) = 0x27;\n        r14d = x.31;\n        edx = y.32;\n        if (edx < 0xa) {\n            goto label_132;\n        }\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n    } while (eax != 0);\nlabel_132:\n    rax = r11 + 1;\n    if (rax < r8) {\n        *((rdi + rax)) = 0x24;\n        r14d = x.31;\n        edx = y.32;\n    }\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_133;\n        }\n    }\n    rax = r11 + 2;\n    if (rax >= r8) {\n        goto label_134;\n    }\n    do {\n        *((rdi + rax)) = 0x27;\n        r14d = x.31;\n        edx = y.32;\n        if (edx < 0xa) {\n            goto label_134;\n        }\n        ecx = r14 - 1;\n        ecx *= r14d;\n        ecx &= 1;\n    } while (ecx != 0);\nlabel_134:\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_135;\n        }\n    }\n    r11 += 3;\n    cl = 1;\nlabel_131:\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x5c;\n        r14d = x.31;\n        edx = y.32;\n    }\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_136;\n        }\n    }\n    *((rsp + 0x1c)) = ecx;\n    rax = r11 + 1;\n    if (rax >= r8) {\n        goto label_23;\n    }\n    ecx = r12d;\n    cl >>= 6;\n    cl |= 0x30;\nlabel_24:\n    *((rdi + rax)) = cl;\n    if (*(obj.y.32) < 0xa) {\n        goto label_23;\n    }\n    edx = x.31;\n    esi = rdx - 1;\n    esi *= edx;\n    esi &= 1;\n    if (esi != 0) {\n        goto label_24;\n    }\n    goto label_23;\nlabel_126:\n    *((rsp + 0x10)) = edx;\nlabel_101:\n    ecx = *((rsp + 0x1c));\n    if ((cl & 1) == 0) {\n        goto label_25;\n    }\n    al &= 1;\n    eax = *((rsp + 0x10));\n    if (al != 0) {\n        goto label_25;\n    }\n    if (r11 < r8) {\n        *((rdi + r11)) = 0x27;\n        r14d = x.31;\n        eax = y.32;\n    }\n    if (eax >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_137;\n        }\n    }\n    rax = r11 + 1;\n    if (rax >= r8) {\n        goto label_26;\n    }\nlabel_27:\n    *((rdi + rax)) = 0x27;\n    if (*(obj.y.32) < 0xa) {\n        goto label_26;\n    }\n    ecx = x.31;\n    edx = rcx - 1;\n    edx *= ecx;\n    edx &= 1;\n    if (edx != 0) {\n        goto label_27;\n    }\n    goto label_26;\nlabel_66:\n    r9 = r13;\n    goto label_138;\nlabel_67:\n    r9 = 0xffffffffffffffff;\nlabel_138:\n    edx = *((rsp + 0x24));\n    al = (edx != 2) ? 1 : 0;\n    cl = (r11 != 0) ? 1 : 0;\n    if (*((rsp + 0xe)) != 0) {\n        al |= cl;\n        if (al == 0) {\n            goto label_139;\n        }\n    }\n    al = (edx != 2) ? 1 : 0;\n    cl = (*((rsp + 0xe)) != 0) ? 1 : 0;\n    if ((*((rsp + 0x90)) & 1) == 0) {\n        goto label_140;\n    }\n    al |= cl;\n    if (al != 0) {\n        goto label_140;\n    }\n    if ((r10b & 1) != 0) {\n        goto label_141;\n    }\n    if (*((rsp + 0x68)) == 0) {\n        goto label_140;\n    }\n    if (r8 != 0) {\n        goto label_140;\n    }\n    *((rsp + 0x80)) = r9;\n    r12d = edx;\n    rcx = *((rsp + 0xd0));\n    r13d = ecx;\n    r15 = *((rsp + 0x68));\n    rbp = *((rsp + 0x70));\n    if (*((rsp + 0x10)) < 0xa) {\n        goto label_28;\n    }\n    eax = r14 - 1;\n    eax *= r14d;\n    eax &= 1;\n    r12d = edx;\n    r13d = ecx;\n    r15 = *((rsp + 0x68));\n    if (eax == 0) {\n        goto label_28;\n    }\nlabel_55:\nlabel_72:\nlabel_113:\nlabel_47:\nlabel_64:\nlabel_114:\nlabel_60:\nlabel_71:\nlabel_76:\nlabel_50:\nlabel_137:\nlabel_36:\nlabel_35:\nlabel_125:\nlabel_128:\nlabel_43:\nlabel_34:\nlabel_105:\nlabel_129:\nlabel_122:\nlabel_136:\nlabel_121:\nlabel_133:\nlabel_135:\nlabel_90:\nlabel_92:\nlabel_83:\nlabel_85:\nlabel_57:\n    if (ecx == 0x10) {\n        *((rsp + 0x10)) = edx;\n        edx = *((rsp + 0x24));\nlabel_139:\n        if (*((rsp + 0xf)) == 0) {\n        }\n        if (edx != 2) {\n        }\n        r13d = *((rsp + 0x8c));\n        r13d &= 0xfffffffd;\n        r15 = r8;\n        r12 = r9;\n        rbx = *((rsp + 0x70));\n        if (*((rsp + 0x10)) < 0xa) {\n            goto label_142;\n        }\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax != 0) {\n            goto label_143;\n        }\n        goto label_142;\nlabel_112:\n    }\n    goto label_144;\nlabel_140:\n    edx = *((rsp + 0x10));\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax == 0) {\n            goto label_145;\n        }\n    }\nlabel_145:\n    al = (*((rsp + 0xe)) != 0) ? 1 : 0;\n    rcx = *((rsp + 0x38));\n    if (rcx == 0) {\n        goto label_146;\n    }\n    if (al != 0) {\n        goto label_146;\n    }\n    al = *(rcx);\n    if (al == 0) {\n        goto label_146;\n    }\n    rcx++;\n    do {\n        if (r11 < r8) {\n            *((rdi + r11)) = al;\n            r14d = x.31;\n            edx = y.32;\n        }\n        if (edx >= 0xa) {\n            eax = r14 - 1;\n            eax *= r14d;\n            eax &= 1;\n            if (eax != 0) {\n                goto label_147;\n            }\n        }\n        r11++;\n        eax = *(rcx);\n        rcx++;\n    } while (al != 0);\nlabel_146:\n    if (edx >= 0xa) {\n        eax = r14 - 1;\n        eax *= r14d;\n        eax &= 1;\n        if (eax == 0) {\n            goto label_148;\n        }\nlabel_147:\nlabel_141:\n        rax = quotearg_buffer_restyled (rdi, *((rsp + 0x70)), r15, r9, 5, *((rsp + 0x94)));\n        goto label_29;\n        r11 = rax;\n        goto label_144;\n    }\nlabel_148:\n    if (r11 >= r8) {\n        goto label_144;\n    }\n    do {\n        *((rdi + r11)) = 0;\n        if (*(obj.y.32) < 0xa) {\n            goto label_144;\n        }\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n    } while (ecx != 0);\n    goto label_144;\nlabel_30:\n    abort ();\n    do {\nlabel_142:\n        rax = quotearg_buffer_restyled (rdi, r8, *((rsp + 0x50)), r9, ebp, r13d);\n        goto label_29;\n        r11 = rax;\n        if (*(obj.y.32) < 0xa) {\n            goto label_144;\n        }\n        eax = x.31;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        rdi = *((rsp + 0x40));\n        r8 = r15;\n        r9 = r12;\n        if (ecx == 0) {\n            goto label_144;\n        }\nlabel_143:\n        quotearg_buffer_restyled (rdi, r8, *((rsp + 0x50)), r9, ebp, r13d);\n        goto label_29;\n        r9 = r12;\n        r8 = r15;\n        rdi = *((rsp + 0x60));\n    } while (1);\nlabel_144:\n    rax = r11;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_alloc",
            "funcStartAddr": "0x4049e0",
            "funcEndAddr": "0x404aa1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4049e0 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_alloc (char const * arg, int64_t arg1, int64_t arg2, char * buf, size_t n, quoting_options const * o, quoting_options const * p) {\n    int32_t flags;\n    int32_t e;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    r12 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    r13 = buf;\n    rbx = n;\n    rdx = o;\n    r14 = p;\n    /* char * quotearg_alloc(char const * arg,size_t argsize,quoting_options const * o); */\n    rbx = rsi;\n    *((rsp + 8)) = rbx;\n    r12 = rdi;\n    r14d = default_quoting_options;\n    if (rdx != 0) {\n        r14 = rdx;\n    }\n    rax = errno_location ();\n    *((rsp + 0x10)) = rax;\n    ecx = *(rax);\n    *((rsp + 4)) = ecx;\n    ebp = *((r14 + 4));\n    ebp |= 1;\n    r15 = r14 + 8;\n    rax = quotearg_buffer_restyled (0, 0, r12, rbx, *(r14), ebp);\n    rbx = rax;\n    rbx++;\n    rax = xmalloc (rbx);\n    r13 = rax;\n    quotearg_buffer_restyled (r13, rbx, r12, *((rsp + 0x10)), *(r14), ebp);\n    eax = *((rsp + 4));\n    rcx = *((rsp + 0x10));\n    *(rcx) = eax;\n    rax = r13;\n    return rax;\n}\n"
        },
        {
            "funcName": "quotearg_alloc_mem",
            "funcStartAddr": "0x404ab0",
            "funcEndAddr": "0x404b9c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404ab0 */\n#include <stdint.h>\n \nuint64_t quotearg_alloc_mem (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rbx = rdx;\n    *((rsp + 0x18)) = rbx;\n    r14 = rsi;\n    *((rsp + 0x10)) = r14;\n    r15 = rdi;\n    *((rsp + 8)) = r15;\n    r12d = default_quoting_options;\n    if (rcx != 0) {\n        r12 = rcx;\n    }\n    rax = errno_location ();\n    *((rsp + 0x20)) = rax;\n    ecx = *(rax);\n    *((rsp + 4)) = ecx;\n    ebp = 0;\n    bpl = (rbx == 0) ? 1 : 0;\n    ebp |= *((r12 + 4));\n    r13 = r12 + 8;\n    rax = quotearg_buffer_restyled (0, 0, r15, r14, *(r12), ebp);\n    rbx = rax;\n    r15 = rbx + 1;\n    rax = xmalloc (r15);\n    r14 = rax;\n    quotearg_buffer_restyled (r14, r15, *((rsp + 0x10)), *((rsp + 0x18)), *(r12), ebp);\n    rax = *((rsp + 0x38));\n    ecx = *((rsp + 4));\n    rdx = *((rsp + 0x20));\n    *(rdx) = ecx;\n    if (rax != 0) {\n        *(rax) = rbx;\n    }\n    rax = r14;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_free",
            "funcStartAddr": "0x404ba0",
            "funcEndAddr": "0x404cf2",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404ba0 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_free (slotvec * sv) {\n    r14 = sv;\n    /* void quotearg_free(); */\n    r14 = slotvec;\n    if (*(obj.nslots) < 2) {\n        goto label_1;\n    }\n    eax = x.37;\n    ecx = y.38;\n    rbx = r14 + 0x18;\n    r15d = 1;\nlabel_0:\n    if (ecx < 0xa) {\n        goto label_2;\n    }\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_2:\n        free (*(rbx));\n        eax = x.37;\n        ecx = y.38;\n        if (ecx < 0xa) {\n            goto label_3;\n        }\n        edx = rax - 1;\n        edx *= eax;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_3;\n        }\n        free (*(rbx));\n    }\nlabel_3:\n    r15++;\n    rdx = *(obj.nslots);\n    rbx += 0x10;\n    if (r15 < rdx) {\n        goto label_0;\n    }\nlabel_1:\n    rdi = *((r14 + 8));\n    eax = slot0;\n    if (rdi != rax) {\n        free (rdi);\n        *(obj.slotvec0) = 0x100;\n        *(obj.slot0) = 0x40c2d0;\n    }\n    eax = slotvec0;\n    eax = x.37;\n    ecx = y.38;\n    if (r14 == rax) {\n        goto label_4;\n    }\n    if (ecx < 0xa) {\n        goto label_5;\n    }\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_5:\n        free (r14);\n        *(obj.slotvec) = 0x40c1c0;\n        eax = x.37;\n        ecx = y.38;\n        if (ecx < 0xa) {\n            goto label_4;\n        }\n        edx = rax - 1;\n        edx *= eax;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_4;\n        }\n        eax = free (r14);\n        *(obj.slotvec) = 0x40c1c0;\n    }\nlabel_4:\n    if (ecx < 0xa) {\n        goto label_6;\n    }\n    edx = rax - 1;\n    edx *= eax;\n    edx &= 1;\n    while (1) {\nlabel_6:\n        *(obj.nslots) = 1;\n        if (ecx < 0xa) {\n            goto label_7;\n        }\n        edx = rax - 1;\n        edx *= eax;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_7;\n        }\n        *(obj.nslots) = 1;\n    }\nlabel_7:\n    return eax;\n}\n"
        },
        {
            "funcName": "quotearg_n",
            "funcStartAddr": "0x404d00",
            "funcEndAddr": "0x404d0e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404d00 */\n#include <stdint.h>\n \nvoid quotearg_n (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, int64_t arg1, int64_t arg2) {\n    int64_t var_ch;\n    int64_t var_10h_2;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h_2;\n    int64_t var_40h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = 0xffffffffffffffff;\n    ecx = default_quoting_options;\n    return void (*0x404d10)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_n_options",
            "funcStartAddr": "0x404d10",
            "funcEndAddr": "0x404f42",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404d10 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_n_options (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int32_t flags, size_t n, size_t size, slotvec * sv, char * val) {\n    quoting_options const * options;\n    int64_t var_ch;\n    int64_t var_10h_2;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h_2;\n    int64_t var_40h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r9 = flags;\n    r12 = n;\n    r14 = size;\n    r15 = sv;\n    rbx = val;\n    /* char * quotearg_n_options(int n,char const * arg,size_t argsize,quoting_options const * options); */\n    r12 = rdx;\n    rbx = rsi;\n    r13d = edi;\n    if (*(obj.y.42) < 0xa) {\n        goto label_0;\n    }\n    eax = x.41;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_0;\n    }\n    while (1);\nlabel_0:\n    rax = errno_location ();\n    if (r13d >= 0) {\n        ecx = *(rax);\n        r15 = slotvec;\n        *((rsp + 0x18)) = r12;\n        *((rsp + 0x10)) = rbx;\n        *((rsp + 0x20)) = rax;\n        *(rsp) = ecx;\n        if (*(obj.nslots) <= r13d) {\n            rbx = rbp;\n            if (r13d == 0x7fffffff) {\n                goto label_1;\n            }\n            r12d = slotvec0;\n            edi = 0;\n            if (r15 != r12) {\n                rdi = r15;\n            }\n            ebp = r13 + 1;\n            rsi = (int64_t) r13d;\n            rsi <<= 4;\n            rsi += 0x10;\n            rax = xrealloc (rdi, rsi);\n            r14 = rax;\n            *(obj.slotvec) = r14;\n            if (r15 == r12) {\n                __asm (\"movups xmm0, xmmword [obj.slotvec0]\");\n                __asm (\"movups xmmword [r14], xmm0\");\n            }\n            rax = *(obj.nslots);\n            rbp = (int64_t) ebp;\n            rdx -= rax;\n            rax <<= 4;\n            rdi += rax;\n            rdx <<= 4;\n            memset (r14, 0, rbp);\n            *(obj.nslots) = ebp;\n            r15 = r14;\n            r12 = *((rsp + 0x18));\n            rbx = *((rsp + 0x10));\n        }\n        r13 = (int64_t) r13d;\n        r13 <<= 4;\n        r14 = *((r15 + r13));\n        r8d = *(rbp);\n        r9d |= 1;\n        rax = rbp + 8;\n        *((rsp + 0x10)) = rdi;\n        *((rsp + 0xc)) = r9d;\n        *((rsp + 0x40)) = rbp;\n        *((rsp + 0x40)) = rax;\n        rax = quotearg_buffer_restyled (*((r15 + r13 + 8)), r14, rbx, r12, *(r8d), *((rbp + 4)));\n        r12 = rax;\n        if (r14 > r12) {\n            rax = *((rsp + 0x20));\n            ecx = *(rsp);\n            rbx = *((rsp + 8));\n            goto label_2;\n        }\n        rax = r15 + r13;\n        r12++;\n        if (*(obj.y.42) < 0xa) {\n            goto label_3;\n        }\n        ecx = x.41;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx != 0) {\n            goto label_4;\n        }\n    } else {\n        abort ();\nlabel_1:\n        xalloc_die ();\n    }\n    do {\nlabel_3:\n        *(rax) = r12;\n        if (*(obj.y.42) < 0xa) {\n            goto label_5;\n        }\n        ecx = x.41;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_5;\n        }\nlabel_4:\n        *(rax) = r12;\n    } while (1);\nlabel_5:\n    rbp = r15 + r13 + 8;\n    eax = slot0;\n    rdi = *((rsp + 8));\n    if (rdi != rax) {\n        free (rdi);\n    }\n    rax = xmalloc (r12);\n    rbx = rax;\n    *(rbp) = rbx;\n    rax = *((rsp + 0x30));\n    quotearg_buffer_restyled (rbx, r12, *((rsp + 0x18)), *((rsp + 0x20)), *(rax), *((rsp + 0xc)));\n    rax = *((rsp + 0x20));\n    ecx = *(rsp);\nlabel_2:\n    *(rax) = ecx;\n    rax = rbx;\n    return rax;\n}\n"
        },
        {
            "funcName": "quotearg_n_mem",
            "funcStartAddr": "0x404f50",
            "funcEndAddr": "0x404f5a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404f50 */\n#include <stdint.h>\n \nvoid quotearg_n_mem (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_ch;\n    int64_t var_10h_2;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h_2;\n    int64_t var_40h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = default_quoting_options;\n    return void (*0x404d10)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg",
            "funcStartAddr": "0x404f60",
            "funcEndAddr": "0x404f79",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404f60 */\n#include <stdint.h>\n \nint64_t dbg_quotearg (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, char const * arg, int64_t arg1) {\n    int64_t var_ch;\n    int64_t var_10h_2;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h_2;\n    int64_t var_40h;\n    rax = arg;\n    rdi = arg1;\n    /* char * quotearg(char const * arg); */\n    rax = rdi;\n    edi = 0;\n    rdx = 0xffffffffffffffff;\n    ecx = default_quoting_options;\n    rsi = rax;\n    return void (*0x404d10)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_mem",
            "funcStartAddr": "0x404f80",
            "funcEndAddr": "0x404f98",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404f80 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_mem (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    int64_t var_ch;\n    int64_t var_10h_2;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_40h_2;\n    int64_t var_40h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    /* char * quotearg_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    edi = 0;\n    ecx = default_quoting_options;\n    rsi = rdx;\n    rdx = rax;\n    return void (*0x404d10)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_n_style",
            "funcStartAddr": "0x404fa0",
            "funcEndAddr": "0x4050b5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404fa0 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_n_style (char const * arg, int64_t arg1, int64_t arg2, int64_t arg3, int32_t n, quoting_style style) {\n    quoting_options o;\n    int64_t var_40h;\n    int64_t var_30h;\n    int64_t var_18h;\n    r14 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r15 = n;\n    rbx = style;\n    /* char * quotearg_n_style(int n,quoting_style s,char const * arg); */\n    r14 = rdx;\n    ebx = esi;\n    r15d = edi;\n    if (*(obj.y.50) < 0xa) {\n        goto label_0;\n    }\n    eax = x.49;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        rcx = rsp;\n        rcx += 0xffffffffffffffc0;\n        __asm (\"xorps xmm0, xmm0\");\n        *((rbp - 0x30)) = xmm0;\n        *((rbp - 0x40)) = xmm0;\n        *(o.style) = xmm0;\n        *(o.right_quote) = 0;\n        if (ebx == 0xa) {\n            goto label_1;\n        }\n        eax = *(o.right_quote);\n        *((rcx + 0x34)) = eax;\n        xmm0 = *(o.style);\n        xmm1 = *((rbp - 0x40));\n        xmm2 = *((rbp - 0x30));\n        __asm (\"movups xmmword [rcx + 0x24], xmm2\");\n        __asm (\"movups xmmword [rcx + 0x14], xmm1\");\n        __asm (\"movups xmmword [rcx + 4], xmm0\");\n        quotearg_n_options (r15d, r14, 0xffffffffffffffff, ebx, r8, r9);\n        if (*(obj.y.50) < 0xa) {\n            goto label_2;\n        }\n        ecx = x.49;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_2;\n        }\n        rcx = rsp;\n        rcx += 0xffffffffffffffc0;\n        __asm (\"xorps xmm0, xmm0\");\n        *((rbp - 0x30)) = xmm0;\n        *((rbp - 0x40)) = xmm0;\n        *(o.style) = xmm0;\n        *(o.right_quote) = 0;\n        if (ebx == 0xa) {\n            goto label_3;\n        }\n        eax = *(o.right_quote);\n        *((rcx + 0x34)) = eax;\n        xmm0 = *(o.style);\n        xmm1 = *((rbp - 0x40));\n        xmm2 = *((rbp - 0x30));\n        __asm (\"movups xmmword [rcx + 0x24], xmm2\");\n        __asm (\"movups xmmword [rcx + 0x14], xmm1\");\n        __asm (\"movups xmmword [rcx + 4], xmm0\");\n        quotearg_n_options (r15d, r14, 0xffffffffffffffff, ebx, r8, r9);\n    }\nlabel_2:\n    rsp = rbp - 0x18;\n    return eax;\nlabel_1:\n    abort ();\nlabel_3:\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_n_style_mem",
            "funcStartAddr": "0x4050c0",
            "funcEndAddr": "0x405128",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4050c0 */\n#include <stdint.h>\n \nuint64_t quotearg_n_style_mem (int64_t arg1, uint32_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        *((rsp + 0x40)) = esi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        rax = rsp + 0x40;\n        quotearg_n_options (rdi, rdx, rcx, rax, r8, r9);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_style",
            "funcStartAddr": "0x405130",
            "funcEndAddr": "0x405141",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405130 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_style (char const * arg, int64_t arg1, quoting_style s) {\n    int64_t var_50h;\n    int64_t var_40h;\n    int64_t var_30h;\n    int64_t var_20h;\n    int64_t var_18h;\n    rax = arg;\n    rdi = arg1;\n    rsi = s;\n    /* char * quotearg_style(quoting_style s,char const * arg); */\n    rax = rsi;\n    ecx = edi;\n    edi = 0;\n    esi = ecx;\n    rdx = rax;\n    return void (*0x404fa0)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_style_mem",
            "funcStartAddr": "0x405150",
            "funcEndAddr": "0x4051b1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405150 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_style_mem (char const * arg, size_t argsize, quoting_style style) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rsi = arg;\n    rdx = argsize;\n    rdi = style;\n    /* char * quotearg_style_mem(quoting_style s,char const * arg,size_t argsize); */\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (edi != 0xa) {\n        *((rsp + 0x40)) = edi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        quotearg_n_options (0, rsi, rdx, rsp + 0x40, r8, r9);\n        return eax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_char_mem",
            "funcStartAddr": "0x4051c0",
            "funcEndAddr": "0x4052e3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4051c0 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_char_mem (char const * arg, int64_t arg1, int64_t arg2, int64_t arg3, size_t argsize, quoting_options * o, int32_t shift) {\n    int64_t var_20h;\n    r15 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r14 = argsize;\n    rax = o;\n    rbx = shift;\n    /* char * quotearg_char_mem(char const * arg,size_t argsize,char ch); */\n    ebx = edx;\n    r14 = rsi;\n    r15 = rdi;\n    eax = ebx;\n    al >>= 5;\n    ebx &= 0x1f;\n    r12d = (int32_t) al;\n    if (*(obj.y.60) < 0xa) {\n        goto label_0;\n    }\n    eax = x.59;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        rdx = rsp;\n        rax = rdx - 0x40;\n        rcx = .comment;\n        *((rdx - 0x10)) = rcx;\n        __asm (\"movups xmm0, xmmword [0x0040c2b0]\");\n        __asm (\"movups xmmword [rdx - 0x20], xmm0\");\n        __asm (\"movups xmm0, xmmword [0x0040c2a0]\");\n        __asm (\"movups xmmword [rdx - 0x30], xmm0\");\n        __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n        __asm (\"movups xmmword [rdx - 0x40], xmm0\");\n        esi = *((rdx + r12*4 - 0x38));\n        edi = *((rdx + r12*4 - 0x38));\n        ecx = ebx;\n        edi >>= cl;\n        edi = ~edi;\n        edi &= 1;\n        edi <<= cl;\n        edi ^= esi;\n        *((rdx + r12*4 - 0x38)) = edi;\n        quotearg_n_options (0, r15, r14, rax, r8, r9);\n        if (*(obj.y.60) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.59;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        rdx = rsp;\n        rax = rdx - 0x40;\n        rcx = .comment;\n        *((rdx - 0x10)) = rcx;\n        __asm (\"movups xmm0, xmmword [0x0040c2b0]\");\n        __asm (\"movups xmmword [rdx - 0x20], xmm0\");\n        __asm (\"movups xmm0, xmmword [0x0040c2a0]\");\n        __asm (\"movups xmmword [rdx - 0x30], xmm0\");\n        __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n        __asm (\"movups xmmword [rdx - 0x40], xmm0\");\n        esi = *((rdx + r12*4 - 0x38));\n        edi = *((rdx + r12*4 - 0x38));\n        ecx = ebx;\n        edi >>= cl;\n        edi = ~edi;\n        edi &= 1;\n        edi <<= cl;\n        edi ^= esi;\n        *((rdx + r12*4 - 0x38)) = edi;\n        quotearg_n_options (0, r15, r14, rax, r8, r9);\n    }\nlabel_1:\n    rsp = rbp - 0x20;\n    return rax;\n}\n"
        },
        {
            "funcName": "quotearg_char",
            "funcStartAddr": "0x4052f0",
            "funcEndAddr": "0x405300",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4052f0 */\n#include <stdint.h>\n \nint32_t quotearg_char (int64_t arg1, int64_t arg2) {\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    eax = esi;\n    rsi = 0xffffffffffffffff;\n    edx = eax;\n    return void (*0x4051c0)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_colon",
            "funcStartAddr": "0x405300",
            "funcEndAddr": "0x405311",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405300 */\n#include <stdint.h>\n \nvoid dbg_quotearg_colon (char const * arg) {\n    int64_t var_20h;\n    rdi = arg;\n    /* char * quotearg_colon(char const * arg); */\n    rsi = 0xffffffffffffffff;\n    edx = 0x3a;\n    return void (*0x4051c0)() ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_colon_mem",
            "funcStartAddr": "0x405320",
            "funcEndAddr": "0x405388",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405320 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_colon_mem (char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    rbx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    r14 = argsize;\n    /* char * quotearg_colon_mem(char const * arg,size_t argsize); */\n    r14 = rsi;\n    rbx = rdi;\n    if (*(obj.y.66) < 0xa) {\n        goto label_0;\n    }\n    eax = x.65;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        quotearg_char_mem (rbx, r14, 0x3a);\n        if (*(obj.y.66) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.65;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        quotearg_char_mem (rbx, r14, 0x3a);\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_quotearg_n_style_colon",
            "funcStartAddr": "0x405390",
            "funcEndAddr": "0x405424",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405390 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_n_style_colon (char const * arg, int64_t arg3, int32_t n, quoting_options * o, quoting_style style) {\n    quoting_options options;\n    int64_t var_fh;\n    int64_t var_10h;\n    int64_t var_14h;\n    int64_t var_20h;\n    int64_t var_24h;\n    int64_t var_34h;\n    int64_t var_40h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    rax = arg;\n    rdx = arg3;\n    rdi = n;\n    rcx = o;\n    rsi = style;\n    /* char * quotearg_n_style_colon(int n,quoting_style s,char const * arg); */\n    rax = rdx;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        ecx = *((rsp + 0x30));\n        *((rsp + 0x70)) = ecx;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        *((rsp + 0x60)) = xmm2;\n        *((rsp + 0x50)) = xmm1;\n        *((rsp + 0x40)) = xmm0;\n        *(rsp) = esi;\n        ecx = *((rsp + 0x70));\n        *((rsp + 0x34)) = ecx;\n        xmm0 = *((rsp + 0x40));\n        xmm1 = *((rsp + 0x50));\n        xmm2 = *((rsp + 0x60));\n        __asm (\"movups xmmword [rsp + 0x24], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x14], xmm1\");\n        __asm (\"movups xmmword [rsp + 4], xmm0\");\n        quotearg_n_options (rdi, rax, 0xffffffffffffffff, rsp, r8, r9);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_n_custom",
            "funcStartAddr": "0x405430",
            "funcEndAddr": "0x40549d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405430 */\n#include <stdint.h>\n \nint64_t quotearg_n_custom (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x0040c2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040c2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rsi != 0) {\n        if (rdx == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rsi;\n        *((rsp + 0x30)) = rdx;\n        rax = rsp;\n        quotearg_n_options (rdi, rcx, 0xffffffffffffffff, rax, r8, r9);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "quotearg_n_custom_mem",
            "funcStartAddr": "0x4054a0",
            "funcEndAddr": "0x405509",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4054a0 */\n#include <stdint.h>\n \nint64_t quotearg_n_custom_mem (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x0040c2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040c2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rsi != 0) {\n        if (rdx == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rsi;\n        *((rsp + 0x30)) = rdx;\n        rax = rsp;\n        quotearg_n_options (rdi, rcx, r8, rax, r8, r9);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_custom",
            "funcStartAddr": "0x405510",
            "funcEndAddr": "0x40557f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405510 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_custom (char const * arg, int64_t arg3, char const * left_quote, char const * right_quote) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    rax = arg;\n    rdx = arg3;\n    rdi = left_quote;\n    rsi = right_quote;\n    /* char * quotearg_custom(char const * left_quote,char const * right_quote,char const * arg); */\n    rax = rdx;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x0040c2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040c2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rdi != 0) {\n        if (rsi == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rdi;\n        *((rsp + 0x30)) = rsi;\n        quotearg_n_options (0, rax, 0xffffffffffffffff, rsp, r8, r9);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_quotearg_custom_mem",
            "funcStartAddr": "0x405580",
            "funcEndAddr": "0x4055eb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405580 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_custom_mem (char const * arg, size_t argsize, char const * left_quote, char const * right_quote) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    rdx = arg;\n    rcx = argsize;\n    rdi = left_quote;\n    rsi = right_quote;\n    /* char * quotearg_custom_mem(char const * left_quote,char const * right_quote,char const * arg,size_t argsize); */\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x0040c2b0]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x0040c2a0]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rdi != 0) {\n        if (rsi == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rdi;\n        *((rsp + 0x30)) = rsi;\n        rax = rsp;\n        quotearg_n_options (0, rdx, rcx, rax, r8, r9);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "quote_n_mem",
            "funcStartAddr": "0x4055f0",
            "funcEndAddr": "0x40565b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4055f0 */\n#include <stdint.h>\n \nint32_t quote_n_mem (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r14 = rdx;\n    rbx = rsi;\n    if (*(obj.y.78) < 0xa) {\n        goto label_0;\n    }\n    eax = x.77;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        quotearg_n_options (ebp, rbx, r14, obj.quote_quoting_options, r8, r9);\n        if (*(obj.y.78) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.77;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        quotearg_n_options (ebp, rbx, r14, obj.quote_quoting_options, r8, r9);\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_quote_mem",
            "funcStartAddr": "0x405660",
            "funcEndAddr": "0x4056cc",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405660 */\n#include <stdint.h>\n \nint32_t dbg_quote_mem (char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    rbx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    r14 = argsize;\n    /* char const * quote_mem(char const * arg,size_t argsize); */\n    r14 = rsi;\n    rbx = rdi;\n    if (*(obj.y.78) < 0xa) {\n        goto label_0;\n    }\n    eax = x.77;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        quotearg_n_options (0, rbx, r14, obj.quote_quoting_options, r8, r9);\n        if (*(obj.y.78) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.77;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        quotearg_n_options (0, rbx, r14, obj.quote_quoting_options, r8, r9);\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "quote_n",
            "funcStartAddr": "0x4056d0",
            "funcEndAddr": "0x405741",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4056d0 */\n#include <stdint.h>\n \nint32_t quote_n (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = rsi;\n    if (*(obj.y.78) < 0xa) {\n        goto label_0;\n    }\n    eax = x.77;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        quotearg_n_options (ebp, rbx, 0xffffffffffffffff, obj.quote_quoting_options, r8, r9);\n        if (*(obj.y.78) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.77;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        quotearg_n_options (ebp, rbx, 0xffffffffffffffff, obj.quote_quoting_options, r8, r9);\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_quote",
            "funcStartAddr": "0x405750",
            "funcEndAddr": "0x4057b8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405750 */\n#include <stdint.h>\n \nint32_t dbg_quote (char const * arg, int64_t arg1) {\n    rbx = arg;\n    rdi = arg1;\n    /* char const * quote(char const * arg); */\n    rbx = rdi;\n    if (*(obj.y.78) < 0xa) {\n        goto label_0;\n    }\n    eax = x.77;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        quotearg_n_options (0, rbx, 0xffffffffffffffff, obj.quote_quoting_options, r8, r9);\n        if (*(obj.y.78) < 0xa) {\n            goto label_1;\n        }\n        ecx = x.77;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_1;\n        }\n        quotearg_n_options (0, rbx, 0xffffffffffffffff, obj.quote_quoting_options, r8, r9);\n    }\nlabel_1:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_gettext_quote",
            "funcStartAddr": "0x4057c0",
            "funcEndAddr": "0x4058c6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4057c0 */\n#include <stdint.h>\n \nuint64_t dbg_gettext_quote (int64_t arg1, int64_t arg2, char const * msgid, quoting_style s, char const * translation) {\n    char const * locale_code;\n    rdi = arg1;\n    rsi = arg2;\n    rbx = msgid;\n    r14 = s;\n    rax = translation;\n    /* char const * gettext_quote(char const * msgid,quoting_style s); */\n    r14d = esi;\n    rbx = rdi;\n    edx = 5;\n    rax = dcgettext (0, rbx);\n    if (rax == rbx) {\n        rax = locale_charset ();\n        ecx = 0x46;\n        r8d = 0x2d;\n        r9d = 0x38;\n        eax = strcaseeq0 (rbp, 0x55, 0x54);\n        if (eax == 0) {\n            goto label_1;\n        }\n        ecx = 0x409a3a;\n        eax = 0x409a3e;\n        if (*(rbx) != 0x60) {\nlabel_0:\n            rax = rcx;\n            goto label_2;\n        }\n    }\nlabel_2:\n    if (*(obj.y.86) < 0xa) {\n        goto label_3;\n    }\n    ecx = x.85;\n    edx = rcx - 1;\n    edx *= ecx;\n    edx &= 1;\n    if (edx == 0) {\n        goto label_3;\n    }\n    while (1);\nlabel_3:\n    return rax;\nlabel_1:\n    if (*(obj.y.86) >= 0xa) {\n        eax = x.85;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_4;\n        }\n    }\nlabel_4:\n    ecx = 0x31;\n    r8d = 0x38;\n    r9d = 0x30;\n    eax = strcaseeq0 (rbp, 0x47, 0x42);\n    if (eax != 0) {\n        ecx = 0x409a42;\n        eax = 0x409a46;\n        goto label_0;\n    }\n    ecx = 0x409a34;\n    eax = 0x409a38;\n    goto label_0;\n}\n"
        },
        {
            "funcName": "dbg_strcaseeq0",
            "funcStartAddr": "0x4058d0",
            "funcEndAddr": "0x405dd2",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4058d0 */\n#include <stdint.h>\n \nint64_t dbg_strcaseeq0 (uint32_t arg_38h, uint32_t arg_40h, uint32_t arg1) {\n    int32_t c;\n    int64_t var_41h;\n    int64_t var_1h;\n    rdi = arg1;\n    /* int strcaseeq0(char const * s1,char const * s2,char s20,char s21,char s22,char s23,char s24,char s25,char s26,char s27,char s28); */\n    if (*(obj.y.88) < 0xa) {\n        goto label_1;\n    }\n    eax = x.87;\n    ebp = rax - 1;\n    ebp *= eax;\n    ebp &= 1;\n    if (ebp == 0) {\n        goto label_1;\n    }\n    while (1);\nlabel_1:\n    ebx = (int32_t) sil;\n    ebp = *(rdi);\n    eax = rbx - 0x41;\n    if (eax <= 0x19) {\n        ebp &= 0xffffffdf;\n        eax = 0;\n        if (ebp == ebx) {\n            goto label_2;\n        }\n        goto label_3;\n    }\n    eax = 0;\n    if (bpl != sil) {\n        goto label_3;\n    }\nlabel_2:\n    if (sil == 0) {\n        goto label_4;\n    }\n    ebp = (int32_t) dl;\n    eax = rbp - 0x41;\n    esi = *((rdi + 1));\n    if (eax <= 0x19) {\n        esi &= 0xffffffdf;\n        eax = 0;\n        if (esi == ebp) {\n            goto label_5;\n        }\n        goto label_3;\n    }\n    eax = 0;\n    if (sil != dl) {\n        goto label_3;\n    }\nlabel_5:\n    if (dl == 0) {\n        goto label_6;\n    }\n    sil = *((rsp + 0x40));\n    r15b = *((rsp + 0x38));\n    r13d = (int32_t) cl;\n    r11d = r13 - 0x41;\n    r10d = *((rdi + 2));\n    eax = r10d;\n    eax &= 0xffffffdf;\n    *((rsp - 0x14)) = eax;\n    r12d = x.91;\n    rsp - 0x38 = (r13b == 0) ? 1 : 0;\n    edx = (int32_t) r8b;\n    *((rsp - 0x10)) = rdx;\n    edx = rdx - 0x41;\n    *((rsp - 0x18)) = edx;\n    ebp = x.97;\n    ebx = rbp - 1;\n    ebx *= ebp;\n    bl = ((bl & 1) == 0) ? 1 : 0;\n    r14d = (int32_t) r9b;\n    dl = (*(obj.y.98) < 0xa) ? 1 : 0;\n    dl |= bl;\n    *((rsp - 0x3a)) = dl;\n    ebp = x.99;\n    ebx = rbp - 1;\n    ebx *= ebp;\n    bl = ((bl & 1) == 0) ? 1 : 0;\n    dl = (*(obj.y.100) < 0xa) ? 1 : 0;\n    dl |= bl;\n    *((rsp - 0x3c)) = dl;\n    ebp = x.101;\n    ebx = rbp - 1;\n    ebx *= ebp;\n    bl = ((bl & 1) == 0) ? 1 : 0;\n    dl = (*(obj.y.102) < 0xa) ? 1 : 0;\n    dl |= bl;\n    *((rsp - 0x3b)) = dl;\n    ebp = x.93;\n    ebx = rbp - 1;\n    ebx *= ebp;\n    bl = ((bl & 1) == 0) ? 1 : 0;\n    edx = r14 - 0x41;\n    *((rsp - 0x1c)) = edx;\n    al = (*(obj.y.94) < 0xa) ? 1 : 0;\n    ebp = x.89;\n    edx = rbp - 1;\n    edx *= ebp;\n    ebp = (int32_t) r15b;\n    al |= bl;\n    *((rsp - 0x39)) = al;\n    rax = r13;\n    dl = ((dl & 1) == 0) ? 1 : 0;\n    r15b = (*(obj.y.90) < 0xa) ? 1 : 0;\n    r15b |= dl;\n    edx = r12 - 1;\n    edx *= r12d;\n    ebx = rbp - 0x41;\n    *((rsp - 0x20)) = ebx;\n    dl = ((dl & 1) == 0) ? 1 : 0;\n    r13b = (*(obj.y.92) < 0xa) ? 1 : 0;\n    r13b |= dl;\n    edx = esi;\n    *((rsp - 8)) = rax;\n    r12b = (r10b != al) ? 1 : 0;\n    al = (r10b == al) ? 1 : 0;\n    r12b |= *((rsp - 0x38));\n    ebx = (int32_t) dl;\n    rdx = rbp;\n    esi = rbx - 0x41;\n    *((rsp - 0x24)) = esi;\n    esi = eax;\n    *((rsp - 0x30)) = rbp;\n    *((rsp - 0x38)) = rdx;\n    do {\nlabel_0:\n        if (r11d >= 0x1a) {\n            goto label_7;\n        }\n        rax = *((rsp - 8));\n        if (*((rsp - 0x14)) != eax) {\n            goto label_8;\n        }\n        if (r13b == 0) {\n            goto label_9;\n        }\n        if (cl != 0) {\n            goto label_10;\n        }\n        r14b = 1;\n    } while (r15b == 0);\n    goto label_11;\nlabel_7:\n    if (r13b == 0) {\n        goto label_12;\n    }\n    r14b = sil;\n    if (r12b != 0) {\n        goto label_13;\n    }\nlabel_10:\n    r10 = rbx;\n    ebx = *((rdi + 3));\n    if (*((rsp - 0x18)) >= 0x1a) {\n        goto label_14;\n    }\n    ebx &= 0xffffffdf;\n    rdx = *((rsp - 0x10));\n    r14b = (ebx == edx) ? 1 : 0;\n    if (r8b == 0) {\n        goto label_15;\n    }\n    rbp = *((rsp - 0x30));\n    rdx = *((rsp - 0x38));\n    rbx = r10;\n    if (ebx == edx) {\n        goto label_16;\n    }\n    goto label_13;\nlabel_8:\n    if (r13b == 0) {\n        goto label_17;\n    }\n    r14d = 0;\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_14:\n    if (*((rsp - 0x39)) == 0) {\n        goto label_18;\n    }\n    r14b = (bl == r8b) ? 1 : 0;\n    if (r8b != 0) {\n        rbx = r10;\n        if (bl != r8b) {\n            goto label_13;\n        }\nlabel_16:\n        ebx = *((rdi + 4));\n        if (*((rsp - 0x1c)) <= 0x19) {\n            ebx &= 0xffffffdf;\n            r14b = (ebx == ebp) ? 1 : 0;\n            if (r9b == 0) {\n                goto label_19;\n            }\n            rbx = r10;\n            if (ebx == ebp) {\n                goto label_20;\n            }\n            goto label_13;\n        }\n        r14b = (bl == r9b) ? 1 : 0;\n        if (r9b == 0) {\n            goto label_21;\n        }\n        rbx = r10;\n        if (bl != r9b) {\n            goto label_13;\n        }\nlabel_20:\n        ebx = *((rdi + 5));\n        if (*((rsp - 0x20)) <= 0x19) {\n            if (*((rsp - 0x3a)) == 0) {\n                goto label_22;\n            }\n            ebx &= 0xffffffdf;\n            r14b = (ebx == edx) ? 1 : 0;\n            if (*((rsp + 0x38)) == 0) {\n                goto label_23;\n            }\n            rbx = r10;\n            if (ebx == edx) {\n                goto label_24;\n            }\n            goto label_13;\n        }\n        edx = *((rsp + 0x38));\n        r14b = (bl == dl) ? 1 : 0;\n        if (dl == 0) {\n            goto label_25;\n        }\n        rdx = *((rsp - 0x38));\n        rbx = r10;\n        if (bl != *((rsp + 0x38))) {\n            goto label_13;\n        }\nlabel_24:\n        ebx = *((rdi + 6));\n        if (*((rsp - 0x24)) > 0x19) {\n            goto label_26;\n        }\n        if (*((rsp - 0x3c)) == 0) {\n            goto label_27;\n        }\n        ebx &= 0xffffffdf;\n        r14b = (ebx == r10d) ? 1 : 0;\n        if (*((rsp + 0x40)) == 0) {\n            goto label_28;\n        }\n        rbx = r10;\n        if (ebx == r10d) {\n            goto label_29;\n        }\n        goto label_13;\n    }\n    rbx = r10;\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_19:\n    rbx = r10;\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_21:\n    rbx = r10;\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_26:\n    edx = *((rsp + 0x40));\n    r14b = (bl == dl) ? 1 : 0;\n    if (dl == 0) {\n        goto label_15;\n    }\n    rbp = *((rsp - 0x30));\n    rdx = *((rsp - 0x38));\n    rbx = r10;\n    if (bl != *((rsp + 0x40))) {\n        goto label_13;\n    }\nlabel_29:\n    if (*((rsp - 0x3b)) == 0) {\n        goto label_30;\n    }\n    if (*((rsp - 0x3c)) == 0) {\n        goto label_31;\n    }\n    r14b = (*((rdi + 7)) == 0) ? 1 : 0;\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_15:\n    rbp = *((rsp - 0x30));\nlabel_25:\n    rdx = *((rsp - 0x38));\n    rbx = r10;\nlabel_13:\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_23:\n    rbx = r10;\n    if (r15b == 0) {\n        goto label_0;\n    }\n    goto label_11;\nlabel_28:\n    rbx = r10;\n    if (r15b == 0) {\n        goto label_0;\n    }\nlabel_11:\n    eax = (int32_t) r14b;\n    goto label_3;\nlabel_12:\nlabel_9:\nlabel_17:\nlabel_18:\nlabel_22:\nlabel_27:\nlabel_30:\nlabel_31:\nlabel_6:\n    if (*(obj.y.90) >= 0xa) {\n        eax = x.89;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        eax = 1;\n        if (ecx == 0) {\n            goto label_3;\n        }\n    }\nlabel_4:\n    eax = 1;\nlabel_3:\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_version_etc_arn",
            "funcStartAddr": "0x405de0",
            "funcEndAddr": "0x4063ae",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405de0 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc_arn (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg5, int64_t arg6, char const * const * authors, char const * command_name, size_t n_authors, char const * package, FILE * stream, char const * version) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r8 = arg5;\n    r9 = arg6;\n    r15 = authors;\n    rcx = command_name;\n    r12 = n_authors;\n    rbx = package;\n    r14 = stream;\n    r13 = version;\n    /* void version_etc_arn(FILE * stream,char const * command_name,char const * package,char const * version,char const * const * authors,size_t n_authors); */\n    r12 = r9;\n    r15 = r8;\n    r13 = rcx;\n    rbx = rdx;\n    rcx = rsi;\n    r14 = rdi;\n    if (rcx != 0) {\n        esi = 1;\n        edx = \"%s (%s) %s\\n\";\n        eax = 0;\n        rdi = r14;\n        r8 = rbx;\n        r9 = r13;\n        fprintf_chk ();\n        goto label_0;\n    }\n    if (*(obj.y) < 0xa) {\n        goto label_1;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_1:\n        esi = 1;\n        edx = \"%s %s\\n\";\n        eax = 0;\n        rdi = r14;\n        rcx = rbx;\n        r8 = r13;\n        fprintf_chk ();\n        if (*(obj.y) < 0xa) {\n            goto label_0;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_0;\n        }\n        esi = 1;\n        edx = \"%s %s\\n\";\n        eax = 0;\n        rdi = r14;\n        rcx = rbx;\n        r8 = r13;\n        fprintf_chk ();\n    }\nlabel_0:\n    edx = 5;\n    rax = dcgettext (0, 0x409ab3);\n    rcx = rax;\n    esi = 1;\n    edx = \"Copyright %s %d Free Software Foundation, Inc.\";\n    r8d = 0x7e3;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\");\n    rdi = rax;\n    rsi = r14;\n    fputs_unlocked ();\n    if (r12 <= 9) {\n        /* switch table (10 cases) at 0x409a50 */\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x4022d0)() ();\n    }\n    if (*(obj.y) < 0xa) {\n        goto label_2;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_3;\n    }\n    goto label_2;\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s and %s.\\n\");\n    rdx = rax;\n    rcx = *(r15);\n    r8 = *((r15 + 8));\n    esi = 1;\n    eax = 0;\n    rdi = r14;\n    void (*0x4022d0)() ();\n    if (*(obj.y) < 0xa) {\n        goto label_4;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_5;\n    }\n    goto label_4;\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\nand %s.\\n\");\n    rdx = rax;\n    rcx = *(r15);\n    r8 = *((r15 + 8));\n    r9 = *((r15 + 0x10));\n    esi = 1;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    goto label_6;\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n    rdx = rax;\n    rcx = *(r15);\n    r8 = *((r15 + 8));\n    r9 = *((r15 + 0x10));\n    esi = 1;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    goto label_6;\n    if (*(obj.y) < 0xa) {\n        goto label_7;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_8;\n    }\n    goto label_7;\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n    rdx = rax;\n    rcx = *(r15);\n    r8 = *((r15 + 8));\n    r9 = *((r15 + 0x10));\n    esi = 1;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    goto label_6;\n    if (*(obj.y) < 0xa) {\n        goto label_9;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_10;\n    }\n    goto label_9;\n    edx = 5;\n    rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n    rdx = rax;\n    rcx = *(r15);\n    r8 = *((r15 + 8));\n    r9 = *((r15 + 0x10));\n    esi = 1;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    goto label_6;\n    do {\nlabel_4:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        if (*(obj.y) < 0xa) {\n            goto label_6;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_6;\n        }\nlabel_5:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n    } while (1);\n    do {\nlabel_7:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        if (*(obj.y) < 0xa) {\n            goto label_6;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_6;\n        }\nlabel_8:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n    } while (1);\n    do {\nlabel_9:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        if (*(obj.y) < 0xa) {\n            goto label_6;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_6;\n        }\nlabel_10:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n    } while (1);\n    do {\nlabel_2:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        if (*(obj.y) < 0xa) {\n            goto label_6;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_6;\n        }\nlabel_3:\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n    } while (1);\nlabel_6:\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_version_etc_ar",
            "funcStartAddr": "0x4063b0",
            "funcEndAddr": "0x406402",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4063b0 */\n#include <stdint.h>\n \nuint32_t dbg_version_etc_ar (char const * const * authors, char const * command_name, char const * package, FILE * stream, char const * version) {\n    r8 = authors;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc_ar(FILE * stream,char const * command_name,char const * package,char const * version,char const * const * authors); */\n    r9d = x.20;\n    eax = r9 - 1;\n    eax *= r9d;\n    r9b = ((al & 1) == 0) ? 1 : 0;\n    al = (*(obj.y.21) < 0xa) ? 1 : 0;\n    al |= r9b;\n    r9 = 0xffffffffffffffff;\n    do {\n        if (al == 0) {\n            goto label_0;\n        }\n        r9 = r9 + 1;\n    } while (*((r8 + r9*8 + 8)) != 0);\n    void (*0x405de0)() ();\nlabel_0:\n}\n"
        },
        {
            "funcName": "dbg_version_etc_va",
            "funcStartAddr": "0x406410",
            "funcEndAddr": "0x4064d1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406410 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc_va (__va_list_tag * authors, char const *[11] authtab, char const * command_name, char const * package, FILE * stream, char const * version) {\n    int64_t var_8h;\n    r8 = authors;\n    rbx = authtab;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc_va(FILE * stream,char const * command_name,char const * package,char const * version,__va_list_tag * authors); */\n    eax = x.22;\n    r10d = y.23;\n    r9d = rax - 1;\n    r9d *= eax;\n    al = ((r9b & 1) == 0) ? 1 : 0;\n    r11b = (r10d < 0xa) ? 1 : 0;\n    r11b |= al;\n    do {\n        rbx = rsp;\n        rbx += 0xffffffffffffffb0;\n    } while (r11b == 0);\n    if (r10d >= 0xa) {\n        r9d &= 1;\n        if (r9d != 0) {\n            goto label_1;\n        }\n    }\n    r9d = 0;\n    do {\nlabel_0:\n        if (r9 > 9) {\n            goto label_2;\n        }\n        r11 = *(r8);\n        if (r11 <= 0x28) {\n            r10 = r11;\n            r10 += *((r8 + 0x10));\n            eax = r11 + 8;\n            *(r8) = eax;\n        } else {\n            r10 = *((r8 + 8));\n            rax = r10 + 8;\n            *((r8 + 8)) = rax;\n        }\n        rax = *(r10);\n        *((rbx + r9*8)) = rax;\n        if (rax == 0) {\n            goto label_2;\n        }\n        r9++;\n    } while (*(obj.y.23) < 0xa);\n    r10d = x.22;\n    eax = r10 - 1;\n    eax *= r10d;\n    eax &= 1;\n    if (eax == 0) {\n        goto label_0;\n    }\nlabel_1:\nlabel_2:\n    version_etc_arn (rdi, rsi, rdx, rcx, rbx);\n    rsp = rbp - 8;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_version_etc",
            "funcStartAddr": "0x4064e0",
            "funcEndAddr": "0x406562",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4064e0 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc (int64_t arg_e0h, int64_t arg10, int64_t arg11, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, char const * command_name, char const * package, FILE * stream, char const * version) {\n    va_list authors;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_48h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    int64_t var_80h;\n    int64_t var_90h;\n    int64_t var_a0h;\n    int64_t var_b0h;\n    int64_t var_c0h;\n    xmm3 = arg10;\n    xmm4 = arg11;\n    r8 = arg5;\n    r9 = arg6;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc(FILE * stream,char const * command_name,char const * package,char const * version,va_args ...); */\n    if (al != 0) {\n        *((rsp + 0x50)) = xmm0;\n        *((rsp + 0x60)) = xmm1;\n        *((rsp + 0x70)) = xmm2;\n        *((rsp + 0x80)) = xmm3;\n        *((rsp + 0x90)) = xmm4;\n        *((rsp + 0xa0)) = xmm5;\n        *((rsp + 0xb0)) = xmm6;\n        *((rsp + 0xc0)) = xmm7;\n    }\n    *((rsp + 0x48)) = r9;\n    *((rsp + 0x40)) = r8;\n    rax = rsp + 0x20;\n    *((rsp + 0x10)) = rax;\n    rax = rsp + 0xe0;\n    *((rsp + 8)) = rax;\n    *((rsp + 4)) = 0x30;\n    *(rsp) = 0x20;\n    r8 = rsp;\n    version_etc_va ();\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_emit_bug_reporting_address",
            "funcStartAddr": "0x406570",
            "funcEndAddr": "0x406698",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406570 */\n#include <stdint.h>\n \nvoid dbg_emit_bug_reporting_address (void) {\n    /* void emit_bug_reporting_address(); */\n    if (*(obj.y.27) < 0xa) {\n        goto label_0;\n    }\n    eax = x.26;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        edx = 5;\n        rax = dcgettext (0, \"\\nReport bugs to: %s\\n\");\n        rcx = rax;\n        edi = 1;\n        edx = \"bug-coreutils@gnu.org\";\n        eax = 0;\n        rsi = rcx;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"%s home page: <%s>\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"GNU coreutils\";\n        ecx = \"https://www.gnu.org/software/coreutils/\";\n        eax = 0;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        if (*(obj.y.27) < 0xa) {\n            goto label_1;\n        }\n        eax = x.26;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_1;\n        }\n        edx = 5;\n        rax = dcgettext (0, \"\\nReport bugs to: %s\\n\");\n        rcx = rax;\n        edi = 1;\n        edx = \"bug-coreutils@gnu.org\";\n        eax = 0;\n        rsi = rcx;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"%s home page: <%s>\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"GNU coreutils\";\n        ecx = \"https://www.gnu.org/software/coreutils/\";\n        eax = 0;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n    }\nlabel_1:\n}\n"
        },
        {
            "funcName": "dbg_xnmalloc",
            "funcStartAddr": "0x4066a0",
            "funcEndAddr": "0x406733",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4066a0 */\n#include <stdint.h>\n \nint64_t dbg_xnmalloc (uint32_t arg1, int64_t arg2, size_t n, void * p) {\n    rdi = arg1;\n    rsi = arg2;\n    r14 = n;\n    rax = p;\n    /* void * xnmalloc(size_t n,size_t s); */\n    r14 = rsi;\n    if (*(obj.y) < 0xa) {\n        goto label_0;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_0;\n    }\n    while (1);\nlabel_0:\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r14;\n    rdx = rdx:rax % r14;\n    if (rax < rdi) {\n        goto label_1;\n    }\n    r14 *= rdi;\n    eax = x.1;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bl = (*(obj.y.2) < 0xa) ? 1 : 0;\n    bl |= al;\n    do {\n        rax = malloc (r14);\n    } while (bl == 0);\n    if (r14 != 0) {\n        if (rax == 0) {\n            goto label_1;\n        }\n    }\n    return rax;\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "xmalloc",
            "funcStartAddr": "0x406740",
            "funcEndAddr": "0x406793",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406740 */\n#include <stdint.h>\n \nuint64_t xmalloc (size_t size) {\n    rdi = size;\n    r14 = rdi;\n    eax = x.1;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bl = (*(obj.y.2) < 0xa) ? 1 : 0;\n    bl |= al;\n    do {\n        rax = malloc (r14);\n    } while (bl == 0);\n    if (r14 != 0) {\n        if (rax == 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xnrealloc",
            "funcStartAddr": "0x4067a0",
            "funcEndAddr": "0x40681d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4067a0 */\n#include <stdint.h>\n \nint64_t dbg_xnrealloc (int64_t arg1, int64_t arg3, size_t n, void * p, size_t s) {\n    rdi = arg1;\n    rdx = arg3;\n    rsi = n;\n    r14 = p;\n    rbx = s;\n    /* void * xnrealloc(void * p,size_t n,size_t s); */\n    rbx = rdx;\n    r14 = rdi;\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rbx;\n    rdx = rdx:rax % rbx;\n    if (rax >= rsi) {\n        rbx *= rsi;\n        if (*(obj.y.4) < 0xa) {\n            goto label_0;\n        }\n        eax = x.3;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_1;\n        }\n    } else {\n        xalloc_die ();\n    }\n    do {\nlabel_0:\n        xrealloc (r14, rbx);\n        if (*(obj.y.4) < 0xa) {\n            goto label_2;\n        }\n        ecx = x.3;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_2;\n        }\nlabel_1:\n        xrealloc (r14, rbx);\n    } while (1);\nlabel_2:\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_xrealloc",
            "funcStartAddr": "0x406820",
            "funcEndAddr": "0x4068a0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406820 */\n#include <stdint.h>\n \nuint64_t dbg_xrealloc (int64_t arg1, int64_t arg2, size_t n, void * p) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = n;\n    r14 = p;\n    /* void * xrealloc(void * p,size_t n); */\n    rbx = rsi;\n    r14 = rdi;\n    if (r14 != 0) {\n        if (rbx == 0) {\n            if (*(obj.y.6) < 0xa) {\n                goto label_0;\n            }\n            eax = x.5;\n            ecx = rax - 1;\n            ecx *= eax;\n            ecx &= 1;\n            if (ecx != 0) {\n                goto label_1;\n            }\n        }\n    } else {\n        rax = realloc (r14, rbx);\n        if (rbx == 0) {\n            goto label_2;\n        }\n        if (rax != 0) {\n            goto label_2;\n        }\n        xalloc_die ();\n    }\n    do {\nlabel_0:\n        eax = free (r14);\n        eax = 0;\n        if (*(obj.y.6) < 0xa) {\n            goto label_2;\n        }\n        ecx = x.5;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_2;\n        }\nlabel_1:\n        free (r14);\n    } while (1);\nlabel_2:\n    return rax;\n}\n"
        },
        {
            "funcName": "x2nrealloc",
            "funcStartAddr": "0x4068a0",
            "funcEndAddr": "0x40696a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4068a0 */\n#include <stdint.h>\n \nint64_t x2nrealloc (int64_t arg_4h, int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r8 = rdx;\n    rcx = *(rsi);\n    if (rdi == 0) {\n        goto label_0;\n    }\n    if (*(obj.y.8) < 0xa) {\n        goto label_1;\n    }\n    eax = x.7;\n    edx = rax - 1;\n    edx *= eax;\n    edx &= 1;\n    if (edx == 0) {\n        goto label_1;\n    }\n    while (1);\nlabel_0:\n    if (rcx != 0) {\n        goto label_2;\n    }\n    if (*(obj.y.8) >= 0xa) {\n        eax = x.7;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_3;\n        }\nlabel_1:\n        rax = 0x5555555555555554;\n        edx = 0;\n        rax = rdx:rax / r8;\n        rdx = rdx:rax % r8;\n        if (rax <= rcx) {\n            goto label_4;\n        }\n        rax = rcx;\n        rax >>= 1;\n        rcx = rcx + rax + 1;\n        goto label_5;\n    }\nlabel_3:\n    eax = 0x80;\n    edx = 0;\n    rax = rdx:rax / r8;\n    rdx = rdx:rax % r8;\n    ecx = 0;\n    while (1);\n    cl = (r8 > 0x80) ? 1 : 0;\n    rcx += rax;\nlabel_2:\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r8;\n    rdx = rdx:rax % r8;\n    if (rax >= rcx) {\nlabel_5:\n        *(rsi) = rcx;\n        r8 *= rcx;\n        rsi = r8;\n        void (*0x406820)() ();\nlabel_4:\n        xalloc_die ();\n    }\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xcharalloc",
            "funcStartAddr": "0x406970",
            "funcEndAddr": "0x4069c3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406970 */\n#include <stdint.h>\n \nuint64_t dbg_xcharalloc (int64_t arg_4h, int64_t arg1, size_t n, void * p) {\n    rdi = arg1;\n    r14 = n;\n    rax = p;\n    /* char * xcharalloc(size_t n); */\n    r14 = rdi;\n    eax = x.1;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bl = (*(obj.y.2) < 0xa) ? 1 : 0;\n    bl |= al;\n    do {\n        rax = malloc (r14);\n    } while (bl == 0);\n    if (r14 != 0) {\n        if (rax == 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_x2realloc",
            "funcStartAddr": "0x4069d0",
            "funcEndAddr": "0x406b3c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4069d0 */\n#include <stdint.h>\n \nint64_t dbg_x2realloc (int64_t arg_4h, int64_t arg1, size_t n, void * p, size_t * pn) {\n    rdi = arg1;\n    rsi = n;\n    rbx = p;\n    r14 = pn;\n    /* void * x2realloc(void * p,size_t * pn); */\n    r14 = rsi;\n    rbx = rdi;\n    r15 = 0x5555555555555554;\n    if (*(obj.y.12) >= 0xa) {\n        eax = x.11;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_3;\n        }\n    }\nlabel_0:\n    rsi = *(r14);\n    if (rbx == 0) {\n        goto label_4;\n    }\n    if (*(obj.y.8) < 0xa) {\n        goto label_5;\n    }\n    eax = x.7;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_5;\n    }\n    while (1);\nlabel_4:\n    if (rsi == 0) {\n        goto label_6;\n    }\n    if (rsi >= 0) {\n        goto label_1;\n    }\n    xalloc_die ();\nlabel_5:\n    if (rsi >= r15) {\n        goto label_7;\n    }\n    rax = rsi;\n    rax >>= 1;\n    do {\nlabel_1:\n        *(r14) = rsi;\n        xrealloc (rbx, rsi + rax + 1);\n        if (*(obj.y.12) >= 0xa) {\n            ecx = x.11;\n            edx = rcx - 1;\n            edx *= ecx;\n            edx &= 1;\n            if (edx == 0) {\n                goto label_8;\n            }\nlabel_3:\n            rsi = *(r14);\n            if (rbx != 0) {\n                if (*(obj.y.8) < 0xa) {\n                    goto label_9;\n                }\n                eax = x.7;\n                ecx = rax - 1;\n                ecx *= eax;\n                ecx &= 1;\n                if (ecx == 0) {\n                    goto label_9;\n                }\n            }\n            if (rsi == 0) {\n                goto label_10;\n            }\n            if (rsi < 0) {\n                xalloc_die ();\nlabel_9:\n                if (rsi >= r15) {\n                    goto label_11;\n                }\n                rax = rsi;\n                rax >>= 1;\n            }\nlabel_2:\n            *(r14) = rsi;\n            xrealloc (rbx, rsi + rax + 1);\n            goto label_0;\n        }\nlabel_8:\n        return rax;\nlabel_6:\n        esi = 0x80;\n    } while (*(obj.y.8) < 0xa);\n    eax = x.7;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_1;\n    }\nlabel_10:\n    esi = 0x80;\n    if (*(obj.y.8) < 0xa) {\n        goto label_2;\n    }\n    eax = x.7;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_2;\n    }\nlabel_7:\n    xalloc_die ();\nlabel_11:\n    return xalloc_die ();\n    while (1);\n}\n"
        },
        {
            "funcName": "dbg_xzalloc",
            "funcStartAddr": "0x406b40",
            "funcEndAddr": "0x406c09",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406b40 */\n#include <stdint.h>\n \nuint64_t dbg_xzalloc (int64_t arg_4h, int64_t arg1, size_t n, void * p) {\n    rdi = arg1;\n    r14 = n;\n    rbx = p;\n    /* void * xzalloc(size_t s); */\n    r14 = rdi;\n    eax = x.13;\n    ecx = y.14;\n    ebp = rax - 1;\n    ebp *= eax;\n    ebp &= 1;\n    r12d = x.1;\n    r13d = y.2;\n    if (ecx >= 0xa) {\n        if (ebp != 0) {\n            goto label_1;\n        }\n    }\nlabel_0:\n    *((rsp + 4)) = ecx;\n    eax = r12 - 1;\n    eax *= r12d;\n    al = ((al & 1) == 0) ? 1 : 0;\n    r15b = (r13d < 0xa) ? 1 : 0;\n    r15b |= al;\n    do {\n        rax = malloc (r14);\n        rbx = rax;\n    } while (r15b == 0);\n    if (r14 != 0) {\n        if (rbx == 0) {\n            goto label_2;\n        }\n    }\n    memset (rbx, 0, r14);\n    ecx = *((rsp + 4));\n    if (ecx < 0xa) {\n        goto label_3;\n    }\n    if (ebp == 0) {\n        goto label_3;\n    }\nlabel_1:\n    if (r13d < 0xa) {\n        goto label_0;\n    }\n    eax = r12 - 1;\n    eax *= r12d;\n    eax &= 1;\n    if (eax == 0) {\n        goto label_0;\n    }\nlabel_3:\n    rax = rbx;\n    return rax;\nlabel_2:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xcalloc",
            "funcStartAddr": "0x406c10",
            "funcEndAddr": "0x406c36",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406c10 */\n#include <stdint.h>\n \nint64_t dbg_xcalloc (size_t n, void * p, size_t s) {\n    rdi = n;\n    rax = p;\n    rsi = s;\n    /* void * xcalloc(size_t n,size_t s); */\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    if (rax >= rdi) {\n        rax = rpl_calloc ();\n        if (rax == 0) {\n            goto label_0;\n        }\n        return rax;\n    }\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "xmemdup",
            "funcStartAddr": "0x406c40",
            "funcEndAddr": "0x406cab",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406c40 */\n#include <stdint.h>\n \nuint64_t xmemdup (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    r15 = rsi;\n    r14 = rdi;\n    eax = x.1;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bpl = (*(obj.y.2) < 0xa) ? 1 : 0;\n    bpl |= al;\n    do {\n        rax = malloc (r15);\n        rbx = rax;\n    } while (bpl == 0);\n    if (r15 != 0) {\n        if (rbx == 0) {\n            goto label_0;\n        }\n    }\n    memcpy (rbx, r14, r15);\n    rax = rbx;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xstrdup",
            "funcStartAddr": "0x406cb0",
            "funcEndAddr": "0x406d2b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406cb0 */\n#include <stdint.h>\n \nuint64_t dbg_xstrdup (int64_t arg1, size_t n, void * p, char const * string) {\n    rdi = arg1;\n    r15 = n;\n    rbx = p;\n    r14 = string;\n    /* char * xstrdup(char const * string); */\n    r14 = rdi;\n    rax = strlen (rdi);\n    r15 = rax;\n    r15++;\n    eax = x.1;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bpl = (*(obj.y.2) < 0xa) ? 1 : 0;\n    bpl |= al;\n    do {\n        rax = malloc (r15);\n        rbx = rax;\n    } while (bpl == 0);\n    if (r15 != 0) {\n        if (rbx == 0) {\n            goto label_0;\n        }\n    }\n    memcpy (rbx, r14, r15);\n    rax = rbx;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg_xalloc_die",
            "funcStartAddr": "0x406d30",
            "funcEndAddr": "0x406d60",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406d30 */\n#include <stdint.h>\n \nuint64_t dbg_xalloc_die (void) {\n    /* void xalloc_die(); */\n    ebx = *(obj.exit_failure);\n    edx = 5;\n    rax = dcgettext (0, \"memory exhausted\");\n    rcx = rax;\n    eax = 0;\n    error (ebx, 0, 0x4094a5);\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg_xnumtoumax",
            "funcStartAddr": "0x406d60",
            "funcEndAddr": "0x406f00",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406d60 */\n#include <stdint.h>\n \nint64_t dbg_xnumtoumax (int64_t arg_40h, int64_t arg1, int64_t arg3, int64_t arg4, int64_t arg6, int32_t base, char const * err, int32_t err_exit, uintmax_t max, char const * n_str, strtol_error s_err, char const * suffixes) {\n    uintmax_t min;\n    int64_t var_8h;\n    rdi = arg1;\n    rdx = arg3;\n    rcx = arg4;\n    r9 = arg6;\n    rsi = base;\n    r14 = err;\n    rax = err_exit;\n    r12 = max;\n    r15 = n_str;\n    rbx = s_err;\n    r8 = suffixes;\n    /* uintmax_t xnumtoumax(char const * n_str,int base,uintmax_t min,uintmax_t max,char const * suffixes,char const * err,int err_exit); */\n    r14 = r9;\n    r12 = rcx;\n    eax = esi;\n    r15 = rdi;\n    rcx = rsp + 8;\n    eax = xstrtoumax (rdi, 0, eax);\n    ebx = eax;\n    if (ebx == 3) {\n        goto label_0;\n    }\n    if (ebx == 1) {\n        goto label_1;\n    }\n    if (ebx != 0) {\n        goto label_2;\n    }\n    rbx = *((rsp + 8));\n    if (rbx < rbp) {\n        goto label_3;\n    }\n    if (*(obj.y) < 0xa) {\n        goto label_4;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_4;\n    }\n    while (1);\nlabel_1:\n    r12d = x;\n    ebp = y;\n    errno_location ();\n    if (ebp < 0xa) {\n        goto label_5;\n    }\n    ecx = r12 - 1;\n    ecx *= r12d;\n    ecx &= 1;\n    if (ecx != 0) {\n        goto label_6;\n    }\n    goto label_5;\nlabel_0:\n    errno_location ();\n    *(rax) = 0;\n    goto label_2;\nlabel_4:\n    if (rbx <= r12) {\n        goto label_7;\n    }\nlabel_3:\n    errno_location ();\n    ecx = 0x4b;\n    edx = 0x22;\n    if (rbx > 0x3fffffff) {\n        edx = ecx;\n    }\n    *(rax) = edx;\n    goto label_2;\n    do {\nlabel_5:\n        *(rax) = 0x4b;\n        if (*(obj.y) < 0xa) {\n            goto label_8;\n        }\n        ecx = x;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_8;\n        }\nlabel_6:\n        *(rax) = 0x4b;\n    } while (1);\nlabel_8:\n    if (ebx == 0) {\n        goto label_7;\n    }\nlabel_2:\n    eax = *((rsp + 0x40));\n    if (*(obj.y) >= 0xa) {\n        ecx = x;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_9;\n        }\n    }\nlabel_9:\n    r12d = 1;\n    if (eax != 0) {\n        r12d = eax;\n    }\n    rax = errno_location ();\n    ebx = *(rax);\n    eax = 0;\n    if (ebx == 0x16) {\n        ebx = eax;\n    }\n    while (ecx != 0) {\n        rax = quote (r15);\n        eax = 0;\n        rcx = r14;\n        r8 = rbp;\n        error (r12d, ebx, \"%s: %s\");\n        rax = quote (r15);\n        eax = 0;\n        rcx = r14;\n        r8 = rbp;\n        error (r12d, ebx, \"%s: %s\");\n        if (*(obj.y) < 0xa) {\n            goto label_7;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n    }\nlabel_7:\n    rax = *((rsp + 8));\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_xdectoumax",
            "funcStartAddr": "0x406f00",
            "funcEndAddr": "0x406f23",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406f00 */\n#include <stdint.h>\n \nint64_t dbg_xdectoumax (int64_t arg2, int64_t arg5, char const * err, int32_t err_exit, uintmax_t max, uintmax_t min, char const * n_str, char const * suffixes) {\n    rsi = arg2;\n    r8 = arg5;\n    r10 = err;\n    r9 = err_exit;\n    rcx = max;\n    rdx = min;\n    rdi = n_str;\n    rax = suffixes;\n    /* uintmax_t xdectoumax(char const * n_str,uintmax_t min,uintmax_t max,char const * suffixes,char const * err,int err_exit); */\n    r10 = r8;\n    rax = rcx;\n    *(rsp) = r9d;\n    r9 = r10;\n    xnumtoumax (rdi, 0xa, rsi, rdx, rax);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_xstrtoumax",
            "funcStartAddr": "0x406f30",
            "funcEndAddr": "0x407c09",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x406f30 */\n#include <stdint.h>\n \nuint64_t dbg_xstrtoumax (int64_t arg1, int64_t arg3, int64_t arg5, int32_t base, strtol_error overflow, char ** ptr, char const * q, uintmax_t tmp, uintmax_t * val, char const * valid_suffixes) {\n    char const * restrict nptr;\n    int64_t var_45h;\n    int64_t var_4h;\n    char * s;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rdx = arg3;\n    r8 = arg5;\n    r15 = base;\n    rax = overflow;\n    rsi = ptr;\n    rcx = q;\n    rbx = tmp;\n    r12 = val;\n    r13 = valid_suffixes;\n    /* strtol_error xstrtoumax(char const * s,char ** ptr,int strtol_base,uintmax_t * val,char const * valid_suffixes); */\n    r13 = r8;\n    r12 = rcx;\n    r15d = edx;\n    if (r15d >= 0x25) {\n        goto label_9;\n    }\n    rax = rsp + 0x20;\n    if (rsi != 0) {\n        rax = rsi;\n    }\n    *((rsp + 0x18)) = rax;\n    rax = errno_location ();\n    r14 = rax;\n    *(r14) = 0;\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    al = ((cl & 1) == 0) ? 1 : 0;\n    bl = (*(obj.y) < 0xa) ? 1 : 0;\n    bl |= al;\n    rax = ctype_b_loc ();\n    if (bl != 1) {\n        goto label_10;\n    }\n    rax = *(rax);\n    rcx = rbp;\n    do {\n        edx = *(rcx);\n        if ((*((rax + rdx*2 + 1)) & 0x20) == 0) {\n            goto label_11;\n        }\n        rcx++;\n    } while (bl != 0);\nlabel_10:\nlabel_11:\n    r9d = 4;\n    if (dl == 0x2d) {\n        goto label_12;\n    }\n    *((rsp + 8)) = r13;\n    *((rsp + 0x10)) = r12;\n    ecx = 0;\n    rdi = rbp;\n    rsi = *((rsp + 0x18));\n    while (eax != 0) {\n        ecx = 0;\n        rdi = rbp;\n        rbx = *((rsp + 0x18));\n        rsi = *((rsp + 0x18));\n        edx = r15d;\n        strtoul_internal ();\n        ecx = 0;\n        rdi = rbp;\n        rsi = rbx;\n        edx = r15d;\n        rax = strtoul_internal ();\n        rbx = rax;\n        r13d = x;\n        r12d = y;\n        if (r12d < 0xa) {\n            goto label_13;\n        }\n        eax = r13 - 1;\n        eax *= r13d;\n        eax &= 1;\n    }\nlabel_13:\n    rax = *((rsp + 0x18));\n    r15 = *(rax);\n    if (r15 == rbp) {\n        goto label_14;\n    }\n    eax = *(r14);\n    if (eax == 0) {\n        goto label_15;\n    }\n    if (eax != 0x22) {\n        goto label_16;\n    }\n    r9d = 1;\n    while (1);\n    if (*((rsp + 8)) == 0) {\n        goto label_17;\nlabel_14:\n        if (*((rsp + 8)) != 0) {\n            esi = *(rbp);\n            if (esi != 0) {\n                rax = strchr (*((rsp + 8)), rsi);\n                if (rax == 0) {\n                    goto label_18;\n                }\n                r9d = 0;\n                ebx = 1;\n            }\n        } else {\nlabel_18:\n            if (r12d < 0xa) {\n                goto label_19;\n            }\n            eax = r13 - 1;\n            eax *= r13d;\n            eax &= 1;\n            r9d = 4;\n            if (eax == 0) {\n                goto label_12;\n            }\nlabel_15:\n            r9d = 0;\n            if (*((rsp + 8)) == 0) {\n                goto label_17;\n            }\n        }\n    }\n    ebp = *(r15);\n    if (ebp == 0) {\n        goto label_17;\n    }\n    r14d = r13 - 1;\n    r14d *= r13d;\n    if (r12d >= 0xa) {\n        eax = r14d;\n        eax &= 1;\n        if (eax == 0) {\n            goto label_20;\n        }\nlabel_16:\n        if (r12d >= 0xa) {\n            eax = r13 - 1;\n            eax *= r13d;\n            eax &= 1;\n            r9d = 4;\n            if (eax == 0) {\n                goto label_12;\n            }\n        }\nlabel_19:\n        r9d = 4;\n        goto label_12;\n    }\nlabel_20:\n    *((rsp + 4)) = r9d;\n    rax = strchr (*((rsp + 8)), ebp);\n    if (rax != 0) {\n        r10d = 1;\n        r13d = 0x400;\n        eax = rbp - 0x45;\n        if (eax > 0x2f) {\n            goto label_21;\n        }\n        rcx = 0x814400308945;\n        r9d = *((rsp + 4));\n        if (((rcx >> rax) & 1) >= 0) {\n            goto label_0;\n        }\n        rax = strchr (*((rsp + 8)), 0x30);\n        if (rax == 0) {\n            goto label_22;\n        }\n        eax = *((r15 + 1));\n        if (eax == 0x42) {\n            goto label_23;\n        }\n        if (eax == 0x44) {\n            goto label_23;\n        }\n        r9d = *((rsp + 4));\n        if (eax != 0x69) {\n            goto label_24;\n        }\n        eax = 0;\n        al = (*((r15 + 2)) == 0x42) ? 1 : 0;\n        r10 = rax + rax + 1;\n        r13d = 0x400;\n        goto label_0;\n    }\n    rdx = *((rsp + 0x10));\n    do {\n        *(rdx) = rbx;\n        if (*(obj.y) < 0xa) {\n            goto label_25;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n    } while (ecx != 0);\nlabel_25:\n    r9d = *((rsp + 4));\n    r9d |= 2;\n    goto label_12;\nlabel_22:\n    r10d = 1;\n    r13d = 0x400;\n    goto label_21;\nlabel_23:\n    r10d = 2;\n    r13d = 0x3e8;\nlabel_21:\n    r9d = *((rsp + 4));\nlabel_0:\n    ebp += 0xffffffbe;\n    if (ebp > 0x35) {\n        goto label_26;\n    }\n    while (1);\n    eax = 0;\n    /* switch table (54 cases) at 0x409dc0 */\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    ecx = x.4;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    rdi = 0xffffffffffffffff;\n    dl = (*(obj.y.5) < 0xa) ? 1 : 0;\n    dl |= cl;\n    if (dl != 1) {\n        goto label_27;\n    }\n    goto label_28;\nlabel_24:\n    r10d = 1;\n    r13d = 0x400;\n    goto label_0;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    ecx = x.4;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    rdi = 0xffffffffffffffff;\n    dl = (*(obj.y.5) < 0xa) ? 1 : 0;\n    dl |= cl;\n    if (dl != 1) {\n        goto label_29;\n    }\n    goto label_30;\n    ecx = x.4;\n    esi = y.5;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    edx = rcx - 1;\n    edx *= ecx;\n    dl = ((dl & 1) == 0) ? 1 : 0;\n    cl = (esi < 0xa) ? 1 : 0;\n    cl |= dl;\n    sil = ((r14b & 1) == 0) ? 1 : 0;\n    dl = (r12d < 0xa) ? 1 : 0;\n    dl |= sil;\n    goto label_31;\nlabel_1:\n    rbx = rdi;\n    rbx *= r13;\n    if (rax < rdi) {\n        rbx = rbp;\n    }\nlabel_31:\n    rsi = rbx;\n    while (1) {\n        rsi = rbx;\n        rsi *= r13;\n        if (rax < rbx) {\n            rsi = rbp;\n        }\n        if (cl != 0) {\n            rdi = rsi;\n            rdi *= r13;\n            if (rax < rsi) {\n                rdi = rbp;\n            }\n            if (dl != 0) {\n                goto label_32;\n            }\n            if (cl == 0) {\n                goto label_33;\n            }\n        } else {\n            rbx = rsi;\n            rbx *= r13;\n            if (rax < rsi) {\n                rbx = rbp;\n            }\n        }\n    }\nlabel_2:\n    rsi = rdi;\n    rsi *= r13;\n    rdi = rsi;\n    if (rax < rdi) {\n        rdi = rbp;\n    }\n    if (cl != 0) {\n        goto label_1;\n    }\nlabel_33:\n    rsi = rdi;\n    rsi *= r13;\n    if (rax < rdi) {\n        rsi = rbp;\n    }\n    rdi = rsi;\n    goto label_2;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    ecx = x.4;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    rdi = 0xffffffffffffffff;\n    dl = (*(obj.y.5) < 0xa) ? 1 : 0;\n    dl |= cl;\n    if (dl != 1) {\n        goto label_34;\n    }\n    goto label_35;\nlabel_32:\n    cl -= cl;\n    al -= al;\n    al |= cl;\n    al &= 1;\n    eax = (int32_t) al;\n    rbx = rdi;\n    goto label_36;\n    sil = ((r14b & 1) == 0) ? 1 : 0;\n    al = (r12d < 0xa) ? 1 : 0;\n    rcx = rbx;\n    rcx >>= 0x36;\n    dl = (rcx != 0) ? 1 : 0;\n    rbx <<= 0xa;\n    rcx -= rcx;\n    rcx = ~rcx;\n    rcx |= rbx;\n    al |= sil;\n    if (al != 0) {\n        goto label_37;\n    }\n    rsi = 0x3fffffffffffff;\n    rdi = 0xffffffffffffffff;\n    do {\n        rdx = rcx;\n        rdx <<= 0xa;\n        if (rcx > rsi) {\n            rdx = rdi;\n        }\n        rcx = rdx;\n        rcx <<= 0xa;\n        dl = (rdx > rsi) ? 1 : 0;\n        if (rdx > rsi) {\n            rcx = rdi;\n        }\n    } while ((al & 1) == 0);\n    goto label_37;\nlabel_26:\n    rax = *((rsp + 0x10));\n    *(rax) = rbx;\n    r9d |= 2;\n    goto label_12;\n    *((rsp + 8)) = r10;\n    ecx = x.4;\n    esi = y.5;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    r10b = (esi < 0xa) ? 1 : 0;\n    r10b |= cl;\n    cl = ((r14b & 1) == 0) ? 1 : 0;\n    r9b = (r12d < 0xa) ? 1 : 0;\n    r9b |= cl;\n    r11 = 0xffffffffffffffff;\n    goto label_38;\nlabel_3:\n    rcx = rdi;\n    rcx *= r13;\n    if (rax < rdi) {\n        rcx = r11;\n    }\n    rdx = rcx;\n    rdx *= r13;\n    if (rax < rcx) {\n        rdx = r11;\n    }\n    rcx = rdx;\n    rcx *= r13;\n    if (rax < rdx) {\n        rcx = r11;\n    }\n    rdx = rcx;\n    rdx *= r13;\n    if (rax < rcx) {\n        rdx = r11;\n    }\n    rbx = rdx;\n    rbx *= r13;\n    if (rax < rdx) {\n        rbx = r11;\n    }\nlabel_38:\n    r14 = rbx;\n    while (1) {\n        r14 = rbx;\n        r14 *= r13;\n        if (rax < rbx) {\n            r14 = r11;\n        }\n        if (r10b != 0) {\n            rbp *= r13;\n            if (rax < r14) {\n            }\n            rcx = rbp;\n            rcx *= r13;\n            if (rax < rbp) {\n                rcx = r11;\n            }\n            rdx = rcx;\n            rdx *= r13;\n            if (rax < rcx) {\n                rdx = r11;\n            }\n            rsi = rdx;\n            rsi *= r13;\n            if (rax < rdx) {\n                rsi = r11;\n            }\n            rdi = rsi;\n            rdi *= r13;\n            if (rax < rsi) {\n                rdi = r11;\n            }\n            if (r9b != 0) {\n                goto label_39;\n            }\n            if (r10b == 0) {\n                goto label_40;\n            }\n        } else {\n            rbx = r14;\n            rbx *= r13;\n            if (rax < r14) {\n                rbx = r11;\n            }\n        }\n    }\nlabel_4:\n    rcx = rdi;\n    rcx *= r13;\n    rdi = rcx;\n    if (rax < rdi) {\n        rdi = r11;\n    }\n    if (r10b != 0) {\n        goto label_3;\n    }\nlabel_40:\n    rcx = rdi;\n    rcx *= r13;\n    if (rax < rdi) {\n        rcx = r11;\n    }\n    rdi = rcx;\n    goto label_4;\n    *((rsp + 8)) = r10;\n    ecx = x.4;\n    esi = y.5;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    r10b = (esi < 0xa) ? 1 : 0;\n    r10b |= cl;\n    cl = ((r14b & 1) == 0) ? 1 : 0;\n    r9b = (r12d < 0xa) ? 1 : 0;\n    r9b |= cl;\n    r11 = 0xffffffffffffffff;\n    goto label_41;\nlabel_5:\n    rcx = rdi;\n    rcx *= r13;\n    if (rax < rdi) {\n        rcx = r11;\n    }\n    rdx = rcx;\n    rdx *= r13;\n    if (rax < rcx) {\n        rdx = r11;\n    }\n    rcx = rdx;\n    rcx *= r13;\n    if (rax < rdx) {\n        rcx = r11;\n    }\n    rbx = rcx;\n    rbx *= r13;\n    if (rax < rcx) {\n        rbx = r11;\n    }\nlabel_41:\n    while (1) {\n        rbp *= r13;\n        if (rax < rbx) {\n        }\n        if (r10b != 0) {\n            rcx = rbp;\n            rcx *= r13;\n            if (rax < rbp) {\n                rcx = r11;\n            }\n            rdx = rcx;\n            rdx *= r13;\n            if (rax < rcx) {\n                rdx = r11;\n            }\n            rsi = rdx;\n            rsi *= r13;\n            if (rax < rdx) {\n                rsi = r11;\n            }\n            rdi = rsi;\n            rdi *= r13;\n            if (rax < rsi) {\n                rdi = r11;\n            }\n            if (r9b != 0) {\n                goto label_42;\n            }\n            if (r10b == 0) {\n                goto label_43;\n            }\n        } else {\n            rbx = rbp;\n            rbx *= r13;\n            if (rax < rbp) {\n                rbx = r11;\n            }\n        }\n    }\nlabel_6:\n    rcx = rdi;\n    rcx *= r13;\n    rdi = rcx;\n    if (rax < rdi) {\n        rdi = r11;\n    }\n    if (r10b != 0) {\n        goto label_5;\n    }\nlabel_43:\n    rcx = rdi;\n    rcx *= r13;\n    if (rax < rdi) {\n        rcx = r11;\n    }\n    rdi = rcx;\n    goto label_6;\n    *((rsp + 8)) = r10;\n    ecx = x.4;\n    esi = y.5;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    r10b = (esi < 0xa) ? 1 : 0;\n    r10b |= cl;\n    cl = ((r14b & 1) == 0) ? 1 : 0;\n    r9b = (r12d < 0xa) ? 1 : 0;\n    r9b |= cl;\n    r11 = 0xffffffffffffffff;\n    goto label_44;\nlabel_7:\n    rcx = rdi;\n    rcx *= r13;\n    if (rax < rdi) {\n        rcx = r11;\n    }\n    rdx = rcx;\n    rdx *= r13;\n    if (rax < rcx) {\n        rdx = r11;\n    }\n    rcx = rdx;\n    rcx *= r13;\n    if (rax < rdx) {\n        rcx = r11;\n    }\n    rdx = rcx;\n    rdx *= r13;\n    if (rax < rcx) {\n        rdx = r11;\n    }\n    rcx = rdx;\n    rcx *= r13;\n    if (rax < rdx) {\n        rcx = r11;\n    }\n    rdx = rcx;\n    rdx *= r13;\n    if (rax < rcx) {\n        rdx = r11;\n    }\n    rbx = rdx;\n    rbx *= r13;\n    if (rax < rdx) {\n        rbx = r11;\n    }\nlabel_44:\n    r8 = rbx;\n    while (1) {\n        r8 = rbx;\n        r8 *= r13;\n        if (rax < rbx) {\n            r8 = r11;\n        }\n        if (r10b != 0) {\n            r14 = r8;\n            r14 *= r13;\n            if (rax < r8) {\n                r14 = r11;\n            }\n            r12 = r14;\n            r12 *= r13;\n            if (rax < r14) {\n                r12 = r11;\n            }\n            rsi = r12;\n            rsi *= r13;\n            if (rax < r12) {\n                rsi = r11;\n            }\n            rbp *= r13;\n            if (rax < rsi) {\n            }\n            rdx = rbp;\n            rdx *= r13;\n            if (rax < rbp) {\n                rdx = r11;\n            }\n            rcx = rdx;\n            rcx *= r13;\n            if (rax < rdx) {\n                rcx = r11;\n            }\n            rdi = rcx;\n            rdi *= r13;\n            if (rax < rcx) {\n                rdi = r11;\n            }\n            if (r9b != 0) {\n                goto label_45;\n            }\n            if (r10b == 0) {\n                goto label_46;\n            }\n        } else {\n            rbx = r8;\n            rbx *= r13;\n            if (rax < r8) {\n                rbx = r11;\n            }\n        }\n    }\nlabel_8:\n    rcx = rdi;\n    rcx *= r13;\n    rdi = rcx;\n    if (rax < rdi) {\n        rdi = r11;\n    }\n    if (r10b != 0) {\n        goto label_7;\n    }\nlabel_46:\n    rcx = rdi;\n    rcx *= r13;\n    if (rax < rdi) {\n        rcx = r11;\n    }\n    rdi = rcx;\n    goto label_8;\n    rax = 0xffffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / r13;\n    rdx = rdx:rax % r13;\n    ecx = x.4;\n    edx = rcx - 1;\n    edx *= ecx;\n    cl = ((dl & 1) == 0) ? 1 : 0;\n    rdi = 0xffffffffffffffff;\n    dl = (*(obj.y.5) < 0xa) ? 1 : 0;\n    dl |= cl;\n    if (dl != 1) {\n        goto label_47;\n    }\n    goto label_48;\n    sil = ((r14b & 1) == 0) ? 1 : 0;\n    al = (r12d < 0xa) ? 1 : 0;\n    rcx = rbx;\n    rcx >>= 0x37;\n    dl = (rcx != 0) ? 1 : 0;\n    rbx <<= 9;\n    rcx -= rcx;\n    rcx = ~rcx;\n    rcx |= rbx;\n    al |= sil;\n    if (al != 0) {\n        goto label_37;\n    }\n    rsi = 0x7fffffffffffff;\n    rdi = 0xffffffffffffffff;\n    do {\n        rdx = rcx;\n        rdx <<= 9;\n        if (rcx > rsi) {\n            rdx = rdi;\n        }\n        rcx = rdx;\n        rcx <<= 9;\n        dl = (rdx > rsi) ? 1 : 0;\n        if (rdx > rsi) {\n            rcx = rdi;\n        }\n    } while ((al & 1) == 0);\nlabel_37:\n    eax = (int32_t) dl;\n    rbx = rcx;\n    goto label_36;\n    rax = rbx + rbx;\n    rcx = 0xffffffffffffffff;\n    __asm (\"cmovns rcx, rax\");\n    rbx >>= 0x3f;\n    eax = ebx;\n    rbx = rcx;\n    goto label_36;\nlabel_39:\n    sil -= sil;\n    r8b -= r8b;\n    r9b -= r9b;\n    dl -= dl;\n    cl -= cl;\n    al -= al;\n    al |= cl;\n    al |= dl;\n    al |= r9b;\n    goto label_49;\nlabel_42:\n    sil -= sil;\n    r8b -= r8b;\n    cl -= cl;\n    dl -= dl;\n    al -= al;\n    al |= dl;\n    al |= cl;\nlabel_49:\n    al |= r8b;\n    al |= sil;\n    al &= 1;\n    eax = (int32_t) al;\n    goto label_50;\nlabel_45:\n    r9b -= r9b;\n    r10b -= r10b;\n    r11b -= r11b;\n    sil -= sil;\n    bpl -= bpl;\n    dl -= dl;\n    cl -= cl;\n    al -= al;\n    al |= cl;\n    al |= dl;\n    al |= bpl;\n    al |= sil;\n    al &= 1;\n    al |= r11b;\n    al |= r10b;\n    al |= r9b;\n    eax = (int32_t) al;\n    eax &= 1;\nlabel_50:\n    rbx = rdi;\n    r9d = *((rsp + 4));\n    r10 = *((rsp + 8));\n    goto label_36;\nlabel_9:\n    assert_fail (\"0 <= strtol_base && strtol_base <= 36\", \"../lib/xstrtol.c\", 0x54, \"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\");\n    do {\nlabel_28:\n        rsi = rbx;\n        rsi *= r13;\n        if (rax < rbx) {\n            rsi = rdi;\n        }\n        if (dl != 0) {\n            dil -= dil;\n            rdx = rsi;\n            rdx *= r13;\n            rsi = 0xffffffffffffffff;\n            if (rax < rsi) {\n                rdx = rsi;\n            }\n            cl -= cl;\n            r13 *= rdx;\n            if (rax < rdx) {\n                r13 = rsi;\n            }\n            al -= al;\n            al |= dil;\n            goto label_51;\n        }\n        rbx = rsi;\nlabel_27:\n        rcx = rsi;\n        rcx *= r13;\n        if (rax < rbx) {\n            rcx = rdi;\n        }\n        rbx = rcx;\n    } while (1);\n    do {\nlabel_30:\n        rsi = rbx;\n        rsi *= r13;\n        if (rax < rbx) {\n            rsi = rdi;\n        }\n        if (dl != 0) {\n            eax -= eax;\n            eax &= 1;\n            rbx = rsi;\n            goto label_36;\n        }\n        rbx = rsi;\nlabel_29:\n        rcx = rsi;\n        rcx *= r13;\n        if (rax < rbx) {\n            rcx = rdi;\n        }\n        rbx = rcx;\n    } while (1);\n    do {\nlabel_35:\n        rsi = rbx;\n        rsi *= r13;\n        if (rax < rbx) {\n            rsi = rdi;\n        }\n        if (dl != 0) {\n            dil -= dil;\n            rbp *= r13;\n            rsi = 0xffffffffffffffff;\n            if (rax < rsi) {\n            }\n            r8b -= r8b;\n            rdx = rbp;\n            rdx *= r13;\n            if (rax < rbp) {\n                rdx = rsi;\n            }\n            cl -= cl;\n            r13 *= rdx;\n            if (rax < rdx) {\n                r13 = rsi;\n            }\n            al -= al;\n            al |= dil;\n            al |= r8b;\nlabel_51:\n            al |= cl;\n            al &= 1;\n            eax = (int32_t) al;\n            goto label_52;\n        }\n        rbx = rsi;\nlabel_34:\n        rcx = rsi;\n        rcx *= r13;\n        if (rax < rbx) {\n            rcx = rdi;\n        }\n        rbx = rcx;\n    } while (1);\n    do {\nlabel_48:\n        rsi = rbx;\n        rsi *= r13;\n        if (rax < rbx) {\n            rsi = rdi;\n        }\n        if (dl != 0) {\n            r8b -= r8b;\n            rdi = rsi;\n            rdi *= r13;\n            rdx = 0xffffffffffffffff;\n            if (rax < rsi) {\n                rdi = rdx;\n            }\n            r9b -= r9b;\n            rsi = rdi;\n            rsi *= r13;\n            if (rax < rdi) {\n                rsi = rdx;\n            }\n            r14 = r10;\n            r10b -= r10b;\n            rdi = rsi;\n            rdi *= r13;\n            if (rax < rsi) {\n                rdi = rdx;\n            }\n            r11b -= r11b;\n            rsi = rdi;\n            rsi *= r13;\n            if (rax < rdi) {\n                rsi = rdx;\n            }\n            bpl -= bpl;\n            rdi = rsi;\n            rdi *= r13;\n            if (rax < rsi) {\n                rdi = rdx;\n            }\n            cl -= cl;\n            r13 *= rdi;\n            if (rax < rdi) {\n                r13 = rdx;\n            }\n            al -= al;\n            al |= r8b;\n            al |= r9b;\n            r9d = *((rsp + 4));\n            al |= r10b;\n            r10 = r14;\n            al &= 1;\n            al |= r11b;\n            al |= bpl;\n            al |= cl;\n            eax = (int32_t) al;\n            eax &= 1;\nlabel_52:\n            rbx = r13;\nlabel_36:\n            r9d |= eax;\n            rax = r15 + r10;\n            rcx = *((rsp + 0x18));\n            *(rcx) = rax;\n            if (*((r15 + r10)) != 0) {\n                if (*(obj.y) >= 0xa) {\n                    eax = x;\n                    ecx = rax - 1;\n                    ecx *= eax;\n                    ecx &= 1;\n                    if (ecx == 0) {\n                        goto label_53;\n                    }\n                }\nlabel_53:\n                r9d |= 2;\n            }\nlabel_17:\n            rax = *((rsp + 0x10));\n            *(rax) = rbx;\nlabel_12:\n            eax = r9d;\n            return rax;\n        }\n        rbx = rsi;\nlabel_47:\n        rcx = rsi;\n        rcx *= r13;\n        if (rax < rbx) {\n            rcx = rdi;\n        }\n        rbx = rcx;\n    } while (1);\n}\n"
        },
        {
            "funcName": "dbg_rpl_calloc",
            "funcStartAddr": "0x407c10",
            "funcEndAddr": "0x407cb4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407c10 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_calloc (size_t bytes, size_t n, size_t s) {\n    rax = bytes;\n    rdi = n;\n    rsi = s;\n    /* void * rpl_calloc(size_t n,size_t s); */\n    ecx = x;\n    r8d = y;\n    r14d = 1;\n    if (rdi == 0) {\n        goto label_0;\n    }\n    r15d = 1;\n    if (rsi == 0) {\n        goto label_1;\n    }\n    if (r8d < 0xa) {\n        goto label_2;\n    }\n    eax = rcx - 1;\n    eax *= ecx;\n    eax &= 1;\n    if (eax == 0) {\n        goto label_2;\n    }\n    while (1);\nlabel_0:\n    r15d = 1;\n    goto label_1;\nlabel_2:\n    rax = rsi;\n    rax *= rdi;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    r14 = rsi;\n    r15 = rdi;\n    if (rax != rdi) {\n        goto label_3;\n    }\nlabel_1:\n    eax = rcx - 1;\n    eax *= ecx;\n    al = ((al & 1) == 0) ? 1 : 0;\n    bl = (r8d < 0xa) ? 1 : 0;\n    bl |= al;\n    do {\n        calloc (r15, r14);\n    } while (bl == 0);\n    do {\n        return rax;\nlabel_3:\n        errno_location ();\n        *(rax) = 0xc;\n        eax = 0;\n    } while (1);\n}\n"
        },
        {
            "funcName": "dbg_rpl_mbrtowc",
            "funcStartAddr": "0x407cc0",
            "funcEndAddr": "0x407d48",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407cc0 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_mbrtowc (int64_t arg2, int64_t arg3, size_t n, mbstate_t * ps, wchar_t * pwc, size_t ret, char const * s) {\n    int64_t var_20h;\n    rsi = arg2;\n    rdx = arg3;\n    r15 = n;\n    rcx = ps;\n    rdi = pwc;\n    r12 = ret;\n    r14 = s;\n    /* size_t rpl_mbrtowc(wchar_t * pwc,char const * s,size_t n,mbstate_t * ps); */\n    r15 = rdx;\n    r14 = rsi;\n    eax = x;\n    edx = rax - 1;\n    edx *= eax;\n    dl = ((dl & 1) == 0) ? 1 : 0;\n    al = (*(obj.y) < 0xa) ? 1 : 0;\n    al |= dl;\n    do {\n        rbx = rsp;\n        rbx += 0xfffffffffffffff0;\n    } while (al == 0);\n    if (rdi != 0) {\n        rbx = rdi;\n    }\n    rax = mbrtowc (rbx, r14, r15, rcx);\n    r12 = rax;\n    if (r15 != 0) {\n        if (r12 < 0xfffffffffffffffe) {\n            goto label_0;\n        }\n        edi = 0;\n        al = hard_locale ();\n        if (al != 0) {\n            goto label_0;\n        }\n        eax = *(r14);\n        *(rbx) = eax;\n        r12d = 1;\n    }\nlabel_0:\n    rax = r12;\n    rsp = rbp - 0x20;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_close_stream",
            "funcStartAddr": "0x407d50",
            "funcEndAddr": "0x407e1d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407d50 */\n#include <stdint.h>\n \nuint64_t dbg_close_stream (FILE * __stream, int64_t arg1) {\n    rbx = __stream;\n    rdi = arg1;\n    /* int close_stream(FILE * stream); */\n    rbx = rdi;\n    if (*(obj.y) < 0xa) {\n        goto label_0;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_0:\n        rdi = rbx;\n        rax = fpending ();\n        r14 = rax;\n        r12d = *(rbx);\n        rpl_fclose (rbx);\n        r15d = x;\n        ebp = y;\n        if (ebp < 0xa) {\n            goto label_1;\n        }\n        ecx = r15 - 1;\n        ecx *= r15d;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_1;\n        }\n        rdi = rbx;\n        fpending ();\n        eax = rpl_fclose (rbx);\n    }\nlabel_1:\n    if ((r12b & 0x20) == 0) {\n        ebx = 0;\n        if (eax == 0) {\n            goto label_2;\n        }\n        if (r14 == 0) {\n            rax = errno_location ();\n            if (*(rax) != 9) {\n                goto label_3;\n            }\n        } else {\n            if (eax != 0) {\n                goto label_3;\n            }\n            errno_location ();\n            *(rax) = 0;\n            r15d = x;\n            ebp = y;\n        }\nlabel_3:\n        ebx = 0xffffffff;\n        if (ebp < 0xa) {\n            goto label_2;\n        }\n        eax = r15 - 1;\n        eax *= r15d;\n        eax &= 1;\n        if (eax == 0) {\n            goto label_2;\n        }\n    }\nlabel_2:\n    eax = ebx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_hard_locale",
            "funcStartAddr": "0x407e20",
            "funcEndAddr": "0x407e8b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407e20 */\n#include <stdint.h>\n \nuint64_t dbg_hard_locale (int32_t category, char const * p) {\n    rdi = category;\n    rbx = p;\n    /* _Bool hard_locale(int category); */\n    rax = setlocale (rdi, 0);\n    rbx = rax;\n    bpl = 1;\n    if (rbx == 0) {\n        goto label_0;\n    }\n    eax = strcmp (rbx, 0x409ff6);\n    if (eax != 0) {\n        eax = strcmp (rbx, \"POSIX\");\n        if (eax != 0) {\n            goto label_0;\n        }\n    }\n    ebp = 0;\n    if (*(obj.y) < 0xa) {\n        goto label_0;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_0;\n    }\n    while (1);\nlabel_0:\n    eax = ebp;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_locale_charset",
            "funcStartAddr": "0x407e90",
            "funcEndAddr": "0x407eb5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407e90 */\n#include <stdint.h>\n \nuint64_t dbg_locale_charset (char const * codeset) {\n    rax = codeset;\n    /* char const * locale_charset(); */\n    rax = nl_langinfo (0xe);\n    ecx = 0x409b82;\n    if (rax != 0) {\n        rcx = rax;\n    }\n    eax = \"ASCII\";\n    if (*(rcx) != 0) {\n        rax = rcx;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg_rpl_fclose",
            "funcStartAddr": "0x407ec0",
            "funcEndAddr": "0x407fcb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407ec0 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_fclose (int64_t arg1, int32_t fd, FILE * fp) {\n    rdi = arg1;\n    rax = fd;\n    rbx = fp;\n    /* int rpl_fclose(FILE * fp); */\n    rbx = rdi;\n    if (*(obj.y) < 0xa) {\n        goto label_1;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_1:\n        fileno (rbx);\n        if (*(obj.y) < 0xa) {\n            goto label_2;\n        }\n        ecx = x;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_2;\n        }\n        eax = fileno (rbx);\n    }\nlabel_2:\n    if (eax >= 0) {\n        rdi = rbx;\n        eax = freading ();\n        if (eax != 0) {\n            eax = fileno (rbx);\n            esi = 0;\n            edx = 1;\n            edi = eax;\n            rax = lseek ();\n            if (rax == -1) {\n                goto label_3;\n            }\n        }\n        eax = rpl_fflush (rbx);\n        if (eax == 0) {\n            goto label_3;\n        }\n        if (*(obj.y) < 0xa) {\n            goto label_4;\n        }\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx == 0) {\n            goto label_4;\n        }\n    }\nlabel_3:\n    rdi = rbx;\n    void (*0x4020b0)() ();\nlabel_4:\n    rax = errno_location ();\n    r14 = rax;\n    ebp = *(r14);\n    fclose (rbx);\n    if (ebp == 0) {\n        goto label_5;\n    }\n    if (*(obj.y) >= 0xa) {\n        eax = x;\n        ecx = rax - 1;\n        ecx *= eax;\n        ecx &= 1;\n        if (ecx != 0) {\n            goto label_6;\n        }\n    }\nlabel_0:\n    *(r14) = ebp;\n    eax = 0xffffffff;\n    if (*(obj.y) < 0xa) {\n        goto label_5;\n    }\n    ecx = x;\n    edx = rcx - 1;\n    edx *= ecx;\n    edx &= 1;\n    if (edx != 0) {\nlabel_6:\n        *(r14) = ebp;\n        goto label_0;\n    }\nlabel_5:\n    return rax;\n    while (1);\n}\n"
        },
        {
            "funcName": "dbg_rpl_fflush",
            "funcStartAddr": "0x407fd0",
            "funcEndAddr": "0x4080d4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x407fd0 */\n#include <stdint.h>\n \nint32_t dbg_rpl_fflush (int64_t arg1, FILE * fp) {\n    rdi = arg1;\n    rbx = fp;\n    /* int rpl_fflush(FILE * stream); */\n    rbx = rdi;\n    if (rbx == 0) {\n        goto label_1;\n    }\n    if (*(obj.y) < 0xa) {\n        goto label_2;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    while (1) {\nlabel_2:\n        rdi = rbx;\n        freading ();\n        if (*(obj.y) < 0xa) {\n            goto label_3;\n        }\n        ecx = x;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_3;\n        }\n        rdi = rbx;\n        eax = freading ();\n    }\nlabel_3:\n    if (eax != 0) {\n        goto label_4;\n    }\nlabel_1:\n    rdi = rbx;\n    void (*0x402200)() ();\n    do {\nlabel_0:\n        fflush (rbx);\nlabel_4:\n        if ((*((rbx + 1)) & 1) != 0) {\n            rpl_fseeko (rbx, 0, 1);\n        }\n        if (*(obj.y.2) >= 0xa) {\n            eax = x.1;\n            ecx = rax - 1;\n            ecx *= eax;\n            ecx &= 1;\n            if (ecx != 0) {\n                goto label_5;\n            }\n        }\n        fflush (rbx);\n        if (*(obj.y) < 0xa) {\n            goto label_6;\n        }\n        ecx = x;\n        edx = rcx - 1;\n        edx *= ecx;\n        edx &= 1;\n        if (edx == 0) {\n            goto label_6;\n        }\n        if ((*((rbx + 1)) & 1) != 0) {\n            rpl_fseeko (rbx, 0, 1);\n        }\n    } while (*(obj.y.2) < 0xa);\n    eax = x.1;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_0;\n    }\nlabel_5:\nlabel_6:\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg_rpl_fseeko",
            "funcStartAddr": "0x4080e0",
            "funcEndAddr": "0x408192",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4080e0 */\n#include <stdint.h>\n \nint64_t dbg_rpl_fseeko (int64_t arg1, int64_t arg2, int64_t arg3, FILE * fp, off_t pos, int32_t whence) {\n    off_t offset;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = fp;\n    rax = pos;\n    r14 = whence;\n    /* int rpl_fseeko(FILE * fp,off_t offset,int whence); */\n    r14d = edx;\n    rbx = rdi;\n    rax = *((rbx + 0x10));\n    if (rax != *((rbx + 8))) {\nlabel_0:\n        rdi = rbx;\n        rsi = rbp;\n        edx = r14d;\n        r14 = rbx;\n        void (*0x402270)() ();\n    }\n    if (*(obj.y) < 0xa) {\n        goto label_2;\n    }\n    eax = x;\n    ecx = rax - 1;\n    ecx *= eax;\n    ecx &= 1;\n    if (ecx == 0) {\n        goto label_2;\n    }\n    while (1);\nlabel_2:\n    rax = *((rbx + 0x28));\n    if (rax != *((rbx + 0x20))) {\n        goto label_0;\n    }\n    if (*((rbx + 0x48)) != 0) {\n        goto label_0;\n    }\n    eax = fileno (rbx);\n    edi = eax;\n    rsi = rbp;\n    edx = r14d;\n    rax = lseek ();\n    if (rax == -1) {\n        goto label_3;\n    }\n    *(rbx) &= 0xef;\n    *((rbx + 0x90)) = rax;\n    eax = 0;\n    do {\nlabel_1:\n        return rax;\nlabel_3:\n        eax = 0xffffffff;\n    } while (*(obj.y) < 0xa);\n    ecx = x;\n    edx = rcx - 1;\n    edx *= ecx;\n    edx &= 1;\n    if (edx == 0) {\n        goto label_1;\n    }\n}\n"
        },
        {
            "funcName": "atexit",
            "funcStartAddr": "0x408220",
            "funcEndAddr": "0x408232",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x408220 */\n#include <stdint.h>\n \nvoid atexit (void) {\n    rdx = *(obj.__dso_handle);\n    esi = 0;\n    return cxa_atexit ();\n}\n"
        }
    ],
    "funcCount": 75
}