{
    "binaryInfo": {
        "isStripped": true,
        "binaryName": "whoami-amd64-clang-none_O2"
    },
    "buildInfo": {
        "decompilerName": "radare2",
        "compilerName": "gcc",
        "compilerVersion": "9.4.0",
        "optLevel": "O"
    },
    "funcInfo": [
        {
            "funcName": "sym._dl_relocate_static_pie",
            "funcStartAddr": "402300",
            "funcEndAddr": "402305",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402300 */\n#include <stdint.h>\n \nvoid dl_relocate_static_pie (void) {\n}\n"
        },
        {
            "funcName": "dbg.usage",
            "funcStartAddr": "4023c0",
            "funcEndAddr": "40255b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4023c0 */\n#include <stdint.h>\n \nuint64_t dbg_usage (int64_t arg1, char const * lc_messages) {\n    int32_t status;\n    rdi = arg1;\n    rax = lc_messages;\n    /* void usage(int status); */\n    if (ebp == 0) {\n        edx = 5;\n        rax = dcgettext (0, \"Usage: %s [OPTION]...\\n\");\n        rcx = rax;\n        rdx = program_name;\n        edi = 1;\n        eax = 0;\n        rsi = rcx;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"Print the user name associated with the current effective user ID.\\nSame as id -un.\\n\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"      --help     display this help and exit\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"      --version  output version information and exit\\n\");\n        rsi = stdout;\n        rdi = rax;\n        fputs_unlocked ();\n        edx = 5;\n        rax = dcgettext (0, \"\\n%s online help: <%s>\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"GNU coreutils\";\n        ecx = \"https://www.gnu.org/software/coreutils/\";\n        eax = 0;\n        printf_chk ();\n        rax = setlocale (5, 0);\n        if (rax != 0) {\n            eax = strncmp (rax, 0x4061d3, 3);\n            if (eax == 0) {\n                goto label_0;\n            }\n            edx = 5;\n            rax = dcgettext (0, \"Report any translation bugs to <https://translationproject.org/team/>\\n\");\n            rsi = stdout;\n            rdi = rax;\n            fputs_unlocked ();\n        }\nlabel_0:\n        edx = 5;\n        rax = dcgettext (0, \"Full documentation <%s%s>\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"https://www.gnu.org/software/coreutils/\";\n        ecx = \"whoami\";\n        eax = 0;\n        printf_chk ();\n        edx = 5;\n        rax = dcgettext (0, \"or available locally via: info '(coreutils) %s%s'\\n\");\n        rsi = rax;\n        edi = 1;\n        edx = \"whoami\";\n        ecx = \" invocation\";\n        eax = 0;\n        printf_chk ();\n        exit (ebp);\n    }\n    rbx = stderr;\n    edx = 5;\n    rax = dcgettext (0, \"Try '%s --help' for more information.\\n\");\n    rdx = rax;\n    rcx = program_name;\n    esi = 1;\n    eax = 0;\n    rdi = rbx;\n    fprintf_chk ();\n    return exit (ebp);\n}\n"
        },
        {
            "funcName": "dbg.main",
            "funcStartAddr": "402560",
            "funcEndAddr": "402690",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402560 */\n#include <stdint.h>\n \nuint64_t dbg_main (int32_t argc, char ** argv, passwd * pw, uid_t uid) {\n    rdi = argc;\n    rsi = argv;\n    rax = pw;\n    rbx = uid;\n    /* int main(int argc,char ** argv); */\n    rbx = rsi;\n    set_program_name (*(rbx));\n    setlocale (6, 0x406096);\n    bindtextdomain (0x406147, \"/home/yujeong/binary_gen/coreutils-8.31/tmp/_install/share/locale\");\n    textdomain (0x406147, rsi);\n    edi = close_stdout;\n    atexit ();\n    eax = 0;\n    parse_gnu_standard_options_only (ebp, rbx, \"whoami\", \"GNU coreutils\", *(obj.Version), 1);\n    if (*(obj.optind) == ebp) {\n        rax = errno_location ();\n        *(rbp) = 0;\n        eax = geteuid ();\n        ebx = eax;\n        if (ebx == 0xffffffff) {\n            r14d = *(rbp);\n            if (r14d != 0) {\n                goto label_0;\n            }\n        }\n        edi = ebx;\n        rax = getpwuid ();\n        if (rax == 0) {\n            goto label_1;\n        }\n        eax = puts (*(rax));\n        eax = 0;\n        return rax;\n    }\n    edx = 5;\n    rax = dcgettext (0, \"extra operand %s\");\n    rax = *(obj.optind);\n    rax = quote (*((rbx + rax*8)), rsi);\n    rcx = rax;\n    eax = 0;\n    error (0, 0, rbp);\n    dbg_usage (1);\nlabel_1:\n    r14d = *(rbp);\nlabel_0:\n    edx = 5;\n    rax = dcgettext (0, \"cannot find name for user ID %lu\");\n    ecx = ebx;\n    eax = 0;\n    rax = error (1, r14d, rax);\n}\n"
        },
        {
            "funcName": "dbg.close_stdout_set_file_name",
            "funcStartAddr": "402690",
            "funcEndAddr": "402698",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402690 */\n#include <stdint.h>\n \nvoid dbg_close_stdout_set_file_name (char const * file) {\n    rdi = file;\n    /* void close_stdout_set_file_name(char const * file); */\n    *(obj.file_name) = rdi;\n}\n"
        },
        {
            "funcName": "dbg.close_stdout_set_ignore_EPIPE",
            "funcStartAddr": "4026a0",
            "funcEndAddr": "4026a8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4026a0 */\n#include <stdint.h>\n \nvoid dbg_close_stdout_set_ignore_EPIPE (_Bool ignore) {\n    rdi = ignore;\n    /* void close_stdout_set_ignore_EPIPE(_Bool ignore); */\n    *(obj.ignore_EPIPE) = dil;\n}\n"
        },
        {
            "funcName": "dbg.close_stdout",
            "funcStartAddr": "4026b0",
            "funcEndAddr": "402765",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4026b0 */\n#include <stdint.h>\n \nuint64_t dbg_close_stdout (char const * write_error) {\n    rbx = write_error;\n    /* void close_stdout(); */\n    eax = close_stream (*(obj.stdout));\n    if (eax != 0) {\n        bl = ignore_EPIPE;\n        rax = errno_location ();\n        if (bl == 0) {\n            goto label_0;\n        }\n        if (*(rbp) != 0x20) {\n            goto label_0;\n        }\n    }\n    eax = close_stream (*(obj.stderr));\n    if (eax == 0) {\n        return rax;\nlabel_0:\n        edx = 5;\n        rax = dcgettext (0, \"write error\");\n        rbx = rax;\n        rdi = file_name;\n        ebp = *(rbp);\n        if (rdi != 0) {\n            goto label_1;\n        }\n        eax = 0;\n        rcx = rbx;\n        error (0, ebp, 0x40628d);\n        exit (*(obj.exit_failure));\n    }\n    exit (*(obj.exit_failure));\nlabel_1:\n    rax = quotearg_colon (rdi);\n    rcx = rax;\n    eax = 0;\n    r8 = rbx;\n    error (0, ebp, \"%s: %s\");\n    return exit (*(obj.exit_failure));\n}\n"
        },
        {
            "funcName": "dbg.parse_long_options",
            "funcStartAddr": "402770",
            "funcEndAddr": "402865",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402770 */\n#include <stdint.h>\n \nuint64_t dbg_parse_long_options (int64_t arg_100h, int64_t arg10, int64_t arg11, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int32_t argc, char ** argv, int32_t c, char const * command_name, char const * package, void (*)() usage_func, char const * version) {\n    int32_t saved_opterr;\n    va_list authors;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    int64_t var_80h;\n    int64_t var_90h;\n    int64_t var_a0h;\n    int64_t var_b0h;\n    int64_t var_c0h;\n    xmm3 = arg10;\n    xmm4 = arg11;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    r9 = arg6;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    rdi = argc;\n    rsi = argv;\n    rax = c;\n    r12 = command_name;\n    r15 = package;\n    rbx = usage_func;\n    r14 = version;\n    /* void parse_long_options(int argc,char ** argv,char const * command_name,char const * package,char const * version,void (*)() usage_func,va_args ...); */\n    rbx = r9;\n    r14 = r8;\n    r15 = rcx;\n    r12 = rdx;\n    if (al != 0) {\n        *((rsp + 0x50)) = xmm0;\n        *((rsp + 0x60)) = xmm1;\n        *((rsp + 0x70)) = xmm2;\n        *((rsp + 0x80)) = xmm3;\n        *((rsp + 0x90)) = xmm4;\n        *((rsp + 0xa0)) = xmm5;\n        *((rsp + 0xb0)) = xmm6;\n        *((rsp + 0xc0)) = xmm7;\n    }\n    ebp = opterr;\n    *(obj.opterr) = 0;\n    if (edi == 2) {\n        edi = 2;\n        edx = 0x406290;\n        ecx = long_options;\n        r8d = 0;\n        eax = getopt_long ();\n        if (eax != 0x68) {\n            if (eax != 0x76) {\n                goto label_0;\n            }\n            rax = rsp + 0x20;\n            *((rsp + 0x10)) = rax;\n            rax = rsp + 0x100;\n            *((rsp + 8)) = rax;\n            *((rsp + 4)) = 0x30;\n            *(rsp) = 0x30;\n            rdi = stdout;\n            r8 = rsp;\n            rsi = r12;\n            rdx = r15;\n            rcx = r14;\n            version_etc_va ();\n            exit (0);\n        }\n        edi = 0;\n        void (*rbx)() ();\n    }\nlabel_0:\n    *(obj.opterr) = ebp;\n    *(obj.optind) = 0;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.parse_gnu_standard_options_only",
            "funcStartAddr": "402870",
            "funcEndAddr": "40296b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402870 */\n#include <stdint.h>\n \nuint64_t dbg_parse_gnu_standard_options_only (int64_t arg_100h, int64_t arg_108h, int64_t arg10, int64_t arg11, int64_t arg5, int64_t arg7, int64_t arg8, int64_t arg9, int32_t argc, char ** argv, int32_t c, char const * command_name, char const * optstring, char const * package, _Bool scan_all, void (*)() usage_func, char const * version) {\n    int32_t saved_opterr;\n    va_list authors;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    int64_t var_80h;\n    int64_t var_90h;\n    int64_t var_a0h;\n    int64_t var_b0h;\n    int64_t var_c0h;\n    xmm3 = arg10;\n    xmm4 = arg11;\n    r8 = arg5;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    rdi = argc;\n    rsi = argv;\n    rax = c;\n    rbx = command_name;\n    rdx = optstring;\n    r15 = package;\n    r9 = scan_all;\n    rcx = usage_func;\n    r14 = version;\n    /* void parse_gnu_standard_options_only(int argc,char ** argv,char const * command_name,char const * package,char const * version,_Bool scan_all,void (*)() usage_func,va_args ...); */\n    r14 = r8;\n    r15 = rcx;\n    rbx = rdx;\n    if (al != 0) {\n        *((rsp + 0x50)) = xmm0;\n        *((rsp + 0x60)) = xmm1;\n        *((rsp + 0x70)) = xmm2;\n        *((rsp + 0x80)) = xmm3;\n        *((rsp + 0x90)) = xmm4;\n        *((rsp + 0xa0)) = xmm5;\n        *((rsp + 0xb0)) = xmm6;\n        *((rsp + 0xc0)) = xmm7;\n    }\n    ebp = opterr;\n    *(obj.opterr) = 1;\n    eax = 0x406096;\n    edx = 0x406290;\n    if (r9b != 0) {\n        rdx = rax;\n    }\n    ecx = long_options;\n    r8d = 0;\n    eax = getopt_long ();\n    if (eax != 0xffffffff) {\n        rcx = *((rsp + 0x100));\n        if (eax != 0x68) {\n            if (eax == 0x76) {\n                goto label_0;\n            }\n            edi = *(obj.exit_failure);\n        } else {\n            edi = 0;\n        }\n        void (*rcx)() ();\n    }\n    *(obj.opterr) = ebp;\n    return eax;\nlabel_0:\n    rax = rsp + 0x20;\n    *((rsp + 0x10)) = rax;\n    rax = rsp + 0x108;\n    *((rsp + 8)) = rax;\n    *((rsp + 4)) = 0x30;\n    *(rsp) = 0x30;\n    rdi = stdout;\n    r8 = rsp;\n    rsi = rbx;\n    rdx = r15;\n    rcx = r14;\n    version_etc_va ();\n    return exit (0);\n}\n"
        },
        {
            "funcName": "dbg.set_program_name",
            "funcStartAddr": "402970",
            "funcEndAddr": "402a11",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402970 */\n#include <stdint.h>\n \nuint64_t dbg_set_program_name (char ** arg1, char const * base, char const * slash) {\n    rdi = arg1;\n    r14 = base;\n    rax = slash;\n    /* void set_program_name(char const * argv0); */\n    rbx = rdi;\n    if (rbx != 0) {\n        rax = strrchr (rbx, 0x2f);\n        r14 = rax + 1;\n        if (rax == 0) {\n            r14 = rbx;\n        }\n        rax = r14;\n        rax -= rbx;\n        if (rax >= 7) {\n            eax = strncmp (r14 - 7, \"/.libs/\", 7);\n            if (eax != 0) {\n                goto label_0;\n            }\n            eax = strncmp (r14, 0x406340, 3);\n            if (eax == 0) {\n                r14 += 3;\n                *(obj.__progname) = r14;\n            }\n            rbx = r14;\n        }\nlabel_0:\n        *(obj.program_name) = rbx;\n        *(obj.program_invocation_name) = rbx;\n        return rax;\n    }\n    fwrite (\"A NULL argv[0] was passed through an exec system call.\\n\", 0x37, 1, *(obj.stderr));\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.clone_quoting_options",
            "funcStartAddr": "402a20",
            "funcEndAddr": "402a53",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402a20 */\n#include <stdint.h>\n \nuint64_t dbg_clone_quoting_options (int64_t arg1, quoting_options * o, quoting_options * p) {\n    int32_t e;\n    rdi = arg1;\n    rbx = o;\n    rax = p;\n    /* quoting_options * clone_quoting_options(quoting_options * o); */\n    rbx = rdi;\n    rax = errno_location ();\n    r14 = rax;\n    ebp = *(r14);\n    eax = default_quoting_options;\n    if (rbx == 0) {\n        rbx = rax;\n    }\n    esi = 0x38;\n    rdi = rbx;\n    xmemdup ();\n    *(r14) = ebp;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.get_quoting_style",
            "funcStartAddr": "402a60",
            "funcEndAddr": "402a6f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402a60 */\n#include <stdint.h>\n \nint64_t dbg_get_quoting_style (quoting_options const * o) {\n    rdi = o;\n    /* quoting_style get_quoting_style(quoting_options const * o); */\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    eax = *(rax);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.set_quoting_style",
            "funcStartAddr": "402a70",
            "funcEndAddr": "402a7f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402a70 */\n#include <stdint.h>\n \nint64_t dbg_set_quoting_style (quoting_options * o, quoting_style s) {\n    rdi = o;\n    rsi = s;\n    /* void set_quoting_style(quoting_options * o,quoting_style s); */\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    *(rax) = esi;\n    return rax;\n}\n"
        },
        {
            "funcName": "sym.set_char_quoting",
            "funcStartAddr": "402a80",
            "funcEndAddr": "402ab6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402a80 */\n#include <stdint.h>\n \nint32_t set_char_quoting (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = esi;\n    esi = default_quoting_options;\n    if (rdi != 0) {\n        rsi = rdi;\n    }\n    eax = ecx;\n    al >>= 5;\n    r8d = (int32_t) al;\n    r9d = *((rsi + r8*4 + 8));\n    edi = *((rsi + r8*4 + 8));\n    edi >>= cl;\n    eax = edi;\n    eax &= 1;\n    edi ^= edx;\n    edi &= 1;\n    edi <<= cl;\n    edi ^= r9d;\n    *((rsi + r8*4 + 8)) = edi;\n    return eax;\n}\n"
        },
        {
            "funcName": "dbg.set_quoting_flags",
            "funcStartAddr": "402ac0",
            "funcEndAddr": "402ad3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402ac0 */\n#include <stdint.h>\n \nint32_t dbg_set_quoting_flags (int32_t i, quoting_options * o, int32_t r) {\n    rsi = i;\n    rdi = o;\n    rax = r;\n    /* int set_quoting_flags(quoting_options * o,int i); */\n    ecx = default_quoting_options;\n    if (rdi != 0) {\n        rcx = rdi;\n    }\n    eax = *((rcx + 4));\n    *((rcx + 4)) = esi;\n    return eax;\n}\n"
        },
        {
            "funcName": "sym.set_custom_quoting",
            "funcStartAddr": "402ae0",
            "funcEndAddr": "402b0b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402ae0 */\n#include <stdint.h>\n \nint64_t set_custom_quoting (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    eax = default_quoting_options;\n    if (rdi != 0) {\n        rax = rdi;\n    }\n    *(rax) = 0xa;\n    if (rsi != 0) {\n        if (rdx == 0) {\n            goto label_0;\n        }\n        *((rax + 0x28)) = rsi;\n        *((rax + 0x30)) = rdx;\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_buffer",
            "funcStartAddr": "402b10",
            "funcEndAddr": "402b82",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402b10 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_buffer (int64_t arg_4h, int64_t arg_8h, int64_t arg_28h, int64_t arg_30h, char const * arg, int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, size_t argsize, char * buffer, size_t buffersize, quoting_options const * o, size_t r) {\n    quoting_options const * p;\n    int32_t e;\n    int64_t var_4h;\n    r15 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r14 = argsize;\n    r13 = buffer;\n    r12 = buffersize;\n    r8 = o;\n    rax = r;\n    /* size_t quotearg_buffer(char * buffer,size_t buffersize,char const * arg,size_t argsize,quoting_options const * o); */\n    r14 = rcx;\n    r15 = rdx;\n    r12 = rsi;\n    r13 = rdi;\n    if (r8 != 0) {\n    }\n    rax = errno_location ();\n    rbx = rax;\n    eax = *(rbx);\n    *((rsp + 4)) = eax;\n    rax = rbp + 8;\n    quotearg_buffer_restyled (r13, r12, r15, r14, *(rbp), *((rbp + 4)));\n    ecx = *((rsp + 4));\n    *(rbx) = ecx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.quotearg_buffer_restyled",
            "funcStartAddr": "402b90",
            "funcEndAddr": "403959",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x402b90 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_buffer_restyled (int64_t arg_108h, uint32_t arg_f0h, int64_t arg_f8h, func main, uint32_t arg_1bh, int64_t arg_38h, int64_t arg_78h_2, int64_t arg_78h, uint32_t arg2, size_t * arg3, int64_t arg5, int64_t arg6, char * buffer, unsigned char c, _Bool elide_outer_quotes, unsigned char esc, size_t ilim) {\n    int32_t flags;\n    char const * arg;\n    uint32_t var_fh;\n    size_t argsize;\n    int64_t var_1ah;\n    uint32_t var_1bh;\n    size_t var_1ch;\n    uint32_t var_20h;\n    uint32_t var_21h;\n    int64_t var_22h;\n    int64_t var_23h;\n    int64_t var_24h;\n    uint32_t var_25h;\n    uint32_t var_26h;\n    uint32_t var_27h;\n    char const * quote_string;\n    size_t var_30h;\n    size_t bytes;\n    size_t n;\n    char const * left_quote;\n    char const * right_quote;\n    int64_t var_54h;\n    size_t * var_58h;\n    uint32_t var_60h;\n    int64_t var_68h;\n    wchar_t w;\n    char * s;\n    mbstate_t * ps;\n    uint32_t var_84h;\n    uint32_t var_88h;\n    wint_t wc;\n    size_t * var_90h;\n    size_t * var_98h;\n    int64_t var_a0h;\n    uint32_t var_a8h;\n    int64_t var_b0h;\n    rsi = arg2;\n    rdx = arg3;\n    r8 = arg5;\n    r9 = arg6;\n    rdi = buffer;\n    r12 = c;\n    r15 = elide_outer_quotes;\n    rcx = esc;\n    rbx = ilim;\n    /* size_t quotearg_buffer_restyled(char * buffer,size_t buffersize,char const * arg,size_t argsize,quoting_style quoting_style,int flags,unsigned int const * quote_these_too,char const * left_quote,char const * right_quote); */\nlabel_12:\n    ebx = r9d;\n    r12d = r8d;\n    *((rsp + 0x30)) = rcx;\n    *((rsp + 0x28)) = rdx;\n    *((rsp + 0x10)) = rdi;\n    rax = *((rsp + 0x100));\n    *((rsp + 0x70)) = rax;\n    rax = *((rsp + 0xf8));\n    *((rsp + 0x68)) = rax;\n    rax = ctype_get_mb_cur_max ();\n    *((rsp + 0xa8)) = rax;\n    r15d = ebx;\n    r15b >>= 1;\n    r15b &= 1;\n    eax = ebx;\n    eax &= 1;\n    *((rsp + 0x88)) = eax;\n    *((rsp + 0x1c)) = ebx;\n    ebx &= 4;\n    *((rsp + 0x84)) = ebx;\n    dil = 1;\n    eax = 0;\n    *((rsp + 0x60)) = rax;\n    eax = 0;\n    *((rsp + 0x48)) = rax;\n    eax = 0;\n    *((rsp + 0x40)) = rax;\n    eax = 0;\n    r9d = 0;\n    ecx = 0;\n    *((rsp + 0xa0)) = rcx;\nlabel_11:\n    r11 = rbp;\n    if (r12d > 0xa) {\n        goto label_16;\n    }\n    r8d = 7;\n    r14d = 0;\n    ecx = r12d;\n    r13b = 1;\n    esi = 0;\n    r10 = *((rsp + 0x28));\n    rbp = *((rsp + 0x30));\n    /* switch table (11 cases) at 0x406350 */\n    r14d = edi;\n    rbx = r11;\n    rax = gettext_quote (0x406878, r12d);\n    *((rsp + 0x68)) = rax;\n    rax = gettext_quote (0x40687a, r12d);\n    r9d = ebp;\n    edi = r14d;\n    r11 = rbx;\n    *((rsp + 0x70)) = rax;\n    *((rsp + 0x1a)) = dil;\n    *((rsp + 0x50)) = r9d;\n    if ((r15b & 1) != 0) {\n        goto label_17;\n    }\n    rcx = *((rsp + 0x68));\n    al = *(rcx);\n    r14d = 0;\n    if (al == 0) {\n        goto label_18;\n    }\n    do {\n        if (r14 < r11) {\n            rdx = *((rsp + 0x10));\n            *((rdx + r14)) = al;\n        }\n        eax = *((rcx + r14 + 1));\n        r14++;\n    } while (al != 0);\n    goto label_18;\nlabel_17:\n    r14d = 0;\nlabel_18:\n    rbp = *((rsp + 0x70));\n    rbx = r11;\n    rax = strlen (*((rsp + 0x70)));\n    r11 = rbx;\n    *((rsp + 0x40)) = rax;\n    r8d = r12d;\n    *((rsp + 0x48)) = rbp;\n    r13b = 1;\n    sil = r15b;\n    r10 = *((rsp + 0x28));\n    rbp = *((rsp + 0x30));\n    dil = *((rsp + 0x1a));\n    r9d = *((rsp + 0x50));\n    goto label_19;\n    r8d = 0;\n    r14d = 0;\n    r13d = eax;\n    esi = 0;\n    goto label_19;\n    al = 1;\n    r15b = 1;\n    cl = 1;\n    if ((r15b & 1) != 0) {\n        ecx = eax;\n    }\n    al = cl;\n    r8d = 2;\n    if ((r15b & 1) == 0) {\n        if (r11 != 0) {\n            rcx = *((rsp + 0x10));\n            *(rcx) = 0x27;\n        }\n        r14d = 1;\n    } else {\n        r14d = 0;\n    }\n    ecx = 0x40687a;\n    *((rsp + 0x48)) = rcx;\n    ecx = 1;\n    *((rsp + 0x40)) = rcx;\n    r13d = eax;\n    goto label_20;\n    r8d = 5;\n    if ((r15b & 1) == 0) {\n        if (r11 != 0) {\n            rax = *((rsp + 0x10));\n            *(rax) = 0x22;\n        }\n        r14d = 1;\n        goto label_21;\n        r13b = 1;\n        r8d = 5;\n        r14d = 0;\n        eax = 0x406876;\n        *((rsp + 0x48)) = rax;\n        eax = 1;\n        *((rsp + 0x40)) = rax;\n        sil = 1;\n    } else {\n        r14d = 0;\nlabel_21:\n        eax = 0x406876;\n        *((rsp + 0x48)) = rax;\n        eax = 1;\n        *((rsp + 0x40)) = rax;\n        r13b = 1;\nlabel_20:\n        sil = r15b;\n    }\nlabel_19:\n    r12b = (*((rsp + 0xf0)) != 0) ? 1 : 0;\n    r15b = (r8d != 2) ? 1 : 0;\n    al = (r8d == 2) ? 1 : 0;\n    ecx = r13d;\n    cl &= 1;\n    rsp + 0x22 = (cl == 0) ? 1 : 0;\n    ebx = r15d;\n    *((rsp + 0x1b)) = cl;\n    bl &= cl;\n    cl = (*((rsp + 0x40)) != 0) ? 1 : 0;\n    edx = ecx;\n    *((rsp + 0x26)) = bl;\n    dl &= bl;\n    *((rsp + 0x27)) = dl;\n    ebx = esi;\n    bl &= 1;\n    dl = (bl == 0) ? 1 : 0;\n    al &= bl;\n    *((rsp + 0x23)) = al;\n    *((rsp + 0xf)) = bl;\n    r12b &= bl;\n    *((rsp + 0x25)) = r12b;\n    dl |= r15b;\n    *((rsp + 0x20)) = dl;\n    *((rsp + 0x24)) = r13b;\n    *((rsp + 0xb0)) = rsi;\n    r13b &= sil;\n    r13b &= cl;\n    *((rsp + 0x21)) = r13b;\n    r15d = 0;\n    *((rsp + 0x38)) = r8;\n    if (rbp != -1) {\nlabel_4:\n        if (r15 != rbp) {\n            goto label_22;\n        }\n        goto label_23;\n    }\nlabel_5:\n    if (*((r10 + r15)) == 0) {\n        goto label_24;\n    }\nlabel_22:\n    if (*((rsp + 0x27)) != 0) {\n        rax = *((rsp + 0x40));\n        rbx = r15 + rax;\n        if (rax >= 2) {\n            if (rbp != -1) {\n                goto label_25;\n            }\n            r12d = edi;\n            r13d = r9d;\n            rax = strlen (r10);\n            r9d = r13d;\n            r8 = *((rsp + 0x38));\n            edi = r12d;\n            r11 = rbp;\n            r10 = *((rsp + 0x28));\n        }\nlabel_25:\n        if (rbx <= rbp) {\n            goto label_26;\n        }\n    }\n    esi = 0;\n    do {\nlabel_0:\n        r12d = *((r10 + r15));\n        if (r12 > 0x7e) {\n            goto label_27;\n        }\n        edx = 0;\n        r13b = 1;\n        cl = 0x6e;\n        bl = 0x61;\n        eax = 0;\n        /* switch table (127 cases) at 0x4063a8 */\nlabel_3:\n        if (*((rsp + 0x26)) == 0) {\n            goto label_8;\n        }\nlabel_1:\n        if (*((rsp + 0xf0)) != 0) {\n            goto label_28;\n        }\n        goto label_29;\nlabel_26:\n        r13 = rbp;\n        r12d = edi;\n        rbx = r11;\n        eax = memcmp (r10 + r15, *((rsp + 0x48)), *((rsp + 0x40)));\n        sil = (eax == 0) ? 1 : 0;\n        if (eax != 0) {\n            goto label_30;\n        }\n        r10 = *((rsp + 0x28));\n        r11 = rbx;\n        edi = r12d;\n        r8 = *((rsp + 0x38));\n        r9d = ebp;\n    } while (*((rsp + 0xf)) == 0);\n    goto label_31;\nlabel_30:\n    r10 = *((rsp + 0x28));\n    r11 = rbx;\n    edi = r12d;\n    r8 = *((rsp + 0x38));\n    r9d = ebp;\n    goto label_0;\n    if (r15 != 0) {\n        goto label_32;\n    }\n    goto label_33;\n    eax = 0;\n    if (rbp == -1) {\n        goto label_34;\n    }\n    if (r15 != 0) {\n        goto label_35;\n    }\n    if (rbp == 1) {\n        goto label_33;\n    }\n    goto label_35;\n    if (*((rsp + 0x1b)) == 0) {\n        goto label_36;\n    }\n    if (*((rsp + 0xf)) != 0) {\n        goto label_31;\n    }\n    if (r8d == 2) {\n        eax = r9d;\n        al &= 1;\n        if (al != 0) {\n            goto label_37;\n        }\n        if (r14 < r11) {\n            rax = *((rsp + 0x10));\n            *((rax + r14)) = 0x27;\n        }\n        rax = r14 + 1;\n        if (rax < r11) {\n            rcx = *((rsp + 0x10));\n            *((rcx + rax)) = 0x24;\n        }\n        rax = r14 + 2;\n        if (rax < r11) {\n            rcx = *((rsp + 0x10));\n            *((rcx + rax)) = 0x27;\n        }\n        r14 += 3;\n        r9b = 1;\n    }\nlabel_37:\n    rcx = r14;\n    if (rcx < r11) {\n        rax = *((rsp + 0x10));\n        *((rax + rcx)) = 0x5c;\n    }\n    r14 = rcx + 1;\n    al = 1;\n    r12b = 0x30;\n    if (r8d == 2) {\n        goto label_35;\n    }\n    rdx = r15 + 1;\n    if (rdx >= rbp) {\n        goto label_35;\n    }\n    dl = *((r10 + rdx));\n    dl += 0xd0;\n    if (dl > 9) {\n        goto label_35;\n    }\n    if (r14 < r11) {\n        rdx = *((rsp + 0x10));\n        *((rdx + r14)) = 0x30;\n    }\n    rdx = rcx + 2;\n    if (rdx < r11) {\n        ebx = esi;\n        rsi = *((rsp + 0x10));\n        *((rsi + rdx)) = 0x30;\n        esi = ebx;\n    }\n    rcx += 3;\n    r13d = 0;\n    r14 = rcx;\n    if (*((rsp + 0x26)) != 0) {\n        goto label_1;\n    }\n    goto label_8;\n    bl = 0x62;\n    goto label_38;\n    cl = 0x74;\n    goto label_39;\n    bl = 0x76;\n    goto label_38;\n    bl = 0x66;\n    goto label_38;\n    cl = 0x72;\n    goto label_39;\n    r12b = 0x27;\n    al = 1;\n    *((rsp + 0xa0)) = rax;\n    if (r8d == 2) {\n        if (*((rsp + 0xf)) != 0) {\n            goto label_40;\n        }\n        al = (r11 == 0) ? 1 : 0;\n        rcx = *((rsp + 0x60));\n        rdx = *((rsp + 0x60));\n        cl = (rdx != 0) ? 1 : 0;\n        cl |= al;\n        if (cl == 0) {\n            rdx = r11;\n        }\n        *((rsp + 0x60)) = rdx;\n        eax = 0;\n        if (cl == 0) {\n            r11 = rax;\n        }\n        if (r14 < r11) {\n            rax = *((rsp + 0x10));\n            *((rax + r14)) = 0x27;\n        }\n        rax = r14 + 1;\n        if (rax < r11) {\n            rcx = *((rsp + 0x10));\n            *((rcx + rax)) = 0x5c;\n        }\n        rax = r14 + 2;\n        if (rax < r11) {\n            rcx = *((rsp + 0x10));\n            *((rcx + rax)) = 0x27;\n        }\n        r14 += 3;\n        r9d = 0;\n    }\n    eax = 0;\n    r13b = 1;\n    if (*((rsp + 0x26)) != 0) {\n        goto label_1;\n    }\n    goto label_8;\n    r12b = 0x3f;\n    if (r8d == 5) {\n        goto label_41;\n    }\n    if (r8d != 2) {\n        goto label_32;\n    }\n    if (*((rsp + 0xf)) == 0) {\n        goto label_32;\n    }\n    goto label_40;\n    if (r8d != 2) {\n        goto label_42;\n    }\n    if (*((rsp + 0xf)) != 0) {\n        goto label_40;\n    }\n    r12b = 0x5c;\n    eax = 0;\n    goto label_43;\nlabel_27:\n    *((rsp + 0x54)) = esi;\n    *((rsp + 0x50)) = r9d;\n    *((rsp + 0x1a)) = dil;\n    *((rsp + 0x98)) = r11;\n    if (*((rsp + 0xa8)) != 1) {\n        goto label_44;\n    }\n    rax = ctype_b_loc ();\n    r10 = *((rsp + 0x28));\n    rax = *(rax);\n    r13d = *((rax + r12*2));\n    r13d >>= 0xe;\n    r13b &= 1;\n    ebx = 1;\nlabel_7:\n    r13b &= 1;\n    eax = r13d;\n    al |= *((rsp + 0x22));\n    r11 = *((rsp + 0x98));\n    dil = *((rsp + 0x1a));\n    r8 = *((rsp + 0x38));\n    r9d = *((rsp + 0x50));\n    esi = *((rsp + 0x54));\n    if (rbx > 1) {\n        goto label_45;\n    }\n    if (al == 0) {\n        goto label_45;\n    }\n    eax = 0;\n    if (*((rsp + 0x26)) != 0) {\n        goto label_1;\n    }\n    goto label_8;\nlabel_34:\n    if (r15 != 0) {\n        goto label_46;\n    }\n    cl = *((r10 + 1));\n    if (cl != 0) {\n        goto label_46;\n    }\nlabel_33:\n    dl = 1;\n    if (*((rsp + 0x20)) == 0) {\n        goto label_40;\n    }\n    eax = 0;\n    r13b = dl;\n    if (*((rsp + 0x26)) != 0) {\n        goto label_1;\n    }\nlabel_8:\n    if (*((rsp + 0x25)) != 0) {\nlabel_28:\n        edx = 1;\n        ecx = r12d;\n        edx <<= cl;\n        if (sil != 0) {\n            goto label_47;\n        }\n        ecx = r12d;\n        cl >>= 5;\n        ecx = (int32_t) cl;\n        rsi = *((rsp + 0xf0));\n        edx &= *((rsi + rcx*4));\n        ebx = r12d;\n        if (edx == 0) {\n            goto label_10;\n        }\n        goto label_48;\n    }\nlabel_29:\n    ebx = r12d;\n    if (sil != 0) {\n        goto label_48;\n    }\nlabel_10:\n    while ((r9b & 1) != 0) {\n        al &= 1;\n        if (al == 0) {\n            if (r14 < r11) {\n                rax = *((rsp + 0x10));\n                *((rax + r14)) = 0x27;\n            }\n            rax = r14 + 1;\n            if (rax < r11) {\n                rcx = *((rsp + 0x10));\n                *((rcx + rax)) = 0x27;\n            }\n            r14 += 2;\n            r9d = 0;\n        }\nlabel_2:\n        ebx = r12d;\n        if (r14 < r11) {\n            goto label_49;\n        }\n        goto label_50;\nlabel_47:\n        ebx = r12d;\n        if (*((rsp + 0xf)) == 0) {\n            goto label_51;\n        }\n        goto label_31;\nlabel_36:\n        if (*((rsp + 0x88)) != 0) {\n            goto label_52;\n        }\n        r12d = 0;\n        goto label_32;\nlabel_42:\n        cl = 0x5c;\n        if (*((rsp + 0x21)) == 0) {\n            goto label_39;\n        }\n        eax = 0;\n        r12b = 0x5c;\nlabel_43:\n        r13d = 0;\n    }\n    goto label_2;\nlabel_39:\n    ebx = ecx;\n    if (*((rsp + 0x20)) == 0) {\n        goto label_40;\n    }\nlabel_38:\n    eax = 0;\n    r13d = 0;\n    if (*((rsp + 0x1b)) == 0) {\n        goto label_3;\n    }\nlabel_48:\n    if (*((rsp + 0xf)) != 0) {\n        goto label_31;\n    }\nlabel_51:\n    if (r8d == 2) {\n        eax = r9d;\n        al &= 1;\n        if (al != 0) {\n            goto label_53;\n        }\n        if (r14 < r11) {\n            rax = *((rsp + 0x10));\n            *((rax + r14)) = 0x27;\n        }\n        rax = r14 + 1;\n        if (rax < r11) {\n            rcx = *((rsp + 0x10));\n            *((rcx + rax)) = 0x24;\n        }\n        rax = r14 + 2;\n        if (rax < r11) {\n            rcx = *((rsp + 0x10));\n            *((rcx + rax)) = 0x27;\n        }\n        r14 += 3;\n        r9b = 1;\n    }\nlabel_53:\n    if (r14 < r11) {\n        rax = *((rsp + 0x10));\n        *((rax + r14)) = 0x5c;\n    }\n    r14++;\n    if (r14 < r11) {\nlabel_49:\n        rax = *((rsp + 0x10));\n        *((rax + r14)) = bl;\n    }\nlabel_50:\n    r14++;\n    r13b = -r13b;\n    r13b &= dil;\n    edi = r13d;\nlabel_52:\n    r15++;\n    if (rbp != -1) {\n        goto label_4;\n    }\n    goto label_5;\nlabel_44:\n    *((rsp + 0x78)) = 0;\n    if (rbp == -1) {\n        rax = strlen (r10);\n        r10 = *((rsp + 0x28));\n    }\n    rax = r10 + r15;\n    *((rsp + 0x90)) = rax;\n    r13b = 1;\n    ebx = 0;\n    rax = rsp + 0x78;\n    rcx = rax;\n    *((rsp + 0x30)) = rbp;\nlabel_6:\n    *((rsp + 0x58)) = rbx;\n    rbx = rbx + r15;\n    rbp -= rbx;\n    rax = rpl_mbrtowc (rsp + 0x8c, r10 + rbx, rbp);\n    if (rbp == 0) {\n        goto label_54;\n    }\n    rsi = 0x20000002b;\n    if (rbp == -1) {\n        goto label_55;\n    }\n    if (rbp == 0xfffffffffffffffe) {\n        goto label_56;\n    }\n    al = (rbp > 1) ? 1 : 0;\n    al &= *((rsp + 0x23));\n    r10 = *((rsp + 0x28));\n    r11 = *((rsp + 0x98));\n    rbx = *((rsp + 0x58));\n    if (al != 1) {\n        goto label_57;\n    }\n    rax = *((rsp + 0x90));\n    rax = rax + rbx;\n    ecx = 1;\n    do {\n        edx = *((rax + rcx));\n        edx += 0xffffffa5;\n        if (edx <= 0x21) {\n            if (((rsi >> rdx) & 1) < 0) {\n                goto label_58;\n            }\n        }\n        rcx++;\n    } while (rcx < rbp);\nlabel_57:\n    eax = iswprint (*((rsp + 0x8c)));\n    if (eax == 0) {\n        r13d = 0;\n    }\n    rax = rsp + 0x78;\n    rbx += rbp;\n    eax = mbsinit (rax);\n    rcx = rbp;\n    r10 = *((rsp + 0x28));\n    rbp = *((rsp + 0x30));\n    if (eax == 0) {\n        goto label_6;\n    }\n    goto label_7;\nlabel_46:\n    goto label_35;\nlabel_41:\n    if (*((rsp + 0x84)) == 0) {\n        goto label_32;\n    }\n    rcx = r15 + 2;\n    if (rcx >= rbp) {\n        goto label_32;\n    }\n    if (*((r10 + r15 + 1)) != 0x3f) {\n        goto label_32;\n    }\n    edx = *((r10 + rcx));\n    eax = 0;\n    if (edx > 0x3e) {\n        goto label_35;\n    }\n    ebx = esi;\n    rsi = 0x7000a38200000000;\n    if (((rsi >> rdx) & 1) < 0) {\n        if (*((rsp + 0xf)) != 0) {\n            goto label_59;\n        }\n        if (r14 < r11) {\n            rax = *((rsp + 0x10));\n            *((rax + r14)) = 0x3f;\n        }\n        rax = r14 + 1;\n        if (rax < r11) {\n            rsi = *((rsp + 0x10));\n            *((rsi + rax)) = 0x22;\n        }\n        rax = r14 + 2;\n        if (rax < r11) {\n            rsi = *((rsp + 0x10));\n            *((rsi + rax)) = 0x22;\n        }\n        rax = r14 + 3;\n        if (rax < r11) {\n            rsi = *((rsp + 0x10));\n            *((rsi + rax)) = 0x3f;\n        }\n        r14 += 4;\n        eax = 0;\n        r15 = rcx;\n        r12b = dl;\n    }\n    r13d = 0;\n    esi = ebx;\n    if (*((rsp + 0x26)) != 0) {\n        goto label_1;\n    }\n    goto label_8;\nlabel_32:\n    eax = 0;\nlabel_35:\n    r13d = 0;\n    if (*((rsp + 0x26)) != 0) {\n        goto label_1;\n    }\n    goto label_8;\nlabel_45:\n    *((rsp + 0x30)) = al;\n    rbx += r15;\n    eax = 0;\n    if (*((rsp + 0x30)) != 0) {\n        goto label_60;\n    }\n    goto label_61;\nlabel_9:\n    if ((r9b & 1) != 0) {\n        rcx = r8;\n        r8 = rbx;\n        ebx = eax;\n        bl &= 1;\n        if (bl == 0) {\n            *((rsp + 0x54)) = esi;\n            if (r14 < r11) {\n                rsi = *((rsp + 0x10));\n                *((rsi + r14)) = 0x27;\n            }\n            rsi = r14 + 1;\n            if (rsi < r11) {\n                rbx = *((rsp + 0x10));\n                *((rbx + rsi)) = 0x27;\n            }\n            r14 += 2;\n            r9d = 0;\n            esi = *((rsp + 0x54));\n        }\n        rbx = r8;\n        r8 = rcx;\n    }\n    if (r14 >= r11) {\n        goto label_62;\n    }\n    ecx = esi;\n    rsi = *((rsp + 0x10));\n    *((rsi + r14)) = r12b;\n    esi = ecx;\n    while (*((rsp + 0x30)) == 0) {\nlabel_61:\n        if (*((rsp + 0xf)) != 0) {\n            goto label_31;\n        }\n        if (r8d == 2) {\n            eax = r9d;\n            al &= 1;\n            if (al != 0) {\n                goto label_63;\n            }\n            if (r14 < r11) {\n                rax = *((rsp + 0x10));\n                *((rax + r14)) = 0x27;\n            }\n            rax = r14 + 1;\n            if (rax < r11) {\n                rdx = *((rsp + 0x10));\n                *((rdx + rax)) = 0x24;\n            }\n            rax = r14 + 2;\n            if (rax < r11) {\n                rdx = *((rsp + 0x10));\n                *((rdx + rax)) = 0x27;\n            }\n            r14 += 3;\n            r9b = 1;\n        }\nlabel_63:\n        if (r14 < r11) {\n            rax = *((rsp + 0x10));\n            *((rax + r14)) = 0x5c;\n        }\n        rax = r14 + 1;\n        if (rax < r11) {\n            edx = r12d;\n            dl >>= 6;\n            dl |= 0x30;\n            ecx = esi;\n            rsi = *((rsp + 0x10));\n            *((rsi + rax)) = dl;\n            esi = ecx;\n        }\n        rax = r14 + 2;\n        if (rax < r11) {\n            edx = r12d;\n            dl >>= 3;\n            dl &= 7;\n            dl |= 0x30;\n            ecx = esi;\n            rsi = *((rsp + 0x10));\n            *((rsi + rax)) = dl;\n            esi = ecx;\n        }\n        r14 += 3;\n        r12b &= 7;\n        r12b |= 0x30;\n        al = 1;\n        goto label_64;\nlabel_62:\n        r14++;\n        r12b = *((r10 + r15 + 1));\n        r15 = rdx;\n    }\nlabel_60:\n    if ((sil & 1) != 0) {\n        if (r14 < r11) {\n            rdx = *((rsp + 0x10));\n            *((rdx + r14)) = 0x5c;\n        }\n        r14++;\n        esi = 0;\n    }\nlabel_64:\n    rdx = r15 + 1;\n    if (rbx > rdx) {\n        goto label_9;\n    }\n    goto label_10;\nlabel_55:\n    r13d = 0;\nlabel_54:\n    r10 = *((rsp + 0x28));\n    rbp = *((rsp + 0x30));\n    goto label_65;\nlabel_56:\n    rbp = *((rsp + 0x30));\n    r10 = *((rsp + 0x28));\n    if (rbp <= rbx) {\n        goto label_66;\n    }\n    rbx = *((rsp + 0x58));\n    do {\n        rax = *((rsp + 0x90));\n        if (*((rax + rbx)) == 0) {\n            goto label_67;\n        }\n        rax = r15 + rbx + 1;\n        rbx++;\n    } while (rax < rbp);\n    r13d = 0;\n    goto label_7;\nlabel_66:\n    r13d = 0;\nlabel_65:\n    rbx = *((rsp + 0x58));\n    goto label_7;\nlabel_67:\n    r13d = 0;\n    goto label_7;\nlabel_23:\n    goto label_68;\nlabel_24:\nlabel_68:\n    al = (r8d != 2) ? 1 : 0;\n    cl = (r14 != 0) ? 1 : 0;\n    if (*((rsp + 0xf)) != 0) {\n        al |= cl;\n        if (al == 0) {\n            goto label_31;\n        }\n    }\n    *((rsp + 0x30)) = rbp;\n    al = (r8d != 2) ? 1 : 0;\n    cl = (*((rsp + 0xf)) != 0) ? 1 : 0;\n    dl = *((rsp + 0x24));\n    rsi = *((rsp + 0xb0));\n    if ((*((rsp + 0xa0)) & 1) == 0) {\n        goto label_69;\n    }\n    al |= cl;\n    if (al != 0) {\n        goto label_69;\n    }\n    if ((dil & 1) != 0) {\n        goto label_70;\n    }\n    if (*((rsp + 0x60)) == 0) {\n        goto label_69;\n    }\n    r12d = r8d;\n    al = dl;\n    r15d = esi;\n    rbp = *((rsp + 0x60));\n    if (r11 == 0) {\n        goto label_11;\n    }\nlabel_69:\n    rdx = *((rsp + 0x48));\n    if (rdx == 0) {\n        goto label_71;\n    }\n    rcx = *((rsp + 0x10));\n    if (*((rsp + 0xf)) != 0) {\n        goto label_72;\n    }\n    al = *(rdx);\n    if (al == 0) {\n        goto label_72;\n    }\n    rdx++;\n    do {\n        if (r14 < r11) {\n            *((rcx + r14)) = al;\n        }\n        r14++;\n        eax = *(rdx);\n        rdx++;\n    } while (al != 0);\n    goto label_72;\nlabel_40:\n    eax = 2;\nlabel_15:\n    *((rsp + 0x38)) = rax;\nlabel_31:\n    r9d = *((rsp + 0x1c));\n    do {\n        r8d = 4;\n        rax = *((rsp + 0x38));\n        if (*((rsp + 0x1b)) == 0) {\n            r8d = eax;\n        }\n        if (eax != 2) {\n            r8d = eax;\n        }\n        r9d &= 0xfffffffd;\n        rax = quotearg_buffer_restyled (*((rsp + 0x18)), r11, r10, rbp, r8, r9);\n        goto label_12;\nlabel_13:\n        r14 = rax;\nlabel_14:\n        return rax;\nlabel_58:\n        eax = 2;\n        *((rsp + 0x38)) = rax;\n        r9d = *((rsp + 0x1c));\n        rbp = *((rsp + 0x30));\n    } while (1);\nlabel_70:\n    quotearg_buffer_restyled (*((rsp + 0x18)), *((rsp + 0x68)), *((rsp + 0x30)), *((rsp + 0x38)), 5, *((rsp + 0x24)));\n    goto label_12;\n    goto label_13;\nlabel_71:\n    rcx = *((rsp + 0x10));\nlabel_72:\n    if (r14 >= r11) {\n        goto label_14;\n    }\n    *((rcx + r14)) = 0;\n    goto label_14;\nlabel_59:\n    eax = 5;\n    goto label_15;\nlabel_16:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_alloc",
            "funcStartAddr": "403960",
            "funcEndAddr": "403a21",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403960 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_alloc (char const * arg, int64_t arg1, int64_t arg2, char * buf, size_t n, quoting_options const * o, quoting_options const * p) {\n    int32_t flags;\n    int32_t e;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    r12 = arg;\n    rdi = arg1;\n    rsi = arg2;\n    r13 = buf;\n    rbx = n;\n    rdx = o;\n    r14 = p;\n    /* char * quotearg_alloc(char const * arg,size_t argsize,quoting_options const * o); */\n    rbx = rsi;\n    *((rsp + 8)) = rbx;\n    r12 = rdi;\n    r14d = default_quoting_options;\n    if (rdx != 0) {\n        r14 = rdx;\n    }\n    rax = errno_location ();\n    *((rsp + 0x10)) = rax;\n    ecx = *(rax);\n    *((rsp + 4)) = ecx;\n    ebp = *((r14 + 4));\n    ebp |= 1;\n    r15 = r14 + 8;\n    rax = quotearg_buffer_restyled (0, 0, r12, rbx, *(r14), ebp);\n    rbx = rax;\n    rbx++;\n    rax = xmalloc (rbx);\n    r13 = rax;\n    quotearg_buffer_restyled (r13, rbx, r12, *((rsp + 0x10)), *(r14), ebp);\n    eax = *((rsp + 4));\n    rcx = *((rsp + 0x10));\n    *(rcx) = eax;\n    rax = r13;\n    return rax;\n}\n"
        },
        {
            "funcName": "sym.quotearg_alloc_mem",
            "funcStartAddr": "403a30",
            "funcEndAddr": "403b1c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403a30 */\n#include <stdint.h>\n \nuint64_t quotearg_alloc_mem (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rbx = rdx;\n    *((rsp + 0x18)) = rbx;\n    r14 = rsi;\n    *((rsp + 0x10)) = r14;\n    r15 = rdi;\n    *((rsp + 8)) = r15;\n    r12d = default_quoting_options;\n    if (rcx != 0) {\n        r12 = rcx;\n    }\n    rax = errno_location ();\n    *((rsp + 0x20)) = rax;\n    ecx = *(rax);\n    *((rsp + 4)) = ecx;\n    ebp = 0;\n    bpl = (rbx == 0) ? 1 : 0;\n    ebp |= *((r12 + 4));\n    r13 = r12 + 8;\n    rax = quotearg_buffer_restyled (0, 0, r15, r14, *(r12), ebp);\n    rbx = rax;\n    r15 = rbx + 1;\n    rax = xmalloc (r15);\n    r14 = rax;\n    quotearg_buffer_restyled (r14, r15, *((rsp + 0x10)), *((rsp + 0x18)), *(r12), ebp);\n    rax = *((rsp + 0x38));\n    ecx = *((rsp + 4));\n    rdx = *((rsp + 0x20));\n    *(rdx) = ecx;\n    if (rax != 0) {\n        *(rax) = rbx;\n    }\n    rax = r14;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.quotearg_free",
            "funcStartAddr": "403b20",
            "funcEndAddr": "403bb1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403b20 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_free (slotvec * sv) {\n    r14 = sv;\n    /* void quotearg_free(); */\n    r14 = slotvec;\n    if (*(obj.nslots) < 2) {\n        goto label_0;\n    }\n    r15 = r14 + 0x18;\n    ebx = 1;\n    do {\n        free (*(r15));\n        rbx++;\n        rax = *(obj.nslots);\n        r15 += 0x10;\n    } while (rbx < rax);\nlabel_0:\n    rdi = *((r14 + 8));\n    eax = slot0;\n    if (rdi != rax) {\n        free (rdi);\n        *(obj.slotvec0) = 0x100;\n        *(obj.slot0) = 0x409290;\n    }\n    eax = slotvec0;\n    if (r14 != rax) {\n        free (r14);\n        *(obj.slotvec) = 0x409198;\n    }\n    *(obj.nslots) = 1;\n    return rax;\n}\n"
        },
        {
            "funcName": "sym.quotearg_n",
            "funcStartAddr": "403bc0",
            "funcEndAddr": "403bce",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403bc0 */\n#include <stdint.h>\n \nvoid quotearg_n (int64_t arg_8h, int64_t arg1, int64_t arg2) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = 0xffffffffffffffff;\n    ecx = default_quoting_options;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_n_options",
            "funcStartAddr": "403bd0",
            "funcEndAddr": "403d8d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403bd0 */\n#include <stdint.h>\n \nuint64_t dbg_quotearg_n_options (int64_t arg_8h, char const * arg, int64_t arg1, int64_t arg3, int64_t arg4, int32_t e, int32_t flags, size_t n, quoting_options const * options, char * val) {\n    slotvec * sv;\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rsi = arg;\n    rdi = arg1;\n    rdx = arg3;\n    rcx = arg4;\n    rax = e;\n    r9 = flags;\n    r15 = n;\n    rbx = options;\n    r14 = val;\n    /* char * quotearg_n_options(int n,char const * arg,size_t argsize,quoting_options const * options); */\n    rbx = rcx;\n    r15 = rdx;\n    *((rsp + 0x20)) = rsi;\n    r12d = edi;\n    rax = errno_location ();\n    r13 = rax;\n    if (r12d >= 0) {\n        eax = *(r13);\n        rbp = slotvec;\n        *((rsp + 0x18)) = r13;\n        *(rsp) = eax;\n        *((rsp + 0x10)) = rbx;\n        *((rsp + 8)) = r15;\n        if (*(obj.nslots) <= r12d) {\n            if (r12d == 0x7fffffff) {\n                goto label_0;\n            }\n            ebx = slotvec0;\n            edi = 0;\n            if (rbp != rbx) {\n                rdi = rbp;\n            }\n            r15d = r12 + 1;\n            rsi = (int64_t) r12d;\n            rsi <<= 4;\n            rsi += 0x10;\n            rax = xrealloc ();\n            r14 = rax;\n            *(obj.slotvec) = r14;\n            if (rbp == rbx) {\n                __asm (\"movups xmm0, xmmword [obj.slotvec0]\");\n                __asm (\"movups xmmword [r14], xmm0\");\n            }\n            rax = *(obj.nslots);\n            rbp = (int64_t) r15d;\n            rdx -= rax;\n            rax <<= 4;\n            rdi += rax;\n            rdx <<= 4;\n            memset (r14, 0, rbp);\n            *(obj.nslots) = ebp;\n            rbx = *((rsp + 0x10));\n            r15 = *((rsp + 8));\n        }\n        r13 = (int64_t) r12d;\n        r13 <<= 4;\n        r12 = *((rbp + r13));\n        r14 = *((rbp + r13 + 8));\n        r9d |= 1;\n        rax = rbx + 8;\n        *((rsp + 0xc)) = r9d;\n        rbx = rax;\n        rax = quotearg_buffer_restyled (r14, r12, *((rsp + 0x28)), r15, *(rbx), *((rbx + 4)));\n        r15 = rax;\n        if (r12 > r15) {\n            rax = *((rsp + 0x18));\n            ebp = *(rsp);\n        } else {\n            rax = rbp + r13;\n            r12 = rbp + r13 + 8;\n            r15++;\n            *(rax) = r15;\n            eax = slot0;\n            ebp = *(rsp);\n            if (r14 != rax) {\n                free (r14);\n            }\n            rax = xmalloc (r15);\n            r14 = rax;\n            *(r12) = r14;\n            rax = *((rsp + 0x10));\n            quotearg_buffer_restyled (r14, r15, *((rsp + 0x28)), *((rsp + 0x10)), *(rax), *((rsp + 0xc)));\n            rax = *((rsp + 0x18));\n        }\n        *(rax) = ebp;\n        rax = r14;\n        return rax;\n    }\n    abort ();\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "sym.quotearg_n_mem",
            "funcStartAddr": "403d90",
            "funcEndAddr": "403d9a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403d90 */\n#include <stdint.h>\n \nvoid quotearg_n_mem (int64_t arg_8h, int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = default_quoting_options;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg",
            "funcStartAddr": "403da0",
            "funcEndAddr": "403db9",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403da0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg (int64_t arg_8h, char const * arg, int64_t arg1) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rax = arg;\n    rdi = arg1;\n    /* char * quotearg(char const * arg); */\n    rax = rdi;\n    edi = 0;\n    rdx = 0xffffffffffffffff;\n    ecx = default_quoting_options;\n    rsi = rax;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_mem",
            "funcStartAddr": "403dc0",
            "funcEndAddr": "403dd8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403dc0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_mem (int64_t arg_8h, char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    /* char * quotearg_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    edi = 0;\n    ecx = default_quoting_options;\n    rsi = rdx;\n    rdx = rax;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "sym.quotearg_n_style",
            "funcStartAddr": "403de0",
            "funcEndAddr": "403e4c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403de0 */\n#include <stdint.h>\n \nint64_t quotearg_n_style (int64_t arg1, uint32_t arg2, int64_t arg3) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rax = rdx;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        *((rsp + 0x40)) = esi;\n        ecx = *((rsp + 0x30));\n        *((rsp + 0x74)) = ecx;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        quotearg_n_options (rdi, rax, 0xffffffffffffffff, rsp + 0x40);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "sym.quotearg_n_style_mem",
            "funcStartAddr": "403e50",
            "funcEndAddr": "403eb8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403e50 */\n#include <stdint.h>\n \nuint64_t quotearg_n_style_mem (int64_t arg1, uint32_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        *((rsp + 0x40)) = esi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        rax = rsp + 0x40;\n        quotearg_n_options (rdi, rdx, rcx, rax);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_style",
            "funcStartAddr": "403ec0",
            "funcEndAddr": "403f28",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403ec0 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_style (char const * arg, quoting_style style) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rsi = arg;\n    rdi = style;\n    /* char * quotearg_style(quoting_style s,char const * arg); */\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (edi != 0xa) {\n        *((rsp + 0x40)) = edi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        quotearg_n_options (0, rsi, 0xffffffffffffffff, rsp + 0x40);\n        return eax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_style_mem",
            "funcStartAddr": "403f30",
            "funcEndAddr": "403f91",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403f30 */\n#include <stdint.h>\n \nint32_t dbg_quotearg_style_mem (char const * arg, size_t argsize, quoting_style style) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    uint32_t var_40h;\n    int64_t var_44h;\n    int64_t var_54h;\n    int64_t var_64h;\n    int64_t var_74h;\n    rsi = arg;\n    rdx = argsize;\n    rdi = style;\n    /* char * quotearg_style_mem(quoting_style s,char const * arg,size_t argsize); */\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (edi != 0xa) {\n        *((rsp + 0x40)) = edi;\n        eax = *((rsp + 0x30));\n        *((rsp + 0x74)) = eax;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        __asm (\"movups xmmword [rsp + 0x64], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x54], xmm1\");\n        __asm (\"movups xmmword [rsp + 0x44], xmm0\");\n        quotearg_n_options (0, rsi, rdx, rsp + 0x40);\n        return eax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "sym.quotearg_char_mem",
            "funcStartAddr": "403fa0",
            "funcEndAddr": "40400d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x403fa0 */\n#include <stdint.h>\n \nint32_t quotearg_char_mem (int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = edx;\n    r8 = rsi;\n    rdx = rdi;\n    rsi = .comment;\n    *((rsp + 0x30)) = rsi;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    eax = ecx;\n    al >>= 5;\n    eax = (int32_t) al;\n    esi = *((rsp + rax*4 + 8));\n    edi = *((rsp + rax*4 + 8));\n    edi >>= cl;\n    edi = ~edi;\n    edi &= 1;\n    edi <<= cl;\n    edi ^= esi;\n    *((rsp + rax*4 + 8)) = edi;\n    quotearg_n_options (0, rdx, r8, rsp);\n    return eax;\n}\n"
        },
        {
            "funcName": "sym.quotearg_char",
            "funcStartAddr": "404010",
            "funcEndAddr": "40407e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404010 */\n#include <stdint.h>\n \nint64_t quotearg_char (int64_t arg1, int64_t arg2) {\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    ecx = esi;\n    rax = rdi;\n    rdx = .comment;\n    *((rsp + 0x30)) = rdx;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    edx = ecx;\n    dl >>= 5;\n    edx = (int32_t) dl;\n    esi = *((rsp + rdx*4 + 8));\n    edi = *((rsp + rdx*4 + 8));\n    edi >>= cl;\n    edi = ~edi;\n    edi &= 1;\n    edi <<= cl;\n    edi ^= esi;\n    *((rsp + rdx*4 + 8)) = edi;\n    quotearg_n_options (0, rax, 0xffffffffffffffff, rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.quotearg_colon",
            "funcStartAddr": "404080",
            "funcEndAddr": "4040d4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404080 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_colon (char const * arg, int64_t arg1, quoting_options * o) {\n    quoting_options options;\n    int64_t var_fh;\n    int64_t var_10h;\n    int64_t var_20h;\n    rax = arg;\n    rdi = arg1;\n    rcx = o;\n    /* char * quotearg_colon(char const * arg); */\n    rax = rdi;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    quotearg_n_options (0, rax, 0xffffffffffffffff, rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.quotearg_colon_mem",
            "funcStartAddr": "4040e0",
            "funcEndAddr": "404133",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4040e0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_colon_mem (char const * arg, int64_t arg1, int64_t arg2, size_t argsize, quoting_options * o) {\n    quoting_options options;\n    int64_t var_fh;\n    int64_t var_10h;\n    int64_t var_20h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    rcx = o;\n    /* char * quotearg_colon_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    quotearg_n_options (0, rdx, rax, rsp);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.quotearg_n_style_colon",
            "funcStartAddr": "404140",
            "funcEndAddr": "4041d4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404140 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_n_style_colon (char const * arg, int64_t arg3, int32_t n, quoting_options * o, quoting_style style) {\n    quoting_options options;\n    int64_t var_fh;\n    int64_t var_10h;\n    int64_t var_14h;\n    int64_t var_20h;\n    int64_t var_24h;\n    int64_t var_34h;\n    int64_t var_40h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    rax = arg;\n    rdx = arg3;\n    rdi = n;\n    rcx = o;\n    rsi = style;\n    /* char * quotearg_n_style_colon(int n,quoting_style s,char const * arg); */\n    rax = rdx;\n    __asm (\"xorps xmm0, xmm0\");\n    *((rsp + 0x20)) = xmm0;\n    *((rsp + 0x10)) = xmm0;\n    *(rsp) = xmm0;\n    *((rsp + 0x30)) = 0;\n    if (esi != 0xa) {\n        ecx = *((rsp + 0x30));\n        *((rsp + 0x70)) = ecx;\n        xmm0 = *(rsp);\n        xmm1 = *((rsp + 0x10));\n        xmm2 = *((rsp + 0x20));\n        *((rsp + 0x60)) = xmm2;\n        *((rsp + 0x50)) = xmm1;\n        *((rsp + 0x40)) = xmm0;\n        *(rsp) = esi;\n        ecx = *((rsp + 0x70));\n        *((rsp + 0x34)) = ecx;\n        xmm0 = *((rsp + 0x40));\n        xmm1 = *((rsp + 0x50));\n        xmm2 = *((rsp + 0x60));\n        __asm (\"movups xmmword [rsp + 0x24], xmm2\");\n        __asm (\"movups xmmword [rsp + 0x14], xmm1\");\n        __asm (\"movups xmmword [rsp + 4], xmm0\");\n        quotearg_n_options (rdi, rax, 0xffffffffffffffff, rsp);\n        return rax;\n    }\n    return abort ();\n}\n"
        },
        {
            "funcName": "sym.quotearg_n_custom",
            "funcStartAddr": "4041e0",
            "funcEndAddr": "40424d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4041e0 */\n#include <stdint.h>\n \nint64_t quotearg_n_custom (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rsi != 0) {\n        if (rdx == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rsi;\n        *((rsp + 0x30)) = rdx;\n        rax = rsp;\n        quotearg_n_options (rdi, rcx, 0xffffffffffffffff, rax);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "sym.quotearg_n_custom_mem",
            "funcStartAddr": "404250",
            "funcEndAddr": "4042b9",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404250 */\n#include <stdint.h>\n \nint64_t quotearg_n_custom_mem (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5) {\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rcx = arg4;\n    r8 = arg5;\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rsi != 0) {\n        if (rdx == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rsi;\n        *((rsp + 0x30)) = rdx;\n        rax = rsp;\n        quotearg_n_options (rdi, rcx, r8, rax);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_custom",
            "funcStartAddr": "4042c0",
            "funcEndAddr": "40432f",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4042c0 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_custom (char const * arg, int64_t arg3, char const * left_quote, char const * right_quote) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    rax = arg;\n    rdx = arg3;\n    rdi = left_quote;\n    rsi = right_quote;\n    /* char * quotearg_custom(char const * left_quote,char const * right_quote,char const * arg); */\n    rax = rdx;\n    rcx = .comment;\n    *((rsp + 0x30)) = rcx;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rdi != 0) {\n        if (rsi == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rdi;\n        *((rsp + 0x30)) = rsi;\n        quotearg_n_options (0, rax, 0xffffffffffffffff, rsp);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.quotearg_custom_mem",
            "funcStartAddr": "404330",
            "funcEndAddr": "40439b",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404330 */\n#include <stdint.h>\n \nint64_t dbg_quotearg_custom_mem (char const * arg, size_t argsize, char const * left_quote, char const * right_quote) {\n    quoting_options o;\n    int64_t var_10h;\n    int64_t var_20h;\n    rdx = arg;\n    rcx = argsize;\n    rdi = left_quote;\n    rsi = right_quote;\n    /* char * quotearg_custom_mem(char const * left_quote,char const * right_quote,char const * arg,size_t argsize); */\n    rax = .comment;\n    *((rsp + 0x30)) = rax;\n    __asm (\"movups xmm0, xmmword [0x00409270]\");\n    *((rsp + 0x20)) = xmm0;\n    __asm (\"movups xmm0, xmmword [0x00409260]\");\n    *((rsp + 0x10)) = xmm0;\n    __asm (\"movups xmm0, xmmword [obj.default_quoting_options]\");\n    *(rsp) = xmm0;\n    *(rsp) = 0xa;\n    if (rdi != 0) {\n        if (rsi == 0) {\n            goto label_0;\n        }\n        *((rsp + 0x28)) = rdi;\n        *((rsp + 0x30)) = rsi;\n        rax = rsp;\n        quotearg_n_options (0, rdx, rcx, rax);\n        return rax;\n    }\nlabel_0:\n    return abort ();\n}\n"
        },
        {
            "funcName": "sym.quote_n_mem",
            "funcStartAddr": "4043a0",
            "funcEndAddr": "4043aa",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4043a0 */\n#include <stdint.h>\n \nvoid quote_n_mem (int64_t arg_8h, int64_t arg1, int64_t arg2, int64_t arg3) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    ecx = quote_quoting_options;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "dbg.quote_mem",
            "funcStartAddr": "4043b0",
            "funcEndAddr": "4043c8",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4043b0 */\n#include <stdint.h>\n \nint64_t dbg_quote_mem (int64_t arg_8h, char const * arg, int64_t arg1, int64_t arg2, size_t argsize) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdx = arg;\n    rdi = arg1;\n    rsi = arg2;\n    rax = argsize;\n    /* char const * quote_mem(char const * arg,size_t argsize); */\n    rax = rsi;\n    rdx = rdi;\n    edi = 0;\n    ecx = quote_quoting_options;\n    rsi = rdx;\n    rdx = rax;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "sym.quote_n",
            "funcStartAddr": "4043d0",
            "funcEndAddr": "4043e1",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4043d0 */\n#include <stdint.h>\n \nvoid quote_n (int64_t arg_8h, int64_t arg1, int64_t arg2) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = 0xffffffffffffffff;\n    ecx = quote_quoting_options;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "dbg.quote",
            "funcStartAddr": "4043f0",
            "funcEndAddr": "404409",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4043f0 */\n#include <stdint.h>\n \nint64_t dbg_quote (int64_t arg_8h, char const * arg, int64_t arg1) {\n    int64_t var_ch;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    rax = arg;\n    rdi = arg1;\n    /* char const * quote(char const * arg); */\n    rax = rdi;\n    edi = 0;\n    rdx = 0xffffffffffffffff;\n    ecx = quote_quoting_options;\n    rsi = rax;\n    return void (*0x403bd0)() ();\n}\n"
        },
        {
            "funcName": "dbg.gettext_quote",
            "funcStartAddr": "404410",
            "funcEndAddr": "4044d5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404410 */\n#include <stdint.h>\n \nuint64_t dbg_gettext_quote (int64_t arg1, int64_t arg2, char const * locale_code, char const * msgid) {\n    quoting_style s;\n    rdi = arg1;\n    rsi = arg2;\n    rax = locale_code;\n    rbx = msgid;\n    /* char const * gettext_quote(char const * msgid,quoting_style s); */\n    rbx = rdi;\n    edx = 5;\n    rax = dcgettext (0, rbx);\n    if (rax != rbx) {\n        goto label_0;\n    }\n    rax = locale_charset ();\n    ecx = *(rax);\n    ecx &= 0xffffffdf;\n    if (ecx != 0x47) {\n        if (ecx == 0x55) {\n            ecx = *((rax + 1));\n            ecx &= 0xffffffdf;\n            if (ecx != 0x54) {\n                goto label_1;\n            }\n            ecx = *((rax + 2));\n            ecx &= 0xffffffdf;\n            if (ecx != 0x46) {\n                goto label_1;\n            }\n            if (*((rax + 3)) != 0x2d) {\n                goto label_1;\n            }\n            if (*((rax + 4)) != 0x38) {\n                goto label_1;\n            }\n            if (*((rax + 5)) != 0) {\n                goto label_1;\n            }\n            ecx = 0x40687c;\n            eax = 0x406880;\n        } else {\n            ecx = *((rax + 1));\n            ecx &= 0xffffffdf;\n            if (ecx != 0x42) {\n                goto label_1;\n            }\n            if (*((rax + 2)) != 0x31) {\n                goto label_1;\n            }\n            if (*((rax + 3)) != 0x38) {\n                goto label_1;\n            }\n            if (*((rax + 4)) != 0x30) {\n                goto label_1;\n            }\n            if (*((rax + 5)) != 0x33) {\n                goto label_1;\n            }\n            if (*((rax + 6)) != 0x30) {\n                goto label_1;\n            }\n            if (*((rax + 7)) == 0) {\n                goto label_2;\n            }\n        }\nlabel_1:\n        ecx = 0x406876;\n        eax = 0x40687a;\n    }\n    if (ebp == 9) {\n        do {\n            rax = rcx;\n        }\nlabel_0:\n        return rax;\nlabel_2:\n        ecx = 0x406884;\n        eax = 0x406888;\n    } while (1);\n}\n"
        },
        {
            "funcName": "dbg.version_etc_arn",
            "funcStartAddr": "4044e0",
            "funcEndAddr": "404838",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4044e0 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc_arn (int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg5, char const * const * authors, char const * command_name, size_t n_authors, char const * package, FILE * stream, char const * version) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r8 = arg5;\n    r15 = authors;\n    rcx = command_name;\n    r12 = n_authors;\n    rbx = package;\n    r14 = stream;\n    r9 = version;\n    /* void version_etc_arn(FILE * stream,char const * command_name,char const * package,char const * version,char const * const * authors,size_t n_authors); */\n    r12 = r9;\n    r15 = r8;\n    r9 = rcx;\n    rbx = rdx;\n    rcx = rsi;\n    r14 = rdi;\n    esi = 1;\n    if (rcx != 0) {\n        edx = \"%s (%s) %s\\n\";\n        eax = 0;\n        rdi = r14;\n        r8 = rbx;\n        eax = fprintf_chk ();\n    } else {\n        edx = \"%s %s\\n\";\n        eax = 0;\n        rdi = r14;\n        rcx = rbx;\n        r8 = r9;\n        fprintf_chk ();\n    }\n    edx = 5;\n    rax = dcgettext (0, 0x4068f3);\n    rcx = rax;\n    esi = 1;\n    edx = \"Copyright %s %d Free Software Foundation, Inc.\";\n    r8d = 0x7e3;\n    eax = 0;\n    rdi = r14;\n    fprintf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"\\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\\nThis is free software: you are free to change and redistribute it.\\nThere is NO WARRANTY, to the extent permitted by law.\\n\\n\");\n    rdi = rax;\n    rsi = r14;\n    fputs_unlocked ();\n    if (r12 <= 9) {\n        /* switch table (10 cases) at 0x406890 */\n    } else {\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, %s, and others.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x402290)() ();\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x402290)() ();\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        void (*0x402290)() ();\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\nand %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\n%s, and %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n        goto label_0;\n        edx = 5;\n        rax = dcgettext (0, \"Written by %s, %s, %s,\\n%s, %s, %s, %s,\\nand %s.\\n\");\n        rdx = rax;\n        rcx = *(r15);\n        r8 = *((r15 + 8));\n        r9 = *((r15 + 0x10));\n        esi = 1;\n        eax = 0;\n        rdi = r14;\n        fprintf_chk ();\n    }\nlabel_0:\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.version_etc_ar",
            "funcStartAddr": "404840",
            "funcEndAddr": "404861",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404840 */\n#include <stdint.h>\n \nvoid dbg_version_etc_ar (char const * const * authors, char const * command_name, char const * package, FILE * stream, char const * version) {\n    r8 = authors;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc_ar(FILE * stream,char const * command_name,char const * package,char const * version,char const * const * authors); */\n    r9 = 0xffffffffffffffff;\n    do {\n        r9 = r9 + 1;\n    } while (*((r8 + r9*8 + 8)) != 0);\n    return void (*0x4044e0)() ();\n}\n"
        },
        {
            "funcName": "dbg.version_etc_va",
            "funcStartAddr": "404870",
            "funcEndAddr": "404a5e",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404870 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc_va (__va_list_tag * authors, char const * command_name, char const * package, FILE * stream, char const * version) {\n    char const *[11] authtab;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_18h;\n    int64_t var_20h;\n    int64_t var_28h;\n    int64_t var_30h;\n    int64_t var_38h;\n    int64_t var_40h;\n    int64_t var_48h;\n    r8 = authors;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc_va(FILE * stream,char const * command_name,char const * package,char const * version,__va_list_tag * authors); */\n    r9 = *(r8);\n    if (r9 <= 0x28) {\n        r10 = r9;\n        r10 += *((r8 + 0x10));\n        r9d = r9 + 8;\n        *(r8) = r9d;\n    } else {\n        r10 = *((r8 + 8));\n        rax = r10 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r10);\n    *(rsp) = rax;\n    if (rax != 0) {\n        if (r9d < 0x29) {\n            r10 = (int64_t) r9d;\n            r10 += *((r8 + 0x10));\n            r9d += 8;\n            *(r8) = r9d;\n        } else {\n            r9d = 0;\n            goto label_0;\n        }\n        r10 = *((r8 + 8));\n        rax = r10 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r10);\n    *((rsp + 8)) = rax;\n    if (rax != 0) {\n        if (r9d < 0x29) {\n            r10 = (int64_t) r9d;\n            r10 += *((r8 + 0x10));\n            r9d += 8;\n            *(r8) = r9d;\n        } else {\n            r9d = 1;\n            goto label_0;\n        }\n        r10 = *((r8 + 8));\n        rax = r10 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r10);\n    *((rsp + 0x10)) = rax;\n    if (rax != 0) {\n        if (r9d < 0x29) {\n            r10 = (int64_t) r9d;\n            r10 += *((r8 + 0x10));\n            r9d += 8;\n            *(r8) = r9d;\n        } else {\n            r9d = 2;\n            goto label_0;\n        }\n        r10 = *((r8 + 8));\n        rax = r10 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r10);\n    *((rsp + 0x18)) = rax;\n    if (rax != 0) {\n        if (r9d < 0x29) {\n            r10 = (int64_t) r9d;\n            r10 += *((r8 + 0x10));\n            r9d += 8;\n            *(r8) = r9d;\n        } else {\n            r9d = 3;\n            goto label_0;\n        }\n        r10 = *((r8 + 8));\n        rax = r10 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r10);\n    *((rsp + 0x20)) = rax;\n    if (rax != 0) {\n        if (r9d < 0x29) {\n            r10 = (int64_t) r9d;\n            r10 += *((r8 + 0x10));\n            r9d += 8;\n            *(r8) = r9d;\n        } else {\n            r9d = 4;\n            goto label_0;\n        }\n        r10 = *((r8 + 8));\n        rax = r10 + 8;\n        *((r8 + 8)) = rax;\n    }\n    rax = *(r10);\n    *((rsp + 0x28)) = rax;\n    if (rax != 0) {\n        r9 = *((r8 + 8));\n        rax = r9 + 8;\n        *((r8 + 8)) = rax;\n        rax = *(r9);\n        *((rsp + 0x30)) = rax;\n        if (rax != 0) {\n            r9 = *((r8 + 8));\n            rax = r9 + 8;\n            *((r8 + 8)) = rax;\n            rax = *(r9);\n            *((rsp + 0x38)) = rax;\n            if (rax != 0) {\n                r9 = *((r8 + 8));\n                rax = r9 + 8;\n                *((r8 + 8)) = rax;\n                rax = *(r9);\n                *((rsp + 0x40)) = rax;\n                if (rax != 0) {\n                    r9 = *((r8 + 8));\n                    rax = r9 + 8;\n                    *((r8 + 8)) = rax;\n                    rax = *(r9);\n                    *((rsp + 0x48)) = rax;\n                    r9d = 9;\n                    r9 -= 0xffffffffffffffff;\n                } else {\n                    r9d = 5;\n                } else {\n                    r9d = 6;\n                }\n            } else {\n                r9d = 7;\n            }\n        } else {\n            r9d = 8;\n        }\n    }\nlabel_0:\n    r8 = rsp;\n    version_etc_arn (rdi, rsi, rdx, rcx);\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.version_etc",
            "funcStartAddr": "404a60",
            "funcEndAddr": "404ae2",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404a60 */\n#include <stdint.h>\n \nuint64_t dbg_version_etc (int64_t arg_e0h, int64_t arg10, int64_t arg11, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, char const * command_name, char const * package, FILE * stream, char const * version) {\n    va_list authors;\n    int64_t var_4h;\n    int64_t var_8h;\n    int64_t var_10h;\n    int64_t var_20h;\n    int64_t var_40h;\n    int64_t var_48h;\n    int64_t var_50h;\n    int64_t var_60h;\n    int64_t var_70h;\n    int64_t var_80h;\n    int64_t var_90h;\n    int64_t var_a0h;\n    int64_t var_b0h;\n    int64_t var_c0h;\n    xmm3 = arg10;\n    xmm4 = arg11;\n    r8 = arg5;\n    r9 = arg6;\n    xmm0 = arg7;\n    xmm1 = arg8;\n    xmm2 = arg9;\n    rsi = command_name;\n    rdx = package;\n    rdi = stream;\n    rcx = version;\n    /* void version_etc(FILE * stream,char const * command_name,char const * package,char const * version,va_args ...); */\n    if (al != 0) {\n        *((rsp + 0x50)) = xmm0;\n        *((rsp + 0x60)) = xmm1;\n        *((rsp + 0x70)) = xmm2;\n        *((rsp + 0x80)) = xmm3;\n        *((rsp + 0x90)) = xmm4;\n        *((rsp + 0xa0)) = xmm5;\n        *((rsp + 0xb0)) = xmm6;\n        *((rsp + 0xc0)) = xmm7;\n    }\n    *((rsp + 0x48)) = r9;\n    *((rsp + 0x40)) = r8;\n    rax = rsp + 0x20;\n    *((rsp + 0x10)) = rax;\n    rax = rsp + 0xe0;\n    *((rsp + 8)) = rax;\n    *((rsp + 4)) = 0x30;\n    *(rsp) = 0x20;\n    r8 = rsp;\n    version_etc_va ();\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.emit_bug_reporting_address",
            "funcStartAddr": "404af0",
            "funcEndAddr": "404b64",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404af0 */\n#include <stdint.h>\n \nvoid dbg_emit_bug_reporting_address (void) {\n    /* void emit_bug_reporting_address(); */\n    edx = 5;\n    rax = dcgettext (0, \"\\nReport bugs to: %s\\n\");\n    rcx = rax;\n    edi = 1;\n    edx = \"bug-coreutils@gnu.org\";\n    eax = 0;\n    rsi = rcx;\n    printf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"%s home page: <%s>\\n\");\n    rsi = rax;\n    edi = 1;\n    edx = \"GNU coreutils\";\n    ecx = \"https://www.gnu.org/software/coreutils/\";\n    eax = 0;\n    printf_chk ();\n    edx = 5;\n    rax = dcgettext (0, \"General help using GNU software: <https://www.gnu.org/gethelp/>\\n\");\n    rsi = stdout;\n    rdi = rax;\n    return fputs_unlocked ();\n}\n"
        },
        {
            "funcName": "dbg.xnmalloc",
            "funcStartAddr": "404b70",
            "funcEndAddr": "404ba5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404b70 */\n#include <stdint.h>\n \nint64_t dbg_xnmalloc (uint32_t arg1, int64_t arg2, size_t n, void * p) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = n;\n    rax = p;\n    /* void * xnmalloc(size_t n,size_t s); */\n    rbx = rsi;\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rbx;\n    rdx = rdx:rax % rbx;\n    if (rax >= rdi) {\n        rbx *= rdi;\n        rax = malloc (rbx);\n        if (rbx != 0) {\n            if (rax == 0) {\n                goto label_0;\n            }\n        }\n        return rax;\n    }\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "sym.xmalloc",
            "funcStartAddr": "404bb0",
            "funcEndAddr": "404bca",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404bb0 */\n#include <stdint.h>\n \nuint64_t xmalloc (size_t size) {\n    rdi = size;\n    rbx = rdi;\n    rax = malloc (rdi);\n    if (rbx != 0) {\n        if (rax == 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.xnrealloc",
            "funcStartAddr": "404bd0",
            "funcEndAddr": "404c18",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404bd0 */\n#include <stdint.h>\n \nint64_t dbg_xnrealloc (int64_t arg1, uint32_t arg2, int64_t arg3, size_t n, void * p) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = n;\n    rax = p;\n    /* void * xnrealloc(void * p,size_t n,size_t s); */\n    rbx = rdx;\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rbx;\n    rdx = rdx:rax % rbx;\n    if (rax >= rsi) {\n        rbx *= rsi;\n        if (rdi != 0) {\n            if (rbx != 0) {\n                goto label_0;\n            }\n            eax = free (rdi);\n            eax = 0;\n            return rax;\n        }\nlabel_0:\n        rax = realloc (rdi, rbx);\n        if (rbx != 0) {\n            if (rax == 0) {\n                goto label_1;\n            }\n        }\n        return rax;\n    }\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "sym.xrealloc",
            "funcStartAddr": "404c20",
            "funcEndAddr": "404c50",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404c20 */\n#include <stdint.h>\n \nuint64_t xrealloc (int64_t arg1, int64_t arg2) {\n    rdi = arg1;\n    rsi = arg2;\n    rbx = rsi;\n    if (rdi != 0) {\n        if (rbx != 0) {\n            goto label_0;\n        }\n        eax = free (rdi);\n        eax = 0;\n        return eax;\n    }\nlabel_0:\n    rax = realloc (rdi, rbx);\n    if (rbx != 0) {\n        if (rax == 0) {\n            goto label_1;\n        }\n    }\n    return rax;\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "sym.x2nrealloc",
            "funcStartAddr": "404c50",
            "funcEndAddr": "404ce7",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404c50 */\n#include <stdint.h>\n \nint64_t x2nrealloc (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = rdx;\n    rcx = *(rsi);\n    if (rdi != 0) {\n        rax = 0x5555555555555554;\n        edx = 0;\n        rax = rdx:rax / rbx;\n        rdx = rdx:rax % rbx;\n        if (rax <= rcx) {\n            goto label_0;\n        }\n        rax = rcx;\n        rax >>= 1;\n        rcx = rcx + rax + 1;\n    } else {\n        if (rcx == 0) {\n            eax = 0x80;\n            edx = 0;\n            rax = rdx:rax / rbx;\n            rdx = rdx:rax % rbx;\n            ecx = 0;\n            cl = (rbx > 0x80) ? 1 : 0;\n            rcx += rax;\n        }\n        rax = 0x7fffffffffffffff;\n        edx = 0;\n        rax = rdx:rax / rbx;\n        rdx = rdx:rax % rbx;\n        if (rax < rcx) {\n            goto label_1;\n        }\n    }\n    *(rsi) = rcx;\n    rbx *= rcx;\n    if (rdi != 0) {\n        if (rbx != 0) {\n            goto label_2;\n        }\n        eax = free (rdi);\n        eax = 0;\n        return rax;\n    }\nlabel_2:\n    rax = realloc (rdi, rbx);\n    if (rbx != 0) {\n        if (rax == 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    xalloc_die ();\nlabel_1:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.xcharalloc",
            "funcStartAddr": "404cf0",
            "funcEndAddr": "404d0a",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404cf0 */\n#include <stdint.h>\n \nuint64_t dbg_xcharalloc (int64_t arg1, size_t n, void * p) {\n    rdi = arg1;\n    rbx = n;\n    rax = p;\n    /* char * xcharalloc(size_t n); */\n    rbx = rdi;\n    rax = malloc (rdi);\n    if (rbx != 0) {\n        if (rax == 0) {\n            goto label_0;\n        }\n    }\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.x2realloc",
            "funcStartAddr": "404d10",
            "funcEndAddr": "404d74",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404d10 */\n#include <stdint.h>\n \nint64_t dbg_x2realloc (size_t n, void * p, size_t * pn) {\n    rbx = n;\n    rdi = p;\n    rsi = pn;\n    /* void * x2realloc(void * p,size_t * pn); */\n    rax = *(rsi);\n    if (rdi != 0) {\n        rcx = 0x5555555555555554;\n        if (rax >= rcx) {\n            goto label_0;\n        }\n        rbx = rax;\n        rbx >>= 1;\n        rbx += rax;\n        rbx++;\n        *(rsi) = rbx;\n        if (rbx != 0) {\n            goto label_1;\n        }\n        eax = free (rdi);\n        eax = 0;\n        return rax;\n    }\n    ebx = 0x80;\n    if (rax != 0) {\n        rbx = rax;\n    }\n    if (rbx >= 0) {\n        *(rsi) = rbx;\nlabel_1:\n        rax = realloc (rdi, rbx);\n        if (rbx != 0) {\n            if (rax == 0) {\n                goto label_2;\n            }\n        }\n        return rax;\n    }\nlabel_2:\n    xalloc_die ();\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.xzalloc",
            "funcStartAddr": "404d80",
            "funcEndAddr": "404db6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404d80 */\n#include <stdint.h>\n \nuint64_t dbg_xzalloc (int64_t arg1, size_t n, void * p) {\n    rdi = arg1;\n    rbx = n;\n    r14 = p;\n    /* void * xzalloc(size_t s); */\n    rbx = rdi;\n    rax = malloc (rdi);\n    r14 = rax;\n    if (rbx != 0) {\n        if (r14 == 0) {\n            goto label_0;\n        }\n    }\n    memset (r14, 0, rbx);\n    rax = r14;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.xcalloc",
            "funcStartAddr": "404dc0",
            "funcEndAddr": "404de6",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404dc0 */\n#include <stdint.h>\n \nint64_t dbg_xcalloc (size_t n, void * p, size_t s) {\n    rdi = n;\n    rax = p;\n    rsi = s;\n    /* void * xcalloc(size_t n,size_t s); */\n    rax = 0x7fffffffffffffff;\n    edx = 0;\n    rax = rdx:rax / rsi;\n    rdx = rdx:rax % rsi;\n    if (rax >= rdi) {\n        rax = rpl_calloc ();\n        if (rax == 0) {\n            goto label_0;\n        }\n        return rax;\n    }\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "sym.xmemdup",
            "funcStartAddr": "404df0",
            "funcEndAddr": "404e2c",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404df0 */\n#include <stdint.h>\n \nuint64_t xmemdup (int64_t arg1, size_t size) {\n    rdi = arg1;\n    rsi = size;\n    rbx = rsi;\n    r14 = rdi;\n    rax = malloc (rbx);\n    r15 = rax;\n    if (rbx != 0) {\n        if (r15 == 0) {\n            goto label_0;\n        }\n    }\n    memcpy (r15, r14, rbx);\n    rax = r15;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.xstrdup",
            "funcStartAddr": "404e30",
            "funcEndAddr": "404e72",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404e30 */\n#include <stdint.h>\n \nuint64_t dbg_xstrdup (int64_t arg1, size_t n, void * p, char const * string) {\n    rdi = arg1;\n    rbx = n;\n    r15 = p;\n    r14 = string;\n    /* char * xstrdup(char const * string); */\n    r14 = rdi;\n    rax = strlen (rdi);\n    rbx = rax;\n    rax = malloc (rbx + 1);\n    r15 = rax;\n    rbx++;\n    if (rbx != 0) {\n        if (r15 == 0) {\n            goto label_0;\n        }\n    }\n    memcpy (r15, r14, rbx);\n    rax = r15;\n    return rax;\nlabel_0:\n    return xalloc_die ();\n}\n"
        },
        {
            "funcName": "dbg.xalloc_die",
            "funcStartAddr": "404e80",
            "funcEndAddr": "404eb0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404e80 */\n#include <stdint.h>\n \nuint64_t dbg_xalloc_die (void) {\n    /* void xalloc_die(); */\n    ebx = *(obj.exit_failure);\n    edx = 5;\n    rax = dcgettext (0, \"memory exhausted\");\n    rcx = rax;\n    eax = 0;\n    error (ebx, 0, 0x40628d);\n    return abort ();\n}\n"
        },
        {
            "funcName": "dbg.rpl_calloc",
            "funcStartAddr": "404eb0",
            "funcEndAddr": "404efb",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404eb0 */\n#include <stdint.h>\n \nint64_t dbg_rpl_calloc (size_t bytes, size_t n, size_t s) {\n    rax = bytes;\n    rdi = n;\n    rsi = s;\n    /* void * rpl_calloc(size_t n,size_t s); */\n    eax = 1;\n    if (rdi != 0) {\n        ecx = 1;\n        if (rsi == 0) {\n            goto label_0;\n        }\n        rax = rsi;\n        rax *= rdi;\n        edx = 0;\n        rax = rdx:rax / rsi;\n        rdx = rdx:rax % rsi;\n        rax = rsi;\n        rcx = rdi;\n        if (rax == rdi) {\n            goto label_0;\n        }\n        errno_location ();\n        *(rax) = 0xc;\n        eax = 0;\n        return rax;\n    }\n    ecx = 1;\nlabel_0:\n    rdi = rcx;\n    rsi = rax;\n    return calloc ();\n}\n"
        },
        {
            "funcName": "dbg.rpl_mbrtowc",
            "funcStartAddr": "404f00",
            "funcEndAddr": "404f56",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404f00 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_mbrtowc (int64_t arg1, int64_t arg2, int64_t arg3, size_t n, mbstate_t * ps, size_t ret, char const * s) {\n    wchar_t * pwc;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r12 = n;\n    rcx = ps;\n    r15 = ret;\n    r14 = s;\n    /* size_t rpl_mbrtowc(wchar_t * pwc,char const * s,size_t n,mbstate_t * ps); */\n    r12 = rdx;\n    r14 = rsi;\n    rbx = rsp + 4;\n    if (rdi != 0) {\n        rbx = rdi;\n    }\n    rax = mbrtowc (rbx, rsi, rdx, rcx);\n    r15 = rax;\n    if (r12 != 0) {\n        if (r15 < 0xfffffffffffffffe) {\n            goto label_0;\n        }\n        edi = 0;\n        al = hard_locale ();\n        if (al != 0) {\n            goto label_0;\n        }\n        eax = *(r14);\n        *(rbx) = eax;\n        r15d = 1;\n    }\nlabel_0:\n    rax = r15;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.close_stream",
            "funcStartAddr": "404f60",
            "funcEndAddr": "404fc0",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404f60 */\n#include <stdint.h>\n \nuint64_t dbg_close_stream (FILE * __stream, int64_t arg1) {\n    rbx = __stream;\n    rdi = arg1;\n    /* int close_stream(FILE * stream); */\n    rbx = rdi;\n    rax = fpending ();\n    r14 = rax;\n    ebp = *(rbx);\n    eax = rpl_fclose (rbx);\n    if ((bpl & 0x20) == 0) {\n        cl = (eax == 0) ? 1 : 0;\n        eax = -eax;\n        ebx -= ebx;\n        if (r14 != 0) {\n            goto label_0;\n        }\n        if (cl != 0) {\n            goto label_0;\n        }\n        rax = errno_location ();\n        ecx = 0;\n        ebx = 0xffffffff;\n        if (*(rax) == 9) {\n            ebx = ecx;\n        }\n    } else {\n        ebx = 0xffffffff;\n        if (eax != 0) {\n            goto label_0;\n        }\n        errno_location ();\n        *(rax) = 0;\n    }\nlabel_0:\n    eax = ebx;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.hard_locale",
            "funcStartAddr": "404fc0",
            "funcEndAddr": "405002",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x404fc0 */\n#include <stdint.h>\n \nuint64_t dbg_hard_locale (int32_t category, char const * p) {\n    rdi = category;\n    rbx = p;\n    /* _Bool hard_locale(int category); */\n    rax = setlocale (rdi, 0);\n    rbx = rax;\n    bpl = 1;\n    if (rbx != 0) {\n        eax = strcmp (rbx, 0x406c00);\n        if (eax != 0) {\n            eax = strcmp (rbx, \"POSIX\");\n            if (eax != 0) {\n                goto label_0;\n            }\n        }\n        ebp = 0;\n    }\nlabel_0:\n    eax = ebp;\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.locale_charset",
            "funcStartAddr": "405010",
            "funcEndAddr": "405035",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405010 */\n#include <stdint.h>\n \nuint64_t dbg_locale_charset (char const * codeset) {\n    rax = codeset;\n    /* char const * locale_charset(); */\n    rax = nl_langinfo (0xe);\n    ecx = 0x406096;\n    if (rax != 0) {\n        rcx = rax;\n    }\n    eax = \"ASCII\";\n    if (*(rcx) != 0) {\n        rax = rcx;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "dbg.rpl_fclose",
            "funcStartAddr": "405040",
            "funcEndAddr": "4050b4",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405040 */\n#include <stdint.h>\n \nuint64_t dbg_rpl_fclose (int64_t arg1, int32_t fd, FILE * fp) {\n    rdi = arg1;\n    rax = fd;\n    rbx = fp;\n    /* int rpl_fclose(FILE * fp); */\n    rbx = rdi;\n    eax = fileno (rdi);\n    if (eax >= 0) {\n        rdi = rbx;\n        eax = freading ();\n        if (eax != 0) {\n            eax = fileno (rbx);\n            esi = 0;\n            edx = 1;\n            edi = eax;\n            rax = lseek ();\n            if (rax == -1) {\n                goto label_0;\n            }\n        }\n        eax = rpl_fflush (rbx);\n        if (eax == 0) {\n            goto label_0;\n        }\n        rax = errno_location ();\n        r14 = rax;\n        ebp = *(r14);\n        fclose (rbx);\n        if (ebp != 0) {\n            *(r14) = ebp;\n            eax = 0xffffffff;\n        }\n        return rax;\n    }\nlabel_0:\n    rdi = rbx;\n    return fclose ();\n}\n"
        },
        {
            "funcName": "dbg.rpl_fflush",
            "funcStartAddr": "4050c0",
            "funcEndAddr": "4050f3",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4050c0 */\n#include <stdint.h>\n \nuint32_t dbg_rpl_fflush (int64_t arg1, FILE * fp) {\n    rdi = arg1;\n    rbx = fp;\n    /* int rpl_fflush(FILE * stream); */\n    rbx = rdi;\n    if (rbx != 0) {\n        rdi = rbx;\n        eax = freading ();\n        if (eax == 0) {\n            goto label_0;\n        }\n        if ((*((rbx + 1)) & 1) == 0) {\n            goto label_0;\n        }\n        rpl_fseeko (rbx, 0, 1);\n    }\nlabel_0:\n    rdi = rbx;\n    return fflush ();\n}\n"
        },
        {
            "funcName": "dbg.rpl_fseeko",
            "funcStartAddr": "405100",
            "funcEndAddr": "40516d",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405100 */\n#include <stdint.h>\n \nint64_t dbg_rpl_fseeko (int64_t arg1, int64_t arg2, int64_t arg3, FILE * fp, off_t pos, int32_t whence) {\n    off_t offset;\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    rbx = fp;\n    rax = pos;\n    r14 = whence;\n    /* int rpl_fseeko(FILE * fp,off_t offset,int whence); */\n    r14d = edx;\n    rbx = rdi;\n    rax = *((rbx + 0x10));\n    if (rax == *((rbx + 8))) {\n        rax = *((rbx + 0x28));\n        if (rax != *((rbx + 0x20))) {\n            goto label_0;\n        }\n        if (*((rbx + 0x48)) == 0) {\n            goto label_1;\n        }\n    }\nlabel_0:\n    rdi = rbx;\n    rsi = rbp;\n    edx = r14d;\n    r14 = rbx;\n    void (*0x402250)() ();\nlabel_1:\n    eax = fileno (rbx);\n    edi = eax;\n    rsi = rbp;\n    edx = r14d;\n    rax = lseek ();\n    if (rax != -1) {\n        *(rbx) &= 0xef;\n        *((rbx + 0x90)) = rax;\n        eax = 0;\n    } else {\n        eax = 0xffffffff;\n    }\n    return rax;\n}\n"
        },
        {
            "funcName": "sym.__libc_csu_init",
            "funcStartAddr": "405170",
            "funcEndAddr": "4051d5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x405170 */\n#include <stdint.h>\n \nuint64_t libc_csu_init (int64_t arg1, int64_t arg2, int64_t arg3) {\n    rdi = arg1;\n    rsi = arg2;\n    rdx = arg3;\n    r15 = obj___frame_dummy_init_array_entry;\n    r14 = rdx;\n    r13 = rsi;\n    r12d = edi;\n    rbp = obj___do_global_dtors_aux_fini_array_entry;\n    rbp -= r15;\n    rax = _init ();\n    rbp >>= 3;\n    if (rbp == 0) {\n        goto label_0;\n    }\n    ebx = 0;\n    do {\n        rdx = r14;\n        rsi = r13;\n        edi = r12d;\n        uint64_t (*r15 + rbx*8)() ();\n        rbx++;\n    } while (rbp != rbx);\nlabel_0:\n    return rax;\n}\n"
        },
        {
            "funcName": "sym.__libc_csu_fini",
            "funcStartAddr": "4051e0",
            "funcEndAddr": "4051e5",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4051e0 */\n#include <stdint.h>\n \nvoid libc_csu_fini (void) {\n}\n"
        },
        {
            "funcName": "sym.atexit",
            "funcStartAddr": "4051f0",
            "funcEndAddr": "405202",
            "decompiledFuncCode": "/* r2dec pseudo code output */\n/* nostrip @ 0x4051f0 */\n#include <stdint.h>\n \nvoid atexit (void) {\n    rdx = *(obj.__dso_handle);\n    esi = 0;\n    return cxa_atexit ();\n}\n"
        }
    ],
    "funcCount": 71
}